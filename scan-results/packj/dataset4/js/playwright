{
  "pkgs": [
    {
      "pkgName": "playwright",
      "language": "JAVASCRIPT",
      "config": {
        "apis": [
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "readFile",
            "fullName": "fs.readFile",
            "baseType": "fs",
            "id": 1,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "readFileSync",
            "fullName": "fs.readFileSync",
            "baseType": "fs",
            "id": 2,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "getPrivateKey",
            "fullName": "ecdh.getPrivateKey",
            "baseType": "ecdh",
            "id": 3,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_ACCOUNT"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "getPrivateKey",
            "fullName": "diffieHellman.getPrivateKey",
            "baseType": "diffieHellman",
            "id": 4,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_ACCOUNT"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "read",
            "fullName": "fs.read",
            "baseType": "fs",
            "id": 5,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "readdir",
            "fullName": "fs.readdir",
            "baseType": "fs",
            "id": 6,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "readdirSync",
            "fullName": "fs.readdirSync",
            "baseType": "fs",
            "id": 7,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "readSync",
            "fullName": "fs.readSync",
            "baseType": "fs",
            "id": 8,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "read",
            "fullName": "filehandle.read",
            "baseType": "filehandle",
            "id": 9,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "readFile",
            "fullName": "filehandle.readFile",
            "baseType": "filehandle",
            "id": 10,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "readdir",
            "fullName": "fsPromises.readdir",
            "baseType": "fsPromises",
            "id": 11,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "readFile",
            "fullName": "fsPromises.readFile",
            "baseType": "fsPromises",
            "id": 12,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "createReadStream",
            "fullName": "fs.createReadStream",
            "baseType": "fs",
            "id": 13,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "getTicketKeys",
            "fullName": "server.getTicketKeys",
            "baseType": "server",
            "id": 14,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_ACCOUNT"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "request",
            "fullName": "https.request",
            "baseType": "https",
            "id": 15,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "get",
            "fullName": "https.get",
            "baseType": "https",
            "id": 16,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "request",
            "fullName": "http.request",
            "baseType": "http",
            "id": 17,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "evaluate",
            "fullName": "module.evaluate",
            "baseType": "module",
            "id": 18,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "eval",
            "fullName": "eval",
            "id": 19,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "instantiate",
            "fullName": "WebAssembly.instantiate",
            "baseType": "WebAssembly",
            "id": 20,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "instantiateStreaming",
            "fullName": "WebAssembly.instantiateStreaming",
            "baseType": "WebAssembly",
            "id": 21,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "compile",
            "fullName": "WebAssembly.compile",
            "baseType": "WebAssembly",
            "id": 22,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "compileStreaming",
            "fullName": "WebAssembly.compileStreaming",
            "baseType": "WebAssembly",
            "id": 23,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "fork",
            "fullName": "cluster.fork",
            "baseType": "cluster",
            "id": 24,
            "functionality": "DANGER",
            "sinkType": "SINK_PROCESS_OPERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "runInContext",
            "fullName": "script.runInContext",
            "baseType": "script",
            "id": 25,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "runInNewContext",
            "fullName": "script.runInNewContext",
            "baseType": "script",
            "id": 26,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "runInThisContext",
            "fullName": "script.runInThisContext",
            "baseType": "script",
            "id": 27,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "runInContext",
            "fullName": "vm.runInContext",
            "baseType": "vm",
            "id": 28,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "runInNewContext",
            "fullName": "vm.runInNewContext",
            "baseType": "vm",
            "id": 29,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "runInThisContext",
            "fullName": "vm.runInThisContext",
            "baseType": "vm",
            "id": 30,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "copyFile",
            "fullName": "fs.copyFile",
            "baseType": "fs",
            "id": 31,
            "functionality": "SINK",
            "sinkType": "SINK_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "copyFileSync",
            "fullName": "fs.copyFileSync",
            "baseType": "fs",
            "id": 32,
            "functionality": "SINK",
            "sinkType": "SINK_FILE"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "exec",
            "fullName": "child_process.exec",
            "baseType": "child_process",
            "id": 33,
            "functionality": "DANGER",
            "sinkType": "SINK_PROCESS_OPERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "execFile",
            "fullName": "child_process.execFile",
            "baseType": "child_process",
            "id": 34,
            "functionality": "DANGER",
            "sinkType": "SINK_PROCESS_OPERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "fork",
            "fullName": "child_process.fork",
            "baseType": "child_process",
            "id": 35,
            "functionality": "DANGER",
            "sinkType": "SINK_PROCESS_OPERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "spawn",
            "fullName": "child_process.spawn",
            "baseType": "child_process",
            "id": 36,
            "functionality": "DANGER",
            "sinkType": "SINK_PROCESS_OPERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "execFileSync",
            "fullName": "child_process.execFileSync",
            "baseType": "child_process",
            "id": 37,
            "functionality": "DANGER",
            "sinkType": "SINK_PROCESS_OPERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "execSync",
            "fullName": "child_process.execSync",
            "baseType": "child_process",
            "id": 38,
            "functionality": "DANGER",
            "sinkType": "SINK_PROCESS_OPERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "spawnSync",
            "fullName": "child_process.spawnSync",
            "baseType": "child_process",
            "id": 39,
            "functionality": "DANGER",
            "sinkType": "SINK_PROCESS_OPERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "send",
            "fullName": "worker.send",
            "baseType": "worker",
            "id": 40,
            "functionality": "SINK",
            "sinkType": "SINK_PROCESS_OPERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "send",
            "fullName": "subprocess.send",
            "baseType": "subprocess",
            "id": 41,
            "functionality": "SINK",
            "sinkType": "SINK_PROCESS_OPERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "send",
            "fullName": "socket.send",
            "baseType": "socket",
            "id": 42,
            "functionality": "SINK",
            "sinkType": "SINK_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "write",
            "fullName": "request.write",
            "baseType": "request",
            "id": 43,
            "functionality": "SINK",
            "sinkType": "SINK_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "write",
            "fullName": "response.write",
            "baseType": "response",
            "id": 44,
            "functionality": "SINK",
            "sinkType": "SINK_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "Reflect",
            "fullName": "Reflect",
            "id": 45,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "Proxy",
            "fullName": "Proxy",
            "id": 46,
            "functionality": "DANGER",
            "sinkType": "SINK_CODE_GENERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "pushStream",
            "fullName": "http2stream.pushStream",
            "baseType": "http2stream",
            "id": 47,
            "functionality": "SINK",
            "sinkType": "SINK_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "write",
            "fullName": "response.write",
            "baseType": "response",
            "id": 48,
            "functionality": "SINK",
            "sinkType": "SINK_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "dlopen",
            "fullName": "process.dlopen",
            "baseType": "process",
            "id": 49,
            "functionality": "SINK",
            "sinkType": "SINK_PROCESS_OPERATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "open",
            "fullName": "inspector.open",
            "baseType": "inspector",
            "id": 50,
            "functionality": "SINK",
            "sinkType": "SINK_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "post",
            "fullName": "session.post",
            "baseType": "session",
            "id": 51,
            "functionality": "SINK",
            "sinkType": "SINK_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "write",
            "fullName": "socket.write",
            "baseType": "socket",
            "id": 52,
            "functionality": "SINK",
            "sinkType": "SINK_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "get",
            "fullName": "http.get",
            "baseType": "http",
            "id": 53,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "connect",
            "fullName": "socket.connect",
            "baseType": "socket",
            "id": 54,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_NETWORK"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "decode",
            "fullName": "Base64.decode",
            "baseType": "Base64",
            "id": 55,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_OBFUSCATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "from",
            "fullName": "Buffer.from",
            "baseType": "Buffer",
            "id": 56,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_OBFUSCATION"
          },
          {
            "type": "FUNCTION_DECL_REF_EXPR",
            "name": "Buffer",
            "fullName": "Buffer",
            "id": 57,
            "functionality": "SOURCE",
            "sourceType": "SOURCE_OBFUSCATION"
          }
        ],
        "smtFormula": "((1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 53 | 54) & (31 | 32 | 40 | 41 | 42 | 43 | 44 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57)) | (18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 45 | 46)"
      },
      "apiResults": [
        {
          "type": "FUNCTION_DECL_REF_EXPR",
          "name": "readFileSync",
          "fullName": "fs.readFileSync",
          "baseType": "fs",
          "arguments": [
            "'/etc/passwd'",
            "'utf8'"
          ],
          "source": "fs.readFileSync('/etc/passwd', 'utf8')",
          "range": {
            "start": {
              "row": 23,
              "column": 19,
              "fileInfo": {
                "filename": "index.js",
                "relpath": "package",
                "file": "package/index.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            },
            "end": {
              "row": 23,
              "column": 57,
              "fileInfo": {
                "filename": "index.js",
                "relpath": "package",
                "file": "package/index.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            }
          }
        },
        {
          "type": "FUNCTION_DECL_REF_EXPR",
          "name": "request",
          "fullName": "https.request",
          "baseType": "https",
          "arguments": [
            "options",
            "(res) => {\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n}"
          ],
          "source": "https.request(options, (res) => {\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n})",
          "range": {
            "start": {
              "row": 44,
              "column": 12,
              "fileInfo": {
                "filename": "index.js",
                "relpath": "package",
                "file": "package/index.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            },
            "end": {
              "row": 48,
              "column": 2,
              "fileInfo": {
                "filename": "index.js",
                "relpath": "package",
                "file": "package/index.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            }
          }
        },
        {
          "type": "FUNCTION_DECL_REF_EXPR",
          "name": "from",
          "fullName": "Buffer.from",
          "baseType": "Buffer",
          "arguments": [
            "options.body"
          ],
          "source": "Buffer.from(options.body)",
          "range": {
            "start": {
              "row": 260,
              "column": 47,
              "fileInfo": {
                "filename": "util.js",
                "relpath": "package/lib",
                "file": "package/lib/util.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            },
            "end": {
              "row": 260,
              "column": 72,
              "fileInfo": {
                "filename": "util.js",
                "relpath": "package/lib",
                "file": "package/lib/util.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            }
          }
        },
        {
          "type": "FUNCTION_DECL_REF_EXPR",
          "name": "eval",
          "fullName": "eval",
          "arguments": [
            "`import(${JSON.stringify(_url.default.pathToFileURL(file))})`"
          ],
          "source": "eval(`import(${JSON.stringify(_url.default.pathToFileURL(file))})`)",
          "range": {
            "start": {
              "row": 190,
              "column": 28,
              "fileInfo": {
                "filename": "transform.js",
                "relpath": "package/lib/transform",
                "file": "package/lib/transform/transform.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            },
            "end": {
              "row": 190,
              "column": 95,
              "fileInfo": {
                "filename": "transform.js",
                "relpath": "package/lib/transform",
                "file": "package/lib/transform/transform.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            }
          }
        },
        {
          "type": "FUNCTION_DECL_REF_EXPR",
          "name": "readFileSync",
          "fullName": "fs.readFileSync",
          "baseType": "fs",
          "arguments": [
            "configFilePath",
            "'utf-8'"
          ],
          "source": "fs.readFileSync(configFilePath, 'utf-8')",
          "range": {
            "start": {
              "row": 93,
              "column": 23,
              "fileInfo": {
                "filename": "tsconfig-loader.js",
                "relpath": "package/lib/third_party",
                "file": "package/lib/third_party/tsconfig-loader.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            },
            "end": {
              "row": 93,
              "column": 63,
              "fileInfo": {
                "filename": "tsconfig-loader.js",
                "relpath": "package/lib/third_party",
                "file": "package/lib/third_party/tsconfig-loader.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            }
          }
        },
        {
          "type": "FUNCTION_DECL_REF_EXPR",
          "name": "from",
          "fullName": "Buffer.from",
          "baseType": "Buffer",
          "arguments": [
            "magicBytes"
          ],
          "source": "Buffer.from(magicBytes)",
          "range": {
            "start": {
              "row": 366,
              "column": 24,
              "fileInfo": {
                "filename": "toMatchSnapshot.js",
                "relpath": "package/lib/matchers",
                "file": "package/lib/matchers/toMatchSnapshot.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            },
            "end": {
              "row": 366,
              "column": 47,
              "fileInfo": {
                "filename": "toMatchSnapshot.js",
                "relpath": "package/lib/matchers",
                "file": "package/lib/matchers/toMatchSnapshot.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            }
          }
        },
        {
          "type": "FUNCTION_DECL_REF_EXPR",
          "name": "Proxy",
          "fullName": "Proxy",
          "arguments": [
            "(0, _expectBundle.expect)(actual)",
            "new ExpectMetaInfoProxyHandler(info)"
          ],
          "source": "new Proxy((0, _expectBundle.expect)(actual), new ExpectMetaInfoProxyHandler(info))",
          "range": {
            "start": {
              "row": 53,
              "column": 9,
              "fileInfo": {
                "filename": "expect.js",
                "relpath": "package/lib/matchers",
                "file": "package/lib/matchers/expect.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            },
            "end": {
              "row": 53,
              "column": 91,
              "fileInfo": {
                "filename": "expect.js",
                "relpath": "package/lib/matchers",
                "file": "package/lib/matchers/expect.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            }
          }
        },
        {
          "type": "FUNCTION_DECL_REF_EXPR",
          "name": "Proxy",
          "fullName": "Proxy",
          "arguments": [
            "_expectBundle.expect",
            "{\n    apply: function (target, thisArg, argumentsList) {\n      const [actual, messageOrOptions] = argumentsList;\n      const message = (0, _utils.isString)(messageOrOptions) ? messageOrOptions : (messageOrOptions === null || messageOrOptions === void 0 ? void 0 : messageOrOptions.message) || info.message;\n      const newInfo = {\n        ...info,\n        message\n      };\n      if (newInfo.isPoll) {\n        if (typeof actual !== 'function') throw new Error('`expect.poll()` accepts only function as a first argument');\n        newInfo.generator = actual;\n      }\n      return createMatchers(actual, newInfo);\n    },\n    get: function (target, property) {\n      if (property === 'configure') return configure;\n      if (property === 'extend') {\n        return matchers => {\n          const wrappedMatchers = {};\n          for (const [name, matcher] of Object.entries(matchers)) {\n            wrappedMatchers[name] = function (...args) {\n              const {\n                isNot,\n                promise,\n                utils\n              } = this;\n              const newThis = {\n                isNot,\n                promise,\n                utils,\n                timeout: currentExpectTimeout()\n              };\n              return matcher.call(newThis, ...args);\n            };\n          }\n          _expectBundle.expect.extend(wrappedMatchers);\n          return expectInstance;\n        };\n      }\n      if (property === 'soft') {\n        return (actual, messageOrOptions) => {\n          return configure({\n            soft: true\n          })(actual, messageOrOptions);\n        };\n      }\n      if (property === 'poll') {\n        return (actual, messageOrOptions) => {\n          const poll = (0, _utils.isString)(messageOrOptions) ? {} : messageOrOptions || {};\n          return configure({\n            _poll: poll\n          })(actual, messageOrOptions);\n        };\n      }\n      return _expectBundle.expect[property];\n    }\n  }"
          ],
          "source": "new Proxy(_expectBundle.expect, {\n    apply: function (target, thisArg, argumentsList) {\n      const [actual, messageOrOptions] = argumentsList;\n      const message = (0, _utils.isString)(messageOrOptions) ? messageOrOptions : (messageOrOptions === null || messageOrOptions === void 0 ? void 0 : messageOrOptions.message) || info.message;\n      const newInfo = {\n        ...info,\n        message\n      };\n      if (newInfo.isPoll) {\n        if (typeof actual !== 'function') throw new Error('`expect.poll()` accepts only function as a first argument');\n        newInfo.generator = actual;\n      }\n      return createMatchers(actual, newInfo);\n    },\n    get: function (target, property) {\n      if (property === 'configure') return configure;\n      if (property === 'extend') {\n        return matchers => {\n          const wrappedMatchers = {};\n          for (const [name, matcher] of Object.entries(matchers)) {\n            wrappedMatchers[name] = function (...args) {\n              const {\n                isNot,\n                promise,\n                utils\n              } = this;\n              const newThis = {\n                isNot,\n                promise,\n                utils,\n                timeout: currentExpectTimeout()\n              };\n              return matcher.call(newThis, ...args);\n            };\n          }\n          _expectBundle.expect.extend(wrappedMatchers);\n          return expectInstance;\n        };\n      }\n      if (property === 'soft') {\n        return (actual, messageOrOptions) => {\n          return configure({\n            soft: true\n          })(actual, messageOrOptions);\n        };\n      }\n      if (property === 'poll') {\n        return (actual, messageOrOptions) => {\n          const poll = (0, _utils.isString)(messageOrOptions) ? {} : messageOrOptions || {};\n          return configure({\n            _poll: poll\n          })(actual, messageOrOptions);\n        };\n      }\n      return _expectBundle.expect[property];\n    }\n  })",
          "range": {
            "start": {
              "row": 56,
              "column": 25,
              "fileInfo": {
                "filename": "expect.js",
                "relpath": "package/lib/matchers",
                "file": "package/lib/matchers/expect.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            },
            "end": {
              "row": 112,
              "column": 4,
              "fileInfo": {
                "filename": "expect.js",
                "relpath": "package/lib/matchers",
                "file": "package/lib/matchers/expect.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            }
          }
        },
        {
          "type": "FUNCTION_DECL_REF_EXPR",
          "name": "from",
          "fullName": "Buffer.from",
          "baseType": "Buffer",
          "arguments": [
            "params.buffer",
            "'base64'"
          ],
          "source": "Buffer.from(params.buffer, 'base64')",
          "range": {
            "start": {
              "row": 531,
              "column": 9,
              "fileInfo": {
                "filename": "dispatcher.js",
                "relpath": "package/lib/runner",
                "file": "package/lib/runner/dispatcher.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            },
            "end": {
              "row": 531,
              "column": 45,
              "fileInfo": {
                "filename": "dispatcher.js",
                "relpath": "package/lib/runner",
                "file": "package/lib/runner/dispatcher.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            }
          }
        },
        {
          "type": "FUNCTION_DECL_REF_EXPR",
          "name": "from",
          "fullName": "Buffer.from",
          "baseType": "Buffer",
          "arguments": [
            "chunk"
          ],
          "source": "Buffer.from(chunk)",
          "range": {
            "start": {
              "row": 40,
              "column": 12,
              "fileInfo": {
                "filename": "ipc.js",
                "relpath": "package/lib/common",
                "file": "package/lib/common/ipc.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            },
            "end": {
              "row": 40,
              "column": 30,
              "fileInfo": {
                "filename": "ipc.js",
                "relpath": "package/lib/common",
                "file": "package/lib/common/ipc.js",
                "directory": "/home/seed/packj/datasets/dataset4/js-extracted/playwright"
              }
            }
          }
        }
      ]
    }
  ]
}