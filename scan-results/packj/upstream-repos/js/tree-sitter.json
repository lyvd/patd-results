{
    "Files": [
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/Makefile",
            "LoC": 119,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/CONTRIBUTING.md",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/FUNDING.json",
            "LoC": 8,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/README.md",
            "LoC": 22,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.dockerignore",
            "LoC": 3,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/Cargo.toml",
            "LoC": 154,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/Package.swift",
            "LoC": 26,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/LICENSE",
            "LoC": 22,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/build.zig.zon",
            "LoC": 70,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/CHANGELOG.md",
            "LoC": 664,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/Cargo.lock",
            "LoC": 2398,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/build.zig",
            "LoC": 117,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/rustfmt.toml",
            "LoC": 7,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/Dockerfile",
            "LoC": 11,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.editorconfig",
            "LoC": 16,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.gitattributes",
            "LoC": 8,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.gitignore",
            "LoC": 37,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/README.md",
            "LoC": 45,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/build.rs",
            "LoC": 143,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/Cargo.toml",
            "LoC": 79,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/README.md",
            "LoC": 5,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/Cargo.toml",
            "LoC": 35,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/node_types.rs",
            "LoC": 1841,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/parse_grammar.rs",
            "LoC": 344,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/grammars.rs",
            "LoC": 262,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/dsl.js",
            "LoC": 501,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/dedup.rs",
            "LoC": 64,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/lib.rs",
            "LoC": 252,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/rules.rs",
            "LoC": 494,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/grammar_files.rs",
            "LoC": 2,
            "Native": false,
            "Binary": true
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/render.rs",
            "LoC": 1732,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/nfa.rs",
            "LoC": 1131,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/tables.rs",
            "LoC": 167,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/prepare_grammar/extract_default_aliases.rs",
            "LoC": 305,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/prepare_grammar/mod.rs",
            "LoC": 252,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/prepare_grammar/process_inlines.rs",
            "LoC": 548,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/prepare_grammar/unicode-categories.json",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/prepare_grammar/unicode-property-aliases.json",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/prepare_grammar/expand_repeats.rs",
            "LoC": 290,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/prepare_grammar/intern_symbols.rs",
            "LoC": 257,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/prepare_grammar/unicode-properties.json",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/prepare_grammar/expand_tokens.rs",
            "LoC": 941,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/prepare_grammar/unicode-category-aliases.json",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/prepare_grammar/flatten_grammar.rs",
            "LoC": 454,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/prepare_grammar/extract_tokens.rs",
            "LoC": 555,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/templates/array.h",
            "LoC": 292,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/templates/alloc.h",
            "LoC": 55,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/build_tables/token_conflicts.rs",
            "LoC": 530,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/build_tables/minimize_parse_table.rs",
            "LoC": 494,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/build_tables/build_lex_table.rs",
            "LoC": 427,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/build_tables/mod.rs",
            "LoC": 495,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/build_tables/item.rs",
            "LoC": 417,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/build_tables/coincident_tokens.rs",
            "LoC": 80,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/build_tables/item_set_builder.rs",
            "LoC": 346,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/generate/src/build_tables/build_parse_table.rs",
            "LoC": 1008,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/npm/install.js",
            "LoC": 136,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/npm/cli.js",
            "LoC": 13,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/npm/dsl.d.ts",
            "LoC": 380,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/npm/package.json",
            "LoC": 28,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/npm/.gitignore",
            "LoC": 7,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/vendor/xterm-colors.json",
            "LoC": 259,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tags.rs",
            "LoC": 99,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/util.rs",
            "LoC": 131,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/playground.rs",
            "LoC": 145,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/test.rs",
            "LoC": 1513,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/parse.rs",
            "LoC": 874,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/playground.html",
            "LoC": 177,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/test_tags.rs",
            "LoC": 190,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/lib.rs",
            "LoC": 25,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/init.rs",
            "LoC": 968,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/logger.rs",
            "LoC": 31,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/query.rs",
            "LoC": 147,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/test_highlight.rs",
            "LoC": 274,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/highlight.rs",
            "LoC": 480,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/main.rs",
            "LoC": 1462,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/version.rs",
            "LoC": 265,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/query_testing.rs",
            "LoC": 235,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/wasm.rs",
            "LoC": 112,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/fuzz/edits.rs",
            "LoC": 62,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/fuzz/mod.rs",
            "LoC": 378,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/fuzz/corpus_test.rs",
            "LoC": 148,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/fuzz/scope_sequence.rs",
            "LoC": 92,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/fuzz/random.rs",
            "LoC": 45,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/fuzz/allocations.rs",
            "LoC": 123,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/PARSER_NAME.h",
            "LoC": 17,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/makefile",
            "LoC": 95,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/binding.go",
            "LoC": 16,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/tests.swift",
            "LoC": 13,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/__init__.pyi",
            "LoC": 11,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/build.rs",
            "LoC": 22,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/index.d.ts",
            "LoC": 29,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/binding_test.go",
            "LoC": 16,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/go.mod",
            "LoC": 6,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/js-binding.cc",
            "LoC": 21,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/py-binding.c",
            "LoC": 28,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/gitignore",
            "LoC": 41,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/gitattributes",
            "LoC": 38,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/package.swift",
            "LoC": 42,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/__init__.py",
            "LoC": 43,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/PARSER_NAME.pc.in",
            "LoC": 11,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/package.json",
            "LoC": 52,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/.editorconfig",
            "LoC": 47,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/pyproject.toml",
            "LoC": 30,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/_cargo.toml",
            "LoC": 28,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/cmakelists.cmake",
            "LoC": 59,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/lib.rs",
            "LoC": 54,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/test_binding.py",
            "LoC": 12,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/binding.gyp",
            "LoC": 36,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/setup.py",
            "LoC": 65,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/index.js",
            "LoC": 8,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/grammar.js",
            "LoC": 18,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/binding_test.js",
            "LoC": 10,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/highlight_test.rs",
            "LoC": 770,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/detect_language.rs",
            "LoC": 141,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/pathological_test.rs",
            "LoC": 16,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/tree_test.rs",
            "LoC": 760,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/parser_test.rs",
            "LoC": 1584,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/async_context_test.rs",
            "LoC": 285,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/mod.rs",
            "LoC": 27,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/corpus_test.rs",
            "LoC": 430,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/test_tags_test.rs",
            "LoC": 63,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/parser_hang_test.rs",
            "LoC": 104,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/language_test.rs",
            "LoC": 98,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/tags_test.rs",
            "LoC": 446,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/text_provider_test.rs",
            "LoC": 175,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/wasm_language_test.rs",
            "LoC": 277,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/query_test.rs",
            "LoC": 5205,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/test_highlight_test.rs",
            "LoC": 71,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/node_test.rs",
            "LoC": 1053,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/proc_macro/Cargo.toml",
            "LoC": 19,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/proc_macro/src/lib.rs",
            "LoC": 136,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/helpers/edits.rs",
            "LoC": 50,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/helpers/mod.rs",
            "LoC": 5,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/helpers/dirs.rs",
            "LoC": 48,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/helpers/fixtures.rs",
            "LoC": 135,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/helpers/allocations.rs",
            "LoC": 122,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/tests/helpers/query_helpers.rs",
            "LoC": 364,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/loader/README.md",
            "LoC": 7,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/loader/build.rs",
            "LoC": 14,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/loader/Cargo.toml",
            "LoC": 44,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/loader/emscripten-version",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/loader/src/lib.rs",
            "LoC": 1589,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/config/README.md",
            "LoC": 8,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/config/Cargo.toml",
            "LoC": 23,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/config/src/lib.rs",
            "LoC": 137,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/eslint/package-lock.json",
            "LoC": 1302,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/eslint/package.json",
            "LoC": 25,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/eslint/index.js",
            "LoC": 122,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/benches/benchmark.rs",
            "LoC": 223,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/dependabot.yml",
            "LoC": 27,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/make.sh",
            "LoC": 10,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/tree-sitter.sh",
            "LoC": 10,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/reviewers_remove.js",
            "LoC": 17,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/close_unresponsive.js",
            "LoC": 59,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/remove_response_label.js",
            "LoC": 20,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/cross.sh",
            "LoC": 4,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/workflows/reviewers_remove.yml",
            "LoC": 26,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/workflows/sanitize.yml",
            "LoC": 52,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/workflows/ci.yml",
            "LoC": 38,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/workflows/build.yml",
            "LoC": 237,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/workflows/backport.yml",
            "LoC": 32,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/workflows/response.yml",
            "LoC": 49,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/workflows/release.yml",
            "LoC": 101,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/workflows/nvim_ts.yml",
            "LoC": 67,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/ISSUE_TEMPLATE/bug_report.yml",
            "LoC": 42,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/ISSUE_TEMPLATE/config.yml",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/ISSUE_TEMPLATE/feature_request.yml",
            "LoC": 24,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/actions/cache/action.yml",
            "LoC": 24,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/README.md",
            "LoC": 7,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/Cargo.toml",
            "LoC": 61,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/.ccls",
            "LoC": 5,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/tree-sitter.pc.in",
            "LoC": 11,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/CMakeLists.txt",
            "LoC": 96,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/include/tree_sitter/api.h",
            "LoC": 1319,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/language.c",
            "LoC": 224,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/point.h",
            "LoC": 63,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/tree_cursor.c",
            "LoC": 713,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/wasm_store.c",
            "LoC": 1860,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/lib.c",
            "LoC": 13,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/get_changed_ranges.c",
            "LoC": 502,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/node.c",
            "LoC": 921,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/stack.h",
            "LoC": 131,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/stack.c",
            "LoC": 900,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/alloc.c",
            "LoC": 49,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/array.h",
            "LoC": 292,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/query.c",
            "LoC": 4188,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/tree.c",
            "LoC": 171,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/length.h",
            "LoC": 53,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/parser.h",
            "LoC": 267,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/subtree.c",
            "LoC": 1067,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/ts_assert.h",
            "LoC": 12,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/host.h",
            "LoC": 22,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/tree.h",
            "LoC": 32,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/alloc.h",
            "LoC": 42,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/parser.c",
            "LoC": 2166,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/get_changed_ranges.h",
            "LoC": 37,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/atomic.h",
            "LoC": 69,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/error_costs.h",
            "LoC": 12,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/tree_cursor.h",
            "LoC": 49,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/lexer.c",
            "LoC": 436,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/language.h",
            "LoC": 298,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/reduce_action.h",
            "LoC": 35,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/clock.h",
            "LoC": 147,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/subtree.h",
            "LoC": 400,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/wasm_store.h",
            "LoC": 32,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/unicode.h",
            "LoC": 84,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/lexer.h",
            "LoC": 50,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/reusable_node.h",
            "LoC": 96,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/wasm/stdlib-symbols.txt",
            "LoC": 25,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/wasm/wasm-stdlib.h",
            "LoC": 1303,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/wasm/stdlib.c",
            "LoC": 110,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/unicode/utf8.h",
            "LoC": 882,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/unicode/README.md",
            "LoC": 30,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/unicode/urename.h",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/unicode/LICENSE",
            "LoC": 415,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/unicode/utf16.h",
            "LoC": 734,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/unicode/ICU_SHA",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/unicode/utf.h",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/unicode/umachine.h",
            "LoC": 449,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/unicode/ptypes.h",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/src/portable/endian.h",
            "LoC": 207,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_rust/util.rs",
            "LoC": 46,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_rust/README.md",
            "LoC": 117,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_rust/build.rs",
            "LoC": 90,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_rust/wasm_language.rs",
            "LoC": 143,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_rust/ffi.rs",
            "LoC": 178,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_rust/lib.rs",
            "LoC": 3352,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_rust/bindings.rs",
            "LoC": 885,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/README.md",
            "LoC": 199,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/suffix.js",
            "LoC": 24,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/tree-sitter-web.d.ts",
            "LoC": 243,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/.eslintrc.js",
            "LoC": 23,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/imports.js",
            "LoC": 26,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/.npmignore",
            "LoC": 6,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/binding.c",
            "LoC": 902,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/binding.js",
            "LoC": 1546,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/prefix.js",
            "LoC": 20,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/exports.txt",
            "LoC": 109,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/package.json",
            "LoC": 37,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/.gitignore",
            "LoC": 7,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/check-artifacts-fresh.js",
            "LoC": 37,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "LoC": 393,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "LoC": 425,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "LoC": 88,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "LoC": 16,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "LoC": 637,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "LoC": 482,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/language/language.rs",
            "LoC": 24,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/language/README.md",
            "LoC": 5,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/language/Cargo.toml",
            "LoC": 20,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/Gemfile",
            "LoC": 4,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/section-6-contributing.md",
            "LoC": 146,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/index.md",
            "LoC": 69,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/_config.yml",
            "LoC": 3,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/Gemfile.lock",
            "LoC": 274,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/section-3-creating-parsers.md",
            "LoC": 1114,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/section-5-implementation.md",
            "LoC": 41,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/.gitignore",
            "LoC": 4,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/section-4-syntax-highlighting.md",
            "LoC": 494,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/section-8-code-navigation-systems.md",
            "LoC": 121,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/section-2-using-parsers.md",
            "LoC": 959,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/section-7-playground.html",
            "LoC": 83,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/_layouts/default.html",
            "LoC": 138,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "LoC": 460,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/schemas/config.schema.json",
            "LoC": 276,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/schemas/grammar.schema.json",
            "LoC": 309,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/css/style.scss",
            "LoC": 204,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/readme.md",
            "LoC": 3,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/corpus.txt",
            "LoC": 25,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "LoC": 31,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/get_col_eof/corpus.txt",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/get_col_eof/scanner.c",
            "LoC": 35,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/get_col_eof/grammar.js",
            "LoC": 12,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/start_rule_is_token/corpus.txt",
            "LoC": 7,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/start_rule_is_token/grammar.js",
            "LoC": 8,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/start_rule_is_blank/corpus.txt",
            "LoC": 7,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/start_rule_is_blank/grammar.js",
            "LoC": 8,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_negative/corpus.txt",
            "LoC": 12,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_negative/readme.md",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_negative/grammar.js",
            "LoC": 18,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/invisible_start_rule/expected_error.txt",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/invisible_start_rule/grammar.js",
            "LoC": 9,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inverted_external_token/corpus.txt",
            "LoC": 33,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inverted_external_token/scanner.c",
            "LoC": 50,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inverted_external_token/readme.md",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inverted_external_token/grammar.js",
            "LoC": 16,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/get_col_should_hang_not_crash/corpus.txt",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/get_col_should_hang_not_crash/scanner.c",
            "LoC": 18,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/get_col_should_hang_not_crash/grammar.js",
            "LoC": 14,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_missing/expected_error.txt",
            "LoC": 14,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_missing/grammar.js",
            "LoC": 18,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/corpus.txt",
            "LoC": 59,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/readme.md",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/grammar.js",
            "LoC": 37,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_left/corpus.txt",
            "LoC": 8,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_left/grammar.js",
            "LoC": 18,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_unit_reductions/corpus.txt",
            "LoC": 14,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_unit_reductions/grammar.js",
            "LoC": 38,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflicting_precedence/expected_error.txt",
            "LoC": 16,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflicting_precedence/grammar.js",
            "LoC": 16,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/partially_resolved_conflict/readme.txt",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/partially_resolved_conflict/expected_error.txt",
            "LoC": 15,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/partially_resolved_conflict/grammar.js",
            "LoC": 20,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/lexical_conflicts_due_to_state_merging/corpus.txt",
            "LoC": 34,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/lexical_conflicts_due_to_state_merging/readme.md",
            "LoC": 20,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/lexical_conflicts_due_to_state_merging/grammar.js",
            "LoC": 32,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule_after_external_token/expected_error.txt",
            "LoC": 15,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule_after_external_token/grammar.js",
            "LoC": 32,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/corpus.txt",
            "LoC": 13,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/readme.txt",
            "LoC": 4,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "LoC": 49,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_tokens/corpus.txt",
            "LoC": 23,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_tokens/scanner.c",
            "LoC": 122,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_tokens/grammar.js",
            "LoC": 30,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_inlined_rules/corpus.txt",
            "LoC": 15,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_inlined_rules/grammar.js",
            "LoC": 28,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_rules/corpus.txt",
            "LoC": 20,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_rules/grammar.js",
            "LoC": 43,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/immediate_tokens/corpus.txt",
            "LoC": 30,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/immediate_tokens/grammar.js",
            "LoC": 40,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/uses_current_column/corpus.txt",
            "LoC": 77,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/uses_current_column/scanner.c",
            "LoC": 136,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/uses_current_column/grammar.js",
            "LoC": 37,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_right/corpus.txt",
            "LoC": 9,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_right/grammar.js",
            "LoC": 18,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_positive/corpus.txt",
            "LoC": 13,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_positive/readme.md",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_positive/grammar.js",
            "LoC": 18,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_missing/expected_error.txt",
            "LoC": 16,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_missing/readme.md",
            "LoC": 16,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_missing/grammar.js",
            "LoC": 18,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inlined_aliased_rules/corpus.txt",
            "LoC": 19,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inlined_aliased_rules/readme.md",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inlined_aliased_rules/grammar.js",
            "LoC": 29,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/dynamic_precedence/corpus.txt",
            "LoC": 26,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/dynamic_precedence/readme.md",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/dynamic_precedence/grammar.js",
            "LoC": 32,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule/expected_error.txt",
            "LoC": 15,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule/grammar.js",
            "LoC": 28,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_anonymous_tokens/corpus.txt",
            "LoC": 42,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_anonymous_tokens/scanner.c",
            "LoC": 67,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_anonymous_tokens/readme.md",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_anonymous_tokens/grammar.js",
            "LoC": 28,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_unicode_column_alignment/README.md",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_unicode_column_alignment/corpus.txt",
            "LoC": 94,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_unicode_column_alignment/scanner.c",
            "LoC": 88,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_unicode_column_alignment/grammar.js",
            "LoC": 18,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/epsilon_external_tokens/corpus.txt",
            "LoC": 10,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/epsilon_external_tokens/scanner.c",
            "LoC": 34,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/epsilon_external_tokens/grammar.js",
            "LoC": 10,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inline_rules/corpus.txt",
            "LoC": 21,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inline_rules/grammar.js",
            "LoC": 23,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/epsilon_rules/expected_error.txt",
            "LoC": 5,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/epsilon_rules/grammar.js",
            "LoC": 11,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/readme_grammar/corpus.txt",
            "LoC": 13,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/readme_grammar/grammar.js",
            "LoC": 37,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_extra_tokens/corpus.txt",
            "LoC": 11,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_extra_tokens/scanner.c",
            "LoC": 45,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_extra_tokens/grammar.js",
            "LoC": 15,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/depends_on_column/corpus.txt",
            "LoC": 22,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/depends_on_column/scanner.c",
            "LoC": 41,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/depends_on_column/grammar.js",
            "LoC": 8,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/unused_rules/corpus.txt",
            "LoC": 9,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/unused_rules/readme.md",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/unused_rules/grammar.js",
            "LoC": 28,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/anonymous_tokens_with_escaped_chars/corpus.txt",
            "LoC": 34,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/anonymous_tokens_with_escaped_chars/grammar.js",
            "LoC": 18,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_token_rules/corpus.txt",
            "LoC": 10,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_token_rules/grammar.js",
            "LoC": 16,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/nested_inlined_rules/corpus.txt",
            "LoC": 13,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/nested_inlined_rules/readme.md",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/nested_inlined_rules/grammar.js",
            "LoC": 23,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals_with_shared_rules/corpus.txt",
            "LoC": 24,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals_with_shared_rules/grammar.js",
            "LoC": 16,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_tokens/corpus.txt",
            "LoC": 42,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_tokens/scanner.c",
            "LoC": 65,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_tokens/grammar.js",
            "LoC": 32,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals/corpus.txt",
            "LoC": 23,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals/grammar.js",
            "LoC": 16,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/unicode_classes/corpus.txt",
            "LoC": 44,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/unicode_classes/grammar.js",
            "LoC": 21,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_rule_aliased_as_anonymous/corpus.txt",
            "LoC": 10,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_rule_aliased_as_anonymous/readme.md",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_rule_aliased_as_anonymous/grammar.js",
            "LoC": 16,
            "Native": true,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/error_corpus/c_errors.txt",
            "LoC": 175,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/error_corpus/json_errors.txt",
            "LoC": 91,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/error_corpus/python_errors.txt",
            "LoC": 115,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/error_corpus/javascript_errors.txt",
            "LoC": 190,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/error_corpus/ruby_errors.txt",
            "LoC": 23,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/error_corpus/readme.md",
            "LoC": 9,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/grammars/.gitkeep",
            "LoC": 1,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/template_corpus/ruby_templates.txt",
            "LoC": 78,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/template_corpus/readme.md",
            "LoC": 6,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/packed-refs",
            "LoC": 107,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/description",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/config",
            "LoC": 12,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/HEAD",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/info/exclude",
            "LoC": 7,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/commit-msg.sample",
            "LoC": 25,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/sendemail-validate.sample",
            "LoC": 78,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/post-update.sample",
            "LoC": 9,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/pre-rebase.sample",
            "LoC": 170,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/pre-merge-commit.sample",
            "LoC": 14,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/update.sample",
            "LoC": 129,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/prepare-commit-msg.sample",
            "LoC": 43,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/fsmonitor-watchman.sample",
            "LoC": 175,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/applypatch-msg.sample",
            "LoC": 16,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/push-to-checkout.sample",
            "LoC": 79,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/pre-push.sample",
            "LoC": 54,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/pre-receive.sample",
            "LoC": 25,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/pre-applypatch.sample",
            "LoC": 15,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/hooks/pre-commit.sample",
            "LoC": 50,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/logs/HEAD",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/logs/refs/heads/master",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/logs/refs/remotes/origin/HEAD",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/refs/heads/master",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.git/refs/remotes/origin/HEAD",
            "LoC": 2,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/xtask/Cargo.toml",
            "LoC": 30,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/xtask/src/upgrade_wasmtime.rs",
            "LoC": 142,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/xtask/src/test.rs",
            "LoC": 123,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/xtask/src/benchmark.rs",
            "LoC": 76,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/xtask/src/generate.rs",
            "LoC": 119,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/xtask/src/fetch.rs",
            "LoC": 120,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/xtask/src/build_wasm.rs",
            "LoC": 229,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/xtask/src/clippy.rs",
            "LoC": 34,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/xtask/src/main.rs",
            "LoC": 249,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/xtask/src/bump.rs",
            "LoC": 319,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/script/cliff.toml",
            "LoC": 73,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/script/generate-unicode-categories-json",
            "LoC": 246,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/script/generate-wasm-exports-list",
            "LoC": 9,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/tags/README.md",
            "LoC": 61,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/tags/Cargo.toml",
            "LoC": 31,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/tags/include/tree_sitter/tags.h",
            "LoC": 99,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/tags/src/lib.rs",
            "LoC": 660,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/tags/src/c_lib.rs",
            "LoC": 361,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/highlight/README.md",
            "LoC": 105,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/highlight/Cargo.toml",
            "LoC": 31,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/highlight/include/tree_sitter/highlight.h",
            "LoC": 84,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/highlight/src/lib.rs",
            "LoC": 1290,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/highlight/src/c_lib.rs",
            "LoC": 341,
            "Native": false,
            "Binary": false
        },
        {
            "Name": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.cargo/config.toml",
            "LoC": 3,
            "Native": false,
            "Binary": false
        }
    ],
    "Functions": [
        {
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/imports.js",
            "Line": 2
        },
        {
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/imports.js",
            "Line": 19
        },
        {
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 447
        },
        {
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 449
        }
    ],
    "Calls": [
        {
            "Name": "require(\"path\").join",
            "Args": [
                "__dirname",
                "\"..\"",
                "\"..\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/index.js",
            "Line": 1
        },
        {
            "Name": "require",
            "Args": [
                "\"path\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/index.js",
            "Line": 1
        },
        {
            "Name": "dummy.require(\"node-gyp-build\")",
            "Args": [
                "root"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/index.js",
            "Line": 3
        },
        {
            "Name": "require",
            "Args": [
                "\"node-gyp-build\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/index.js",
            "Line": 3
        },
        {
            "Name": "require",
            "Args": [
                "\"../../src/node-types.json\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/index.js",
            "Line": 6
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: \"LOWER_PARSER_NAME\",\n\n  rules: {\n    // TODO: add the actual grammar rules\n    source_file: $ => \"hello\"\n  }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/grammar.js",
            "Line": 10
        },
        {
            "Name": "require",
            "Args": [
                "\"node:assert\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/binding_test.js",
            "Line": 1
        },
        {
            "Name": "require",
            "Args": [
                "\"node:test\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/binding_test.js",
            "Line": 2
        },
        {
            "Name": "require",
            "Args": [
                "\"tree-sitter\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/binding_test.js",
            "Line": 4
        },
        {
            "Name": "test",
            "Args": [
                "\"can load grammar\"",
                "() => {\n  const parser = new Parser();\n  assert.doesNotThrow(() => parser.setLanguage(require(\".\")));\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/binding_test.js",
            "Line": 6
        },
        {
            "Name": "Parser",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/binding_test.js",
            "Line": 7
        },
        {
            "Name": "assert.doesNotThrow",
            "Args": [
                "() => parser.setLanguage(require(\".\"))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/binding_test.js",
            "Line": 8
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "require(\".\")"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/binding_test.js",
            "Line": 8
        },
        {
            "Name": "require",
            "Args": [
                "\".\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/cli/src/templates/binding_test.js",
            "Line": 8
        },
        {
            "Name": "github.rest.pulls.listRequestedReviewers",
            "Args": [
                "{\n    owner: context.repo.owner,\n    repo: context.repo.repo,\n    pull_number: context.issue.number,\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/reviewers_remove.js",
            "Line": 2
        },
        {
            "Name": "requestedReviewers.data.users.map",
            "Args": [
                "(e) => e.login"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/reviewers_remove.js",
            "Line": 8
        },
        {
            "Name": "github.rest.pulls.removeRequestedReviewers",
            "Args": [
                "{\n    owner: context.repo.owner,\n    repo: context.repo.repo,\n    pull_number: context.issue.number,\n    reviewers: reviewers,\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/reviewers_remove.js",
            "Line": 10
        },
        {
            "Name": "github.rest.issues.listForRepo",
            "Args": [
                "{\n    owner: owner,\n    repo: repo,\n    labels: \"more-information-needed\",\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/close_unresponsive.js",
            "Line": 16
        },
        {
            "Name": "issues.data.map",
            "Args": [
                "(e) => e.number"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/close_unresponsive.js",
            "Line": 21
        },
        {
            "Name": "github.paginate",
            "Args": [
                "github.rest.issues.listEventsForTimeline",
                "{\n        owner: owner,\n        repo: repo,\n        issue_number: number,\n      }",
                "(response) => response.data.filter(labeledEvent)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/close_unresponsive.js",
            "Line": 24
        },
        {
            "Name": "response.data.filter",
            "Args": [
                "labeledEvent"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/close_unresponsive.js",
            "Line": 31
        },
        {
            "Name": "Date",
            "Args": [
                "latest_response_label.created_at"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/close_unresponsive.js",
            "Line": 36
        },
        {
            "Name": "Date",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/close_unresponsive.js",
            "Line": 37
        },
        {
            "Name": "github.rest.issues.update",
            "Args": [
                "{\n        owner: owner,\n        repo: repo,\n        issue_number: number,\n        state_reason: \"not_planned\",\n        state: \"closed\",\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/close_unresponsive.js",
            "Line": 42
        },
        {
            "Name": "github.rest.issues.createComment",
            "Args": [
                "{\n        owner: owner,\n        repo: repo,\n        issue_number: number,\n        body: close_message,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/close_unresponsive.js",
            "Line": 50
        },
        {
            "Name": "github.rest.issues.get",
            "Args": [
                "{\n    owner: context.repo.owner,\n    repo: context.repo.repo,\n    issue_number: context.issue.number,\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/remove_response_label.js",
            "Line": 3
        },
        {
            "Name": "issue.data.labels.map",
            "Args": [
                "(e) => e.name"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/remove_response_label.js",
            "Line": 9
        },
        {
            "Name": "labels.includes",
            "Args": [
                "\"more-information-needed\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/remove_response_label.js",
            "Line": 11
        },
        {
            "Name": "github.rest.issues.removeLabel",
            "Args": [
                "{\n      owner: context.repo.owner,\n      repo: context.repo.repo,\n      issue_number: context.issue.number,\n      name: \"more-information-needed\",\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/.github/scripts/remove_response_label.js",
            "Line": 12
        },
        {
            "Name": "mergeInto",
            "Args": [
                "LibraryManager.library",
                "{\n  tree_sitter_parse_callback(\n    inputBufferAddress,\n    index,\n    row,\n    column,\n    lengthAddress,\n  ) {\n    const INPUT_BUFFER_SIZE = 10 * 1024;\n    const string = currentParseCallback(index, {row, column});\n    if (typeof string === 'string') {\n      setValue(lengthAddress, string.length, 'i32');\n      stringToUTF16(string, inputBufferAddress, INPUT_BUFFER_SIZE);\n    } else {\n      setValue(lengthAddress, 0, 'i32');\n    }\n  },\n\n  tree_sitter_log_callback(isLexMessage, messageAddress) {\n    if (currentLogCallback) {\n      const message = UTF8ToString(messageAddress);\n      currentLogCallback(message, isLexMessage !== 0);\n    }\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/imports.js",
            "Line": 1
        },
        {
            "Name": "currentParseCallback",
            "Args": [
                "index",
                "{row, column}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/imports.js",
            "Line": 10
        },
        {
            "Name": "setValue",
            "Args": [
                "lengthAddress",
                "string.length",
                "'i32'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/imports.js",
            "Line": 12
        },
        {
            "Name": "stringToUTF16",
            "Args": [
                "string",
                "inputBufferAddress",
                "INPUT_BUFFER_SIZE"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/imports.js",
            "Line": 13
        },
        {
            "Name": "setValue",
            "Args": [
                "lengthAddress",
                "0",
                "'i32'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/imports.js",
            "Line": 15
        },
        {
            "Name": "UTF8ToString",
            "Args": [
                "messageAddress"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/imports.js",
            "Line": 21
        },
        {
            "Name": "currentLogCallback",
            "Args": [
                "message",
                "isLexMessage !== 0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/imports.js",
            "Line": 22
        },
        {
            "Name": "require",
            "Args": [
                "'chai'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 1
        },
        {
            "Name": "describe",
            "Args": [
                "'Parser'",
                "() => {\n  let parser;\n\n  before(async () =>\n    ({Parser, JavaScript, HTML, languageURL} = await require('./helper')),\n  );\n\n  beforeEach(() => {\n    parser = new Parser();\n  });\n\n  afterEach(() => {\n    parser.delete();\n  });\n\n  describe('.setLanguage', () => {\n    it('allows setting the language to null', () => {\n      assert.equal(parser.getLanguage(), null);\n      parser.setLanguage(JavaScript);\n      assert.equal(parser.getLanguage(), JavaScript);\n      parser.setLanguage(null);\n      assert.equal(parser.getLanguage(), null);\n    });\n\n    it('throws an exception when the given object is not a tree-sitter language', () => {\n      assert.throws(() => parser.setLanguage({}), /Argument must be a Language/);\n      assert.throws(() => parser.setLanguage(1), /Argument must be a Language/);\n    });\n  });\n\n  describe('.setLogger', () => {\n    beforeEach(() => {\n      parser.setLanguage(JavaScript);\n    });\n\n    it('calls the given callback for each parse event', () => {\n      const debugMessages = [];\n      parser.setLogger((message) => debugMessages.push(message));\n      parser.parse('a + b + c');\n      assert.includeMembers(debugMessages, [\n        'skip character:\\' \\'',\n        'consume character:\\'b\\'',\n        'reduce sym:program, child_count:1',\n        'accept',\n      ]);\n    });\n\n    it('allows the callback to be retrieved later', () => {\n      const callback = () => {};\n      parser.setLogger(callback);\n      assert.equal(parser.getLogger(), callback);\n      parser.setLogger(false);\n      assert.equal(parser.getLogger(), null);\n    });\n\n    it('disables debugging when given a falsy value', () => {\n      const debugMessages = [];\n      parser.setLogger((message) => debugMessages.push(message));\n      parser.setLogger(false);\n      parser.parse('a + b * c');\n      assert.equal(debugMessages.length, 0);\n    });\n\n    it('throws an error when given a truthy value that isn\\'t a function ', () => {\n      assert.throws(\n        () => parser.setLogger('5'),\n        'Logger callback must be a function',\n      );\n    });\n\n    it('rethrows errors thrown by the logging callback', () => {\n      const error = new Error('The error message');\n      parser.setLogger((_msg, _params) => {\n        throw error;\n      });\n      assert.throws(\n        () => parser.parse('ok;'),\n        'The error message',\n      );\n    });\n  });\n\n  describe('one included range', () => {\n    it('parses the text within a range', () => {\n      parser.setLanguage(HTML);\n      const sourceCode = '<span>hi</span><script>console.log(\\'sup\\');</script>';\n      const htmlTree = parser.parse(sourceCode);\n      const scriptContentNode = htmlTree.rootNode.child(1).child(1);\n      assert.equal(scriptContentNode.type, 'raw_text');\n\n      parser.setLanguage(JavaScript);\n      assert.deepEqual(parser.getIncludedRanges(), [{\n        startIndex: 0,\n        endIndex: 2147483647,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 4294967295, column: 2147483647},\n      }]);\n      const ranges = [{\n        startIndex: scriptContentNode.startIndex,\n        endIndex: scriptContentNode.endIndex,\n        startPosition: scriptContentNode.startPosition,\n        endPosition: scriptContentNode.endPosition,\n      }];\n      const jsTree = parser.parse(\n        sourceCode,\n        null,\n        {includedRanges: ranges},\n      );\n      assert.deepEqual(parser.getIncludedRanges(), ranges);\n\n      assert.equal(\n        jsTree.rootNode.toString(),\n        '(program (expression_statement (call_expression ' +\n        'function: (member_expression object: (identifier) property: (property_identifier)) ' +\n        'arguments: (arguments (string (string_fragment))))))',\n      );\n      assert.deepEqual(jsTree.rootNode.startPosition, {row: 0, column: sourceCode.indexOf('console')});\n    });\n  });\n\n  describe('multiple included ranges', () => {\n    it('parses the text within multiple ranges', () => {\n      parser.setLanguage(JavaScript);\n      const sourceCode = 'html `<div>Hello, ${name.toUpperCase()}, it\\'s <b>${now()}</b>.</div>`';\n      const jsTree = parser.parse(sourceCode);\n      const templateStringNode = jsTree.rootNode.descendantForIndex(sourceCode.indexOf('`<'), sourceCode.indexOf('>`'));\n      assert.equal(templateStringNode.type, 'template_string');\n\n      const openQuoteNode = templateStringNode.child(0);\n      const interpolationNode1 = templateStringNode.child(2);\n      const interpolationNode2 = templateStringNode.child(4);\n      const closeQuoteNode = templateStringNode.child(6);\n\n      parser.setLanguage(HTML);\n      const htmlRanges = [\n        {\n          startIndex: openQuoteNode.endIndex,\n          startPosition: openQuoteNode.endPosition,\n          endIndex: interpolationNode1.startIndex,\n          endPosition: interpolationNode1.startPosition,\n        },\n        {\n          startIndex: interpolationNode1.endIndex,\n          startPosition: interpolationNode1.endPosition,\n          endIndex: interpolationNode2.startIndex,\n          endPosition: interpolationNode2.startPosition,\n        },\n        {\n          startIndex: interpolationNode2.endIndex,\n          startPosition: interpolationNode2.endPosition,\n          endIndex: closeQuoteNode.startIndex,\n          endPosition: closeQuoteNode.startPosition,\n        },\n      ];\n      const htmlTree = parser.parse(sourceCode, null, {includedRanges: htmlRanges});\n\n      assert.equal(\n        htmlTree.rootNode.toString(),\n        '(document (element' +\n        ' (start_tag (tag_name))' +\n        ' (text)' +\n        ' (element (start_tag (tag_name)) (end_tag (tag_name)))' +\n        ' (text)' +\n        ' (end_tag (tag_name))))',\n      );\n      assert.deepEqual(htmlTree.getIncludedRanges(), htmlRanges);\n\n      const divElementNode = htmlTree.rootNode.child(0);\n      const helloTextNode = divElementNode.child(1);\n      const bElementNode = divElementNode.child(2);\n      const bStartTagNode = bElementNode.child(0);\n      const bEndTagNode = bElementNode.child(1);\n\n      assert.equal(helloTextNode.type, 'text');\n      assert.equal(helloTextNode.startIndex, sourceCode.indexOf('Hello'));\n      assert.equal(helloTextNode.endIndex, sourceCode.indexOf(' <b>'));\n\n      assert.equal(bStartTagNode.type, 'start_tag');\n      assert.equal(bStartTagNode.startIndex, sourceCode.indexOf('<b>'));\n      assert.equal(bStartTagNode.endIndex, sourceCode.indexOf('${now()}'));\n\n      assert.equal(bEndTagNode.type, 'end_tag');\n      assert.equal(bEndTagNode.startIndex, sourceCode.indexOf('</b>'));\n      assert.equal(bEndTagNode.endIndex, sourceCode.indexOf('.</div>'));\n    });\n  });\n\n  describe('an included range containing mismatched positions', () => {\n    it('parses the text within the range', () => {\n      const sourceCode = '<div>test</div>{_ignore_this_part_}';\n\n      parser.setLanguage(HTML);\n\n      const endIndex = sourceCode.indexOf('{_ignore_this_part_');\n\n      const rangeToParse = {\n        startIndex: 0,\n        startPosition: {row: 10, column: 12},\n        endIndex,\n        endPosition: {row: 10, column: 12 + endIndex},\n      };\n\n      const htmlTree = parser.parse(sourceCode, null, {includedRanges: [rangeToParse]});\n\n      assert.deepEqual(htmlTree.getIncludedRanges()[0], rangeToParse);\n\n      assert.equal(\n        htmlTree.rootNode.toString(),\n        '(document (element (start_tag (tag_name)) (text) (end_tag (tag_name))))',\n      );\n    });\n  });\n\n  describe('.parse', () => {\n    let tree;\n\n    beforeEach(() => {\n      tree = null;\n      parser.setLanguage(JavaScript);\n    });\n\n    afterEach(() => {\n      if (tree) tree.delete();\n    });\n\n    it('reads from the given input', () => {\n      const parts = ['first', '_', 'second', '_', 'third'];\n      tree = parser.parse(() => parts.shift());\n      assert.equal(tree.rootNode.toString(), '(program (expression_statement (identifier)))');\n    });\n\n    it('stops reading when the input callback return something that\\'s not a string', () => {\n      const parts = ['abc', 'def', 'ghi', {}, {}, {}, 'second-word', ' '];\n      tree = parser.parse(() => parts.shift());\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (identifier)))',\n      );\n      assert.equal(tree.rootNode.endIndex, 9);\n      assert.equal(parts.length, 2);\n    });\n\n    it('throws an exception when the given input is not a function', () => {\n      assert.throws(() => parser.parse(null), 'Argument must be a string or a function');\n      assert.throws(() => parser.parse(5), 'Argument must be a string or a function');\n      assert.throws(() => parser.parse({}), 'Argument must be a string or a function');\n    });\n\n    it('handles long input strings', () => {\n      const repeatCount = 10000;\n      const inputString = `[${Array(repeatCount).fill('0').join(',')}]`;\n\n      tree = parser.parse(inputString);\n      assert.equal(tree.rootNode.type, 'program');\n      assert.equal(tree.rootNode.firstChild.firstChild.namedChildCount, repeatCount);\n    }).timeout(5000);\n\n    it('can use the bash parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('bash')));\n      tree = parser.parse('FOO=bar echo <<EOF 2> err.txt > hello.txt \\nhello${FOO}\\nEOF');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program ' +\n            '(redirected_statement ' +\n              'body: (command ' +\n                '(variable_assignment name: (variable_name) value: (word)) ' +\n                'name: (command_name (word))) ' +\n              'redirect: (heredoc_redirect (heredoc_start) ' +\n                'redirect: (file_redirect descriptor: (file_descriptor) destination: (word)) ' +\n                'redirect: (file_redirect destination: (word)) ' +\n                '(heredoc_body ' +\n                  '(expansion (variable_name)) (heredoc_content)) (heredoc_end))))',\n      );\n    }).timeout(5000);\n\n    it('can use the c++ parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('cpp')));\n      tree = parser.parse('const char *s = R\"EOF(HELLO WORLD)EOF\";');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(translation_unit (declaration ' +\n          '(type_qualifier) ' +\n          'type: (primitive_type) ' +\n          'declarator: (init_declarator ' +\n            'declarator: (pointer_declarator declarator: (identifier)) ' +\n            'value: (raw_string_literal delimiter: (raw_string_delimiter) (raw_string_content) (raw_string_delimiter)))))',\n      );\n    }).timeout(5000);\n\n    it('can use the HTML parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('html')));\n      tree = parser.parse('<div><span><custom></custom></span></div>');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(document (element (start_tag (tag_name)) (element (start_tag (tag_name)) (element (start_tag (tag_name)) (end_tag (tag_name))) (end_tag (tag_name))) (end_tag (tag_name))))',\n      );\n    }).timeout(5000);\n\n    it('can use the python parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('python')));\n      tree = parser.parse('class A:\\n  def b():\\n    c()');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(module (class_definition ' +\n          'name: (identifier) ' +\n          'body: (block ' +\n            '(function_definition ' +\n              'name: (identifier) ' +\n              'parameters: (parameters) ' +\n              'body: (block (expression_statement (call ' +\n                'function: (identifier) ' +\n                'arguments: (argument_list))))))))',\n      );\n    }).timeout(5000);\n\n    it('can use the rust parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('rust')));\n      tree = parser.parse('const x: &\\'static str = r###\"hello\"###;');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(source_file (const_item ' +\n          'name: (identifier) ' +\n          'type: (reference_type (lifetime (identifier)) type: (primitive_type)) ' +\n          'value: (raw_string_literal (string_content))))',\n      );\n    }).timeout(5000);\n\n    it('can use the typescript parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('typescript')));\n      tree = parser.parse('a()\\nb()\\n[c]');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program ' +\n          '(expression_statement (call_expression function: (identifier) arguments: (arguments))) ' +\n          '(expression_statement (subscript_expression ' +\n            'object: (call_expression ' +\n              'function: (identifier) ' +\n              'arguments: (arguments)) ' +\n            'index: (identifier))))',\n      );\n    }).timeout(5000);\n\n    it('can use the tsx parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('tsx')));\n      tree = parser.parse('a()\\nb()\\n[c]');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program ' +\n          '(expression_statement (call_expression function: (identifier) arguments: (arguments))) ' +\n          '(expression_statement (subscript_expression ' +\n            'object: (call_expression ' +\n              'function: (identifier) ' +\n              'arguments: (arguments)) ' +\n            'index: (identifier))))',\n      );\n    }).timeout(5000);\n\n    it('parses only the text within the `includedRanges` if they are specified', () => {\n      const sourceCode = '<% foo() %> <% bar %>';\n\n      const start1 = sourceCode.indexOf('foo');\n      const end1 = start1 + 5;\n      const start2 = sourceCode.indexOf('bar');\n      const end2 = start2 + 3;\n\n      const tree = parser.parse(sourceCode, null, {\n        includedRanges: [\n          {\n            startIndex: start1,\n            endIndex: end1,\n            startPosition: {row: 0, column: start1},\n            endPosition: {row: 0, column: end1},\n          },\n          {\n            startIndex: start2,\n            endIndex: end2,\n            startPosition: {row: 0, column: start2},\n            endPosition: {row: 0, column: end2},\n          },\n        ],\n      });\n\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (call_expression function: (identifier) arguments: (arguments))) (expression_statement (identifier)))',\n      );\n    });\n  });\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 4
        },
        {
            "Name": "before",
            "Args": [
                "async () =>\n    ({Parser, JavaScript, HTML, languageURL} = await require('./helper'))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 7
        },
        {
            "Name": "require",
            "Args": [
                "'./helper'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 8
        },
        {
            "Name": "beforeEach",
            "Args": [
                "() => {\n    parser = new Parser();\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 11
        },
        {
            "Name": "Parser",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 12
        },
        {
            "Name": "afterEach",
            "Args": [
                "() => {\n    parser.delete();\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 15
        },
        {
            "Name": "parser.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 16
        },
        {
            "Name": "describe",
            "Args": [
                "'.setLanguage'",
                "() => {\n    it('allows setting the language to null', () => {\n      assert.equal(parser.getLanguage(), null);\n      parser.setLanguage(JavaScript);\n      assert.equal(parser.getLanguage(), JavaScript);\n      parser.setLanguage(null);\n      assert.equal(parser.getLanguage(), null);\n    });\n\n    it('throws an exception when the given object is not a tree-sitter language', () => {\n      assert.throws(() => parser.setLanguage({}), /Argument must be a Language/);\n      assert.throws(() => parser.setLanguage(1), /Argument must be a Language/);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 19
        },
        {
            "Name": "it",
            "Args": [
                "'allows setting the language to null'",
                "() => {\n      assert.equal(parser.getLanguage(), null);\n      parser.setLanguage(JavaScript);\n      assert.equal(parser.getLanguage(), JavaScript);\n      parser.setLanguage(null);\n      assert.equal(parser.getLanguage(), null);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 20
        },
        {
            "Name": "assert.equal",
            "Args": [
                "parser.getLanguage()",
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 21
        },
        {
            "Name": "parser.getLanguage",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 21
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "JavaScript"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 22
        },
        {
            "Name": "assert.equal",
            "Args": [
                "parser.getLanguage()",
                "JavaScript"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 23
        },
        {
            "Name": "parser.getLanguage",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 23
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 24
        },
        {
            "Name": "assert.equal",
            "Args": [
                "parser.getLanguage()",
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 25
        },
        {
            "Name": "parser.getLanguage",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 25
        },
        {
            "Name": "it",
            "Args": [
                "'throws an exception when the given object is not a tree-sitter language'",
                "() => {\n      assert.throws(() => parser.setLanguage({}), /Argument must be a Language/);\n      assert.throws(() => parser.setLanguage(1), /Argument must be a Language/);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 28
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => parser.setLanguage({})",
                "/Argument must be a Language/"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 29
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "{}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 29
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => parser.setLanguage(1)",
                "/Argument must be a Language/"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 30
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 30
        },
        {
            "Name": "describe",
            "Args": [
                "'.setLogger'",
                "() => {\n    beforeEach(() => {\n      parser.setLanguage(JavaScript);\n    });\n\n    it('calls the given callback for each parse event', () => {\n      const debugMessages = [];\n      parser.setLogger((message) => debugMessages.push(message));\n      parser.parse('a + b + c');\n      assert.includeMembers(debugMessages, [\n        'skip character:\\' \\'',\n        'consume character:\\'b\\'',\n        'reduce sym:program, child_count:1',\n        'accept',\n      ]);\n    });\n\n    it('allows the callback to be retrieved later', () => {\n      const callback = () => {};\n      parser.setLogger(callback);\n      assert.equal(parser.getLogger(), callback);\n      parser.setLogger(false);\n      assert.equal(parser.getLogger(), null);\n    });\n\n    it('disables debugging when given a falsy value', () => {\n      const debugMessages = [];\n      parser.setLogger((message) => debugMessages.push(message));\n      parser.setLogger(false);\n      parser.parse('a + b * c');\n      assert.equal(debugMessages.length, 0);\n    });\n\n    it('throws an error when given a truthy value that isn\\'t a function ', () => {\n      assert.throws(\n        () => parser.setLogger('5'),\n        'Logger callback must be a function',\n      );\n    });\n\n    it('rethrows errors thrown by the logging callback', () => {\n      const error = new Error('The error message');\n      parser.setLogger((_msg, _params) => {\n        throw error;\n      });\n      assert.throws(\n        () => parser.parse('ok;'),\n        'The error message',\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 34
        },
        {
            "Name": "beforeEach",
            "Args": [
                "() => {\n      parser.setLanguage(JavaScript);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 35
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "JavaScript"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 36
        },
        {
            "Name": "it",
            "Args": [
                "'calls the given callback for each parse event'",
                "() => {\n      const debugMessages = [];\n      parser.setLogger((message) => debugMessages.push(message));\n      parser.parse('a + b + c');\n      assert.includeMembers(debugMessages, [\n        'skip character:\\' \\'',\n        'consume character:\\'b\\'',\n        'reduce sym:program, child_count:1',\n        'accept',\n      ]);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 39
        },
        {
            "Name": "parser.setLogger",
            "Args": [
                "(message) => debugMessages.push(message)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 41
        },
        {
            "Name": "debugMessages.push",
            "Args": [
                "message"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 41
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'a + b + c'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 42
        },
        {
            "Name": "assert.includeMembers",
            "Args": [
                "debugMessages",
                "[\n        'skip character:\\' \\'',\n        'consume character:\\'b\\'',\n        'reduce sym:program, child_count:1',\n        'accept',\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 43
        },
        {
            "Name": "it",
            "Args": [
                "'allows the callback to be retrieved later'",
                "() => {\n      const callback = () => {};\n      parser.setLogger(callback);\n      assert.equal(parser.getLogger(), callback);\n      parser.setLogger(false);\n      assert.equal(parser.getLogger(), null);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 51
        },
        {
            "Name": "parser.setLogger",
            "Args": [
                "callback"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 53
        },
        {
            "Name": "assert.equal",
            "Args": [
                "parser.getLogger()",
                "callback"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 54
        },
        {
            "Name": "parser.getLogger",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 54
        },
        {
            "Name": "parser.setLogger",
            "Args": [
                "false"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 55
        },
        {
            "Name": "assert.equal",
            "Args": [
                "parser.getLogger()",
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 56
        },
        {
            "Name": "parser.getLogger",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 56
        },
        {
            "Name": "it",
            "Args": [
                "'disables debugging when given a falsy value'",
                "() => {\n      const debugMessages = [];\n      parser.setLogger((message) => debugMessages.push(message));\n      parser.setLogger(false);\n      parser.parse('a + b * c');\n      assert.equal(debugMessages.length, 0);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 59
        },
        {
            "Name": "parser.setLogger",
            "Args": [
                "(message) => debugMessages.push(message)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 61
        },
        {
            "Name": "debugMessages.push",
            "Args": [
                "message"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 61
        },
        {
            "Name": "parser.setLogger",
            "Args": [
                "false"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 62
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'a + b * c'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 63
        },
        {
            "Name": "assert.equal",
            "Args": [
                "debugMessages.length",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 64
        },
        {
            "Name": "it",
            "Args": [
                "'throws an error when given a truthy value that isn\\'t a function '",
                "() => {\n      assert.throws(\n        () => parser.setLogger('5'),\n        'Logger callback must be a function',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 67
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => parser.setLogger('5')",
                "'Logger callback must be a function'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 68
        },
        {
            "Name": "parser.setLogger",
            "Args": [
                "'5'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 69
        },
        {
            "Name": "it",
            "Args": [
                "'rethrows errors thrown by the logging callback'",
                "() => {\n      const error = new Error('The error message');\n      parser.setLogger((_msg, _params) => {\n        throw error;\n      });\n      assert.throws(\n        () => parser.parse('ok;'),\n        'The error message',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 74
        },
        {
            "Name": "Error",
            "Args": [
                "'The error message'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 75
        },
        {
            "Name": "parser.setLogger",
            "Args": [
                "(_msg, _params) => {\n        throw error;\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 76
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => parser.parse('ok;')",
                "'The error message'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 79
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'ok;'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 80
        },
        {
            "Name": "describe",
            "Args": [
                "'one included range'",
                "() => {\n    it('parses the text within a range', () => {\n      parser.setLanguage(HTML);\n      const sourceCode = '<span>hi</span><script>console.log(\\'sup\\');</script>';\n      const htmlTree = parser.parse(sourceCode);\n      const scriptContentNode = htmlTree.rootNode.child(1).child(1);\n      assert.equal(scriptContentNode.type, 'raw_text');\n\n      parser.setLanguage(JavaScript);\n      assert.deepEqual(parser.getIncludedRanges(), [{\n        startIndex: 0,\n        endIndex: 2147483647,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 4294967295, column: 2147483647},\n      }]);\n      const ranges = [{\n        startIndex: scriptContentNode.startIndex,\n        endIndex: scriptContentNode.endIndex,\n        startPosition: scriptContentNode.startPosition,\n        endPosition: scriptContentNode.endPosition,\n      }];\n      const jsTree = parser.parse(\n        sourceCode,\n        null,\n        {includedRanges: ranges},\n      );\n      assert.deepEqual(parser.getIncludedRanges(), ranges);\n\n      assert.equal(\n        jsTree.rootNode.toString(),\n        '(program (expression_statement (call_expression ' +\n        'function: (member_expression object: (identifier) property: (property_identifier)) ' +\n        'arguments: (arguments (string (string_fragment))))))',\n      );\n      assert.deepEqual(jsTree.rootNode.startPosition, {row: 0, column: sourceCode.indexOf('console')});\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 86
        },
        {
            "Name": "it",
            "Args": [
                "'parses the text within a range'",
                "() => {\n      parser.setLanguage(HTML);\n      const sourceCode = '<span>hi</span><script>console.log(\\'sup\\');</script>';\n      const htmlTree = parser.parse(sourceCode);\n      const scriptContentNode = htmlTree.rootNode.child(1).child(1);\n      assert.equal(scriptContentNode.type, 'raw_text');\n\n      parser.setLanguage(JavaScript);\n      assert.deepEqual(parser.getIncludedRanges(), [{\n        startIndex: 0,\n        endIndex: 2147483647,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 4294967295, column: 2147483647},\n      }]);\n      const ranges = [{\n        startIndex: scriptContentNode.startIndex,\n        endIndex: scriptContentNode.endIndex,\n        startPosition: scriptContentNode.startPosition,\n        endPosition: scriptContentNode.endPosition,\n      }];\n      const jsTree = parser.parse(\n        sourceCode,\n        null,\n        {includedRanges: ranges},\n      );\n      assert.deepEqual(parser.getIncludedRanges(), ranges);\n\n      assert.equal(\n        jsTree.rootNode.toString(),\n        '(program (expression_statement (call_expression ' +\n        'function: (member_expression object: (identifier) property: (property_identifier)) ' +\n        'arguments: (arguments (string (string_fragment))))))',\n      );\n      assert.deepEqual(jsTree.rootNode.startPosition, {row: 0, column: sourceCode.indexOf('console')});\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 87
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "HTML"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 88
        },
        {
            "Name": "parser.parse",
            "Args": [
                "sourceCode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 90
        },
        {
            "Name": "htmlTree.rootNode.child(1).child",
            "Args": [
                "1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 91
        },
        {
            "Name": "htmlTree.rootNode.child",
            "Args": [
                "1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 91
        },
        {
            "Name": "assert.equal",
            "Args": [
                "scriptContentNode.type",
                "'raw_text'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 92
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "JavaScript"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 94
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "parser.getIncludedRanges()",
                "[{\n        startIndex: 0,\n        endIndex: 2147483647,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 4294967295, column: 2147483647},\n      }]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 95
        },
        {
            "Name": "parser.getIncludedRanges",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 95
        },
        {
            "Name": "parser.parse",
            "Args": [
                "sourceCode",
                "null",
                "{includedRanges: ranges}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 107
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "parser.getIncludedRanges()",
                "ranges"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 112
        },
        {
            "Name": "parser.getIncludedRanges",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 112
        },
        {
            "Name": "assert.equal",
            "Args": [
                "jsTree.rootNode.toString()",
                "'(program (expression_statement (call_expression ' +\n        'function: (member_expression object: (identifier) property: (property_identifier)) ' +\n        'arguments: (arguments (string (string_fragment))))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 114
        },
        {
            "Name": "jsTree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 115
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "jsTree.rootNode.startPosition",
                "{row: 0, column: sourceCode.indexOf('console')}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 120
        },
        {
            "Name": "sourceCode.indexOf",
            "Args": [
                "'console'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 120
        },
        {
            "Name": "describe",
            "Args": [
                "'multiple included ranges'",
                "() => {\n    it('parses the text within multiple ranges', () => {\n      parser.setLanguage(JavaScript);\n      const sourceCode = 'html `<div>Hello, ${name.toUpperCase()}, it\\'s <b>${now()}</b>.</div>`';\n      const jsTree = parser.parse(sourceCode);\n      const templateStringNode = jsTree.rootNode.descendantForIndex(sourceCode.indexOf('`<'), sourceCode.indexOf('>`'));\n      assert.equal(templateStringNode.type, 'template_string');\n\n      const openQuoteNode = templateStringNode.child(0);\n      const interpolationNode1 = templateStringNode.child(2);\n      const interpolationNode2 = templateStringNode.child(4);\n      const closeQuoteNode = templateStringNode.child(6);\n\n      parser.setLanguage(HTML);\n      const htmlRanges = [\n        {\n          startIndex: openQuoteNode.endIndex,\n          startPosition: openQuoteNode.endPosition,\n          endIndex: interpolationNode1.startIndex,\n          endPosition: interpolationNode1.startPosition,\n        },\n        {\n          startIndex: interpolationNode1.endIndex,\n          startPosition: interpolationNode1.endPosition,\n          endIndex: interpolationNode2.startIndex,\n          endPosition: interpolationNode2.startPosition,\n        },\n        {\n          startIndex: interpolationNode2.endIndex,\n          startPosition: interpolationNode2.endPosition,\n          endIndex: closeQuoteNode.startIndex,\n          endPosition: closeQuoteNode.startPosition,\n        },\n      ];\n      const htmlTree = parser.parse(sourceCode, null, {includedRanges: htmlRanges});\n\n      assert.equal(\n        htmlTree.rootNode.toString(),\n        '(document (element' +\n        ' (start_tag (tag_name))' +\n        ' (text)' +\n        ' (element (start_tag (tag_name)) (end_tag (tag_name)))' +\n        ' (text)' +\n        ' (end_tag (tag_name))))',\n      );\n      assert.deepEqual(htmlTree.getIncludedRanges(), htmlRanges);\n\n      const divElementNode = htmlTree.rootNode.child(0);\n      const helloTextNode = divElementNode.child(1);\n      const bElementNode = divElementNode.child(2);\n      const bStartTagNode = bElementNode.child(0);\n      const bEndTagNode = bElementNode.child(1);\n\n      assert.equal(helloTextNode.type, 'text');\n      assert.equal(helloTextNode.startIndex, sourceCode.indexOf('Hello'));\n      assert.equal(helloTextNode.endIndex, sourceCode.indexOf(' <b>'));\n\n      assert.equal(bStartTagNode.type, 'start_tag');\n      assert.equal(bStartTagNode.startIndex, sourceCode.indexOf('<b>'));\n      assert.equal(bStartTagNode.endIndex, sourceCode.indexOf('${now()}'));\n\n      assert.equal(bEndTagNode.type, 'end_tag');\n      assert.equal(bEndTagNode.startIndex, sourceCode.indexOf('</b>'));\n      assert.equal(bEndTagNode.endIndex, sourceCode.indexOf('.</div>'));\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 124
        },
        {
            "Name": "it",
            "Args": [
                "'parses the text within multiple ranges'",
                "() => {\n      parser.setLanguage(JavaScript);\n      const sourceCode = 'html `<div>Hello, ${name.toUpperCase()}, it\\'s <b>${now()}</b>.</div>`';\n      const jsTree = parser.parse(sourceCode);\n      const templateStringNode = jsTree.rootNode.descendantForIndex(sourceCode.indexOf('`<'), sourceCode.indexOf('>`'));\n      assert.equal(templateStringNode.type, 'template_string');\n\n      const openQuoteNode = templateStringNode.child(0);\n      const interpolationNode1 = templateStringNode.child(2);\n      const interpolationNode2 = templateStringNode.child(4);\n      const closeQuoteNode = templateStringNode.child(6);\n\n      parser.setLanguage(HTML);\n      const htmlRanges = [\n        {\n          startIndex: openQuoteNode.endIndex,\n          startPosition: openQuoteNode.endPosition,\n          endIndex: interpolationNode1.startIndex,\n          endPosition: interpolationNode1.startPosition,\n        },\n        {\n          startIndex: interpolationNode1.endIndex,\n          startPosition: interpolationNode1.endPosition,\n          endIndex: interpolationNode2.startIndex,\n          endPosition: interpolationNode2.startPosition,\n        },\n        {\n          startIndex: interpolationNode2.endIndex,\n          startPosition: interpolationNode2.endPosition,\n          endIndex: closeQuoteNode.startIndex,\n          endPosition: closeQuoteNode.startPosition,\n        },\n      ];\n      const htmlTree = parser.parse(sourceCode, null, {includedRanges: htmlRanges});\n\n      assert.equal(\n        htmlTree.rootNode.toString(),\n        '(document (element' +\n        ' (start_tag (tag_name))' +\n        ' (text)' +\n        ' (element (start_tag (tag_name)) (end_tag (tag_name)))' +\n        ' (text)' +\n        ' (end_tag (tag_name))))',\n      );\n      assert.deepEqual(htmlTree.getIncludedRanges(), htmlRanges);\n\n      const divElementNode = htmlTree.rootNode.child(0);\n      const helloTextNode = divElementNode.child(1);\n      const bElementNode = divElementNode.child(2);\n      const bStartTagNode = bElementNode.child(0);\n      const bEndTagNode = bElementNode.child(1);\n\n      assert.equal(helloTextNode.type, 'text');\n      assert.equal(helloTextNode.startIndex, sourceCode.indexOf('Hello'));\n      assert.equal(helloTextNode.endIndex, sourceCode.indexOf(' <b>'));\n\n      assert.equal(bStartTagNode.type, 'start_tag');\n      assert.equal(bStartTagNode.startIndex, sourceCode.indexOf('<b>'));\n      assert.equal(bStartTagNode.endIndex, sourceCode.indexOf('${now()}'));\n\n      assert.equal(bEndTagNode.type, 'end_tag');\n      assert.equal(bEndTagNode.startIndex, sourceCode.indexOf('</b>'));\n      assert.equal(bEndTagNode.endIndex, sourceCode.indexOf('.</div>'));\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 125
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "JavaScript"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 126
        },
        {
            "Name": "parser.parse",
            "Args": [
                "sourceCode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 128
        },
        {
            "Name": "jsTree.rootNode.descendantForIndex",
            "Args": [
                "sourceCode.indexOf('`<')",
                "sourceCode.indexOf('>`')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 129
        },
        {
            "Name": "sourceCode.indexOf",
            "Args": [
                "'`<'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 129
        },
        {
            "Name": "sourceCode.indexOf",
            "Args": [
                "'>`'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 129
        },
        {
            "Name": "assert.equal",
            "Args": [
                "templateStringNode.type",
                "'template_string'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 130
        },
        {
            "Name": "templateStringNode.child",
            "Args": [
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 132
        },
        {
            "Name": "templateStringNode.child",
            "Args": [
                "2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 133
        },
        {
            "Name": "templateStringNode.child",
            "Args": [
                "4"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 134
        },
        {
            "Name": "templateStringNode.child",
            "Args": [
                "6"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 135
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "HTML"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 137
        },
        {
            "Name": "parser.parse",
            "Args": [
                "sourceCode",
                "null",
                "{includedRanges: htmlRanges}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 158
        },
        {
            "Name": "assert.equal",
            "Args": [
                "htmlTree.rootNode.toString()",
                "'(document (element' +\n        ' (start_tag (tag_name))' +\n        ' (text)' +\n        ' (element (start_tag (tag_name)) (end_tag (tag_name)))' +\n        ' (text)' +\n        ' (end_tag (tag_name))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 160
        },
        {
            "Name": "htmlTree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 161
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "htmlTree.getIncludedRanges()",
                "htmlRanges"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 169
        },
        {
            "Name": "htmlTree.getIncludedRanges",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 169
        },
        {
            "Name": "htmlTree.rootNode.child",
            "Args": [
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 171
        },
        {
            "Name": "divElementNode.child",
            "Args": [
                "1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 172
        },
        {
            "Name": "divElementNode.child",
            "Args": [
                "2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 173
        },
        {
            "Name": "bElementNode.child",
            "Args": [
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 174
        },
        {
            "Name": "bElementNode.child",
            "Args": [
                "1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 175
        },
        {
            "Name": "assert.equal",
            "Args": [
                "helloTextNode.type",
                "'text'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 177
        },
        {
            "Name": "assert.equal",
            "Args": [
                "helloTextNode.startIndex",
                "sourceCode.indexOf('Hello')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 178
        },
        {
            "Name": "sourceCode.indexOf",
            "Args": [
                "'Hello'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 178
        },
        {
            "Name": "assert.equal",
            "Args": [
                "helloTextNode.endIndex",
                "sourceCode.indexOf(' <b>')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 179
        },
        {
            "Name": "sourceCode.indexOf",
            "Args": [
                "' <b>'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 179
        },
        {
            "Name": "assert.equal",
            "Args": [
                "bStartTagNode.type",
                "'start_tag'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 181
        },
        {
            "Name": "assert.equal",
            "Args": [
                "bStartTagNode.startIndex",
                "sourceCode.indexOf('<b>')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 182
        },
        {
            "Name": "sourceCode.indexOf",
            "Args": [
                "'<b>'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 182
        },
        {
            "Name": "assert.equal",
            "Args": [
                "bStartTagNode.endIndex",
                "sourceCode.indexOf('${now()}')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 183
        },
        {
            "Name": "sourceCode.indexOf",
            "Args": [
                "'${now()}'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 183
        },
        {
            "Name": "assert.equal",
            "Args": [
                "bEndTagNode.type",
                "'end_tag'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 185
        },
        {
            "Name": "assert.equal",
            "Args": [
                "bEndTagNode.startIndex",
                "sourceCode.indexOf('</b>')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 186
        },
        {
            "Name": "sourceCode.indexOf",
            "Args": [
                "'</b>'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 186
        },
        {
            "Name": "assert.equal",
            "Args": [
                "bEndTagNode.endIndex",
                "sourceCode.indexOf('.</div>')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 187
        },
        {
            "Name": "sourceCode.indexOf",
            "Args": [
                "'.</div>'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 187
        },
        {
            "Name": "describe",
            "Args": [
                "'an included range containing mismatched positions'",
                "() => {\n    it('parses the text within the range', () => {\n      const sourceCode = '<div>test</div>{_ignore_this_part_}';\n\n      parser.setLanguage(HTML);\n\n      const endIndex = sourceCode.indexOf('{_ignore_this_part_');\n\n      const rangeToParse = {\n        startIndex: 0,\n        startPosition: {row: 10, column: 12},\n        endIndex,\n        endPosition: {row: 10, column: 12 + endIndex},\n      };\n\n      const htmlTree = parser.parse(sourceCode, null, {includedRanges: [rangeToParse]});\n\n      assert.deepEqual(htmlTree.getIncludedRanges()[0], rangeToParse);\n\n      assert.equal(\n        htmlTree.rootNode.toString(),\n        '(document (element (start_tag (tag_name)) (text) (end_tag (tag_name))))',\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 191
        },
        {
            "Name": "it",
            "Args": [
                "'parses the text within the range'",
                "() => {\n      const sourceCode = '<div>test</div>{_ignore_this_part_}';\n\n      parser.setLanguage(HTML);\n\n      const endIndex = sourceCode.indexOf('{_ignore_this_part_');\n\n      const rangeToParse = {\n        startIndex: 0,\n        startPosition: {row: 10, column: 12},\n        endIndex,\n        endPosition: {row: 10, column: 12 + endIndex},\n      };\n\n      const htmlTree = parser.parse(sourceCode, null, {includedRanges: [rangeToParse]});\n\n      assert.deepEqual(htmlTree.getIncludedRanges()[0], rangeToParse);\n\n      assert.equal(\n        htmlTree.rootNode.toString(),\n        '(document (element (start_tag (tag_name)) (text) (end_tag (tag_name))))',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 192
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "HTML"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 195
        },
        {
            "Name": "sourceCode.indexOf",
            "Args": [
                "'{_ignore_this_part_'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 197
        },
        {
            "Name": "parser.parse",
            "Args": [
                "sourceCode",
                "null",
                "{includedRanges: [rangeToParse]}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 206
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "htmlTree.getIncludedRanges()[0]",
                "rangeToParse"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 208
        },
        {
            "Name": "htmlTree.getIncludedRanges",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 208
        },
        {
            "Name": "assert.equal",
            "Args": [
                "htmlTree.rootNode.toString()",
                "'(document (element (start_tag (tag_name)) (text) (end_tag (tag_name))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 210
        },
        {
            "Name": "htmlTree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 211
        },
        {
            "Name": "describe",
            "Args": [
                "'.parse'",
                "() => {\n    let tree;\n\n    beforeEach(() => {\n      tree = null;\n      parser.setLanguage(JavaScript);\n    });\n\n    afterEach(() => {\n      if (tree) tree.delete();\n    });\n\n    it('reads from the given input', () => {\n      const parts = ['first', '_', 'second', '_', 'third'];\n      tree = parser.parse(() => parts.shift());\n      assert.equal(tree.rootNode.toString(), '(program (expression_statement (identifier)))');\n    });\n\n    it('stops reading when the input callback return something that\\'s not a string', () => {\n      const parts = ['abc', 'def', 'ghi', {}, {}, {}, 'second-word', ' '];\n      tree = parser.parse(() => parts.shift());\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (identifier)))',\n      );\n      assert.equal(tree.rootNode.endIndex, 9);\n      assert.equal(parts.length, 2);\n    });\n\n    it('throws an exception when the given input is not a function', () => {\n      assert.throws(() => parser.parse(null), 'Argument must be a string or a function');\n      assert.throws(() => parser.parse(5), 'Argument must be a string or a function');\n      assert.throws(() => parser.parse({}), 'Argument must be a string or a function');\n    });\n\n    it('handles long input strings', () => {\n      const repeatCount = 10000;\n      const inputString = `[${Array(repeatCount).fill('0').join(',')}]`;\n\n      tree = parser.parse(inputString);\n      assert.equal(tree.rootNode.type, 'program');\n      assert.equal(tree.rootNode.firstChild.firstChild.namedChildCount, repeatCount);\n    }).timeout(5000);\n\n    it('can use the bash parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('bash')));\n      tree = parser.parse('FOO=bar echo <<EOF 2> err.txt > hello.txt \\nhello${FOO}\\nEOF');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program ' +\n            '(redirected_statement ' +\n              'body: (command ' +\n                '(variable_assignment name: (variable_name) value: (word)) ' +\n                'name: (command_name (word))) ' +\n              'redirect: (heredoc_redirect (heredoc_start) ' +\n                'redirect: (file_redirect descriptor: (file_descriptor) destination: (word)) ' +\n                'redirect: (file_redirect destination: (word)) ' +\n                '(heredoc_body ' +\n                  '(expansion (variable_name)) (heredoc_content)) (heredoc_end))))',\n      );\n    }).timeout(5000);\n\n    it('can use the c++ parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('cpp')));\n      tree = parser.parse('const char *s = R\"EOF(HELLO WORLD)EOF\";');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(translation_unit (declaration ' +\n          '(type_qualifier) ' +\n          'type: (primitive_type) ' +\n          'declarator: (init_declarator ' +\n            'declarator: (pointer_declarator declarator: (identifier)) ' +\n            'value: (raw_string_literal delimiter: (raw_string_delimiter) (raw_string_content) (raw_string_delimiter)))))',\n      );\n    }).timeout(5000);\n\n    it('can use the HTML parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('html')));\n      tree = parser.parse('<div><span><custom></custom></span></div>');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(document (element (start_tag (tag_name)) (element (start_tag (tag_name)) (element (start_tag (tag_name)) (end_tag (tag_name))) (end_tag (tag_name))) (end_tag (tag_name))))',\n      );\n    }).timeout(5000);\n\n    it('can use the python parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('python')));\n      tree = parser.parse('class A:\\n  def b():\\n    c()');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(module (class_definition ' +\n          'name: (identifier) ' +\n          'body: (block ' +\n            '(function_definition ' +\n              'name: (identifier) ' +\n              'parameters: (parameters) ' +\n              'body: (block (expression_statement (call ' +\n                'function: (identifier) ' +\n                'arguments: (argument_list))))))))',\n      );\n    }).timeout(5000);\n\n    it('can use the rust parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('rust')));\n      tree = parser.parse('const x: &\\'static str = r###\"hello\"###;');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(source_file (const_item ' +\n          'name: (identifier) ' +\n          'type: (reference_type (lifetime (identifier)) type: (primitive_type)) ' +\n          'value: (raw_string_literal (string_content))))',\n      );\n    }).timeout(5000);\n\n    it('can use the typescript parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('typescript')));\n      tree = parser.parse('a()\\nb()\\n[c]');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program ' +\n          '(expression_statement (call_expression function: (identifier) arguments: (arguments))) ' +\n          '(expression_statement (subscript_expression ' +\n            'object: (call_expression ' +\n              'function: (identifier) ' +\n              'arguments: (arguments)) ' +\n            'index: (identifier))))',\n      );\n    }).timeout(5000);\n\n    it('can use the tsx parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('tsx')));\n      tree = parser.parse('a()\\nb()\\n[c]');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program ' +\n          '(expression_statement (call_expression function: (identifier) arguments: (arguments))) ' +\n          '(expression_statement (subscript_expression ' +\n            'object: (call_expression ' +\n              'function: (identifier) ' +\n              'arguments: (arguments)) ' +\n            'index: (identifier))))',\n      );\n    }).timeout(5000);\n\n    it('parses only the text within the `includedRanges` if they are specified', () => {\n      const sourceCode = '<% foo() %> <% bar %>';\n\n      const start1 = sourceCode.indexOf('foo');\n      const end1 = start1 + 5;\n      const start2 = sourceCode.indexOf('bar');\n      const end2 = start2 + 3;\n\n      const tree = parser.parse(sourceCode, null, {\n        includedRanges: [\n          {\n            startIndex: start1,\n            endIndex: end1,\n            startPosition: {row: 0, column: start1},\n            endPosition: {row: 0, column: end1},\n          },\n          {\n            startIndex: start2,\n            endIndex: end2,\n            startPosition: {row: 0, column: start2},\n            endPosition: {row: 0, column: end2},\n          },\n        ],\n      });\n\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (call_expression function: (identifier) arguments: (arguments))) (expression_statement (identifier)))',\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 217
        },
        {
            "Name": "beforeEach",
            "Args": [
                "() => {\n      tree = null;\n      parser.setLanguage(JavaScript);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 220
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "JavaScript"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 222
        },
        {
            "Name": "afterEach",
            "Args": [
                "() => {\n      if (tree) tree.delete();\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 225
        },
        {
            "Name": "tree.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 226
        },
        {
            "Name": "it",
            "Args": [
                "'reads from the given input'",
                "() => {\n      const parts = ['first', '_', 'second', '_', 'third'];\n      tree = parser.parse(() => parts.shift());\n      assert.equal(tree.rootNode.toString(), '(program (expression_statement (identifier)))');\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 229
        },
        {
            "Name": "parser.parse",
            "Args": [
                "() => parts.shift()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 231
        },
        {
            "Name": "parts.shift",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 231
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(program (expression_statement (identifier)))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 232
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 232
        },
        {
            "Name": "it",
            "Args": [
                "'stops reading when the input callback return something that\\'s not a string'",
                "() => {\n      const parts = ['abc', 'def', 'ghi', {}, {}, {}, 'second-word', ' '];\n      tree = parser.parse(() => parts.shift());\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (identifier)))',\n      );\n      assert.equal(tree.rootNode.endIndex, 9);\n      assert.equal(parts.length, 2);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 235
        },
        {
            "Name": "parser.parse",
            "Args": [
                "() => parts.shift()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 237
        },
        {
            "Name": "parts.shift",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 237
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(program (expression_statement (identifier)))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 238
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 239
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.endIndex",
                "9"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 242
        },
        {
            "Name": "assert.equal",
            "Args": [
                "parts.length",
                "2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 243
        },
        {
            "Name": "it",
            "Args": [
                "'throws an exception when the given input is not a function'",
                "() => {\n      assert.throws(() => parser.parse(null), 'Argument must be a string or a function');\n      assert.throws(() => parser.parse(5), 'Argument must be a string or a function');\n      assert.throws(() => parser.parse({}), 'Argument must be a string or a function');\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 246
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => parser.parse(null)",
                "'Argument must be a string or a function'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 247
        },
        {
            "Name": "parser.parse",
            "Args": [
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 247
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => parser.parse(5)",
                "'Argument must be a string or a function'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 248
        },
        {
            "Name": "parser.parse",
            "Args": [
                "5"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 248
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => parser.parse({})",
                "'Argument must be a string or a function'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 249
        },
        {
            "Name": "parser.parse",
            "Args": [
                "{}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 249
        },
        {
            "Name": "it('handles long input strings', () => {\n      const repeatCount = 10000;\n      const inputString = `[${Array(repeatCount).fill('0').join(',')}]`;\n\n      tree = parser.parse(inputString);\n      assert.equal(tree.rootNode.type, 'program');\n      assert.equal(tree.rootNode.firstChild.firstChild.namedChildCount, repeatCount);\n    }).timeout",
            "Args": [
                "5000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 252
        },
        {
            "Name": "it",
            "Args": [
                "'handles long input strings'",
                "() => {\n      const repeatCount = 10000;\n      const inputString = `[${Array(repeatCount).fill('0').join(',')}]`;\n\n      tree = parser.parse(inputString);\n      assert.equal(tree.rootNode.type, 'program');\n      assert.equal(tree.rootNode.firstChild.firstChild.namedChildCount, repeatCount);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 252
        },
        {
            "Name": "Array(repeatCount).fill('0').join",
            "Args": [
                "','"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 254
        },
        {
            "Name": "Array(repeatCount).fill",
            "Args": [
                "'0'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 254
        },
        {
            "Name": "Array",
            "Args": [
                "repeatCount"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 254
        },
        {
            "Name": "parser.parse",
            "Args": [
                "inputString"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 256
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.type",
                "'program'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 257
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.firstChild.firstChild.namedChildCount",
                "repeatCount"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 258
        },
        {
            "Name": "it('can use the bash parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('bash')));\n      tree = parser.parse('FOO=bar echo <<EOF 2> err.txt > hello.txt \\nhello${FOO}\\nEOF');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program ' +\n            '(redirected_statement ' +\n              'body: (command ' +\n                '(variable_assignment name: (variable_name) value: (word)) ' +\n                'name: (command_name (word))) ' +\n              'redirect: (heredoc_redirect (heredoc_start) ' +\n                'redirect: (file_redirect descriptor: (file_descriptor) destination: (word)) ' +\n                'redirect: (file_redirect destination: (word)) ' +\n                '(heredoc_body ' +\n                  '(expansion (variable_name)) (heredoc_content)) (heredoc_end))))',\n      );\n    }).timeout",
            "Args": [
                "5000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 261
        },
        {
            "Name": "it",
            "Args": [
                "'can use the bash parser'",
                "async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('bash')));\n      tree = parser.parse('FOO=bar echo <<EOF 2> err.txt > hello.txt \\nhello${FOO}\\nEOF');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program ' +\n            '(redirected_statement ' +\n              'body: (command ' +\n                '(variable_assignment name: (variable_name) value: (word)) ' +\n                'name: (command_name (word))) ' +\n              'redirect: (heredoc_redirect (heredoc_start) ' +\n                'redirect: (file_redirect descriptor: (file_descriptor) destination: (word)) ' +\n                'redirect: (file_redirect destination: (word)) ' +\n                '(heredoc_body ' +\n                  '(expansion (variable_name)) (heredoc_content)) (heredoc_end))))',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 261
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "await Parser.Language.load(languageURL('bash'))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 262
        },
        {
            "Name": "Parser.Language.load",
            "Args": [
                "languageURL('bash')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 262
        },
        {
            "Name": "languageURL",
            "Args": [
                "'bash'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 262
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'FOO=bar echo <<EOF 2> err.txt > hello.txt \\nhello${FOO}\\nEOF'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 263
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(program ' +\n            '(redirected_statement ' +\n              'body: (command ' +\n                '(variable_assignment name: (variable_name) value: (word)) ' +\n                'name: (command_name (word))) ' +\n              'redirect: (heredoc_redirect (heredoc_start) ' +\n                'redirect: (file_redirect descriptor: (file_descriptor) destination: (word)) ' +\n                'redirect: (file_redirect destination: (word)) ' +\n                '(heredoc_body ' +\n                  '(expansion (variable_name)) (heredoc_content)) (heredoc_end))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 264
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 265
        },
        {
            "Name": "it('can use the c++ parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('cpp')));\n      tree = parser.parse('const char *s = R\"EOF(HELLO WORLD)EOF\";');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(translation_unit (declaration ' +\n          '(type_qualifier) ' +\n          'type: (primitive_type) ' +\n          'declarator: (init_declarator ' +\n            'declarator: (pointer_declarator declarator: (identifier)) ' +\n            'value: (raw_string_literal delimiter: (raw_string_delimiter) (raw_string_content) (raw_string_delimiter)))))',\n      );\n    }).timeout",
            "Args": [
                "5000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 279
        },
        {
            "Name": "it",
            "Args": [
                "'can use the c++ parser'",
                "async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('cpp')));\n      tree = parser.parse('const char *s = R\"EOF(HELLO WORLD)EOF\";');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(translation_unit (declaration ' +\n          '(type_qualifier) ' +\n          'type: (primitive_type) ' +\n          'declarator: (init_declarator ' +\n            'declarator: (pointer_declarator declarator: (identifier)) ' +\n            'value: (raw_string_literal delimiter: (raw_string_delimiter) (raw_string_content) (raw_string_delimiter)))))',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 279
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "await Parser.Language.load(languageURL('cpp'))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 280
        },
        {
            "Name": "Parser.Language.load",
            "Args": [
                "languageURL('cpp')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 280
        },
        {
            "Name": "languageURL",
            "Args": [
                "'cpp'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 280
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'const char *s = R\"EOF(HELLO WORLD)EOF\";'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 281
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(translation_unit (declaration ' +\n          '(type_qualifier) ' +\n          'type: (primitive_type) ' +\n          'declarator: (init_declarator ' +\n            'declarator: (pointer_declarator declarator: (identifier)) ' +\n            'value: (raw_string_literal delimiter: (raw_string_delimiter) (raw_string_content) (raw_string_delimiter)))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 282
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 283
        },
        {
            "Name": "it('can use the HTML parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('html')));\n      tree = parser.parse('<div><span><custom></custom></span></div>');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(document (element (start_tag (tag_name)) (element (start_tag (tag_name)) (element (start_tag (tag_name)) (end_tag (tag_name))) (end_tag (tag_name))) (end_tag (tag_name))))',\n      );\n    }).timeout",
            "Args": [
                "5000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 293
        },
        {
            "Name": "it",
            "Args": [
                "'can use the HTML parser'",
                "async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('html')));\n      tree = parser.parse('<div><span><custom></custom></span></div>');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(document (element (start_tag (tag_name)) (element (start_tag (tag_name)) (element (start_tag (tag_name)) (end_tag (tag_name))) (end_tag (tag_name))) (end_tag (tag_name))))',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 293
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "await Parser.Language.load(languageURL('html'))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 294
        },
        {
            "Name": "Parser.Language.load",
            "Args": [
                "languageURL('html')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 294
        },
        {
            "Name": "languageURL",
            "Args": [
                "'html'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 294
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'<div><span><custom></custom></span></div>'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 295
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(document (element (start_tag (tag_name)) (element (start_tag (tag_name)) (element (start_tag (tag_name)) (end_tag (tag_name))) (end_tag (tag_name))) (end_tag (tag_name))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 296
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 297
        },
        {
            "Name": "it('can use the python parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('python')));\n      tree = parser.parse('class A:\\n  def b():\\n    c()');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(module (class_definition ' +\n          'name: (identifier) ' +\n          'body: (block ' +\n            '(function_definition ' +\n              'name: (identifier) ' +\n              'parameters: (parameters) ' +\n              'body: (block (expression_statement (call ' +\n                'function: (identifier) ' +\n                'arguments: (argument_list))))))))',\n      );\n    }).timeout",
            "Args": [
                "5000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 302
        },
        {
            "Name": "it",
            "Args": [
                "'can use the python parser'",
                "async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('python')));\n      tree = parser.parse('class A:\\n  def b():\\n    c()');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(module (class_definition ' +\n          'name: (identifier) ' +\n          'body: (block ' +\n            '(function_definition ' +\n              'name: (identifier) ' +\n              'parameters: (parameters) ' +\n              'body: (block (expression_statement (call ' +\n                'function: (identifier) ' +\n                'arguments: (argument_list))))))))',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 302
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "await Parser.Language.load(languageURL('python'))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 303
        },
        {
            "Name": "Parser.Language.load",
            "Args": [
                "languageURL('python')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 303
        },
        {
            "Name": "languageURL",
            "Args": [
                "'python'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 303
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'class A:\\n  def b():\\n    c()'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 304
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(module (class_definition ' +\n          'name: (identifier) ' +\n          'body: (block ' +\n            '(function_definition ' +\n              'name: (identifier) ' +\n              'parameters: (parameters) ' +\n              'body: (block (expression_statement (call ' +\n                'function: (identifier) ' +\n                'arguments: (argument_list))))))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 305
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 306
        },
        {
            "Name": "it('can use the rust parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('rust')));\n      tree = parser.parse('const x: &\\'static str = r###\"hello\"###;');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(source_file (const_item ' +\n          'name: (identifier) ' +\n          'type: (reference_type (lifetime (identifier)) type: (primitive_type)) ' +\n          'value: (raw_string_literal (string_content))))',\n      );\n    }).timeout",
            "Args": [
                "5000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 319
        },
        {
            "Name": "it",
            "Args": [
                "'can use the rust parser'",
                "async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('rust')));\n      tree = parser.parse('const x: &\\'static str = r###\"hello\"###;');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(source_file (const_item ' +\n          'name: (identifier) ' +\n          'type: (reference_type (lifetime (identifier)) type: (primitive_type)) ' +\n          'value: (raw_string_literal (string_content))))',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 319
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "await Parser.Language.load(languageURL('rust'))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 320
        },
        {
            "Name": "Parser.Language.load",
            "Args": [
                "languageURL('rust')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 320
        },
        {
            "Name": "languageURL",
            "Args": [
                "'rust'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 320
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'const x: &\\'static str = r###\"hello\"###;'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 321
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(source_file (const_item ' +\n          'name: (identifier) ' +\n          'type: (reference_type (lifetime (identifier)) type: (primitive_type)) ' +\n          'value: (raw_string_literal (string_content))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 322
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 323
        },
        {
            "Name": "it('can use the typescript parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('typescript')));\n      tree = parser.parse('a()\\nb()\\n[c]');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program ' +\n          '(expression_statement (call_expression function: (identifier) arguments: (arguments))) ' +\n          '(expression_statement (subscript_expression ' +\n            'object: (call_expression ' +\n              'function: (identifier) ' +\n              'arguments: (arguments)) ' +\n            'index: (identifier))))',\n      );\n    }).timeout",
            "Args": [
                "5000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 331
        },
        {
            "Name": "it",
            "Args": [
                "'can use the typescript parser'",
                "async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('typescript')));\n      tree = parser.parse('a()\\nb()\\n[c]');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program ' +\n          '(expression_statement (call_expression function: (identifier) arguments: (arguments))) ' +\n          '(expression_statement (subscript_expression ' +\n            'object: (call_expression ' +\n              'function: (identifier) ' +\n              'arguments: (arguments)) ' +\n            'index: (identifier))))',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 331
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "await Parser.Language.load(languageURL('typescript'))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 332
        },
        {
            "Name": "Parser.Language.load",
            "Args": [
                "languageURL('typescript')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 332
        },
        {
            "Name": "languageURL",
            "Args": [
                "'typescript'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 332
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'a()\\nb()\\n[c]'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 333
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(program ' +\n          '(expression_statement (call_expression function: (identifier) arguments: (arguments))) ' +\n          '(expression_statement (subscript_expression ' +\n            'object: (call_expression ' +\n              'function: (identifier) ' +\n              'arguments: (arguments)) ' +\n            'index: (identifier))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 334
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 335
        },
        {
            "Name": "it('can use the tsx parser', async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('tsx')));\n      tree = parser.parse('a()\\nb()\\n[c]');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program ' +\n          '(expression_statement (call_expression function: (identifier) arguments: (arguments))) ' +\n          '(expression_statement (subscript_expression ' +\n            'object: (call_expression ' +\n              'function: (identifier) ' +\n              'arguments: (arguments)) ' +\n            'index: (identifier))))',\n      );\n    }).timeout",
            "Args": [
                "5000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 346
        },
        {
            "Name": "it",
            "Args": [
                "'can use the tsx parser'",
                "async () => {\n      parser.setLanguage(await Parser.Language.load(languageURL('tsx')));\n      tree = parser.parse('a()\\nb()\\n[c]');\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program ' +\n          '(expression_statement (call_expression function: (identifier) arguments: (arguments))) ' +\n          '(expression_statement (subscript_expression ' +\n            'object: (call_expression ' +\n              'function: (identifier) ' +\n              'arguments: (arguments)) ' +\n            'index: (identifier))))',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 346
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "await Parser.Language.load(languageURL('tsx'))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 347
        },
        {
            "Name": "Parser.Language.load",
            "Args": [
                "languageURL('tsx')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 347
        },
        {
            "Name": "languageURL",
            "Args": [
                "'tsx'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 347
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'a()\\nb()\\n[c]'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 348
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(program ' +\n          '(expression_statement (call_expression function: (identifier) arguments: (arguments))) ' +\n          '(expression_statement (subscript_expression ' +\n            'object: (call_expression ' +\n              'function: (identifier) ' +\n              'arguments: (arguments)) ' +\n            'index: (identifier))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 349
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 350
        },
        {
            "Name": "it",
            "Args": [
                "'parses only the text within the `includedRanges` if they are specified'",
                "() => {\n      const sourceCode = '<% foo() %> <% bar %>';\n\n      const start1 = sourceCode.indexOf('foo');\n      const end1 = start1 + 5;\n      const start2 = sourceCode.indexOf('bar');\n      const end2 = start2 + 3;\n\n      const tree = parser.parse(sourceCode, null, {\n        includedRanges: [\n          {\n            startIndex: start1,\n            endIndex: end1,\n            startPosition: {row: 0, column: start1},\n            endPosition: {row: 0, column: end1},\n          },\n          {\n            startIndex: start2,\n            endIndex: end2,\n            startPosition: {row: 0, column: start2},\n            endPosition: {row: 0, column: end2},\n          },\n        ],\n      });\n\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (call_expression function: (identifier) arguments: (arguments))) (expression_statement (identifier)))',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 361
        },
        {
            "Name": "sourceCode.indexOf",
            "Args": [
                "'foo'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 364
        },
        {
            "Name": "sourceCode.indexOf",
            "Args": [
                "'bar'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 366
        },
        {
            "Name": "parser.parse",
            "Args": [
                "sourceCode",
                "null",
                "{\n        includedRanges: [\n          {\n            startIndex: start1,\n            endIndex: end1,\n            startPosition: {row: 0, column: start1},\n            endPosition: {row: 0, column: end1},\n          },\n          {\n            startIndex: start2,\n            endIndex: end2,\n            startPosition: {row: 0, column: start2},\n            endPosition: {row: 0, column: end2},\n          },\n        ],\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 369
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(program (expression_statement (call_expression function: (identifier) arguments: (arguments))) (expression_statement (identifier)))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 386
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/parser-test.js",
            "Line": 387
        },
        {
            "Name": "require",
            "Args": [
                "'chai'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 1
        },
        {
            "Name": "describe",
            "Args": [
                "'Tree'",
                "() => {\n  let parser; let tree;\n\n  before(async () =>\n    ({Parser, JavaScript} = await require('./helper')),\n  );\n\n  beforeEach(() => {\n    parser = new Parser().setLanguage(JavaScript);\n  });\n\n  afterEach(() => {\n    parser.delete();\n    tree.delete();\n  });\n\n  describe('.edit', () => {\n    let input; let edit;\n\n    it('updates the positions of nodes', () => {\n      input = 'abc + cde';\n      tree = parser.parse(input);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (identifier) right: (identifier))))',\n      );\n\n      let sumNode = tree.rootNode.firstChild.firstChild;\n      let variableNode1 = sumNode.firstChild;\n      let variableNode2 = sumNode.lastChild;\n      assert.equal(variableNode1.startIndex, 0);\n      assert.equal(variableNode1.endIndex, 3);\n      assert.equal(variableNode2.startIndex, 6);\n      assert.equal(variableNode2.endIndex, 9);\n\n      ([input, edit] = spliceInput(input, input.indexOf('bc'), 0, ' * '));\n      assert.equal(input, 'a * bc + cde');\n      tree.edit(edit);\n\n      sumNode = tree.rootNode.firstChild.firstChild;\n      variableNode1 = sumNode.firstChild;\n      variableNode2 = sumNode.lastChild;\n      assert.equal(variableNode1.startIndex, 0);\n      assert.equal(variableNode1.endIndex, 6);\n      assert.equal(variableNode2.startIndex, 9);\n      assert.equal(variableNode2.endIndex, 12);\n\n      tree = parser.parse(input, tree);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))))',\n      );\n    });\n\n    it('handles non-ascii characters', () => {\n      input = '\u03b1\u03b2\u03b4 + cde';\n\n      tree = parser.parse(input);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (identifier) right: (identifier))))',\n      );\n\n      let variableNode = tree.rootNode.firstChild.firstChild.lastChild;\n\n      ([input, edit] = spliceInput(input, input.indexOf('\u03b4'), 0, '\ud83d\udc4d * '));\n      assert.equal(input, '\u03b1\u03b2\ud83d\udc4d * \u03b4 + cde');\n      tree.edit(edit);\n\n      variableNode = tree.rootNode.firstChild.firstChild.lastChild;\n      assert.equal(variableNode.startIndex, input.indexOf('cde'));\n\n      tree = parser.parse(input, tree);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))))',\n      );\n    });\n  });\n\n  describe('.getChangedRanges(previous)', () => {\n    it('reports the ranges of text whose syntactic meaning has changed', () => {\n      let sourceCode = 'abcdefg + hij';\n      tree = parser.parse(sourceCode);\n\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (identifier) right: (identifier))))',\n      );\n\n      sourceCode = 'abc + defg + hij';\n      tree.edit({\n        startIndex: 2,\n        oldEndIndex: 2,\n        newEndIndex: 5,\n        startPosition: {row: 0, column: 2},\n        oldEndPosition: {row: 0, column: 2},\n        newEndPosition: {row: 0, column: 5},\n      });\n\n      const tree2 = parser.parse(sourceCode, tree);\n      assert.equal(\n        tree2.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))))',\n      );\n\n      const ranges = tree.getChangedRanges(tree2);\n      assert.deepEqual(ranges, [\n        {\n          startIndex: 0,\n          endIndex: 'abc + defg'.length,\n          startPosition: {row: 0, column: 0},\n          endPosition: {row: 0, column: 'abc + defg'.length},\n        },\n      ]);\n\n      tree2.delete();\n    });\n\n    it('throws an exception if the argument is not a tree', () => {\n      tree = parser.parse('abcdefg + hij');\n\n      assert.throws(() => {\n        tree.getChangedRanges({});\n      }, /Argument must be a Tree/);\n    });\n  });\n\n  describe('.walk()', () => {\n    let cursor;\n\n    afterEach(() => {\n      cursor.delete();\n    });\n\n    it('returns a cursor that can be used to walk the tree', () => {\n      tree = parser.parse('a * b + c / d');\n      cursor = tree.walk();\n\n      assertCursorState(cursor, {\n        nodeType: 'program',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 13},\n        startIndex: 0,\n        endIndex: 13,\n      });\n\n      assert(cursor.gotoFirstChild());\n      assertCursorState(cursor, {\n        nodeType: 'expression_statement',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 13},\n        startIndex: 0,\n        endIndex: 13,\n      });\n\n      assert(cursor.gotoFirstChild());\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 13},\n        startIndex: 0,\n        endIndex: 13,\n      });\n\n      assert(cursor.gotoFirstChild());\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      });\n\n      assert(cursor.gotoFirstChild());\n      assert.equal(cursor.nodeText, 'a');\n      assertCursorState(cursor, {\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 1},\n        startIndex: 0,\n        endIndex: 1,\n      });\n\n      assert(!cursor.gotoFirstChild());\n      assert(cursor.gotoNextSibling());\n      assert.equal(cursor.nodeText, '*');\n      assertCursorState(cursor, {\n        nodeType: '*',\n        nodeIsNamed: false,\n        startPosition: {row: 0, column: 2},\n        endPosition: {row: 0, column: 3},\n        startIndex: 2,\n        endIndex: 3,\n      });\n\n      assert(cursor.gotoNextSibling());\n      assert.equal(cursor.nodeText, 'b');\n      assertCursorState(cursor, {\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 4},\n        endPosition: {row: 0, column: 5},\n        startIndex: 4,\n        endIndex: 5,\n      });\n\n      assert(!cursor.gotoNextSibling());\n      assert(cursor.gotoParent());\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      });\n\n      assert(cursor.gotoNextSibling());\n      assertCursorState(cursor, {\n        nodeType: '+',\n        nodeIsNamed: false,\n        startPosition: {row: 0, column: 6},\n        endPosition: {row: 0, column: 7},\n        startIndex: 6,\n        endIndex: 7,\n      });\n\n      assert(cursor.gotoNextSibling());\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 8},\n        endPosition: {row: 0, column: 13},\n        startIndex: 8,\n        endIndex: 13,\n      });\n\n      const copy = tree.walk();\n      copy.resetTo(cursor);\n\n      assert(copy.gotoPreviousSibling());\n      assertCursorState(copy, {\n        nodeType: '+',\n        nodeIsNamed: false,\n        startPosition: {row: 0, column: 6},\n        endPosition: {row: 0, column: 7},\n        startIndex: 6,\n        endIndex: 7,\n      });\n\n      assert(copy.gotoPreviousSibling());\n      assertCursorState(copy, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      });\n\n      assert(copy.gotoLastChild());\n      assertCursorState(copy, {\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 4},\n        endPosition: {row: 0, column: 5},\n        startIndex: 4,\n        endIndex: 5,\n      });\n\n      assert(copy.gotoParent());\n      assert(copy.gotoParent());\n      assert.equal(copy.nodeType, 'binary_expression');\n      assert(copy.gotoParent());\n      assert.equal(copy.nodeType, 'expression_statement');\n      assert(copy.gotoParent());\n      assert.equal(copy.nodeType, 'program');\n      assert(!copy.gotoParent());\n\n      assert(cursor.gotoParent());\n      assert.equal(cursor.nodeType, 'binary_expression');\n      assert(cursor.gotoParent());\n      assert.equal(cursor.nodeType, 'expression_statement');\n      assert(cursor.gotoParent());\n      assert.equal(cursor.nodeType, 'program');\n      assert(!cursor.gotoParent());\n    });\n\n    it('keeps track of the field name associated with each node', () => {\n      tree = parser.parse('a.b();');\n      cursor = tree.walk();\n      cursor.gotoFirstChild();\n      cursor.gotoFirstChild();\n\n      assert.equal(cursor.currentNode.type, 'call_expression');\n      assert.equal(cursor.currentFieldName, null);\n\n      cursor.gotoFirstChild();\n      assert.equal(cursor.currentNode.type, 'member_expression');\n      assert.equal(cursor.currentFieldName, 'function');\n\n      cursor.gotoFirstChild();\n      assert.equal(cursor.currentNode.type, 'identifier');\n      assert.equal(cursor.currentFieldName, 'object');\n\n      cursor.gotoNextSibling();\n      cursor.gotoNextSibling();\n      assert.equal(cursor.currentNode.type, 'property_identifier');\n      assert.equal(cursor.currentFieldName, 'property');\n\n      cursor.gotoParent();\n      cursor.gotoNextSibling();\n      assert.equal(cursor.currentNode.type, 'arguments');\n      assert.equal(cursor.currentFieldName, 'arguments');\n    });\n\n    it('returns a cursor that can be reset anywhere in the tree', () => {\n      tree = parser.parse('a * b + c / d');\n      cursor = tree.walk();\n      const root = tree.rootNode.firstChild;\n\n      cursor.reset(root.firstChild.firstChild);\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      });\n\n      cursor.gotoFirstChild();\n      assertCursorState(cursor, {\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 1},\n        startIndex: 0,\n        endIndex: 1,\n      });\n\n      assert(cursor.gotoParent());\n      assert(!cursor.gotoParent());\n    });\n  });\n\n  describe('.copy', () => {\n    it('creates another tree that remains stable if the original tree is edited', () => {\n      input = 'abc + cde';\n      tree = parser.parse(input);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (identifier) right: (identifier))))',\n      );\n\n      const tree2 = tree.copy();\n      ([input, edit] = spliceInput(input, 3, 0, '123'));\n      assert.equal(input, 'abc123 + cde');\n      tree.edit(edit);\n\n      const leftNode = tree.rootNode.firstChild.firstChild.firstChild;\n      const leftNode2 = tree2.rootNode.firstChild.firstChild.firstChild;\n      const rightNode = tree.rootNode.firstChild.firstChild.lastChild;\n      const rightNode2 = tree2.rootNode.firstChild.firstChild.lastChild;\n      assert.equal(leftNode.endIndex, 6);\n      assert.equal(leftNode2.endIndex, 3);\n      assert.equal(rightNode.startIndex, 9);\n      assert.equal(rightNode2.startIndex, 6);\n    });\n  });\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 4
        },
        {
            "Name": "before",
            "Args": [
                "async () =>\n    ({Parser, JavaScript} = await require('./helper'))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 7
        },
        {
            "Name": "require",
            "Args": [
                "'./helper'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 8
        },
        {
            "Name": "beforeEach",
            "Args": [
                "() => {\n    parser = new Parser().setLanguage(JavaScript);\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 11
        },
        {
            "Name": "new Parser().setLanguage",
            "Args": [
                "JavaScript"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 12
        },
        {
            "Name": "Parser",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 12
        },
        {
            "Name": "afterEach",
            "Args": [
                "() => {\n    parser.delete();\n    tree.delete();\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 15
        },
        {
            "Name": "parser.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 16
        },
        {
            "Name": "tree.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 17
        },
        {
            "Name": "describe",
            "Args": [
                "'.edit'",
                "() => {\n    let input; let edit;\n\n    it('updates the positions of nodes', () => {\n      input = 'abc + cde';\n      tree = parser.parse(input);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (identifier) right: (identifier))))',\n      );\n\n      let sumNode = tree.rootNode.firstChild.firstChild;\n      let variableNode1 = sumNode.firstChild;\n      let variableNode2 = sumNode.lastChild;\n      assert.equal(variableNode1.startIndex, 0);\n      assert.equal(variableNode1.endIndex, 3);\n      assert.equal(variableNode2.startIndex, 6);\n      assert.equal(variableNode2.endIndex, 9);\n\n      ([input, edit] = spliceInput(input, input.indexOf('bc'), 0, ' * '));\n      assert.equal(input, 'a * bc + cde');\n      tree.edit(edit);\n\n      sumNode = tree.rootNode.firstChild.firstChild;\n      variableNode1 = sumNode.firstChild;\n      variableNode2 = sumNode.lastChild;\n      assert.equal(variableNode1.startIndex, 0);\n      assert.equal(variableNode1.endIndex, 6);\n      assert.equal(variableNode2.startIndex, 9);\n      assert.equal(variableNode2.endIndex, 12);\n\n      tree = parser.parse(input, tree);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))))',\n      );\n    });\n\n    it('handles non-ascii characters', () => {\n      input = '\u03b1\u03b2\u03b4 + cde';\n\n      tree = parser.parse(input);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (identifier) right: (identifier))))',\n      );\n\n      let variableNode = tree.rootNode.firstChild.firstChild.lastChild;\n\n      ([input, edit] = spliceInput(input, input.indexOf('\u03b4'), 0, '\ud83d\udc4d * '));\n      assert.equal(input, '\u03b1\u03b2\ud83d\udc4d * \u03b4 + cde');\n      tree.edit(edit);\n\n      variableNode = tree.rootNode.firstChild.firstChild.lastChild;\n      assert.equal(variableNode.startIndex, input.indexOf('cde'));\n\n      tree = parser.parse(input, tree);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))))',\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 20
        },
        {
            "Name": "it",
            "Args": [
                "'updates the positions of nodes'",
                "() => {\n      input = 'abc + cde';\n      tree = parser.parse(input);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (identifier) right: (identifier))))',\n      );\n\n      let sumNode = tree.rootNode.firstChild.firstChild;\n      let variableNode1 = sumNode.firstChild;\n      let variableNode2 = sumNode.lastChild;\n      assert.equal(variableNode1.startIndex, 0);\n      assert.equal(variableNode1.endIndex, 3);\n      assert.equal(variableNode2.startIndex, 6);\n      assert.equal(variableNode2.endIndex, 9);\n\n      ([input, edit] = spliceInput(input, input.indexOf('bc'), 0, ' * '));\n      assert.equal(input, 'a * bc + cde');\n      tree.edit(edit);\n\n      sumNode = tree.rootNode.firstChild.firstChild;\n      variableNode1 = sumNode.firstChild;\n      variableNode2 = sumNode.lastChild;\n      assert.equal(variableNode1.startIndex, 0);\n      assert.equal(variableNode1.endIndex, 6);\n      assert.equal(variableNode2.startIndex, 9);\n      assert.equal(variableNode2.endIndex, 12);\n\n      tree = parser.parse(input, tree);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))))',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 23
        },
        {
            "Name": "parser.parse",
            "Args": [
                "input"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 25
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(program (expression_statement (binary_expression left: (identifier) right: (identifier))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 26
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 27
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode1.startIndex",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 34
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode1.endIndex",
                "3"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 35
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode2.startIndex",
                "6"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 36
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode2.endIndex",
                "9"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 37
        },
        {
            "Name": "spliceInput",
            "Args": [
                "input",
                "input.indexOf('bc')",
                "0",
                "' * '"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 39
        },
        {
            "Name": "input.indexOf",
            "Args": [
                "'bc'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 39
        },
        {
            "Name": "assert.equal",
            "Args": [
                "input",
                "'a * bc + cde'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 40
        },
        {
            "Name": "tree.edit",
            "Args": [
                "edit"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 41
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode1.startIndex",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 46
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode1.endIndex",
                "6"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 47
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode2.startIndex",
                "9"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 48
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode2.endIndex",
                "12"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 49
        },
        {
            "Name": "parser.parse",
            "Args": [
                "input",
                "tree"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 51
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(program (expression_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 52
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 53
        },
        {
            "Name": "it",
            "Args": [
                "'handles non-ascii characters'",
                "() => {\n      input = '\u03b1\u03b2\u03b4 + cde';\n\n      tree = parser.parse(input);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (identifier) right: (identifier))))',\n      );\n\n      let variableNode = tree.rootNode.firstChild.firstChild.lastChild;\n\n      ([input, edit] = spliceInput(input, input.indexOf('\u03b4'), 0, '\ud83d\udc4d * '));\n      assert.equal(input, '\u03b1\u03b2\ud83d\udc4d * \u03b4 + cde');\n      tree.edit(edit);\n\n      variableNode = tree.rootNode.firstChild.firstChild.lastChild;\n      assert.equal(variableNode.startIndex, input.indexOf('cde'));\n\n      tree = parser.parse(input, tree);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))))',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 58
        },
        {
            "Name": "parser.parse",
            "Args": [
                "input"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 61
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(program (expression_statement (binary_expression left: (identifier) right: (identifier))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 62
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 63
        },
        {
            "Name": "spliceInput",
            "Args": [
                "input",
                "input.indexOf('\u03b4')",
                "0",
                "'\ud83d\udc4d * '"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 69
        },
        {
            "Name": "input.indexOf",
            "Args": [
                "'\u03b4'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 69
        },
        {
            "Name": "assert.equal",
            "Args": [
                "input",
                "'\u03b1\u03b2\ud83d\udc4d * \u03b4 + cde'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 70
        },
        {
            "Name": "tree.edit",
            "Args": [
                "edit"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 71
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode.startIndex",
                "input.indexOf('cde')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 74
        },
        {
            "Name": "input.indexOf",
            "Args": [
                "'cde'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 74
        },
        {
            "Name": "parser.parse",
            "Args": [
                "input",
                "tree"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 76
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(program (expression_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 77
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 78
        },
        {
            "Name": "describe",
            "Args": [
                "'.getChangedRanges(previous)'",
                "() => {\n    it('reports the ranges of text whose syntactic meaning has changed', () => {\n      let sourceCode = 'abcdefg + hij';\n      tree = parser.parse(sourceCode);\n\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (identifier) right: (identifier))))',\n      );\n\n      sourceCode = 'abc + defg + hij';\n      tree.edit({\n        startIndex: 2,\n        oldEndIndex: 2,\n        newEndIndex: 5,\n        startPosition: {row: 0, column: 2},\n        oldEndPosition: {row: 0, column: 2},\n        newEndPosition: {row: 0, column: 5},\n      });\n\n      const tree2 = parser.parse(sourceCode, tree);\n      assert.equal(\n        tree2.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))))',\n      );\n\n      const ranges = tree.getChangedRanges(tree2);\n      assert.deepEqual(ranges, [\n        {\n          startIndex: 0,\n          endIndex: 'abc + defg'.length,\n          startPosition: {row: 0, column: 0},\n          endPosition: {row: 0, column: 'abc + defg'.length},\n        },\n      ]);\n\n      tree2.delete();\n    });\n\n    it('throws an exception if the argument is not a tree', () => {\n      tree = parser.parse('abcdefg + hij');\n\n      assert.throws(() => {\n        tree.getChangedRanges({});\n      }, /Argument must be a Tree/);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 84
        },
        {
            "Name": "it",
            "Args": [
                "'reports the ranges of text whose syntactic meaning has changed'",
                "() => {\n      let sourceCode = 'abcdefg + hij';\n      tree = parser.parse(sourceCode);\n\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (identifier) right: (identifier))))',\n      );\n\n      sourceCode = 'abc + defg + hij';\n      tree.edit({\n        startIndex: 2,\n        oldEndIndex: 2,\n        newEndIndex: 5,\n        startPosition: {row: 0, column: 2},\n        oldEndPosition: {row: 0, column: 2},\n        newEndPosition: {row: 0, column: 5},\n      });\n\n      const tree2 = parser.parse(sourceCode, tree);\n      assert.equal(\n        tree2.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))))',\n      );\n\n      const ranges = tree.getChangedRanges(tree2);\n      assert.deepEqual(ranges, [\n        {\n          startIndex: 0,\n          endIndex: 'abc + defg'.length,\n          startPosition: {row: 0, column: 0},\n          endPosition: {row: 0, column: 'abc + defg'.length},\n        },\n      ]);\n\n      tree2.delete();\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 85
        },
        {
            "Name": "parser.parse",
            "Args": [
                "sourceCode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 87
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(program (expression_statement (binary_expression left: (identifier) right: (identifier))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 89
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 90
        },
        {
            "Name": "tree.edit",
            "Args": [
                "{\n        startIndex: 2,\n        oldEndIndex: 2,\n        newEndIndex: 5,\n        startPosition: {row: 0, column: 2},\n        oldEndPosition: {row: 0, column: 2},\n        newEndPosition: {row: 0, column: 5},\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 95
        },
        {
            "Name": "parser.parse",
            "Args": [
                "sourceCode",
                "tree"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 104
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree2.rootNode.toString()",
                "'(program (expression_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 105
        },
        {
            "Name": "tree2.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 106
        },
        {
            "Name": "tree.getChangedRanges",
            "Args": [
                "tree2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 110
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "ranges",
                "[\n        {\n          startIndex: 0,\n          endIndex: 'abc + defg'.length,\n          startPosition: {row: 0, column: 0},\n          endPosition: {row: 0, column: 'abc + defg'.length},\n        },\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 111
        },
        {
            "Name": "tree2.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 120
        },
        {
            "Name": "it",
            "Args": [
                "'throws an exception if the argument is not a tree'",
                "() => {\n      tree = parser.parse('abcdefg + hij');\n\n      assert.throws(() => {\n        tree.getChangedRanges({});\n      }, /Argument must be a Tree/);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 123
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'abcdefg + hij'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 124
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        tree.getChangedRanges({});\n      }",
                "/Argument must be a Tree/"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 126
        },
        {
            "Name": "tree.getChangedRanges",
            "Args": [
                "{}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 127
        },
        {
            "Name": "describe",
            "Args": [
                "'.walk()'",
                "() => {\n    let cursor;\n\n    afterEach(() => {\n      cursor.delete();\n    });\n\n    it('returns a cursor that can be used to walk the tree', () => {\n      tree = parser.parse('a * b + c / d');\n      cursor = tree.walk();\n\n      assertCursorState(cursor, {\n        nodeType: 'program',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 13},\n        startIndex: 0,\n        endIndex: 13,\n      });\n\n      assert(cursor.gotoFirstChild());\n      assertCursorState(cursor, {\n        nodeType: 'expression_statement',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 13},\n        startIndex: 0,\n        endIndex: 13,\n      });\n\n      assert(cursor.gotoFirstChild());\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 13},\n        startIndex: 0,\n        endIndex: 13,\n      });\n\n      assert(cursor.gotoFirstChild());\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      });\n\n      assert(cursor.gotoFirstChild());\n      assert.equal(cursor.nodeText, 'a');\n      assertCursorState(cursor, {\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 1},\n        startIndex: 0,\n        endIndex: 1,\n      });\n\n      assert(!cursor.gotoFirstChild());\n      assert(cursor.gotoNextSibling());\n      assert.equal(cursor.nodeText, '*');\n      assertCursorState(cursor, {\n        nodeType: '*',\n        nodeIsNamed: false,\n        startPosition: {row: 0, column: 2},\n        endPosition: {row: 0, column: 3},\n        startIndex: 2,\n        endIndex: 3,\n      });\n\n      assert(cursor.gotoNextSibling());\n      assert.equal(cursor.nodeText, 'b');\n      assertCursorState(cursor, {\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 4},\n        endPosition: {row: 0, column: 5},\n        startIndex: 4,\n        endIndex: 5,\n      });\n\n      assert(!cursor.gotoNextSibling());\n      assert(cursor.gotoParent());\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      });\n\n      assert(cursor.gotoNextSibling());\n      assertCursorState(cursor, {\n        nodeType: '+',\n        nodeIsNamed: false,\n        startPosition: {row: 0, column: 6},\n        endPosition: {row: 0, column: 7},\n        startIndex: 6,\n        endIndex: 7,\n      });\n\n      assert(cursor.gotoNextSibling());\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 8},\n        endPosition: {row: 0, column: 13},\n        startIndex: 8,\n        endIndex: 13,\n      });\n\n      const copy = tree.walk();\n      copy.resetTo(cursor);\n\n      assert(copy.gotoPreviousSibling());\n      assertCursorState(copy, {\n        nodeType: '+',\n        nodeIsNamed: false,\n        startPosition: {row: 0, column: 6},\n        endPosition: {row: 0, column: 7},\n        startIndex: 6,\n        endIndex: 7,\n      });\n\n      assert(copy.gotoPreviousSibling());\n      assertCursorState(copy, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      });\n\n      assert(copy.gotoLastChild());\n      assertCursorState(copy, {\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 4},\n        endPosition: {row: 0, column: 5},\n        startIndex: 4,\n        endIndex: 5,\n      });\n\n      assert(copy.gotoParent());\n      assert(copy.gotoParent());\n      assert.equal(copy.nodeType, 'binary_expression');\n      assert(copy.gotoParent());\n      assert.equal(copy.nodeType, 'expression_statement');\n      assert(copy.gotoParent());\n      assert.equal(copy.nodeType, 'program');\n      assert(!copy.gotoParent());\n\n      assert(cursor.gotoParent());\n      assert.equal(cursor.nodeType, 'binary_expression');\n      assert(cursor.gotoParent());\n      assert.equal(cursor.nodeType, 'expression_statement');\n      assert(cursor.gotoParent());\n      assert.equal(cursor.nodeType, 'program');\n      assert(!cursor.gotoParent());\n    });\n\n    it('keeps track of the field name associated with each node', () => {\n      tree = parser.parse('a.b();');\n      cursor = tree.walk();\n      cursor.gotoFirstChild();\n      cursor.gotoFirstChild();\n\n      assert.equal(cursor.currentNode.type, 'call_expression');\n      assert.equal(cursor.currentFieldName, null);\n\n      cursor.gotoFirstChild();\n      assert.equal(cursor.currentNode.type, 'member_expression');\n      assert.equal(cursor.currentFieldName, 'function');\n\n      cursor.gotoFirstChild();\n      assert.equal(cursor.currentNode.type, 'identifier');\n      assert.equal(cursor.currentFieldName, 'object');\n\n      cursor.gotoNextSibling();\n      cursor.gotoNextSibling();\n      assert.equal(cursor.currentNode.type, 'property_identifier');\n      assert.equal(cursor.currentFieldName, 'property');\n\n      cursor.gotoParent();\n      cursor.gotoNextSibling();\n      assert.equal(cursor.currentNode.type, 'arguments');\n      assert.equal(cursor.currentFieldName, 'arguments');\n    });\n\n    it('returns a cursor that can be reset anywhere in the tree', () => {\n      tree = parser.parse('a * b + c / d');\n      cursor = tree.walk();\n      const root = tree.rootNode.firstChild;\n\n      cursor.reset(root.firstChild.firstChild);\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      });\n\n      cursor.gotoFirstChild();\n      assertCursorState(cursor, {\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 1},\n        startIndex: 0,\n        endIndex: 1,\n      });\n\n      assert(cursor.gotoParent());\n      assert(!cursor.gotoParent());\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 132
        },
        {
            "Name": "afterEach",
            "Args": [
                "() => {\n      cursor.delete();\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 135
        },
        {
            "Name": "cursor.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 136
        },
        {
            "Name": "it",
            "Args": [
                "'returns a cursor that can be used to walk the tree'",
                "() => {\n      tree = parser.parse('a * b + c / d');\n      cursor = tree.walk();\n\n      assertCursorState(cursor, {\n        nodeType: 'program',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 13},\n        startIndex: 0,\n        endIndex: 13,\n      });\n\n      assert(cursor.gotoFirstChild());\n      assertCursorState(cursor, {\n        nodeType: 'expression_statement',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 13},\n        startIndex: 0,\n        endIndex: 13,\n      });\n\n      assert(cursor.gotoFirstChild());\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 13},\n        startIndex: 0,\n        endIndex: 13,\n      });\n\n      assert(cursor.gotoFirstChild());\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      });\n\n      assert(cursor.gotoFirstChild());\n      assert.equal(cursor.nodeText, 'a');\n      assertCursorState(cursor, {\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 1},\n        startIndex: 0,\n        endIndex: 1,\n      });\n\n      assert(!cursor.gotoFirstChild());\n      assert(cursor.gotoNextSibling());\n      assert.equal(cursor.nodeText, '*');\n      assertCursorState(cursor, {\n        nodeType: '*',\n        nodeIsNamed: false,\n        startPosition: {row: 0, column: 2},\n        endPosition: {row: 0, column: 3},\n        startIndex: 2,\n        endIndex: 3,\n      });\n\n      assert(cursor.gotoNextSibling());\n      assert.equal(cursor.nodeText, 'b');\n      assertCursorState(cursor, {\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 4},\n        endPosition: {row: 0, column: 5},\n        startIndex: 4,\n        endIndex: 5,\n      });\n\n      assert(!cursor.gotoNextSibling());\n      assert(cursor.gotoParent());\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      });\n\n      assert(cursor.gotoNextSibling());\n      assertCursorState(cursor, {\n        nodeType: '+',\n        nodeIsNamed: false,\n        startPosition: {row: 0, column: 6},\n        endPosition: {row: 0, column: 7},\n        startIndex: 6,\n        endIndex: 7,\n      });\n\n      assert(cursor.gotoNextSibling());\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 8},\n        endPosition: {row: 0, column: 13},\n        startIndex: 8,\n        endIndex: 13,\n      });\n\n      const copy = tree.walk();\n      copy.resetTo(cursor);\n\n      assert(copy.gotoPreviousSibling());\n      assertCursorState(copy, {\n        nodeType: '+',\n        nodeIsNamed: false,\n        startPosition: {row: 0, column: 6},\n        endPosition: {row: 0, column: 7},\n        startIndex: 6,\n        endIndex: 7,\n      });\n\n      assert(copy.gotoPreviousSibling());\n      assertCursorState(copy, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      });\n\n      assert(copy.gotoLastChild());\n      assertCursorState(copy, {\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 4},\n        endPosition: {row: 0, column: 5},\n        startIndex: 4,\n        endIndex: 5,\n      });\n\n      assert(copy.gotoParent());\n      assert(copy.gotoParent());\n      assert.equal(copy.nodeType, 'binary_expression');\n      assert(copy.gotoParent());\n      assert.equal(copy.nodeType, 'expression_statement');\n      assert(copy.gotoParent());\n      assert.equal(copy.nodeType, 'program');\n      assert(!copy.gotoParent());\n\n      assert(cursor.gotoParent());\n      assert.equal(cursor.nodeType, 'binary_expression');\n      assert(cursor.gotoParent());\n      assert.equal(cursor.nodeType, 'expression_statement');\n      assert(cursor.gotoParent());\n      assert.equal(cursor.nodeType, 'program');\n      assert(!cursor.gotoParent());\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 139
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'a * b + c / d'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 140
        },
        {
            "Name": "tree.walk",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 141
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "cursor",
                "{\n        nodeType: 'program',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 13},\n        startIndex: 0,\n        endIndex: 13,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 143
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoFirstChild()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 152
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 152
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "cursor",
                "{\n        nodeType: 'expression_statement',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 13},\n        startIndex: 0,\n        endIndex: 13,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 153
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoFirstChild()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 162
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 162
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "cursor",
                "{\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 13},\n        startIndex: 0,\n        endIndex: 13,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 163
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoFirstChild()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 172
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 172
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "cursor",
                "{\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 173
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoFirstChild()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 182
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 182
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.nodeText",
                "'a'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 183
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "cursor",
                "{\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 1},\n        startIndex: 0,\n        endIndex: 1,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 184
        },
        {
            "Name": "assert",
            "Args": [
                "!cursor.gotoFirstChild()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 193
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 193
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoNextSibling()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 194
        },
        {
            "Name": "cursor.gotoNextSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 194
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.nodeText",
                "'*'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 195
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "cursor",
                "{\n        nodeType: '*',\n        nodeIsNamed: false,\n        startPosition: {row: 0, column: 2},\n        endPosition: {row: 0, column: 3},\n        startIndex: 2,\n        endIndex: 3,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 196
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoNextSibling()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 205
        },
        {
            "Name": "cursor.gotoNextSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 205
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.nodeText",
                "'b'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 206
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "cursor",
                "{\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 4},\n        endPosition: {row: 0, column: 5},\n        startIndex: 4,\n        endIndex: 5,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 207
        },
        {
            "Name": "assert",
            "Args": [
                "!cursor.gotoNextSibling()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 216
        },
        {
            "Name": "cursor.gotoNextSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 216
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoParent()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 217
        },
        {
            "Name": "cursor.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 217
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "cursor",
                "{\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 218
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoNextSibling()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 227
        },
        {
            "Name": "cursor.gotoNextSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 227
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "cursor",
                "{\n        nodeType: '+',\n        nodeIsNamed: false,\n        startPosition: {row: 0, column: 6},\n        endPosition: {row: 0, column: 7},\n        startIndex: 6,\n        endIndex: 7,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 228
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoNextSibling()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 237
        },
        {
            "Name": "cursor.gotoNextSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 237
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "cursor",
                "{\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 8},\n        endPosition: {row: 0, column: 13},\n        startIndex: 8,\n        endIndex: 13,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 238
        },
        {
            "Name": "tree.walk",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 247
        },
        {
            "Name": "copy.resetTo",
            "Args": [
                "cursor"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 248
        },
        {
            "Name": "assert",
            "Args": [
                "copy.gotoPreviousSibling()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 250
        },
        {
            "Name": "copy.gotoPreviousSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 250
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "copy",
                "{\n        nodeType: '+',\n        nodeIsNamed: false,\n        startPosition: {row: 0, column: 6},\n        endPosition: {row: 0, column: 7},\n        startIndex: 6,\n        endIndex: 7,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 251
        },
        {
            "Name": "assert",
            "Args": [
                "copy.gotoPreviousSibling()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 260
        },
        {
            "Name": "copy.gotoPreviousSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 260
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "copy",
                "{\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 261
        },
        {
            "Name": "assert",
            "Args": [
                "copy.gotoLastChild()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 270
        },
        {
            "Name": "copy.gotoLastChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 270
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "copy",
                "{\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 4},\n        endPosition: {row: 0, column: 5},\n        startIndex: 4,\n        endIndex: 5,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 271
        },
        {
            "Name": "assert",
            "Args": [
                "copy.gotoParent()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 280
        },
        {
            "Name": "copy.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 280
        },
        {
            "Name": "assert",
            "Args": [
                "copy.gotoParent()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 281
        },
        {
            "Name": "copy.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 281
        },
        {
            "Name": "assert.equal",
            "Args": [
                "copy.nodeType",
                "'binary_expression'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 282
        },
        {
            "Name": "assert",
            "Args": [
                "copy.gotoParent()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 283
        },
        {
            "Name": "copy.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 283
        },
        {
            "Name": "assert.equal",
            "Args": [
                "copy.nodeType",
                "'expression_statement'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 284
        },
        {
            "Name": "assert",
            "Args": [
                "copy.gotoParent()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 285
        },
        {
            "Name": "copy.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 285
        },
        {
            "Name": "assert.equal",
            "Args": [
                "copy.nodeType",
                "'program'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 286
        },
        {
            "Name": "assert",
            "Args": [
                "!copy.gotoParent()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 287
        },
        {
            "Name": "copy.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 287
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoParent()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 289
        },
        {
            "Name": "cursor.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 289
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.nodeType",
                "'binary_expression'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 290
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoParent()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 291
        },
        {
            "Name": "cursor.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 291
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.nodeType",
                "'expression_statement'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 292
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoParent()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 293
        },
        {
            "Name": "cursor.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 293
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.nodeType",
                "'program'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 294
        },
        {
            "Name": "assert",
            "Args": [
                "!cursor.gotoParent()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 295
        },
        {
            "Name": "cursor.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 295
        },
        {
            "Name": "it",
            "Args": [
                "'keeps track of the field name associated with each node'",
                "() => {\n      tree = parser.parse('a.b();');\n      cursor = tree.walk();\n      cursor.gotoFirstChild();\n      cursor.gotoFirstChild();\n\n      assert.equal(cursor.currentNode.type, 'call_expression');\n      assert.equal(cursor.currentFieldName, null);\n\n      cursor.gotoFirstChild();\n      assert.equal(cursor.currentNode.type, 'member_expression');\n      assert.equal(cursor.currentFieldName, 'function');\n\n      cursor.gotoFirstChild();\n      assert.equal(cursor.currentNode.type, 'identifier');\n      assert.equal(cursor.currentFieldName, 'object');\n\n      cursor.gotoNextSibling();\n      cursor.gotoNextSibling();\n      assert.equal(cursor.currentNode.type, 'property_identifier');\n      assert.equal(cursor.currentFieldName, 'property');\n\n      cursor.gotoParent();\n      cursor.gotoNextSibling();\n      assert.equal(cursor.currentNode.type, 'arguments');\n      assert.equal(cursor.currentFieldName, 'arguments');\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 298
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'a.b();'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 299
        },
        {
            "Name": "tree.walk",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 300
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 301
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 302
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentNode.type",
                "'call_expression'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 304
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentFieldName",
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 305
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 307
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentNode.type",
                "'member_expression'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 308
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentFieldName",
                "'function'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 309
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 311
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentNode.type",
                "'identifier'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 312
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentFieldName",
                "'object'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 313
        },
        {
            "Name": "cursor.gotoNextSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 315
        },
        {
            "Name": "cursor.gotoNextSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 316
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentNode.type",
                "'property_identifier'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 317
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentFieldName",
                "'property'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 318
        },
        {
            "Name": "cursor.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 320
        },
        {
            "Name": "cursor.gotoNextSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 321
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentNode.type",
                "'arguments'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 322
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentFieldName",
                "'arguments'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 323
        },
        {
            "Name": "it",
            "Args": [
                "'returns a cursor that can be reset anywhere in the tree'",
                "() => {\n      tree = parser.parse('a * b + c / d');\n      cursor = tree.walk();\n      const root = tree.rootNode.firstChild;\n\n      cursor.reset(root.firstChild.firstChild);\n      assertCursorState(cursor, {\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      });\n\n      cursor.gotoFirstChild();\n      assertCursorState(cursor, {\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 1},\n        startIndex: 0,\n        endIndex: 1,\n      });\n\n      assert(cursor.gotoParent());\n      assert(!cursor.gotoParent());\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 326
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'a * b + c / d'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 327
        },
        {
            "Name": "tree.walk",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 328
        },
        {
            "Name": "cursor.reset",
            "Args": [
                "root.firstChild.firstChild"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 331
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "cursor",
                "{\n        nodeType: 'binary_expression',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 5},\n        startIndex: 0,\n        endIndex: 5,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 332
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 341
        },
        {
            "Name": "assertCursorState",
            "Args": [
                "cursor",
                "{\n        nodeType: 'identifier',\n        nodeIsNamed: true,\n        startPosition: {row: 0, column: 0},\n        endPosition: {row: 0, column: 1},\n        startIndex: 0,\n        endIndex: 1,\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 342
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoParent()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 351
        },
        {
            "Name": "cursor.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 351
        },
        {
            "Name": "assert",
            "Args": [
                "!cursor.gotoParent()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 352
        },
        {
            "Name": "cursor.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 352
        },
        {
            "Name": "describe",
            "Args": [
                "'.copy'",
                "() => {\n    it('creates another tree that remains stable if the original tree is edited', () => {\n      input = 'abc + cde';\n      tree = parser.parse(input);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (identifier) right: (identifier))))',\n      );\n\n      const tree2 = tree.copy();\n      ([input, edit] = spliceInput(input, 3, 0, '123'));\n      assert.equal(input, 'abc123 + cde');\n      tree.edit(edit);\n\n      const leftNode = tree.rootNode.firstChild.firstChild.firstChild;\n      const leftNode2 = tree2.rootNode.firstChild.firstChild.firstChild;\n      const rightNode = tree.rootNode.firstChild.firstChild.lastChild;\n      const rightNode2 = tree2.rootNode.firstChild.firstChild.lastChild;\n      assert.equal(leftNode.endIndex, 6);\n      assert.equal(leftNode2.endIndex, 3);\n      assert.equal(rightNode.startIndex, 9);\n      assert.equal(rightNode2.startIndex, 6);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 356
        },
        {
            "Name": "it",
            "Args": [
                "'creates another tree that remains stable if the original tree is edited'",
                "() => {\n      input = 'abc + cde';\n      tree = parser.parse(input);\n      assert.equal(\n        tree.rootNode.toString(),\n        '(program (expression_statement (binary_expression left: (identifier) right: (identifier))))',\n      );\n\n      const tree2 = tree.copy();\n      ([input, edit] = spliceInput(input, 3, 0, '123'));\n      assert.equal(input, 'abc123 + cde');\n      tree.edit(edit);\n\n      const leftNode = tree.rootNode.firstChild.firstChild.firstChild;\n      const leftNode2 = tree2.rootNode.firstChild.firstChild.firstChild;\n      const rightNode = tree.rootNode.firstChild.firstChild.lastChild;\n      const rightNode2 = tree2.rootNode.firstChild.firstChild.lastChild;\n      assert.equal(leftNode.endIndex, 6);\n      assert.equal(leftNode2.endIndex, 3);\n      assert.equal(rightNode.startIndex, 9);\n      assert.equal(rightNode2.startIndex, 6);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 357
        },
        {
            "Name": "parser.parse",
            "Args": [
                "input"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 359
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.toString()",
                "'(program (expression_statement (binary_expression left: (identifier) right: (identifier))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 360
        },
        {
            "Name": "tree.rootNode.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 361
        },
        {
            "Name": "tree.copy",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 365
        },
        {
            "Name": "spliceInput",
            "Args": [
                "input",
                "3",
                "0",
                "'123'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 366
        },
        {
            "Name": "assert.equal",
            "Args": [
                "input",
                "'abc123 + cde'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 367
        },
        {
            "Name": "tree.edit",
            "Args": [
                "edit"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 368
        },
        {
            "Name": "assert.equal",
            "Args": [
                "leftNode.endIndex",
                "6"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 374
        },
        {
            "Name": "assert.equal",
            "Args": [
                "leftNode2.endIndex",
                "3"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 375
        },
        {
            "Name": "assert.equal",
            "Args": [
                "rightNode.startIndex",
                "9"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 376
        },
        {
            "Name": "assert.equal",
            "Args": [
                "rightNode2.startIndex",
                "6"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 377
        },
        {
            "Name": "getExtent",
            "Args": [
                "input.slice(0, startIndex)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 385
        },
        {
            "Name": "input.slice",
            "Args": [
                "0",
                "startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 385
        },
        {
            "Name": "getExtent",
            "Args": [
                "input.slice(0, oldEndIndex)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 386
        },
        {
            "Name": "input.slice",
            "Args": [
                "0",
                "oldEndIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 386
        },
        {
            "Name": "input.slice",
            "Args": [
                "0",
                "startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 387
        },
        {
            "Name": "input.slice",
            "Args": [
                "oldEndIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 387
        },
        {
            "Name": "getExtent",
            "Args": [
                "input.slice(0, newEndIndex)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 388
        },
        {
            "Name": "input.slice",
            "Args": [
                "0",
                "newEndIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 388
        },
        {
            "Name": "text.indexOf",
            "Args": [
                "'\\n'",
                "index"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 402
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.nodeType",
                "params.nodeType"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 410
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.nodeIsNamed",
                "params.nodeIsNamed"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 411
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "cursor.startPosition",
                "params.startPosition"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 412
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "cursor.endPosition",
                "params.endPosition"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 413
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "cursor.startIndex",
                "params.startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 414
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "cursor.endIndex",
                "params.endIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 415
        },
        {
            "Name": "assert.equal",
            "Args": [
                "node.type",
                "params.nodeType"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 418
        },
        {
            "Name": "assert.equal",
            "Args": [
                "node.isNamed",
                "params.nodeIsNamed"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 419
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "node.startPosition",
                "params.startPosition"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 420
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "node.endPosition",
                "params.endPosition"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 421
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "node.startIndex",
                "params.startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 422
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "node.endIndex",
                "params.endIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/tree-test.js",
            "Line": 423
        },
        {
            "Name": "require",
            "Args": [
                "'chai'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 1
        },
        {
            "Name": "describe",
            "Args": [
                "'Language'",
                "() => {\n  before(async () => ({JavaScript} = await require('./helper')));\n\n  describe('.fieldIdForName, .fieldNameForId', () => {\n    it('converts between the string and integer representations of fields', () => {\n      const nameId = JavaScript.fieldIdForName('name');\n      const bodyId = JavaScript.fieldIdForName('body');\n\n      assert.isBelow(nameId, JavaScript.fieldCount);\n      assert.isBelow(bodyId, JavaScript.fieldCount);\n      assert.equal('name', JavaScript.fieldNameForId(nameId));\n      assert.equal('body', JavaScript.fieldNameForId(bodyId));\n    });\n\n    it('handles invalid inputs', () => {\n      assert.equal(null, JavaScript.fieldIdForName('namezzz'));\n      assert.equal(null, JavaScript.fieldNameForId(-1));\n      assert.equal(null, JavaScript.fieldNameForId(10000));\n    });\n  });\n\n  describe('.idForNodeType, .nodeTypeForId, .nodeTypeIsNamed', () => {\n    it('converts between the string and integer representations of a node type', () => {\n      const exportStatementId = JavaScript.idForNodeType('export_statement', true);\n      const starId = JavaScript.idForNodeType('*', false);\n\n      assert.isBelow(exportStatementId, JavaScript.nodeTypeCount);\n      assert.isBelow(starId, JavaScript.nodeTypeCount);\n      assert.equal(true, JavaScript.nodeTypeIsNamed(exportStatementId));\n      assert.equal('export_statement', JavaScript.nodeTypeForId(exportStatementId));\n      assert.equal(false, JavaScript.nodeTypeIsNamed(starId));\n      assert.equal('*', JavaScript.nodeTypeForId(starId));\n    });\n\n    it('handles invalid inputs', () => {\n      assert.equal(null, JavaScript.nodeTypeForId(-1));\n      assert.equal(null, JavaScript.nodeTypeForId(10000));\n      assert.equal(null, JavaScript.idForNodeType('export_statement', false));\n    });\n  });\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 4
        },
        {
            "Name": "before",
            "Args": [
                "async () => ({JavaScript} = await require('./helper'))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 5
        },
        {
            "Name": "require",
            "Args": [
                "'./helper'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 5
        },
        {
            "Name": "describe",
            "Args": [
                "'.fieldIdForName, .fieldNameForId'",
                "() => {\n    it('converts between the string and integer representations of fields', () => {\n      const nameId = JavaScript.fieldIdForName('name');\n      const bodyId = JavaScript.fieldIdForName('body');\n\n      assert.isBelow(nameId, JavaScript.fieldCount);\n      assert.isBelow(bodyId, JavaScript.fieldCount);\n      assert.equal('name', JavaScript.fieldNameForId(nameId));\n      assert.equal('body', JavaScript.fieldNameForId(bodyId));\n    });\n\n    it('handles invalid inputs', () => {\n      assert.equal(null, JavaScript.fieldIdForName('namezzz'));\n      assert.equal(null, JavaScript.fieldNameForId(-1));\n      assert.equal(null, JavaScript.fieldNameForId(10000));\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 7
        },
        {
            "Name": "it",
            "Args": [
                "'converts between the string and integer representations of fields'",
                "() => {\n      const nameId = JavaScript.fieldIdForName('name');\n      const bodyId = JavaScript.fieldIdForName('body');\n\n      assert.isBelow(nameId, JavaScript.fieldCount);\n      assert.isBelow(bodyId, JavaScript.fieldCount);\n      assert.equal('name', JavaScript.fieldNameForId(nameId));\n      assert.equal('body', JavaScript.fieldNameForId(bodyId));\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 8
        },
        {
            "Name": "JavaScript.fieldIdForName",
            "Args": [
                "'name'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 9
        },
        {
            "Name": "JavaScript.fieldIdForName",
            "Args": [
                "'body'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 10
        },
        {
            "Name": "assert.isBelow",
            "Args": [
                "nameId",
                "JavaScript.fieldCount"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 12
        },
        {
            "Name": "assert.isBelow",
            "Args": [
                "bodyId",
                "JavaScript.fieldCount"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 13
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'name'",
                "JavaScript.fieldNameForId(nameId)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 14
        },
        {
            "Name": "JavaScript.fieldNameForId",
            "Args": [
                "nameId"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 14
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'body'",
                "JavaScript.fieldNameForId(bodyId)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 15
        },
        {
            "Name": "JavaScript.fieldNameForId",
            "Args": [
                "bodyId"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 15
        },
        {
            "Name": "it",
            "Args": [
                "'handles invalid inputs'",
                "() => {\n      assert.equal(null, JavaScript.fieldIdForName('namezzz'));\n      assert.equal(null, JavaScript.fieldNameForId(-1));\n      assert.equal(null, JavaScript.fieldNameForId(10000));\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 18
        },
        {
            "Name": "assert.equal",
            "Args": [
                "null",
                "JavaScript.fieldIdForName('namezzz')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 19
        },
        {
            "Name": "JavaScript.fieldIdForName",
            "Args": [
                "'namezzz'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 19
        },
        {
            "Name": "assert.equal",
            "Args": [
                "null",
                "JavaScript.fieldNameForId(-1)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 20
        },
        {
            "Name": "JavaScript.fieldNameForId",
            "Args": [
                "-1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 20
        },
        {
            "Name": "assert.equal",
            "Args": [
                "null",
                "JavaScript.fieldNameForId(10000)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 21
        },
        {
            "Name": "JavaScript.fieldNameForId",
            "Args": [
                "10000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 21
        },
        {
            "Name": "describe",
            "Args": [
                "'.idForNodeType, .nodeTypeForId, .nodeTypeIsNamed'",
                "() => {\n    it('converts between the string and integer representations of a node type', () => {\n      const exportStatementId = JavaScript.idForNodeType('export_statement', true);\n      const starId = JavaScript.idForNodeType('*', false);\n\n      assert.isBelow(exportStatementId, JavaScript.nodeTypeCount);\n      assert.isBelow(starId, JavaScript.nodeTypeCount);\n      assert.equal(true, JavaScript.nodeTypeIsNamed(exportStatementId));\n      assert.equal('export_statement', JavaScript.nodeTypeForId(exportStatementId));\n      assert.equal(false, JavaScript.nodeTypeIsNamed(starId));\n      assert.equal('*', JavaScript.nodeTypeForId(starId));\n    });\n\n    it('handles invalid inputs', () => {\n      assert.equal(null, JavaScript.nodeTypeForId(-1));\n      assert.equal(null, JavaScript.nodeTypeForId(10000));\n      assert.equal(null, JavaScript.idForNodeType('export_statement', false));\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 25
        },
        {
            "Name": "it",
            "Args": [
                "'converts between the string and integer representations of a node type'",
                "() => {\n      const exportStatementId = JavaScript.idForNodeType('export_statement', true);\n      const starId = JavaScript.idForNodeType('*', false);\n\n      assert.isBelow(exportStatementId, JavaScript.nodeTypeCount);\n      assert.isBelow(starId, JavaScript.nodeTypeCount);\n      assert.equal(true, JavaScript.nodeTypeIsNamed(exportStatementId));\n      assert.equal('export_statement', JavaScript.nodeTypeForId(exportStatementId));\n      assert.equal(false, JavaScript.nodeTypeIsNamed(starId));\n      assert.equal('*', JavaScript.nodeTypeForId(starId));\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 26
        },
        {
            "Name": "JavaScript.idForNodeType",
            "Args": [
                "'export_statement'",
                "true"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 27
        },
        {
            "Name": "JavaScript.idForNodeType",
            "Args": [
                "'*'",
                "false"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 28
        },
        {
            "Name": "assert.isBelow",
            "Args": [
                "exportStatementId",
                "JavaScript.nodeTypeCount"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 30
        },
        {
            "Name": "assert.isBelow",
            "Args": [
                "starId",
                "JavaScript.nodeTypeCount"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 31
        },
        {
            "Name": "assert.equal",
            "Args": [
                "true",
                "JavaScript.nodeTypeIsNamed(exportStatementId)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 32
        },
        {
            "Name": "JavaScript.nodeTypeIsNamed",
            "Args": [
                "exportStatementId"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 32
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'export_statement'",
                "JavaScript.nodeTypeForId(exportStatementId)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 33
        },
        {
            "Name": "JavaScript.nodeTypeForId",
            "Args": [
                "exportStatementId"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 33
        },
        {
            "Name": "assert.equal",
            "Args": [
                "false",
                "JavaScript.nodeTypeIsNamed(starId)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 34
        },
        {
            "Name": "JavaScript.nodeTypeIsNamed",
            "Args": [
                "starId"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 34
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'*'",
                "JavaScript.nodeTypeForId(starId)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 35
        },
        {
            "Name": "JavaScript.nodeTypeForId",
            "Args": [
                "starId"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 35
        },
        {
            "Name": "it",
            "Args": [
                "'handles invalid inputs'",
                "() => {\n      assert.equal(null, JavaScript.nodeTypeForId(-1));\n      assert.equal(null, JavaScript.nodeTypeForId(10000));\n      assert.equal(null, JavaScript.idForNodeType('export_statement', false));\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 38
        },
        {
            "Name": "assert.equal",
            "Args": [
                "null",
                "JavaScript.nodeTypeForId(-1)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 39
        },
        {
            "Name": "JavaScript.nodeTypeForId",
            "Args": [
                "-1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 39
        },
        {
            "Name": "assert.equal",
            "Args": [
                "null",
                "JavaScript.nodeTypeForId(10000)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 40
        },
        {
            "Name": "JavaScript.nodeTypeForId",
            "Args": [
                "10000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 40
        },
        {
            "Name": "assert.equal",
            "Args": [
                "null",
                "JavaScript.idForNodeType('export_statement', false)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 41
        },
        {
            "Name": "JavaScript.idForNodeType",
            "Args": [
                "'export_statement'",
                "false"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 41
        },
        {
            "Name": "describe",
            "Args": [
                "'Lookahead iterator'",
                "() => {\n  let lookahead;\n  let state;\n  before(async () => {\n    let Parser;\n    ({JavaScript, Parser} = await require('./helper'));\n    const parser = new Parser().setLanguage(JavaScript);\n    const tree = parser.parse('function fn() {}');\n    parser.delete();\n    const cursor = tree.walk();\n    assert(cursor.gotoFirstChild());\n    assert(cursor.gotoFirstChild());\n    state = cursor.currentNode.nextParseState;\n    lookahead = JavaScript.lookaheadIterator(state);\n    assert.exists(lookahead);\n  });\n\n  after(() => {\n    lookahead.delete();\n  });\n\n  const expected = ['(', 'identifier', '*', 'formal_parameters', 'html_comment', 'comment'];\n  it('should iterate over valid symbols in the state', () => {\n    const symbols = Array.from(lookahead);\n    assert.includeMembers(symbols, expected);\n    assert.lengthOf(symbols, expected.length);\n  });\n\n  it('should reset to the initial state', () => {\n    assert(lookahead.resetState(state));\n    const symbols = Array.from(lookahead);\n    assert.includeMembers(symbols, expected);\n    assert.lengthOf(symbols, expected.length);\n  });\n\n  it('should reset', () => {\n    assert(lookahead.reset(JavaScript, state));\n    const symbols = Array.from(lookahead);\n    assert.includeMembers(symbols, expected);\n    assert.lengthOf(symbols, expected.length);\n  });\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 46
        },
        {
            "Name": "before",
            "Args": [
                "async () => {\n    let Parser;\n    ({JavaScript, Parser} = await require('./helper'));\n    const parser = new Parser().setLanguage(JavaScript);\n    const tree = parser.parse('function fn() {}');\n    parser.delete();\n    const cursor = tree.walk();\n    assert(cursor.gotoFirstChild());\n    assert(cursor.gotoFirstChild());\n    state = cursor.currentNode.nextParseState;\n    lookahead = JavaScript.lookaheadIterator(state);\n    assert.exists(lookahead);\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 49
        },
        {
            "Name": "require",
            "Args": [
                "'./helper'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 51
        },
        {
            "Name": "new Parser().setLanguage",
            "Args": [
                "JavaScript"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 52
        },
        {
            "Name": "Parser",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 52
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'function fn() {}'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 53
        },
        {
            "Name": "parser.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 54
        },
        {
            "Name": "tree.walk",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 55
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoFirstChild()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 56
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 56
        },
        {
            "Name": "assert",
            "Args": [
                "cursor.gotoFirstChild()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 57
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 57
        },
        {
            "Name": "JavaScript.lookaheadIterator",
            "Args": [
                "state"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 59
        },
        {
            "Name": "assert.exists",
            "Args": [
                "lookahead"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 60
        },
        {
            "Name": "after",
            "Args": [
                "() => {\n    lookahead.delete();\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 63
        },
        {
            "Name": "lookahead.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 64
        },
        {
            "Name": "it",
            "Args": [
                "'should iterate over valid symbols in the state'",
                "() => {\n    const symbols = Array.from(lookahead);\n    assert.includeMembers(symbols, expected);\n    assert.lengthOf(symbols, expected.length);\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 68
        },
        {
            "Name": "Array.from",
            "Args": [
                "lookahead"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 69
        },
        {
            "Name": "assert.includeMembers",
            "Args": [
                "symbols",
                "expected"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 70
        },
        {
            "Name": "assert.lengthOf",
            "Args": [
                "symbols",
                "expected.length"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 71
        },
        {
            "Name": "it",
            "Args": [
                "'should reset to the initial state'",
                "() => {\n    assert(lookahead.resetState(state));\n    const symbols = Array.from(lookahead);\n    assert.includeMembers(symbols, expected);\n    assert.lengthOf(symbols, expected.length);\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 74
        },
        {
            "Name": "assert",
            "Args": [
                "lookahead.resetState(state)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 75
        },
        {
            "Name": "lookahead.resetState",
            "Args": [
                "state"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 75
        },
        {
            "Name": "Array.from",
            "Args": [
                "lookahead"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 76
        },
        {
            "Name": "assert.includeMembers",
            "Args": [
                "symbols",
                "expected"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 77
        },
        {
            "Name": "assert.lengthOf",
            "Args": [
                "symbols",
                "expected.length"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 78
        },
        {
            "Name": "it",
            "Args": [
                "'should reset'",
                "() => {\n    assert(lookahead.reset(JavaScript, state));\n    const symbols = Array.from(lookahead);\n    assert.includeMembers(symbols, expected);\n    assert.lengthOf(symbols, expected.length);\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 81
        },
        {
            "Name": "assert",
            "Args": [
                "lookahead.reset(JavaScript, state)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 82
        },
        {
            "Name": "lookahead.reset",
            "Args": [
                "JavaScript",
                "state"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 82
        },
        {
            "Name": "Array.from",
            "Args": [
                "lookahead"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 83
        },
        {
            "Name": "assert.includeMembers",
            "Args": [
                "symbols",
                "expected"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 84
        },
        {
            "Name": "assert.lengthOf",
            "Args": [
                "symbols",
                "expected.length"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/language-test.js",
            "Line": 85
        },
        {
            "Name": "require",
            "Args": [
                "'..'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 1
        },
        {
            "Name": "require.resolve",
            "Args": [
                "`../../../target/release/tree-sitter-${name}.wasm`"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 4
        },
        {
            "Name": "Parser.init().then",
            "Args": [
                "async () => ({\n  Parser,\n  languageURL,\n  EmbeddedTemplate: await Parser.Language.load(languageURL('embedded-template')),\n  HTML: await Parser.Language.load(languageURL('html')),\n  JavaScript: await Parser.Language.load(languageURL('javascript')),\n  JSON: await Parser.Language.load(languageURL('json')),\n  Python: await Parser.Language.load(languageURL('python')),\n})"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 7
        },
        {
            "Name": "Parser.init",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 7
        },
        {
            "Name": "Parser.Language.load",
            "Args": [
                "languageURL('embedded-template')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 10
        },
        {
            "Name": "languageURL",
            "Args": [
                "'embedded-template'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 10
        },
        {
            "Name": "Parser.Language.load",
            "Args": [
                "languageURL('html')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 11
        },
        {
            "Name": "languageURL",
            "Args": [
                "'html'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 11
        },
        {
            "Name": "Parser.Language.load",
            "Args": [
                "languageURL('javascript')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 12
        },
        {
            "Name": "languageURL",
            "Args": [
                "'javascript'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 12
        },
        {
            "Name": "Parser.Language.load",
            "Args": [
                "languageURL('json')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 13
        },
        {
            "Name": "languageURL",
            "Args": [
                "'json'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 13
        },
        {
            "Name": "Parser.Language.load",
            "Args": [
                "languageURL('python')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 14
        },
        {
            "Name": "languageURL",
            "Args": [
                "'python'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/helper.js",
            "Line": 14
        },
        {
            "Name": "require",
            "Args": [
                "'chai'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 1
        },
        {
            "Name": "tree.walk",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 18
        },
        {
            "Name": "result.push",
            "Args": [
                "cursor.currentNode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 21
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 22
        },
        {
            "Name": "cursor.gotoNextSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 25
        },
        {
            "Name": "cursor.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 27
        },
        {
            "Name": "describe",
            "Args": [
                "'Node'",
                "() => {\n  let parser; let tree;\n\n  before(async () =>\n    ({Parser, EmbeddedTemplate, JavaScript, JSON, Python} = await require('./helper')),\n  );\n\n  beforeEach(() => {\n    tree = null;\n    parser = new Parser().setLanguage(JavaScript);\n  });\n\n  afterEach(() => {\n    parser.delete();\n    tree.delete();\n  });\n\n  describe('.children', () => {\n    it('returns an array of child nodes', () => {\n      tree = parser.parse('x10 + 1000');\n      assert.equal(1, tree.rootNode.children.length);\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.deepEqual(\n        sumNode.children.map((child) => child.type),\n        ['identifier', '+', 'number'],\n      );\n    });\n  });\n\n  describe('.namedChildren', () => {\n    it('returns an array of named child nodes', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal(1, tree.rootNode.namedChildren.length);\n      assert.deepEqual(\n        ['identifier', 'number'],\n        sumNode.namedChildren.map((child) => child.type),\n      );\n    });\n  });\n\n  describe('.childrenForFieldName', () => {\n    it('returns an array of child nodes for the given field name', () => {\n      parser.setLanguage(Python);\n      const source = `\n        if one:\n            a()\n        elif two:\n            b()\n        elif three:\n            c()\n        elif four:\n    d()`;\n\n      tree = parser.parse(source);\n      const node = tree.rootNode.firstChild;\n      assert.equal(node.type, 'if_statement');\n      const alternatives = node.childrenForFieldName('alternative');\n      const alternativeTexts = alternatives.map((n) => {\n        const condition = n.childForFieldName('condition');\n        return source.slice(condition.startIndex, condition.endIndex);\n      });\n      assert.deepEqual(alternativeTexts, ['two', 'three', 'four']);\n    });\n  });\n\n  describe('.startIndex and .endIndex', () => {\n    it('returns the character index where the node starts/ends in the text', () => {\n      tree = parser.parse('a\ud83d\udc4d\ud83d\udc4e1 / b\ud83d\udc4ec\ud83d\udc4e');\n      const quotientNode = tree.rootNode.firstChild.firstChild;\n\n      assert.equal(0, quotientNode.startIndex);\n      assert.equal(15, quotientNode.endIndex);\n      assert.deepEqual(\n        [0, 7, 9],\n        quotientNode.children.map((child) => child.startIndex),\n      );\n      assert.deepEqual(\n        [6, 8, 15],\n        quotientNode.children.map((child) => child.endIndex),\n      );\n    });\n  });\n\n  describe('.startPosition and .endPosition', () => {\n    it('returns the row and column where the node starts/ends in the text', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal('binary_expression', sumNode.type);\n\n      assert.deepEqual({row: 0, column: 0}, sumNode.startPosition);\n      assert.deepEqual({row: 0, column: 10}, sumNode.endPosition);\n      assert.deepEqual(\n        [{row: 0, column: 0}, {row: 0, column: 4}, {row: 0, column: 6}],\n        sumNode.children.map((child) => child.startPosition),\n      );\n      assert.deepEqual(\n        [{row: 0, column: 3}, {row: 0, column: 5}, {row: 0, column: 10}],\n        sumNode.children.map((child) => child.endPosition),\n      );\n    });\n\n    it('handles characters that occupy two UTF16 code units', () => {\n      tree = parser.parse('a\ud83d\udc4d\ud83d\udc4e1 /\\n b\ud83d\udc4ec\ud83d\udc4e');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.deepEqual(\n        [\n          [{row: 0, column: 0}, {row: 0, column: 6}],\n          [{row: 0, column: 7}, {row: 0, column: 8}],\n          [{row: 1, column: 1}, {row: 1, column: 7}],\n        ],\n        sumNode.children.map((child) => [child.startPosition, child.endPosition]),\n      );\n    });\n  });\n\n  describe('.parent', () => {\n    it('returns the node\\'s parent', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild;\n      const variableNode = sumNode.firstChild;\n      assert.notEqual(sumNode.id, variableNode.id);\n      assert.equal(sumNode.id, variableNode.parent.id);\n      assert.equal(tree.rootNode.id, sumNode.parent.id);\n    });\n  });\n\n  describe('.child(), .firstChild, .lastChild', () => {\n    it('returns null when the node has no children', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      const variableNode = sumNode.firstChild;\n      assert.equal(variableNode.firstChild, null);\n      assert.equal(variableNode.lastChild, null);\n      assert.equal(variableNode.firstNamedChild, null);\n      assert.equal(variableNode.lastNamedChild, null);\n      assert.equal(variableNode.child(1), null);\n    });\n  });\n\n  describe('.childForFieldName()', () => {\n    it('returns null when the node has no children', () => {\n      tree = parser.parse('class A { b() {} }');\n\n      const classNode = tree.rootNode.firstChild;\n      assert.equal(classNode.type, 'class_declaration');\n\n      const classNameNode = classNode.childForFieldName('name');\n      assert.equal(classNameNode.type, 'identifier');\n      assert.equal(classNameNode.text, 'A');\n\n      const bodyNode = classNode.childForFieldName('body');\n      assert.equal(bodyNode.type, 'class_body');\n      assert.equal(bodyNode.text, '{ b() {} }');\n\n      const methodNode = bodyNode.firstNamedChild;\n      assert.equal(methodNode.type, 'method_definition');\n      assert.equal(methodNode.text, 'b() {}');\n\n      const methodNameNode = methodNode.childForFieldName('name');\n      assert.equal(methodNameNode.type, 'property_identifier');\n      assert.equal(methodNameNode.text, 'b');\n\n      const paramsNode = methodNode.childForFieldName('parameters');\n      assert.equal(paramsNode.type, 'formal_parameters');\n      assert.equal(paramsNode.text, '()');\n    });\n  });\n\n  describe('.nextSibling and .previousSibling', () => {\n    it('returns the node\\'s next and previous sibling', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal(sumNode.children[1].id, sumNode.children[0].nextSibling.id);\n      assert.equal(sumNode.children[2].id, sumNode.children[1].nextSibling.id);\n      assert.equal(\n        sumNode.children[0].id,\n        sumNode.children[1].previousSibling.id,\n      );\n      assert.equal(\n        sumNode.children[1].id,\n        sumNode.children[2].previousSibling.id,\n      );\n    });\n  });\n\n  describe('.nextNamedSibling and .previousNamedSibling', () => {\n    it('returns the node\\'s next and previous named sibling', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal(\n        sumNode.namedChildren[1].id,\n        sumNode.namedChildren[0].nextNamedSibling.id,\n      );\n      assert.equal(\n        sumNode.namedChildren[0].id,\n        sumNode.namedChildren[1].previousNamedSibling.id,\n      );\n    });\n  });\n\n  describe('.descendantForIndex(min, max)', () => {\n    it('returns the smallest node that spans the given range', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal('identifier', sumNode.descendantForIndex(1, 2).type);\n      assert.equal('+', sumNode.descendantForIndex(4, 4).type);\n\n      assert.throws(() => {\n        sumNode.descendantForIndex(1, {});\n      }, 'Arguments must be numbers');\n\n      assert.throws(() => {\n        sumNode.descendantForIndex();\n      }, 'Arguments must be numbers');\n    });\n  });\n\n  describe('.namedDescendantForIndex', () => {\n    it('returns the smallest node that spans the given range', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild;\n      assert.equal('identifier', sumNode.descendantForIndex(1, 2).type);\n      assert.equal('+', sumNode.descendantForIndex(4, 4).type);\n    });\n  });\n\n  describe('.descendantForPosition(min, max)', () => {\n    it('returns the smallest node that spans the given range', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild;\n\n      assert.equal(\n        'identifier',\n        sumNode.descendantForPosition(\n          {row: 0, column: 1},\n          {row: 0, column: 2},\n        ).type,\n      );\n\n      assert.equal(\n        '+',\n        sumNode.descendantForPosition({row: 0, column: 4}).type,\n      );\n\n      assert.throws(() => {\n        sumNode.descendantForPosition(1, {});\n      }, 'Arguments must be {row, column} objects');\n\n      assert.throws(() => {\n        sumNode.descendantForPosition();\n      }, 'Arguments must be {row, column} objects');\n    });\n  });\n\n  describe('.namedDescendantForPosition(min, max)', () => {\n    it('returns the smallest named node that spans the given range', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild;\n\n      assert.equal(\n        sumNode.namedDescendantForPosition(\n          {row: 0, column: 1},\n          {row: 0, column: 2},\n        ).type,\n        'identifier',\n      );\n\n      assert.equal(\n        sumNode.namedDescendantForPosition({row: 0, column: 4}).type,\n        'binary_expression',\n      );\n    });\n  });\n\n  describe('.hasError', () => {\n    it('returns true if the node contains an error', () => {\n      tree = parser.parse('1 + 2 * * 3');\n      const node = tree.rootNode;\n      assert.equal(\n        node.toString(),\n        '(program (expression_statement (binary_expression left: (number) right: (binary_expression left: (number) (ERROR) right: (number)))))',\n      );\n\n      const sum = node.firstChild.firstChild;\n      assert(sum.hasError);\n      assert(!sum.children[0].hasError);\n      assert(!sum.children[1].hasError);\n      assert(sum.children[2].hasError);\n    });\n  });\n\n  describe('.isError', () => {\n    it('returns true if the node is an error', () => {\n      tree = parser.parse('2 * * 3');\n      const node = tree.rootNode;\n      assert.equal(\n        node.toString(),\n        '(program (expression_statement (binary_expression left: (number) (ERROR) right: (number))))',\n      );\n\n      const multi = node.firstChild.firstChild;\n      assert(multi.hasError);\n      assert(!multi.children[0].isError);\n      assert(!multi.children[1].isError);\n      assert(multi.children[2].isError);\n      assert(!multi.children[3].isError);\n    });\n  });\n\n  describe('.isMissing', () => {\n    it('returns true if the node is missing from the source and was inserted via error recovery', () => {\n      tree = parser.parse('(2 ||)');\n      const node = tree.rootNode;\n      assert.equal(\n        node.toString(),\n        '(program (expression_statement (parenthesized_expression (binary_expression left: (number) right: (MISSING identifier)))))',\n      );\n\n      const sum = node.firstChild.firstChild.firstNamedChild;\n      assert.equal(sum.type, 'binary_expression');\n      assert(sum.hasError);\n      assert(!sum.children[0].isMissing);\n      assert(!sum.children[1].isMissing);\n      assert(sum.children[2].isMissing);\n    });\n  });\n\n  describe('.isExtra', () => {\n    it('returns true if the node is an extra node like comments', () => {\n      tree = parser.parse('foo(/* hi */);');\n      const node = tree.rootNode;\n      const commentNode = node.descendantForIndex(7, 7);\n\n      assert.equal(node.type, 'program');\n      assert.equal(commentNode.type, 'comment');\n      assert(!node.isExtra);\n      assert(commentNode.isExtra);\n    });\n  });\n\n  describe('.text', () => {\n    const text = '\u03b10 / b\ud83d\udc4ec\ud83d\udc4e';\n\n    Object.entries({\n      '.parse(String)': text,\n      '.parse(Function)': (offset) => text.slice(offset, 4),\n    }).forEach(([method, _parse]) =>\n      it(`returns the text of a node generated by ${method}`, async () => {\n        const [numeratorSrc, denominatorSrc] = text.split(/\\s*\\/\\s+/);\n        tree = await parser.parse(text);\n        const quotientNode = tree.rootNode.firstChild.firstChild;\n        const [numerator, slash, denominator] = quotientNode.children;\n\n        assert.equal(text, tree.rootNode.text, 'root node text');\n        assert.equal(denominatorSrc, denominator.text, 'denominator text');\n        assert.equal(text, quotientNode.text, 'quotient text');\n        assert.equal(numeratorSrc, numerator.text, 'numerator text');\n        assert.equal('/', slash.text, '\"/\" text');\n      }),\n    );\n  });\n\n  describe('.descendantCount', () => {\n    it('returns the number of descendants', () => {\n      parser.setLanguage(JSON);\n      tree = parser.parse(JSON_EXAMPLE);\n      const valueNode = tree.rootNode;\n      const allNodes = getAllNodes(tree);\n\n      assert.equal(valueNode.descendantCount, allNodes.length);\n\n      const cursor = tree.walk();\n      for (let i = 0; i < allNodes.length; i++) {\n        const node = allNodes[i];\n        cursor.gotoDescendant(i);\n        assert.equal(cursor.currentNode.id, node.id, `index ${i}`);\n      }\n\n      for (let i = allNodes.length - 1; i >= 0; i--) {\n        const node = allNodes[i];\n        cursor.gotoDescendant(i);\n        assert.equal(cursor.currentNode.id, node.id, `rev index ${i}`);\n      }\n    });\n\n    it('tests a single node tree', () => {\n      parser.setLanguage(EmbeddedTemplate);\n      tree = parser.parse('hello');\n\n      const nodes = getAllNodes(tree);\n      assert.equal(nodes.length, 2);\n      assert.equal(tree.rootNode.descendantCount, 2);\n\n      const cursor = tree.walk();\n\n      cursor.gotoDescendant(0);\n      assert.equal(cursor.currentDepth, 0);\n      assert.equal(cursor.currentNode.id, nodes[0].id);\n\n      cursor.gotoDescendant(1);\n      assert.equal(cursor.currentDepth, 1);\n      assert.equal(cursor.currentNode.id, nodes[1].id);\n    });\n  });\n\n  describe('.rootNodeWithOffset', () => {\n    it('returns the root node of the tree, offset by the given byte offset', () => {\n      tree = parser.parse('  if (a) b');\n      const node = tree.rootNodeWithOffset(6, {row: 2, column: 2});\n      assert.equal(node.startIndex, 8);\n      assert.equal(node.endIndex, 16);\n      assert.deepEqual(node.startPosition, {row: 2, column: 4});\n      assert.deepEqual(node.endPosition, {row: 2, column: 12});\n\n      let child = node.firstChild.child(2);\n      assert.equal(child.type, 'expression_statement');\n      assert.equal(child.startIndex, 15);\n      assert.equal(child.endIndex, 16);\n      assert.deepEqual(child.startPosition, {row: 2, column: 11});\n      assert.deepEqual(child.endPosition, {row: 2, column: 12});\n\n      const cursor = node.walk();\n      cursor.gotoFirstChild();\n      cursor.gotoFirstChild();\n      cursor.gotoNextSibling();\n      child = cursor.currentNode;\n      assert.equal(child.type, 'parenthesized_expression');\n      assert.equal(child.startIndex, 11);\n      assert.equal(child.endIndex, 14);\n      assert.deepEqual(child.startPosition, {row: 2, column: 7});\n      assert.deepEqual(child.endPosition, {row: 2, column: 10});\n    });\n  });\n\n  describe('.parseState, .nextParseState', () => {\n    const text = '10 / 5';\n\n    it('returns node parse state ids', async () => {\n      tree = await parser.parse(text);\n      const quotientNode = tree.rootNode.firstChild.firstChild;\n      const [numerator, slash, denominator] = quotientNode.children;\n\n      assert.equal(tree.rootNode.parseState, 0);\n      // parse states will change on any change to the grammar so test that it\n      // returns something instead\n      assert.isAbove(numerator.parseState, 0);\n      assert.isAbove(slash.parseState, 0);\n      assert.isAbove(denominator.parseState, 0);\n    });\n\n    it('returns next parse state equal to the language', async () => {\n      tree = await parser.parse(text);\n      const quotientNode = tree.rootNode.firstChild.firstChild;\n      quotientNode.children.forEach((node) => {\n        assert.equal(\n          node.nextParseState,\n          JavaScript.nextState(node.parseState, node.grammarId),\n        );\n      });\n    });\n  });\n\n  describe('.descendantsOfType(type, min, max)', () => {\n    it('finds all of the descendants of the given type in the given range', () => {\n      tree = parser.parse('a + 1 * b * 2 + c + 3');\n      const outerSum = tree.rootNode.firstChild.firstChild;\n      let descendants = outerSum.descendantsOfType('number', {row: 0, column: 2}, {row: 0, column: 15});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [4, 12],\n      );\n      assert.deepEqual(\n        descendants.map((node) => node.endPosition),\n        [{row: 0, column: 5}, {row: 0, column: 13}],\n      );\n\n      descendants = outerSum.descendantsOfType('identifier', {row: 0, column: 2}, {row: 0, column: 15});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [8],\n      );\n\n      descendants = outerSum.descendantsOfType('identifier', {row: 0, column: 0}, {row: 0, column: 30});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [0, 8, 16],\n      );\n\n      descendants = outerSum.descendantsOfType('number', {row: 0, column: 0}, {row: 0, column: 30});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [4, 12, 20],\n      );\n\n      descendants = outerSum.descendantsOfType(\n        ['identifier', 'number'],\n        {row: 0, column: 0},\n        {row: 0, column: 30},\n      );\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [0, 4, 8, 12, 16, 20],\n      );\n\n      descendants = outerSum.descendantsOfType('number');\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [4, 12, 20],\n      );\n\n      descendants = outerSum.firstChild.descendantsOfType('number', {row: 0, column: 0}, {row: 0, column: 30});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [4, 12],\n      );\n    });\n  });\n\n  describe.skip('.closest(type)', () => {\n    it('returns the closest ancestor of the given type', () => {\n      tree = parser.parse('a(b + -d.e)');\n      const property = tree.rootNode.descendantForIndex('a(b + -d.'.length);\n      assert.equal(property.type, 'property_identifier');\n\n      const unary = property.closest('unary_expression');\n      assert.equal(unary.type, 'unary_expression');\n      assert.equal(unary.startIndex, 'a(b + '.length);\n      assert.equal(unary.endIndex, 'a(b + -d.e'.length);\n\n      const sum = property.closest(['binary_expression', 'call_expression']);\n      assert.equal(sum.type, 'binary_expression');\n      assert.equal(sum.startIndex, 2);\n      assert.equal(sum.endIndex, 'a(b + -d.e'.length);\n    });\n\n    it('throws an exception when an invalid argument is given', () => {\n      tree = parser.parse('a + 1 * b * 2 + c + 3');\n      const number = tree.rootNode.descendantForIndex(4);\n\n      assert.throws(() => number.closest({a: 1}), /Argument must be a string or array of strings/);\n    });\n  });\n\n  describe('.firstChildForIndex(index)', () => {\n    it('returns the first child that extends beyond the given index', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n\n      assert.equal('identifier', sumNode.firstChildForIndex(0).type);\n      assert.equal('identifier', sumNode.firstChildForIndex(1).type);\n      assert.equal('+', sumNode.firstChildForIndex(3).type);\n      assert.equal('number', sumNode.firstChildForIndex(5).type);\n    });\n  });\n\n  describe('.firstNamedChildForIndex(index)', () => {\n    it('returns the first child that extends beyond the given index', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n\n      assert.equal('identifier', sumNode.firstNamedChildForIndex(0).type);\n      assert.equal('identifier', sumNode.firstNamedChildForIndex(1).type);\n      assert.equal('number', sumNode.firstNamedChildForIndex(3).type);\n    });\n  });\n\n  describe('.equals(other)', () => {\n    it('returns true if the nodes are the same', () => {\n      tree = parser.parse('1 + 2');\n\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      const node1 = sumNode.firstChild;\n      const node2 = sumNode.firstChild;\n      assert(node1.equals(node2));\n    });\n\n    it('returns false if the nodes are not the same', () => {\n      tree = parser.parse('1 + 2');\n\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      const node1 = sumNode.firstChild;\n      const node2 = node1.nextSibling;\n      assert(!node1.equals(node2));\n    });\n  });\n\n  describe('.fieldNameForChild(index)', () => {\n    it('returns the field of a child or null', () => {\n      tree = parser.parse('let a = 5');\n\n      const noField = tree.rootNode.fieldNameForChild(0);\n      const name = tree.rootNode.firstChild.children[1].fieldNameForChild(0);\n      const value = tree.rootNode.firstChild.children[1].fieldNameForChild(2);\n      const overflow = tree.rootNode.firstChild.children[1].fieldNameForChild(3);\n\n      assert.equal(noField, null);\n      assert.equal(name, 'name');\n      assert.equal(value, 'value');\n      assert.equal(overflow, null);\n    });\n  });\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 34
        },
        {
            "Name": "before",
            "Args": [
                "async () =>\n    ({Parser, EmbeddedTemplate, JavaScript, JSON, Python} = await require('./helper'))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 37
        },
        {
            "Name": "require",
            "Args": [
                "'./helper'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 38
        },
        {
            "Name": "beforeEach",
            "Args": [
                "() => {\n    tree = null;\n    parser = new Parser().setLanguage(JavaScript);\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 41
        },
        {
            "Name": "new Parser().setLanguage",
            "Args": [
                "JavaScript"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 43
        },
        {
            "Name": "Parser",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 43
        },
        {
            "Name": "afterEach",
            "Args": [
                "() => {\n    parser.delete();\n    tree.delete();\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 46
        },
        {
            "Name": "parser.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 47
        },
        {
            "Name": "tree.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 48
        },
        {
            "Name": "describe",
            "Args": [
                "'.children'",
                "() => {\n    it('returns an array of child nodes', () => {\n      tree = parser.parse('x10 + 1000');\n      assert.equal(1, tree.rootNode.children.length);\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.deepEqual(\n        sumNode.children.map((child) => child.type),\n        ['identifier', '+', 'number'],\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 51
        },
        {
            "Name": "it",
            "Args": [
                "'returns an array of child nodes'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      assert.equal(1, tree.rootNode.children.length);\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.deepEqual(\n        sumNode.children.map((child) => child.type),\n        ['identifier', '+', 'number'],\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 52
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 53
        },
        {
            "Name": "assert.equal",
            "Args": [
                "1",
                "tree.rootNode.children.length"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 54
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "sumNode.children.map((child) => child.type)",
                "['identifier', '+', 'number']"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 56
        },
        {
            "Name": "sumNode.children.map",
            "Args": [
                "(child) => child.type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 57
        },
        {
            "Name": "describe",
            "Args": [
                "'.namedChildren'",
                "() => {\n    it('returns an array of named child nodes', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal(1, tree.rootNode.namedChildren.length);\n      assert.deepEqual(\n        ['identifier', 'number'],\n        sumNode.namedChildren.map((child) => child.type),\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 63
        },
        {
            "Name": "it",
            "Args": [
                "'returns an array of named child nodes'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal(1, tree.rootNode.namedChildren.length);\n      assert.deepEqual(\n        ['identifier', 'number'],\n        sumNode.namedChildren.map((child) => child.type),\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 64
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 65
        },
        {
            "Name": "assert.equal",
            "Args": [
                "1",
                "tree.rootNode.namedChildren.length"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 67
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "['identifier', 'number']",
                "sumNode.namedChildren.map((child) => child.type)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 68
        },
        {
            "Name": "sumNode.namedChildren.map",
            "Args": [
                "(child) => child.type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 70
        },
        {
            "Name": "describe",
            "Args": [
                "'.childrenForFieldName'",
                "() => {\n    it('returns an array of child nodes for the given field name', () => {\n      parser.setLanguage(Python);\n      const source = `\n        if one:\n            a()\n        elif two:\n            b()\n        elif three:\n            c()\n        elif four:\n    d()`;\n\n      tree = parser.parse(source);\n      const node = tree.rootNode.firstChild;\n      assert.equal(node.type, 'if_statement');\n      const alternatives = node.childrenForFieldName('alternative');\n      const alternativeTexts = alternatives.map((n) => {\n        const condition = n.childForFieldName('condition');\n        return source.slice(condition.startIndex, condition.endIndex);\n      });\n      assert.deepEqual(alternativeTexts, ['two', 'three', 'four']);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 75
        },
        {
            "Name": "it",
            "Args": [
                "'returns an array of child nodes for the given field name'",
                "() => {\n      parser.setLanguage(Python);\n      const source = `\n        if one:\n            a()\n        elif two:\n            b()\n        elif three:\n            c()\n        elif four:\n    d()`;\n\n      tree = parser.parse(source);\n      const node = tree.rootNode.firstChild;\n      assert.equal(node.type, 'if_statement');\n      const alternatives = node.childrenForFieldName('alternative');\n      const alternativeTexts = alternatives.map((n) => {\n        const condition = n.childForFieldName('condition');\n        return source.slice(condition.startIndex, condition.endIndex);\n      });\n      assert.deepEqual(alternativeTexts, ['two', 'three', 'four']);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 76
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "Python"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 77
        },
        {
            "Name": "parser.parse",
            "Args": [
                "source"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 88
        },
        {
            "Name": "assert.equal",
            "Args": [
                "node.type",
                "'if_statement'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 90
        },
        {
            "Name": "node.childrenForFieldName",
            "Args": [
                "'alternative'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 91
        },
        {
            "Name": "alternatives.map",
            "Args": [
                "(n) => {\n        const condition = n.childForFieldName('condition');\n        return source.slice(condition.startIndex, condition.endIndex);\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 92
        },
        {
            "Name": "n.childForFieldName",
            "Args": [
                "'condition'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 93
        },
        {
            "Name": "source.slice",
            "Args": [
                "condition.startIndex",
                "condition.endIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 94
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "alternativeTexts",
                "['two', 'three', 'four']"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 96
        },
        {
            "Name": "describe",
            "Args": [
                "'.startIndex and .endIndex'",
                "() => {\n    it('returns the character index where the node starts/ends in the text', () => {\n      tree = parser.parse('a\ud83d\udc4d\ud83d\udc4e1 / b\ud83d\udc4ec\ud83d\udc4e');\n      const quotientNode = tree.rootNode.firstChild.firstChild;\n\n      assert.equal(0, quotientNode.startIndex);\n      assert.equal(15, quotientNode.endIndex);\n      assert.deepEqual(\n        [0, 7, 9],\n        quotientNode.children.map((child) => child.startIndex),\n      );\n      assert.deepEqual(\n        [6, 8, 15],\n        quotientNode.children.map((child) => child.endIndex),\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 100
        },
        {
            "Name": "it",
            "Args": [
                "'returns the character index where the node starts/ends in the text'",
                "() => {\n      tree = parser.parse('a\ud83d\udc4d\ud83d\udc4e1 / b\ud83d\udc4ec\ud83d\udc4e');\n      const quotientNode = tree.rootNode.firstChild.firstChild;\n\n      assert.equal(0, quotientNode.startIndex);\n      assert.equal(15, quotientNode.endIndex);\n      assert.deepEqual(\n        [0, 7, 9],\n        quotientNode.children.map((child) => child.startIndex),\n      );\n      assert.deepEqual(\n        [6, 8, 15],\n        quotientNode.children.map((child) => child.endIndex),\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 101
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'a\ud83d\udc4d\ud83d\udc4e1 / b\ud83d\udc4ec\ud83d\udc4e'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 102
        },
        {
            "Name": "assert.equal",
            "Args": [
                "0",
                "quotientNode.startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 105
        },
        {
            "Name": "assert.equal",
            "Args": [
                "15",
                "quotientNode.endIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 106
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "[0, 7, 9]",
                "quotientNode.children.map((child) => child.startIndex)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 107
        },
        {
            "Name": "quotientNode.children.map",
            "Args": [
                "(child) => child.startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 109
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "[6, 8, 15]",
                "quotientNode.children.map((child) => child.endIndex)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 111
        },
        {
            "Name": "quotientNode.children.map",
            "Args": [
                "(child) => child.endIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 113
        },
        {
            "Name": "describe",
            "Args": [
                "'.startPosition and .endPosition'",
                "() => {\n    it('returns the row and column where the node starts/ends in the text', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal('binary_expression', sumNode.type);\n\n      assert.deepEqual({row: 0, column: 0}, sumNode.startPosition);\n      assert.deepEqual({row: 0, column: 10}, sumNode.endPosition);\n      assert.deepEqual(\n        [{row: 0, column: 0}, {row: 0, column: 4}, {row: 0, column: 6}],\n        sumNode.children.map((child) => child.startPosition),\n      );\n      assert.deepEqual(\n        [{row: 0, column: 3}, {row: 0, column: 5}, {row: 0, column: 10}],\n        sumNode.children.map((child) => child.endPosition),\n      );\n    });\n\n    it('handles characters that occupy two UTF16 code units', () => {\n      tree = parser.parse('a\ud83d\udc4d\ud83d\udc4e1 /\\n b\ud83d\udc4ec\ud83d\udc4e');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.deepEqual(\n        [\n          [{row: 0, column: 0}, {row: 0, column: 6}],\n          [{row: 0, column: 7}, {row: 0, column: 8}],\n          [{row: 1, column: 1}, {row: 1, column: 7}],\n        ],\n        sumNode.children.map((child) => [child.startPosition, child.endPosition]),\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 118
        },
        {
            "Name": "it",
            "Args": [
                "'returns the row and column where the node starts/ends in the text'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal('binary_expression', sumNode.type);\n\n      assert.deepEqual({row: 0, column: 0}, sumNode.startPosition);\n      assert.deepEqual({row: 0, column: 10}, sumNode.endPosition);\n      assert.deepEqual(\n        [{row: 0, column: 0}, {row: 0, column: 4}, {row: 0, column: 6}],\n        sumNode.children.map((child) => child.startPosition),\n      );\n      assert.deepEqual(\n        [{row: 0, column: 3}, {row: 0, column: 5}, {row: 0, column: 10}],\n        sumNode.children.map((child) => child.endPosition),\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 119
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 120
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'binary_expression'",
                "sumNode.type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 122
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "{row: 0, column: 0}",
                "sumNode.startPosition"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 124
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "{row: 0, column: 10}",
                "sumNode.endPosition"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 125
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "[{row: 0, column: 0}, {row: 0, column: 4}, {row: 0, column: 6}]",
                "sumNode.children.map((child) => child.startPosition)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 126
        },
        {
            "Name": "sumNode.children.map",
            "Args": [
                "(child) => child.startPosition"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 128
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "[{row: 0, column: 3}, {row: 0, column: 5}, {row: 0, column: 10}]",
                "sumNode.children.map((child) => child.endPosition)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 130
        },
        {
            "Name": "sumNode.children.map",
            "Args": [
                "(child) => child.endPosition"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 132
        },
        {
            "Name": "it",
            "Args": [
                "'handles characters that occupy two UTF16 code units'",
                "() => {\n      tree = parser.parse('a\ud83d\udc4d\ud83d\udc4e1 /\\n b\ud83d\udc4ec\ud83d\udc4e');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.deepEqual(\n        [\n          [{row: 0, column: 0}, {row: 0, column: 6}],\n          [{row: 0, column: 7}, {row: 0, column: 8}],\n          [{row: 1, column: 1}, {row: 1, column: 7}],\n        ],\n        sumNode.children.map((child) => [child.startPosition, child.endPosition]),\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 136
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'a\ud83d\udc4d\ud83d\udc4e1 /\\n b\ud83d\udc4ec\ud83d\udc4e'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 137
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "[\n          [{row: 0, column: 0}, {row: 0, column: 6}],\n          [{row: 0, column: 7}, {row: 0, column: 8}],\n          [{row: 1, column: 1}, {row: 1, column: 7}],\n        ]",
                "sumNode.children.map((child) => [child.startPosition, child.endPosition])"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 139
        },
        {
            "Name": "sumNode.children.map",
            "Args": [
                "(child) => [child.startPosition, child.endPosition]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 145
        },
        {
            "Name": "describe",
            "Args": [
                "'.parent'",
                "() => {\n    it('returns the node\\'s parent', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild;\n      const variableNode = sumNode.firstChild;\n      assert.notEqual(sumNode.id, variableNode.id);\n      assert.equal(sumNode.id, variableNode.parent.id);\n      assert.equal(tree.rootNode.id, sumNode.parent.id);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 150
        },
        {
            "Name": "it",
            "Args": [
                "'returns the node\\'s parent'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild;\n      const variableNode = sumNode.firstChild;\n      assert.notEqual(sumNode.id, variableNode.id);\n      assert.equal(sumNode.id, variableNode.parent.id);\n      assert.equal(tree.rootNode.id, sumNode.parent.id);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 151
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 152
        },
        {
            "Name": "assert.notEqual",
            "Args": [
                "sumNode.id",
                "variableNode.id"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 155
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sumNode.id",
                "variableNode.parent.id"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 156
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.id",
                "sumNode.parent.id"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 157
        },
        {
            "Name": "describe",
            "Args": [
                "'.child(), .firstChild, .lastChild'",
                "() => {\n    it('returns null when the node has no children', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      const variableNode = sumNode.firstChild;\n      assert.equal(variableNode.firstChild, null);\n      assert.equal(variableNode.lastChild, null);\n      assert.equal(variableNode.firstNamedChild, null);\n      assert.equal(variableNode.lastNamedChild, null);\n      assert.equal(variableNode.child(1), null);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 161
        },
        {
            "Name": "it",
            "Args": [
                "'returns null when the node has no children'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      const variableNode = sumNode.firstChild;\n      assert.equal(variableNode.firstChild, null);\n      assert.equal(variableNode.lastChild, null);\n      assert.equal(variableNode.firstNamedChild, null);\n      assert.equal(variableNode.lastNamedChild, null);\n      assert.equal(variableNode.child(1), null);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 162
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 163
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode.firstChild",
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 166
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode.lastChild",
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 167
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode.firstNamedChild",
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 168
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode.lastNamedChild",
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 169
        },
        {
            "Name": "assert.equal",
            "Args": [
                "variableNode.child(1)",
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 170
        },
        {
            "Name": "variableNode.child",
            "Args": [
                "1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 170
        },
        {
            "Name": "describe",
            "Args": [
                "'.childForFieldName()'",
                "() => {\n    it('returns null when the node has no children', () => {\n      tree = parser.parse('class A { b() {} }');\n\n      const classNode = tree.rootNode.firstChild;\n      assert.equal(classNode.type, 'class_declaration');\n\n      const classNameNode = classNode.childForFieldName('name');\n      assert.equal(classNameNode.type, 'identifier');\n      assert.equal(classNameNode.text, 'A');\n\n      const bodyNode = classNode.childForFieldName('body');\n      assert.equal(bodyNode.type, 'class_body');\n      assert.equal(bodyNode.text, '{ b() {} }');\n\n      const methodNode = bodyNode.firstNamedChild;\n      assert.equal(methodNode.type, 'method_definition');\n      assert.equal(methodNode.text, 'b() {}');\n\n      const methodNameNode = methodNode.childForFieldName('name');\n      assert.equal(methodNameNode.type, 'property_identifier');\n      assert.equal(methodNameNode.text, 'b');\n\n      const paramsNode = methodNode.childForFieldName('parameters');\n      assert.equal(paramsNode.type, 'formal_parameters');\n      assert.equal(paramsNode.text, '()');\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 174
        },
        {
            "Name": "it",
            "Args": [
                "'returns null when the node has no children'",
                "() => {\n      tree = parser.parse('class A { b() {} }');\n\n      const classNode = tree.rootNode.firstChild;\n      assert.equal(classNode.type, 'class_declaration');\n\n      const classNameNode = classNode.childForFieldName('name');\n      assert.equal(classNameNode.type, 'identifier');\n      assert.equal(classNameNode.text, 'A');\n\n      const bodyNode = classNode.childForFieldName('body');\n      assert.equal(bodyNode.type, 'class_body');\n      assert.equal(bodyNode.text, '{ b() {} }');\n\n      const methodNode = bodyNode.firstNamedChild;\n      assert.equal(methodNode.type, 'method_definition');\n      assert.equal(methodNode.text, 'b() {}');\n\n      const methodNameNode = methodNode.childForFieldName('name');\n      assert.equal(methodNameNode.type, 'property_identifier');\n      assert.equal(methodNameNode.text, 'b');\n\n      const paramsNode = methodNode.childForFieldName('parameters');\n      assert.equal(paramsNode.type, 'formal_parameters');\n      assert.equal(paramsNode.text, '()');\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 175
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'class A { b() {} }'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 176
        },
        {
            "Name": "assert.equal",
            "Args": [
                "classNode.type",
                "'class_declaration'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 179
        },
        {
            "Name": "classNode.childForFieldName",
            "Args": [
                "'name'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 181
        },
        {
            "Name": "assert.equal",
            "Args": [
                "classNameNode.type",
                "'identifier'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 182
        },
        {
            "Name": "assert.equal",
            "Args": [
                "classNameNode.text",
                "'A'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 183
        },
        {
            "Name": "classNode.childForFieldName",
            "Args": [
                "'body'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 185
        },
        {
            "Name": "assert.equal",
            "Args": [
                "bodyNode.type",
                "'class_body'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 186
        },
        {
            "Name": "assert.equal",
            "Args": [
                "bodyNode.text",
                "'{ b() {} }'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 187
        },
        {
            "Name": "assert.equal",
            "Args": [
                "methodNode.type",
                "'method_definition'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 190
        },
        {
            "Name": "assert.equal",
            "Args": [
                "methodNode.text",
                "'b() {}'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 191
        },
        {
            "Name": "methodNode.childForFieldName",
            "Args": [
                "'name'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 193
        },
        {
            "Name": "assert.equal",
            "Args": [
                "methodNameNode.type",
                "'property_identifier'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 194
        },
        {
            "Name": "assert.equal",
            "Args": [
                "methodNameNode.text",
                "'b'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 195
        },
        {
            "Name": "methodNode.childForFieldName",
            "Args": [
                "'parameters'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 197
        },
        {
            "Name": "assert.equal",
            "Args": [
                "paramsNode.type",
                "'formal_parameters'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 198
        },
        {
            "Name": "assert.equal",
            "Args": [
                "paramsNode.text",
                "'()'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 199
        },
        {
            "Name": "describe",
            "Args": [
                "'.nextSibling and .previousSibling'",
                "() => {\n    it('returns the node\\'s next and previous sibling', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal(sumNode.children[1].id, sumNode.children[0].nextSibling.id);\n      assert.equal(sumNode.children[2].id, sumNode.children[1].nextSibling.id);\n      assert.equal(\n        sumNode.children[0].id,\n        sumNode.children[1].previousSibling.id,\n      );\n      assert.equal(\n        sumNode.children[1].id,\n        sumNode.children[2].previousSibling.id,\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 203
        },
        {
            "Name": "it",
            "Args": [
                "'returns the node\\'s next and previous sibling'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal(sumNode.children[1].id, sumNode.children[0].nextSibling.id);\n      assert.equal(sumNode.children[2].id, sumNode.children[1].nextSibling.id);\n      assert.equal(\n        sumNode.children[0].id,\n        sumNode.children[1].previousSibling.id,\n      );\n      assert.equal(\n        sumNode.children[1].id,\n        sumNode.children[2].previousSibling.id,\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 204
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 205
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sumNode.children[1].id",
                "sumNode.children[0].nextSibling.id"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 207
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sumNode.children[2].id",
                "sumNode.children[1].nextSibling.id"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 208
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sumNode.children[0].id",
                "sumNode.children[1].previousSibling.id"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 209
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sumNode.children[1].id",
                "sumNode.children[2].previousSibling.id"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 213
        },
        {
            "Name": "describe",
            "Args": [
                "'.nextNamedSibling and .previousNamedSibling'",
                "() => {\n    it('returns the node\\'s next and previous named sibling', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal(\n        sumNode.namedChildren[1].id,\n        sumNode.namedChildren[0].nextNamedSibling.id,\n      );\n      assert.equal(\n        sumNode.namedChildren[0].id,\n        sumNode.namedChildren[1].previousNamedSibling.id,\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 220
        },
        {
            "Name": "it",
            "Args": [
                "'returns the node\\'s next and previous named sibling'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal(\n        sumNode.namedChildren[1].id,\n        sumNode.namedChildren[0].nextNamedSibling.id,\n      );\n      assert.equal(\n        sumNode.namedChildren[0].id,\n        sumNode.namedChildren[1].previousNamedSibling.id,\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 221
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 222
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sumNode.namedChildren[1].id",
                "sumNode.namedChildren[0].nextNamedSibling.id"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 224
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sumNode.namedChildren[0].id",
                "sumNode.namedChildren[1].previousNamedSibling.id"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 228
        },
        {
            "Name": "describe",
            "Args": [
                "'.descendantForIndex(min, max)'",
                "() => {\n    it('returns the smallest node that spans the given range', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal('identifier', sumNode.descendantForIndex(1, 2).type);\n      assert.equal('+', sumNode.descendantForIndex(4, 4).type);\n\n      assert.throws(() => {\n        sumNode.descendantForIndex(1, {});\n      }, 'Arguments must be numbers');\n\n      assert.throws(() => {\n        sumNode.descendantForIndex();\n      }, 'Arguments must be numbers');\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 235
        },
        {
            "Name": "it",
            "Args": [
                "'returns the smallest node that spans the given range'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      assert.equal('identifier', sumNode.descendantForIndex(1, 2).type);\n      assert.equal('+', sumNode.descendantForIndex(4, 4).type);\n\n      assert.throws(() => {\n        sumNode.descendantForIndex(1, {});\n      }, 'Arguments must be numbers');\n\n      assert.throws(() => {\n        sumNode.descendantForIndex();\n      }, 'Arguments must be numbers');\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 236
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 237
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'identifier'",
                "sumNode.descendantForIndex(1, 2).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 239
        },
        {
            "Name": "sumNode.descendantForIndex",
            "Args": [
                "1",
                "2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 239
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'+'",
                "sumNode.descendantForIndex(4, 4).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 240
        },
        {
            "Name": "sumNode.descendantForIndex",
            "Args": [
                "4",
                "4"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 240
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        sumNode.descendantForIndex(1, {});\n      }",
                "'Arguments must be numbers'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 242
        },
        {
            "Name": "sumNode.descendantForIndex",
            "Args": [
                "1",
                "{}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 243
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        sumNode.descendantForIndex();\n      }",
                "'Arguments must be numbers'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 246
        },
        {
            "Name": "sumNode.descendantForIndex",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 247
        },
        {
            "Name": "describe",
            "Args": [
                "'.namedDescendantForIndex'",
                "() => {\n    it('returns the smallest node that spans the given range', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild;\n      assert.equal('identifier', sumNode.descendantForIndex(1, 2).type);\n      assert.equal('+', sumNode.descendantForIndex(4, 4).type);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 252
        },
        {
            "Name": "it",
            "Args": [
                "'returns the smallest node that spans the given range'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild;\n      assert.equal('identifier', sumNode.descendantForIndex(1, 2).type);\n      assert.equal('+', sumNode.descendantForIndex(4, 4).type);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 253
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 254
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'identifier'",
                "sumNode.descendantForIndex(1, 2).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 256
        },
        {
            "Name": "sumNode.descendantForIndex",
            "Args": [
                "1",
                "2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 256
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'+'",
                "sumNode.descendantForIndex(4, 4).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 257
        },
        {
            "Name": "sumNode.descendantForIndex",
            "Args": [
                "4",
                "4"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 257
        },
        {
            "Name": "describe",
            "Args": [
                "'.descendantForPosition(min, max)'",
                "() => {\n    it('returns the smallest node that spans the given range', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild;\n\n      assert.equal(\n        'identifier',\n        sumNode.descendantForPosition(\n          {row: 0, column: 1},\n          {row: 0, column: 2},\n        ).type,\n      );\n\n      assert.equal(\n        '+',\n        sumNode.descendantForPosition({row: 0, column: 4}).type,\n      );\n\n      assert.throws(() => {\n        sumNode.descendantForPosition(1, {});\n      }, 'Arguments must be {row, column} objects');\n\n      assert.throws(() => {\n        sumNode.descendantForPosition();\n      }, 'Arguments must be {row, column} objects');\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 261
        },
        {
            "Name": "it",
            "Args": [
                "'returns the smallest node that spans the given range'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild;\n\n      assert.equal(\n        'identifier',\n        sumNode.descendantForPosition(\n          {row: 0, column: 1},\n          {row: 0, column: 2},\n        ).type,\n      );\n\n      assert.equal(\n        '+',\n        sumNode.descendantForPosition({row: 0, column: 4}).type,\n      );\n\n      assert.throws(() => {\n        sumNode.descendantForPosition(1, {});\n      }, 'Arguments must be {row, column} objects');\n\n      assert.throws(() => {\n        sumNode.descendantForPosition();\n      }, 'Arguments must be {row, column} objects');\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 262
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 263
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'identifier'",
                "sumNode.descendantForPosition(\n          {row: 0, column: 1},\n          {row: 0, column: 2},\n        ).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 266
        },
        {
            "Name": "sumNode.descendantForPosition",
            "Args": [
                "{row: 0, column: 1}",
                "{row: 0, column: 2}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 268
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'+'",
                "sumNode.descendantForPosition({row: 0, column: 4}).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 274
        },
        {
            "Name": "sumNode.descendantForPosition",
            "Args": [
                "{row: 0, column: 4}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 276
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        sumNode.descendantForPosition(1, {});\n      }",
                "'Arguments must be {row, column} objects'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 279
        },
        {
            "Name": "sumNode.descendantForPosition",
            "Args": [
                "1",
                "{}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 280
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        sumNode.descendantForPosition();\n      }",
                "'Arguments must be {row, column} objects'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 283
        },
        {
            "Name": "sumNode.descendantForPosition",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 284
        },
        {
            "Name": "describe",
            "Args": [
                "'.namedDescendantForPosition(min, max)'",
                "() => {\n    it('returns the smallest named node that spans the given range', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild;\n\n      assert.equal(\n        sumNode.namedDescendantForPosition(\n          {row: 0, column: 1},\n          {row: 0, column: 2},\n        ).type,\n        'identifier',\n      );\n\n      assert.equal(\n        sumNode.namedDescendantForPosition({row: 0, column: 4}).type,\n        'binary_expression',\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 289
        },
        {
            "Name": "it",
            "Args": [
                "'returns the smallest named node that spans the given range'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild;\n\n      assert.equal(\n        sumNode.namedDescendantForPosition(\n          {row: 0, column: 1},\n          {row: 0, column: 2},\n        ).type,\n        'identifier',\n      );\n\n      assert.equal(\n        sumNode.namedDescendantForPosition({row: 0, column: 4}).type,\n        'binary_expression',\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 290
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 291
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sumNode.namedDescendantForPosition(\n          {row: 0, column: 1},\n          {row: 0, column: 2},\n        ).type",
                "'identifier'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 294
        },
        {
            "Name": "sumNode.namedDescendantForPosition",
            "Args": [
                "{row: 0, column: 1}",
                "{row: 0, column: 2}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 295
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sumNode.namedDescendantForPosition({row: 0, column: 4}).type",
                "'binary_expression'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 302
        },
        {
            "Name": "sumNode.namedDescendantForPosition",
            "Args": [
                "{row: 0, column: 4}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 303
        },
        {
            "Name": "describe",
            "Args": [
                "'.hasError'",
                "() => {\n    it('returns true if the node contains an error', () => {\n      tree = parser.parse('1 + 2 * * 3');\n      const node = tree.rootNode;\n      assert.equal(\n        node.toString(),\n        '(program (expression_statement (binary_expression left: (number) right: (binary_expression left: (number) (ERROR) right: (number)))))',\n      );\n\n      const sum = node.firstChild.firstChild;\n      assert(sum.hasError);\n      assert(!sum.children[0].hasError);\n      assert(!sum.children[1].hasError);\n      assert(sum.children[2].hasError);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 309
        },
        {
            "Name": "it",
            "Args": [
                "'returns true if the node contains an error'",
                "() => {\n      tree = parser.parse('1 + 2 * * 3');\n      const node = tree.rootNode;\n      assert.equal(\n        node.toString(),\n        '(program (expression_statement (binary_expression left: (number) right: (binary_expression left: (number) (ERROR) right: (number)))))',\n      );\n\n      const sum = node.firstChild.firstChild;\n      assert(sum.hasError);\n      assert(!sum.children[0].hasError);\n      assert(!sum.children[1].hasError);\n      assert(sum.children[2].hasError);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 310
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'1 + 2 * * 3'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 311
        },
        {
            "Name": "assert.equal",
            "Args": [
                "node.toString()",
                "'(program (expression_statement (binary_expression left: (number) right: (binary_expression left: (number) (ERROR) right: (number)))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 313
        },
        {
            "Name": "node.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 314
        },
        {
            "Name": "assert",
            "Args": [
                "sum.hasError"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 319
        },
        {
            "Name": "assert",
            "Args": [
                "!sum.children[0].hasError"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 320
        },
        {
            "Name": "assert",
            "Args": [
                "!sum.children[1].hasError"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 321
        },
        {
            "Name": "assert",
            "Args": [
                "sum.children[2].hasError"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 322
        },
        {
            "Name": "describe",
            "Args": [
                "'.isError'",
                "() => {\n    it('returns true if the node is an error', () => {\n      tree = parser.parse('2 * * 3');\n      const node = tree.rootNode;\n      assert.equal(\n        node.toString(),\n        '(program (expression_statement (binary_expression left: (number) (ERROR) right: (number))))',\n      );\n\n      const multi = node.firstChild.firstChild;\n      assert(multi.hasError);\n      assert(!multi.children[0].isError);\n      assert(!multi.children[1].isError);\n      assert(multi.children[2].isError);\n      assert(!multi.children[3].isError);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 326
        },
        {
            "Name": "it",
            "Args": [
                "'returns true if the node is an error'",
                "() => {\n      tree = parser.parse('2 * * 3');\n      const node = tree.rootNode;\n      assert.equal(\n        node.toString(),\n        '(program (expression_statement (binary_expression left: (number) (ERROR) right: (number))))',\n      );\n\n      const multi = node.firstChild.firstChild;\n      assert(multi.hasError);\n      assert(!multi.children[0].isError);\n      assert(!multi.children[1].isError);\n      assert(multi.children[2].isError);\n      assert(!multi.children[3].isError);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 327
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'2 * * 3'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 328
        },
        {
            "Name": "assert.equal",
            "Args": [
                "node.toString()",
                "'(program (expression_statement (binary_expression left: (number) (ERROR) right: (number))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 330
        },
        {
            "Name": "node.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 331
        },
        {
            "Name": "assert",
            "Args": [
                "multi.hasError"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 336
        },
        {
            "Name": "assert",
            "Args": [
                "!multi.children[0].isError"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 337
        },
        {
            "Name": "assert",
            "Args": [
                "!multi.children[1].isError"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 338
        },
        {
            "Name": "assert",
            "Args": [
                "multi.children[2].isError"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 339
        },
        {
            "Name": "assert",
            "Args": [
                "!multi.children[3].isError"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 340
        },
        {
            "Name": "describe",
            "Args": [
                "'.isMissing'",
                "() => {\n    it('returns true if the node is missing from the source and was inserted via error recovery', () => {\n      tree = parser.parse('(2 ||)');\n      const node = tree.rootNode;\n      assert.equal(\n        node.toString(),\n        '(program (expression_statement (parenthesized_expression (binary_expression left: (number) right: (MISSING identifier)))))',\n      );\n\n      const sum = node.firstChild.firstChild.firstNamedChild;\n      assert.equal(sum.type, 'binary_expression');\n      assert(sum.hasError);\n      assert(!sum.children[0].isMissing);\n      assert(!sum.children[1].isMissing);\n      assert(sum.children[2].isMissing);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 344
        },
        {
            "Name": "it",
            "Args": [
                "'returns true if the node is missing from the source and was inserted via error recovery'",
                "() => {\n      tree = parser.parse('(2 ||)');\n      const node = tree.rootNode;\n      assert.equal(\n        node.toString(),\n        '(program (expression_statement (parenthesized_expression (binary_expression left: (number) right: (MISSING identifier)))))',\n      );\n\n      const sum = node.firstChild.firstChild.firstNamedChild;\n      assert.equal(sum.type, 'binary_expression');\n      assert(sum.hasError);\n      assert(!sum.children[0].isMissing);\n      assert(!sum.children[1].isMissing);\n      assert(sum.children[2].isMissing);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 345
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'(2 ||)'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 346
        },
        {
            "Name": "assert.equal",
            "Args": [
                "node.toString()",
                "'(program (expression_statement (parenthesized_expression (binary_expression left: (number) right: (MISSING identifier)))))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 348
        },
        {
            "Name": "node.toString",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 349
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sum.type",
                "'binary_expression'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 354
        },
        {
            "Name": "assert",
            "Args": [
                "sum.hasError"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 355
        },
        {
            "Name": "assert",
            "Args": [
                "!sum.children[0].isMissing"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 356
        },
        {
            "Name": "assert",
            "Args": [
                "!sum.children[1].isMissing"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 357
        },
        {
            "Name": "assert",
            "Args": [
                "sum.children[2].isMissing"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 358
        },
        {
            "Name": "describe",
            "Args": [
                "'.isExtra'",
                "() => {\n    it('returns true if the node is an extra node like comments', () => {\n      tree = parser.parse('foo(/* hi */);');\n      const node = tree.rootNode;\n      const commentNode = node.descendantForIndex(7, 7);\n\n      assert.equal(node.type, 'program');\n      assert.equal(commentNode.type, 'comment');\n      assert(!node.isExtra);\n      assert(commentNode.isExtra);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 362
        },
        {
            "Name": "it",
            "Args": [
                "'returns true if the node is an extra node like comments'",
                "() => {\n      tree = parser.parse('foo(/* hi */);');\n      const node = tree.rootNode;\n      const commentNode = node.descendantForIndex(7, 7);\n\n      assert.equal(node.type, 'program');\n      assert.equal(commentNode.type, 'comment');\n      assert(!node.isExtra);\n      assert(commentNode.isExtra);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 363
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'foo(/* hi */);'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 364
        },
        {
            "Name": "node.descendantForIndex",
            "Args": [
                "7",
                "7"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 366
        },
        {
            "Name": "assert.equal",
            "Args": [
                "node.type",
                "'program'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 368
        },
        {
            "Name": "assert.equal",
            "Args": [
                "commentNode.type",
                "'comment'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 369
        },
        {
            "Name": "assert",
            "Args": [
                "!node.isExtra"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 370
        },
        {
            "Name": "assert",
            "Args": [
                "commentNode.isExtra"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 371
        },
        {
            "Name": "describe",
            "Args": [
                "'.text'",
                "() => {\n    const text = '\u03b10 / b\ud83d\udc4ec\ud83d\udc4e';\n\n    Object.entries({\n      '.parse(String)': text,\n      '.parse(Function)': (offset) => text.slice(offset, 4),\n    }).forEach(([method, _parse]) =>\n      it(`returns the text of a node generated by ${method}`, async () => {\n        const [numeratorSrc, denominatorSrc] = text.split(/\\s*\\/\\s+/);\n        tree = await parser.parse(text);\n        const quotientNode = tree.rootNode.firstChild.firstChild;\n        const [numerator, slash, denominator] = quotientNode.children;\n\n        assert.equal(text, tree.rootNode.text, 'root node text');\n        assert.equal(denominatorSrc, denominator.text, 'denominator text');\n        assert.equal(text, quotientNode.text, 'quotient text');\n        assert.equal(numeratorSrc, numerator.text, 'numerator text');\n        assert.equal('/', slash.text, '\"/\" text');\n      }),\n    );\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 375
        },
        {
            "Name": "Object.entries({\n      '.parse(String)': text,\n      '.parse(Function)': (offset) => text.slice(offset, 4),\n    }).forEach",
            "Args": [
                "([method, _parse]) =>\n      it(`returns the text of a node generated by ${method}`, async () => {\n        const [numeratorSrc, denominatorSrc] = text.split(/\\s*\\/\\s+/);\n        tree = await parser.parse(text);\n        const quotientNode = tree.rootNode.firstChild.firstChild;\n        const [numerator, slash, denominator] = quotientNode.children;\n\n        assert.equal(text, tree.rootNode.text, 'root node text');\n        assert.equal(denominatorSrc, denominator.text, 'denominator text');\n        assert.equal(text, quotientNode.text, 'quotient text');\n        assert.equal(numeratorSrc, numerator.text, 'numerator text');\n        assert.equal('/', slash.text, '\"/\" text');\n      })"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 378
        },
        {
            "Name": "Object.entries",
            "Args": [
                "{\n      '.parse(String)': text,\n      '.parse(Function)': (offset) => text.slice(offset, 4),\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 378
        },
        {
            "Name": "text.slice",
            "Args": [
                "offset",
                "4"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 380
        },
        {
            "Name": "it",
            "Args": [
                "`returns the text of a node generated by ${method}`",
                "async () => {\n        const [numeratorSrc, denominatorSrc] = text.split(/\\s*\\/\\s+/);\n        tree = await parser.parse(text);\n        const quotientNode = tree.rootNode.firstChild.firstChild;\n        const [numerator, slash, denominator] = quotientNode.children;\n\n        assert.equal(text, tree.rootNode.text, 'root node text');\n        assert.equal(denominatorSrc, denominator.text, 'denominator text');\n        assert.equal(text, quotientNode.text, 'quotient text');\n        assert.equal(numeratorSrc, numerator.text, 'numerator text');\n        assert.equal('/', slash.text, '\"/\" text');\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 382
        },
        {
            "Name": "text.split",
            "Args": [
                "/\\s*\\/\\s+/"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 383
        },
        {
            "Name": "parser.parse",
            "Args": [
                "text"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 384
        },
        {
            "Name": "assert.equal",
            "Args": [
                "text",
                "tree.rootNode.text",
                "'root node text'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 388
        },
        {
            "Name": "assert.equal",
            "Args": [
                "denominatorSrc",
                "denominator.text",
                "'denominator text'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 389
        },
        {
            "Name": "assert.equal",
            "Args": [
                "text",
                "quotientNode.text",
                "'quotient text'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 390
        },
        {
            "Name": "assert.equal",
            "Args": [
                "numeratorSrc",
                "numerator.text",
                "'numerator text'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 391
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'/'",
                "slash.text",
                "'\"/\" text'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 392
        },
        {
            "Name": "describe",
            "Args": [
                "'.descendantCount'",
                "() => {\n    it('returns the number of descendants', () => {\n      parser.setLanguage(JSON);\n      tree = parser.parse(JSON_EXAMPLE);\n      const valueNode = tree.rootNode;\n      const allNodes = getAllNodes(tree);\n\n      assert.equal(valueNode.descendantCount, allNodes.length);\n\n      const cursor = tree.walk();\n      for (let i = 0; i < allNodes.length; i++) {\n        const node = allNodes[i];\n        cursor.gotoDescendant(i);\n        assert.equal(cursor.currentNode.id, node.id, `index ${i}`);\n      }\n\n      for (let i = allNodes.length - 1; i >= 0; i--) {\n        const node = allNodes[i];\n        cursor.gotoDescendant(i);\n        assert.equal(cursor.currentNode.id, node.id, `rev index ${i}`);\n      }\n    });\n\n    it('tests a single node tree', () => {\n      parser.setLanguage(EmbeddedTemplate);\n      tree = parser.parse('hello');\n\n      const nodes = getAllNodes(tree);\n      assert.equal(nodes.length, 2);\n      assert.equal(tree.rootNode.descendantCount, 2);\n\n      const cursor = tree.walk();\n\n      cursor.gotoDescendant(0);\n      assert.equal(cursor.currentDepth, 0);\n      assert.equal(cursor.currentNode.id, nodes[0].id);\n\n      cursor.gotoDescendant(1);\n      assert.equal(cursor.currentDepth, 1);\n      assert.equal(cursor.currentNode.id, nodes[1].id);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 397
        },
        {
            "Name": "it",
            "Args": [
                "'returns the number of descendants'",
                "() => {\n      parser.setLanguage(JSON);\n      tree = parser.parse(JSON_EXAMPLE);\n      const valueNode = tree.rootNode;\n      const allNodes = getAllNodes(tree);\n\n      assert.equal(valueNode.descendantCount, allNodes.length);\n\n      const cursor = tree.walk();\n      for (let i = 0; i < allNodes.length; i++) {\n        const node = allNodes[i];\n        cursor.gotoDescendant(i);\n        assert.equal(cursor.currentNode.id, node.id, `index ${i}`);\n      }\n\n      for (let i = allNodes.length - 1; i >= 0; i--) {\n        const node = allNodes[i];\n        cursor.gotoDescendant(i);\n        assert.equal(cursor.currentNode.id, node.id, `rev index ${i}`);\n      }\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 398
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "JSON"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 399
        },
        {
            "Name": "parser.parse",
            "Args": [
                "JSON_EXAMPLE"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 400
        },
        {
            "Name": "getAllNodes",
            "Args": [
                "tree"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 402
        },
        {
            "Name": "assert.equal",
            "Args": [
                "valueNode.descendantCount",
                "allNodes.length"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 404
        },
        {
            "Name": "tree.walk",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 406
        },
        {
            "Name": "cursor.gotoDescendant",
            "Args": [
                "i"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 409
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentNode.id",
                "node.id",
                "`index ${i}`"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 410
        },
        {
            "Name": "cursor.gotoDescendant",
            "Args": [
                "i"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 415
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentNode.id",
                "node.id",
                "`rev index ${i}`"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 416
        },
        {
            "Name": "it",
            "Args": [
                "'tests a single node tree'",
                "() => {\n      parser.setLanguage(EmbeddedTemplate);\n      tree = parser.parse('hello');\n\n      const nodes = getAllNodes(tree);\n      assert.equal(nodes.length, 2);\n      assert.equal(tree.rootNode.descendantCount, 2);\n\n      const cursor = tree.walk();\n\n      cursor.gotoDescendant(0);\n      assert.equal(cursor.currentDepth, 0);\n      assert.equal(cursor.currentNode.id, nodes[0].id);\n\n      cursor.gotoDescendant(1);\n      assert.equal(cursor.currentDepth, 1);\n      assert.equal(cursor.currentNode.id, nodes[1].id);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 420
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "EmbeddedTemplate"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 421
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'hello'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 422
        },
        {
            "Name": "getAllNodes",
            "Args": [
                "tree"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 424
        },
        {
            "Name": "assert.equal",
            "Args": [
                "nodes.length",
                "2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 425
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.descendantCount",
                "2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 426
        },
        {
            "Name": "tree.walk",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 428
        },
        {
            "Name": "cursor.gotoDescendant",
            "Args": [
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 430
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentDepth",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 431
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentNode.id",
                "nodes[0].id"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 432
        },
        {
            "Name": "cursor.gotoDescendant",
            "Args": [
                "1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 434
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentDepth",
                "1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 435
        },
        {
            "Name": "assert.equal",
            "Args": [
                "cursor.currentNode.id",
                "nodes[1].id"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 436
        },
        {
            "Name": "describe",
            "Args": [
                "'.rootNodeWithOffset'",
                "() => {\n    it('returns the root node of the tree, offset by the given byte offset', () => {\n      tree = parser.parse('  if (a) b');\n      const node = tree.rootNodeWithOffset(6, {row: 2, column: 2});\n      assert.equal(node.startIndex, 8);\n      assert.equal(node.endIndex, 16);\n      assert.deepEqual(node.startPosition, {row: 2, column: 4});\n      assert.deepEqual(node.endPosition, {row: 2, column: 12});\n\n      let child = node.firstChild.child(2);\n      assert.equal(child.type, 'expression_statement');\n      assert.equal(child.startIndex, 15);\n      assert.equal(child.endIndex, 16);\n      assert.deepEqual(child.startPosition, {row: 2, column: 11});\n      assert.deepEqual(child.endPosition, {row: 2, column: 12});\n\n      const cursor = node.walk();\n      cursor.gotoFirstChild();\n      cursor.gotoFirstChild();\n      cursor.gotoNextSibling();\n      child = cursor.currentNode;\n      assert.equal(child.type, 'parenthesized_expression');\n      assert.equal(child.startIndex, 11);\n      assert.equal(child.endIndex, 14);\n      assert.deepEqual(child.startPosition, {row: 2, column: 7});\n      assert.deepEqual(child.endPosition, {row: 2, column: 10});\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 440
        },
        {
            "Name": "it",
            "Args": [
                "'returns the root node of the tree, offset by the given byte offset'",
                "() => {\n      tree = parser.parse('  if (a) b');\n      const node = tree.rootNodeWithOffset(6, {row: 2, column: 2});\n      assert.equal(node.startIndex, 8);\n      assert.equal(node.endIndex, 16);\n      assert.deepEqual(node.startPosition, {row: 2, column: 4});\n      assert.deepEqual(node.endPosition, {row: 2, column: 12});\n\n      let child = node.firstChild.child(2);\n      assert.equal(child.type, 'expression_statement');\n      assert.equal(child.startIndex, 15);\n      assert.equal(child.endIndex, 16);\n      assert.deepEqual(child.startPosition, {row: 2, column: 11});\n      assert.deepEqual(child.endPosition, {row: 2, column: 12});\n\n      const cursor = node.walk();\n      cursor.gotoFirstChild();\n      cursor.gotoFirstChild();\n      cursor.gotoNextSibling();\n      child = cursor.currentNode;\n      assert.equal(child.type, 'parenthesized_expression');\n      assert.equal(child.startIndex, 11);\n      assert.equal(child.endIndex, 14);\n      assert.deepEqual(child.startPosition, {row: 2, column: 7});\n      assert.deepEqual(child.endPosition, {row: 2, column: 10});\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 441
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'  if (a) b'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 442
        },
        {
            "Name": "tree.rootNodeWithOffset",
            "Args": [
                "6",
                "{row: 2, column: 2}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 443
        },
        {
            "Name": "assert.equal",
            "Args": [
                "node.startIndex",
                "8"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 444
        },
        {
            "Name": "assert.equal",
            "Args": [
                "node.endIndex",
                "16"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 445
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "node.startPosition",
                "{row: 2, column: 4}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 446
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "node.endPosition",
                "{row: 2, column: 12}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 447
        },
        {
            "Name": "node.firstChild.child",
            "Args": [
                "2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 449
        },
        {
            "Name": "assert.equal",
            "Args": [
                "child.type",
                "'expression_statement'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 450
        },
        {
            "Name": "assert.equal",
            "Args": [
                "child.startIndex",
                "15"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 451
        },
        {
            "Name": "assert.equal",
            "Args": [
                "child.endIndex",
                "16"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 452
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "child.startPosition",
                "{row: 2, column: 11}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 453
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "child.endPosition",
                "{row: 2, column: 12}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 454
        },
        {
            "Name": "node.walk",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 456
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 457
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 458
        },
        {
            "Name": "cursor.gotoNextSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 459
        },
        {
            "Name": "assert.equal",
            "Args": [
                "child.type",
                "'parenthesized_expression'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 461
        },
        {
            "Name": "assert.equal",
            "Args": [
                "child.startIndex",
                "11"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 462
        },
        {
            "Name": "assert.equal",
            "Args": [
                "child.endIndex",
                "14"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 463
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "child.startPosition",
                "{row: 2, column: 7}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 464
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "child.endPosition",
                "{row: 2, column: 10}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 465
        },
        {
            "Name": "describe",
            "Args": [
                "'.parseState, .nextParseState'",
                "() => {\n    const text = '10 / 5';\n\n    it('returns node parse state ids', async () => {\n      tree = await parser.parse(text);\n      const quotientNode = tree.rootNode.firstChild.firstChild;\n      const [numerator, slash, denominator] = quotientNode.children;\n\n      assert.equal(tree.rootNode.parseState, 0);\n      // parse states will change on any change to the grammar so test that it\n      // returns something instead\n      assert.isAbove(numerator.parseState, 0);\n      assert.isAbove(slash.parseState, 0);\n      assert.isAbove(denominator.parseState, 0);\n    });\n\n    it('returns next parse state equal to the language', async () => {\n      tree = await parser.parse(text);\n      const quotientNode = tree.rootNode.firstChild.firstChild;\n      quotientNode.children.forEach((node) => {\n        assert.equal(\n          node.nextParseState,\n          JavaScript.nextState(node.parseState, node.grammarId),\n        );\n      });\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 469
        },
        {
            "Name": "it",
            "Args": [
                "'returns node parse state ids'",
                "async () => {\n      tree = await parser.parse(text);\n      const quotientNode = tree.rootNode.firstChild.firstChild;\n      const [numerator, slash, denominator] = quotientNode.children;\n\n      assert.equal(tree.rootNode.parseState, 0);\n      // parse states will change on any change to the grammar so test that it\n      // returns something instead\n      assert.isAbove(numerator.parseState, 0);\n      assert.isAbove(slash.parseState, 0);\n      assert.isAbove(denominator.parseState, 0);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 472
        },
        {
            "Name": "parser.parse",
            "Args": [
                "text"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 473
        },
        {
            "Name": "assert.equal",
            "Args": [
                "tree.rootNode.parseState",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 477
        },
        {
            "Name": "assert.isAbove",
            "Args": [
                "numerator.parseState",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 480
        },
        {
            "Name": "assert.isAbove",
            "Args": [
                "slash.parseState",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 481
        },
        {
            "Name": "assert.isAbove",
            "Args": [
                "denominator.parseState",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 482
        },
        {
            "Name": "it",
            "Args": [
                "'returns next parse state equal to the language'",
                "async () => {\n      tree = await parser.parse(text);\n      const quotientNode = tree.rootNode.firstChild.firstChild;\n      quotientNode.children.forEach((node) => {\n        assert.equal(\n          node.nextParseState,\n          JavaScript.nextState(node.parseState, node.grammarId),\n        );\n      });\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 485
        },
        {
            "Name": "parser.parse",
            "Args": [
                "text"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 486
        },
        {
            "Name": "quotientNode.children.forEach",
            "Args": [
                "(node) => {\n        assert.equal(\n          node.nextParseState,\n          JavaScript.nextState(node.parseState, node.grammarId),\n        );\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 488
        },
        {
            "Name": "assert.equal",
            "Args": [
                "node.nextParseState",
                "JavaScript.nextState(node.parseState, node.grammarId)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 489
        },
        {
            "Name": "JavaScript.nextState",
            "Args": [
                "node.parseState",
                "node.grammarId"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 491
        },
        {
            "Name": "describe",
            "Args": [
                "'.descendantsOfType(type, min, max)'",
                "() => {\n    it('finds all of the descendants of the given type in the given range', () => {\n      tree = parser.parse('a + 1 * b * 2 + c + 3');\n      const outerSum = tree.rootNode.firstChild.firstChild;\n      let descendants = outerSum.descendantsOfType('number', {row: 0, column: 2}, {row: 0, column: 15});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [4, 12],\n      );\n      assert.deepEqual(\n        descendants.map((node) => node.endPosition),\n        [{row: 0, column: 5}, {row: 0, column: 13}],\n      );\n\n      descendants = outerSum.descendantsOfType('identifier', {row: 0, column: 2}, {row: 0, column: 15});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [8],\n      );\n\n      descendants = outerSum.descendantsOfType('identifier', {row: 0, column: 0}, {row: 0, column: 30});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [0, 8, 16],\n      );\n\n      descendants = outerSum.descendantsOfType('number', {row: 0, column: 0}, {row: 0, column: 30});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [4, 12, 20],\n      );\n\n      descendants = outerSum.descendantsOfType(\n        ['identifier', 'number'],\n        {row: 0, column: 0},\n        {row: 0, column: 30},\n      );\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [0, 4, 8, 12, 16, 20],\n      );\n\n      descendants = outerSum.descendantsOfType('number');\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [4, 12, 20],\n      );\n\n      descendants = outerSum.firstChild.descendantsOfType('number', {row: 0, column: 0}, {row: 0, column: 30});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [4, 12],\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 497
        },
        {
            "Name": "it",
            "Args": [
                "'finds all of the descendants of the given type in the given range'",
                "() => {\n      tree = parser.parse('a + 1 * b * 2 + c + 3');\n      const outerSum = tree.rootNode.firstChild.firstChild;\n      let descendants = outerSum.descendantsOfType('number', {row: 0, column: 2}, {row: 0, column: 15});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [4, 12],\n      );\n      assert.deepEqual(\n        descendants.map((node) => node.endPosition),\n        [{row: 0, column: 5}, {row: 0, column: 13}],\n      );\n\n      descendants = outerSum.descendantsOfType('identifier', {row: 0, column: 2}, {row: 0, column: 15});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [8],\n      );\n\n      descendants = outerSum.descendantsOfType('identifier', {row: 0, column: 0}, {row: 0, column: 30});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [0, 8, 16],\n      );\n\n      descendants = outerSum.descendantsOfType('number', {row: 0, column: 0}, {row: 0, column: 30});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [4, 12, 20],\n      );\n\n      descendants = outerSum.descendantsOfType(\n        ['identifier', 'number'],\n        {row: 0, column: 0},\n        {row: 0, column: 30},\n      );\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [0, 4, 8, 12, 16, 20],\n      );\n\n      descendants = outerSum.descendantsOfType('number');\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [4, 12, 20],\n      );\n\n      descendants = outerSum.firstChild.descendantsOfType('number', {row: 0, column: 0}, {row: 0, column: 30});\n      assert.deepEqual(\n        descendants.map((node) => node.startIndex),\n        [4, 12],\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 498
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'a + 1 * b * 2 + c + 3'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 499
        },
        {
            "Name": "outerSum.descendantsOfType",
            "Args": [
                "'number'",
                "{row: 0, column: 2}",
                "{row: 0, column: 15}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 501
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "descendants.map((node) => node.startIndex)",
                "[4, 12]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 502
        },
        {
            "Name": "descendants.map",
            "Args": [
                "(node) => node.startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 503
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "descendants.map((node) => node.endPosition)",
                "[{row: 0, column: 5}, {row: 0, column: 13}]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 506
        },
        {
            "Name": "descendants.map",
            "Args": [
                "(node) => node.endPosition"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 507
        },
        {
            "Name": "outerSum.descendantsOfType",
            "Args": [
                "'identifier'",
                "{row: 0, column: 2}",
                "{row: 0, column: 15}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 511
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "descendants.map((node) => node.startIndex)",
                "[8]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 512
        },
        {
            "Name": "descendants.map",
            "Args": [
                "(node) => node.startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 513
        },
        {
            "Name": "outerSum.descendantsOfType",
            "Args": [
                "'identifier'",
                "{row: 0, column: 0}",
                "{row: 0, column: 30}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 517
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "descendants.map((node) => node.startIndex)",
                "[0, 8, 16]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 518
        },
        {
            "Name": "descendants.map",
            "Args": [
                "(node) => node.startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 519
        },
        {
            "Name": "outerSum.descendantsOfType",
            "Args": [
                "'number'",
                "{row: 0, column: 0}",
                "{row: 0, column: 30}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 523
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "descendants.map((node) => node.startIndex)",
                "[4, 12, 20]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 524
        },
        {
            "Name": "descendants.map",
            "Args": [
                "(node) => node.startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 525
        },
        {
            "Name": "outerSum.descendantsOfType",
            "Args": [
                "['identifier', 'number']",
                "{row: 0, column: 0}",
                "{row: 0, column: 30}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 529
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "descendants.map((node) => node.startIndex)",
                "[0, 4, 8, 12, 16, 20]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 534
        },
        {
            "Name": "descendants.map",
            "Args": [
                "(node) => node.startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 535
        },
        {
            "Name": "outerSum.descendantsOfType",
            "Args": [
                "'number'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 539
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "descendants.map((node) => node.startIndex)",
                "[4, 12, 20]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 540
        },
        {
            "Name": "descendants.map",
            "Args": [
                "(node) => node.startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 541
        },
        {
            "Name": "outerSum.firstChild.descendantsOfType",
            "Args": [
                "'number'",
                "{row: 0, column: 0}",
                "{row: 0, column: 30}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 545
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "descendants.map((node) => node.startIndex)",
                "[4, 12]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 546
        },
        {
            "Name": "descendants.map",
            "Args": [
                "(node) => node.startIndex"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 547
        },
        {
            "Name": "describe.skip",
            "Args": [
                "'.closest(type)'",
                "() => {\n    it('returns the closest ancestor of the given type', () => {\n      tree = parser.parse('a(b + -d.e)');\n      const property = tree.rootNode.descendantForIndex('a(b + -d.'.length);\n      assert.equal(property.type, 'property_identifier');\n\n      const unary = property.closest('unary_expression');\n      assert.equal(unary.type, 'unary_expression');\n      assert.equal(unary.startIndex, 'a(b + '.length);\n      assert.equal(unary.endIndex, 'a(b + -d.e'.length);\n\n      const sum = property.closest(['binary_expression', 'call_expression']);\n      assert.equal(sum.type, 'binary_expression');\n      assert.equal(sum.startIndex, 2);\n      assert.equal(sum.endIndex, 'a(b + -d.e'.length);\n    });\n\n    it('throws an exception when an invalid argument is given', () => {\n      tree = parser.parse('a + 1 * b * 2 + c + 3');\n      const number = tree.rootNode.descendantForIndex(4);\n\n      assert.throws(() => number.closest({a: 1}), /Argument must be a string or array of strings/);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 553
        },
        {
            "Name": "it",
            "Args": [
                "'returns the closest ancestor of the given type'",
                "() => {\n      tree = parser.parse('a(b + -d.e)');\n      const property = tree.rootNode.descendantForIndex('a(b + -d.'.length);\n      assert.equal(property.type, 'property_identifier');\n\n      const unary = property.closest('unary_expression');\n      assert.equal(unary.type, 'unary_expression');\n      assert.equal(unary.startIndex, 'a(b + '.length);\n      assert.equal(unary.endIndex, 'a(b + -d.e'.length);\n\n      const sum = property.closest(['binary_expression', 'call_expression']);\n      assert.equal(sum.type, 'binary_expression');\n      assert.equal(sum.startIndex, 2);\n      assert.equal(sum.endIndex, 'a(b + -d.e'.length);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 554
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'a(b + -d.e)'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 555
        },
        {
            "Name": "tree.rootNode.descendantForIndex",
            "Args": [
                "'a(b + -d.'.length"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 556
        },
        {
            "Name": "assert.equal",
            "Args": [
                "property.type",
                "'property_identifier'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 557
        },
        {
            "Name": "property.closest",
            "Args": [
                "'unary_expression'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 559
        },
        {
            "Name": "assert.equal",
            "Args": [
                "unary.type",
                "'unary_expression'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 560
        },
        {
            "Name": "assert.equal",
            "Args": [
                "unary.startIndex",
                "'a(b + '.length"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 561
        },
        {
            "Name": "assert.equal",
            "Args": [
                "unary.endIndex",
                "'a(b + -d.e'.length"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 562
        },
        {
            "Name": "property.closest",
            "Args": [
                "['binary_expression', 'call_expression']"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 564
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sum.type",
                "'binary_expression'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 565
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sum.startIndex",
                "2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 566
        },
        {
            "Name": "assert.equal",
            "Args": [
                "sum.endIndex",
                "'a(b + -d.e'.length"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 567
        },
        {
            "Name": "it",
            "Args": [
                "'throws an exception when an invalid argument is given'",
                "() => {\n      tree = parser.parse('a + 1 * b * 2 + c + 3');\n      const number = tree.rootNode.descendantForIndex(4);\n\n      assert.throws(() => number.closest({a: 1}), /Argument must be a string or array of strings/);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 570
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'a + 1 * b * 2 + c + 3'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 571
        },
        {
            "Name": "tree.rootNode.descendantForIndex",
            "Args": [
                "4"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 572
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => number.closest({a: 1})",
                "/Argument must be a string or array of strings/"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 574
        },
        {
            "Name": "number.closest",
            "Args": [
                "{a: 1}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 574
        },
        {
            "Name": "describe",
            "Args": [
                "'.firstChildForIndex(index)'",
                "() => {\n    it('returns the first child that extends beyond the given index', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n\n      assert.equal('identifier', sumNode.firstChildForIndex(0).type);\n      assert.equal('identifier', sumNode.firstChildForIndex(1).type);\n      assert.equal('+', sumNode.firstChildForIndex(3).type);\n      assert.equal('number', sumNode.firstChildForIndex(5).type);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 578
        },
        {
            "Name": "it",
            "Args": [
                "'returns the first child that extends beyond the given index'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n\n      assert.equal('identifier', sumNode.firstChildForIndex(0).type);\n      assert.equal('identifier', sumNode.firstChildForIndex(1).type);\n      assert.equal('+', sumNode.firstChildForIndex(3).type);\n      assert.equal('number', sumNode.firstChildForIndex(5).type);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 579
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 580
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'identifier'",
                "sumNode.firstChildForIndex(0).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 583
        },
        {
            "Name": "sumNode.firstChildForIndex",
            "Args": [
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 583
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'identifier'",
                "sumNode.firstChildForIndex(1).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 584
        },
        {
            "Name": "sumNode.firstChildForIndex",
            "Args": [
                "1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 584
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'+'",
                "sumNode.firstChildForIndex(3).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 585
        },
        {
            "Name": "sumNode.firstChildForIndex",
            "Args": [
                "3"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 585
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'number'",
                "sumNode.firstChildForIndex(5).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 586
        },
        {
            "Name": "sumNode.firstChildForIndex",
            "Args": [
                "5"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 586
        },
        {
            "Name": "describe",
            "Args": [
                "'.firstNamedChildForIndex(index)'",
                "() => {\n    it('returns the first child that extends beyond the given index', () => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n\n      assert.equal('identifier', sumNode.firstNamedChildForIndex(0).type);\n      assert.equal('identifier', sumNode.firstNamedChildForIndex(1).type);\n      assert.equal('number', sumNode.firstNamedChildForIndex(3).type);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 590
        },
        {
            "Name": "it",
            "Args": [
                "'returns the first child that extends beyond the given index'",
                "() => {\n      tree = parser.parse('x10 + 1000');\n      const sumNode = tree.rootNode.firstChild.firstChild;\n\n      assert.equal('identifier', sumNode.firstNamedChildForIndex(0).type);\n      assert.equal('identifier', sumNode.firstNamedChildForIndex(1).type);\n      assert.equal('number', sumNode.firstNamedChildForIndex(3).type);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 591
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'x10 + 1000'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 592
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'identifier'",
                "sumNode.firstNamedChildForIndex(0).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 595
        },
        {
            "Name": "sumNode.firstNamedChildForIndex",
            "Args": [
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 595
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'identifier'",
                "sumNode.firstNamedChildForIndex(1).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 596
        },
        {
            "Name": "sumNode.firstNamedChildForIndex",
            "Args": [
                "1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 596
        },
        {
            "Name": "assert.equal",
            "Args": [
                "'number'",
                "sumNode.firstNamedChildForIndex(3).type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 597
        },
        {
            "Name": "sumNode.firstNamedChildForIndex",
            "Args": [
                "3"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 597
        },
        {
            "Name": "describe",
            "Args": [
                "'.equals(other)'",
                "() => {\n    it('returns true if the nodes are the same', () => {\n      tree = parser.parse('1 + 2');\n\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      const node1 = sumNode.firstChild;\n      const node2 = sumNode.firstChild;\n      assert(node1.equals(node2));\n    });\n\n    it('returns false if the nodes are not the same', () => {\n      tree = parser.parse('1 + 2');\n\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      const node1 = sumNode.firstChild;\n      const node2 = node1.nextSibling;\n      assert(!node1.equals(node2));\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 601
        },
        {
            "Name": "it",
            "Args": [
                "'returns true if the nodes are the same'",
                "() => {\n      tree = parser.parse('1 + 2');\n\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      const node1 = sumNode.firstChild;\n      const node2 = sumNode.firstChild;\n      assert(node1.equals(node2));\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 602
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'1 + 2'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 603
        },
        {
            "Name": "assert",
            "Args": [
                "node1.equals(node2)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 608
        },
        {
            "Name": "node1.equals",
            "Args": [
                "node2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 608
        },
        {
            "Name": "it",
            "Args": [
                "'returns false if the nodes are not the same'",
                "() => {\n      tree = parser.parse('1 + 2');\n\n      const sumNode = tree.rootNode.firstChild.firstChild;\n      const node1 = sumNode.firstChild;\n      const node2 = node1.nextSibling;\n      assert(!node1.equals(node2));\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 611
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'1 + 2'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 612
        },
        {
            "Name": "assert",
            "Args": [
                "!node1.equals(node2)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 617
        },
        {
            "Name": "node1.equals",
            "Args": [
                "node2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 617
        },
        {
            "Name": "describe",
            "Args": [
                "'.fieldNameForChild(index)'",
                "() => {\n    it('returns the field of a child or null', () => {\n      tree = parser.parse('let a = 5');\n\n      const noField = tree.rootNode.fieldNameForChild(0);\n      const name = tree.rootNode.firstChild.children[1].fieldNameForChild(0);\n      const value = tree.rootNode.firstChild.children[1].fieldNameForChild(2);\n      const overflow = tree.rootNode.firstChild.children[1].fieldNameForChild(3);\n\n      assert.equal(noField, null);\n      assert.equal(name, 'name');\n      assert.equal(value, 'value');\n      assert.equal(overflow, null);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 621
        },
        {
            "Name": "it",
            "Args": [
                "'returns the field of a child or null'",
                "() => {\n      tree = parser.parse('let a = 5');\n\n      const noField = tree.rootNode.fieldNameForChild(0);\n      const name = tree.rootNode.firstChild.children[1].fieldNameForChild(0);\n      const value = tree.rootNode.firstChild.children[1].fieldNameForChild(2);\n      const overflow = tree.rootNode.firstChild.children[1].fieldNameForChild(3);\n\n      assert.equal(noField, null);\n      assert.equal(name, 'name');\n      assert.equal(value, 'value');\n      assert.equal(overflow, null);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 622
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'let a = 5'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 623
        },
        {
            "Name": "tree.rootNode.fieldNameForChild",
            "Args": [
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 625
        },
        {
            "Name": "tree.rootNode.firstChild.children[1].fieldNameForChild",
            "Args": [
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 626
        },
        {
            "Name": "tree.rootNode.firstChild.children[1].fieldNameForChild",
            "Args": [
                "2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 627
        },
        {
            "Name": "tree.rootNode.firstChild.children[1].fieldNameForChild",
            "Args": [
                "3"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 628
        },
        {
            "Name": "assert.equal",
            "Args": [
                "noField",
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 630
        },
        {
            "Name": "assert.equal",
            "Args": [
                "name",
                "'name'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 631
        },
        {
            "Name": "assert.equal",
            "Args": [
                "value",
                "'value'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 632
        },
        {
            "Name": "assert.equal",
            "Args": [
                "overflow",
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/node-test.js",
            "Line": 633
        },
        {
            "Name": "require",
            "Args": [
                "'chai'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 1
        },
        {
            "Name": "describe",
            "Args": [
                "'Query'",
                "() => {\n  let parser; let tree; let query;\n\n  before(async () => ({Parser, JavaScript} = await require('./helper')));\n\n  beforeEach(() => {\n    parser = new Parser().setLanguage(JavaScript);\n  });\n\n  afterEach(() => {\n    parser.delete();\n    if (tree) tree.delete();\n    if (query) query.delete();\n  });\n\n  describe('construction', () => {\n    it('throws an error on invalid patterns', () => {\n      assert.throws(() => {\n        JavaScript.query('(function_declaration wat)');\n      }, 'Bad syntax at offset 22: \\'wat)\\'...');\n      assert.throws(() => {\n        JavaScript.query('(non_existent)');\n      }, 'Bad node name \\'non_existent\\'');\n      assert.throws(() => {\n        JavaScript.query('(a)');\n      }, 'Bad node name \\'a\\'');\n      assert.throws(() => {\n        JavaScript.query('(function_declaration non_existent:(identifier))');\n      }, 'Bad field name \\'non_existent\\'');\n      assert.throws(() => {\n        JavaScript.query('(function_declaration name:(statement_block))');\n      }, 'Bad pattern structure at offset 22: \\'name:(statement_block))\\'');\n    });\n\n    it('throws an error on invalid predicates', () => {\n      assert.throws(() => {\n        JavaScript.query('((identifier) @abc (#eq? @ab hi))');\n      }, 'Bad capture name @ab');\n      assert.throws(() => {\n        JavaScript.query('((identifier) @abc (#eq? @ab hi))');\n      }, 'Bad capture name @ab');\n      assert.throws(() => {\n        JavaScript.query('((identifier) @abc (#eq?))');\n      }, 'Wrong number of arguments to `#eq?` predicate. Expected 2, got 0');\n      assert.throws(() => {\n        JavaScript.query('((identifier) @a (#eq? @a @a @a))');\n      }, 'Wrong number of arguments to `#eq?` predicate. Expected 2, got 3');\n    });\n  });\n\n  describe('.matches', () => {\n    it('returns all of the matches for the given query', () => {\n      tree = parser.parse('function one() { two(); function three() {} }');\n      query = JavaScript.query(`\n        (function_declaration name: (identifier) @fn-def)\n        (call_expression function: (identifier) @fn-ref)\n      `);\n      const matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {pattern: 0, captures: [{name: 'fn-def', text: 'one'}]},\n        {pattern: 1, captures: [{name: 'fn-ref', text: 'two'}]},\n        {pattern: 0, captures: [{name: 'fn-def', text: 'three'}]},\n      ]);\n    });\n\n    it('can search in a specified ranges', () => {\n      tree = parser.parse('[a, b,\\nc, d,\\ne, f,\\ng, h]');\n      query = JavaScript.query('(identifier) @element');\n      const matches = query.matches(\n        tree.rootNode,\n        {\n          startPosition: {row: 1, column: 1},\n          endPosition: {row: 3, column: 1},\n        },\n      );\n      assert.deepEqual(formatMatches(matches), [\n        {pattern: 0, captures: [{name: 'element', text: 'd'}]},\n        {pattern: 0, captures: [{name: 'element', text: 'e'}]},\n        {pattern: 0, captures: [{name: 'element', text: 'f'}]},\n        {pattern: 0, captures: [{name: 'element', text: 'g'}]},\n      ]);\n    });\n\n    it('handles predicates that compare the text of capture to literal strings', () => {\n      tree = parser.parse(`\n        giraffe(1, 2, []);\n        helment([false]);\n        goat(false);\n        gross(3, []);\n        hiccup([]);\n        gaff(5);\n      `);\n\n      // Find all calls to functions beginning with 'g', where one argument\n      // is an array literal.\n      query = JavaScript.query(`\n        (call_expression\n          function: (identifier) @name\n          arguments: (arguments (array))\n          (#match? @name \"^g\"))\n      `);\n\n      const matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {pattern: 0, captures: [{name: 'name', text: 'giraffe'}]},\n        {pattern: 0, captures: [{name: 'name', text: 'gross'}]},\n      ]);\n    });\n\n    it('handles multiple matches where the first one is filtered', () => {\n      tree = parser.parse(`\n        const a = window.b;\n      `);\n\n      query = JavaScript.query(`\n        ((identifier) @variable.builtin\n          (#match? @variable.builtin \"^(arguments|module|console|window|document)$\")\n          (#is-not? local))\n      `);\n\n      const matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {pattern: 0, captures: [{name: 'variable.builtin', text: 'window'}]},\n      ]);\n    });\n  });\n\n  describe('.captures', () => {\n    it('returns all of the captures for the given query, in order', () => {\n      tree = parser.parse(`\n        a({\n          bc: function de() {\n            const fg = function hi() {}\n          },\n          jk: function lm() {\n            const no = function pq() {}\n          },\n        });\n      `);\n      query = JavaScript.query(`\n        (pair\n          key: _ @method.def\n          (function_expression\n            name: (identifier) @method.alias))\n\n        (variable_declarator\n          name: _ @function.def\n          value: (function_expression\n            name: (identifier) @function.alias))\n\n        \":\" @delimiter\n        \"=\" @operator\n      `);\n\n      const captures = query.captures(tree.rootNode);\n      assert.deepEqual(formatCaptures(captures), [\n        {name: 'method.def', text: 'bc'},\n        {name: 'delimiter', text: ':'},\n        {name: 'method.alias', text: 'de'},\n        {name: 'function.def', text: 'fg'},\n        {name: 'operator', text: '='},\n        {name: 'function.alias', text: 'hi'},\n        {name: 'method.def', text: 'jk'},\n        {name: 'delimiter', text: ':'},\n        {name: 'method.alias', text: 'lm'},\n        {name: 'function.def', text: 'no'},\n        {name: 'operator', text: '='},\n        {name: 'function.alias', text: 'pq'},\n      ]);\n    });\n\n    it('handles conditions that compare the text of capture to literal strings', () => {\n      tree = parser.parse(`\n        lambda\n        panda\n        load\n        toad\n        const ab = require('./ab');\n        new Cd(EF);\n      `);\n\n      query = JavaScript.query(`\n        ((identifier) @variable\n         (#not-match? @variable \"^(lambda|load)$\"))\n\n        ((identifier) @function.builtin\n         (#eq? @function.builtin \"require\"))\n\n        ((identifier) @constructor\n         (#match? @constructor \"^[A-Z]\"))\n\n        ((identifier) @constant\n         (#match? @constant \"^[A-Z]{2,}$\"))\n      `);\n\n      const captures = query.captures(tree.rootNode);\n      assert.deepEqual(formatCaptures(captures), [\n        {name: 'variable', text: 'panda'},\n        {name: 'variable', text: 'toad'},\n        {name: 'variable', text: 'ab'},\n        {name: 'variable', text: 'require'},\n        {name: 'function.builtin', text: 'require'},\n        {name: 'variable', text: 'Cd'},\n        {name: 'constructor', text: 'Cd'},\n        {name: 'variable', text: 'EF'},\n        {name: 'constructor', text: 'EF'},\n        {name: 'constant', text: 'EF'},\n      ]);\n    });\n\n    it('handles conditions that compare the text of capture to each other', () => {\n      tree = parser.parse(`\n        ab = abc + 1;\n        def = de + 1;\n        ghi = ghi + 1;\n      `);\n\n      query = JavaScript.query(`\n        (\n          (assignment_expression\n            left: (identifier) @id1\n            right: (binary_expression\n              left: (identifier) @id2))\n          (#eq? @id1 @id2)\n        )\n      `);\n\n      const captures = query.captures(tree.rootNode);\n      assert.deepEqual(formatCaptures(captures), [\n        {name: 'id1', text: 'ghi'},\n        {name: 'id2', text: 'ghi'},\n      ]);\n    });\n\n    it('handles patterns with properties', () => {\n      tree = parser.parse(`a(b.c);`);\n      query = JavaScript.query(`\n        ((call_expression (identifier) @func)\n         (#set! foo)\n         (#set! bar baz))\n\n        ((property_identifier) @prop\n         (#is? foo)\n         (#is-not? bar baz))\n      `);\n\n      const captures = query.captures(tree.rootNode);\n      assert.deepEqual(formatCaptures(captures), [\n        {name: 'func', text: 'a', setProperties: {foo: null, bar: 'baz'}},\n        {\n          name: 'prop',\n          text: 'c',\n          assertedProperties: {foo: null},\n          refutedProperties: {bar: 'baz'},\n        },\n      ]);\n      assert.ok(!query.didExceedMatchLimit());\n    });\n\n    it('detects queries with too many permutations to track', () => {\n      tree = parser.parse(`\n        [\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n        ];\n      `);\n\n      query = JavaScript.query(`\n        (array (identifier) @pre (identifier) @post)\n      `);\n\n      query.captures(tree.rootNode, {matchLimit: 32});\n      assert.ok(query.didExceedMatchLimit());\n    });\n\n    it('handles quantified captures properly', () => {\n      let captures;\n\n      tree = parser.parse(`\n        /// foo\n        /// bar\n        /// baz\n      `);\n\n      query = JavaScript.query(`\n        (\n          (comment)+ @foo\n          (#any-eq? @foo \"/// foo\")\n        )\n      `);\n\n      const expectCount = (tree, queryText, expectedCount) => {\n        query = JavaScript.query(queryText);\n        captures = query.captures(tree.rootNode);\n        assert.equal(captures.length, expectedCount);\n      };\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-eq? @foo \"/// foo\"))`,\n        3,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#eq? @foo \"/// foo\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-not-eq? @foo \"/// foo\"))`,\n        3,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#not-eq? @foo \"/// foo\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#match? @foo \"^/// foo\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-match? @foo \"^/// foo\"))`,\n        3,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#not-match? @foo \"^/// foo\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#not-match? @foo \"fsdfsdafdfs\"))`,\n        3,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-not-match? @foo \"^///\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-not-match? @foo \"^/// foo\"))`,\n        3,\n      );\n    });\n  });\n\n  describe('.predicatesForPattern(index)', () => {\n    it('returns all of the predicates as objects', () => {\n      query = JavaScript.query(`\n        (\n          (binary_expression\n            left: (identifier) @a\n            right: (identifier) @b)\n          (#something? @a @b)\n          (#match? @a \"c\")\n          (#something-else? @a \"A\" @b \"B\")\n        )\n\n        ((identifier) @c\n         (#hello! @c))\n\n        \"if\" @d\n      `);\n\n      assert.deepEqual(query.predicatesForPattern(0), [\n        {\n          operator: 'something?',\n          operands: [\n            {type: 'capture', name: 'a'},\n            {type: 'capture', name: 'b'},\n          ],\n        },\n        {\n          operator: 'something-else?',\n          operands: [\n            {type: 'capture', name: 'a'},\n            {type: 'string', value: 'A'},\n            {type: 'capture', name: 'b'},\n            {type: 'string', value: 'B'},\n          ],\n        },\n      ]);\n      assert.deepEqual(query.predicatesForPattern(1), [\n        {\n          operator: 'hello!',\n          operands: [{type: 'capture', name: 'c'}],\n        },\n      ]);\n      assert.deepEqual(query.predicatesForPattern(2), []);\n    });\n  });\n\n  describe('.disableCapture', () => {\n    it('disables a capture', () => {\n      const query = JavaScript.query(`\n        (function_declaration\n          (identifier) @name1 @name2 @name3\n          (statement_block) @body1 @body2)\n      `);\n\n      const source = 'function foo() { return 1; }';\n      const tree = parser.parse(source);\n\n      let matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {\n          pattern: 0,\n          captures: [\n            {name: 'name1', text: 'foo'},\n            {name: 'name2', text: 'foo'},\n            {name: 'name3', text: 'foo'},\n            {name: 'body1', text: '{ return 1; }'},\n            {name: 'body2', text: '{ return 1; }'},\n          ],\n        },\n      ]);\n\n      // disabling captures still works when there are multiple captures on a\n      // single node.\n      query.disableCapture('name2');\n      matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {\n          pattern: 0,\n          captures: [\n            {name: 'name1', text: 'foo'},\n            {name: 'name3', text: 'foo'},\n            {name: 'body1', text: '{ return 1; }'},\n            {name: 'body2', text: '{ return 1; }'},\n          ],\n        },\n      ]);\n    });\n  });\n\n  describe('Set a timeout', () =>\n    it('returns less than the expected matches', () => {\n      tree = parser.parse('function foo() while (true) { } }\\n'.repeat(1000));\n      query = JavaScript.query('(function_declaration name: (identifier) @function)');\n      const matches = query.matches(tree.rootNode, { timeoutMicros: 1000 });\n      assert.isBelow(matches.length, 1000);\n      const matches2 = query.matches(tree.rootNode, { timeoutMicros: 0 });\n      assert.equal(matches2.length, 1000);\n    })\n  );\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 4
        },
        {
            "Name": "before",
            "Args": [
                "async () => ({Parser, JavaScript} = await require('./helper'))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 7
        },
        {
            "Name": "require",
            "Args": [
                "'./helper'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 7
        },
        {
            "Name": "beforeEach",
            "Args": [
                "() => {\n    parser = new Parser().setLanguage(JavaScript);\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 9
        },
        {
            "Name": "new Parser().setLanguage",
            "Args": [
                "JavaScript"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 10
        },
        {
            "Name": "Parser",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 10
        },
        {
            "Name": "afterEach",
            "Args": [
                "() => {\n    parser.delete();\n    if (tree) tree.delete();\n    if (query) query.delete();\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 13
        },
        {
            "Name": "parser.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 14
        },
        {
            "Name": "tree.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 15
        },
        {
            "Name": "query.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 16
        },
        {
            "Name": "describe",
            "Args": [
                "'construction'",
                "() => {\n    it('throws an error on invalid patterns', () => {\n      assert.throws(() => {\n        JavaScript.query('(function_declaration wat)');\n      }, 'Bad syntax at offset 22: \\'wat)\\'...');\n      assert.throws(() => {\n        JavaScript.query('(non_existent)');\n      }, 'Bad node name \\'non_existent\\'');\n      assert.throws(() => {\n        JavaScript.query('(a)');\n      }, 'Bad node name \\'a\\'');\n      assert.throws(() => {\n        JavaScript.query('(function_declaration non_existent:(identifier))');\n      }, 'Bad field name \\'non_existent\\'');\n      assert.throws(() => {\n        JavaScript.query('(function_declaration name:(statement_block))');\n      }, 'Bad pattern structure at offset 22: \\'name:(statement_block))\\'');\n    });\n\n    it('throws an error on invalid predicates', () => {\n      assert.throws(() => {\n        JavaScript.query('((identifier) @abc (#eq? @ab hi))');\n      }, 'Bad capture name @ab');\n      assert.throws(() => {\n        JavaScript.query('((identifier) @abc (#eq? @ab hi))');\n      }, 'Bad capture name @ab');\n      assert.throws(() => {\n        JavaScript.query('((identifier) @abc (#eq?))');\n      }, 'Wrong number of arguments to `#eq?` predicate. Expected 2, got 0');\n      assert.throws(() => {\n        JavaScript.query('((identifier) @a (#eq? @a @a @a))');\n      }, 'Wrong number of arguments to `#eq?` predicate. Expected 2, got 3');\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 19
        },
        {
            "Name": "it",
            "Args": [
                "'throws an error on invalid patterns'",
                "() => {\n      assert.throws(() => {\n        JavaScript.query('(function_declaration wat)');\n      }, 'Bad syntax at offset 22: \\'wat)\\'...');\n      assert.throws(() => {\n        JavaScript.query('(non_existent)');\n      }, 'Bad node name \\'non_existent\\'');\n      assert.throws(() => {\n        JavaScript.query('(a)');\n      }, 'Bad node name \\'a\\'');\n      assert.throws(() => {\n        JavaScript.query('(function_declaration non_existent:(identifier))');\n      }, 'Bad field name \\'non_existent\\'');\n      assert.throws(() => {\n        JavaScript.query('(function_declaration name:(statement_block))');\n      }, 'Bad pattern structure at offset 22: \\'name:(statement_block))\\'');\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 20
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        JavaScript.query('(function_declaration wat)');\n      }",
                "'Bad syntax at offset 22: \\'wat)\\'...'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 21
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "'(function_declaration wat)'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 22
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        JavaScript.query('(non_existent)');\n      }",
                "'Bad node name \\'non_existent\\''"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 24
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "'(non_existent)'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 25
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        JavaScript.query('(a)');\n      }",
                "'Bad node name \\'a\\''"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 27
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "'(a)'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 28
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        JavaScript.query('(function_declaration non_existent:(identifier))');\n      }",
                "'Bad field name \\'non_existent\\''"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 30
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "'(function_declaration non_existent:(identifier))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 31
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        JavaScript.query('(function_declaration name:(statement_block))');\n      }",
                "'Bad pattern structure at offset 22: \\'name:(statement_block))\\''"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 33
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "'(function_declaration name:(statement_block))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 34
        },
        {
            "Name": "it",
            "Args": [
                "'throws an error on invalid predicates'",
                "() => {\n      assert.throws(() => {\n        JavaScript.query('((identifier) @abc (#eq? @ab hi))');\n      }, 'Bad capture name @ab');\n      assert.throws(() => {\n        JavaScript.query('((identifier) @abc (#eq? @ab hi))');\n      }, 'Bad capture name @ab');\n      assert.throws(() => {\n        JavaScript.query('((identifier) @abc (#eq?))');\n      }, 'Wrong number of arguments to `#eq?` predicate. Expected 2, got 0');\n      assert.throws(() => {\n        JavaScript.query('((identifier) @a (#eq? @a @a @a))');\n      }, 'Wrong number of arguments to `#eq?` predicate. Expected 2, got 3');\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 38
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        JavaScript.query('((identifier) @abc (#eq? @ab hi))');\n      }",
                "'Bad capture name @ab'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 39
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "'((identifier) @abc (#eq? @ab hi))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 40
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        JavaScript.query('((identifier) @abc (#eq? @ab hi))');\n      }",
                "'Bad capture name @ab'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 42
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "'((identifier) @abc (#eq? @ab hi))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 43
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        JavaScript.query('((identifier) @abc (#eq?))');\n      }",
                "'Wrong number of arguments to `#eq?` predicate. Expected 2, got 0'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 45
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "'((identifier) @abc (#eq?))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 46
        },
        {
            "Name": "assert.throws",
            "Args": [
                "() => {\n        JavaScript.query('((identifier) @a (#eq? @a @a @a))');\n      }",
                "'Wrong number of arguments to `#eq?` predicate. Expected 2, got 3'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 48
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "'((identifier) @a (#eq? @a @a @a))'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 49
        },
        {
            "Name": "describe",
            "Args": [
                "'.matches'",
                "() => {\n    it('returns all of the matches for the given query', () => {\n      tree = parser.parse('function one() { two(); function three() {} }');\n      query = JavaScript.query(`\n        (function_declaration name: (identifier) @fn-def)\n        (call_expression function: (identifier) @fn-ref)\n      `);\n      const matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {pattern: 0, captures: [{name: 'fn-def', text: 'one'}]},\n        {pattern: 1, captures: [{name: 'fn-ref', text: 'two'}]},\n        {pattern: 0, captures: [{name: 'fn-def', text: 'three'}]},\n      ]);\n    });\n\n    it('can search in a specified ranges', () => {\n      tree = parser.parse('[a, b,\\nc, d,\\ne, f,\\ng, h]');\n      query = JavaScript.query('(identifier) @element');\n      const matches = query.matches(\n        tree.rootNode,\n        {\n          startPosition: {row: 1, column: 1},\n          endPosition: {row: 3, column: 1},\n        },\n      );\n      assert.deepEqual(formatMatches(matches), [\n        {pattern: 0, captures: [{name: 'element', text: 'd'}]},\n        {pattern: 0, captures: [{name: 'element', text: 'e'}]},\n        {pattern: 0, captures: [{name: 'element', text: 'f'}]},\n        {pattern: 0, captures: [{name: 'element', text: 'g'}]},\n      ]);\n    });\n\n    it('handles predicates that compare the text of capture to literal strings', () => {\n      tree = parser.parse(`\n        giraffe(1, 2, []);\n        helment([false]);\n        goat(false);\n        gross(3, []);\n        hiccup([]);\n        gaff(5);\n      `);\n\n      // Find all calls to functions beginning with 'g', where one argument\n      // is an array literal.\n      query = JavaScript.query(`\n        (call_expression\n          function: (identifier) @name\n          arguments: (arguments (array))\n          (#match? @name \"^g\"))\n      `);\n\n      const matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {pattern: 0, captures: [{name: 'name', text: 'giraffe'}]},\n        {pattern: 0, captures: [{name: 'name', text: 'gross'}]},\n      ]);\n    });\n\n    it('handles multiple matches where the first one is filtered', () => {\n      tree = parser.parse(`\n        const a = window.b;\n      `);\n\n      query = JavaScript.query(`\n        ((identifier) @variable.builtin\n          (#match? @variable.builtin \"^(arguments|module|console|window|document)$\")\n          (#is-not? local))\n      `);\n\n      const matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {pattern: 0, captures: [{name: 'variable.builtin', text: 'window'}]},\n      ]);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 54
        },
        {
            "Name": "it",
            "Args": [
                "'returns all of the matches for the given query'",
                "() => {\n      tree = parser.parse('function one() { two(); function three() {} }');\n      query = JavaScript.query(`\n        (function_declaration name: (identifier) @fn-def)\n        (call_expression function: (identifier) @fn-ref)\n      `);\n      const matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {pattern: 0, captures: [{name: 'fn-def', text: 'one'}]},\n        {pattern: 1, captures: [{name: 'fn-ref', text: 'two'}]},\n        {pattern: 0, captures: [{name: 'fn-def', text: 'three'}]},\n      ]);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 55
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'function one() { two(); function three() {} }'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 56
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "`\n        (function_declaration name: (identifier) @fn-def)\n        (call_expression function: (identifier) @fn-ref)\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 57
        },
        {
            "Name": "query.matches",
            "Args": [
                "tree.rootNode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 61
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "formatMatches(matches)",
                "[\n        {pattern: 0, captures: [{name: 'fn-def', text: 'one'}]},\n        {pattern: 1, captures: [{name: 'fn-ref', text: 'two'}]},\n        {pattern: 0, captures: [{name: 'fn-def', text: 'three'}]},\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 62
        },
        {
            "Name": "formatMatches",
            "Args": [
                "matches"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 62
        },
        {
            "Name": "it",
            "Args": [
                "'can search in a specified ranges'",
                "() => {\n      tree = parser.parse('[a, b,\\nc, d,\\ne, f,\\ng, h]');\n      query = JavaScript.query('(identifier) @element');\n      const matches = query.matches(\n        tree.rootNode,\n        {\n          startPosition: {row: 1, column: 1},\n          endPosition: {row: 3, column: 1},\n        },\n      );\n      assert.deepEqual(formatMatches(matches), [\n        {pattern: 0, captures: [{name: 'element', text: 'd'}]},\n        {pattern: 0, captures: [{name: 'element', text: 'e'}]},\n        {pattern: 0, captures: [{name: 'element', text: 'f'}]},\n        {pattern: 0, captures: [{name: 'element', text: 'g'}]},\n      ]);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 69
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'[a, b,\\nc, d,\\ne, f,\\ng, h]'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 70
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "'(identifier) @element'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 71
        },
        {
            "Name": "query.matches",
            "Args": [
                "tree.rootNode",
                "{\n          startPosition: {row: 1, column: 1},\n          endPosition: {row: 3, column: 1},\n        }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 72
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "formatMatches(matches)",
                "[\n        {pattern: 0, captures: [{name: 'element', text: 'd'}]},\n        {pattern: 0, captures: [{name: 'element', text: 'e'}]},\n        {pattern: 0, captures: [{name: 'element', text: 'f'}]},\n        {pattern: 0, captures: [{name: 'element', text: 'g'}]},\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 79
        },
        {
            "Name": "formatMatches",
            "Args": [
                "matches"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 79
        },
        {
            "Name": "it",
            "Args": [
                "'handles predicates that compare the text of capture to literal strings'",
                "() => {\n      tree = parser.parse(`\n        giraffe(1, 2, []);\n        helment([false]);\n        goat(false);\n        gross(3, []);\n        hiccup([]);\n        gaff(5);\n      `);\n\n      // Find all calls to functions beginning with 'g', where one argument\n      // is an array literal.\n      query = JavaScript.query(`\n        (call_expression\n          function: (identifier) @name\n          arguments: (arguments (array))\n          (#match? @name \"^g\"))\n      `);\n\n      const matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {pattern: 0, captures: [{name: 'name', text: 'giraffe'}]},\n        {pattern: 0, captures: [{name: 'name', text: 'gross'}]},\n      ]);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 87
        },
        {
            "Name": "parser.parse",
            "Args": [
                "`\n        giraffe(1, 2, []);\n        helment([false]);\n        goat(false);\n        gross(3, []);\n        hiccup([]);\n        gaff(5);\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 88
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "`\n        (call_expression\n          function: (identifier) @name\n          arguments: (arguments (array))\n          (#match? @name \"^g\"))\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 99
        },
        {
            "Name": "query.matches",
            "Args": [
                "tree.rootNode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 106
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "formatMatches(matches)",
                "[\n        {pattern: 0, captures: [{name: 'name', text: 'giraffe'}]},\n        {pattern: 0, captures: [{name: 'name', text: 'gross'}]},\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 107
        },
        {
            "Name": "formatMatches",
            "Args": [
                "matches"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 107
        },
        {
            "Name": "it",
            "Args": [
                "'handles multiple matches where the first one is filtered'",
                "() => {\n      tree = parser.parse(`\n        const a = window.b;\n      `);\n\n      query = JavaScript.query(`\n        ((identifier) @variable.builtin\n          (#match? @variable.builtin \"^(arguments|module|console|window|document)$\")\n          (#is-not? local))\n      `);\n\n      const matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {pattern: 0, captures: [{name: 'variable.builtin', text: 'window'}]},\n      ]);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 113
        },
        {
            "Name": "parser.parse",
            "Args": [
                "`\n        const a = window.b;\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 114
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "`\n        ((identifier) @variable.builtin\n          (#match? @variable.builtin \"^(arguments|module|console|window|document)$\")\n          (#is-not? local))\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 118
        },
        {
            "Name": "query.matches",
            "Args": [
                "tree.rootNode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 124
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "formatMatches(matches)",
                "[\n        {pattern: 0, captures: [{name: 'variable.builtin', text: 'window'}]},\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 125
        },
        {
            "Name": "formatMatches",
            "Args": [
                "matches"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 125
        },
        {
            "Name": "describe",
            "Args": [
                "'.captures'",
                "() => {\n    it('returns all of the captures for the given query, in order', () => {\n      tree = parser.parse(`\n        a({\n          bc: function de() {\n            const fg = function hi() {}\n          },\n          jk: function lm() {\n            const no = function pq() {}\n          },\n        });\n      `);\n      query = JavaScript.query(`\n        (pair\n          key: _ @method.def\n          (function_expression\n            name: (identifier) @method.alias))\n\n        (variable_declarator\n          name: _ @function.def\n          value: (function_expression\n            name: (identifier) @function.alias))\n\n        \":\" @delimiter\n        \"=\" @operator\n      `);\n\n      const captures = query.captures(tree.rootNode);\n      assert.deepEqual(formatCaptures(captures), [\n        {name: 'method.def', text: 'bc'},\n        {name: 'delimiter', text: ':'},\n        {name: 'method.alias', text: 'de'},\n        {name: 'function.def', text: 'fg'},\n        {name: 'operator', text: '='},\n        {name: 'function.alias', text: 'hi'},\n        {name: 'method.def', text: 'jk'},\n        {name: 'delimiter', text: ':'},\n        {name: 'method.alias', text: 'lm'},\n        {name: 'function.def', text: 'no'},\n        {name: 'operator', text: '='},\n        {name: 'function.alias', text: 'pq'},\n      ]);\n    });\n\n    it('handles conditions that compare the text of capture to literal strings', () => {\n      tree = parser.parse(`\n        lambda\n        panda\n        load\n        toad\n        const ab = require('./ab');\n        new Cd(EF);\n      `);\n\n      query = JavaScript.query(`\n        ((identifier) @variable\n         (#not-match? @variable \"^(lambda|load)$\"))\n\n        ((identifier) @function.builtin\n         (#eq? @function.builtin \"require\"))\n\n        ((identifier) @constructor\n         (#match? @constructor \"^[A-Z]\"))\n\n        ((identifier) @constant\n         (#match? @constant \"^[A-Z]{2,}$\"))\n      `);\n\n      const captures = query.captures(tree.rootNode);\n      assert.deepEqual(formatCaptures(captures), [\n        {name: 'variable', text: 'panda'},\n        {name: 'variable', text: 'toad'},\n        {name: 'variable', text: 'ab'},\n        {name: 'variable', text: 'require'},\n        {name: 'function.builtin', text: 'require'},\n        {name: 'variable', text: 'Cd'},\n        {name: 'constructor', text: 'Cd'},\n        {name: 'variable', text: 'EF'},\n        {name: 'constructor', text: 'EF'},\n        {name: 'constant', text: 'EF'},\n      ]);\n    });\n\n    it('handles conditions that compare the text of capture to each other', () => {\n      tree = parser.parse(`\n        ab = abc + 1;\n        def = de + 1;\n        ghi = ghi + 1;\n      `);\n\n      query = JavaScript.query(`\n        (\n          (assignment_expression\n            left: (identifier) @id1\n            right: (binary_expression\n              left: (identifier) @id2))\n          (#eq? @id1 @id2)\n        )\n      `);\n\n      const captures = query.captures(tree.rootNode);\n      assert.deepEqual(formatCaptures(captures), [\n        {name: 'id1', text: 'ghi'},\n        {name: 'id2', text: 'ghi'},\n      ]);\n    });\n\n    it('handles patterns with properties', () => {\n      tree = parser.parse(`a(b.c);`);\n      query = JavaScript.query(`\n        ((call_expression (identifier) @func)\n         (#set! foo)\n         (#set! bar baz))\n\n        ((property_identifier) @prop\n         (#is? foo)\n         (#is-not? bar baz))\n      `);\n\n      const captures = query.captures(tree.rootNode);\n      assert.deepEqual(formatCaptures(captures), [\n        {name: 'func', text: 'a', setProperties: {foo: null, bar: 'baz'}},\n        {\n          name: 'prop',\n          text: 'c',\n          assertedProperties: {foo: null},\n          refutedProperties: {bar: 'baz'},\n        },\n      ]);\n      assert.ok(!query.didExceedMatchLimit());\n    });\n\n    it('detects queries with too many permutations to track', () => {\n      tree = parser.parse(`\n        [\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n        ];\n      `);\n\n      query = JavaScript.query(`\n        (array (identifier) @pre (identifier) @post)\n      `);\n\n      query.captures(tree.rootNode, {matchLimit: 32});\n      assert.ok(query.didExceedMatchLimit());\n    });\n\n    it('handles quantified captures properly', () => {\n      let captures;\n\n      tree = parser.parse(`\n        /// foo\n        /// bar\n        /// baz\n      `);\n\n      query = JavaScript.query(`\n        (\n          (comment)+ @foo\n          (#any-eq? @foo \"/// foo\")\n        )\n      `);\n\n      const expectCount = (tree, queryText, expectedCount) => {\n        query = JavaScript.query(queryText);\n        captures = query.captures(tree.rootNode);\n        assert.equal(captures.length, expectedCount);\n      };\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-eq? @foo \"/// foo\"))`,\n        3,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#eq? @foo \"/// foo\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-not-eq? @foo \"/// foo\"))`,\n        3,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#not-eq? @foo \"/// foo\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#match? @foo \"^/// foo\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-match? @foo \"^/// foo\"))`,\n        3,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#not-match? @foo \"^/// foo\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#not-match? @foo \"fsdfsdafdfs\"))`,\n        3,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-not-match? @foo \"^///\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-not-match? @foo \"^/// foo\"))`,\n        3,\n      );\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 131
        },
        {
            "Name": "it",
            "Args": [
                "'returns all of the captures for the given query, in order'",
                "() => {\n      tree = parser.parse(`\n        a({\n          bc: function de() {\n            const fg = function hi() {}\n          },\n          jk: function lm() {\n            const no = function pq() {}\n          },\n        });\n      `);\n      query = JavaScript.query(`\n        (pair\n          key: _ @method.def\n          (function_expression\n            name: (identifier) @method.alias))\n\n        (variable_declarator\n          name: _ @function.def\n          value: (function_expression\n            name: (identifier) @function.alias))\n\n        \":\" @delimiter\n        \"=\" @operator\n      `);\n\n      const captures = query.captures(tree.rootNode);\n      assert.deepEqual(formatCaptures(captures), [\n        {name: 'method.def', text: 'bc'},\n        {name: 'delimiter', text: ':'},\n        {name: 'method.alias', text: 'de'},\n        {name: 'function.def', text: 'fg'},\n        {name: 'operator', text: '='},\n        {name: 'function.alias', text: 'hi'},\n        {name: 'method.def', text: 'jk'},\n        {name: 'delimiter', text: ':'},\n        {name: 'method.alias', text: 'lm'},\n        {name: 'function.def', text: 'no'},\n        {name: 'operator', text: '='},\n        {name: 'function.alias', text: 'pq'},\n      ]);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 132
        },
        {
            "Name": "parser.parse",
            "Args": [
                "`\n        a({\n          bc: function de() {\n            const fg = function hi() {}\n          },\n          jk: function lm() {\n            const no = function pq() {}\n          },\n        });\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 133
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "`\n        (pair\n          key: _ @method.def\n          (function_expression\n            name: (identifier) @method.alias))\n\n        (variable_declarator\n          name: _ @function.def\n          value: (function_expression\n            name: (identifier) @function.alias))\n\n        \":\" @delimiter\n        \"=\" @operator\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 143
        },
        {
            "Name": "query.captures",
            "Args": [
                "tree.rootNode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 158
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "formatCaptures(captures)",
                "[\n        {name: 'method.def', text: 'bc'},\n        {name: 'delimiter', text: ':'},\n        {name: 'method.alias', text: 'de'},\n        {name: 'function.def', text: 'fg'},\n        {name: 'operator', text: '='},\n        {name: 'function.alias', text: 'hi'},\n        {name: 'method.def', text: 'jk'},\n        {name: 'delimiter', text: ':'},\n        {name: 'method.alias', text: 'lm'},\n        {name: 'function.def', text: 'no'},\n        {name: 'operator', text: '='},\n        {name: 'function.alias', text: 'pq'},\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 159
        },
        {
            "Name": "formatCaptures",
            "Args": [
                "captures"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 159
        },
        {
            "Name": "it",
            "Args": [
                "'handles conditions that compare the text of capture to literal strings'",
                "() => {\n      tree = parser.parse(`\n        lambda\n        panda\n        load\n        toad\n        const ab = require('./ab');\n        new Cd(EF);\n      `);\n\n      query = JavaScript.query(`\n        ((identifier) @variable\n         (#not-match? @variable \"^(lambda|load)$\"))\n\n        ((identifier) @function.builtin\n         (#eq? @function.builtin \"require\"))\n\n        ((identifier) @constructor\n         (#match? @constructor \"^[A-Z]\"))\n\n        ((identifier) @constant\n         (#match? @constant \"^[A-Z]{2,}$\"))\n      `);\n\n      const captures = query.captures(tree.rootNode);\n      assert.deepEqual(formatCaptures(captures), [\n        {name: 'variable', text: 'panda'},\n        {name: 'variable', text: 'toad'},\n        {name: 'variable', text: 'ab'},\n        {name: 'variable', text: 'require'},\n        {name: 'function.builtin', text: 'require'},\n        {name: 'variable', text: 'Cd'},\n        {name: 'constructor', text: 'Cd'},\n        {name: 'variable', text: 'EF'},\n        {name: 'constructor', text: 'EF'},\n        {name: 'constant', text: 'EF'},\n      ]);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 175
        },
        {
            "Name": "parser.parse",
            "Args": [
                "`\n        lambda\n        panda\n        load\n        toad\n        const ab = require('./ab');\n        new Cd(EF);\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 176
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "`\n        ((identifier) @variable\n         (#not-match? @variable \"^(lambda|load)$\"))\n\n        ((identifier) @function.builtin\n         (#eq? @function.builtin \"require\"))\n\n        ((identifier) @constructor\n         (#match? @constructor \"^[A-Z]\"))\n\n        ((identifier) @constant\n         (#match? @constant \"^[A-Z]{2,}$\"))\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 185
        },
        {
            "Name": "query.captures",
            "Args": [
                "tree.rootNode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 199
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "formatCaptures(captures)",
                "[\n        {name: 'variable', text: 'panda'},\n        {name: 'variable', text: 'toad'},\n        {name: 'variable', text: 'ab'},\n        {name: 'variable', text: 'require'},\n        {name: 'function.builtin', text: 'require'},\n        {name: 'variable', text: 'Cd'},\n        {name: 'constructor', text: 'Cd'},\n        {name: 'variable', text: 'EF'},\n        {name: 'constructor', text: 'EF'},\n        {name: 'constant', text: 'EF'},\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 200
        },
        {
            "Name": "formatCaptures",
            "Args": [
                "captures"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 200
        },
        {
            "Name": "it",
            "Args": [
                "'handles conditions that compare the text of capture to each other'",
                "() => {\n      tree = parser.parse(`\n        ab = abc + 1;\n        def = de + 1;\n        ghi = ghi + 1;\n      `);\n\n      query = JavaScript.query(`\n        (\n          (assignment_expression\n            left: (identifier) @id1\n            right: (binary_expression\n              left: (identifier) @id2))\n          (#eq? @id1 @id2)\n        )\n      `);\n\n      const captures = query.captures(tree.rootNode);\n      assert.deepEqual(formatCaptures(captures), [\n        {name: 'id1', text: 'ghi'},\n        {name: 'id2', text: 'ghi'},\n      ]);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 214
        },
        {
            "Name": "parser.parse",
            "Args": [
                "`\n        ab = abc + 1;\n        def = de + 1;\n        ghi = ghi + 1;\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 215
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "`\n        (\n          (assignment_expression\n            left: (identifier) @id1\n            right: (binary_expression\n              left: (identifier) @id2))\n          (#eq? @id1 @id2)\n        )\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 221
        },
        {
            "Name": "query.captures",
            "Args": [
                "tree.rootNode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 231
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "formatCaptures(captures)",
                "[\n        {name: 'id1', text: 'ghi'},\n        {name: 'id2', text: 'ghi'},\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 232
        },
        {
            "Name": "formatCaptures",
            "Args": [
                "captures"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 232
        },
        {
            "Name": "it",
            "Args": [
                "'handles patterns with properties'",
                "() => {\n      tree = parser.parse(`a(b.c);`);\n      query = JavaScript.query(`\n        ((call_expression (identifier) @func)\n         (#set! foo)\n         (#set! bar baz))\n\n        ((property_identifier) @prop\n         (#is? foo)\n         (#is-not? bar baz))\n      `);\n\n      const captures = query.captures(tree.rootNode);\n      assert.deepEqual(formatCaptures(captures), [\n        {name: 'func', text: 'a', setProperties: {foo: null, bar: 'baz'}},\n        {\n          name: 'prop',\n          text: 'c',\n          assertedProperties: {foo: null},\n          refutedProperties: {bar: 'baz'},\n        },\n      ]);\n      assert.ok(!query.didExceedMatchLimit());\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 238
        },
        {
            "Name": "parser.parse",
            "Args": [
                "`a(b.c);`"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 239
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "`\n        ((call_expression (identifier) @func)\n         (#set! foo)\n         (#set! bar baz))\n\n        ((property_identifier) @prop\n         (#is? foo)\n         (#is-not? bar baz))\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 240
        },
        {
            "Name": "query.captures",
            "Args": [
                "tree.rootNode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 250
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "formatCaptures(captures)",
                "[\n        {name: 'func', text: 'a', setProperties: {foo: null, bar: 'baz'}},\n        {\n          name: 'prop',\n          text: 'c',\n          assertedProperties: {foo: null},\n          refutedProperties: {bar: 'baz'},\n        },\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 251
        },
        {
            "Name": "formatCaptures",
            "Args": [
                "captures"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 251
        },
        {
            "Name": "assert.ok",
            "Args": [
                "!query.didExceedMatchLimit()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 260
        },
        {
            "Name": "query.didExceedMatchLimit",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 260
        },
        {
            "Name": "it",
            "Args": [
                "'detects queries with too many permutations to track'",
                "() => {\n      tree = parser.parse(`\n        [\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n        ];\n      `);\n\n      query = JavaScript.query(`\n        (array (identifier) @pre (identifier) @post)\n      `);\n\n      query.captures(tree.rootNode, {matchLimit: 32});\n      assert.ok(query.didExceedMatchLimit());\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 263
        },
        {
            "Name": "parser.parse",
            "Args": [
                "`\n        [\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n          hello, hello, hello, hello, hello, hello, hello, hello, hello, hello,\n        ];\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 264
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "`\n        (array (identifier) @pre (identifier) @post)\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 274
        },
        {
            "Name": "query.captures",
            "Args": [
                "tree.rootNode",
                "{matchLimit: 32}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 278
        },
        {
            "Name": "assert.ok",
            "Args": [
                "query.didExceedMatchLimit()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 279
        },
        {
            "Name": "query.didExceedMatchLimit",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 279
        },
        {
            "Name": "it",
            "Args": [
                "'handles quantified captures properly'",
                "() => {\n      let captures;\n\n      tree = parser.parse(`\n        /// foo\n        /// bar\n        /// baz\n      `);\n\n      query = JavaScript.query(`\n        (\n          (comment)+ @foo\n          (#any-eq? @foo \"/// foo\")\n        )\n      `);\n\n      const expectCount = (tree, queryText, expectedCount) => {\n        query = JavaScript.query(queryText);\n        captures = query.captures(tree.rootNode);\n        assert.equal(captures.length, expectedCount);\n      };\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-eq? @foo \"/// foo\"))`,\n        3,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#eq? @foo \"/// foo\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-not-eq? @foo \"/// foo\"))`,\n        3,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#not-eq? @foo \"/// foo\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#match? @foo \"^/// foo\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-match? @foo \"^/// foo\"))`,\n        3,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#not-match? @foo \"^/// foo\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#not-match? @foo \"fsdfsdafdfs\"))`,\n        3,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-not-match? @foo \"^///\"))`,\n        0,\n      );\n\n      expectCount(\n        tree,\n        `((comment)+ @foo (#any-not-match? @foo \"^/// foo\"))`,\n        3,\n      );\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 282
        },
        {
            "Name": "parser.parse",
            "Args": [
                "`\n        /// foo\n        /// bar\n        /// baz\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 285
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "`\n        (\n          (comment)+ @foo\n          (#any-eq? @foo \"/// foo\")\n        )\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 291
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "queryText"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 299
        },
        {
            "Name": "query.captures",
            "Args": [
                "tree.rootNode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 300
        },
        {
            "Name": "assert.equal",
            "Args": [
                "captures.length",
                "expectedCount"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 301
        },
        {
            "Name": "expectCount",
            "Args": [
                "tree",
                "`((comment)+ @foo (#any-eq? @foo \"/// foo\"))`",
                "3"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 304
        },
        {
            "Name": "expectCount",
            "Args": [
                "tree",
                "`((comment)+ @foo (#eq? @foo \"/// foo\"))`",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 310
        },
        {
            "Name": "expectCount",
            "Args": [
                "tree",
                "`((comment)+ @foo (#any-not-eq? @foo \"/// foo\"))`",
                "3"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 316
        },
        {
            "Name": "expectCount",
            "Args": [
                "tree",
                "`((comment)+ @foo (#not-eq? @foo \"/// foo\"))`",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 322
        },
        {
            "Name": "expectCount",
            "Args": [
                "tree",
                "`((comment)+ @foo (#match? @foo \"^/// foo\"))`",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 328
        },
        {
            "Name": "expectCount",
            "Args": [
                "tree",
                "`((comment)+ @foo (#any-match? @foo \"^/// foo\"))`",
                "3"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 334
        },
        {
            "Name": "expectCount",
            "Args": [
                "tree",
                "`((comment)+ @foo (#not-match? @foo \"^/// foo\"))`",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 340
        },
        {
            "Name": "expectCount",
            "Args": [
                "tree",
                "`((comment)+ @foo (#not-match? @foo \"fsdfsdafdfs\"))`",
                "3"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 346
        },
        {
            "Name": "expectCount",
            "Args": [
                "tree",
                "`((comment)+ @foo (#any-not-match? @foo \"^///\"))`",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 352
        },
        {
            "Name": "expectCount",
            "Args": [
                "tree",
                "`((comment)+ @foo (#any-not-match? @foo \"^/// foo\"))`",
                "3"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 358
        },
        {
            "Name": "describe",
            "Args": [
                "'.predicatesForPattern(index)'",
                "() => {\n    it('returns all of the predicates as objects', () => {\n      query = JavaScript.query(`\n        (\n          (binary_expression\n            left: (identifier) @a\n            right: (identifier) @b)\n          (#something? @a @b)\n          (#match? @a \"c\")\n          (#something-else? @a \"A\" @b \"B\")\n        )\n\n        ((identifier) @c\n         (#hello! @c))\n\n        \"if\" @d\n      `);\n\n      assert.deepEqual(query.predicatesForPattern(0), [\n        {\n          operator: 'something?',\n          operands: [\n            {type: 'capture', name: 'a'},\n            {type: 'capture', name: 'b'},\n          ],\n        },\n        {\n          operator: 'something-else?',\n          operands: [\n            {type: 'capture', name: 'a'},\n            {type: 'string', value: 'A'},\n            {type: 'capture', name: 'b'},\n            {type: 'string', value: 'B'},\n          ],\n        },\n      ]);\n      assert.deepEqual(query.predicatesForPattern(1), [\n        {\n          operator: 'hello!',\n          operands: [{type: 'capture', name: 'c'}],\n        },\n      ]);\n      assert.deepEqual(query.predicatesForPattern(2), []);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 366
        },
        {
            "Name": "it",
            "Args": [
                "'returns all of the predicates as objects'",
                "() => {\n      query = JavaScript.query(`\n        (\n          (binary_expression\n            left: (identifier) @a\n            right: (identifier) @b)\n          (#something? @a @b)\n          (#match? @a \"c\")\n          (#something-else? @a \"A\" @b \"B\")\n        )\n\n        ((identifier) @c\n         (#hello! @c))\n\n        \"if\" @d\n      `);\n\n      assert.deepEqual(query.predicatesForPattern(0), [\n        {\n          operator: 'something?',\n          operands: [\n            {type: 'capture', name: 'a'},\n            {type: 'capture', name: 'b'},\n          ],\n        },\n        {\n          operator: 'something-else?',\n          operands: [\n            {type: 'capture', name: 'a'},\n            {type: 'string', value: 'A'},\n            {type: 'capture', name: 'b'},\n            {type: 'string', value: 'B'},\n          ],\n        },\n      ]);\n      assert.deepEqual(query.predicatesForPattern(1), [\n        {\n          operator: 'hello!',\n          operands: [{type: 'capture', name: 'c'}],\n        },\n      ]);\n      assert.deepEqual(query.predicatesForPattern(2), []);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 367
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "`\n        (\n          (binary_expression\n            left: (identifier) @a\n            right: (identifier) @b)\n          (#something? @a @b)\n          (#match? @a \"c\")\n          (#something-else? @a \"A\" @b \"B\")\n        )\n\n        ((identifier) @c\n         (#hello! @c))\n\n        \"if\" @d\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 368
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "query.predicatesForPattern(0)",
                "[\n        {\n          operator: 'something?',\n          operands: [\n            {type: 'capture', name: 'a'},\n            {type: 'capture', name: 'b'},\n          ],\n        },\n        {\n          operator: 'something-else?',\n          operands: [\n            {type: 'capture', name: 'a'},\n            {type: 'string', value: 'A'},\n            {type: 'capture', name: 'b'},\n            {type: 'string', value: 'B'},\n          ],\n        },\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 384
        },
        {
            "Name": "query.predicatesForPattern",
            "Args": [
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 384
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "query.predicatesForPattern(1)",
                "[\n        {\n          operator: 'hello!',\n          operands: [{type: 'capture', name: 'c'}],\n        },\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 402
        },
        {
            "Name": "query.predicatesForPattern",
            "Args": [
                "1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 402
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "query.predicatesForPattern(2)",
                "[]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 408
        },
        {
            "Name": "query.predicatesForPattern",
            "Args": [
                "2"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 408
        },
        {
            "Name": "describe",
            "Args": [
                "'.disableCapture'",
                "() => {\n    it('disables a capture', () => {\n      const query = JavaScript.query(`\n        (function_declaration\n          (identifier) @name1 @name2 @name3\n          (statement_block) @body1 @body2)\n      `);\n\n      const source = 'function foo() { return 1; }';\n      const tree = parser.parse(source);\n\n      let matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {\n          pattern: 0,\n          captures: [\n            {name: 'name1', text: 'foo'},\n            {name: 'name2', text: 'foo'},\n            {name: 'name3', text: 'foo'},\n            {name: 'body1', text: '{ return 1; }'},\n            {name: 'body2', text: '{ return 1; }'},\n          ],\n        },\n      ]);\n\n      // disabling captures still works when there are multiple captures on a\n      // single node.\n      query.disableCapture('name2');\n      matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {\n          pattern: 0,\n          captures: [\n            {name: 'name1', text: 'foo'},\n            {name: 'name3', text: 'foo'},\n            {name: 'body1', text: '{ return 1; }'},\n            {name: 'body2', text: '{ return 1; }'},\n          ],\n        },\n      ]);\n    });\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 412
        },
        {
            "Name": "it",
            "Args": [
                "'disables a capture'",
                "() => {\n      const query = JavaScript.query(`\n        (function_declaration\n          (identifier) @name1 @name2 @name3\n          (statement_block) @body1 @body2)\n      `);\n\n      const source = 'function foo() { return 1; }';\n      const tree = parser.parse(source);\n\n      let matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {\n          pattern: 0,\n          captures: [\n            {name: 'name1', text: 'foo'},\n            {name: 'name2', text: 'foo'},\n            {name: 'name3', text: 'foo'},\n            {name: 'body1', text: '{ return 1; }'},\n            {name: 'body2', text: '{ return 1; }'},\n          ],\n        },\n      ]);\n\n      // disabling captures still works when there are multiple captures on a\n      // single node.\n      query.disableCapture('name2');\n      matches = query.matches(tree.rootNode);\n      assert.deepEqual(formatMatches(matches), [\n        {\n          pattern: 0,\n          captures: [\n            {name: 'name1', text: 'foo'},\n            {name: 'name3', text: 'foo'},\n            {name: 'body1', text: '{ return 1; }'},\n            {name: 'body2', text: '{ return 1; }'},\n          ],\n        },\n      ]);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 413
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "`\n        (function_declaration\n          (identifier) @name1 @name2 @name3\n          (statement_block) @body1 @body2)\n      `"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 414
        },
        {
            "Name": "parser.parse",
            "Args": [
                "source"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 421
        },
        {
            "Name": "query.matches",
            "Args": [
                "tree.rootNode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 423
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "formatMatches(matches)",
                "[\n        {\n          pattern: 0,\n          captures: [\n            {name: 'name1', text: 'foo'},\n            {name: 'name2', text: 'foo'},\n            {name: 'name3', text: 'foo'},\n            {name: 'body1', text: '{ return 1; }'},\n            {name: 'body2', text: '{ return 1; }'},\n          ],\n        },\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 424
        },
        {
            "Name": "formatMatches",
            "Args": [
                "matches"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 424
        },
        {
            "Name": "query.disableCapture",
            "Args": [
                "'name2'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 439
        },
        {
            "Name": "query.matches",
            "Args": [
                "tree.rootNode"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 440
        },
        {
            "Name": "assert.deepEqual",
            "Args": [
                "formatMatches(matches)",
                "[\n        {\n          pattern: 0,\n          captures: [\n            {name: 'name1', text: 'foo'},\n            {name: 'name3', text: 'foo'},\n            {name: 'body1', text: '{ return 1; }'},\n            {name: 'body2', text: '{ return 1; }'},\n          ],\n        },\n      ]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 441
        },
        {
            "Name": "formatMatches",
            "Args": [
                "matches"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 441
        },
        {
            "Name": "describe",
            "Args": [
                "'Set a timeout'",
                "() =>\n    it('returns less than the expected matches', () => {\n      tree = parser.parse('function foo() while (true) { } }\\n'.repeat(1000));\n      query = JavaScript.query('(function_declaration name: (identifier) @function)');\n      const matches = query.matches(tree.rootNode, { timeoutMicros: 1000 });\n      assert.isBelow(matches.length, 1000);\n      const matches2 = query.matches(tree.rootNode, { timeoutMicros: 0 });\n      assert.equal(matches2.length, 1000);\n    })"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 455
        },
        {
            "Name": "it",
            "Args": [
                "'returns less than the expected matches'",
                "() => {\n      tree = parser.parse('function foo() while (true) { } }\\n'.repeat(1000));\n      query = JavaScript.query('(function_declaration name: (identifier) @function)');\n      const matches = query.matches(tree.rootNode, { timeoutMicros: 1000 });\n      assert.isBelow(matches.length, 1000);\n      const matches2 = query.matches(tree.rootNode, { timeoutMicros: 0 });\n      assert.equal(matches2.length, 1000);\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 456
        },
        {
            "Name": "parser.parse",
            "Args": [
                "'function foo() while (true) { } }\\n'.repeat(1000)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 457
        },
        {
            "Name": "'function foo() while (true) { } }\\n'.repeat",
            "Args": [
                "1000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 457
        },
        {
            "Name": "JavaScript.query",
            "Args": [
                "'(function_declaration name: (identifier) @function)'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 458
        },
        {
            "Name": "query.matches",
            "Args": [
                "tree.rootNode",
                "{ timeoutMicros: 1000 }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 459
        },
        {
            "Name": "assert.isBelow",
            "Args": [
                "matches.length",
                "1000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 460
        },
        {
            "Name": "query.matches",
            "Args": [
                "tree.rootNode",
                "{ timeoutMicros: 0 }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 461
        },
        {
            "Name": "assert.equal",
            "Args": [
                "matches2.length",
                "1000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 462
        },
        {
            "Name": "matches.map",
            "Args": [
                "({pattern, captures}) => ({\n    pattern,\n    captures: formatCaptures(captures),\n  })"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 468
        },
        {
            "Name": "formatCaptures",
            "Args": [
                "captures"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 470
        },
        {
            "Name": "captures.map",
            "Args": [
                "(c) => {\n    const node = c.node;\n    delete c.node;\n    c.text = node.text;\n    return c;\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/lib/binding_web/test/query-test.js",
            "Line": 475
        },
        {
            "Name": "dummy.async () => {\n  const CAPTURE_REGEX = /@\\s*([\\w._-]+)/g;\n  const COLORS_BY_INDEX = [\n    'blue',\n    'chocolate',\n    'darkblue',\n    'darkcyan',\n    'darkgreen',\n    'darkred',\n    'darkslategray',\n    'dimgray',\n    'green',\n    'indigo',\n    'navy',\n    'red',\n    'sienna',\n  ];\n\n  const codeInput = document.getElementById('code-input');\n  const languageSelect = document.getElementById('language-select');\n  const loggingCheckbox = document.getElementById('logging-checkbox');\n  const outputContainer = document.getElementById('output-container');\n  const outputContainerScroll = document.getElementById('output-container-scroll');\n  const playgroundContainer = document.getElementById('playground-container');\n  const queryCheckbox = document.getElementById('query-checkbox');\n  const queryContainer = document.getElementById('query-container');\n  const queryInput = document.getElementById('query-input');\n  const updateTimeSpan = document.getElementById('update-time');\n  const languagesByName = {};\n\n  loadState();\n\n  await TreeSitter.init();\n\n  const parser = new TreeSitter();\n  const codeEditor = CodeMirror.fromTextArea(codeInput, {\n    lineNumbers: true,\n    showCursorWhenSelecting: true\n  });\n\n  const queryEditor = CodeMirror.fromTextArea(queryInput, {\n    lineNumbers: true,\n    showCursorWhenSelecting: true\n  });\n\n  const cluster = new Clusterize({\n    rows: [],\n    noDataText: null,\n    contentElem: outputContainer,\n    scrollElem: outputContainerScroll\n  });\n  const renderTreeOnCodeChange = debounce(renderTree, 50);\n  const saveStateOnChange = debounce(saveState, 2000);\n  const runTreeQueryOnChange = debounce(runTreeQuery, 50);\n\n  let languageName = languageSelect.value;\n  let treeRows = null;\n  let treeRowHighlightedIndex = -1;\n  let parseCount = 0;\n  let isRendering = 0;\n  let query;\n\n  codeEditor.on('changes', handleCodeChange);\n  codeEditor.on('viewportChange', runTreeQueryOnChange);\n  codeEditor.on('cursorActivity', debounce(handleCursorMovement, 150));\n  queryEditor.on('changes', debounce(handleQueryChange, 150));\n\n  loggingCheckbox.addEventListener('change', handleLoggingChange);\n  queryCheckbox.addEventListener('change', handleQueryEnableChange);\n  languageSelect.addEventListener('change', handleLanguageChange);\n  outputContainer.addEventListener('click', handleTreeClick);\n\n  handleQueryEnableChange();\n  await handleLanguageChange()\n\n  playgroundContainer.style.visibility = 'visible';\n\n  async function handleLanguageChange() {\n    const newLanguageName = languageSelect.value;\n    if (!languagesByName[newLanguageName]) {\n      const url = `${LANGUAGE_BASE_URL}/tree-sitter-${newLanguageName}.wasm`\n      languageSelect.disabled = true;\n      try {\n        languagesByName[newLanguageName] = await TreeSitter.Language.load(url);\n      } catch (e) {\n        console.error(e);\n        languageSelect.value = languageName;\n        return\n      } finally {\n        languageSelect.disabled = false;\n      }\n    }\n\n    tree = null;\n    languageName = newLanguageName;\n    parser.setLanguage(languagesByName[newLanguageName]);\n    handleCodeChange();\n    handleQueryChange();\n  }\n\n  async function handleCodeChange(_editor, changes) {\n    const newText = `${codeEditor.getValue()}\\n`;\n    const edits = tree && changes && changes.map(treeEditForEditorChange);\n\n    const start = performance.now();\n    if (edits) {\n      for (const edit of edits) {\n        tree.edit(edit);\n      }\n    }\n    const newTree = parser.parse(newText, tree);\n    const duration = (performance.now() - start).toFixed(1);\n\n    updateTimeSpan.innerText = `${duration} ms`;\n    if (tree) tree.delete();\n    tree = newTree;\n    parseCount++;\n    renderTreeOnCodeChange();\n    runTreeQueryOnChange();\n    saveStateOnChange();\n  }\n\n  async function renderTree() {\n    isRendering++;\n    const cursor = tree.walk();\n\n    const currentRenderCount = parseCount;\n    let row = '';\n    const rows = [];\n    let finishedRow = false;\n    let visitedChildren = false;\n    let indentLevel = 0;\n\n    for (let i = 0;; i++) {\n      if (i > 0 && i % 10000 === 0) {\n        await new Promise(r => setTimeout(r, 0));\n        if (parseCount !== currentRenderCount) {\n          cursor.delete();\n          isRendering--;\n          return;\n        }\n      }\n\n      let displayName;\n      if (cursor.nodeIsMissing) {\n        displayName = `MISSING ${cursor.nodeType}`\n      } else if (cursor.nodeIsNamed) {\n        displayName = cursor.nodeType;\n      }\n\n      if (visitedChildren) {\n        if (displayName) {\n          finishedRow = true;\n        }\n\n        if (cursor.gotoNextSibling()) {\n          visitedChildren = false;\n        } else if (cursor.gotoParent()) {\n          visitedChildren = true;\n          indentLevel--;\n        } else {\n          break;\n        }\n      } else {\n        if (displayName) {\n          if (finishedRow) {\n            row += '</div>';\n            rows.push(row);\n            finishedRow = false;\n          }\n          const start = cursor.startPosition;\n          const end = cursor.endPosition;\n          const id = cursor.nodeId;\n          let fieldName = cursor.currentFieldName;\n          if (fieldName) {\n            fieldName += ': ';\n          } else {\n            fieldName = '';\n          }\n          row = `<div>${'  '.repeat(indentLevel)}${fieldName}<a class='plain' href=\"#\" data-id=${id} data-range=\"${start.row},${start.column},${end.row},${end.column}\">${displayName}</a> [${start.row}, ${start.column}] - [${end.row}, ${end.column}]`;\n          finishedRow = true;\n        }\n\n        if (cursor.gotoFirstChild()) {\n          visitedChildren = false;\n          indentLevel++;\n        } else {\n          visitedChildren = true;\n        }\n      }\n    }\n    if (finishedRow) {\n      row += '</div>';\n      rows.push(row);\n    }\n\n    cursor.delete();\n    cluster.update(rows);\n    treeRows = rows;\n    isRendering--;\n    handleCursorMovement();\n  }\n\n  function runTreeQuery(_, startRow, endRow) {\n    if (endRow == null) {\n      const viewport = codeEditor.getViewport();\n      startRow = viewport.from;\n      endRow = viewport.to;\n    }\n\n    codeEditor.operation(() => {\n      const marks = codeEditor.getAllMarks();\n      marks.forEach(m => m.clear());\n\n      if (tree && query) {\n        const captures = query.captures(\n          tree.rootNode,\n          {row: startRow, column: 0},\n          {row: endRow, column: 0},\n        );\n        let lastNodeId;\n        for (const {name, node} of captures) {\n          if (node.id === lastNodeId) continue;\n          lastNodeId = node.id;\n          const {startPosition, endPosition} = node;\n          codeEditor.markText(\n            {line: startPosition.row, ch: startPosition.column},\n            {line: endPosition.row, ch: endPosition.column},\n            {\n              inclusiveLeft: true,\n              inclusiveRight: true,\n              css: `color: ${colorForCaptureName(name)}`\n            }\n          );\n        }\n      }\n    });\n  }\n\n  function handleQueryChange() {\n    if (query) {\n      query.delete();\n      query.deleted = true;\n      query = null;\n    }\n\n    queryEditor.operation(() => {\n      queryEditor.getAllMarks().forEach(m => m.clear());\n      if (!queryCheckbox.checked) return;\n\n      const queryText = queryEditor.getValue();\n\n      try {\n        query = parser.getLanguage().query(queryText);\n        let match;\n\n        let row = 0;\n        queryEditor.eachLine((line) => {\n          while (match = CAPTURE_REGEX.exec(line.text)) {\n            queryEditor.markText(\n              {line: row, ch: match.index},\n              {line: row, ch: match.index + match[0].length},\n              {\n                inclusiveLeft: true,\n                inclusiveRight: true,\n                css: `color: ${colorForCaptureName(match[1])}`\n              }\n            );\n          }\n          row++;\n        });\n      } catch (error) {\n        const startPosition = queryEditor.posFromIndex(error.index);\n        const endPosition = {\n          line: startPosition.line,\n          ch: startPosition.ch + (error.length || Infinity)\n        };\n\n        if (error.index === queryText.length) {\n          if (startPosition.ch > 0) {\n            startPosition.ch--;\n          } else if (startPosition.row > 0) {\n            startPosition.row--;\n            startPosition.column = Infinity;\n          }\n        }\n\n        queryEditor.markText(\n          startPosition,\n          endPosition,\n          {\n            className: 'query-error',\n            inclusiveLeft: true,\n            inclusiveRight: true,\n            attributes: {title: error.message}\n          }\n        );\n      }\n    });\n\n    runTreeQuery();\n    saveQueryState();\n  }\n\n  function handleCursorMovement() {\n    if (isRendering) return;\n\n    const selection = codeEditor.getDoc().listSelections()[0];\n    let start = {row: selection.anchor.line, column: selection.anchor.ch};\n    let end = {row: selection.head.line, column: selection.head.ch};\n    if (\n      start.row > end.row ||\n      (\n        start.row === end.row &&\n        start.column > end.column\n      )\n    ) {\n      const swap = end;\n      end = start;\n      start = swap;\n    }\n    const node = tree.rootNode.namedDescendantForPosition(start, end);\n    if (treeRows) {\n      if (treeRowHighlightedIndex !== -1) {\n        const row = treeRows[treeRowHighlightedIndex];\n        if (row) treeRows[treeRowHighlightedIndex] = row.replace('highlighted', 'plain');\n      }\n      treeRowHighlightedIndex = treeRows.findIndex(row => row.includes(`data-id=${node.id}`));\n      if (treeRowHighlightedIndex !== -1) {\n        const row = treeRows[treeRowHighlightedIndex];\n        if (row) treeRows[treeRowHighlightedIndex] = row.replace('plain', 'highlighted');\n      }\n      cluster.update(treeRows);\n      const lineHeight = cluster.options.item_height;\n      const scrollTop = outputContainerScroll.scrollTop;\n      const containerHeight = outputContainerScroll.clientHeight;\n      const offset = treeRowHighlightedIndex * lineHeight;\n      if (scrollTop > offset - 20) {\n        $(outputContainerScroll).animate({scrollTop: offset - 20}, 150);\n      } else if (scrollTop < offset + lineHeight + 40 - containerHeight) {\n        $(outputContainerScroll).animate({scrollTop: offset - containerHeight + 40}, 150);\n      }\n    }\n  }\n\n  function handleTreeClick(event) {\n    if (event.target.tagName === 'A') {\n      event.preventDefault();\n      const [startRow, startColumn, endRow, endColumn] = event\n        .target\n        .dataset\n        .range\n        .split(',')\n        .map(n => parseInt(n));\n      codeEditor.focus();\n      codeEditor.setSelection(\n        {line: startRow, ch: startColumn},\n        {line: endRow, ch: endColumn}\n      );\n    }\n  }\n\n  function handleLoggingChange() {\n    if (loggingCheckbox.checked) {\n      parser.setLogger((message, lexing) => {\n        if (lexing) {\n          console.log(\"  \", message)\n        } else {\n          console.log(message)\n        }\n      });\n    } else {\n      parser.setLogger(null);\n    }\n  }\n\n  function handleQueryEnableChange() {\n    if (queryCheckbox.checked) {\n      queryContainer.style.visibility = '';\n      queryContainer.style.position = '';\n    } else {\n      queryContainer.style.visibility = 'hidden';\n      queryContainer.style.position = 'absolute';\n    }\n    handleQueryChange();\n  }\n\n  function treeEditForEditorChange(change) {\n    const oldLineCount = change.removed.length;\n    const newLineCount = change.text.length;\n    const lastLineLength = change.text[newLineCount - 1].length;\n\n    const startPosition = {row: change.from.line, column: change.from.ch};\n    const oldEndPosition = {row: change.to.line, column: change.to.ch};\n    const newEndPosition = {\n      row: startPosition.row + newLineCount - 1,\n      column: newLineCount === 1\n        ? startPosition.column + lastLineLength\n        : lastLineLength\n    };\n\n    const startIndex = codeEditor.indexFromPos(change.from);\n    let newEndIndex = startIndex + newLineCount - 1;\n    let oldEndIndex = startIndex + oldLineCount - 1;\n    for (let i = 0; i < newLineCount; i++) newEndIndex += change.text[i].length;\n    for (let i = 0; i < oldLineCount; i++) oldEndIndex += change.removed[i].length;\n\n    return {\n      startIndex, oldEndIndex, newEndIndex,\n      startPosition, oldEndPosition, newEndPosition\n    };\n  }\n\n  function colorForCaptureName(capture) {\n    const id = query.captureNames.indexOf(capture);\n    return COLORS_BY_INDEX[id % COLORS_BY_INDEX.length];\n  }\n\n  function loadState() {\n    const language = localStorage.getItem(\"language\");\n    const sourceCode = localStorage.getItem(\"sourceCode\");\n    const query = localStorage.getItem(\"query\");\n    const queryEnabled = localStorage.getItem(\"queryEnabled\");\n    if (language != null && sourceCode != null && query != null) {\n      queryInput.value = query;\n      codeInput.value = sourceCode;\n      languageSelect.value = language;\n      queryCheckbox.checked = (queryEnabled === 'true');\n    }\n  }\n\n  function saveState() {\n    localStorage.setItem(\"language\", languageSelect.value);\n    localStorage.setItem(\"sourceCode\", codeEditor.getValue());\n    saveQueryState();\n  }\n\n  function saveQueryState() {\n    localStorage.setItem(\"queryEnabled\", queryCheckbox.checked);\n    localStorage.setItem(\"query\", queryEditor.getValue());\n  }\n\n  function debounce(func, wait, immediate) {\n    let timeout;\n    return function() {\n      const context = this, args = arguments;\n      const later = function() {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n}",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 3
        },
        {
            "Name": "document.getElementById",
            "Args": [
                "'code-input'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 21
        },
        {
            "Name": "document.getElementById",
            "Args": [
                "'language-select'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 22
        },
        {
            "Name": "document.getElementById",
            "Args": [
                "'logging-checkbox'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 23
        },
        {
            "Name": "document.getElementById",
            "Args": [
                "'output-container'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 24
        },
        {
            "Name": "document.getElementById",
            "Args": [
                "'output-container-scroll'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 25
        },
        {
            "Name": "document.getElementById",
            "Args": [
                "'playground-container'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 26
        },
        {
            "Name": "document.getElementById",
            "Args": [
                "'query-checkbox'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 27
        },
        {
            "Name": "document.getElementById",
            "Args": [
                "'query-container'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 28
        },
        {
            "Name": "document.getElementById",
            "Args": [
                "'query-input'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 29
        },
        {
            "Name": "document.getElementById",
            "Args": [
                "'update-time'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 30
        },
        {
            "Name": "loadState",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 33
        },
        {
            "Name": "TreeSitter.init",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 35
        },
        {
            "Name": "TreeSitter",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 37
        },
        {
            "Name": "CodeMirror.fromTextArea",
            "Args": [
                "codeInput",
                "{\n    lineNumbers: true,\n    showCursorWhenSelecting: true\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 38
        },
        {
            "Name": "CodeMirror.fromTextArea",
            "Args": [
                "queryInput",
                "{\n    lineNumbers: true,\n    showCursorWhenSelecting: true\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 43
        },
        {
            "Name": "Clusterize",
            "Args": [
                "{\n    rows: [],\n    noDataText: null,\n    contentElem: outputContainer,\n    scrollElem: outputContainerScroll\n  }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 48
        },
        {
            "Name": "debounce",
            "Args": [
                "renderTree",
                "50"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 54
        },
        {
            "Name": "debounce",
            "Args": [
                "saveState",
                "2000"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 55
        },
        {
            "Name": "debounce",
            "Args": [
                "runTreeQuery",
                "50"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 56
        },
        {
            "Name": "codeEditor.on",
            "Args": [
                "'changes'",
                "handleCodeChange"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 65
        },
        {
            "Name": "codeEditor.on",
            "Args": [
                "'viewportChange'",
                "runTreeQueryOnChange"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 66
        },
        {
            "Name": "codeEditor.on",
            "Args": [
                "'cursorActivity'",
                "debounce(handleCursorMovement, 150)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 67
        },
        {
            "Name": "debounce",
            "Args": [
                "handleCursorMovement",
                "150"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 67
        },
        {
            "Name": "queryEditor.on",
            "Args": [
                "'changes'",
                "debounce(handleQueryChange, 150)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 68
        },
        {
            "Name": "debounce",
            "Args": [
                "handleQueryChange",
                "150"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 68
        },
        {
            "Name": "loggingCheckbox.addEventListener",
            "Args": [
                "'change'",
                "handleLoggingChange"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 70
        },
        {
            "Name": "queryCheckbox.addEventListener",
            "Args": [
                "'change'",
                "handleQueryEnableChange"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 71
        },
        {
            "Name": "languageSelect.addEventListener",
            "Args": [
                "'change'",
                "handleLanguageChange"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 72
        },
        {
            "Name": "outputContainer.addEventListener",
            "Args": [
                "'click'",
                "handleTreeClick"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 73
        },
        {
            "Name": "handleQueryEnableChange",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 75
        },
        {
            "Name": "handleLanguageChange",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 76
        },
        {
            "Name": "TreeSitter.Language.load",
            "Args": [
                "url"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 86
        },
        {
            "Name": "console.error",
            "Args": [
                "e"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 88
        },
        {
            "Name": "parser.setLanguage",
            "Args": [
                "languagesByName[newLanguageName]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 98
        },
        {
            "Name": "handleCodeChange",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 99
        },
        {
            "Name": "handleQueryChange",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 100
        },
        {
            "Name": "codeEditor.getValue",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 104
        },
        {
            "Name": "changes.map",
            "Args": [
                "treeEditForEditorChange"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 105
        },
        {
            "Name": "performance.now",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 107
        },
        {
            "Name": "tree.edit",
            "Args": [
                "edit"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 110
        },
        {
            "Name": "parser.parse",
            "Args": [
                "newText",
                "tree"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 113
        },
        {
            "Name": "performance.now() - start.toFixed",
            "Args": [
                "1"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 114
        },
        {
            "Name": "performance.now",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 114
        },
        {
            "Name": "tree.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 117
        },
        {
            "Name": "renderTreeOnCodeChange",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 120
        },
        {
            "Name": "runTreeQueryOnChange",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 121
        },
        {
            "Name": "saveStateOnChange",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 122
        },
        {
            "Name": "tree.walk",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 127
        },
        {
            "Name": "Promise",
            "Args": [
                "r => setTimeout(r, 0)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 138
        },
        {
            "Name": "setTimeout",
            "Args": [
                "r",
                "0"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 138
        },
        {
            "Name": "cursor.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 140
        },
        {
            "Name": "cursor.gotoNextSibling",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 158
        },
        {
            "Name": "cursor.gotoParent",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 160
        },
        {
            "Name": "rows.push",
            "Args": [
                "row"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 170
        },
        {
            "Name": "'  '.repeat",
            "Args": [
                "indentLevel"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 182
        },
        {
            "Name": "cursor.gotoFirstChild",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 186
        },
        {
            "Name": "rows.push",
            "Args": [
                "row"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 196
        },
        {
            "Name": "cursor.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 199
        },
        {
            "Name": "cluster.update",
            "Args": [
                "rows"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 200
        },
        {
            "Name": "handleCursorMovement",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 203
        },
        {
            "Name": "codeEditor.getViewport",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 208
        },
        {
            "Name": "codeEditor.operation",
            "Args": [
                "() => {\n      const marks = codeEditor.getAllMarks();\n      marks.forEach(m => m.clear());\n\n      if (tree && query) {\n        const captures = query.captures(\n          tree.rootNode,\n          {row: startRow, column: 0},\n          {row: endRow, column: 0},\n        );\n        let lastNodeId;\n        for (const {name, node} of captures) {\n          if (node.id === lastNodeId) continue;\n          lastNodeId = node.id;\n          const {startPosition, endPosition} = node;\n          codeEditor.markText(\n            {line: startPosition.row, ch: startPosition.column},\n            {line: endPosition.row, ch: endPosition.column},\n            {\n              inclusiveLeft: true,\n              inclusiveRight: true,\n              css: `color: ${colorForCaptureName(name)}`\n            }\n          );\n        }\n      }\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 213
        },
        {
            "Name": "codeEditor.getAllMarks",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 214
        },
        {
            "Name": "marks.forEach",
            "Args": [
                "m => m.clear()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 215
        },
        {
            "Name": "m.clear",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 215
        },
        {
            "Name": "query.captures",
            "Args": [
                "tree.rootNode",
                "{row: startRow, column: 0}",
                "{row: endRow, column: 0}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 218
        },
        {
            "Name": "codeEditor.markText",
            "Args": [
                "{line: startPosition.row, ch: startPosition.column}",
                "{line: endPosition.row, ch: endPosition.column}",
                "{\n              inclusiveLeft: true,\n              inclusiveRight: true,\n              css: `color: ${colorForCaptureName(name)}`\n            }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 228
        },
        {
            "Name": "colorForCaptureName",
            "Args": [
                "name"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 234
        },
        {
            "Name": "query.delete",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 244
        },
        {
            "Name": "queryEditor.operation",
            "Args": [
                "() => {\n      queryEditor.getAllMarks().forEach(m => m.clear());\n      if (!queryCheckbox.checked) return;\n\n      const queryText = queryEditor.getValue();\n\n      try {\n        query = parser.getLanguage().query(queryText);\n        let match;\n\n        let row = 0;\n        queryEditor.eachLine((line) => {\n          while (match = CAPTURE_REGEX.exec(line.text)) {\n            queryEditor.markText(\n              {line: row, ch: match.index},\n              {line: row, ch: match.index + match[0].length},\n              {\n                inclusiveLeft: true,\n                inclusiveRight: true,\n                css: `color: ${colorForCaptureName(match[1])}`\n              }\n            );\n          }\n          row++;\n        });\n      } catch (error) {\n        const startPosition = queryEditor.posFromIndex(error.index);\n        const endPosition = {\n          line: startPosition.line,\n          ch: startPosition.ch + (error.length || Infinity)\n        };\n\n        if (error.index === queryText.length) {\n          if (startPosition.ch > 0) {\n            startPosition.ch--;\n          } else if (startPosition.row > 0) {\n            startPosition.row--;\n            startPosition.column = Infinity;\n          }\n        }\n\n        queryEditor.markText(\n          startPosition,\n          endPosition,\n          {\n            className: 'query-error',\n            inclusiveLeft: true,\n            inclusiveRight: true,\n            attributes: {title: error.message}\n          }\n        );\n      }\n    }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 249
        },
        {
            "Name": "queryEditor.getAllMarks().forEach",
            "Args": [
                "m => m.clear()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 250
        },
        {
            "Name": "queryEditor.getAllMarks",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 250
        },
        {
            "Name": "m.clear",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 250
        },
        {
            "Name": "queryEditor.getValue",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 253
        },
        {
            "Name": "parser.getLanguage().query",
            "Args": [
                "queryText"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 256
        },
        {
            "Name": "parser.getLanguage",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 256
        },
        {
            "Name": "queryEditor.eachLine",
            "Args": [
                "(line) => {\n          while (match = CAPTURE_REGEX.exec(line.text)) {\n            queryEditor.markText(\n              {line: row, ch: match.index},\n              {line: row, ch: match.index + match[0].length},\n              {\n                inclusiveLeft: true,\n                inclusiveRight: true,\n                css: `color: ${colorForCaptureName(match[1])}`\n              }\n            );\n          }\n          row++;\n        }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 260
        },
        {
            "Name": "CAPTURE_REGEX.exec",
            "Args": [
                "line.text"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 261
        },
        {
            "Name": "queryEditor.markText",
            "Args": [
                "{line: row, ch: match.index}",
                "{line: row, ch: match.index + match[0].length}",
                "{\n                inclusiveLeft: true,\n                inclusiveRight: true,\n                css: `color: ${colorForCaptureName(match[1])}`\n              }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 262
        },
        {
            "Name": "colorForCaptureName",
            "Args": [
                "match[1]"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 268
        },
        {
            "Name": "queryEditor.posFromIndex",
            "Args": [
                "error.index"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 275
        },
        {
            "Name": "queryEditor.markText",
            "Args": [
                "startPosition",
                "endPosition",
                "{\n            className: 'query-error',\n            inclusiveLeft: true,\n            inclusiveRight: true,\n            attributes: {title: error.message}\n          }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 290
        },
        {
            "Name": "runTreeQuery",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 303
        },
        {
            "Name": "saveQueryState",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 304
        },
        {
            "Name": "codeEditor.getDoc().listSelections",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 310
        },
        {
            "Name": "codeEditor.getDoc",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 310
        },
        {
            "Name": "tree.rootNode.namedDescendantForPosition",
            "Args": [
                "start",
                "end"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 324
        },
        {
            "Name": "row.replace",
            "Args": [
                "'highlighted'",
                "'plain'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 328
        },
        {
            "Name": "treeRows.findIndex",
            "Args": [
                "row => row.includes(`data-id=${node.id}`)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 330
        },
        {
            "Name": "row.includes",
            "Args": [
                "`data-id=${node.id}`"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 330
        },
        {
            "Name": "row.replace",
            "Args": [
                "'plain'",
                "'highlighted'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 333
        },
        {
            "Name": "cluster.update",
            "Args": [
                "treeRows"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 335
        },
        {
            "Name": "$(outputContainerScroll).animate",
            "Args": [
                "{scrollTop: offset - 20}",
                "150"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 341
        },
        {
            "Name": "$",
            "Args": [
                "outputContainerScroll"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 341
        },
        {
            "Name": "$(outputContainerScroll).animate",
            "Args": [
                "{scrollTop: offset - containerHeight + 40}",
                "150"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 343
        },
        {
            "Name": "$",
            "Args": [
                "outputContainerScroll"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 343
        },
        {
            "Name": "event.preventDefault",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 350
        },
        {
            "Name": "event\n        .target\n        .dataset\n        .range\n        .split(',').map",
            "Args": [
                "n => parseInt(n)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 351
        },
        {
            "Name": "event\n        .target\n        .dataset\n        .range.split",
            "Args": [
                "','"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 351
        },
        {
            "Name": "parseInt",
            "Args": [
                "n"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 356
        },
        {
            "Name": "codeEditor.focus",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 357
        },
        {
            "Name": "codeEditor.setSelection",
            "Args": [
                "{line: startRow, ch: startColumn}",
                "{line: endRow, ch: endColumn}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 358
        },
        {
            "Name": "parser.setLogger",
            "Args": [
                "(message, lexing) => {\n        if (lexing) {\n          console.log(\"  \", message)\n        } else {\n          console.log(message)\n        }\n      }"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 367
        },
        {
            "Name": "console.log",
            "Args": [
                "\"  \"",
                "message"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 369
        },
        {
            "Name": "console.log",
            "Args": [
                "message"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 371
        },
        {
            "Name": "parser.setLogger",
            "Args": [
                "null"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 375
        },
        {
            "Name": "handleQueryChange",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 387
        },
        {
            "Name": "codeEditor.indexFromPos",
            "Args": [
                "change.from"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 404
        },
        {
            "Name": "query.captureNames.indexOf",
            "Args": [
                "capture"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 417
        },
        {
            "Name": "localStorage.getItem",
            "Args": [
                "\"language\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 422
        },
        {
            "Name": "localStorage.getItem",
            "Args": [
                "\"sourceCode\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 423
        },
        {
            "Name": "localStorage.getItem",
            "Args": [
                "\"query\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 424
        },
        {
            "Name": "localStorage.getItem",
            "Args": [
                "\"queryEnabled\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 425
        },
        {
            "Name": "localStorage.setItem",
            "Args": [
                "\"language\"",
                "languageSelect.value"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 435
        },
        {
            "Name": "localStorage.setItem",
            "Args": [
                "\"sourceCode\"",
                "codeEditor.getValue()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 436
        },
        {
            "Name": "codeEditor.getValue",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 436
        },
        {
            "Name": "saveQueryState",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 437
        },
        {
            "Name": "localStorage.setItem",
            "Args": [
                "\"queryEnabled\"",
                "queryCheckbox.checked"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 441
        },
        {
            "Name": "localStorage.setItem",
            "Args": [
                "\"query\"",
                "queryEditor.getValue()"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 442
        },
        {
            "Name": "queryEditor.getValue",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 442
        },
        {
            "Name": "func.apply",
            "Args": [
                "context",
                "args"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 451
        },
        {
            "Name": "clearTimeout",
            "Args": [
                "timeout"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 454
        },
        {
            "Name": "setTimeout",
            "Args": [
                "later",
                "wait"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 455
        },
        {
            "Name": "func.apply",
            "Args": [
                "context",
                "args"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/docs/assets/js/playground.js",
            "Line": 456
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'precedence_on_subsequence',\n\n  rules: {\n    expression: $ => prec.left(choice(\n      $.function_call,\n      $.identifier,\n      $.scope_resolution,\n    )),\n\n    function_call: $ => choice(\n      seq($.identifier, $.expression),\n      prec(1, seq($.identifier, $.block)),\n      prec(-1, seq($.identifier, $.do_block)),\n      seq($.identifier, prec(1, seq($.expression, $.block))),\n      seq($.identifier, prec(-1, seq($.expression, $.do_block))),\n    ),\n\n    scope_resolution: $ => prec.left(1, choice(\n      seq($.expression, '::', $.expression),\n      seq('::', $.expression),\n    )),\n\n    block: _ => '{}',\n\n    do_block: _ => 'do end',\n\n    identifier: _ => /[a-zA-Z]+/,\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 1
        },
        {
            "Name": "prec.left",
            "Args": [
                "choice(\n      $.function_call,\n      $.identifier,\n      $.scope_resolution,\n    )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 5
        },
        {
            "Name": "choice",
            "Args": [
                "$.function_call",
                "$.identifier",
                "$.scope_resolution"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 5
        },
        {
            "Name": "choice",
            "Args": [
                "seq($.identifier, $.expression)",
                "prec(1, seq($.identifier, $.block))",
                "prec(-1, seq($.identifier, $.do_block))",
                "seq($.identifier, prec(1, seq($.expression, $.block)))",
                "seq($.identifier, prec(-1, seq($.expression, $.do_block)))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 11
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 12
        },
        {
            "Name": "prec",
            "Args": [
                "1",
                "seq($.identifier, $.block)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 13
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "$.block"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 13
        },
        {
            "Name": "prec",
            "Args": [
                "-1",
                "seq($.identifier, $.do_block)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 14
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "$.do_block"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 14
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "prec(1, seq($.expression, $.block))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 15
        },
        {
            "Name": "prec",
            "Args": [
                "1",
                "seq($.expression, $.block)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 15
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "$.block"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 15
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "prec(-1, seq($.expression, $.do_block))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 16
        },
        {
            "Name": "prec",
            "Args": [
                "-1",
                "seq($.expression, $.do_block)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 16
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "$.do_block"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 16
        },
        {
            "Name": "prec.left",
            "Args": [
                "1",
                "choice(\n      seq($.expression, '::', $.expression),\n      seq('::', $.expression),\n    )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 19
        },
        {
            "Name": "choice",
            "Args": [
                "seq($.expression, '::', $.expression)",
                "seq('::', $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 19
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'::'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 20
        },
        {
            "Name": "seq",
            "Args": [
                "'::'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_subsequence/grammar.js",
            "Line": 21
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: \"get_col_eof\",\n\n  externals: $ => [\n    $.char\n  ],\n\n  rules: {\n    source_file: $ => repeat($.char),\n  }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/get_col_eof/grammar.js",
            "Line": 1
        },
        {
            "Name": "repeat",
            "Args": [
                "$.char"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/get_col_eof/grammar.js",
            "Line": 9
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'start_rule_is_token',\n\n  rules: {\n    first_rule: _ => 'the-value',\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/start_rule_is_token/grammar.js",
            "Line": 1
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'start_rule_is_blank',\n\n  rules: {\n    first_rule: _ => blank(),\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/start_rule_is_blank/grammar.js",
            "Line": 1
        },
        {
            "Name": "blank",
            "Args": [],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/start_rule_is_blank/grammar.js",
            "Line": 5
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'precedence_on_single_child_negative',\n\n  rules: {\n    expression: $ => choice($.function_call, $.identifier),\n\n    function_call: $ => prec.right(-1, choice(\n      seq($.identifier, $.expression),\n      seq($.identifier, $.block),\n      seq($.identifier, $.expression, $.block),\n    )),\n\n    block: $ => seq('{', $.expression, '}'),\n\n    identifier: _ => /[a-zA-Z]+/,\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_negative/grammar.js",
            "Line": 1
        },
        {
            "Name": "choice",
            "Args": [
                "$.function_call",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_negative/grammar.js",
            "Line": 5
        },
        {
            "Name": "prec.right",
            "Args": [
                "-1",
                "choice(\n      seq($.identifier, $.expression),\n      seq($.identifier, $.block),\n      seq($.identifier, $.expression, $.block),\n    )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_negative/grammar.js",
            "Line": 7
        },
        {
            "Name": "choice",
            "Args": [
                "seq($.identifier, $.expression)",
                "seq($.identifier, $.block)",
                "seq($.identifier, $.expression, $.block)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_negative/grammar.js",
            "Line": 7
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_negative/grammar.js",
            "Line": 8
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "$.block"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_negative/grammar.js",
            "Line": 9
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "$.expression",
                "$.block"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_negative/grammar.js",
            "Line": 10
        },
        {
            "Name": "seq",
            "Args": [
                "'{'",
                "$.expression",
                "'}'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_negative/grammar.js",
            "Line": 13
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: \"invisible_start_rule\",\n  rules: {\n    _value: $ => choice($.a, $.b),\n    a: $ => \"a\",\n    b: $ => \"b\",\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/invisible_start_rule/grammar.js",
            "Line": 1
        },
        {
            "Name": "choice",
            "Args": [
                "$.a",
                "$.b"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/invisible_start_rule/grammar.js",
            "Line": 4
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: \"inverted_external_token\",\n\n  externals: $ => [$.line_break],\n\n  extras: $ => [/\\s/],\n\n  rules: {\n    program: $ => repeat($.statement),\n    statement: $ => seq($._expression, $.line_break),\n    _expression: $ => choice($.identifier, $.member_expression),\n    member_expression: $ => prec.left(seq($._expression, \".\", $.identifier)),\n    identifier: $ => /[a-z]+/,\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inverted_external_token/grammar.js",
            "Line": 1
        },
        {
            "Name": "repeat",
            "Args": [
                "$.statement"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inverted_external_token/grammar.js",
            "Line": 9
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "$.line_break"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inverted_external_token/grammar.js",
            "Line": 10
        },
        {
            "Name": "choice",
            "Args": [
                "$.identifier",
                "$.member_expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inverted_external_token/grammar.js",
            "Line": 11
        },
        {
            "Name": "prec.left",
            "Args": [
                "seq($._expression, \".\", $.identifier)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inverted_external_token/grammar.js",
            "Line": 12
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "\".\"",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inverted_external_token/grammar.js",
            "Line": 12
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'get_col_should_hang_not_crash',\n\n  externals: $ => [\n    $.test,\n  ],\n\n  rules: {\n    source_file: $ => seq(\n      $.test\n    ),\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/get_col_should_hang_not_crash/grammar.js",
            "Line": 1
        },
        {
            "Name": "seq",
            "Args": [
                "$.test"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/get_col_should_hang_not_crash/grammar.js",
            "Line": 9
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'associativity_missing',\n\n    rules: {\n        expression: $ => choice(\n            $.math_operation,\n            $.identifier\n        ),\n\n        math_operation: $ => seq(\n            $.expression,\n            '+',\n            $.expression,\n        ),\n\n        identifier: $ => /[a-z]+/,\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_missing/grammar.js",
            "Line": 1
        },
        {
            "Name": "choice",
            "Args": [
                "$.math_operation",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_missing/grammar.js",
            "Line": 5
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'+'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_missing/grammar.js",
            "Line": 10
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'precedence_on_token',\n\n  extras: $ => [\n    /\\s/,\n    $.comment,\n  ],\n\n  rules: {\n    program: $ => repeat(choice(\n      $.string,\n      $.regex,\n      $.identifier,\n      $.slash,\n    )),\n\n    comment: _ => token(prec(1, /\\/\\/.*|\\/\\*[^*]*\\*\\//)),\n\n    string: $ => seq(\n      '\"',\n      repeat(choice(\n        token(prec(2, /[^\\\"\\n\\\\]+/)),\n        $.escape_sequence,\n      )),\n      '\"',\n    ),\n\n    escape_sequence: _ => /\\\\./,\n\n    regex: _ => /\\/[^\\/\\n]+\\/[a-z]*/,\n\n    identifier: _ => /[a-z]\\w*/,\n\n    slash: _ => '/',\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/grammar.js",
            "Line": 1
        },
        {
            "Name": "repeat",
            "Args": [
                "choice(\n      $.string,\n      $.regex,\n      $.identifier,\n      $.slash,\n    )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/grammar.js",
            "Line": 10
        },
        {
            "Name": "choice",
            "Args": [
                "$.string",
                "$.regex",
                "$.identifier",
                "$.slash"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/grammar.js",
            "Line": 10
        },
        {
            "Name": "token",
            "Args": [
                "prec(1, /\\/\\/.*|\\/\\*[^*]*\\*\\//)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/grammar.js",
            "Line": 17
        },
        {
            "Name": "prec",
            "Args": [
                "1",
                "/\\/\\/.*|\\/\\*[^*]*\\*\\//"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/grammar.js",
            "Line": 17
        },
        {
            "Name": "seq",
            "Args": [
                "'\"'",
                "repeat(choice(\n        token(prec(2, /[^\\\"\\n\\\\]+/)),\n        $.escape_sequence,\n      ))",
                "'\"'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/grammar.js",
            "Line": 19
        },
        {
            "Name": "repeat",
            "Args": [
                "choice(\n        token(prec(2, /[^\\\"\\n\\\\]+/)),\n        $.escape_sequence,\n      )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/grammar.js",
            "Line": 21
        },
        {
            "Name": "choice",
            "Args": [
                "token(prec(2, /[^\\\"\\n\\\\]+/))",
                "$.escape_sequence"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/grammar.js",
            "Line": 21
        },
        {
            "Name": "token",
            "Args": [
                "prec(2, /[^\\\"\\n\\\\]+/)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/grammar.js",
            "Line": 22
        },
        {
            "Name": "prec",
            "Args": [
                "2",
                "/[^\\\"\\n\\\\]+/"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_token/grammar.js",
            "Line": 22
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'associativity_left',\n\n    rules: {\n        expression: $ => choice(\n            $.math_operation,\n            $.identifier\n        ),\n\n        math_operation: $ => prec.left(seq(\n            $.expression,\n            '+',\n            $.expression,\n        )),\n\n        identifier: $ => /[a-z]+/,\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_left/grammar.js",
            "Line": 1
        },
        {
            "Name": "choice",
            "Args": [
                "$.math_operation",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_left/grammar.js",
            "Line": 5
        },
        {
            "Name": "prec.left",
            "Args": [
                "seq(\n            $.expression,\n            '+',\n            $.expression,\n        )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_left/grammar.js",
            "Line": 10
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'+'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_left/grammar.js",
            "Line": 10
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'aliased_unit_reductions',\n\n    extras: $ => [/\\s/],\n\n    rules: {\n        statement: $ => seq(\n            $._a,\n\n            // The `_b` rule is always aliased to `b_prime`, so it is internally treated\n            // as a simple alias.\n            alias($._b, $.b_prime),\n\n            // The `_c` rule is used without an alias in addition to being aliased to `c_prime`,\n            // so it is not a simple alias.\n            alias($._c, $.c_prime),\n\n            $._c,\n            ';'\n        ),\n\n        _a: $ => $._A,\n        _b: $ => $._B,\n        _c: $ => $._C,\n        _A: $ => $.identifier,\n        _B: $ => $.identifier,\n        _C: $ => $.identifier,\n\n        identifier: $ => /[a-z]+/,\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_unit_reductions/grammar.js",
            "Line": 8
        },
        {
            "Name": "seq",
            "Args": [
                "$._a",
                "alias($._b, $.b_prime)",
                "alias($._c, $.c_prime)",
                "$._c",
                "';'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_unit_reductions/grammar.js",
            "Line": 14
        },
        {
            "Name": "alias",
            "Args": [
                "$._b",
                "$.b_prime"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_unit_reductions/grammar.js",
            "Line": 19
        },
        {
            "Name": "alias",
            "Args": [
                "$._c",
                "$.c_prime"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_unit_reductions/grammar.js",
            "Line": 23
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'conflicting_precedence',\n\n    rules: {\n        expression: $ => choice(\n            $.sum,\n            $.product,\n            $.other_thing,\n        ),\n\n        sum: $ => prec.left(0, seq($.expression, '+', $.expression)),\n        product: $ => prec.left(1, seq($.expression, '*', $.expression)),\n        other_thing: $ => prec.left(-1, seq($.expression, '*', '*')),\n        identifier: $ => /[a-zA-Z]+/\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflicting_precedence/grammar.js",
            "Line": 1
        },
        {
            "Name": "choice",
            "Args": [
                "$.sum",
                "$.product",
                "$.other_thing"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflicting_precedence/grammar.js",
            "Line": 5
        },
        {
            "Name": "prec.left",
            "Args": [
                "0",
                "seq($.expression, '+', $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflicting_precedence/grammar.js",
            "Line": 11
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'+'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflicting_precedence/grammar.js",
            "Line": 11
        },
        {
            "Name": "prec.left",
            "Args": [
                "1",
                "seq($.expression, '*', $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflicting_precedence/grammar.js",
            "Line": 12
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'*'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflicting_precedence/grammar.js",
            "Line": 12
        },
        {
            "Name": "prec.left",
            "Args": [
                "-1",
                "seq($.expression, '*', '*')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflicting_precedence/grammar.js",
            "Line": 13
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'*'",
                "'*'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflicting_precedence/grammar.js",
            "Line": 13
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'partially_resolved_conflict',\n\n  rules: {\n    expression: $ => choice($.binary, $.identifier),\n\n    unary_a: $ => prec(2, seq('!', $.expression)),\n\n    unary_b: $ => prec(2, seq('!', $.expression)),\n\n    binary: $ => seq(\n      choice($.unary_a, $.unary_b, $.expression),\n      '<',\n      $.expression,\n    ),\n\n    identifier: _ => /[a-z]+/,\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/partially_resolved_conflict/grammar.js",
            "Line": 1
        },
        {
            "Name": "choice",
            "Args": [
                "$.binary",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/partially_resolved_conflict/grammar.js",
            "Line": 5
        },
        {
            "Name": "prec",
            "Args": [
                "2",
                "seq('!', $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/partially_resolved_conflict/grammar.js",
            "Line": 7
        },
        {
            "Name": "seq",
            "Args": [
                "'!'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/partially_resolved_conflict/grammar.js",
            "Line": 7
        },
        {
            "Name": "prec",
            "Args": [
                "2",
                "seq('!', $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/partially_resolved_conflict/grammar.js",
            "Line": 9
        },
        {
            "Name": "seq",
            "Args": [
                "'!'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/partially_resolved_conflict/grammar.js",
            "Line": 9
        },
        {
            "Name": "seq",
            "Args": [
                "choice($.unary_a, $.unary_b, $.expression)",
                "'<'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/partially_resolved_conflict/grammar.js",
            "Line": 11
        },
        {
            "Name": "choice",
            "Args": [
                "$.unary_a",
                "$.unary_b",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/partially_resolved_conflict/grammar.js",
            "Line": 12
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'lexical_conflicts_due_to_state_merging',\n\n  rules: {\n    expression: $ => choice(\n      $.conditional,\n      $.quotient,\n      $.regex,\n      $.number,\n      $.parenthesized,\n    ),\n\n    conditional: $ => prec.left(1, seq(\n      'if',\n      $.parenthesized,\n      $.expression\n    )),\n\n    quotient: $ => prec.left(seq(\n      $.expression,\n      '/',\n      $.expression\n    )),\n\n    regex: $ => /\\/[^/\\n]+\\//,\n\n    number: $ => /\\d+/,\n\n    parenthesized: $ => seq('(', $.expression, ')'),\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/lexical_conflicts_due_to_state_merging/grammar.js",
            "Line": 1
        },
        {
            "Name": "choice",
            "Args": [
                "$.conditional",
                "$.quotient",
                "$.regex",
                "$.number",
                "$.parenthesized"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/lexical_conflicts_due_to_state_merging/grammar.js",
            "Line": 5
        },
        {
            "Name": "prec.left",
            "Args": [
                "1",
                "seq(\n      'if',\n      $.parenthesized,\n      $.expression\n    )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/lexical_conflicts_due_to_state_merging/grammar.js",
            "Line": 13
        },
        {
            "Name": "seq",
            "Args": [
                "'if'",
                "$.parenthesized",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/lexical_conflicts_due_to_state_merging/grammar.js",
            "Line": 13
        },
        {
            "Name": "prec.left",
            "Args": [
                "seq(\n      $.expression,\n      '/',\n      $.expression\n    )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/lexical_conflicts_due_to_state_merging/grammar.js",
            "Line": 19
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'/'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/lexical_conflicts_due_to_state_merging/grammar.js",
            "Line": 19
        },
        {
            "Name": "seq",
            "Args": [
                "'('",
                "$.expression",
                "')'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/lexical_conflicts_due_to_state_merging/grammar.js",
            "Line": 29
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'conflict_in_repeat_rule_after_external_token',\n\n    externals: $ => [\n        $._program_start,\n    ],\n\n    rules: {\n        statement: $ => choice(\n            seq($._program_start, $.array, ';'),\n            seq($._program_start, $.array_type, $.identifier, ';'),\n        ),\n\n        array: $ => seq(\n            '[',\n            repeat(choice($.identifier, '0')),\n            ']',\n        ),\n\n        array_type: $ => seq(\n            '[',\n            repeat(choice($.identifier, 'void')),\n            ']',\n        ),\n\n        identifier: $ => /[a-z]+/\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule_after_external_token/grammar.js",
            "Line": 5
        },
        {
            "Name": "choice",
            "Args": [
                "seq($._program_start, $.array, ';')",
                "seq($._program_start, $.array_type, $.identifier, ';')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule_after_external_token/grammar.js",
            "Line": 13
        },
        {
            "Name": "seq",
            "Args": [
                "$._program_start",
                "$.array",
                "';'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule_after_external_token/grammar.js",
            "Line": 14
        },
        {
            "Name": "seq",
            "Args": [
                "$._program_start",
                "$.array_type",
                "$.identifier",
                "';'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule_after_external_token/grammar.js",
            "Line": 15
        },
        {
            "Name": "seq",
            "Args": [
                "'['",
                "repeat(choice($.identifier, '0'))",
                "']'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule_after_external_token/grammar.js",
            "Line": 18
        },
        {
            "Name": "repeat",
            "Args": [
                "choice($.identifier, '0')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule_after_external_token/grammar.js",
            "Line": 20
        },
        {
            "Name": "choice",
            "Args": [
                "$.identifier",
                "'0'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule_after_external_token/grammar.js",
            "Line": 20
        },
        {
            "Name": "seq",
            "Args": [
                "'['",
                "repeat(choice($.identifier, 'void'))",
                "']'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule_after_external_token/grammar.js",
            "Line": 24
        },
        {
            "Name": "repeat",
            "Args": [
                "choice($.identifier, 'void')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule_after_external_token/grammar.js",
            "Line": 26
        },
        {
            "Name": "choice",
            "Args": [
                "$.identifier",
                "'void'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule_after_external_token/grammar.js",
            "Line": 26
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'named_precedences',\n\n  conflicts: $ => [\n    [$.expression, $.type],\n    [$.expression, $.nested_type],\n  ],\n\n  precedences: $ => [\n    [$.member_expression, \"and\", \"or\"],\n    [$.nested_type, \"type_intersection\", \"type_union\"],\n  ],\n\n  rules: {\n    program: $ => repeat(choice(\n      $.expression_statement,\n      $.declaration_statement,\n    )),\n\n    expression_statement: $ => seq($.expression, ';'),\n\n    declaration_statement: $ => seq($.type, $.expression, ';'),\n\n    expression: $ => choice(\n      $.member_expression,\n      $.binary_expression,\n      $.identifier,\n    ),\n\n    member_expression: $ => seq($.expression, '.', $.identifier),\n\n    binary_expression: $ => choice(\n      prec.left('or', seq($.expression, '||', $.expression)),\n      prec.left('and', seq($.expression, '&&', $.expression)),\n    ),\n\n    type: $ => choice($.nested_type, $.binary_type, $.identifier),\n\n    nested_type: $ => seq($.identifier, '.', $.identifier),\n\n    binary_type: $ => choice(\n      prec.left('type_union', seq($.type, '||', $.type)),\n      prec.left('type_intersection', seq($.type, '&&', $.type)),\n    ),\n\n    identifier: $ => /[a-z]\\w+/,\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 1
        },
        {
            "Name": "repeat",
            "Args": [
                "choice(\n      $.expression_statement,\n      $.declaration_statement,\n    )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 15
        },
        {
            "Name": "choice",
            "Args": [
                "$.expression_statement",
                "$.declaration_statement"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 15
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "';'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 20
        },
        {
            "Name": "seq",
            "Args": [
                "$.type",
                "$.expression",
                "';'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 22
        },
        {
            "Name": "choice",
            "Args": [
                "$.member_expression",
                "$.binary_expression",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 24
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'.'",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 30
        },
        {
            "Name": "choice",
            "Args": [
                "prec.left('or', seq($.expression, '||', $.expression))",
                "prec.left('and', seq($.expression, '&&', $.expression))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 32
        },
        {
            "Name": "prec.left",
            "Args": [
                "'or'",
                "seq($.expression, '||', $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 33
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'||'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 33
        },
        {
            "Name": "prec.left",
            "Args": [
                "'and'",
                "seq($.expression, '&&', $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 34
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'&&'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 34
        },
        {
            "Name": "choice",
            "Args": [
                "$.nested_type",
                "$.binary_type",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 37
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "'.'",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 39
        },
        {
            "Name": "choice",
            "Args": [
                "prec.left('type_union', seq($.type, '||', $.type))",
                "prec.left('type_intersection', seq($.type, '&&', $.type))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 41
        },
        {
            "Name": "prec.left",
            "Args": [
                "'type_union'",
                "seq($.type, '||', $.type)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 42
        },
        {
            "Name": "seq",
            "Args": [
                "$.type",
                "'||'",
                "$.type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 42
        },
        {
            "Name": "prec.left",
            "Args": [
                "'type_intersection'",
                "seq($.type, '&&', $.type)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 43
        },
        {
            "Name": "seq",
            "Args": [
                "$.type",
                "'&&'",
                "$.type"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_precedences/grammar.js",
            "Line": 43
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: \"external_tokens\",\n\n  externals: $ => [\n    $._percent_string,\n    $._percent_string_start,\n    $._percent_string_end,\n  ],\n\n  extras: $ => [/\\s/],\n\n  rules: {\n    expression: $ => choice($.string, $.sum, $.identifier),\n\n    sum: $ => prec.left(seq($.expression, '+', $.expression)),\n\n    string: $ => choice($._percent_string, seq(\n      $._percent_string_start,\n      $.expression,\n      $._percent_string_end,\n    )),\n\n    identifier: $ => /[a-z]+/\n  }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_tokens/grammar.js",
            "Line": 5
        },
        {
            "Name": "choice",
            "Args": [
                "$.string",
                "$.sum",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_tokens/grammar.js",
            "Line": 17
        },
        {
            "Name": "prec.left",
            "Args": [
                "seq($.expression, '+', $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_tokens/grammar.js",
            "Line": 19
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'+'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_tokens/grammar.js",
            "Line": 19
        },
        {
            "Name": "choice",
            "Args": [
                "$._percent_string",
                "seq(\n      $._percent_string_start,\n      $.expression,\n      $._percent_string_end,\n    )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_tokens/grammar.js",
            "Line": 21
        },
        {
            "Name": "seq",
            "Args": [
                "$._percent_string_start",
                "$.expression",
                "$._percent_string_end"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_tokens/grammar.js",
            "Line": 21
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'aliased_inlined_rules',\n\n    extras: $ => [/\\s/],\n\n    inline: $ => [$.identifier],\n\n    rules: {\n        statement: $ => seq($._expression, ';'),\n\n        _expression: $ => choice(\n            $.member_expression,\n            alias($.identifier, $.variable_name),\n        ),\n\n        member_expression: $ => prec.left(1, seq(\n            $._expression,\n            '.',\n            alias($.identifier, $.property_name)\n        )),\n\n        identifier: $ => choice('a', 'b', 'c')\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_inlined_rules/grammar.js",
            "Line": 5
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "';'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_inlined_rules/grammar.js",
            "Line": 13
        },
        {
            "Name": "choice",
            "Args": [
                "$.member_expression",
                "alias($.identifier, $.variable_name)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_inlined_rules/grammar.js",
            "Line": 15
        },
        {
            "Name": "alias",
            "Args": [
                "$.identifier",
                "$.variable_name"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_inlined_rules/grammar.js",
            "Line": 17
        },
        {
            "Name": "prec.left",
            "Args": [
                "1",
                "seq(\n            $._expression,\n            '.',\n            alias($.identifier, $.property_name)\n        )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_inlined_rules/grammar.js",
            "Line": 20
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "'.'",
                "alias($.identifier, $.property_name)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_inlined_rules/grammar.js",
            "Line": 20
        },
        {
            "Name": "alias",
            "Args": [
                "$.identifier",
                "$.property_name"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_inlined_rules/grammar.js",
            "Line": 23
        },
        {
            "Name": "choice",
            "Args": [
                "'a'",
                "'b'",
                "'c'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_inlined_rules/grammar.js",
            "Line": 26
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'aliased_rules',\n\n    extras: $ => [\n      /\\s/,\n      $.star,\n    ],\n\n    rules: {\n        statement: $ => seq($._expression, ';'),\n\n        _expression: $ => choice(\n            $.call_expression,\n            $.member_expression,\n            alias($.identifier, $.variable_name),\n        ),\n\n        call_expression: $ => prec.left(seq(\n            $._expression,\n            '(',\n            $._expression,\n            ')'\n        )),\n\n        member_expression: $ => prec.left(1, seq(\n            $._expression,\n            '.',\n            alias($.identifier, $.property_name)\n        )),\n\n        identifier: $ => /[a-z]+/,\n\n        // Tests for https://github.com/tree-sitter/tree-sitter/issues/1834\n        //\n        // Even though the alias is unused, that issue causes all instances of\n        // the extra that appear in the tree to be renamed to `star_aliased`.\n        //\n        // Instead, this alias should have no effect because it is unused.\n        star: $ => '*',\n        unused: $ => alias($.star, $.star_aliased),\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_rules/grammar.js",
            "Line": 1
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "';'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_rules/grammar.js",
            "Line": 10
        },
        {
            "Name": "choice",
            "Args": [
                "$.call_expression",
                "$.member_expression",
                "alias($.identifier, $.variable_name)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_rules/grammar.js",
            "Line": 12
        },
        {
            "Name": "alias",
            "Args": [
                "$.identifier",
                "$.variable_name"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_rules/grammar.js",
            "Line": 15
        },
        {
            "Name": "prec.left",
            "Args": [
                "seq(\n            $._expression,\n            '(',\n            $._expression,\n            ')'\n        )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_rules/grammar.js",
            "Line": 18
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "'('",
                "$._expression",
                "')'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_rules/grammar.js",
            "Line": 18
        },
        {
            "Name": "prec.left",
            "Args": [
                "1",
                "seq(\n            $._expression,\n            '.',\n            alias($.identifier, $.property_name)\n        )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_rules/grammar.js",
            "Line": 25
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "'.'",
                "alias($.identifier, $.property_name)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_rules/grammar.js",
            "Line": 25
        },
        {
            "Name": "alias",
            "Args": [
                "$.identifier",
                "$.property_name"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_rules/grammar.js",
            "Line": 28
        },
        {
            "Name": "alias",
            "Args": [
                "$.star",
                "$.star_aliased"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_rules/grammar.js",
            "Line": 40
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: \"immediate_tokens\",\n\n  extras: $ => [/\\s/],\n\n  rules: {\n    program: $ => $._expression,\n\n    _expression: $ => choice(\n      $.call,\n      $.infix,\n      $.prefix,\n      $.identifier,\n    ),\n\n    call: $ => prec.left(-1, seq(\n      $._expression,\n      $._expression,\n    )),\n\n    prefix: $ => seq(\n      '::',\n      $.identifier,\n    ),\n\n    infix: $ => seq(\n      $._expression,\n      token.immediate('::'),\n      $.identifier,\n    ),\n\n    identifier: $ => /[a-z]+/\n  }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/immediate_tokens/grammar.js",
            "Line": 6
        },
        {
            "Name": "choice",
            "Args": [
                "$.call",
                "$.infix",
                "$.prefix",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/immediate_tokens/grammar.js",
            "Line": 14
        },
        {
            "Name": "prec.left",
            "Args": [
                "-1",
                "seq(\n      $._expression,\n      $._expression,\n    )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/immediate_tokens/grammar.js",
            "Line": 21
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "$._expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/immediate_tokens/grammar.js",
            "Line": 21
        },
        {
            "Name": "seq",
            "Args": [
                "'::'",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/immediate_tokens/grammar.js",
            "Line": 26
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "token.immediate('::')",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/immediate_tokens/grammar.js",
            "Line": 31
        },
        {
            "Name": "token.immediate",
            "Args": [
                "'::'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/immediate_tokens/grammar.js",
            "Line": 33
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'uses_current_column',\n\n  externals: $ => [\n    $._indent,\n    $._dedent,\n    $._newline,\n  ],\n\n  rules: {\n    block: $ => repeat1($._statement),\n\n    _statement: $ => seq($._expression, $._newline),\n\n    _expression: $ => choice(\n      $.do_expression,\n      $.binary_expression,\n      $.identifier,\n    ),\n\n    do_expression: $ => seq(\n      'do',\n      $._indent,\n      $.block,\n      $._dedent,\n    ),\n\n    binary_expression: $ => prec.left(1, seq(\n      $._expression,\n      choice('=', '+', '-'),\n      $._expression,\n    )),\n\n    identifier: _ => /\\w+/,\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/uses_current_column/grammar.js",
            "Line": 1
        },
        {
            "Name": "repeat1",
            "Args": [
                "$._statement"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/uses_current_column/grammar.js",
            "Line": 11
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "$._newline"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/uses_current_column/grammar.js",
            "Line": 13
        },
        {
            "Name": "choice",
            "Args": [
                "$.do_expression",
                "$.binary_expression",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/uses_current_column/grammar.js",
            "Line": 15
        },
        {
            "Name": "seq",
            "Args": [
                "'do'",
                "$._indent",
                "$.block",
                "$._dedent"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/uses_current_column/grammar.js",
            "Line": 21
        },
        {
            "Name": "prec.left",
            "Args": [
                "1",
                "seq(\n      $._expression,\n      choice('=', '+', '-'),\n      $._expression,\n    )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/uses_current_column/grammar.js",
            "Line": 28
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "choice('=', '+', '-')",
                "$._expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/uses_current_column/grammar.js",
            "Line": 28
        },
        {
            "Name": "choice",
            "Args": [
                "'='",
                "'+'",
                "'-'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/uses_current_column/grammar.js",
            "Line": 30
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'associativity_right',\n\n    rules: {\n        expression: $ => choice(\n            $.math_operation,\n            $.identifier\n        ),\n\n        math_operation: $ => prec.right(seq(\n            $.expression,\n            '+',\n            $.expression,\n        )),\n\n        identifier: $ => /[a-z]+/,\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_right/grammar.js",
            "Line": 1
        },
        {
            "Name": "choice",
            "Args": [
                "$.math_operation",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_right/grammar.js",
            "Line": 5
        },
        {
            "Name": "prec.right",
            "Args": [
                "seq(\n            $.expression,\n            '+',\n            $.expression,\n        )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_right/grammar.js",
            "Line": 10
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'+'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/associativity_right/grammar.js",
            "Line": 10
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'precedence_on_single_child_positive',\n\n  rules: {\n    expression: $ => choice($.function_call, $.identifier),\n\n    function_call: $ => prec.right(1, choice(\n      seq($.identifier, $.expression),\n      seq($.identifier, $.block),\n      seq($.identifier, $.expression, $.block),\n    )),\n\n    block: $ => seq('{', $.expression, '}'),\n\n    identifier: _ => /[a-zA-X]+/,\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_positive/grammar.js",
            "Line": 1
        },
        {
            "Name": "choice",
            "Args": [
                "$.function_call",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_positive/grammar.js",
            "Line": 5
        },
        {
            "Name": "prec.right",
            "Args": [
                "1",
                "choice(\n      seq($.identifier, $.expression),\n      seq($.identifier, $.block),\n      seq($.identifier, $.expression, $.block),\n    )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_positive/grammar.js",
            "Line": 7
        },
        {
            "Name": "choice",
            "Args": [
                "seq($.identifier, $.expression)",
                "seq($.identifier, $.block)",
                "seq($.identifier, $.expression, $.block)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_positive/grammar.js",
            "Line": 7
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_positive/grammar.js",
            "Line": 8
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "$.block"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_positive/grammar.js",
            "Line": 9
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "$.expression",
                "$.block"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_positive/grammar.js",
            "Line": 10
        },
        {
            "Name": "seq",
            "Args": [
                "'{'",
                "$.expression",
                "'}'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_positive/grammar.js",
            "Line": 13
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'precedence_on_single_child_missing',\n\n  rules: {\n    expression: $ => choice($.function_call, $.identifier),\n\n    function_call: $ => prec.right(choice(\n      seq($.identifier, $.expression),\n      seq($.identifier, $.block),\n      seq($.identifier, $.expression, $.block),\n    )),\n\n    block: $ => seq('{', $.expression, '}'),\n\n    identifier: _ => /[a-zA-Z]+/,\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_missing/grammar.js",
            "Line": 1
        },
        {
            "Name": "choice",
            "Args": [
                "$.function_call",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_missing/grammar.js",
            "Line": 5
        },
        {
            "Name": "prec.right",
            "Args": [
                "choice(\n      seq($.identifier, $.expression),\n      seq($.identifier, $.block),\n      seq($.identifier, $.expression, $.block),\n    )"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_missing/grammar.js",
            "Line": 7
        },
        {
            "Name": "choice",
            "Args": [
                "seq($.identifier, $.expression)",
                "seq($.identifier, $.block)",
                "seq($.identifier, $.expression, $.block)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_missing/grammar.js",
            "Line": 7
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_missing/grammar.js",
            "Line": 8
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "$.block"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_missing/grammar.js",
            "Line": 9
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "$.expression",
                "$.block"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_missing/grammar.js",
            "Line": 10
        },
        {
            "Name": "seq",
            "Args": [
                "'{'",
                "$.expression",
                "'}'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/precedence_on_single_child_missing/grammar.js",
            "Line": 13
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: \"inlined_aliased_rules\",\n\n  extras: $ => [/\\s/],\n\n  inline: $ => [$.expression],\n\n  rules: {\n    statement: $ => seq($.expression, \";\"),\n\n    expression: $ =>\n      choice(\n        $.call_expression,\n        $.member_expression,\n        alias($.identifier, $.variable_name),\n      ),\n\n    call_expression: $ => prec.left(seq($.expression, \"(\", $.expression, \")\")),\n\n    member_expression: $ =>\n      prec.left(\n        1,\n        seq($.expression, \".\", alias($.identifier, $.property_name)),\n      ),\n\n    identifier: $ => /[a-z]+/,\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inlined_aliased_rules/grammar.js",
            "Line": 1
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "\";\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inlined_aliased_rules/grammar.js",
            "Line": 9
        },
        {
            "Name": "choice",
            "Args": [
                "$.call_expression",
                "$.member_expression",
                "alias($.identifier, $.variable_name)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inlined_aliased_rules/grammar.js",
            "Line": 12
        },
        {
            "Name": "alias",
            "Args": [
                "$.identifier",
                "$.variable_name"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inlined_aliased_rules/grammar.js",
            "Line": 15
        },
        {
            "Name": "prec.left",
            "Args": [
                "seq($.expression, \"(\", $.expression, \")\")"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inlined_aliased_rules/grammar.js",
            "Line": 18
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "\"(\"",
                "$.expression",
                "\")\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inlined_aliased_rules/grammar.js",
            "Line": 18
        },
        {
            "Name": "prec.left",
            "Args": [
                "1",
                "seq($.expression, \".\", alias($.identifier, $.property_name))"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inlined_aliased_rules/grammar.js",
            "Line": 21
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "\".\"",
                "alias($.identifier, $.property_name)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inlined_aliased_rules/grammar.js",
            "Line": 23
        },
        {
            "Name": "alias",
            "Args": [
                "$.identifier",
                "$.property_name"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inlined_aliased_rules/grammar.js",
            "Line": 23
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'dynamic_precedence',\n\n    extras: $ => [/\\s/],\n\n    conflicts: $ => [[$.expression, $.type]],\n\n    rules: {\n        program: $ => choice(\n            $.declaration,\n            $.expression,\n        ),\n\n        expression: $ => choice(\n            prec.left(seq($.expression, '*', $.expression)),\n            $.identifier\n        ),\n\n        declaration: $ => seq(\n            $.type,\n            $.declarator,\n        ),\n\n        declarator: $ => choice(\n            prec.dynamic(1, seq('*', $.identifier)),\n            $.identifier,\n        ),\n\n        type: $ => $.identifier,\n        identifier: $ => /[a-z-A-Z]+/\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/dynamic_precedence/grammar.js",
            "Line": 1
        },
        {
            "Name": "choice",
            "Args": [
                "$.declaration",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/dynamic_precedence/grammar.js",
            "Line": 9
        },
        {
            "Name": "choice",
            "Args": [
                "prec.left(seq($.expression, '*', $.expression))",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/dynamic_precedence/grammar.js",
            "Line": 14
        },
        {
            "Name": "prec.left",
            "Args": [
                "seq($.expression, '*', $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/dynamic_precedence/grammar.js",
            "Line": 15
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'*'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/dynamic_precedence/grammar.js",
            "Line": 15
        },
        {
            "Name": "seq",
            "Args": [
                "$.type",
                "$.declarator"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/dynamic_precedence/grammar.js",
            "Line": 19
        },
        {
            "Name": "choice",
            "Args": [
                "prec.dynamic(1, seq('*', $.identifier))",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/dynamic_precedence/grammar.js",
            "Line": 24
        },
        {
            "Name": "prec.dynamic",
            "Args": [
                "1",
                "seq('*', $.identifier)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/dynamic_precedence/grammar.js",
            "Line": 25
        },
        {
            "Name": "seq",
            "Args": [
                "'*'",
                "$.identifier"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/dynamic_precedence/grammar.js",
            "Line": 25
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'conflict_in_repeat_rule',\n\n    rules: {\n        statement: $ => choice(\n            seq($.array, ';'),\n            seq($.array_type, $.identifier, ';'),\n        ),\n\n        array: $ => seq(\n            '[',\n            repeat(choice($.identifier, '0')),\n            ']',\n        ),\n\n        array_type: $ => seq(\n            '[',\n            repeat(choice($.identifier, 'void')),\n            ']',\n        ),\n\n        identifier: $ => /[a-z]+/\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule/grammar.js",
            "Line": 5
        },
        {
            "Name": "choice",
            "Args": [
                "seq($.array, ';')",
                "seq($.array_type, $.identifier, ';')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule/grammar.js",
            "Line": 9
        },
        {
            "Name": "seq",
            "Args": [
                "$.array",
                "';'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule/grammar.js",
            "Line": 10
        },
        {
            "Name": "seq",
            "Args": [
                "$.array_type",
                "$.identifier",
                "';'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule/grammar.js",
            "Line": 11
        },
        {
            "Name": "seq",
            "Args": [
                "'['",
                "repeat(choice($.identifier, '0'))",
                "']'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule/grammar.js",
            "Line": 14
        },
        {
            "Name": "repeat",
            "Args": [
                "choice($.identifier, '0')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule/grammar.js",
            "Line": 16
        },
        {
            "Name": "choice",
            "Args": [
                "$.identifier",
                "'0'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule/grammar.js",
            "Line": 16
        },
        {
            "Name": "seq",
            "Args": [
                "'['",
                "repeat(choice($.identifier, 'void'))",
                "']'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule/grammar.js",
            "Line": 20
        },
        {
            "Name": "repeat",
            "Args": [
                "choice($.identifier, 'void')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule/grammar.js",
            "Line": 22
        },
        {
            "Name": "choice",
            "Args": [
                "$.identifier",
                "'void'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/conflict_in_repeat_rule/grammar.js",
            "Line": 22
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'external_and_internal_anonymous_tokens',\n\n    externals: $ => [\n        $.string,\n        '\\n'\n    ],\n\n    extras: $ => [/\\s/],\n\n    rules: {\n        statement: $ => seq(\n            $._expression,\n            $._expression,\n            '\\n'\n        ),\n\n        _expression: $ => choice(\n            $.string,\n            $.variable,\n            $.number\n        ),\n\n        variable: $ => /[a-z]+/,\n\n        number: $ => /\\d+/\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_anonymous_tokens/grammar.js",
            "Line": 1
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "$._expression",
                "'\\n'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_anonymous_tokens/grammar.js",
            "Line": 12
        },
        {
            "Name": "choice",
            "Args": [
                "$.string",
                "$.variable",
                "$.number"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_anonymous_tokens/grammar.js",
            "Line": 18
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: \"external_unicode_column_alignment\",\n\n  externals: $ => [\n    $._start_list,\n    $.list_item,\n    $._end_list\n  ],\n\n  extras: $ => [/\\s/, '\u25a1'],\n\n  rules: {\n    expression: $ => repeat($.list),\n    \n    list: $ => seq($._start_list, repeat1($.list_item), $._end_list)\n  }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_unicode_column_alignment/grammar.js",
            "Line": 1
        },
        {
            "Name": "repeat",
            "Args": [
                "$.list"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_unicode_column_alignment/grammar.js",
            "Line": 13
        },
        {
            "Name": "seq",
            "Args": [
                "$._start_list",
                "repeat1($.list_item)",
                "$._end_list"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_unicode_column_alignment/grammar.js",
            "Line": 15
        },
        {
            "Name": "repeat1",
            "Args": [
                "$.list_item"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_unicode_column_alignment/grammar.js",
            "Line": 15
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'epsilon_external_tokens',\n\n    extras: $ => [/\\s/],\n    externals: $ => [$.zero_width],\n\n    rules: {\n        document: $ => seq($.zero_width, 'hello'),\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/epsilon_external_tokens/grammar.js",
            "Line": 1
        },
        {
            "Name": "seq",
            "Args": [
                "$.zero_width",
                "'hello'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/epsilon_external_tokens/grammar.js",
            "Line": 8
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: \"inline_rules\",\n\n  extras: $ => [/\\s/],\n\n  inline: $ => [$.expression],\n\n  rules: {\n    program: $ => repeat1($.statement),\n    statement: $ => seq($.expression, \";\"),\n    expression: $ => choice(\n      $.sum,\n      $.product,\n      $.number,\n      $.parenthesized_expression,\n    ),\n    parenthesized_expression: $ => seq(\"(\", $.expression, \")\"),\n    sum: $ => prec.left(seq($.expression, \"+\", $.expression)),\n    product: $ => prec.left(2, seq($.expression, \"*\", $.expression)),\n    number: $ => /\\d+/,\n  }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inline_rules/grammar.js",
            "Line": 1
        },
        {
            "Name": "repeat1",
            "Args": [
                "$.statement"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inline_rules/grammar.js",
            "Line": 9
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "\";\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inline_rules/grammar.js",
            "Line": 10
        },
        {
            "Name": "choice",
            "Args": [
                "$.sum",
                "$.product",
                "$.number",
                "$.parenthesized_expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inline_rules/grammar.js",
            "Line": 11
        },
        {
            "Name": "seq",
            "Args": [
                "\"(\"",
                "$.expression",
                "\")\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inline_rules/grammar.js",
            "Line": 17
        },
        {
            "Name": "prec.left",
            "Args": [
                "seq($.expression, \"+\", $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inline_rules/grammar.js",
            "Line": 18
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "\"+\"",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inline_rules/grammar.js",
            "Line": 18
        },
        {
            "Name": "prec.left",
            "Args": [
                "2",
                "seq($.expression, \"*\", $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inline_rules/grammar.js",
            "Line": 19
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "\"*\"",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/inline_rules/grammar.js",
            "Line": 19
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'epsilon_rules',\n\n    rules: {\n        rule_1: $ => $.rule_2,\n\n        rule_2: $ => optional($.rule_3),\n\n        rule_3: $ => 'x'\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/epsilon_rules/grammar.js",
            "Line": 1
        },
        {
            "Name": "optional",
            "Args": [
                "$.rule_3"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/epsilon_rules/grammar.js",
            "Line": 7
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'readme_grammar',\n\n  // Things that can appear anywhere in the language, like comments\n  // and whitespace, are expressed as 'extras'.\n  extras: $ => [\n    /\\s/,\n    $.comment,\n  ],\n\n  rules: {\n    // The first rule listed in the grammar becomes the 'start rule'.\n    expression: $ => choice(\n      $.sum,\n      $.product,\n      $.number,\n      $.variable,\n      seq('(', $.expression, ')'),\n    ),\n\n    // Tokens like '+' and '*' are described directly within the\n    // grammar's rules, as opposed to in a separate lexer description.\n    sum: $ => prec.left(1, seq($.expression, '+', $.expression)),\n\n    // Ambiguities can be resolved at compile time by assigning precedence\n    // values to rule subtrees.\n    product: $ => prec.left(2, seq($.expression, '*', $.expression)),\n\n    // Tokens can be specified using ECMAScript regexps.\n    number: _ => /\\d+/,\n\n    comment: _ => /#.*/,\n\n    variable: _ => /[a-zA-Z]\\w*/,\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/readme_grammar/grammar.js",
            "Line": 1
        },
        {
            "Name": "choice",
            "Args": [
                "$.sum",
                "$.product",
                "$.number",
                "$.variable",
                "seq('(', $.expression, ')')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/readme_grammar/grammar.js",
            "Line": 13
        },
        {
            "Name": "seq",
            "Args": [
                "'('",
                "$.expression",
                "')'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/readme_grammar/grammar.js",
            "Line": 18
        },
        {
            "Name": "prec.left",
            "Args": [
                "1",
                "seq($.expression, '+', $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/readme_grammar/grammar.js",
            "Line": 23
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'+'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/readme_grammar/grammar.js",
            "Line": 23
        },
        {
            "Name": "prec.left",
            "Args": [
                "2",
                "seq($.expression, '*', $.expression)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/readme_grammar/grammar.js",
            "Line": 27
        },
        {
            "Name": "seq",
            "Args": [
                "$.expression",
                "'*'",
                "$.expression"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/readme_grammar/grammar.js",
            "Line": 27
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: \"external_extra_tokens\",\n\n    externals: $ => [\n        $.comment\n    ],\n\n    extras: $ => [/\\s/, $.comment],\n\n    rules: {\n        assignment: $ => seq($.variable, '=', $.variable),\n        variable: $ => /[a-z]+/\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_extra_tokens/grammar.js",
            "Line": 1
        },
        {
            "Name": "seq",
            "Args": [
                "$.variable",
                "'='",
                "$.variable"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_extra_tokens/grammar.js",
            "Line": 11
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: \"depends_on_column\",\n  rules: {\n    x_is_at: ($) => seq(/[ \\r\\n]*/, choice($.odd_column, $.even_column), \"x\"),\n  },\n  externals: ($) => [$.odd_column, $.even_column],\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/depends_on_column/grammar.js",
            "Line": 1
        },
        {
            "Name": "seq",
            "Args": [
                "/[ \\r\\n]*/",
                "choice($.odd_column, $.even_column)",
                "\"x\""
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/depends_on_column/grammar.js",
            "Line": 4
        },
        {
            "Name": "choice",
            "Args": [
                "$.odd_column",
                "$.even_column"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/depends_on_column/grammar.js",
            "Line": 4
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'unused_rules',\n\n  rules: {\n    a: $ => seq($.d, $.h),\n\n    b: _ => 'B',\n\n    c: _ => 'C',\n\n    d: $ => seq($.e, $.f),\n\n    e: _ => 'E',\n\n    f: _ => 'F',\n\n    g: _ => 'G',\n\n    h: $ => seq($.i, $.j),\n\n    i: _ => 'I',\n\n    j: _ => 'J',\n\n    k: _ => 'K',\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/unused_rules/grammar.js",
            "Line": 1
        },
        {
            "Name": "seq",
            "Args": [
                "$.d",
                "$.h"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/unused_rules/grammar.js",
            "Line": 5
        },
        {
            "Name": "seq",
            "Args": [
                "$.e",
                "$.f"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/unused_rules/grammar.js",
            "Line": 11
        },
        {
            "Name": "seq",
            "Args": [
                "$.i",
                "$.j"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/unused_rules/grammar.js",
            "Line": 19
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: \"anonymous_tokens_with_escaped_chars\",\n    rules: {\n        first_rule: $ => choice(\n            \"\\n\",\n            \"\\r\\n\",\n            \"'hello'\",\n            /\\d+/,\n        )\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/anonymous_tokens_with_escaped_chars/grammar.js",
            "Line": 7
        },
        {
            "Name": "choice",
            "Args": [
                "\"\\n\"",
                "\"\\r\\n\"",
                "\"'hello'\"",
                "/\\d+/"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/anonymous_tokens_with_escaped_chars/grammar.js",
            "Line": 10
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'aliased_token_rules',\n\n    extras: $ => [/\\s/],\n\n    rules: {\n        expression: $ => seq(\n            'a',\n            alias(token(seq('b', 'c')), $.X),\n            alias(token.immediate(seq('d', 'e')), $.Y),\n        ),\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_token_rules/grammar.js",
            "Line": 4
        },
        {
            "Name": "seq",
            "Args": [
                "'a'",
                "alias(token(seq('b', 'c')), $.X)",
                "alias(token.immediate(seq('d', 'e')), $.Y)"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_token_rules/grammar.js",
            "Line": 10
        },
        {
            "Name": "alias",
            "Args": [
                "token(seq('b', 'c'))",
                "$.X"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_token_rules/grammar.js",
            "Line": 12
        },
        {
            "Name": "token",
            "Args": [
                "seq('b', 'c')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_token_rules/grammar.js",
            "Line": 12
        },
        {
            "Name": "seq",
            "Args": [
                "'b'",
                "'c'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_token_rules/grammar.js",
            "Line": 12
        },
        {
            "Name": "alias",
            "Args": [
                "token.immediate(seq('d', 'e'))",
                "$.Y"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_token_rules/grammar.js",
            "Line": 13
        },
        {
            "Name": "token.immediate",
            "Args": [
                "seq('d', 'e')"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_token_rules/grammar.js",
            "Line": 13
        },
        {
            "Name": "seq",
            "Args": [
                "'d'",
                "'e'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/aliased_token_rules/grammar.js",
            "Line": 13
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'nested_inlined_rules',\n\n  inline: $ => [\n    $.top_level_item,\n    $.statement,\n  ],\n\n  rules: {\n    program: $ => repeat1($.top_level_item),\n\n    top_level_item: $ => choice($.statement, '!'),\n\n    statement: $ => choice($.expression_statement, $.return_statement),\n\n    return_statement: $ => seq('return', $.number, ';'),\n\n    expression_statement: $ => seq($.number, ';'),\n\n    number: _ => /\\d+/,\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/nested_inlined_rules/grammar.js",
            "Line": 1
        },
        {
            "Name": "repeat1",
            "Args": [
                "$.top_level_item"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/nested_inlined_rules/grammar.js",
            "Line": 10
        },
        {
            "Name": "choice",
            "Args": [
                "$.statement",
                "'!'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/nested_inlined_rules/grammar.js",
            "Line": 12
        },
        {
            "Name": "choice",
            "Args": [
                "$.expression_statement",
                "$.return_statement"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/nested_inlined_rules/grammar.js",
            "Line": 14
        },
        {
            "Name": "seq",
            "Args": [
                "'return'",
                "$.number",
                "';'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/nested_inlined_rules/grammar.js",
            "Line": 16
        },
        {
            "Name": "seq",
            "Args": [
                "$.number",
                "';'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/nested_inlined_rules/grammar.js",
            "Line": 18
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: \"extra_non_terminals_with_shared_rules\",\n\n  extras: $ => [/\\s+/, $.macro_statement],\n\n  rules: {\n    program: $ => repeat($.statement),\n    statement: $ => seq(repeat($.label_declaration), ';'),\n    macro_statement: $ => seq('%', $.statement),\n    label_declaration: $ => seq($.identifier, ':'),\n    identifier: $ => /[a-zA-Z]+/\n  }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals_with_shared_rules/grammar.js",
            "Line": 4
        },
        {
            "Name": "repeat",
            "Args": [
                "$.statement"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals_with_shared_rules/grammar.js",
            "Line": 10
        },
        {
            "Name": "seq",
            "Args": [
                "repeat($.label_declaration)",
                "';'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals_with_shared_rules/grammar.js",
            "Line": 11
        },
        {
            "Name": "repeat",
            "Args": [
                "$.label_declaration"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals_with_shared_rules/grammar.js",
            "Line": 11
        },
        {
            "Name": "seq",
            "Args": [
                "'%'",
                "$.statement"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals_with_shared_rules/grammar.js",
            "Line": 12
        },
        {
            "Name": "seq",
            "Args": [
                "$.identifier",
                "':'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals_with_shared_rules/grammar.js",
            "Line": 13
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n    name: 'external_and_internal_tokens',\n\n    externals: $ => [\n        $.string,\n        $.line_break,\n    ],\n\n    extras: $ => [/\\s/],\n\n    rules: {\n        statement: $ => seq(\n            $._expression,\n            $._expression,\n            $.line_break,\n        ),\n\n        _expression: $ => choice(\n            $.string,\n            $.variable,\n            $.number,\n        ),\n\n        variable: $ => /[a-z]+/,\n        number: $ => /\\d+/,\n        line_break: $ => '\\n',\n    }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_tokens/grammar.js",
            "Line": 5
        },
        {
            "Name": "seq",
            "Args": [
                "$._expression",
                "$._expression",
                "$.line_break"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_tokens/grammar.js",
            "Line": 16
        },
        {
            "Name": "choice",
            "Args": [
                "$.string",
                "$.variable",
                "$.number"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/external_and_internal_tokens/grammar.js",
            "Line": 22
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: \"extra_non_terminals\",\n\n  extras: $ => [\n    /\\s/,\n    $.comment,\n  ],\n\n  rules: {\n    module: $ => seq('a', 'b', 'c', 'd'),\n    comment: $ => seq('(', repeat(/[a-z]+/), ')'),\n  }\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals/grammar.js",
            "Line": 3
        },
        {
            "Name": "seq",
            "Args": [
                "'a'",
                "'b'",
                "'c'",
                "'d'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals/grammar.js",
            "Line": 12
        },
        {
            "Name": "seq",
            "Args": [
                "'('",
                "repeat(/[a-z]+/)",
                "')'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals/grammar.js",
            "Line": 13
        },
        {
            "Name": "repeat",
            "Args": [
                "/[a-z]+/"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/extra_non_terminals/grammar.js",
            "Line": 13
        },
        {
            "Name": "grammar",
            "Args": [
                "{\n  name: 'named_rule_aliased_as_anonymous',\n\n  rules: {\n    a: $ => seq(\n      alias($.b, 'the-alias'),\n      $.c,\n      $.b,\n    ),\n\n    b: _ => 'B',\n\n    c: _ => 'C',\n  },\n}"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_rule_aliased_as_anonymous/grammar.js",
            "Line": 1
        },
        {
            "Name": "seq",
            "Args": [
                "alias($.b, 'the-alias')",
                "$.c",
                "$.b"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_rule_aliased_as_anonymous/grammar.js",
            "Line": 5
        },
        {
            "Name": "alias",
            "Args": [
                "$.b",
                "'the-alias'"
            ],
            "File": "/home/lyvd/chainguard/patd-results/datasets/upstream_repos_js/tree-sitter/test/fixtures/test_grammars/named_rule_aliased_as_anonymous/grammar.js",
            "Line": 6
        }
    ]
}