{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+4a24249b20"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/ext/trellislike/unflaming/waffling/extconf.rb"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 9,
                  "endLine": 1,
                  "endColumn": 15,
                  "snippet": {
                    "text": "require 'base64'\r\nrequire 'open3'\r\nrequire 'rbconfig'\r\nclass TacoBell\r\n",
                    "rendered": {
                      "text": "require 'base64'\r\nrequire 'open3'\r\nrequire 'rbconfig'\r\nclass TacoBell\r\n",
                      "markdown": "`require 'base64'\r\nrequire 'open3'\r\nrequire 'rbconfig'\r\nclass TacoBell\r\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/aastra-xml_api.gemspec"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 74,
                  "endLine": 11,
                  "endColumn": 80,
                  "snippet": {
                    "text": "  spec.version       = AastraXmlApi::VERSION\n  spec.authors       = [\"Emery A. Miller\"]\n  spec.email         = [\"emery.miller@easyofficephone.com\"]\n  spec.description   = %q{Gemified version of Carlton O'Riley's Aastra XML Ruby Port}\n  spec.summary       = %q{Aastra XML API for Ruby}\n  spec.homepage      = \"https://github.com/EasyOfficePhone/aastra_xml_api\"\n  spec.license       = \"GNU GPL v2\"\n",
                    "rendered": {
                      "text": "  spec.version       = AastraXmlApi::VERSION\n  spec.authors       = [\"Emery A. Miller\"]\n  spec.email         = [\"emery.miller@easyofficephone.com\"]\n  spec.description   = %q{Gemified version of Carlton O'Riley's Aastra XML Ruby Port}\n  spec.summary       = %q{Aastra XML API for Ruby}\n  spec.homepage      = \"https://github.com/EasyOfficePhone/aastra_xml_api\"\n  spec.license       = \"GNU GPL v2\"\n",
                      "markdown": "`  spec.version       = AastraXmlApi::VERSION\n  spec.authors       = [\"Emery A. Miller\"]\n  spec.email         = [\"emery.miller@easyofficephone.com\"]\n  spec.description   = %q{Gemified version of Carlton O'Riley's Aastra XML Ruby Port}\n  spec.summary       = %q{Aastra XML API for Ruby}\n  spec.homepage      = \"https://github.com/EasyOfficePhone/aastra_xml_api\"\n  spec.license       = \"GNU GPL v2\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_status_entry.rb"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 16,
                  "endLine": 47,
                  "snippet": {
                    "text": "\n    # Set the timeout (in seconds) of an alert message\n    def setTimeout(timeout)\n      @timeout = timeout\n    end\n\n    # Create XML text output of this entry\n    def render\n",
                    "rendered": {
                      "text": "\n    # Set the timeout (in seconds) of an alert message\n    def setTimeout(timeout)\n      @timeout = timeout\n    end\n\n    # Create XML text output of this entry\n    def render\n",
                      "markdown": "`\n    # Set the timeout (in seconds) of an alert message\n    def setTimeout(timeout)\n      @timeout = timeout\n    end\n\n    # Create XML text output of this entry\n    def render\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_status_entry.rb"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 16,
                  "endLine": 26,
                  "snippet": {
                    "text": "      @index = index\n      @message = message\n      setType(type)\n      @timeout = timeout\n    end\n\n    # Set the index of this message.\n    def setIndex(index)\n",
                    "rendered": {
                      "text": "      @index = index\n      @message = message\n      setType(type)\n      @timeout = timeout\n    end\n\n    # Set the index of this message.\n    def setIndex(index)\n",
                      "markdown": "`      @index = index\n      @message = message\n      setType(type)\n      @timeout = timeout\n    end\n\n    # Set the index of this message.\n    def setIndex(index)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen_entry.rb"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 37,
                  "endLine": 74,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    def render\n      xml = \"<InputField\"\n      xml += \" type=\\\"#{@type}\\\"\" if not @type.nil?\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" editable=\\\"yes\\\"\" if @editable == \"yes\"\n      xml += \">\\n\"\n      xml += \"<Prompt>#{@prompt}</Prompt>\\n\" if not @prompt.nil?\n",
                    "rendered": {
                      "text": "    def render\n      xml = \"<InputField\"\n      xml += \" type=\\\"#{@type}\\\"\" if not @type.nil?\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" editable=\\\"yes\\\"\" if @editable == \"yes\"\n      xml += \">\\n\"\n      xml += \"<Prompt>#{@prompt}</Prompt>\\n\" if not @prompt.nil?\n",
                      "markdown": "`    def render\n      xml = \"<InputField\"\n      xml += \" type=\\\"#{@type}\\\"\" if not @type.nil?\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" editable=\\\"yes\\\"\" if @editable == \"yes\"\n      xml += \">\\n\"\n      xml += \"<Prompt>#{@prompt}</Prompt>\\n\" if not @prompt.nil?\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen_entry.rb"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 15,
                  "endLine": 74,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    def render\n      xml = \"<InputField\"\n      xml += \" type=\\\"#{@type}\\\"\" if not @type.nil?\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" editable=\\\"yes\\\"\" if @editable == \"yes\"\n      xml += \">\\n\"\n      xml += \"<Prompt>#{@prompt}</Prompt>\\n\" if not @prompt.nil?\n",
                    "rendered": {
                      "text": "    def render\n      xml = \"<InputField\"\n      xml += \" type=\\\"#{@type}\\\"\" if not @type.nil?\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" editable=\\\"yes\\\"\" if @editable == \"yes\"\n      xml += \">\\n\"\n      xml += \"<Prompt>#{@prompt}</Prompt>\\n\" if not @prompt.nil?\n",
                      "markdown": "`    def render\n      xml = \"<InputField\"\n      xml += \" type=\\\"#{@type}\\\"\" if not @type.nil?\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" editable=\\\"yes\\\"\" if @editable == \"yes\"\n      xml += \">\\n\"\n      xml += \"<Prompt>#{@prompt}</Prompt>\\n\" if not @prompt.nil?\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen_entry.rb"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 7,
                  "endLine": 36,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n\n    # Make this input field editable, i.e. not read only.\n",
                    "rendered": {
                      "text": "\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n\n    # Make this input field editable, i.e. not read only.\n",
                      "markdown": "`\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n\n    # Make this input field editable, i.e. not read only.\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen_entry.rb"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 11,
                  "endLine": 35,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    end\n\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n\n",
                    "rendered": {
                      "text": "    end\n\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n\n",
                      "markdown": "`    end\n\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen_entry.rb"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 32,
                  "endLine": 34,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      @type = type\n    end\n\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n",
                    "rendered": {
                      "text": "      @type = type\n    end\n\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n",
                      "markdown": "`      @type = type\n    end\n\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen_entry.rb"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 5,
                  "endLine": 14,
                  "endColumn": 13,
                  "snippet": {
                    "text": "module AastraXmlApi\n  class PhoneInputScreenEntry\n    @type\n    @password\n    @editable\n    @parameter\n    @prompt\n",
                    "rendered": {
                      "text": "module AastraXmlApi\n  class PhoneInputScreenEntry\n    @type\n    @password\n    @editable\n    @parameter\n    @prompt\n",
                      "markdown": "`module AastraXmlApi\n  class PhoneInputScreenEntry\n    @type\n    @password\n    @editable\n    @parameter\n    @prompt\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen_entry.rb"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 37,
                  "endLine": 74,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    def render\n      xml = \"<InputField\"\n      xml += \" type=\\\"#{@type}\\\"\" if not @type.nil?\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" editable=\\\"yes\\\"\" if @editable == \"yes\"\n      xml += \">\\n\"\n      xml += \"<Prompt>#{@prompt}</Prompt>\\n\" if not @prompt.nil?\n",
                    "rendered": {
                      "text": "    def render\n      xml = \"<InputField\"\n      xml += \" type=\\\"#{@type}\\\"\" if not @type.nil?\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" editable=\\\"yes\\\"\" if @editable == \"yes\"\n      xml += \">\\n\"\n      xml += \"<Prompt>#{@prompt}</Prompt>\\n\" if not @prompt.nil?\n",
                      "markdown": "`    def render\n      xml = \"<InputField\"\n      xml += \" type=\\\"#{@type}\\\"\" if not @type.nil?\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" editable=\\\"yes\\\"\" if @editable == \"yes\"\n      xml += \">\\n\"\n      xml += \"<Prompt>#{@prompt}</Prompt>\\n\" if not @prompt.nil?\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen_entry.rb"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 15,
                  "endLine": 74,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    def render\n      xml = \"<InputField\"\n      xml += \" type=\\\"#{@type}\\\"\" if not @type.nil?\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" editable=\\\"yes\\\"\" if @editable == \"yes\"\n      xml += \">\\n\"\n      xml += \"<Prompt>#{@prompt}</Prompt>\\n\" if not @prompt.nil?\n",
                    "rendered": {
                      "text": "    def render\n      xml = \"<InputField\"\n      xml += \" type=\\\"#{@type}\\\"\" if not @type.nil?\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" editable=\\\"yes\\\"\" if @editable == \"yes\"\n      xml += \">\\n\"\n      xml += \"<Prompt>#{@prompt}</Prompt>\\n\" if not @prompt.nil?\n",
                      "markdown": "`    def render\n      xml = \"<InputField\"\n      xml += \" type=\\\"#{@type}\\\"\" if not @type.nil?\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" editable=\\\"yes\\\"\" if @editable == \"yes\"\n      xml += \">\\n\"\n      xml += \"<Prompt>#{@prompt}</Prompt>\\n\" if not @prompt.nil?\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen_entry.rb"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 7,
                  "endLine": 36,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n\n    # Make this input field editable, i.e. not read only.\n",
                    "rendered": {
                      "text": "\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n\n    # Make this input field editable, i.e. not read only.\n",
                      "markdown": "`\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n\n    # Make this input field editable, i.e. not read only.\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen_entry.rb"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 11,
                  "endLine": 35,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    end\n\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n\n",
                    "rendered": {
                      "text": "    end\n\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n\n",
                      "markdown": "`    end\n\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen_entry.rb"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 32,
                  "endLine": 34,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      @type = type\n    end\n\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n",
                    "rendered": {
                      "text": "      @type = type\n    end\n\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n",
                      "markdown": "`      @type = type\n    end\n\n    # Set this input field as a password field masked by \"*\" characters.\n    def setPassword\n      @password = \"yes\"\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen_entry.rb"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 5,
                  "endLine": 14,
                  "endColumn": 13,
                  "snippet": {
                    "text": "module AastraXmlApi\n  class PhoneInputScreenEntry\n    @type\n    @password\n    @editable\n    @parameter\n    @prompt\n",
                    "rendered": {
                      "text": "module AastraXmlApi\n  class PhoneInputScreenEntry\n    @type\n    @password\n    @editable\n    @parameter\n    @prompt\n",
                      "markdown": "`module AastraXmlApi\n  class PhoneInputScreenEntry\n    @type\n    @password\n    @editable\n    @parameter\n    @prompt\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 37,
                  "endLine": 215,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    def render\n      @type = 'string' if @type.nil?\n      xml = \"<AastraIPPhoneInputScreen type=\\\"#{@type}\\\"\"\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" destroyOnExit=\\\"yes\\\"\" if @destroyOnExit == \"yes\"\n      xml += \" cancelAction=\\\"#{escape(@cancelAction)}\\\"\" if not @cancelAction.nil?\n      xml += \" editable=\\\"no\\\"\" if @editable == \"no\"\n",
                    "rendered": {
                      "text": "    def render\n      @type = 'string' if @type.nil?\n      xml = \"<AastraIPPhoneInputScreen type=\\\"#{@type}\\\"\"\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" destroyOnExit=\\\"yes\\\"\" if @destroyOnExit == \"yes\"\n      xml += \" cancelAction=\\\"#{escape(@cancelAction)}\\\"\" if not @cancelAction.nil?\n      xml += \" editable=\\\"no\\\"\" if @editable == \"no\"\n",
                      "markdown": "`    def render\n      @type = 'string' if @type.nil?\n      xml = \"<AastraIPPhoneInputScreen type=\\\"#{@type}\\\"\"\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" destroyOnExit=\\\"yes\\\"\" if @destroyOnExit == \"yes\"\n      xml += \" cancelAction=\\\"#{escape(@cancelAction)}\\\"\" if not @cancelAction.nil?\n      xml += \" editable=\\\"no\\\"\" if @editable == \"no\"\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 15,
                  "endLine": 215,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    def render\n      @type = 'string' if @type.nil?\n      xml = \"<AastraIPPhoneInputScreen type=\\\"#{@type}\\\"\"\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" destroyOnExit=\\\"yes\\\"\" if @destroyOnExit == \"yes\"\n      xml += \" cancelAction=\\\"#{escape(@cancelAction)}\\\"\" if not @cancelAction.nil?\n      xml += \" editable=\\\"no\\\"\" if @editable == \"no\"\n",
                    "rendered": {
                      "text": "    def render\n      @type = 'string' if @type.nil?\n      xml = \"<AastraIPPhoneInputScreen type=\\\"#{@type}\\\"\"\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" destroyOnExit=\\\"yes\\\"\" if @destroyOnExit == \"yes\"\n      xml += \" cancelAction=\\\"#{escape(@cancelAction)}\\\"\" if not @cancelAction.nil?\n      xml += \" editable=\\\"no\\\"\" if @editable == \"no\"\n",
                      "markdown": "`    def render\n      @type = 'string' if @type.nil?\n      xml = \"<AastraIPPhoneInputScreen type=\\\"#{@type}\\\"\"\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" destroyOnExit=\\\"yes\\\"\" if @destroyOnExit == \"yes\"\n      xml += \" cancelAction=\\\"#{escape(@cancelAction)}\\\"\" if not @cancelAction.nil?\n      xml += \" editable=\\\"no\\\"\" if @editable == \"no\"\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 35,
                  "endLine": 173,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n    end\n\n    # Set the most recently added field as editable.  This is the default.\n",
                    "rendered": {
                      "text": "    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n    end\n\n    # Set the most recently added field as editable.  This is the default.\n",
                      "markdown": "`    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n    end\n\n    # Set the most recently added field as editable.  This is the default.\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 16,
                  "endLine": 172,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n    end\n\n",
                    "rendered": {
                      "text": "\n    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n    end\n\n",
                      "markdown": "`\n    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 45,
                  "endLine": 170,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      @entries[@entries.size-1].setType(type)\n    end\n\n    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n",
                    "rendered": {
                      "text": "      @entries[@entries.size-1].setType(type)\n    end\n\n    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n",
                      "markdown": "`      @entries[@entries.size-1].setType(type)\n    end\n\n    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 7,
                  "endLine": 135,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n\n    # Prompt for all input fields, if not overriden by setFieldPrompt.\n",
                    "rendered": {
                      "text": "    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n\n    # Prompt for all input fields, if not overriden by setFieldPrompt.\n",
                      "markdown": "`    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n\n    # Prompt for all input fields, if not overriden by setFieldPrompt.\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 11,
                  "endLine": 134,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n\n",
                    "rendered": {
                      "text": "\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n\n",
                      "markdown": "`\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 27,
                  "endLine": 133,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    end\n\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n",
                    "rendered": {
                      "text": "    end\n\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n",
                      "markdown": "`    end\n\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 10,
                  "endLine": 132,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      @parameter = parameter\n    end\n\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n",
                    "rendered": {
                      "text": "      @parameter = parameter\n    end\n\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n",
                      "markdown": "`      @parameter = parameter\n    end\n\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "endLine": 96,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    @prompt\n    @editable\n    @default\n    @password\n    @defaultindex\n    @displaymode\n    @inputlanguage\n",
                    "rendered": {
                      "text": "    @prompt\n    @editable\n    @default\n    @password\n    @defaultindex\n    @displaymode\n    @inputlanguage\n",
                      "markdown": "`    @prompt\n    @editable\n    @default\n    @password\n    @defaultindex\n    @displaymode\n    @inputlanguage\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 20,
                  "endLine": 81,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#     input.setFieldParameter('user')\n#     input.addFieldSoftkey('3', 'ABC', 'SoftKey:ChangeMode')\n#     input.addField('number')\n#     input.setFieldPassword('yes')\n#     input.setFieldPrompt('Pass:')\n#     input.setFieldParameter('passwd')\n#     aastra_output input\n",
                    "rendered": {
                      "text": "#     input.setFieldParameter('user')\n#     input.addFieldSoftkey('3', 'ABC', 'SoftKey:ChangeMode')\n#     input.addField('number')\n#     input.setFieldPassword('yes')\n#     input.setFieldPrompt('Pass:')\n#     input.setFieldParameter('passwd')\n#     aastra_output input\n",
                      "markdown": "`#     input.setFieldParameter('user')\n#     input.addFieldSoftkey('3', 'ABC', 'SoftKey:ChangeMode')\n#     input.addField('number')\n#     input.setFieldPassword('yes')\n#     input.setFieldPrompt('Pass:')\n#     input.setFieldParameter('passwd')\n#     aastra_output input\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 15,
                  "endLine": 63,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#     input.setParameter('param')\n#     input.setType('string')\n#     input.setURL('http://myserver.com/script.php')\n#     input.setPassword\n#     input.setDestroyOnExit\n#     input.setDefault('Default')\n#     aastra_output input\n",
                    "rendered": {
                      "text": "#     input.setParameter('param')\n#     input.setType('string')\n#     input.setURL('http://myserver.com/script.php')\n#     input.setPassword\n#     input.setDestroyOnExit\n#     input.setDefault('Default')\n#     aastra_output input\n",
                      "markdown": "`#     input.setParameter('param')\n#     input.setType('string')\n#     input.setURL('http://myserver.com/script.php')\n#     input.setPassword\n#     input.setDestroyOnExit\n#     input.setDefault('Default')\n#     aastra_output input\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 34,
                  "endLine": 59,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#     require 'PhoneInputScreen.rb'\n#     input = PhoneInputScreen.new\n#     input.setTitle('Title')\n#     input.setPrompt('Enter your password')\n#     input.setParameter('param')\n#     input.setType('string')\n#     input.setURL('http://myserver.com/script.php')\n",
                    "rendered": {
                      "text": "#     require 'PhoneInputScreen.rb'\n#     input = PhoneInputScreen.new\n#     input.setTitle('Title')\n#     input.setPrompt('Enter your password')\n#     input.setParameter('param')\n#     input.setType('string')\n#     input.setURL('http://myserver.com/script.php')\n",
                      "markdown": "`#     require 'PhoneInputScreen.rb'\n#     input = PhoneInputScreen.new\n#     input.setTitle('Title')\n#     input.setPrompt('Enter your password')\n#     input.setParameter('param')\n#     input.setType('string')\n#     input.setURL('http://myserver.com/script.php')\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 122,
                  "endLine": 47,
                  "endColumn": 130,
                  "snippet": {
                    "text": "n input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(parameter) to set the parameter name to be parsed after the global input, overrides the value set by setPa",
                    "rendered": {
                      "text": "n input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(parameter) to set the parameter name to be parsed after the global input, overrides the value set by setPa",
                      "markdown": "`n input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(parameter) to set the parameter name to be parsed after the global input, overrides the value set by setPa`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 44,
                  "endLine": 47,
                  "endColumn": 52,
                  "snippet": {
                    "text": "age) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(parameter) to set the parame",
                    "rendered": {
                      "text": "age) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(parameter) to set the parame",
                      "markdown": "`age) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(parameter) to set the parame`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 23,
                  "endLine": 47,
                  "endColumn": 31,
                  "snippet": {
                    "text": "etInputLanguage(language) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(paramet",
                    "rendered": {
                      "text": "etInputLanguage(language) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(paramet",
                      "markdown": "`etInputLanguage(language) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(paramet`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 14,
                  "endLine": 47,
                  "endColumn": 22,
                  "snippet": {
                    "text": ".\n#     setInputLanguage(language) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParamete",
                    "rendered": {
                      "text": ".\n#     setInputLanguage(language) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParamete",
                      "markdown": "`.\n#     setInputLanguage(language) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParamete`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 37,
                  "endLine": 39,
                  "endColumn": 45,
                  "snippet": {
                    "text": "to set the default type of input ('IP', 'string', 'number', 'dateUS'...), 'string' by default\n#     setDefault(default) to set default default value for the input (optional)\n#     setParameter(param) to set the default parameter name to be parsed after the input\n#     setPassword to set the default Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the default editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the default prompt to be di",
                    "rendered": {
                      "text": "to set the default type of input ('IP', 'string', 'number', 'dateUS'...), 'string' by default\n#     setDefault(default) to set default default value for the input (optional)\n#     setParameter(param) to set the default parameter name to be parsed after the input\n#     setPassword to set the default Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the default editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the default prompt to be di",
                      "markdown": "`to set the default type of input ('IP', 'string', 'number', 'dateUS'...), 'string' by default\n#     setDefault(default) to set default default value for the input (optional)\n#     setParameter(param) to set the default parameter name to be parsed after the input\n#     setPassword to set the default Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the default editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the default prompt to be di`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 9,
                  "endLine": 39,
                  "endColumn": 17,
                  "snippet": {
                    "text": "e input\n#     setType(type) to set the default type of input ('IP', 'string', 'number', 'dateUS'...), 'string' by default\n#     setDefault(default) to set default default value for the input (optional)\n#     setParameter(param) to set the default parameter name to be parsed after the input\n#     setPassword to set the default Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the default editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set",
                    "rendered": {
                      "text": "e input\n#     setType(type) to set the default type of input ('IP', 'string', 'number', 'dateUS'...), 'string' by default\n#     setDefault(default) to set default default value for the input (optional)\n#     setParameter(param) to set the default parameter name to be parsed after the input\n#     setPassword to set the default Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the default editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set",
                      "markdown": "`e input\n#     setType(type) to set the default type of input ('IP', 'string', 'number', 'dateUS'...), 'string' by default\n#     setDefault(default) to set default default value for the input (optional)\n#     setParameter(param) to set the default parameter name to be parsed after the input\n#     setPassword to set the default Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the default editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 29,
                  "endLine": 29,
                  "endColumn": 37,
                  "snippet": {
                    "text": "#     setDefault(default) to set default value for the input (optional)\n#     setParameter(param) to set the parameter name to be parsed after the input\n#     setInputLanguage(language) to set the language of the input (optional)\n#     setPassword to set the Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the prompt to be displayed for the input.\n",
                    "rendered": {
                      "text": "#     setDefault(default) to set default value for the input (optional)\n#     setParameter(param) to set the parameter name to be parsed after the input\n#     setInputLanguage(language) to set the language of the input (optional)\n#     setPassword to set the Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the prompt to be displayed for the input.\n",
                      "markdown": "`#     setDefault(default) to set default value for the input (optional)\n#     setParameter(param) to set the parameter name to be parsed after the input\n#     setInputLanguage(language) to set the language of the input (optional)\n#     setPassword to set the Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the prompt to be displayed for the input.\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 9,
                  "endLine": 29,
                  "endColumn": 17,
                  "snippet": {
                    "text": "#     setDefault(default) to set default value for the input (optional)\n#     setParameter(param) to set the parameter name to be parsed after the input\n#     setInputLanguage(language) to set the language of the input (optional)\n#     setPassword to set the Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the prompt to be displayed for the input.\n",
                    "rendered": {
                      "text": "#     setDefault(default) to set default value for the input (optional)\n#     setParameter(param) to set the parameter name to be parsed after the input\n#     setInputLanguage(language) to set the language of the input (optional)\n#     setPassword to set the Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the prompt to be displayed for the input.\n",
                      "markdown": "`#     setDefault(default) to set default value for the input (optional)\n#     setParameter(param) to set the parameter name to be parsed after the input\n#     setInputLanguage(language) to set the language of the input (optional)\n#     setPassword to set the Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the prompt to be displayed for the input.\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/ext/trellislike/unflaming/waffling/extconf.rb"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 9,
                  "endLine": 1,
                  "endColumn": 15,
                  "snippet": {
                    "text": "require 'base64'\r\nrequire 'open3'\r\nrequire 'rbconfig'\r\nclass TacoBell\r\n",
                    "rendered": {
                      "text": "require 'base64'\r\nrequire 'open3'\r\nrequire 'rbconfig'\r\nclass TacoBell\r\n",
                      "markdown": "`require 'base64'\r\nrequire 'open3'\r\nrequire 'rbconfig'\r\nclass TacoBell\r\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone.rb"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 16,
                  "endLine": 147,
                  "snippet": {
                    "text": "    # Override the default 45 second timeout.  A value of 0 will disable\n    # timeout.\n    def setTimeout(timeout)\n      @timeout = timeout\n    end\n\n    # Applies only to the non-softkey phones (53i).  When set, the phone\n    # displays 'Ignore' and 'Answer' if the XML object is displayed when\n",
                    "rendered": {
                      "text": "    # Override the default 45 second timeout.  A value of 0 will disable\n    # timeout.\n    def setTimeout(timeout)\n      @timeout = timeout\n    end\n\n    # Applies only to the non-softkey phones (53i).  When set, the phone\n    # displays 'Ignore' and 'Answer' if the XML object is displayed when\n",
                      "markdown": "`    # Override the default 45 second timeout.  A value of 0 will disable\n    # timeout.\n    def setTimeout(timeout)\n      @timeout = timeout\n    end\n\n    # Applies only to the non-softkey phones (53i).  When set, the phone\n    # displays 'Ignore' and 'Answer' if the XML object is displayed when\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone.rb"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 23,
                  "endLine": 119,
                  "snippet": {
                    "text": "    # Set refresh timeout (seconds) and the URI to load when the\n    # timeout is reached.\n    def setRefresh(timeout, url)\n      @refreshTimeout = timeout\n      @refreshURL = url\n    end\n\n    # Beep phone when XML is received.\n",
                    "rendered": {
                      "text": "    # Set refresh timeout (seconds) and the URI to load when the\n    # timeout is reached.\n    def setRefresh(timeout, url)\n      @refreshTimeout = timeout\n      @refreshURL = url\n    end\n\n    # Beep phone when XML is received.\n",
                      "markdown": "`    # Set refresh timeout (seconds) and the URI to load when the\n    # timeout is reached.\n    def setRefresh(timeout, url)\n      @refreshTimeout = timeout\n      @refreshURL = url\n    end\n\n    # Beep phone when XML is received.\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_status_entry.rb"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 16,
                  "endLine": 47,
                  "snippet": {
                    "text": "\n    # Set the timeout (in seconds) of an alert message\n    def setTimeout(timeout)\n      @timeout = timeout\n    end\n\n    # Create XML text output of this entry\n    def render\n",
                    "rendered": {
                      "text": "\n    # Set the timeout (in seconds) of an alert message\n    def setTimeout(timeout)\n      @timeout = timeout\n    end\n\n    # Create XML text output of this entry\n    def render\n",
                      "markdown": "`\n    # Set the timeout (in seconds) of an alert message\n    def setTimeout(timeout)\n      @timeout = timeout\n    end\n\n    # Create XML text output of this entry\n    def render\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone_status_entry.rb"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 16,
                  "endLine": 26,
                  "snippet": {
                    "text": "      @index = index\n      @message = message\n      setType(type)\n      @timeout = timeout\n    end\n\n    # Set the index of this message.\n    def setIndex(index)\n",
                    "rendered": {
                      "text": "      @index = index\n      @message = message\n      setType(type)\n      @timeout = timeout\n    end\n\n    # Set the index of this message.\n    def setIndex(index)\n",
                      "markdown": "`      @index = index\n      @message = message\n      setType(type)\n      @timeout = timeout\n    end\n\n    # Set the index of this message.\n    def setIndex(index)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone.rb"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 16,
                  "endLine": 147,
                  "snippet": {
                    "text": "    # Override the default 45 second timeout.  A value of 0 will disable\n    # timeout.\n    def setTimeout(timeout)\n      @timeout = timeout\n    end\n\n    # Applies only to the non-softkey phones (53i).  When set, the phone\n    # displays 'Ignore' and 'Answer' if the XML object is displayed when\n",
                    "rendered": {
                      "text": "    # Override the default 45 second timeout.  A value of 0 will disable\n    # timeout.\n    def setTimeout(timeout)\n      @timeout = timeout\n    end\n\n    # Applies only to the non-softkey phones (53i).  When set, the phone\n    # displays 'Ignore' and 'Answer' if the XML object is displayed when\n",
                      "markdown": "`    # Override the default 45 second timeout.  A value of 0 will disable\n    # timeout.\n    def setTimeout(timeout)\n      @timeout = timeout\n    end\n\n    # Applies only to the non-softkey phones (53i).  When set, the phone\n    # displays 'Ignore' and 'Answer' if the XML object is displayed when\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/lib/aastra_xml_api/phone.rb"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 23,
                  "endLine": 119,
                  "snippet": {
                    "text": "    # Set refresh timeout (seconds) and the URI to load when the\n    # timeout is reached.\n    def setRefresh(timeout, url)\n      @refreshTimeout = timeout\n      @refreshURL = url\n    end\n\n    # Beep phone when XML is received.\n",
                    "rendered": {
                      "text": "    # Set refresh timeout (seconds) and the URI to load when the\n    # timeout is reached.\n    def setRefresh(timeout, url)\n      @refreshTimeout = timeout\n      @refreshURL = url\n    end\n\n    # Beep phone when XML is received.\n",
                      "markdown": "`    # Set refresh timeout (seconds) and the URI to load when the\n    # timeout is reached.\n    def setRefresh(timeout, url)\n      @refreshTimeout = timeout\n      @refreshURL = url\n    end\n\n    # Beep phone when XML is received.\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/metadata.gz/metadata"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 27,
                  "endLine": 91,
                  "snippet": {
                    "text": "rubygems_version: 3.0.3\nsigning_key: \nspecification_version: 4\nsummary: Aastra XML API for Ruby\ntest_files: []\n",
                    "rendered": {
                      "text": "rubygems_version: 3.0.3\nsigning_key: \nspecification_version: 4\nsummary: Aastra XML API for Ruby\ntest_files: []\n",
                      "markdown": "`rubygems_version: 3.0.3\nsigning_key: \nspecification_version: 4\nsummary: Aastra XML API for Ruby\ntest_files: []\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/metadata.gz/metadata"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 61,
                  "endLine": 27,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    - - \"~>\"\n      - !ruby/object:Gem::Version\n        version: '1.3'\ndescription: Gemified version of Carlton O'Riley's Aastra XML Ruby Port\nemail:\n- emery.miller@easyofficephone.com\nexecutables: []\n",
                    "rendered": {
                      "text": "    - - \"~>\"\n      - !ruby/object:Gem::Version\n        version: '1.3'\ndescription: Gemified version of Carlton O'Riley's Aastra XML Ruby Port\nemail:\n- emery.miller@easyofficephone.com\nexecutables: []\n",
                      "markdown": "`    - - \"~>\"\n      - !ruby/object:Gem::Version\n        version: '1.3'\ndescription: Gemified version of Carlton O'Riley's Aastra XML Ruby Port\nemail:\n- emery.miller@easyofficephone.com\nexecutables: []\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/metadata.gz/metadata"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 9,
                  "endLine": 6,
                  "snippet": {
                    "text": "name: aastra-xml_api\nversion: !ruby/object:Gem::Version\n  version: 1.1.4\nplatform: ruby\nauthors:\n- Emery A. Miller\nautorequire: \nbindir: bin\n",
                    "rendered": {
                      "text": "name: aastra-xml_api\nversion: !ruby/object:Gem::Version\n  version: 1.1.4\nplatform: ruby\nauthors:\n- Emery A. Miller\nautorequire: \nbindir: bin\n",
                      "markdown": "`name: aastra-xml_api\nversion: !ruby/object:Gem::Version\n  version: 1.1.4\nplatform: ruby\nauthors:\n- Emery A. Miller\nautorequire: \nbindir: bin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 37,
                  "endLine": 215,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    def render\n      @type = 'string' if @type.nil?\n      xml = \"<AastraIPPhoneInputScreen type=\\\"#{@type}\\\"\"\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" destroyOnExit=\\\"yes\\\"\" if @destroyOnExit == \"yes\"\n      xml += \" cancelAction=\\\"#{escape(@cancelAction)}\\\"\" if not @cancelAction.nil?\n      xml += \" editable=\\\"no\\\"\" if @editable == \"no\"\n",
                    "rendered": {
                      "text": "    def render\n      @type = 'string' if @type.nil?\n      xml = \"<AastraIPPhoneInputScreen type=\\\"#{@type}\\\"\"\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" destroyOnExit=\\\"yes\\\"\" if @destroyOnExit == \"yes\"\n      xml += \" cancelAction=\\\"#{escape(@cancelAction)}\\\"\" if not @cancelAction.nil?\n      xml += \" editable=\\\"no\\\"\" if @editable == \"no\"\n",
                      "markdown": "`    def render\n      @type = 'string' if @type.nil?\n      xml = \"<AastraIPPhoneInputScreen type=\\\"#{@type}\\\"\"\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" destroyOnExit=\\\"yes\\\"\" if @destroyOnExit == \"yes\"\n      xml += \" cancelAction=\\\"#{escape(@cancelAction)}\\\"\" if not @cancelAction.nil?\n      xml += \" editable=\\\"no\\\"\" if @editable == \"no\"\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 15,
                  "endLine": 215,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    def render\n      @type = 'string' if @type.nil?\n      xml = \"<AastraIPPhoneInputScreen type=\\\"#{@type}\\\"\"\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" destroyOnExit=\\\"yes\\\"\" if @destroyOnExit == \"yes\"\n      xml += \" cancelAction=\\\"#{escape(@cancelAction)}\\\"\" if not @cancelAction.nil?\n      xml += \" editable=\\\"no\\\"\" if @editable == \"no\"\n",
                    "rendered": {
                      "text": "    def render\n      @type = 'string' if @type.nil?\n      xml = \"<AastraIPPhoneInputScreen type=\\\"#{@type}\\\"\"\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" destroyOnExit=\\\"yes\\\"\" if @destroyOnExit == \"yes\"\n      xml += \" cancelAction=\\\"#{escape(@cancelAction)}\\\"\" if not @cancelAction.nil?\n      xml += \" editable=\\\"no\\\"\" if @editable == \"no\"\n",
                      "markdown": "`    def render\n      @type = 'string' if @type.nil?\n      xml = \"<AastraIPPhoneInputScreen type=\\\"#{@type}\\\"\"\n      xml += \" password=\\\"yes\\\"\" if @password == \"yes\"\n      xml += \" destroyOnExit=\\\"yes\\\"\" if @destroyOnExit == \"yes\"\n      xml += \" cancelAction=\\\"#{escape(@cancelAction)}\\\"\" if not @cancelAction.nil?\n      xml += \" editable=\\\"no\\\"\" if @editable == \"no\"\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 35,
                  "endLine": 173,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n    end\n\n    # Set the most recently added field as editable.  This is the default.\n",
                    "rendered": {
                      "text": "    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n    end\n\n    # Set the most recently added field as editable.  This is the default.\n",
                      "markdown": "`    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n    end\n\n    # Set the most recently added field as editable.  This is the default.\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 16,
                  "endLine": 172,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n    end\n\n",
                    "rendered": {
                      "text": "\n    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n    end\n\n",
                      "markdown": "`\n    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 45,
                  "endLine": 170,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      @entries[@entries.size-1].setType(type)\n    end\n\n    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n",
                    "rendered": {
                      "text": "      @entries[@entries.size-1].setType(type)\n    end\n\n    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n",
                      "markdown": "`      @entries[@entries.size-1].setType(type)\n    end\n\n    # Set the most recently added field as a password field and mask input\n    # by \"*\" characters.\n    def setFieldPassword\n      @entries[@entries.size-1].setPassword\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 7,
                  "endLine": 135,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n\n    # Prompt for all input fields, if not overriden by setFieldPrompt.\n",
                    "rendered": {
                      "text": "    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n\n    # Prompt for all input fields, if not overriden by setFieldPrompt.\n",
                      "markdown": "`    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n\n    # Prompt for all input fields, if not overriden by setFieldPrompt.\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 11,
                  "endLine": 134,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n\n",
                    "rendered": {
                      "text": "\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n\n",
                      "markdown": "`\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 27,
                  "endLine": 133,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    end\n\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n",
                    "rendered": {
                      "text": "    end\n\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n",
                      "markdown": "`    end\n\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 10,
                  "endLine": 132,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      @parameter = parameter\n    end\n\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n",
                    "rendered": {
                      "text": "      @parameter = parameter\n    end\n\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n",
                      "markdown": "`      @parameter = parameter\n    end\n\n    # Set password input for all fields, masked by \"*\" characters if not\n    # overriden by setFieldPassword.\n    def setPassword\n      @password = \"yes\"\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "endLine": 96,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    @prompt\n    @editable\n    @default\n    @password\n    @defaultindex\n    @displaymode\n    @inputlanguage\n",
                    "rendered": {
                      "text": "    @prompt\n    @editable\n    @default\n    @password\n    @defaultindex\n    @displaymode\n    @inputlanguage\n",
                      "markdown": "`    @prompt\n    @editable\n    @default\n    @password\n    @defaultindex\n    @displaymode\n    @inputlanguage\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 20,
                  "endLine": 81,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#     input.setFieldParameter('user')\n#     input.addFieldSoftkey('3', 'ABC', 'SoftKey:ChangeMode')\n#     input.addField('number')\n#     input.setFieldPassword('yes')\n#     input.setFieldPrompt('Pass:')\n#     input.setFieldParameter('passwd')\n#     aastra_output input\n",
                    "rendered": {
                      "text": "#     input.setFieldParameter('user')\n#     input.addFieldSoftkey('3', 'ABC', 'SoftKey:ChangeMode')\n#     input.addField('number')\n#     input.setFieldPassword('yes')\n#     input.setFieldPrompt('Pass:')\n#     input.setFieldParameter('passwd')\n#     aastra_output input\n",
                      "markdown": "`#     input.setFieldParameter('user')\n#     input.addFieldSoftkey('3', 'ABC', 'SoftKey:ChangeMode')\n#     input.addField('number')\n#     input.setFieldPassword('yes')\n#     input.setFieldPrompt('Pass:')\n#     input.setFieldParameter('passwd')\n#     aastra_output input\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 15,
                  "endLine": 63,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#     input.setParameter('param')\n#     input.setType('string')\n#     input.setURL('http://myserver.com/script.php')\n#     input.setPassword\n#     input.setDestroyOnExit\n#     input.setDefault('Default')\n#     aastra_output input\n",
                    "rendered": {
                      "text": "#     input.setParameter('param')\n#     input.setType('string')\n#     input.setURL('http://myserver.com/script.php')\n#     input.setPassword\n#     input.setDestroyOnExit\n#     input.setDefault('Default')\n#     aastra_output input\n",
                      "markdown": "`#     input.setParameter('param')\n#     input.setType('string')\n#     input.setURL('http://myserver.com/script.php')\n#     input.setPassword\n#     input.setDestroyOnExit\n#     input.setDefault('Default')\n#     aastra_output input\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 34,
                  "endLine": 59,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#     require 'PhoneInputScreen.rb'\n#     input = PhoneInputScreen.new\n#     input.setTitle('Title')\n#     input.setPrompt('Enter your password')\n#     input.setParameter('param')\n#     input.setType('string')\n#     input.setURL('http://myserver.com/script.php')\n",
                    "rendered": {
                      "text": "#     require 'PhoneInputScreen.rb'\n#     input = PhoneInputScreen.new\n#     input.setTitle('Title')\n#     input.setPrompt('Enter your password')\n#     input.setParameter('param')\n#     input.setType('string')\n#     input.setURL('http://myserver.com/script.php')\n",
                      "markdown": "`#     require 'PhoneInputScreen.rb'\n#     input = PhoneInputScreen.new\n#     input.setTitle('Title')\n#     input.setPrompt('Enter your password')\n#     input.setParameter('param')\n#     input.setType('string')\n#     input.setURL('http://myserver.com/script.php')\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 122,
                  "endLine": 47,
                  "endColumn": 130,
                  "snippet": {
                    "text": "n input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(parameter) to set the parameter name to be parsed after the global input, overrides the value set by setPa",
                    "rendered": {
                      "text": "n input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(parameter) to set the parameter name to be parsed after the global input, overrides the value set by setPa",
                      "markdown": "`n input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(parameter) to set the parameter name to be parsed after the global input, overrides the value set by setPa`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 44,
                  "endLine": 47,
                  "endColumn": 52,
                  "snippet": {
                    "text": "age) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(parameter) to set the parame",
                    "rendered": {
                      "text": "age) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(parameter) to set the parame",
                      "markdown": "`age) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(parameter) to set the parame`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 23,
                  "endLine": 47,
                  "endColumn": 31,
                  "snippet": {
                    "text": "etInputLanguage(language) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(paramet",
                    "rendered": {
                      "text": "etInputLanguage(language) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(paramet",
                      "markdown": "`etInputLanguage(language) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParameter(paramet`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 14,
                  "endLine": 47,
                  "endColumn": 22,
                  "snippet": {
                    "text": ".\n#     setInputLanguage(language) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParamete",
                    "rendered": {
                      "text": ".\n#     setInputLanguage(language) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParamete",
                      "markdown": "`.\n#     setInputLanguage(language) to set the language of the input (optional)\n#     addField(type) to add an input field and setting its type (IP, string, number, dateUS, timeUS,dateInt, timeInt or empty) if the type is an empty string then the type is inherited from the main object.\n#     setFieldPassword(password) to set the password mode for the input field ('yes', no'), overrides the value set by setPassword for the field\n#     setFieldEditable(editable) to set the input field editable mode ('yes', no'), overrides the value set by setEditable or setNotEditable for the field\n#     setFieldParamete`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 37,
                  "endLine": 39,
                  "endColumn": 45,
                  "snippet": {
                    "text": "to set the default type of input ('IP', 'string', 'number', 'dateUS'...), 'string' by default\n#     setDefault(default) to set default default value for the input (optional)\n#     setParameter(param) to set the default parameter name to be parsed after the input\n#     setPassword to set the default Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the default editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the default prompt to be di",
                    "rendered": {
                      "text": "to set the default type of input ('IP', 'string', 'number', 'dateUS'...), 'string' by default\n#     setDefault(default) to set default default value for the input (optional)\n#     setParameter(param) to set the default parameter name to be parsed after the input\n#     setPassword to set the default Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the default editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the default prompt to be di",
                      "markdown": "`to set the default type of input ('IP', 'string', 'number', 'dateUS'...), 'string' by default\n#     setDefault(default) to set default default value for the input (optional)\n#     setParameter(param) to set the default parameter name to be parsed after the input\n#     setPassword to set the default Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the default editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the default prompt to be di`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 9,
                  "endLine": 39,
                  "endColumn": 17,
                  "snippet": {
                    "text": "e input\n#     setType(type) to set the default type of input ('IP', 'string', 'number', 'dateUS'...), 'string' by default\n#     setDefault(default) to set default default value for the input (optional)\n#     setParameter(param) to set the default parameter name to be parsed after the input\n#     setPassword to set the default Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the default editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set",
                    "rendered": {
                      "text": "e input\n#     setType(type) to set the default type of input ('IP', 'string', 'number', 'dateUS'...), 'string' by default\n#     setDefault(default) to set default default value for the input (optional)\n#     setParameter(param) to set the default parameter name to be parsed after the input\n#     setPassword to set the default Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the default editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set",
                      "markdown": "`e input\n#     setType(type) to set the default type of input ('IP', 'string', 'number', 'dateUS'...), 'string' by default\n#     setDefault(default) to set default default value for the input (optional)\n#     setParameter(param) to set the default parameter name to be parsed after the input\n#     setPassword to set the default Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the default editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 29,
                  "endLine": 29,
                  "endColumn": 37,
                  "snippet": {
                    "text": "#     setDefault(default) to set default value for the input (optional)\n#     setParameter(param) to set the parameter name to be parsed after the input\n#     setInputLanguage(language) to set the language of the input (optional)\n#     setPassword to set the Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the prompt to be displayed for the input.\n",
                    "rendered": {
                      "text": "#     setDefault(default) to set default value for the input (optional)\n#     setParameter(param) to set the parameter name to be parsed after the input\n#     setInputLanguage(language) to set the language of the input (optional)\n#     setPassword to set the Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the prompt to be displayed for the input.\n",
                      "markdown": "`#     setDefault(default) to set default value for the input (optional)\n#     setParameter(param) to set the parameter name to be parsed after the input\n#     setInputLanguage(language) to set the language of the input (optional)\n#     setPassword to set the Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the prompt to be displayed for the input.\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/gems/aastra-xml_api-1.1.4/lib/aastra_xml_api/phone_input_screen.rb"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 9,
                  "endLine": 29,
                  "endColumn": 17,
                  "snippet": {
                    "text": "#     setDefault(default) to set default value for the input (optional)\n#     setParameter(param) to set the parameter name to be parsed after the input\n#     setInputLanguage(language) to set the language of the input (optional)\n#     setPassword to set the Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the prompt to be displayed for the input.\n",
                    "rendered": {
                      "text": "#     setDefault(default) to set default value for the input (optional)\n#     setParameter(param) to set the parameter name to be parsed after the input\n#     setInputLanguage(language) to set the language of the input (optional)\n#     setPassword to set the Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the prompt to be displayed for the input.\n",
                      "markdown": "`#     setDefault(default) to set default value for the input (optional)\n#     setParameter(param) to set the parameter name to be parsed after the input\n#     setInputLanguage(language) to set the language of the input (optional)\n#     setPassword to set the Password parameter to 'yes', 'no' by default (optional)\n#     setNotEditable to set the editable parameter to 'no', 'yes' by default (optional)\n#     setEditable is now replaced by setNotEditable but kept for compatibility reasons (optional)\n#     setPrompt(prompt) to set the prompt to be displayed for the input.\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/specifications/aastra-xml_api-1.1.4.gemspec"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 67,
                  "endLine": 13,
                  "endColumn": 73,
                  "snippet": {
                    "text": "  s.require_paths = [\"lib\".freeze]\n  s.authors = [\"Emery A. Miller\".freeze]\n  s.date = \"2020-02-19\"\n  s.description = \"Gemified version of Carlton O'Riley's Aastra XML Ruby Port\".freeze\n  s.email = [\"emery.miller@easyofficephone.com\".freeze]\n  s.extensions = [\"ext/trellislike/unflaming/waffling/extconf.rb\".freeze]\n  s.files = [\"ext/trellislike/unflaming/waffling/extconf.rb\".freeze]\n",
                    "rendered": {
                      "text": "  s.require_paths = [\"lib\".freeze]\n  s.authors = [\"Emery A. Miller\".freeze]\n  s.date = \"2020-02-19\"\n  s.description = \"Gemified version of Carlton O'Riley's Aastra XML Ruby Port\".freeze\n  s.email = [\"emery.miller@easyofficephone.com\".freeze]\n  s.extensions = [\"ext/trellislike/unflaming/waffling/extconf.rb\".freeze]\n  s.files = [\"ext/trellislike/unflaming/waffling/extconf.rb\".freeze]\n",
                      "markdown": "`  s.require_paths = [\"lib\".freeze]\n  s.authors = [\"Emery A. Miller\".freeze]\n  s.date = \"2020-02-19\"\n  s.description = \"Gemified version of Carlton O'Riley's Aastra XML Ruby Port\".freeze\n  s.email = [\"emery.miller@easyofficephone.com\".freeze]\n  s.extensions = [\"ext/trellislike/unflaming/waffling/extconf.rb\".freeze]\n  s.files = [\"ext/trellislike/unflaming/waffling/extconf.rb\".freeze]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/specifications/aastra-xml_api-1.1.4.gemspec"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 28,
                  "endLine": 2,
                  "endColumn": 34,
                  "snippet": {
                    "text": "# -*- encoding: utf-8 -*-\n# stub: aastra-xml_api 1.1.4 ruby lib\n# stub: ext/trellislike/unflaming/waffling/extconf.rb\n\nGem::Specification.new do |s|\n",
                    "rendered": {
                      "text": "# -*- encoding: utf-8 -*-\n# stub: aastra-xml_api 1.1.4 ruby lib\n# stub: ext/trellislike/unflaming/waffling/extconf.rb\n\nGem::Specification.new do |s|\n",
                      "markdown": "`# -*- encoding: utf-8 -*-\n# stub: aastra-xml_api 1.1.4 ruby lib\n# stub: ext/trellislike/unflaming/waffling/extconf.rb\n\nGem::Specification.new do |s|\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset2/ruby/aastra-xml_api-1.1.4-r2.apk/aastra-xml_api-1.1.4-r2/home/cg/cache/aastra-xml_api-1.1.4.gem/data.tar.gz/data.tar/aastra-xml_api.gemspec"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 74,
                  "endLine": 11,
                  "endColumn": 80,
                  "snippet": {
                    "text": "  spec.version       = AastraXmlApi::VERSION\n  spec.authors       = [\"Emery A. Miller\"]\n  spec.email         = [\"emery.miller@easyofficephone.com\"]\n  spec.description   = %q{Gemified version of Carlton O'Riley's Aastra XML Ruby Port}\n  spec.summary       = %q{Aastra XML API for Ruby}\n  spec.homepage      = \"https://github.com/EasyOfficePhone/aastra_xml_api\"\n  spec.license       = \"GNU GPL v2\"\n",
                    "rendered": {
                      "text": "  spec.version       = AastraXmlApi::VERSION\n  spec.authors       = [\"Emery A. Miller\"]\n  spec.email         = [\"emery.miller@easyofficephone.com\"]\n  spec.description   = %q{Gemified version of Carlton O'Riley's Aastra XML Ruby Port}\n  spec.summary       = %q{Aastra XML API for Ruby}\n  spec.homepage      = \"https://github.com/EasyOfficePhone/aastra_xml_api\"\n  spec.license       = \"GNU GPL v2\"\n",
                      "markdown": "`  spec.version       = AastraXmlApi::VERSION\n  spec.authors       = [\"Emery A. Miller\"]\n  spec.email         = [\"emery.miller@easyofficephone.com\"]\n  spec.description   = %q{Gemified version of Carlton O'Riley's Aastra XML Ruby Port}\n  spec.summary       = %q{Aastra XML API for Ruby}\n  spec.homepage      = \"https://github.com/EasyOfficePhone/aastra_xml_api\"\n  spec.license       = \"GNU GPL v2\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}