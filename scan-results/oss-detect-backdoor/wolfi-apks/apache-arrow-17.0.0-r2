{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 2394,
                  "startColumn": 22,
                  "endLine": 2394,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    if name is None:\n        return\n    name = name.partition('<')[0]  # Remove template parameters\n    printer = printers.get(name)\n    if printer is not None:\n        return printer(name, val)\n\n",
                    "rendered": {
                      "text": "    if name is None:\n        return\n    name = name.partition('<')[0]  # Remove template parameters\n    printer = printers.get(name)\n    if printer is not None:\n        return printer(name, val)\n\n",
                      "markdown": "`    if name is None:\n        return\n    name = name.partition('<')[0]  # Remove template parameters\n    printer = printers.get(name)\n    if printer is not None:\n        return printer(name, val)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 2132,
                  "startColumn": 43,
                  "endLine": 2132,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    def _format_error(self, state):\n        code = int(state['code'])\n        codename = self._status_codes_by_id.get(code)\n        if codename is not None:\n            s = f\"arrow::Status::{codename}(\"\n        else:\n",
                    "rendered": {
                      "text": "\n    def _format_error(self, state):\n        code = int(state['code'])\n        codename = self._status_codes_by_id.get(code)\n        if codename is not None:\n            s = f\"arrow::Status::{codename}(\"\n        else:\n",
                      "markdown": "`\n    def _format_error(self, state):\n        code = int(state['code'])\n        codename = self._status_codes_by_id.get(code)\n        if codename is not None:\n            s = f\"arrow::Status::{codename}(\"\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 2120,
                  "startColumn": 47,
                  "endLine": 2120,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        self.val = val\n\n    def _format_detail(self, state):\n        detail_ptr = SharedPtr(state['detail']).get()\n        if int(detail_ptr) == 0:\n            return None\n        detail_id = CString(gdb.parse_and_eval(\n",
                    "rendered": {
                      "text": "        self.val = val\n\n    def _format_detail(self, state):\n        detail_ptr = SharedPtr(state['detail']).get()\n        if int(detail_ptr) == 0:\n            return None\n        detail_id = CString(gdb.parse_and_eval(\n",
                      "markdown": "`        self.val = val\n\n    def _format_detail(self, state):\n        detail_ptr = SharedPtr(state['detail']).get()\n        if int(detail_ptr) == 0:\n            return None\n        detail_id = CString(gdb.parse_and_eval(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 2086,
                  "startColumn": 30,
                  "endLine": 2086,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    \"\"\"\n    Lookup a type class (an instance of DataTypeClass) by its type id.\n    \"\"\"\n    traits = type_traits_by_id.get(type_id)\n    if traits is not None:\n        return traits.factory(traits.name)\n    return None\n",
                    "rendered": {
                      "text": "    \"\"\"\n    Lookup a type class (an instance of DataTypeClass) by its type id.\n    \"\"\"\n    traits = type_traits_by_id.get(type_id)\n    if traits is not None:\n        return traits.factory(traits.name)\n    return None\n",
                      "markdown": "`    \"\"\"\n    Lookup a type class (an instance of DataTypeClass) by its type id.\n    \"\"\"\n    traits = type_traits_by_id.get(type_id)\n    if traits is not None:\n        return traits.factory(traits.name)\n    return None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 1575,
                  "startColumn": 42,
                  "endLine": 1575,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n    def _buffer(self, index, type_id=None):\n        buffers = StdVector(self.val['buffers'])\n        bufptr = SharedPtr(buffers[index]).get()\n        if int(bufptr) == 0:\n            return None\n        if type_id is not None:\n",
                    "rendered": {
                      "text": "\n    def _buffer(self, index, type_id=None):\n        buffers = StdVector(self.val['buffers'])\n        bufptr = SharedPtr(buffers[index]).get()\n        if int(bufptr) == 0:\n            return None\n        if type_id is not None:\n",
                      "markdown": "`\n    def _buffer(self, index, type_id=None):\n        buffers = StdVector(self.val['buffers'])\n        bufptr = SharedPtr(buffers[index]).get()\n        if int(bufptr) == 0:\n            return None\n        if type_id is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 1417,
                  "startColumn": 55,
                  "endLine": 1417,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n    def to_string(self):\n        size = self.type['byte_width_']\n        bufptr = BufferPtr(SharedPtr(self.val['value']).get())\n        if bufptr.data is None:\n            return f\"{self._format_type()} of size {size}, <unallocated>\"\n        nullness = '' if self.is_valid else 'null with '\n",
                    "rendered": {
                      "text": "\n    def to_string(self):\n        size = self.type['byte_width_']\n        bufptr = BufferPtr(SharedPtr(self.val['value']).get())\n        if bufptr.data is None:\n            return f\"{self._format_type()} of size {size}, <unallocated>\"\n        nullness = '' if self.is_valid else 'null with '\n",
                      "markdown": "`\n    def to_string(self):\n        size = self.type['byte_width_']\n        bufptr = BufferPtr(SharedPtr(self.val['value']).get())\n        if bufptr.data is None:\n            return f\"{self._format_type()} of size {size}, <unallocated>\"\n        nullness = '' if self.is_valid else 'null with '\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 1402,
                  "startColumn": 55,
                  "endLine": 1402,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    def to_string(self):\n        if not self.is_valid:\n            return self._format_null()\n        bufptr = BufferPtr(SharedPtr(self.val['value']).get())\n        size = bufptr.size\n        if size is None:\n            return f\"{self._format_type()} of value <unallocated>\"\n",
                    "rendered": {
                      "text": "    def to_string(self):\n        if not self.is_valid:\n            return self._format_null()\n        bufptr = BufferPtr(SharedPtr(self.val['value']).get())\n        size = bufptr.size\n        if size is None:\n            return f\"{self._format_type()} of value <unallocated>\"\n",
                      "markdown": "`    def to_string(self):\n        if not self.is_valid:\n            return self._format_null()\n        bufptr = BufferPtr(SharedPtr(self.val['value']).get())\n        size = bufptr.size\n        if size is None:\n            return f\"{self._format_type()} of value <unallocated>\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 1075,
                  "startColumn": 22,
                  "endLine": 1075,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        return FieldVector(self.val['children_'])\n\n    def _format_type(self):\n        r = type_reprs.get(self.name, self.name)\n        return f\"arrow::{r}\"\n\n    def _for_evaluation(self):\n",
                    "rendered": {
                      "text": "        return FieldVector(self.val['children_'])\n\n    def _format_type(self):\n        r = type_reprs.get(self.name, self.name)\n        return f\"arrow::{r}\"\n\n    def _for_evaluation(self):\n",
                      "markdown": "`        return FieldVector(self.val['children_'])\n\n    def _format_type(self):\n        r = type_reprs.get(self.name, self.name)\n        return f\"arrow::{r}\"\n\n    def _for_evaluation(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 33,
                  "endLine": 846,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    \"\"\"\n\n    def __init__(self, val):\n        self.ptr = SharedPtr(val).get()\n        self.is_null = int(self.ptr) == 0\n        self.md = None if self.is_null else Metadata(self.ptr.dereference())\n\n",
                    "rendered": {
                      "text": "    \"\"\"\n\n    def __init__(self, val):\n        self.ptr = SharedPtr(val).get()\n        self.is_null = int(self.ptr) == 0\n        self.md = None if self.is_null else Metadata(self.ptr.dereference())\n\n",
                      "markdown": "`    \"\"\"\n\n    def __init__(self, val):\n        self.ptr = SharedPtr(val).get()\n        self.is_null = int(self.ptr) == 0\n        self.md = None if self.is_null else Metadata(self.ptr.dereference())\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 22,
                  "endLine": 535,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        Run `eval_format` with the value at `index`.\n\n        For example, if `eval_format` is \"{}.get()\", this will evaluate\n        \"{self[index]}.get()\".\n        \"\"\"\n        self._check_index(index)\n        return gdb.parse_and_eval(\n",
                    "rendered": {
                      "text": "        Run `eval_format` with the value at `index`.\n\n        For example, if `eval_format` is \"{}.get()\", this will evaluate\n        \"{self[index]}.get()\".\n        \"\"\"\n        self._check_index(index)\n        return gdb.parse_and_eval(\n",
                      "markdown": "`        Run `eval_format` with the value at `index`.\n\n        For example, if `eval_format` is \"{}.get()\", this will evaluate\n        \"{self[index]}.get()\".\n        \"\"\"\n        self._check_index(index)\n        return gdb.parse_and_eval(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 44,
                  "endLine": 534,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        \"\"\"\n        Run `eval_format` with the value at `index`.\n\n        For example, if `eval_format` is \"{}.get()\", this will evaluate\n        \"{self[index]}.get()\".\n        \"\"\"\n        self._check_index(index)\n",
                    "rendered": {
                      "text": "        \"\"\"\n        Run `eval_format` with the value at `index`.\n\n        For example, if `eval_format` is \"{}.get()\", this will evaluate\n        \"{self[index]}.get()\".\n        \"\"\"\n        self._check_index(index)\n",
                      "markdown": "`        \"\"\"\n        Run `eval_format` with the value at `index`.\n\n        For example, if `eval_format` is \"{}.get()\", this will evaluate\n        \"{self[index]}.get()\".\n        \"\"\"\n        self._check_index(index)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 66,
                  "endLine": 386,
                  "endColumn": 71,
                  "snippet": {
                    "text": "            self._ptr = val['_M_ptr']\n        except gdb.error:\n            # fallback for other C++ standard libraries\n            self._ptr = gdb.parse_and_eval(f\"{for_evaluation(val)}.get()\")\n\n    def get(self):\n        \"\"\"\n",
                    "rendered": {
                      "text": "            self._ptr = val['_M_ptr']\n        except gdb.error:\n            # fallback for other C++ standard libraries\n            self._ptr = gdb.parse_and_eval(f\"{for_evaluation(val)}.get()\")\n\n    def get(self):\n        \"\"\"\n",
                      "markdown": "`            self._ptr = val['_M_ptr']\n        except gdb.error:\n            # fallback for other C++ standard libraries\n            self._ptr = gdb.parse_and_eval(f\"{for_evaluation(val)}.get()\")\n\n    def get(self):\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 36,
                  "endLine": 562,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n    def __getitem__(self, index):\n        \"\"\"\n        Dereference the Field object at this index.\n        \"\"\"\n        return Field(deref(super().__getitem__(index)))\n\n",
                    "rendered": {
                      "text": "\n    def __getitem__(self, index):\n        \"\"\"\n        Dereference the Field object at this index.\n        \"\"\"\n        return Field(deref(super().__getitem__(index)))\n\n",
                      "markdown": "`\n    def __getitem__(self, index):\n        \"\"\"\n        Dereference the Field object at this index.\n        \"\"\"\n        return Field(deref(super().__getitem__(index)))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 40,
                  "endLine": 532,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n    def eval_at(self, index, eval_format):\n        \"\"\"\n        Run `eval_format` with the value at `index`.\n\n        For example, if `eval_format` is \"{}.get()\", this will evaluate\n        \"{self[index]}.get()\".\n",
                    "rendered": {
                      "text": "\n    def eval_at(self, index, eval_format):\n        \"\"\"\n        Run `eval_format` with the value at `index`.\n\n        For example, if `eval_format` is \"{}.get()\", this will evaluate\n        \"{self[index]}.get()\".\n",
                      "markdown": "`\n    def eval_at(self, index, eval_format):\n        \"\"\"\n        Run `eval_format` with the value at `index`.\n\n        For example, if `eval_format` is \"{}.get()\", this will evaluate\n        \"{self[index]}.get()\".\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 60,
                  "endLine": 410,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    def __init__(self, val):\n        self.val = val\n        ty = self.val.type.template_argument(0)\n        # XXX This assumes that the embedded T* pointer lies at the start\n        # of std::unique_ptr<T>.\n        self._ptr = self.val.address.reinterpret_cast(ty.pointer().pointer())\n\n",
                    "rendered": {
                      "text": "    def __init__(self, val):\n        self.val = val\n        ty = self.val.type.template_argument(0)\n        # XXX This assumes that the embedded T* pointer lies at the start\n        # of std::unique_ptr<T>.\n        self._ptr = self.val.address.reinterpret_cast(ty.pointer().pointer())\n\n",
                      "markdown": "`    def __init__(self, val):\n        self.val = val\n        ty = self.val.type.template_argument(0)\n        # XXX This assumes that the embedded T* pointer lies at the start\n        # of std::unique_ptr<T>.\n        self._ptr = self.val.address.reinterpret_cast(ty.pointer().pointer())\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 14,
                  "endLine": 38,
                  "endColumn": 18,
                  "snippet": {
                    "text": "assert sys.version_info[0] >= 3, \"Arrow GDB extension needs Python 3+\"\n\n\n# gdb API docs at https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html#Python-API\n\n\n_type_ids = [\n",
                    "rendered": {
                      "text": "assert sys.version_info[0] >= 3, \"Arrow GDB extension needs Python 3+\"\n\n\n# gdb API docs at https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html#Python-API\n\n\n_type_ids = [\n",
                      "markdown": "`assert sys.version_info[0] >= 3, \"Arrow GDB extension needs Python 3+\"\n\n\n# gdb API docs at https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html#Python-API\n\n\n_type_ids = [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 57,
                  "endLine": 8,
                  "snippet": {
                    "text": "# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n",
                    "rendered": {
                      "text": "# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n",
                      "markdown": "`# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 2445,
                  "startColumn": 17,
                  "endLine": 2446,
                  "snippet": {
                    "text": "    #   will be tied to the inferior being debugged.\n    objfile = gdb.current_objfile()\n    if objfile is None:\n        objfile = gdb\n\n    objfile.pretty_printers.append(arrow_pretty_print)\n\n\n",
                    "rendered": {
                      "text": "    #   will be tied to the inferior being debugged.\n    objfile = gdb.current_objfile()\n    if objfile is None:\n        objfile = gdb\n\n    objfile.pretty_printers.append(arrow_pretty_print)\n\n\n",
                      "markdown": "`    #   will be tied to the inferior being debugged.\n    objfile = gdb.current_objfile()\n    if objfile is None:\n        objfile = gdb\n\n    objfile.pretty_printers.append(arrow_pretty_print)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 2441,
                  "startColumn": 34,
                  "endLine": 2441,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    # This pattern allows for two modes of use:\n    # - manual loading using `source gdb-arrow.py`: current_objfile()\n    #   will be None;\n    # - automatic loading from the GDB `scripts-directory`: current_objfile()\n    #   will be tied to the inferior being debugged.\n    objfile = gdb.current_objfile()\n    if objfile is None:\n",
                    "rendered": {
                      "text": "    # This pattern allows for two modes of use:\n    # - manual loading using `source gdb-arrow.py`: current_objfile()\n    #   will be None;\n    # - automatic loading from the GDB `scripts-directory`: current_objfile()\n    #   will be tied to the inferior being debugged.\n    objfile = gdb.current_objfile()\n    if objfile is None:\n",
                      "markdown": "`    # This pattern allows for two modes of use:\n    # - manual loading using `source gdb-arrow.py`: current_objfile()\n    #   will be None;\n    # - automatic loading from the GDB `scripts-directory`: current_objfile()\n    #   will be tied to the inferior being debugged.\n    objfile = gdb.current_objfile()\n    if objfile is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 1093,
                  "startColumn": 22,
                  "endLine": 1093,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nclass TimeTypePrinter(TypePrinter):\n    \"\"\"\n    Pretty-printer for time and duration types.\n    \"\"\"\n\n    def _get_unit(self):\n",
                    "rendered": {
                      "text": "\nclass TimeTypePrinter(TypePrinter):\n    \"\"\"\n    Pretty-printer for time and duration types.\n    \"\"\"\n\n    def _get_unit(self):\n",
                      "markdown": "`\nclass TimeTypePrinter(TypePrinter):\n    \"\"\"\n    Pretty-printer for time and duration types.\n    \"\"\"\n\n    def _get_unit(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 962,
                  "startColumn": 58,
                  "endLine": 962,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        \"\"\"\n        The result of calling ToString(show_metadata=True).\n        \"\"\"\n        # XXX `show_metadata` is an optional argument, but gdb doesn't allow\n        # omitting it.\n        return StdString(gdb.parse_and_eval(\n            f\"{for_evaluation(self.val)}.ToString(true)\"))\n",
                    "rendered": {
                      "text": "        \"\"\"\n        The result of calling ToString(show_metadata=True).\n        \"\"\"\n        # XXX `show_metadata` is an optional argument, but gdb doesn't allow\n        # omitting it.\n        return StdString(gdb.parse_and_eval(\n            f\"{for_evaluation(self.val)}.ToString(true)\"))\n",
                      "markdown": "`        \"\"\"\n        The result of calling ToString(show_metadata=True).\n        \"\"\"\n        # XXX `show_metadata` is an optional argument, but gdb doesn't allow\n        # omitting it.\n        return StdString(gdb.parse_and_eval(\n            f\"{for_evaluation(self.val)}.ToString(true)\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 11,
                  "endLine": 899,
                  "endColumn": 16,
                  "snippet": {
                    "text": "                                                  self.traits.bit_width // 8)\n        fmt = self.traits.struct_format_le\n        if byte_order() == 'big':\n            fmt = fmt[::-1]\n        words = struct.unpack(f\"={fmt}\", mem)\n        if byte_order() == 'big':\n            words = words[::-1]\n",
                    "rendered": {
                      "text": "                                                  self.traits.bit_width // 8)\n        fmt = self.traits.struct_format_le\n        if byte_order() == 'big':\n            fmt = fmt[::-1]\n        words = struct.unpack(f\"={fmt}\", mem)\n        if byte_order() == 'big':\n            words = words[::-1]\n",
                      "markdown": "`                                                  self.traits.bit_width // 8)\n        fmt = self.traits.struct_format_le\n        if byte_order() == 'big':\n            fmt = fmt[::-1]\n        words = struct.unpack(f\"={fmt}\", mem)\n        if byte_order() == 'big':\n            words = words[::-1]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 897,
                  "startColumn": 7,
                  "endLine": 897,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        \"\"\"\n        mem = gdb.selected_inferior().read_memory(self.address,\n                                                  self.traits.bit_width // 8)\n        fmt = self.traits.struct_format_le\n        if byte_order() == 'big':\n            fmt = fmt[::-1]\n        words = struct.unpack(f\"={fmt}\", mem)\n",
                    "rendered": {
                      "text": "        \"\"\"\n        mem = gdb.selected_inferior().read_memory(self.address,\n                                                  self.traits.bit_width // 8)\n        fmt = self.traits.struct_format_le\n        if byte_order() == 'big':\n            fmt = fmt[::-1]\n        words = struct.unpack(f\"={fmt}\", mem)\n",
                      "markdown": "`        \"\"\"\n        mem = gdb.selected_inferior().read_memory(self.address,\n                                                  self.traits.bit_width // 8)\n        fmt = self.traits.struct_format_le\n        if byte_order() == 'big':\n            fmt = fmt[::-1]\n        words = struct.unpack(f\"={fmt}\", mem)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 47,
                  "endLine": 123,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        ty = get_basic_type(val.type)\n    typename = str(ty)  # `ty.name` is sometimes None...\n    if '::' in typename and not typename.startswith('::'):\n        # ARROW-15652: expressions evaluated by GDB are evaluated in the\n        # scope of the C++ namespace of the currently selected frame.\n        # When inside a Parquet frame, `arrow::<some type>` would be looked\n        # up as `parquet::arrow::<some type>` and fail.\n",
                    "rendered": {
                      "text": "        ty = get_basic_type(val.type)\n    typename = str(ty)  # `ty.name` is sometimes None...\n    if '::' in typename and not typename.startswith('::'):\n        # ARROW-15652: expressions evaluated by GDB are evaluated in the\n        # scope of the C++ namespace of the currently selected frame.\n        # When inside a Parquet frame, `arrow::<some type>` would be looked\n        # up as `parquet::arrow::<some type>` and fail.\n",
                      "markdown": "`        ty = get_basic_type(val.type)\n    typename = str(ty)  # `ty.name` is sometimes None...\n    if '::' in typename and not typename.startswith('::'):\n        # ARROW-15652: expressions evaluated by GDB are evaluated in the\n        # scope of the C++ namespace of the currently selected frame.\n        # When inside a Parquet frame, `arrow::<some type>` would be looked\n        # up as `parquet::arrow::<some type>` and fail.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 35,
                  "endLine": 102,
                  "endColumn": 40,
                  "snippet": {
                    "text": "@lru_cache()\ndef byte_order():\n    \"\"\"\n    Get the target program (not the GDB host's) endianness.\n    \"\"\"\n    s = gdb.execute(\"show endian\", to_string=True).strip()\n    if 'big' in s:\n",
                    "rendered": {
                      "text": "@lru_cache()\ndef byte_order():\n    \"\"\"\n    Get the target program (not the GDB host's) endianness.\n    \"\"\"\n    s = gdb.execute(\"show endian\", to_string=True).strip()\n    if 'big' in s:\n",
                      "markdown": "`@lru_cache()\ndef byte_order():\n    \"\"\"\n    Get the target program (not the GDB host's) endianness.\n    \"\"\"\n    s = gdb.execute(\"show endian\", to_string=True).strip()\n    if 'big' in s:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "assert sys.version_info[0] >= 3, \"Arrow GDB extension needs Python 3+\"\n\n\n# gdb API docs at https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html#Python-API\n\n\n_type_ids = [\n",
                    "rendered": {
                      "text": "assert sys.version_info[0] >= 3, \"Arrow GDB extension needs Python 3+\"\n\n\n# gdb API docs at https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html#Python-API\n\n\n_type_ids = [\n",
                      "markdown": "`assert sys.version_info[0] >= 3, \"Arrow GDB extension needs Python 3+\"\n\n\n# gdb API docs at https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html#Python-API\n\n\n_type_ids = [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 39,
                  "endLine": 35,
                  "endColumn": 44,
                  "snippet": {
                    "text": "from gdb.types import get_basic_type\n\n\nassert sys.version_info[0] >= 3, \"Arrow GDB extension needs Python 3+\"\n\n\n# gdb API docs at https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html#Python-API\n",
                    "rendered": {
                      "text": "from gdb.types import get_basic_type\n\n\nassert sys.version_info[0] >= 3, \"Arrow GDB extension needs Python 3+\"\n\n\n# gdb API docs at https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html#Python-API\n",
                      "markdown": "`from gdb.types import get_basic_type\n\n\nassert sys.version_info[0] >= 3, \"Arrow GDB extension needs Python 3+\"\n\n\n# gdb API docs at https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html#Python-API\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/arrow/gdb/gdb_arrow.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 6,
                  "endLine": 32,
                  "snippet": {
                    "text": "import sys\nimport warnings\n\nimport gdb\nfrom gdb.types import get_basic_type\n\n\nassert sys.version_info[0] >= 3, \"Arrow GDB extension needs Python 3+\"\n",
                    "rendered": {
                      "text": "import sys\nimport warnings\n\nimport gdb\nfrom gdb.types import get_basic_type\n\n\nassert sys.version_info[0] >= 3, \"Arrow GDB extension needs Python 3+\"\n",
                      "markdown": "`import sys\nimport warnings\n\nimport gdb\nfrom gdb.types import get_basic_type\n\n\nassert sys.version_info[0] >= 3, \"Arrow GDB extension needs Python 3+\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/doc/arrow/README.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 57,
                  "endLine": 9,
                  "snippet": {
                    "text": "  regarding copyright ownership.  The ASF licenses this file\n  to you under the Apache License, Version 2.0 (the\n  \"License\"); you may not use this file except in compliance\n  with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing,\n",
                    "rendered": {
                      "text": "  regarding copyright ownership.  The ASF licenses this file\n  to you under the Apache License, Version 2.0 (the\n  \"License\"); you may not use this file except in compliance\n  with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing,\n",
                      "markdown": "`  regarding copyright ownership.  The ASF licenses this file\n  to you under the Apache License, Version 2.0 (the\n  \"License\"); you may not use this file except in compliance\n  with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/gdb/auto-load/usr/lib/libarrow.so.1700.0.0-gdb.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 57,
                  "endLine": 10,
                  "snippet": {
                    "text": "# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n",
                    "rendered": {
                      "text": "# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n",
                      "markdown": "`# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/apache-arrow-17.0.0-r2.apk/apache-arrow-17.0.0-r2/usr/share/gdb/auto-load/usr/lib/libarrow.so.1700.0.0-gdb.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 6,
                  "endLine": 22,
                  "snippet": {
                    "text": "# under the License.\n\nimport sys\nimport gdb\n\ndir_ = '/usr/share/arrow/gdb'\nif not dir_ in sys.path:\n    sys.path.insert(0, dir_)\n",
                    "rendered": {
                      "text": "# under the License.\n\nimport sys\nimport gdb\n\ndir_ = '/usr/share/arrow/gdb'\nif not dir_ in sys.path:\n    sys.path.insert(0, dir_)\n",
                      "markdown": "`# under the License.\n\nimport sys\nimport gdb\n\ndir_ = '/usr/share/arrow/gdb'\nif not dir_ in sys.path:\n    sys.path.insert(0, dir_)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}