{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/openjdk-14-14.0.2.12-r6.apk/openjdk-14-14.0.2.12-r6/usr/lib/jvm/java-14-openjdk/include/jawt.h"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 7,
                  "endLine": 294,
                  "endColumn": 57,
                  "snippet": {
                    "text": "     * corresponds to an HWND. For other platforms, see the appropriate\n     * machine-dependent header file for a description. The reference returned\n     * by this function is a local reference that is only valid in this\n     * environment. This function returns a NULL reference if no frame could be\n     * created with matching platform information.\n     */\n    jobject (JNICALL *CreateEmbeddedFrame) (JNIEnv *env, void* platformInfo);\n",
                    "rendered": {
                      "text": "     * corresponds to an HWND. For other platforms, see the appropriate\n     * machine-dependent header file for a description. The reference returned\n     * by this function is a local reference that is only valid in this\n     * environment. This function returns a NULL reference if no frame could be\n     * created with matching platform information.\n     */\n    jobject (JNICALL *CreateEmbeddedFrame) (JNIEnv *env, void* platformInfo);\n",
                      "markdown": "`     * corresponds to an HWND. For other platforms, see the appropriate\n     * machine-dependent header file for a description. The reference returned\n     * by this function is a local reference that is only valid in this\n     * environment. This function returns a NULL reference if no frame could be\n     * created with matching platform information.\n     */\n    jobject (JNICALL *CreateEmbeddedFrame) (JNIEnv *env, void* platformInfo);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/openjdk-14-14.0.2.12-r6.apk/openjdk-14-14.0.2.12-r6/usr/lib/jvm/java-14-openjdk/include/jawt.h"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 12,
                  "endLine": 258,
                  "endColumn": 36,
                  "snippet": {
                    "text": "     * returned JAWT_DrawingSurface.\n     */\n    JAWT_DrawingSurface* (JNICALL *GetDrawingSurface)\n        (JNIEnv* env, jobject target);\n    /*\n     * Free the drawing surface allocated in GetDrawingSurface.\n     */\n",
                    "rendered": {
                      "text": "     * returned JAWT_DrawingSurface.\n     */\n    JAWT_DrawingSurface* (JNICALL *GetDrawingSurface)\n        (JNIEnv* env, jobject target);\n    /*\n     * Free the drawing surface allocated in GetDrawingSurface.\n     */\n",
                      "markdown": "`     * returned JAWT_DrawingSurface.\n     */\n    JAWT_DrawingSurface* (JNICALL *GetDrawingSurface)\n        (JNIEnv* env, jobject target);\n    /*\n     * Free the drawing surface allocated in GetDrawingSurface.\n     */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}