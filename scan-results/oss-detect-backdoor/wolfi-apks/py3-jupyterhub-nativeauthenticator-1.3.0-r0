{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 9919,
                  "endLine": 9919,
                  "endColumn": 8,
                  "snippet": {
                    "text": "picks\nperkins\npatches1\npassword99\noyster\nolenka\nnympho\n",
                    "rendered": {
                      "text": "picks\nperkins\npatches1\npassword99\noyster\nolenka\nnympho\n",
                      "markdown": "`picks\nperkins\npatches1\npassword99\noyster\nolenka\nnympho\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 9641,
                  "endLine": 9641,
                  "endColumn": 8,
                  "snippet": {
                    "text": "piercing\nphat\npearls\npassword9\npainting\nnineball\nnavajo\n",
                    "rendered": {
                      "text": "piercing\nphat\npearls\npassword9\npainting\nnineball\nnavajo\n",
                      "markdown": "`piercing\nphat\npearls\npassword9\npainting\nnineball\nnavajo\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 7502,
                  "endLine": 7502,
                  "endColumn": 8,
                  "snippet": {
                    "text": "perry\npeppe\npenguin1\nPassword123\npain\noptimist\nonion\n",
                    "rendered": {
                      "text": "perry\npeppe\npenguin1\nPassword123\npain\noptimist\nonion\n",
                      "markdown": "`perry\npeppe\npenguin1\nPassword123\npain\noptimist\nonion\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 6594,
                  "endLine": 6594,
                  "endColumn": 8,
                  "snippet": {
                    "text": "president\npizza1\npiggy\npassword12\nolesya\nnitro\nmotion\n",
                    "rendered": {
                      "text": "president\npizza1\npiggy\npassword12\nolesya\nnitro\nmotion\n",
                      "markdown": "`president\npizza1\npiggy\npassword12\nolesya\nnitro\nmotion\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 6286,
                  "startColumn": 2,
                  "endLine": 6286,
                  "endColumn": 10,
                  "snippet": {
                    "text": "nutter\nnights\nniceass\nmypassword\nmydick\nmilan\nmedic\n",
                    "rendered": {
                      "text": "nutter\nnights\nniceass\nmypassword\nmydick\nmilan\nmedic\n",
                      "markdown": "`nutter\nnights\nniceass\nmypassword\nmydick\nmilan\nmedic\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 5147,
                  "endLine": 5147,
                  "endColumn": 8,
                  "snippet": {
                    "text": "ramones\nproperty\npheonix\npassword2\npablo\nothello\norange1\n",
                    "rendered": {
                      "text": "ramones\nproperty\npheonix\npassword2\npablo\nothello\norange1\n",
                      "markdown": "`ramones\nproperty\npheonix\npassword2\npablo\nothello\norange1\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 3569,
                  "endLine": 3569,
                  "endColumn": 8,
                  "snippet": {
                    "text": "rangers1\npowell\npoppop\npasswords\np0015123\nnwo4life\nmurder\n",
                    "rendered": {
                      "text": "rangers1\npowell\npoppop\npasswords\np0015123\nnwo4life\nmurder\n",
                      "markdown": "`rangers1\npowell\npoppop\npasswords\np0015123\nnwo4life\nmurder\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 3068,
                  "endLine": 3068,
                  "endColumn": 8,
                  "snippet": {
                    "text": "sentinel\nrayray\nrandall\nPassword1\npanda\nnevada\nmighty\n",
                    "rendered": {
                      "text": "sentinel\nrayray\nrandall\nPassword1\npanda\nnevada\nmighty\n",
                      "markdown": "`sentinel\nrayray\nrandall\nPassword1\npanda\nnevada\nmighty\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 1085,
                  "endLine": 1085,
                  "endColumn": 8,
                  "snippet": {
                    "text": "white\nsterling\nredhead\npassword123\ncandy\nanna\n142536\n",
                    "rendered": {
                      "text": "white\nsterling\nredhead\npassword123\ncandy\nanna\n142536\n",
                      "markdown": "`white\nsterling\nredhead\npassword123\ncandy\nanna\n142536\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 810,
                  "endLine": 810,
                  "endColumn": 8,
                  "snippet": {
                    "text": "fantasy\n9999\n7654321\nPASSWORD\nhentai\nduncan\ncougar\n",
                    "rendered": {
                      "text": "fantasy\n9999\n7654321\nPASSWORD\nhentai\nduncan\ncougar\n",
                      "markdown": "`fantasy\n9999\n7654321\nPASSWORD\nhentai\nduncan\ncougar\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 307,
                  "endLine": 307,
                  "endColumn": 8,
                  "snippet": {
                    "text": "101010\nbutter\ncarlos\npassword1\ndennis\nslipknot\nqwerty123\n",
                    "rendered": {
                      "text": "101010\nbutter\ncarlos\npassword1\ndennis\nslipknot\nqwerty123\n",
                      "markdown": "`101010\nbutter\ncarlos\npassword1\ndennis\nslipknot\nqwerty123\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276,
                  "endColumn": 8,
                  "snippet": {
                    "text": "jordan23\ncanada\nsophie\nPassword\napples\ndick\ntiger\n",
                    "rendered": {
                      "text": "jordan23\ncanada\nsophie\nPassword\napples\ndick\ntiger\n",
                      "markdown": "`jordan23\ncanada\nsophie\nPassword\napples\ndick\ntiger\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/common-credentials.txt"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2,
                  "endColumn": 8,
                  "snippet": {
                    "text": "123456\npassword\n12345678\nqwerty\n123456789\n",
                    "rendered": {
                      "text": "123456\npassword\n12345678\nqwerty\n123456789\n",
                      "markdown": "`123456\npassword\n12345678\nqwerty\n123456789\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 29,
                  "endLine": 528,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                self.authenticator.delete_user(user)\n\n                # Also delete user from jupyterhub registry, if present\n                if self.users.get(user_name) is not None:\n                    self.users.delete(user_name)\n\n        self.redirect(self.hub.base_url + \"authorize\")\n",
                    "rendered": {
                      "text": "                self.authenticator.delete_user(user)\n\n                # Also delete user from jupyterhub registry, if present\n                if self.users.get(user_name) is not None:\n                    self.users.delete(user_name)\n\n        self.redirect(self.hub.base_url + \"authorize\")\n",
                      "markdown": "`                self.authenticator.delete_user(user)\n\n                # Also delete user from jupyterhub registry, if present\n                if self.users.get(user_name) is not None:\n                    self.users.delete(user_name)\n\n        self.redirect(self.hub.base_url + \"authorize\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 63,
                  "endLine": 159,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                siteverify_url = \"https://www.google.com/recaptcha/api/siteverify\"\n                validation_status = requests.post(siteverify_url, data=data)\n\n                assume_user_is_human = validation_status.json().get(\"success\")\n\n                # Logging result\n                if assume_user_is_human:\n",
                    "rendered": {
                      "text": "                siteverify_url = \"https://www.google.com/recaptcha/api/siteverify\"\n                validation_status = requests.post(siteverify_url, data=data)\n\n                assume_user_is_human = validation_status.json().get(\"success\")\n\n                # Logging result\n                if assume_user_is_human:\n",
                      "markdown": "`                siteverify_url = \"https://www.google.com/recaptcha/api/siteverify\"\n                validation_status = requests.post(siteverify_url, data=data)\n\n                assume_user_is_human = validation_status.json().get(\"success\")\n\n                # Logging result\n                if assume_user_is_human:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 44,
                  "endLine": 157,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                    \"response\": recaptcha_response,\n                }\n                siteverify_url = \"https://www.google.com/recaptcha/api/siteverify\"\n                validation_status = requests.post(siteverify_url, data=data)\n\n                assume_user_is_human = validation_status.json().get(\"success\")\n\n",
                    "rendered": {
                      "text": "                    \"response\": recaptcha_response,\n                }\n                siteverify_url = \"https://www.google.com/recaptcha/api/siteverify\"\n                validation_status = requests.post(siteverify_url, data=data)\n\n                assume_user_is_human = validation_status.json().get(\"success\")\n\n",
                      "markdown": "`                    \"response\": recaptcha_response,\n                }\n                siteverify_url = \"https://www.google.com/recaptcha/api/siteverify\"\n                validation_status = requests.post(siteverify_url, data=data)\n\n                assume_user_is_human = validation_status.json().get(\"success\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 48,
                  "endLine": 503,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            username = data[\"username\"]\n            user = self.authenticator.get_user(username)\n            if user is not None:\n                if user.is_valid_password(data[\"password\"]) and not user.is_authorized:\n                    error = (\n                        f\"User {username} has not been authorized \"\n                        \"by an administrator yet.\"\n",
                    "rendered": {
                      "text": "            username = data[\"username\"]\n            user = self.authenticator.get_user(username)\n            if user is not None:\n                if user.is_valid_password(data[\"password\"]) and not user.is_authorized:\n                    error = (\n                        f\"User {username} has not been authorized \"\n                        \"by an administrator yet.\"\n",
                      "markdown": "`            username = data[\"username\"]\n            user = self.authenticator.get_user(username)\n            if user is not None:\n                if user.is_valid_password(data[\"password\"]) and not user.is_authorized:\n                    error = (\n                        f\"User {username} has not been authorized \"\n                        \"by an administrator yet.\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 33,
                  "endLine": 503,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            username = data[\"username\"]\n            user = self.authenticator.get_user(username)\n            if user is not None:\n                if user.is_valid_password(data[\"password\"]) and not user.is_authorized:\n                    error = (\n                        f\"User {username} has not been authorized \"\n                        \"by an administrator yet.\"\n",
                    "rendered": {
                      "text": "            username = data[\"username\"]\n            user = self.authenticator.get_user(username)\n            if user is not None:\n                if user.is_valid_password(data[\"password\"]) and not user.is_authorized:\n                    error = (\n                        f\"User {username} has not been authorized \"\n                        \"by an administrator yet.\"\n",
                      "markdown": "`            username = data[\"username\"]\n            user = self.authenticator.get_user(username)\n            if user is not None:\n                if user.is_valid_password(data[\"password\"]) and not user.is_authorized:\n                    error = (\n                        f\"User {username} has not been authorized \"\n                        \"by an administrator yet.\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 51,
                  "endLine": 498,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            # default error mesage on unsuccessful login\n            error = \"Invalid username or password.\"\n\n            # check is user exists and has correct password,\n            # and is just not authorised\n            username = data[\"username\"]\n            user = self.authenticator.get_user(username)\n",
                    "rendered": {
                      "text": "            # default error mesage on unsuccessful login\n            error = \"Invalid username or password.\"\n\n            # check is user exists and has correct password,\n            # and is just not authorised\n            username = data[\"username\"]\n            user = self.authenticator.get_user(username)\n",
                      "markdown": "`            # default error mesage on unsuccessful login\n            error = \"Invalid username or password.\"\n\n            # check is user exists and has correct password,\n            # and is just not authorised\n            username = data[\"username\"]\n            user = self.authenticator.get_user(username)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 41,
                  "endLine": 496,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            self.redirect(self.get_next_url(user))\n        else:\n            # default error mesage on unsuccessful login\n            error = \"Invalid username or password.\"\n\n            # check is user exists and has correct password,\n            # and is just not authorised\n",
                    "rendered": {
                      "text": "            self.redirect(self.get_next_url(user))\n        else:\n            # default error mesage on unsuccessful login\n            error = \"Invalid username or password.\"\n\n            # check is user exists and has correct password,\n            # and is just not authorised\n",
                      "markdown": "`            self.redirect(self.get_next_url(user))\n        else:\n            # default error mesage on unsuccessful login\n            error = \"Invalid username or password.\"\n\n            # check is user exists and has correct password,\n            # and is just not authorised\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 20,
                  "endLine": 448,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                    )\n\n        html = await self.render_template(\n            \"change-password-admin.html\",\n            user_name=user_name,\n            result_message=message,\n            alert=alert,\n",
                    "rendered": {
                      "text": "                    )\n\n        html = await self.render_template(\n            \"change-password-admin.html\",\n            user_name=user_name,\n            result_message=message,\n            alert=alert,\n",
                      "markdown": "`                    )\n\n        html = await self.render_template(\n            \"change-password-admin.html\",\n            user_name=user_name,\n            result_message=message,\n            alert=alert,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 64,
                  "endLine": 443,
                  "endColumn": 72,
                  "snippet": {
                    "text": "                # Error if minimum password length is 0.\n                else:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} is not too common.\"\n                    )\n\n",
                    "rendered": {
                      "text": "                # Error if minimum password length is 0.\n                else:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} is not too common.\"\n                    )\n\n",
                      "markdown": "`                # Error if minimum password length is 0.\n                else:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} is not too common.\"\n                    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 35,
                  "endLine": 440,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                        f\"for {user_name} has at least {minimum_password_length} \"\n                        \"characters and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n                else:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n",
                    "rendered": {
                      "text": "                        f\"for {user_name} has at least {minimum_password_length} \"\n                        \"characters and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n                else:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n",
                      "markdown": "`                        f\"for {user_name} has at least {minimum_password_length} \"\n                        \"characters and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n                else:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 64,
                  "endLine": 437,
                  "endColumn": 72,
                  "snippet": {
                    "text": "                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} has at least {minimum_password_length} \"\n                        \"characters and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n",
                    "rendered": {
                      "text": "                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} has at least {minimum_password_length} \"\n                        \"characters and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n",
                      "markdown": "`                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} has at least {minimum_password_length} \"\n                        \"characters and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 64,
                  "endLine": 436,
                  "endColumn": 72,
                  "snippet": {
                    "text": "                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} has at least {minimum_password_length} \"\n                        \"characters and is not too common.\"\n                    )\n",
                    "rendered": {
                      "text": "                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} has at least {minimum_password_length} \"\n                        \"characters and is not too common.\"\n                    )\n",
                      "markdown": "`                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} has at least {minimum_password_length} \"\n                        \"characters and is not too common.\"\n                    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 27,
                  "endLine": 434,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} has at least {minimum_password_length} \"\n",
                    "rendered": {
                      "text": "                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} has at least {minimum_password_length} \"\n",
                      "markdown": "`                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} has at least {minimum_password_length} \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 35,
                  "endLine": 433,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n",
                    "rendered": {
                      "text": "            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n",
                      "markdown": "`            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 69,
                  "endLine": 432,
                  "endColumn": 77,
                  "snippet": {
                    "text": "                message = f\"The password for {user_name} has been changed successfully\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n",
                    "rendered": {
                      "text": "                message = f\"The password for {user_name} has been changed successfully\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n",
                      "markdown": "`                message = f\"The password for {user_name} has been changed successfully\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 24,
                  "endLine": 432,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                message = f\"The password for {user_name} has been changed successfully\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n",
                    "rendered": {
                      "text": "                message = f\"The password for {user_name} has been changed successfully\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n",
                      "markdown": "`                message = f\"The password for {user_name} has been changed successfully\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 32,
                  "endLine": 429,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            success = self.authenticator.change_password(user_name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = f\"The password for {user_name} has been changed successfully\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n",
                    "rendered": {
                      "text": "            success = self.authenticator.change_password(user_name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = f\"The password for {user_name} has been changed successfully\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n",
                      "markdown": "`            success = self.authenticator.change_password(user_name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = f\"The password for {user_name} has been changed successfully\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 72,
                  "endLine": 426,
                  "endColumn": 80,
                  "snippet": {
                    "text": "                \"The new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user_name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = f\"The password for {user_name} has been changed successfully\"\n",
                    "rendered": {
                      "text": "                \"The new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user_name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = f\"The password for {user_name} has been changed successfully\"\n",
                      "markdown": "`                \"The new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user_name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = f\"The password for {user_name} has been changed successfully\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 48,
                  "endLine": 426,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                \"The new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user_name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = f\"The password for {user_name} has been changed successfully\"\n",
                    "rendered": {
                      "text": "                \"The new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user_name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = f\"The password for {user_name} has been changed successfully\"\n",
                      "markdown": "`                \"The new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user_name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = f\"The password for {user_name} has been changed successfully\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 25,
                  "endLine": 423,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        if not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n                \"The new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user_name, new_password)\n",
                    "rendered": {
                      "text": "        if not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n                \"The new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user_name, new_password)\n",
                      "markdown": "`        if not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n                \"The new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user_name, new_password)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 19,
                  "endLine": 420,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n                \"The new password didn't match the confirmation. Please try again.\"\n",
                    "rendered": {
                      "text": "\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n                \"The new password didn't match the confirmation. Please try again.\"\n",
                      "markdown": "`\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n                \"The new password didn't match the confirmation. Please try again.\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 48,
                  "endLine": 418,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n",
                    "rendered": {
                      "text": "        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n",
                      "markdown": "`        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 12,
                  "endLine": 418,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n",
                    "rendered": {
                      "text": "        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n",
                      "markdown": "`        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 51,
                  "endLine": 416,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n",
                    "rendered": {
                      "text": "        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n",
                      "markdown": "`        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 51,
                  "endLine": 415,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    async def post(self, user_name):\n        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n",
                    "rendered": {
                      "text": "    async def post(self, user_name):\n        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n",
                      "markdown": "`    async def post(self, user_name):\n        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 12,
                  "endLine": 415,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    async def post(self, user_name):\n        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n",
                    "rendered": {
                      "text": "    async def post(self, user_name):\n        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n",
                      "markdown": "`    async def post(self, user_name):\n        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        new_password_matches_confirmation = new_password == confirmation\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 20,
                  "endLine": 406,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            raise web.HTTPError(404)\n\n        html = await self.render_template(\n            \"change-password-admin.html\",\n            user_name=user_name,\n        )\n        self.finish(html)\n",
                    "rendered": {
                      "text": "            raise web.HTTPError(404)\n\n        html = await self.render_template(\n            \"change-password-admin.html\",\n            user_name=user_name,\n        )\n        self.finish(html)\n",
                      "markdown": "`            raise web.HTTPError(404)\n\n        html = await self.render_template(\n            \"change-password-admin.html\",\n            user_name=user_name,\n        )\n        self.finish(html)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 4,
                  "endLine": 396,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    \"\"\"Responsible for rendering the /hub/change-password/[someusername] page where\n    admins can change any user's password. Both on GET requests, when simply\n    navigating to the site, and on POST requests, with the data to change the\n    password attached.\"\"\"\n\n    @admin_users_scope\n    async def get(self, user_name):\n",
                    "rendered": {
                      "text": "    \"\"\"Responsible for rendering the /hub/change-password/[someusername] page where\n    admins can change any user's password. Both on GET requests, when simply\n    navigating to the site, and on POST requests, with the data to change the\n    password attached.\"\"\"\n\n    @admin_users_scope\n    async def get(self, user_name):\n",
                      "markdown": "`    \"\"\"Responsible for rendering the /hub/change-password/[someusername] page where\n    admins can change any user's password. Both on GET requests, when simply\n    navigating to the site, and on POST requests, with the data to change the\n    password attached.\"\"\"\n\n    @admin_users_scope\n    async def get(self, user_name):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 33,
                  "endLine": 394,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nclass ChangePasswordAdminHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password/[someusername] page where\n    admins can change any user's password. Both on GET requests, when simply\n    navigating to the site, and on POST requests, with the data to change the\n    password attached.\"\"\"\n\n",
                    "rendered": {
                      "text": "\nclass ChangePasswordAdminHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password/[someusername] page where\n    admins can change any user's password. Both on GET requests, when simply\n    navigating to the site, and on POST requests, with the data to change the\n    password attached.\"\"\"\n\n",
                      "markdown": "`\nclass ChangePasswordAdminHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password/[someusername] page where\n    admins can change any user's password. Both on GET requests, when simply\n    navigating to the site, and on POST requests, with the data to change the\n    password attached.\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 49,
                  "endLine": 393,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n\nclass ChangePasswordAdminHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password/[someusername] page where\n    admins can change any user's password. Both on GET requests, when simply\n    navigating to the site, and on POST requests, with the data to change the\n    password attached.\"\"\"\n",
                    "rendered": {
                      "text": "\n\nclass ChangePasswordAdminHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password/[someusername] page where\n    admins can change any user's password. Both on GET requests, when simply\n    navigating to the site, and on POST requests, with the data to change the\n    password attached.\"\"\"\n",
                      "markdown": "`\n\nclass ChangePasswordAdminHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password/[someusername] page where\n    admins can change any user's password. Both on GET requests, when simply\n    navigating to the site, and on POST requests, with the data to change the\n    password attached.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 12,
                  "endLine": 392,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        self.finish(html)\n\n\nclass ChangePasswordAdminHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password/[someusername] page where\n    admins can change any user's password. Both on GET requests, when simply\n    navigating to the site, and on POST requests, with the data to change the\n",
                    "rendered": {
                      "text": "        self.finish(html)\n\n\nclass ChangePasswordAdminHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password/[someusername] page where\n    admins can change any user's password. Both on GET requests, when simply\n    navigating to the site, and on POST requests, with the data to change the\n",
                      "markdown": "`        self.finish(html)\n\n\nclass ChangePasswordAdminHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password/[someusername] page where\n    admins can change any user's password. Both on GET requests, when simply\n    navigating to the site, and on POST requests, with the data to change the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 20,
                  "endLine": 384,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                    )\n\n        html = await self.render_template(\n            \"change-password.html\",\n            user_name=user.name,\n            result_message=message,\n            alert=alert,\n",
                    "rendered": {
                      "text": "                    )\n\n        html = await self.render_template(\n            \"change-password.html\",\n            user_name=user.name,\n            result_message=message,\n            alert=alert,\n",
                      "markdown": "`                    )\n\n        html = await self.render_template(\n            \"change-password.html\",\n            user_name=user.name,\n            result_message=message,\n            alert=alert,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 42,
                  "endLine": 380,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                else:\n                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password is not too common.\"\n                    )\n\n        html = await self.render_template(\n",
                    "rendered": {
                      "text": "                else:\n                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password is not too common.\"\n                    )\n\n        html = await self.render_template(\n",
                      "markdown": "`                else:\n                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password is not too common.\"\n                    )\n\n        html = await self.render_template(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 35,
                  "endLine": 376,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                        f\" {minimum_password_length} characters \"\n                        \"and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n                else:\n                    message = (\n                        \"Something went wrong!\\n\"\n",
                    "rendered": {
                      "text": "                        f\" {minimum_password_length} characters \"\n                        \"and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n                else:\n                    message = (\n                        \"Something went wrong!\\n\"\n",
                      "markdown": "`                        f\" {minimum_password_length} characters \"\n                        \"and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n                else:\n                    message = (\n                        \"Something went wrong!\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 36,
                  "endLine": 373,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password has at least\"\n                        f\" {minimum_password_length} characters \"\n                        \"and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n",
                    "rendered": {
                      "text": "                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password has at least\"\n                        f\" {minimum_password_length} characters \"\n                        \"and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n",
                      "markdown": "`                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password has at least\"\n                        f\" {minimum_password_length} characters \"\n                        \"and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 42,
                  "endLine": 372,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password has at least\"\n                        f\" {minimum_password_length} characters \"\n                        \"and is not too common.\"\n                    )\n",
                    "rendered": {
                      "text": "                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password has at least\"\n                        f\" {minimum_password_length} characters \"\n                        \"and is not too common.\"\n                    )\n",
                      "markdown": "`                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password has at least\"\n                        f\" {minimum_password_length} characters \"\n                        \"and is not too common.\"\n                    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 27,
                  "endLine": 369,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password has at least\"\n",
                    "rendered": {
                      "text": "                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password has at least\"\n",
                      "markdown": "`                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password has at least\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 35,
                  "endLine": 368,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\n\"\n",
                    "rendered": {
                      "text": "            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\n\"\n",
                      "markdown": "`            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 69,
                  "endLine": 367,
                  "endColumn": 77,
                  "snippet": {
                    "text": "                message = \"Your password has been changed successfully!\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n",
                    "rendered": {
                      "text": "                message = \"Your password has been changed successfully!\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n",
                      "markdown": "`                message = \"Your password has been changed successfully!\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 24,
                  "endLine": 367,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                message = \"Your password has been changed successfully!\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n",
                    "rendered": {
                      "text": "                message = \"Your password has been changed successfully!\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n",
                      "markdown": "`                message = \"Your password has been changed successfully!\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n                # Error if minimum password length is > 0.\n                if minimum_password_length > 0:\n                    message = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 32,
                  "endLine": 364,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            success = self.authenticator.change_password(user.name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = \"Your password has been changed successfully!\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n",
                    "rendered": {
                      "text": "            success = self.authenticator.change_password(user.name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = \"Your password has been changed successfully!\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n",
                      "markdown": "`            success = self.authenticator.change_password(user.name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = \"Your password has been changed successfully!\"\n            else:\n                alert = \"alert-danger\"\n                minimum_password_length = self.authenticator.minimum_password_length\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 72,
                  "endLine": 361,
                  "endColumn": 80,
                  "snippet": {
                    "text": "                \"Your new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user.name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = \"Your password has been changed successfully!\"\n",
                    "rendered": {
                      "text": "                \"Your new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user.name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = \"Your password has been changed successfully!\"\n",
                      "markdown": "`                \"Your new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user.name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = \"Your password has been changed successfully!\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 48,
                  "endLine": 361,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                \"Your new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user.name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = \"Your password has been changed successfully!\"\n",
                    "rendered": {
                      "text": "                \"Your new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user.name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = \"Your password has been changed successfully!\"\n",
                      "markdown": "`                \"Your new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user.name, new_password)\n            if success:\n                alert = \"alert-success\"\n                message = \"Your password has been changed successfully!\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 26,
                  "endLine": 358,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        elif not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n                \"Your new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user.name, new_password)\n",
                    "rendered": {
                      "text": "        elif not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n                \"Your new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user.name, new_password)\n",
                      "markdown": "`        elif not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n                \"Your new password didn't match the confirmation. Please try again.\"\n            )\n        else:\n            success = self.authenticator.change_password(user.name, new_password)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 21,
                  "endLine": 355,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        if not correct_password_provided:\n            alert = \"alert-danger\"\n            message = \"Your current password was incorrect. Please try again.\"\n        elif not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n                \"Your new password didn't match the confirmation. Please try again.\"\n",
                    "rendered": {
                      "text": "        if not correct_password_provided:\n            alert = \"alert-danger\"\n            message = \"Your current password was incorrect. Please try again.\"\n        elif not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n                \"Your new password didn't match the confirmation. Please try again.\"\n",
                      "markdown": "`        if not correct_password_provided:\n            alert = \"alert-danger\"\n            message = \"Your current password was incorrect. Please try again.\"\n        elif not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n                \"Your new password didn't match the confirmation. Please try again.\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 36,
                  "endLine": 354,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n        if not correct_password_provided:\n            alert = \"alert-danger\"\n            message = \"Your current password was incorrect. Please try again.\"\n        elif not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n",
                    "rendered": {
                      "text": "\n        if not correct_password_provided:\n            alert = \"alert-danger\"\n            message = \"Your current password was incorrect. Please try again.\"\n        elif not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n",
                      "markdown": "`\n        if not correct_password_provided:\n            alert = \"alert-danger\"\n            message = \"Your current password was incorrect. Please try again.\"\n        elif not new_password_matches_confirmation:\n            alert = \"alert-danger\"\n            message = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 23,
                  "endLine": 352,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not correct_password_provided:\n            alert = \"alert-danger\"\n            message = \"Your current password was incorrect. Please try again.\"\n        elif not new_password_matches_confirmation:\n",
                    "rendered": {
                      "text": "\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not correct_password_provided:\n            alert = \"alert-danger\"\n            message = \"Your current password was incorrect. Please try again.\"\n        elif not new_password_matches_confirmation:\n",
                      "markdown": "`\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not correct_password_provided:\n            alert = \"alert-danger\"\n            message = \"Your current password was incorrect. Please try again.\"\n        elif not new_password_matches_confirmation:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 48,
                  "endLine": 350,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            user.name\n        ).is_valid_password(old_password)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not correct_password_provided:\n            alert = \"alert-danger\"\n",
                    "rendered": {
                      "text": "            user.name\n        ).is_valid_password(old_password)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not correct_password_provided:\n            alert = \"alert-danger\"\n",
                      "markdown": "`            user.name\n        ).is_valid_password(old_password)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not correct_password_provided:\n            alert = \"alert-danger\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 12,
                  "endLine": 350,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            user.name\n        ).is_valid_password(old_password)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not correct_password_provided:\n            alert = \"alert-danger\"\n",
                    "rendered": {
                      "text": "            user.name\n        ).is_valid_password(old_password)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not correct_password_provided:\n            alert = \"alert-danger\"\n",
                      "markdown": "`            user.name\n        ).is_valid_password(old_password)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n        if not correct_password_provided:\n            alert = \"alert-danger\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 32,
                  "endLine": 348,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n        correct_password_provided = self.authenticator.get_user(\n            user.name\n        ).is_valid_password(old_password)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n",
                    "rendered": {
                      "text": "\n        correct_password_provided = self.authenticator.get_user(\n            user.name\n        ).is_valid_password(old_password)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n",
                      "markdown": "`\n        correct_password_provided = self.authenticator.get_user(\n            user.name\n        ).is_valid_password(old_password)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 19,
                  "endLine": 348,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n        correct_password_provided = self.authenticator.get_user(\n            user.name\n        ).is_valid_password(old_password)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n",
                    "rendered": {
                      "text": "\n        correct_password_provided = self.authenticator.get_user(\n            user.name\n        ).is_valid_password(old_password)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n",
                      "markdown": "`\n        correct_password_provided = self.authenticator.get_user(\n            user.name\n        ).is_valid_password(old_password)\n\n        new_password_matches_confirmation = new_password == confirmation\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 16,
                  "endLine": 346,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        correct_password_provided = self.authenticator.get_user(\n            user.name\n        ).is_valid_password(old_password)\n\n",
                    "rendered": {
                      "text": "        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        correct_password_provided = self.authenticator.get_user(\n            user.name\n        ).is_valid_password(old_password)\n\n",
                      "markdown": "`        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        correct_password_provided = self.authenticator.get_user(\n            user.name\n        ).is_valid_password(old_password)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 51,
                  "endLine": 344,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        correct_password_provided = self.authenticator.get_user(\n            user.name\n",
                    "rendered": {
                      "text": "        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        correct_password_provided = self.authenticator.get_user(\n            user.name\n",
                      "markdown": "`        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        correct_password_provided = self.authenticator.get_user(\n            user.name\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 51,
                  "endLine": 343,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        correct_password_provided = self.authenticator.get_user(\n",
                    "rendered": {
                      "text": "\n        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        correct_password_provided = self.authenticator.get_user(\n",
                      "markdown": "`\n        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        correct_password_provided = self.authenticator.get_user(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 12,
                  "endLine": 343,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        correct_password_provided = self.authenticator.get_user(\n",
                    "rendered": {
                      "text": "\n        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        correct_password_provided = self.authenticator.get_user(\n",
                      "markdown": "`\n        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n        correct_password_provided = self.authenticator.get_user(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 51,
                  "endLine": 342,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n",
                    "rendered": {
                      "text": "        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n",
                      "markdown": "`        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 12,
                  "endLine": 342,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n",
                    "rendered": {
                      "text": "        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n",
                      "markdown": "`        \"\"\"Rendering on POST requests (requests with data attached).\"\"\"\n\n        user = await self.get_current_user()\n        old_password = self.get_body_argument(\"old_password\", strip=False)\n        new_password = self.get_body_argument(\"new_password\", strip=False)\n        confirmation = self.get_body_argument(\"new_password_confirmation\", strip=False)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 20,
                  "endLine": 332,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n        user = await self.get_current_user()\n        html = await self.render_template(\n            \"change-password.html\",\n            user_name=user.name,\n        )\n        self.finish(html)\n",
                    "rendered": {
                      "text": "\n        user = await self.get_current_user()\n        html = await self.render_template(\n            \"change-password.html\",\n            user_name=user.name,\n        )\n        self.finish(html)\n",
                      "markdown": "`\n        user = await self.get_current_user()\n        html = await self.render_template(\n            \"change-password.html\",\n            user_name=user.name,\n        )\n        self.finish(html)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 54,
                  "endLine": 324,
                  "endColumn": 62,
                  "snippet": {
                    "text": "class ChangePasswordHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password page where users can change\n    their own password. Both on GET requests, when simply navigating to the site,\n    and on POST requests, with the data to change the password attached.\"\"\"\n\n    @web.authenticated\n    async def get(self):\n",
                    "rendered": {
                      "text": "class ChangePasswordHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password page where users can change\n    their own password. Both on GET requests, when simply navigating to the site,\n    and on POST requests, with the data to change the password attached.\"\"\"\n\n    @web.authenticated\n    async def get(self):\n",
                      "markdown": "`class ChangePasswordHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password page where users can change\n    their own password. Both on GET requests, when simply navigating to the site,\n    and on POST requests, with the data to change the password attached.\"\"\"\n\n    @web.authenticated\n    async def get(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 14,
                  "endLine": 323,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\nclass ChangePasswordHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password page where users can change\n    their own password. Both on GET requests, when simply navigating to the site,\n    and on POST requests, with the data to change the password attached.\"\"\"\n\n    @web.authenticated\n",
                    "rendered": {
                      "text": "\nclass ChangePasswordHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password page where users can change\n    their own password. Both on GET requests, when simply navigating to the site,\n    and on POST requests, with the data to change the password attached.\"\"\"\n\n    @web.authenticated\n",
                      "markdown": "`\nclass ChangePasswordHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password page where users can change\n    their own password. Both on GET requests, when simply navigating to the site,\n    and on POST requests, with the data to change the password attached.\"\"\"\n\n    @web.authenticated\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 49,
                  "endLine": 322,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n\nclass ChangePasswordHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password page where users can change\n    their own password. Both on GET requests, when simply navigating to the site,\n    and on POST requests, with the data to change the password attached.\"\"\"\n\n",
                    "rendered": {
                      "text": "\n\nclass ChangePasswordHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password page where users can change\n    their own password. Both on GET requests, when simply navigating to the site,\n    and on POST requests, with the data to change the password attached.\"\"\"\n\n",
                      "markdown": "`\n\nclass ChangePasswordHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password page where users can change\n    their own password. Both on GET requests, when simply navigating to the site,\n    and on POST requests, with the data to change the password attached.\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 12,
                  "endLine": 321,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        return obj\n\n\nclass ChangePasswordHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password page where users can change\n    their own password. Both on GET requests, when simply navigating to the site,\n    and on POST requests, with the data to change the password attached.\"\"\"\n",
                    "rendered": {
                      "text": "        return obj\n\n\nclass ChangePasswordHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password page where users can change\n    their own password. Both on GET requests, when simply navigating to the site,\n    and on POST requests, with the data to change the password attached.\"\"\"\n",
                      "markdown": "`        return obj\n\n\nclass ChangePasswordHandler(LocalBase):\n    \"\"\"Responsible for rendering the /hub/change-password page where users can change\n    their own password. Both on GET requests, when simply navigating to the site,\n    and on POST requests, with the data to change the password attached.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 45,
                  "endLine": 259,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        if self.authenticator.allow_self_approval_for:\n            try:\n                data = EmailAuthorizationHandler.validate_slug(\n                    slug, self.authenticator.secret_key\n                )\n                slug_validation_successful = True\n            except ValueError:\n",
                    "rendered": {
                      "text": "        if self.authenticator.allow_self_approval_for:\n            try:\n                data = EmailAuthorizationHandler.validate_slug(\n                    slug, self.authenticator.secret_key\n                )\n                slug_validation_successful = True\n            except ValueError:\n",
                      "markdown": "`        if self.authenticator.allow_self_approval_for:\n            try:\n                data = EmailAuthorizationHandler.validate_slug(\n                    slug, self.authenticator.secret_key\n                )\n                slug_validation_successful = True\n            except ValueError:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 31,
                  "endLine": 181,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        confirmation = self.get_body_argument(\n            \"signup_password_confirmation\", strip=False\n        )\n        confirmation_matches = password == confirmation\n        user_is_admin = username in self.authenticator.admin_users\n        username_already_taken = self.authenticator.user_exists(username)\n\n",
                    "rendered": {
                      "text": "        confirmation = self.get_body_argument(\n            \"signup_password_confirmation\", strip=False\n        )\n        confirmation_matches = password == confirmation\n        user_is_admin = username in self.authenticator.admin_users\n        username_already_taken = self.authenticator.user_exists(username)\n\n",
                      "markdown": "`        confirmation = self.get_body_argument(\n            \"signup_password_confirmation\", strip=False\n        )\n        confirmation_matches = password == confirmation\n        user_is_admin = username in self.authenticator.admin_users\n        username_already_taken = self.authenticator.user_exists(username)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 20,
                  "endLine": 179,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        # summarize info\n        password = self.get_body_argument(\"signup_password\", strip=False)\n        confirmation = self.get_body_argument(\n            \"signup_password_confirmation\", strip=False\n        )\n        confirmation_matches = password == confirmation\n        user_is_admin = username in self.authenticator.admin_users\n",
                    "rendered": {
                      "text": "        # summarize info\n        password = self.get_body_argument(\"signup_password\", strip=False)\n        confirmation = self.get_body_argument(\n            \"signup_password_confirmation\", strip=False\n        )\n        confirmation_matches = password == confirmation\n        user_is_admin = username in self.authenticator.admin_users\n",
                      "markdown": "`        # summarize info\n        password = self.get_body_argument(\"signup_password\", strip=False)\n        confirmation = self.get_body_argument(\n            \"signup_password_confirmation\", strip=False\n        )\n        confirmation_matches = password == confirmation\n        user_is_admin = username in self.authenticator.admin_users\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 50,
                  "endLine": 177,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        username = user_info[\"username\"]\n\n        # summarize info\n        password = self.get_body_argument(\"signup_password\", strip=False)\n        confirmation = self.get_body_argument(\n            \"signup_password_confirmation\", strip=False\n        )\n",
                    "rendered": {
                      "text": "        username = user_info[\"username\"]\n\n        # summarize info\n        password = self.get_body_argument(\"signup_password\", strip=False)\n        confirmation = self.get_body_argument(\n            \"signup_password_confirmation\", strip=False\n        )\n",
                      "markdown": "`        username = user_info[\"username\"]\n\n        # summarize info\n        password = self.get_body_argument(\"signup_password\", strip=False)\n        confirmation = self.get_body_argument(\n            \"signup_password_confirmation\", strip=False\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 8,
                  "endLine": 177,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        username = user_info[\"username\"]\n\n        # summarize info\n        password = self.get_body_argument(\"signup_password\", strip=False)\n        confirmation = self.get_body_argument(\n            \"signup_password_confirmation\", strip=False\n        )\n",
                    "rendered": {
                      "text": "        username = user_info[\"username\"]\n\n        # summarize info\n        password = self.get_body_argument(\"signup_password\", strip=False)\n        confirmation = self.get_body_argument(\n            \"signup_password_confirmation\", strip=False\n        )\n",
                      "markdown": "`        username = user_info[\"username\"]\n\n        # summarize info\n        password = self.get_body_argument(\"signup_password\", strip=False)\n        confirmation = self.get_body_argument(\n            \"signup_password_confirmation\", strip=False\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 55,
                  "endLine": 170,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        # initialize user_info\n        user_info = {\n            \"username\": self.get_body_argument(\"username\", strip=False),\n            \"password\": self.get_body_argument(\"signup_password\", strip=False),\n            \"email\": self.get_body_argument(\"email\", \"\", strip=False),\n            \"has_2fa\": bool(self.get_body_argument(\"2fa\", \"\", strip=False)),\n        }\n",
                    "rendered": {
                      "text": "        # initialize user_info\n        user_info = {\n            \"username\": self.get_body_argument(\"username\", strip=False),\n            \"password\": self.get_body_argument(\"signup_password\", strip=False),\n            \"email\": self.get_body_argument(\"email\", \"\", strip=False),\n            \"has_2fa\": bool(self.get_body_argument(\"2fa\", \"\", strip=False)),\n        }\n",
                      "markdown": "`        # initialize user_info\n        user_info = {\n            \"username\": self.get_body_argument(\"username\", strip=False),\n            \"password\": self.get_body_argument(\"signup_password\", strip=False),\n            \"email\": self.get_body_argument(\"email\", \"\", strip=False),\n            \"has_2fa\": bool(self.get_body_argument(\"2fa\", \"\", strip=False)),\n        }\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 13,
                  "endLine": 170,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        # initialize user_info\n        user_info = {\n            \"username\": self.get_body_argument(\"username\", strip=False),\n            \"password\": self.get_body_argument(\"signup_password\", strip=False),\n            \"email\": self.get_body_argument(\"email\", \"\", strip=False),\n            \"has_2fa\": bool(self.get_body_argument(\"2fa\", \"\", strip=False)),\n        }\n",
                    "rendered": {
                      "text": "        # initialize user_info\n        user_info = {\n            \"username\": self.get_body_argument(\"username\", strip=False),\n            \"password\": self.get_body_argument(\"signup_password\", strip=False),\n            \"email\": self.get_body_argument(\"email\", \"\", strip=False),\n            \"has_2fa\": bool(self.get_body_argument(\"2fa\", \"\", strip=False)),\n        }\n",
                      "markdown": "`        # initialize user_info\n        user_info = {\n            \"username\": self.get_body_argument(\"username\", strip=False),\n            \"password\": self.get_body_argument(\"signup_password\", strip=False),\n            \"email\": self.get_body_argument(\"email\", \"\", strip=False),\n            \"has_2fa\": bool(self.get_body_argument(\"2fa\", \"\", strip=False)),\n        }\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 21,
                  "endLine": 109,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes and your \"\n                    \"password is not too common.\"\n                )\n        # If user creation went through & open-signup is enabled, success.\n        # If user creation went through & the user is an admin, also success.\n",
                    "rendered": {
                      "text": "                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes and your \"\n                    \"password is not too common.\"\n                )\n        # If user creation went through & open-signup is enabled, success.\n        # If user creation went through & the user is an admin, also success.\n",
                      "markdown": "`                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes and your \"\n                    \"password is not too common.\"\n                )\n        # If user creation went through & open-signup is enabled, success.\n        # If user creation went through & the user is an admin, also success.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 31,
                  "endLine": 104,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                    f\"password has at least {minimum_password_length} \"\n                    \"characters and is not too common.\"\n                )\n            # Error if minimum password length is 0.\n            else:\n                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n",
                    "rendered": {
                      "text": "                    f\"password has at least {minimum_password_length} \"\n                    \"characters and is not too common.\"\n                )\n            # Error if minimum password length is 0.\n            else:\n                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n",
                      "markdown": "`                    f\"password has at least {minimum_password_length} \"\n                    \"characters and is not too common.\"\n                )\n            # Error if minimum password length is 0.\n            else:\n                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 53,
                  "endLine": 101,
                  "endColumn": 61,
                  "snippet": {
                    "text": "                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes, your \"\n                    f\"password has at least {minimum_password_length} \"\n                    \"characters and is not too common.\"\n                )\n            # Error if minimum password length is 0.\n",
                    "rendered": {
                      "text": "                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes, your \"\n                    f\"password has at least {minimum_password_length} \"\n                    \"characters and is not too common.\"\n                )\n            # Error if minimum password length is 0.\n",
                      "markdown": "`                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes, your \"\n                    f\"password has at least {minimum_password_length} \"\n                    \"characters and is not too common.\"\n                )\n            # Error if minimum password length is 0.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 22,
                  "endLine": 101,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes, your \"\n                    f\"password has at least {minimum_password_length} \"\n                    \"characters and is not too common.\"\n                )\n            # Error if minimum password length is 0.\n",
                    "rendered": {
                      "text": "                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes, your \"\n                    f\"password has at least {minimum_password_length} \"\n                    \"characters and is not too common.\"\n                )\n            # Error if minimum password length is 0.\n",
                      "markdown": "`                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes, your \"\n                    f\"password has at least {minimum_password_length} \"\n                    \"characters and is not too common.\"\n                )\n            # Error if minimum password length is 0.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 23,
                  "endLine": 97,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            alert = \"alert-danger\"\n            minimum_password_length = self.authenticator.minimum_password_length\n            # Error if minimum password length is > 0.\n            if minimum_password_length > 0:\n                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes, your \"\n",
                    "rendered": {
                      "text": "            alert = \"alert-danger\"\n            minimum_password_length = self.authenticator.minimum_password_length\n            # Error if minimum password length is > 0.\n            if minimum_password_length > 0:\n                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes, your \"\n",
                      "markdown": "`            alert = \"alert-danger\"\n            minimum_password_length = self.authenticator.minimum_password_length\n            # Error if minimum password length is > 0.\n            if minimum_password_length > 0:\n                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes, your \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 31,
                  "endLine": 96,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        elif not user:\n            alert = \"alert-danger\"\n            minimum_password_length = self.authenticator.minimum_password_length\n            # Error if minimum password length is > 0.\n            if minimum_password_length > 0:\n                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n",
                    "rendered": {
                      "text": "        elif not user:\n            alert = \"alert-danger\"\n            minimum_password_length = self.authenticator.minimum_password_length\n            # Error if minimum password length is > 0.\n            if minimum_password_length > 0:\n                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n",
                      "markdown": "`        elif not user:\n            alert = \"alert-danger\"\n            minimum_password_length = self.authenticator.minimum_password_length\n            # Error if minimum password length is > 0.\n            if minimum_password_length > 0:\n                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 65,
                  "endLine": 95,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        # Error if user creation was not successful.\n        elif not user:\n            alert = \"alert-danger\"\n            minimum_password_length = self.authenticator.minimum_password_length\n            # Error if minimum password length is > 0.\n            if minimum_password_length > 0:\n                message = (\n",
                    "rendered": {
                      "text": "        # Error if user creation was not successful.\n        elif not user:\n            alert = \"alert-danger\"\n            minimum_password_length = self.authenticator.minimum_password_length\n            # Error if minimum password length is > 0.\n            if minimum_password_length > 0:\n                message = (\n",
                      "markdown": "`        # Error if user creation was not successful.\n        elif not user:\n            alert = \"alert-danger\"\n            minimum_password_length = self.authenticator.minimum_password_length\n            # Error if minimum password length is > 0.\n            if minimum_password_length > 0:\n                message = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 20,
                  "endLine": 95,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        # Error if user creation was not successful.\n        elif not user:\n            alert = \"alert-danger\"\n            minimum_password_length = self.authenticator.minimum_password_length\n            # Error if minimum password length is > 0.\n            if minimum_password_length > 0:\n                message = (\n",
                    "rendered": {
                      "text": "        # Error if user creation was not successful.\n        elif not user:\n            alert = \"alert-danger\"\n            minimum_password_length = self.authenticator.minimum_password_length\n            # Error if minimum password length is > 0.\n            if minimum_password_length > 0:\n                message = (\n",
                      "markdown": "`        # Error if user creation was not successful.\n        elif not user:\n            alert = \"alert-danger\"\n            minimum_password_length = self.authenticator.minimum_password_length\n            # Error if minimum password length is > 0.\n            if minimum_password_length > 0:\n                message = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 28,
                  "endLine": 91,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        # Error if confirmation didn't match password.\n        elif not confirmation_matches:\n            alert = \"alert-danger\"\n            message = \"Your password did not match the confirmation. Please try again.\"\n        # Error if user creation was not successful.\n        elif not user:\n            alert = \"alert-danger\"\n",
                    "rendered": {
                      "text": "        # Error if confirmation didn't match password.\n        elif not confirmation_matches:\n            alert = \"alert-danger\"\n            message = \"Your password did not match the confirmation. Please try again.\"\n        # Error if user creation was not successful.\n        elif not user:\n            alert = \"alert-danger\"\n",
                      "markdown": "`        # Error if confirmation didn't match password.\n        elif not confirmation_matches:\n            alert = \"alert-danger\"\n            message = \"Your password did not match the confirmation. Please try again.\"\n        # Error if user creation was not successful.\n        elif not user:\n            alert = \"alert-danger\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 45,
                  "endLine": 88,
                  "endColumn": 53,
                  "snippet": {
                    "text": "                \"username is already in use. Please try again \"\n                \"with a different username.\"\n            )\n        # Error if confirmation didn't match password.\n        elif not confirmation_matches:\n            alert = \"alert-danger\"\n            message = \"Your password did not match the confirmation. Please try again.\"\n",
                    "rendered": {
                      "text": "                \"username is already in use. Please try again \"\n                \"with a different username.\"\n            )\n        # Error if confirmation didn't match password.\n        elif not confirmation_matches:\n            alert = \"alert-danger\"\n            message = \"Your password did not match the confirmation. Please try again.\"\n",
                      "markdown": "`                \"username is already in use. Please try again \"\n                \"with a different username.\"\n            )\n        # Error if confirmation didn't match password.\n        elif not confirmation_matches:\n            alert = \"alert-danger\"\n            message = \"Your password did not match the confirmation. Please try again.\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 45,
                  "endLine": 437,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} has at least {minimum_password_length} \"\n                        \"characters and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n",
                    "rendered": {
                      "text": "                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} has at least {minimum_password_length} \"\n                        \"characters and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n",
                      "markdown": "`                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\nBe sure the new password \"\n                        f\"for {user_name} has at least {minimum_password_length} \"\n                        \"characters and is not too common.\"\n                    )\n                # Error if minimum password length is 0.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 54,
                  "endLine": 372,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password has at least\"\n                        f\" {minimum_password_length} characters \"\n                        \"and is not too common.\"\n                    )\n",
                    "rendered": {
                      "text": "                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password has at least\"\n                        f\" {minimum_password_length} characters \"\n                        \"and is not too common.\"\n                    )\n",
                      "markdown": "`                if minimum_password_length > 0:\n                    message = (\n                        \"Something went wrong!\\n\"\n                        \"Be sure your new password has at least\"\n                        f\" {minimum_password_length} characters \"\n                        \"and is not too common.\"\n                    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 34,
                  "endLine": 101,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes, your \"\n                    f\"password has at least {minimum_password_length} \"\n                    \"characters and is not too common.\"\n                )\n            # Error if minimum password length is 0.\n",
                    "rendered": {
                      "text": "                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes, your \"\n                    f\"password has at least {minimum_password_length} \"\n                    \"characters and is not too common.\"\n                )\n            # Error if minimum password length is 0.\n",
                      "markdown": "`                message = (\n                    \"Something went wrong!\\nBe sure your username \"\n                    \"does not contain spaces, commas or slashes, your \"\n                    f\"password has at least {minimum_password_length} \"\n                    \"characters and is not too common.\"\n                )\n            # Error if minimum password length is 0.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/handlers.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 11,
                  "endLine": 38,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        if not LocalBase._template_dir_registered:\n            self.log.debug(\"Adding %s to template path\", TEMPLATE_DIR)\n            loader = FileSystemLoader([TEMPLATE_DIR])\n            env = self.settings[\"jinja2_env\"]\n            previous_loader = env.loader\n            env.loader = ChoiceLoader([previous_loader, loader])\n            LocalBase._template_dir_registered = True\n",
                    "rendered": {
                      "text": "        if not LocalBase._template_dir_registered:\n            self.log.debug(\"Adding %s to template path\", TEMPLATE_DIR)\n            loader = FileSystemLoader([TEMPLATE_DIR])\n            env = self.settings[\"jinja2_env\"]\n            previous_loader = env.loader\n            env.loader = ChoiceLoader([previous_loader, loader])\n            LocalBase._template_dir_registered = True\n",
                      "markdown": "`        if not LocalBase._template_dir_registered:\n            self.log.debug(\"Adding %s to template path\", TEMPLATE_DIR)\n            loader = FileSystemLoader([TEMPLATE_DIR])\n            env = self.settings[\"jinja2_env\"]\n            previous_loader = env.loader\n            env.loader = ChoiceLoader([previous_loader, loader])\n            LocalBase._template_dir_registered = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 55,
                  "endLine": 243,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n        validations = [user.is_authorized, user.is_valid_password(password)]\n        if user.has_2fa:\n            validations.append(user.is_valid_token(data.get(\"2fa\")))\n\n        if all(validations):\n            self.successful_login(username)\n",
                    "rendered": {
                      "text": "\n        validations = [user.is_authorized, user.is_valid_password(password)]\n        if user.has_2fa:\n            validations.append(user.is_valid_token(data.get(\"2fa\")))\n\n        if all(validations):\n            self.successful_login(username)\n",
                      "markdown": "`\n        validations = [user.is_authorized, user.is_valid_password(password)]\n        if user.has_2fa:\n            validations.append(user.is_valid_token(data.get(\"2fa\")))\n\n        if all(validations):\n            self.successful_login(username)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 30,
                  "endLine": 226,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        return True\n\n    def successful_login(self, username):\n        if self.login_attempts.get(username):\n            self.login_attempts.pop(username)\n\n    async def authenticate(self, handler, data):\n",
                    "rendered": {
                      "text": "        return True\n\n    def successful_login(self, username):\n        if self.login_attempts.get(username):\n            self.login_attempts.pop(username)\n\n    async def authenticate(self, handler, data):\n",
                      "markdown": "`        return True\n\n    def successful_login(self, username):\n        if self.login_attempts.get(username):\n            self.login_attempts.pop(username)\n\n    async def authenticate(self, handler, data):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 36,
                  "endLine": 216,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        return False\n\n    def is_blocked(self, username):\n        logins = self.login_attempts.get(username)\n\n        if not logins or logins[\"count\"] < self.allowed_failed_logins:\n            return False\n",
                    "rendered": {
                      "text": "        return False\n\n    def is_blocked(self, username):\n        logins = self.login_attempts.get(username)\n\n        if not logins or logins[\"count\"] < self.allowed_failed_logins:\n            return False\n",
                      "markdown": "`        return False\n\n    def is_blocked(self, username):\n        logins = self.login_attempts.get(username)\n\n        if not logins or logins[\"count\"] < self.allowed_failed_logins:\n            return False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 44,
                  "endLine": 205,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            self.login_attempts[username][\"time\"] = datetime.now()\n\n    def can_try_to_login_again(self, username):\n        login_attempts = self.login_attempts.get(username)\n        if not login_attempts:\n            return True\n\n",
                    "rendered": {
                      "text": "            self.login_attempts[username][\"time\"] = datetime.now()\n\n    def can_try_to_login_again(self, username):\n        login_attempts = self.login_attempts.get(username)\n        if not login_attempts:\n            return True\n\n",
                      "markdown": "`            self.login_attempts[username][\"time\"] = datetime.now()\n\n    def can_try_to_login_again(self, username):\n        login_attempts = self.login_attempts.get(username)\n        if not login_attempts:\n            return True\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 34,
                  "endLine": 198,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            UserInfo.__table__.create(self.db.bind)\n\n    def add_login_attempt(self, username):\n        if not self.login_attempts.get(username):\n            self.login_attempts[username] = {\"count\": 1, \"time\": datetime.now()}\n        else:\n            self.login_attempts[username][\"count\"] += 1\n",
                    "rendered": {
                      "text": "            UserInfo.__table__.create(self.db.bind)\n\n    def add_login_attempt(self, username):\n        if not self.login_attempts.get(username):\n            self.login_attempts[username] = {\"count\": 1, \"time\": datetime.now()}\n        else:\n            self.login_attempts[username][\"count\"] += 1\n",
                      "markdown": "`            UserInfo.__table__.create(self.db.bind)\n\n    def add_login_attempt(self, username):\n        if not self.login_attempts.get(username):\n            self.login_attempts[username] = {\"count\": 1, \"time\": datetime.now()}\n        else:\n            self.login_attempts[username][\"count\"] += 1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 61,
                  "endLine": 435,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                new_user = self.create_user(user.decode(), password)\n                if not new_user:\n                    error = (\n                        f\"User {user} was not created. Check password \"\n                        \"restrictions or username problems before trying \"\n                        \"again.\"\n                    )\n",
                    "rendered": {
                      "text": "                new_user = self.create_user(user.decode(), password)\n                if not new_user:\n                    error = (\n                        f\"User {user} was not created. Check password \"\n                        \"restrictions or username problems before trying \"\n                        \"again.\"\n                    )\n",
                      "markdown": "`                new_user = self.create_user(user.decode(), password)\n                if not new_user:\n                    error = (\n                        f\"User {user} was not created. Check password \"\n                        \"restrictions or username problems before trying \"\n                        \"again.\"\n                    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 59,
                  "endLine": 432,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        with dbm.open(self.firstuse_db_path, \"c\", 0o600) as db:\n            for user in db.keys():\n                password = db[user].decode()\n                new_user = self.create_user(user.decode(), password)\n                if not new_user:\n                    error = (\n                        f\"User {user} was not created. Check password \"\n",
                    "rendered": {
                      "text": "        with dbm.open(self.firstuse_db_path, \"c\", 0o600) as db:\n            for user in db.keys():\n                password = db[user].decode()\n                new_user = self.create_user(user.decode(), password)\n                if not new_user:\n                    error = (\n                        f\"User {user} was not created. Check password \"\n",
                      "markdown": "`        with dbm.open(self.firstuse_db_path, \"c\", 0o600) as db:\n            for user in db.keys():\n                password = db[user].decode()\n                new_user = self.create_user(user.decode(), password)\n                if not new_user:\n                    error = (\n                        f\"User {user} was not created. Check password \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 16,
                  "endLine": 431,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    def add_data_from_firstuse(self):\n        with dbm.open(self.firstuse_db_path, \"c\", 0o600) as db:\n            for user in db.keys():\n                password = db[user].decode()\n                new_user = self.create_user(user.decode(), password)\n                if not new_user:\n                    error = (\n",
                    "rendered": {
                      "text": "    def add_data_from_firstuse(self):\n        with dbm.open(self.firstuse_db_path, \"c\", 0o600) as db:\n            for user in db.keys():\n                password = db[user].decode()\n                new_user = self.create_user(user.decode(), password)\n                if not new_user:\n                    error = (\n",
                      "markdown": "`    def add_data_from_firstuse(self):\n        with dbm.open(self.firstuse_db_path, \"c\", 0o600) as db:\n            for user in db.keys():\n                password = db[user].decode()\n                new_user = self.create_user(user.decode(), password)\n                if not new_user:\n                    error = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 48,
                  "endLine": 405,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            # the following /confirm/ must be like in generate_approval_url()\n            (r\"/confirm/([^/]*)\", EmailAuthorizationHandler),\n            (r\"/change-password\", ChangePasswordHandler),\n            (r\"/change-password/([^/]+)\", ChangePasswordAdminHandler),\n        ]\n        return native_handlers\n\n",
                    "rendered": {
                      "text": "            # the following /confirm/ must be like in generate_approval_url()\n            (r\"/confirm/([^/]*)\", EmailAuthorizationHandler),\n            (r\"/change-password\", ChangePasswordHandler),\n            (r\"/change-password/([^/]+)\", ChangePasswordAdminHandler),\n        ]\n        return native_handlers\n\n",
                      "markdown": "`            # the following /confirm/ must be like in generate_approval_url()\n            (r\"/confirm/([^/]*)\", EmailAuthorizationHandler),\n            (r\"/change-password\", ChangePasswordHandler),\n            (r\"/change-password/([^/]+)\", ChangePasswordAdminHandler),\n        ]\n        return native_handlers\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 23,
                  "endLine": 405,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            # the following /confirm/ must be like in generate_approval_url()\n            (r\"/confirm/([^/]*)\", EmailAuthorizationHandler),\n            (r\"/change-password\", ChangePasswordHandler),\n            (r\"/change-password/([^/]+)\", ChangePasswordAdminHandler),\n        ]\n        return native_handlers\n\n",
                    "rendered": {
                      "text": "            # the following /confirm/ must be like in generate_approval_url()\n            (r\"/confirm/([^/]*)\", EmailAuthorizationHandler),\n            (r\"/change-password\", ChangePasswordHandler),\n            (r\"/change-password/([^/]+)\", ChangePasswordAdminHandler),\n        ]\n        return native_handlers\n\n",
                      "markdown": "`            # the following /confirm/ must be like in generate_approval_url()\n            (r\"/confirm/([^/]*)\", EmailAuthorizationHandler),\n            (r\"/change-password\", ChangePasswordHandler),\n            (r\"/change-password/([^/]+)\", ChangePasswordAdminHandler),\n        ]\n        return native_handlers\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 40,
                  "endLine": 404,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            (r\"/authorize/([^/]*)\", ToggleAuthorizationHandler),\n            # the following /confirm/ must be like in generate_approval_url()\n            (r\"/confirm/([^/]*)\", EmailAuthorizationHandler),\n            (r\"/change-password\", ChangePasswordHandler),\n            (r\"/change-password/([^/]+)\", ChangePasswordAdminHandler),\n        ]\n        return native_handlers\n",
                    "rendered": {
                      "text": "            (r\"/authorize/([^/]*)\", ToggleAuthorizationHandler),\n            # the following /confirm/ must be like in generate_approval_url()\n            (r\"/confirm/([^/]*)\", EmailAuthorizationHandler),\n            (r\"/change-password\", ChangePasswordHandler),\n            (r\"/change-password/([^/]+)\", ChangePasswordAdminHandler),\n        ]\n        return native_handlers\n",
                      "markdown": "`            (r\"/authorize/([^/]*)\", ToggleAuthorizationHandler),\n            # the following /confirm/ must be like in generate_approval_url()\n            (r\"/confirm/([^/]*)\", EmailAuthorizationHandler),\n            (r\"/change-password\", ChangePasswordHandler),\n            (r\"/change-password/([^/]+)\", ChangePasswordAdminHandler),\n        ]\n        return native_handlers\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 23,
                  "endLine": 404,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            (r\"/authorize/([^/]*)\", ToggleAuthorizationHandler),\n            # the following /confirm/ must be like in generate_approval_url()\n            (r\"/confirm/([^/]*)\", EmailAuthorizationHandler),\n            (r\"/change-password\", ChangePasswordHandler),\n            (r\"/change-password/([^/]+)\", ChangePasswordAdminHandler),\n        ]\n        return native_handlers\n",
                    "rendered": {
                      "text": "            (r\"/authorize/([^/]*)\", ToggleAuthorizationHandler),\n            # the following /confirm/ must be like in generate_approval_url()\n            (r\"/confirm/([^/]*)\", EmailAuthorizationHandler),\n            (r\"/change-password\", ChangePasswordHandler),\n            (r\"/change-password/([^/]+)\", ChangePasswordAdminHandler),\n        ]\n        return native_handlers\n",
                      "markdown": "`            (r\"/authorize/([^/]*)\", ToggleAuthorizationHandler),\n            # the following /confirm/ must be like in generate_approval_url()\n            (r\"/confirm/([^/]*)\", EmailAuthorizationHandler),\n            (r\"/change-password\", ChangePasswordHandler),\n            (r\"/change-password/([^/]+)\", ChangePasswordAdminHandler),\n        ]\n        return native_handlers\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 42,
                  "endLine": 385,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        if not all(criteria):\n            return\n\n        user.password = bcrypt.hashpw(new_password.encode(), bcrypt.gensalt())\n        self.db.commit()\n        return True\n\n",
                    "rendered": {
                      "text": "        if not all(criteria):\n            return\n\n        user.password = bcrypt.hashpw(new_password.encode(), bcrypt.gensalt())\n        self.db.commit()\n        return True\n\n",
                      "markdown": "`        if not all(criteria):\n            return\n\n        user.password = bcrypt.hashpw(new_password.encode(), bcrypt.gensalt())\n        self.db.commit()\n        return True\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 13,
                  "endLine": 385,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        if not all(criteria):\n            return\n\n        user.password = bcrypt.hashpw(new_password.encode(), bcrypt.gensalt())\n        self.db.commit()\n        return True\n\n",
                    "rendered": {
                      "text": "        if not all(criteria):\n            return\n\n        user.password = bcrypt.hashpw(new_password.encode(), bcrypt.gensalt())\n        self.db.commit()\n        return True\n\n",
                      "markdown": "`        if not all(criteria):\n            return\n\n        user.password = bcrypt.hashpw(new_password.encode(), bcrypt.gensalt())\n        self.db.commit()\n        return True\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 40,
                  "endLine": 380,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n        criteria = [\n            user is not None,\n            self.is_password_strong(new_password),\n        ]\n        if not all(criteria):\n            return\n",
                    "rendered": {
                      "text": "\n        criteria = [\n            user is not None,\n            self.is_password_strong(new_password),\n        ]\n        if not all(criteria):\n            return\n",
                      "markdown": "`\n        criteria = [\n            user is not None,\n            self.is_password_strong(new_password),\n        ]\n        if not all(criteria):\n            return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 20,
                  "endLine": 380,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n        criteria = [\n            user is not None,\n            self.is_password_strong(new_password),\n        ]\n        if not all(criteria):\n            return\n",
                    "rendered": {
                      "text": "\n        criteria = [\n            user is not None,\n            self.is_password_strong(new_password),\n        ]\n        if not all(criteria):\n            return\n",
                      "markdown": "`\n        criteria = [\n            user is not None,\n            self.is_password_strong(new_password),\n        ]\n        if not all(criteria):\n            return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 44,
                  "endLine": 375,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n        return unauthed\n\n    def change_password(self, username, new_password):\n        user = self.get_user(username)\n\n        criteria = [\n",
                    "rendered": {
                      "text": "\n        return unauthed\n\n    def change_password(self, username, new_password):\n        user = self.get_user(username)\n\n        criteria = [\n",
                      "markdown": "`\n        return unauthed\n\n    def change_password(self, username, new_password):\n        user = self.get_user(username)\n\n        criteria = [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 15,
                  "endLine": 375,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n        return unauthed\n\n    def change_password(self, username, new_password):\n        user = self.get_user(username)\n\n        criteria = [\n",
                    "rendered": {
                      "text": "\n        return unauthed\n\n    def change_password(self, username, new_password):\n        user = self.get_user(username)\n\n        criteria = [\n",
                      "markdown": "`\n        return unauthed\n\n    def change_password(self, username, new_password):\n        user = self.get_user(username)\n\n        criteria = [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 24,
                  "endLine": 336,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    def generate_approval_url(self, username, when=None):\n        if when is None:\n            when = datetime.now(tz.utc) + timedelta(minutes=15)\n        s = Signer(self.secret_key)\n        u = s.sign_object({\"username\": username, \"expire\": when.isoformat()})\n        return \"/confirm/\" + u\n\n",
                    "rendered": {
                      "text": "    def generate_approval_url(self, username, when=None):\n        if when is None:\n            when = datetime.now(tz.utc) + timedelta(minutes=15)\n        s = Signer(self.secret_key)\n        u = s.sign_object({\"username\": username, \"expire\": when.isoformat()})\n        return \"/confirm/\" + u\n\n",
                      "markdown": "`    def generate_approval_url(self, username, when=None):\n        if when is None:\n            when = datetime.now(tz.utc) + timedelta(minutes=15)\n        s = Signer(self.secret_key)\n        u = s.sign_object({\"username\": username, \"expire\": when.isoformat()})\n        return \"/confirm/\" + u\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 59,
                  "endLine": 307,
                  "endColumn": 67,
                  "snippet": {
                    "text": "            return\n\n        encoded_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        infos = {\"username\": username, \"password\": encoded_password}\n        infos.update(kwargs)\n\n        # Pre-authorized users (admins, or any users during open signup)\n",
                    "rendered": {
                      "text": "            return\n\n        encoded_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        infos = {\"username\": username, \"password\": encoded_password}\n        infos.update(kwargs)\n\n        # Pre-authorized users (admins, or any users during open signup)\n",
                      "markdown": "`            return\n\n        encoded_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        infos = {\"username\": username, \"password\": encoded_password}\n        infos.update(kwargs)\n\n        # Pre-authorized users (admins, or any users during open signup)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 40,
                  "endLine": 307,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            return\n\n        encoded_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        infos = {\"username\": username, \"password\": encoded_password}\n        infos.update(kwargs)\n\n        # Pre-authorized users (admins, or any users during open signup)\n",
                    "rendered": {
                      "text": "            return\n\n        encoded_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        infos = {\"username\": username, \"password\": encoded_password}\n        infos.update(kwargs)\n\n        # Pre-authorized users (admins, or any users during open signup)\n",
                      "markdown": "`            return\n\n        encoded_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        infos = {\"username\": username, \"password\": encoded_password}\n        infos.update(kwargs)\n\n        # Pre-authorized users (admins, or any users during open signup)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 41,
                  "endLine": 306,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        if not self.enable_signup:\n            return\n\n        encoded_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        infos = {\"username\": username, \"password\": encoded_password}\n        infos.update(kwargs)\n\n",
                    "rendered": {
                      "text": "        if not self.enable_signup:\n            return\n\n        encoded_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        infos = {\"username\": username, \"password\": encoded_password}\n        infos.update(kwargs)\n\n",
                      "markdown": "`        if not self.enable_signup:\n            return\n\n        encoded_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        infos = {\"username\": username, \"password\": encoded_password}\n        infos.update(kwargs)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 16,
                  "endLine": 306,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        if not self.enable_signup:\n            return\n\n        encoded_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        infos = {\"username\": username, \"password\": encoded_password}\n        infos.update(kwargs)\n\n",
                    "rendered": {
                      "text": "        if not self.enable_signup:\n            return\n\n        encoded_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        infos = {\"username\": username, \"password\": encoded_password}\n        infos.update(kwargs)\n\n",
                      "markdown": "`        if not self.enable_signup:\n            return\n\n        encoded_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        infos = {\"username\": username, \"password\": encoded_password}\n        infos.update(kwargs)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 39,
                  "endLine": 300,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        if self.user_exists(username) or not self.validate_username(username):\n            return\n\n        if not self.is_password_strong(password):\n            return\n\n        if not self.enable_signup:\n",
                    "rendered": {
                      "text": "        if self.user_exists(username) or not self.validate_username(username):\n            return\n\n        if not self.is_password_strong(password):\n            return\n\n        if not self.enable_signup:\n",
                      "markdown": "`        if self.user_exists(username) or not self.validate_username(username):\n            return\n\n        if not self.is_password_strong(password):\n            return\n\n        if not self.enable_signup:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 23,
                  "endLine": 300,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        if self.user_exists(username) or not self.validate_username(username):\n            return\n\n        if not self.is_password_strong(password):\n            return\n\n        if not self.enable_signup:\n",
                    "rendered": {
                      "text": "        if self.user_exists(username) or not self.validate_username(username):\n            return\n\n        if not self.is_password_strong(password):\n            return\n\n        if not self.enable_signup:\n",
                      "markdown": "`        if self.user_exists(username) or not self.validate_username(username):\n            return\n\n        if not self.is_password_strong(password):\n            return\n\n        if not self.enable_signup:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 36,
                  "endLine": 294,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    def user_exists(self, username):\n        return self.get_user(username) is not None\n\n    def create_user(self, username, password, **kwargs):\n        username = self.normalize_username(username)\n\n        if self.user_exists(username) or not self.validate_username(username):\n",
                    "rendered": {
                      "text": "    def user_exists(self, username):\n        return self.get_user(username) is not None\n\n    def create_user(self, username, password, **kwargs):\n        username = self.normalize_username(username)\n\n        if self.user_exists(username) or not self.validate_username(username):\n",
                      "markdown": "`    def user_exists(self, username):\n        return self.get_user(username) is not None\n\n    def create_user(self, username, password, **kwargs):\n        username = self.normalize_username(username)\n\n        if self.user_exists(username) or not self.validate_username(username):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 54,
                  "endLine": 264,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n\n        return all(checks)\n\n",
                    "rendered": {
                      "text": "        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n\n        return all(checks)\n\n",
                      "markdown": "`        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n\n        return all(checks)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 38,
                  "endLine": 264,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n\n        return all(checks)\n\n",
                    "rendered": {
                      "text": "        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n\n        return all(checks)\n\n",
                      "markdown": "`        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n\n        return all(checks)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 29,
                  "endLine": 263,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n\n        return all(checks)\n",
                    "rendered": {
                      "text": "    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n\n        return all(checks)\n",
                      "markdown": "`    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n\n        return all(checks)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 48,
                  "endLine": 261,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n",
                    "rendered": {
                      "text": "        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n",
                      "markdown": "`        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 22,
                  "endLine": 261,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n",
                    "rendered": {
                      "text": "        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n",
                      "markdown": "`        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n            checks.append(not self.is_password_common(password))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 33,
                  "endLine": 260,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n",
                    "rendered": {
                      "text": "                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n",
                      "markdown": "`                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 11,
                  "endLine": 260,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n",
                    "rendered": {
                      "text": "                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n",
                      "markdown": "`                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n\n        if self.check_common_password:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 39,
                  "endLine": 258,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        if not self.COMMON_PASSWORDS:\n            with open(common_credentials_file) as f:\n                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n",
                    "rendered": {
                      "text": "        if not self.COMMON_PASSWORDS:\n            with open(common_credentials_file) as f:\n                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n",
                      "markdown": "`        if not self.COMMON_PASSWORDS:\n            with open(common_credentials_file) as f:\n                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 15,
                  "endLine": 258,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        if not self.COMMON_PASSWORDS:\n            with open(common_credentials_file) as f:\n                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n",
                    "rendered": {
                      "text": "        if not self.COMMON_PASSWORDS:\n            with open(common_credentials_file) as f:\n                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n",
                      "markdown": "`        if not self.COMMON_PASSWORDS:\n            with open(common_credentials_file) as f:\n                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n        checks = [len(password) >= self.minimum_password_length]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 28,
                  "endLine": 257,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        )\n        if not self.COMMON_PASSWORDS:\n            with open(common_credentials_file) as f:\n                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n",
                    "rendered": {
                      "text": "        )\n        if not self.COMMON_PASSWORDS:\n            with open(common_credentials_file) as f:\n                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n",
                      "markdown": "`        )\n        if not self.COMMON_PASSWORDS:\n            with open(common_credentials_file) as f:\n                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n\n    def is_password_strong(self, password):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 27,
                  "endLine": 255,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        common_credentials_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"common-credentials.txt\"\n        )\n        if not self.COMMON_PASSWORDS:\n            with open(common_credentials_file) as f:\n                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n",
                    "rendered": {
                      "text": "        common_credentials_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"common-credentials.txt\"\n        )\n        if not self.COMMON_PASSWORDS:\n            with open(common_credentials_file) as f:\n                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n",
                      "markdown": "`        common_credentials_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"common-credentials.txt\"\n        )\n        if not self.COMMON_PASSWORDS:\n            with open(common_credentials_file) as f:\n                self.COMMON_PASSWORDS = set(f.read().splitlines())\n        return password in self.COMMON_PASSWORDS\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 33,
                  "endLine": 251,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n        self.add_login_attempt(username)\n\n    def is_password_common(self, password):\n        common_credentials_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"common-credentials.txt\"\n        )\n",
                    "rendered": {
                      "text": "\n        self.add_login_attempt(username)\n\n    def is_password_common(self, password):\n        common_credentials_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"common-credentials.txt\"\n        )\n",
                      "markdown": "`\n        self.add_login_attempt(username)\n\n    def is_password_common(self, password):\n        common_credentials_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"common-credentials.txt\"\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 11,
                  "endLine": 251,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n        self.add_login_attempt(username)\n\n    def is_password_common(self, password):\n        common_credentials_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"common-credentials.txt\"\n        )\n",
                    "rendered": {
                      "text": "\n        self.add_login_attempt(username)\n\n    def is_password_common(self, password):\n        common_credentials_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"common-credentials.txt\"\n        )\n",
                      "markdown": "`\n        self.add_login_attempt(username)\n\n    def is_password_common(self, password):\n        common_credentials_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"common-credentials.txt\"\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 66,
                  "endLine": 241,
                  "endColumn": 74,
                  "snippet": {
                    "text": "            if self.is_blocked(username):\n                return\n\n        validations = [user.is_authorized, user.is_valid_password(password)]\n        if user.has_2fa:\n            validations.append(user.is_valid_token(data.get(\"2fa\")))\n\n",
                    "rendered": {
                      "text": "            if self.is_blocked(username):\n                return\n\n        validations = [user.is_authorized, user.is_valid_password(password)]\n        if user.has_2fa:\n            validations.append(user.is_valid_token(data.get(\"2fa\")))\n\n",
                      "markdown": "`            if self.is_blocked(username):\n                return\n\n        validations = [user.is_authorized, user.is_valid_password(password)]\n        if user.has_2fa:\n            validations.append(user.is_valid_token(data.get(\"2fa\")))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 57,
                  "endLine": 241,
                  "endColumn": 65,
                  "snippet": {
                    "text": "            if self.is_blocked(username):\n                return\n\n        validations = [user.is_authorized, user.is_valid_password(password)]\n        if user.has_2fa:\n            validations.append(user.is_valid_token(data.get(\"2fa\")))\n\n",
                    "rendered": {
                      "text": "            if self.is_blocked(username):\n                return\n\n        validations = [user.is_authorized, user.is_valid_password(password)]\n        if user.has_2fa:\n            validations.append(user.is_valid_token(data.get(\"2fa\")))\n\n",
                      "markdown": "`            if self.is_blocked(username):\n                return\n\n        validations = [user.is_authorized, user.is_valid_password(password)]\n        if user.has_2fa:\n            validations.append(user.is_valid_token(data.get(\"2fa\")))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 25,
                  "endLine": 231,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n    async def authenticate(self, handler, data):\n        username = self.normalize_username(data[\"username\"])\n        password = data[\"password\"]\n\n        user = self.get_user(username)\n        if not user:\n",
                    "rendered": {
                      "text": "\n    async def authenticate(self, handler, data):\n        username = self.normalize_username(data[\"username\"])\n        password = data[\"password\"]\n\n        user = self.get_user(username)\n        if not user:\n",
                      "markdown": "`\n    async def authenticate(self, handler, data):\n        username = self.normalize_username(data[\"username\"])\n        password = data[\"password\"]\n\n        user = self.get_user(username)\n        if not user:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 8,
                  "endLine": 231,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    async def authenticate(self, handler, data):\n        username = self.normalize_username(data[\"username\"])\n        password = data[\"password\"]\n\n        user = self.get_user(username)\n        if not user:\n",
                    "rendered": {
                      "text": "\n    async def authenticate(self, handler, data):\n        username = self.normalize_username(data[\"username\"])\n        password = data[\"password\"]\n\n        user = self.get_user(username)\n        if not user:\n",
                      "markdown": "`\n    async def authenticate(self, handler, data):\n        username = self.normalize_username(data[\"username\"])\n        password = data[\"password\"]\n\n        user = self.get_user(username)\n        if not user:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 21,
                  "endLine": 188,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            self.ask_email_on_signup = True\n            if len(self.secret_key) < 8:\n                raise ValueError(\n                    \"Secret_key must be a random string of \"\n                    \"len > 8 when using self_approval\"\n                )\n\n",
                    "rendered": {
                      "text": "            self.ask_email_on_signup = True\n            if len(self.secret_key) < 8:\n                raise ValueError(\n                    \"Secret_key must be a random string of \"\n                    \"len > 8 when using self_approval\"\n                )\n\n",
                      "markdown": "`            self.ask_email_on_signup = True\n            if len(self.secret_key) < 8:\n                raise ValueError(\n                    \"Secret_key must be a random string of \"\n                    \"len > 8 when using self_approval\"\n                )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 24,
                  "endLine": 186,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            if self.open_signup:\n                self.log.error(\"self_approval and open_signup are conflicts!\")\n            self.ask_email_on_signup = True\n            if len(self.secret_key) < 8:\n                raise ValueError(\n                    \"Secret_key must be a random string of \"\n                    \"len > 8 when using self_approval\"\n",
                    "rendered": {
                      "text": "            if self.open_signup:\n                self.log.error(\"self_approval and open_signup are conflicts!\")\n            self.ask_email_on_signup = True\n            if len(self.secret_key) < 8:\n                raise ValueError(\n                    \"Secret_key must be a random string of \"\n                    \"len > 8 when using self_approval\"\n",
                      "markdown": "`            if self.open_signup:\n                self.log.error(\"self_approval and open_signup are conflicts!\")\n            self.ask_email_on_signup = True\n            if len(self.secret_key) < 8:\n                raise ValueError(\n                    \"Secret_key must be a random string of \"\n                    \"len > 8 when using self_approval\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 9,
                  "endLine": 154,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    )\n\n    firstuse_db_path = Unicode(\n        \"passwords.dbm\",\n        config=True,\n        help=\"\"\"\n        Path to store the db file of FirstUse with username / pwd hash in\n",
                    "rendered": {
                      "text": "    )\n\n    firstuse_db_path = Unicode(\n        \"passwords.dbm\",\n        config=True,\n        help=\"\"\"\n        Path to store the db file of FirstUse with username / pwd hash in\n",
                      "markdown": "`    )\n\n    firstuse_db_path = Unicode(\n        \"passwords.dbm\",\n        config=True,\n        help=\"\"\"\n        Path to store the db file of FirstUse with username / pwd hash in\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 42,
                  "endLine": 113,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    minimum_password_length = Integer(\n        config=True,\n        help=(\"Check if the length of the password is at least this size on \" \"signup\"),\n    ).tag(default=1)\n\n    allowed_failed_logins = Integer(\n",
                    "rendered": {
                      "text": "\n    minimum_password_length = Integer(\n        config=True,\n        help=(\"Check if the length of the password is at least this size on \" \"signup\"),\n    ).tag(default=1)\n\n    allowed_failed_logins = Integer(\n",
                      "markdown": "`\n    minimum_password_length = Integer(\n        config=True,\n        help=(\"Check if the length of the password is at least this size on \" \"signup\"),\n    ).tag(default=1)\n\n    allowed_failed_logins = Integer(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 12,
                  "endLine": 111,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        ),\n    ).tag(default=False)\n\n    minimum_password_length = Integer(\n        config=True,\n        help=(\"Check if the length of the password is at least this size on \" \"signup\"),\n    ).tag(default=1)\n",
                    "rendered": {
                      "text": "        ),\n    ).tag(default=False)\n\n    minimum_password_length = Integer(\n        config=True,\n        help=(\"Check if the length of the password is at least this size on \" \"signup\"),\n    ).tag(default=1)\n",
                      "markdown": "`        ),\n    ).tag(default=False)\n\n    minimum_password_length = Integer(\n        config=True,\n        help=(\"Check if the length of the password is at least this size on \" \"signup\"),\n    ).tag(default=1)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 39,
                  "endLine": 106,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    check_common_password = Bool(\n        config=True,\n        help=(\n            \"Creates a verification of password strength \"\n            \"when a new user makes signup\"\n        ),\n    ).tag(default=False)\n",
                    "rendered": {
                      "text": "    check_common_password = Bool(\n        config=True,\n        help=(\n            \"Creates a verification of password strength \"\n            \"when a new user makes signup\"\n        ),\n    ).tag(default=False)\n",
                      "markdown": "`    check_common_password = Bool(\n        config=True,\n        help=(\n            \"Creates a verification of password strength \"\n            \"when a new user makes signup\"\n        ),\n    ).tag(default=False)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 17,
                  "endLine": 103,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        ),\n    )\n\n    check_common_password = Bool(\n        config=True,\n        help=(\n            \"Creates a verification of password strength \"\n",
                    "rendered": {
                      "text": "        ),\n    )\n\n    check_common_password = Bool(\n        config=True,\n        help=(\n            \"Creates a verification of password strength \"\n",
                      "markdown": "`        ),\n    )\n\n    check_common_password = Bool(\n        config=True,\n        help=(\n            \"Creates a verification of password strength \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 4,
                  "endLine": 63,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        ),\n    ).tag(default=None)\n\n    secret_key = Unicode(\n        config=True,\n        help=(\n            \"Secret key to cryptographically sign the \"\n",
                    "rendered": {
                      "text": "        ),\n    ).tag(default=None)\n\n    secret_key = Unicode(\n        config=True,\n        help=(\n            \"Secret key to cryptographically sign the \"\n",
                      "markdown": "`        ),\n    ).tag(default=None)\n\n    secret_key = Unicode(\n        config=True,\n        help=(\n            \"Secret key to cryptographically sign the \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 23,
                  "endLine": 59,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            \"SMTP server information as a dictionary of 'url', 'usr'\"\n            \"and 'pwd' to use for sending email, e.g.\"\n            \"self_approval_server={'url': 'smtp.gmail.com', 'usr': 'myself'\"\n            \"'pwd': 'mypassword'}\"\n        ),\n    ).tag(default=None)\n\n",
                    "rendered": {
                      "text": "            \"SMTP server information as a dictionary of 'url', 'usr'\"\n            \"and 'pwd' to use for sending email, e.g.\"\n            \"self_approval_server={'url': 'smtp.gmail.com', 'usr': 'myself'\"\n            \"'pwd': 'mypassword'}\"\n        ),\n    ).tag(default=None)\n\n",
                      "markdown": "`            \"SMTP server information as a dictionary of 'url', 'usr'\"\n            \"and 'pwd' to use for sending email, e.g.\"\n            \"self_approval_server={'url': 'smtp.gmail.com', 'usr': 'myself'\"\n            \"'pwd': 'mypassword'}\"\n        ),\n    ).tag(default=None)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n\nclass NativeAuthenticator(Authenticator):\n    COMMON_PASSWORDS = None\n    recaptcha_key = Unicode(\n        config=True,\n        help=(\n",
                    "rendered": {
                      "text": "\n\nclass NativeAuthenticator(Authenticator):\n    COMMON_PASSWORDS = None\n    recaptcha_key = Unicode(\n        config=True,\n        help=(\n",
                      "markdown": "`\n\nclass NativeAuthenticator(Authenticator):\n    COMMON_PASSWORDS = None\n    recaptcha_key = Unicode(\n        config=True,\n        help=(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 10,
                  "endLine": 20,
                  "endColumn": 18,
                  "snippet": {
                    "text": "from .handlers import (\n    AuthorizationAreaHandler,\n    ChangePasswordAdminHandler,\n    ChangePasswordHandler,\n    DiscardHandler,\n    EmailAuthorizationHandler,\n    LoginHandler,\n",
                    "rendered": {
                      "text": "from .handlers import (\n    AuthorizationAreaHandler,\n    ChangePasswordAdminHandler,\n    ChangePasswordHandler,\n    DiscardHandler,\n    EmailAuthorizationHandler,\n    LoginHandler,\n",
                      "markdown": "`from .handlers import (\n    AuthorizationAreaHandler,\n    ChangePasswordAdminHandler,\n    ChangePasswordHandler,\n    DiscardHandler,\n    EmailAuthorizationHandler,\n    LoginHandler,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 10,
                  "endLine": 19,
                  "endColumn": 18,
                  "snippet": {
                    "text": "from .crypto.signing import Signer\nfrom .handlers import (\n    AuthorizationAreaHandler,\n    ChangePasswordAdminHandler,\n    ChangePasswordHandler,\n    DiscardHandler,\n    EmailAuthorizationHandler,\n",
                    "rendered": {
                      "text": "from .crypto.signing import Signer\nfrom .handlers import (\n    AuthorizationAreaHandler,\n    ChangePasswordAdminHandler,\n    ChangePasswordHandler,\n    DiscardHandler,\n    EmailAuthorizationHandler,\n",
                      "markdown": "`from .crypto.signing import Signer\nfrom .handlers import (\n    AuthorizationAreaHandler,\n    ChangePasswordAdminHandler,\n    ChangePasswordHandler,\n    DiscardHandler,\n    EmailAuthorizationHandler,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 29,
                  "endLine": 279,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                # Deprecated for jupyterhub >= 1.2\n                allowed = self.whitelist\n            except AttributeError:\n                # Not present at all in jupyterhub < 0.9\n                allowed = {}\n\n        authed = set()\n",
                    "rendered": {
                      "text": "                # Deprecated for jupyterhub >= 1.2\n                allowed = self.whitelist\n            except AttributeError:\n                # Not present at all in jupyterhub < 0.9\n                allowed = {}\n\n        authed = set()\n",
                      "markdown": "`                # Deprecated for jupyterhub >= 1.2\n                allowed = self.whitelist\n            except AttributeError:\n                # Not present at all in jupyterhub < 0.9\n                allowed = {}\n\n        authed = set()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 53,
                  "endLine": 113,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n    minimum_password_length = Integer(\n        config=True,\n        help=(\"Check if the length of the password is at least this size on \" \"signup\"),\n    ).tag(default=1)\n\n    allowed_failed_logins = Integer(\n",
                    "rendered": {
                      "text": "\n    minimum_password_length = Integer(\n        config=True,\n        help=(\"Check if the length of the password is at least this size on \" \"signup\"),\n    ).tag(default=1)\n\n    allowed_failed_logins = Integer(\n",
                      "markdown": "`\n    minimum_password_length = Integer(\n        config=True,\n        help=(\"Check if the length of the password is at least this size on \" \"signup\"),\n    ).tag(default=1)\n\n    allowed_failed_logins = Integer(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 57,
                  "endLine": 43,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    recaptcha_secret = Unicode(\n        config=True,\n        help=(\n            \"Your secret to enable reCAPTCHA as described at \"\n            \"https://developers.google.com/recaptcha/intro\"\n        ),\n    ).tag(default=None)\n",
                    "rendered": {
                      "text": "    recaptcha_secret = Unicode(\n        config=True,\n        help=(\n            \"Your secret to enable reCAPTCHA as described at \"\n            \"https://developers.google.com/recaptcha/intro\"\n        ),\n    ).tag(default=None)\n",
                      "markdown": "`    recaptcha_secret = Unicode(\n        config=True,\n        help=(\n            \"Your secret to enable reCAPTCHA as described at \"\n            \"https://developers.google.com/recaptcha/intro\"\n        ),\n    ).tag(default=None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 54,
                  "endLine": 35,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    recaptcha_key = Unicode(\n        config=True,\n        help=(\n            \"Your key to enable reCAPTCHA as described at \"\n            \"https://developers.google.com/recaptcha/intro\"\n        ),\n    ).tag(default=None)\n",
                    "rendered": {
                      "text": "    recaptcha_key = Unicode(\n        config=True,\n        help=(\n            \"Your key to enable reCAPTCHA as described at \"\n            \"https://developers.google.com/recaptcha/intro\"\n        ),\n    ).tag(default=None)\n",
                      "markdown": "`    recaptcha_key = Unicode(\n        config=True,\n        help=(\n            \"Your key to enable reCAPTCHA as described at \"\n            \"https://developers.google.com/recaptcha/intro\"\n        ),\n    ).tag(default=None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/nativeauthenticator.py"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 54,
                  "endLine": 50,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n    tos = Unicode(\n        config=True,\n        help=(\"The HTML to present next to the Term of Service \" \"checkbox\"),\n    ).tag(default=None)\n\n    self_approval_server = Dict(\n",
                    "rendered": {
                      "text": "\n    tos = Unicode(\n        config=True,\n        help=(\"The HTML to present next to the Term of Service \" \"checkbox\"),\n    ).tag(default=None)\n\n    self_approval_server = Dict(\n",
                      "markdown": "`\n    tos = Unicode(\n        config=True,\n        help=(\"The HTML to present next to the Term of Service \" \"checkbox\"),\n    ).tag(default=None)\n\n    self_approval_server = Dict(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_orm.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 41,
                  "endLine": 35,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\ndef test_wrong_pwd_type(tmpcwd, app):\n    with pytest.raises(StatementError):\n        user = UserInfo(username=\"john\", password=\"pwd\", email=\"john@john.com\")\n        app.db.add(user)\n        UserInfo.find(app.db, \"john\")\n",
                    "rendered": {
                      "text": "\ndef test_wrong_pwd_type(tmpcwd, app):\n    with pytest.raises(StatementError):\n        user = UserInfo(username=\"john\", password=\"pwd\", email=\"john@john.com\")\n        app.db.add(user)\n        UserInfo.find(app.db, \"john\")\n",
                      "markdown": "`\ndef test_wrong_pwd_type(tmpcwd, app):\n    with pytest.raises(StatementError):\n        user = UserInfo(username=\"john\", password=\"pwd\", email=\"john@john.com\")\n        app.db.add(user)\n        UserInfo.find(app.db, \"john\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_orm.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 8,
                  "endLine": 24,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    assert len(UserInfo.all_users(app.db)) == 0\n    user = UserInfo(\n        username=\"daenerystargaryen\",\n        password=b\"yesispeakvalyrian\",\n        email=\"khaleesi@valyria.com\",\n    )\n    app.db.add(user)\n",
                    "rendered": {
                      "text": "    assert len(UserInfo.all_users(app.db)) == 0\n    user = UserInfo(\n        username=\"daenerystargaryen\",\n        password=b\"yesispeakvalyrian\",\n        email=\"khaleesi@valyria.com\",\n    )\n    app.db.add(user)\n",
                      "markdown": "`    assert len(UserInfo.all_users(app.db)) == 0\n    user = UserInfo(\n        username=\"daenerystargaryen\",\n        password=b\"yesispeakvalyrian\",\n        email=\"khaleesi@valyria.com\",\n    )\n    app.db.add(user)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_orm.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 37,
                  "endLine": 14,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\ndef test_validate_method_correct_email(tmpcwd, app):\n    user = UserInfo(username=\"john\", password=b\"pwd\", email=\"john@john.com\")\n    app.db.add(user)\n    app.db.commit()\n    assert UserInfo.find(app.db, \"john\")\n",
                    "rendered": {
                      "text": "\n\ndef test_validate_method_correct_email(tmpcwd, app):\n    user = UserInfo(username=\"john\", password=b\"pwd\", email=\"john@john.com\")\n    app.db.add(user)\n    app.db.commit()\n    assert UserInfo.find(app.db, \"john\")\n",
                      "markdown": "`\n\ndef test_validate_method_correct_email(tmpcwd, app):\n    user = UserInfo(username=\"john\", password=b\"pwd\", email=\"john@john.com\")\n    app.db.add(user)\n    app.db.commit()\n    assert UserInfo.find(app.db, \"john\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_orm.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 34,
                  "endLine": 10,
                  "endColumn": 42,
                  "snippet": {
                    "text": "@pytest.mark.parametrize(\"email\", [\"john\", \"john@john\"])\ndef test_validate_method_wrong_email(email, tmpcwd, app):\n    with pytest.raises(AssertionError):\n        UserInfo(username=\"john\", password=b\"pwd\", email=email)\n\n\ndef test_validate_method_correct_email(tmpcwd, app):\n",
                    "rendered": {
                      "text": "@pytest.mark.parametrize(\"email\", [\"john\", \"john@john\"])\ndef test_validate_method_wrong_email(email, tmpcwd, app):\n    with pytest.raises(AssertionError):\n        UserInfo(username=\"john\", password=b\"pwd\", email=email)\n\n\ndef test_validate_method_correct_email(tmpcwd, app):\n",
                      "markdown": "`@pytest.mark.parametrize(\"email\", [\"john\", \"john@john\"])\ndef test_validate_method_wrong_email(email, tmpcwd, app):\n    with pytest.raises(AssertionError):\n        UserInfo(username=\"john\", password=b\"pwd\", email=email)\n\n\ndef test_validate_method_correct_email(tmpcwd, app):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/page.html"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 87,
                  "endLine": 5,
                  "endColumn": 95,
                  "snippet": {
                    "text": "\n{% block nav_bar_left_items %}\n    {{ super() }}\n    <li class=\"nav-item\"><a class=\"nav-link\" href=\"{{base_url}}change-password\">Change Password</a></li>\n    {% if user.admin %}\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{{base_url}}authorize\">Authorize Users</a></li>\n    {% endif %}\n",
                    "rendered": {
                      "text": "\n{% block nav_bar_left_items %}\n    {{ super() }}\n    <li class=\"nav-item\"><a class=\"nav-link\" href=\"{{base_url}}change-password\">Change Password</a></li>\n    {% if user.admin %}\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{{base_url}}authorize\">Authorize Users</a></li>\n    {% endif %}\n",
                      "markdown": "`\n{% block nav_bar_left_items %}\n    {{ super() }}\n    <li class=\"nav-item\"><a class=\"nav-link\" href=\"{{base_url}}change-password\">Change Password</a></li>\n    {% if user.admin %}\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{{base_url}}authorize\">Authorize Users</a></li>\n    {% endif %}\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/page.html"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 70,
                  "endLine": 5,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n{% block nav_bar_left_items %}\n    {{ super() }}\n    <li class=\"nav-item\"><a class=\"nav-link\" href=\"{{base_url}}change-password\">Change Password</a></li>\n    {% if user.admin %}\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{{base_url}}authorize\">Authorize Users</a></li>\n    {% endif %}\n",
                    "rendered": {
                      "text": "\n{% block nav_bar_left_items %}\n    {{ super() }}\n    <li class=\"nav-item\"><a class=\"nav-link\" href=\"{{base_url}}change-password\">Change Password</a></li>\n    {% if user.admin %}\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{{base_url}}authorize\">Authorize Users</a></li>\n    {% endif %}\n",
                      "markdown": "`\n{% block nav_bar_left_items %}\n    {{ super() }}\n    <li class=\"nav-item\"><a class=\"nav-link\" href=\"{{base_url}}change-password\">Change Password</a></li>\n    {% if user.admin %}\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{{base_url}}authorize\">Authorize Users</a></li>\n    {% endif %}\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 42,
                  "endLine": 203,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        return self.sign(base64d)\n\n    def unsign_object(self, signed_obj, serializer=JSONSerializer, **kwargs):\n        # Signer.unsign() returns str but base64 and zlib compression operate\n        # on bytes.\n        base64d = self.unsign(signed_obj, **kwargs).encode()\n        decompress = base64d[:1] == b\".\"\n",
                    "rendered": {
                      "text": "        return self.sign(base64d)\n\n    def unsign_object(self, signed_obj, serializer=JSONSerializer, **kwargs):\n        # Signer.unsign() returns str but base64 and zlib compression operate\n        # on bytes.\n        base64d = self.unsign(signed_obj, **kwargs).encode()\n        decompress = base64d[:1] == b\".\"\n",
                      "markdown": "`        return self.sign(base64d)\n\n    def unsign_object(self, signed_obj, serializer=JSONSerializer, **kwargs):\n        # Signer.unsign() returns str but base64 and zlib compression operate\n        # on bytes.\n        base64d = self.unsign(signed_obj, **kwargs).encode()\n        decompress = base64d[:1] == b\".\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 37,
                  "endLine": 179,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n    def sign_object(self, obj, serializer=JSONSerializer, compress=False):\n        \"\"\"\n        Return URL-safe, hmac signed base64 compressed JSON string.\n\n        If compress is True (not the default), check if compressing using zlib\n        can save some space. Prepend a '.' to signify compression. This is\n",
                    "rendered": {
                      "text": "\n    def sign_object(self, obj, serializer=JSONSerializer, compress=False):\n        \"\"\"\n        Return URL-safe, hmac signed base64 compressed JSON string.\n\n        If compress is True (not the default), check if compressing using zlib\n        can save some space. Prepend a '.' to signify compression. This is\n",
                      "markdown": "`\n    def sign_object(self, obj, serializer=JSONSerializer, compress=False):\n        \"\"\"\n        Return URL-safe, hmac signed base64 compressed JSON string.\n\n        If compress is True (not the default), check if compressing using zlib\n        can save some space. Prepend a '.' to signify compression. This is\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 33,
                  "endLine": 114,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    obj, key=None, salt=\"django.core.signing\", serializer=JSONSerializer, compress=False\n):\n    \"\"\"\n    Return URL-safe, hmac signed base64 compressed JSON string. If key is\n    None, raises Exception. The hmac algorithm is the default\n    Signer algorithm.\n\n",
                    "rendered": {
                      "text": "    obj, key=None, salt=\"django.core.signing\", serializer=JSONSerializer, compress=False\n):\n    \"\"\"\n    Return URL-safe, hmac signed base64 compressed JSON string. If key is\n    None, raises Exception. The hmac algorithm is the default\n    Signer algorithm.\n\n",
                      "markdown": "`    obj, key=None, salt=\"django.core.signing\", serializer=JSONSerializer, compress=False\n):\n    \"\"\"\n    Return URL-safe, hmac signed base64 compressed JSON string. If key is\n    None, raises Exception. The hmac algorithm is the default\n    Signer algorithm.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 11,
                  "endLine": 88,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\ndef b64_decode(s):\n    pad = b\"=\" * (-len(s) % 4)\n    return base64.urlsafe_b64decode(s + pad)\n\n\ndef base64_hmac(salt, value, key, algorithm=\"sha1\"):\n",
                    "rendered": {
                      "text": "\ndef b64_decode(s):\n    pad = b\"=\" * (-len(s) % 4)\n    return base64.urlsafe_b64decode(s + pad)\n\n\ndef base64_hmac(salt, value, key, algorithm=\"sha1\"):\n",
                      "markdown": "`\ndef b64_decode(s):\n    pad = b\"=\" * (-len(s) % 4)\n    return base64.urlsafe_b64decode(s + pad)\n\n\ndef base64_hmac(salt, value, key, algorithm=\"sha1\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 11,
                  "endLine": 83,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n\ndef b64_encode(s):\n    return base64.urlsafe_b64encode(s).strip(b\"=\")\n\n\ndef b64_decode(s):\n",
                    "rendered": {
                      "text": "\n\ndef b64_encode(s):\n    return base64.urlsafe_b64encode(s).strip(b\"=\")\n\n\ndef b64_decode(s):\n",
                      "markdown": "`\n\ndef b64_encode(s):\n    return base64.urlsafe_b64encode(s).strip(b\"=\")\n\n\ndef b64_decode(s):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 7,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "These functions make use of all of them.\n\"\"\"\n\nimport base64\nimport datetime\nimport json\nimport re\n",
                    "rendered": {
                      "text": "These functions make use of all of them.\n\"\"\"\n\nimport base64\nimport datetime\nimport json\nimport re\n",
                      "markdown": "`These functions make use of all of them.\n\"\"\"\n\nimport base64\nimport datetime\nimport json\nimport re\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 58,
                  "endLine": 32,
                  "endColumn": 64,
                  "snippet": {
                    "text": "The fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\nThese functions make use of all of them.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "The fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\nThese functions make use of all of them.\n\"\"\"\n\n",
                      "markdown": "`The fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\nThese functions make use of all of them.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 13,
                  "endLine": 30,
                  "endColumn": 19,
                  "snippet": {
                    "text": "'.eJwFwcERACAIwLCF-rCiILN47r-GyZVJsNgkxaFxoDgxcOHGxMKD_T7vhAml:1QaUaL:BA0thEZrp4FQVXIXuOvYJtLJSrQ'\n\nThe fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\nThese functions make use of all of them.\n",
                    "rendered": {
                      "text": "'.eJwFwcERACAIwLCF-rCiILN47r-GyZVJsNgkxaFxoDgxcOHGxMKD_T7vhAml:1QaUaL:BA0thEZrp4FQVXIXuOvYJtLJSrQ'\n\nThe fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\nThese functions make use of all of them.\n",
                      "markdown": "`'.eJwFwcERACAIwLCF-rCiILN47r-GyZVJsNgkxaFxoDgxcOHGxMKD_T7vhAml:1QaUaL:BA0thEZrp4FQVXIXuOvYJtLJSrQ'\n\nThe fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\nThese functions make use of all of them.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 46,
                  "endLine": 22,
                  "endColumn": 52,
                  "snippet": {
                    "text": "...\nBadSignature: Signature failed: ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422n-modified\n\nYou can optionally compress the JSON prior to base64 encoding it to save\nspace, using the compress=True argument. This checks if compression actually\nhelps and only applies compression if the result is a shorter string:\n\n",
                    "rendered": {
                      "text": "...\nBadSignature: Signature failed: ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422n-modified\n\nYou can optionally compress the JSON prior to base64 encoding it to save\nspace, using the compress=True argument. This checks if compression actually\nhelps and only applies compression if the result is a shorter string:\n\n",
                      "markdown": "`...\nBadSignature: Signature failed: ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422n-modified\n\nYou can optionally compress the JSON prior to base64 encoding it to save\nspace, using the compress=True argument. This checks if compression actually\nhelps and only applies compression if the result is a shorter string:\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 15,
                  "endLine": 11,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nThere are two components here, separated by a ':'. The first component is a\nURLsafe base64 encoded JSON of the object passed to dumps(). The second\ncomponent is a base64 encoded hmac/SHA1 hash of \"$first_component:$secret\"\n\nsigning.loads(s) checks the signature and returns the deserialized object.\nIf the signature fails, a BadSignature exception is raised.\n",
                    "rendered": {
                      "text": "\nThere are two components here, separated by a ':'. The first component is a\nURLsafe base64 encoded JSON of the object passed to dumps(). The second\ncomponent is a base64 encoded hmac/SHA1 hash of \"$first_component:$secret\"\n\nsigning.loads(s) checks the signature and returns the deserialized object.\nIf the signature fails, a BadSignature exception is raised.\n",
                      "markdown": "`\nThere are two components here, separated by a ':'. The first component is a\nURLsafe base64 encoded JSON of the object passed to dumps(). The second\ncomponent is a base64 encoded hmac/SHA1 hash of \"$first_component:$secret\"\n\nsigning.loads(s) checks the signature and returns the deserialized object.\nIf the signature fails, a BadSignature exception is raised.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 8,
                  "endLine": 10,
                  "endColumn": 14,
                  "snippet": {
                    "text": "'ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk'\n\nThere are two components here, separated by a ':'. The first component is a\nURLsafe base64 encoded JSON of the object passed to dumps(). The second\ncomponent is a base64 encoded hmac/SHA1 hash of \"$first_component:$secret\"\n\nsigning.loads(s) checks the signature and returns the deserialized object.\n",
                    "rendered": {
                      "text": "'ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk'\n\nThere are two components here, separated by a ':'. The first component is a\nURLsafe base64 encoded JSON of the object passed to dumps(). The second\ncomponent is a base64 encoded hmac/SHA1 hash of \"$first_component:$secret\"\n\nsigning.loads(s) checks the signature and returns the deserialized object.\n",
                      "markdown": "`'ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk'\n\nThere are two components here, separated by a ':'. The first component is a\nURLsafe base64 encoded JSON of the object passed to dumps(). The second\ncomponent is a base64 encoded hmac/SHA1 hash of \"$first_component:$secret\"\n\nsigning.loads(s) checks the signature and returns the deserialized object.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 18,
                  "endLine": 46,
                  "endColumn": 82,
                  "snippet": {
                    "text": "from .crypto import constant_time_compare, salted_hmac\n\n_SEP_UNSAFE = re.compile(r\"^[A-z0-9-_=]*$\")\nBASE62_ALPHABET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\n\nclass BadSignature(Exception):\n",
                    "rendered": {
                      "text": "from .crypto import constant_time_compare, salted_hmac\n\n_SEP_UNSAFE = re.compile(r\"^[A-z0-9-_=]*$\")\nBASE62_ALPHABET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\n\nclass BadSignature(Exception):\n",
                      "markdown": "`from .crypto import constant_time_compare, salted_hmac\n\n_SEP_UNSAFE = re.compile(r\"^[A-z0-9-_=]*$\")\nBASE62_ALPHABET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\n\nclass BadSignature(Exception):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 50,
                  "endLine": 123,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    in the signature, to protect against zip bombs.\n\n    Salt can be used to namespace the hash, so that a signed string is\n    only valid for a given namespace. Leaving this at the default\n    value or re-using a salt value across different parts of your\n    application without good cause is a security risk.\n\n",
                    "rendered": {
                      "text": "    in the signature, to protect against zip bombs.\n\n    Salt can be used to namespace the hash, so that a signed string is\n    only valid for a given namespace. Leaving this at the default\n    value or re-using a salt value across different parts of your\n    application without good cause is a security risk.\n\n",
                      "markdown": "`    in the signature, to protect against zip bombs.\n\n    Salt can be used to namespace the hash, so that a signed string is\n    only valid for a given namespace. Leaving this at the default\n    value or re-using a salt value across different parts of your\n    application without good cause is a security risk.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 71,
                  "endLine": 29,
                  "endColumn": 75,
                  "snippet": {
                    "text": ">>> signing.dumps(list(range(1, 20)), compress=True)\n'.eJwFwcERACAIwLCF-rCiILN47r-GyZVJsNgkxaFxoDgxcOHGxMKD_T7vhAml:1QaUaL:BA0thEZrp4FQVXIXuOvYJtLJSrQ'\n\nThe fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\n",
                    "rendered": {
                      "text": ">>> signing.dumps(list(range(1, 20)), compress=True)\n'.eJwFwcERACAIwLCF-rCiILN47r-GyZVJsNgkxaFxoDgxcOHGxMKD_T7vhAml:1QaUaL:BA0thEZrp4FQVXIXuOvYJtLJSrQ'\n\nThe fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\n",
                      "markdown": "`>>> signing.dumps(list(range(1, 20)), compress=True)\n'.eJwFwcERACAIwLCF-rCiILN47r-GyZVJsNgkxaFxoDgxcOHGxMKD_T7vhAml:1QaUaL:BA0thEZrp4FQVXIXuOvYJtLJSrQ'\n\nThe fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 41,
                  "endLine": 203,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        return self.sign(base64d)\n\n    def unsign_object(self, signed_obj, serializer=JSONSerializer, **kwargs):\n        # Signer.unsign() returns str but base64 and zlib compression operate\n        # on bytes.\n        base64d = self.unsign(signed_obj, **kwargs).encode()\n        decompress = base64d[:1] == b\".\"\n",
                    "rendered": {
                      "text": "        return self.sign(base64d)\n\n    def unsign_object(self, signed_obj, serializer=JSONSerializer, **kwargs):\n        # Signer.unsign() returns str but base64 and zlib compression operate\n        # on bytes.\n        base64d = self.unsign(signed_obj, **kwargs).encode()\n        decompress = base64d[:1] == b\".\"\n",
                      "markdown": "`        return self.sign(base64d)\n\n    def unsign_object(self, signed_obj, serializer=JSONSerializer, **kwargs):\n        # Signer.unsign() returns str but base64 and zlib compression operate\n        # on bytes.\n        base64d = self.unsign(signed_obj, **kwargs).encode()\n        decompress = base64d[:1] == b\".\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 36,
                  "endLine": 179,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n    def sign_object(self, obj, serializer=JSONSerializer, compress=False):\n        \"\"\"\n        Return URL-safe, hmac signed base64 compressed JSON string.\n\n        If compress is True (not the default), check if compressing using zlib\n        can save some space. Prepend a '.' to signify compression. This is\n",
                    "rendered": {
                      "text": "\n    def sign_object(self, obj, serializer=JSONSerializer, compress=False):\n        \"\"\"\n        Return URL-safe, hmac signed base64 compressed JSON string.\n\n        If compress is True (not the default), check if compressing using zlib\n        can save some space. Prepend a '.' to signify compression. This is\n",
                      "markdown": "`\n    def sign_object(self, obj, serializer=JSONSerializer, compress=False):\n        \"\"\"\n        Return URL-safe, hmac signed base64 compressed JSON string.\n\n        If compress is True (not the default), check if compressing using zlib\n        can save some space. Prepend a '.' to signify compression. This is\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 32,
                  "endLine": 114,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    obj, key=None, salt=\"django.core.signing\", serializer=JSONSerializer, compress=False\n):\n    \"\"\"\n    Return URL-safe, hmac signed base64 compressed JSON string. If key is\n    None, raises Exception. The hmac algorithm is the default\n    Signer algorithm.\n\n",
                    "rendered": {
                      "text": "    obj, key=None, salt=\"django.core.signing\", serializer=JSONSerializer, compress=False\n):\n    \"\"\"\n    Return URL-safe, hmac signed base64 compressed JSON string. If key is\n    None, raises Exception. The hmac algorithm is the default\n    Signer algorithm.\n\n",
                      "markdown": "`    obj, key=None, salt=\"django.core.signing\", serializer=JSONSerializer, compress=False\n):\n    \"\"\"\n    Return URL-safe, hmac signed base64 compressed JSON string. If key is\n    None, raises Exception. The hmac algorithm is the default\n    Signer algorithm.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 6,
                  "endLine": 41,
                  "snippet": {
                    "text": "import datetime\nimport json\nimport re\nimport time\nimport zlib\n\nfrom .crypto import constant_time_compare, salted_hmac\n\n",
                    "rendered": {
                      "text": "import datetime\nimport json\nimport re\nimport time\nimport zlib\n\nfrom .crypto import constant_time_compare, salted_hmac\n\n",
                      "markdown": "`import datetime\nimport json\nimport re\nimport time\nimport zlib\n\nfrom .crypto import constant_time_compare, salted_hmac\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 37,
                  "snippet": {
                    "text": "These functions make use of all of them.\n\"\"\"\n\nimport base64\nimport datetime\nimport json\nimport re\nimport time\n",
                    "rendered": {
                      "text": "These functions make use of all of them.\n\"\"\"\n\nimport base64\nimport datetime\nimport json\nimport re\nimport time\n",
                      "markdown": "`These functions make use of all of them.\n\"\"\"\n\nimport base64\nimport datetime\nimport json\nimport re\nimport time\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 57,
                  "endLine": 32,
                  "endColumn": 65,
                  "snippet": {
                    "text": "The fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\nThese functions make use of all of them.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "The fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\nThese functions make use of all of them.\n\"\"\"\n\n",
                      "markdown": "`The fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\nThese functions make use of all of them.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 12,
                  "endLine": 30,
                  "endColumn": 20,
                  "snippet": {
                    "text": "'.eJwFwcERACAIwLCF-rCiILN47r-GyZVJsNgkxaFxoDgxcOHGxMKD_T7vhAml:1QaUaL:BA0thEZrp4FQVXIXuOvYJtLJSrQ'\n\nThe fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\nThese functions make use of all of them.\n",
                    "rendered": {
                      "text": "'.eJwFwcERACAIwLCF-rCiILN47r-GyZVJsNgkxaFxoDgxcOHGxMKD_T7vhAml:1QaUaL:BA0thEZrp4FQVXIXuOvYJtLJSrQ'\n\nThe fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\nThese functions make use of all of them.\n",
                      "markdown": "`'.eJwFwcERACAIwLCF-rCiILN47r-GyZVJsNgkxaFxoDgxcOHGxMKD_T7vhAml:1QaUaL:BA0thEZrp4FQVXIXuOvYJtLJSrQ'\n\nThe fact that the string is compressed is signalled by the prefixed '.' at the\nstart of the base64 JSON.\n\nThere are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.\nThese functions make use of all of them.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 45,
                  "endLine": 22,
                  "endColumn": 53,
                  "snippet": {
                    "text": "...\nBadSignature: Signature failed: ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422n-modified\n\nYou can optionally compress the JSON prior to base64 encoding it to save\nspace, using the compress=True argument. This checks if compression actually\nhelps and only applies compression if the result is a shorter string:\n\n",
                    "rendered": {
                      "text": "...\nBadSignature: Signature failed: ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422n-modified\n\nYou can optionally compress the JSON prior to base64 encoding it to save\nspace, using the compress=True argument. This checks if compression actually\nhelps and only applies compression if the result is a shorter string:\n\n",
                      "markdown": "`...\nBadSignature: Signature failed: ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422n-modified\n\nYou can optionally compress the JSON prior to base64 encoding it to save\nspace, using the compress=True argument. This checks if compression actually\nhelps and only applies compression if the result is a shorter string:\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 14,
                  "endLine": 11,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\nThere are two components here, separated by a ':'. The first component is a\nURLsafe base64 encoded JSON of the object passed to dumps(). The second\ncomponent is a base64 encoded hmac/SHA1 hash of \"$first_component:$secret\"\n\nsigning.loads(s) checks the signature and returns the deserialized object.\nIf the signature fails, a BadSignature exception is raised.\n",
                    "rendered": {
                      "text": "\nThere are two components here, separated by a ':'. The first component is a\nURLsafe base64 encoded JSON of the object passed to dumps(). The second\ncomponent is a base64 encoded hmac/SHA1 hash of \"$first_component:$secret\"\n\nsigning.loads(s) checks the signature and returns the deserialized object.\nIf the signature fails, a BadSignature exception is raised.\n",
                      "markdown": "`\nThere are two components here, separated by a ':'. The first component is a\nURLsafe base64 encoded JSON of the object passed to dumps(). The second\ncomponent is a base64 encoded hmac/SHA1 hash of \"$first_component:$secret\"\n\nsigning.loads(s) checks the signature and returns the deserialized object.\nIf the signature fails, a BadSignature exception is raised.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/signing.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 7,
                  "endLine": 10,
                  "endColumn": 15,
                  "snippet": {
                    "text": "'ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk'\n\nThere are two components here, separated by a ':'. The first component is a\nURLsafe base64 encoded JSON of the object passed to dumps(). The second\ncomponent is a base64 encoded hmac/SHA1 hash of \"$first_component:$secret\"\n\nsigning.loads(s) checks the signature and returns the deserialized object.\n",
                    "rendered": {
                      "text": "'ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk'\n\nThere are two components here, separated by a ':'. The first component is a\nURLsafe base64 encoded JSON of the object passed to dumps(). The second\ncomponent is a base64 encoded hmac/SHA1 hash of \"$first_component:$secret\"\n\nsigning.loads(s) checks the signature and returns the deserialized object.\n",
                      "markdown": "`'ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk'\n\nThere are two components here, separated by a ':'. The first component is a\nURLsafe base64 encoded JSON of the object passed to dumps(). The second\ncomponent is a base64 encoded hmac/SHA1 hash of \"$first_component:$secret\"\n\nsigning.loads(s) checks the signature and returns the deserialized object.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/native-login.html"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 65,
                  "endLine": 58,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                    "rendered": {
                      "text": "\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                      "markdown": "`\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/native-login.html"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 49,
                  "endLine": 58,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                    "rendered": {
                      "text": "\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                      "markdown": "`\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/native-login.html"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 27,
                  "endLine": 58,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                    "rendered": {
                      "text": "\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                      "markdown": "`\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/native-login.html"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 40,
                  "endLine": 56,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            <input id=\"username_input\" type=\"text\" name=\"username\" val=\"{{username}}\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" autofocus=\"autofocus\" required />\n            <p></p>\n\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                    "rendered": {
                      "text": "            <input id=\"username_input\" type=\"text\" name=\"username\" val=\"{{username}}\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" autofocus=\"autofocus\" required />\n            <p></p>\n\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                      "markdown": "`            <input id=\"username_input\" type=\"text\" name=\"username\" val=\"{{username}}\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" autofocus=\"autofocus\" required />\n            <p></p>\n\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/native-login.html"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 24,
                  "endLine": 56,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            <input id=\"username_input\" type=\"text\" name=\"username\" val=\"{{username}}\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" autofocus=\"autofocus\" required />\n            <p></p>\n\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                    "rendered": {
                      "text": "            <input id=\"username_input\" type=\"text\" name=\"username\" val=\"{{username}}\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" autofocus=\"autofocus\" required />\n            <p></p>\n\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                      "markdown": "`            <input id=\"username_input\" type=\"text\" name=\"username\" val=\"{{username}}\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" autofocus=\"autofocus\" required />\n            <p></p>\n\n            <label for='password_input'>Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/native-login.html"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 42,
                  "endLine": 18,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                pwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n                pwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n        });\n",
                    "rendered": {
                      "text": "                pwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n                pwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n        });\n",
                      "markdown": "`                pwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n                pwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n        });\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/native-login.html"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 46,
                  "endLine": 14,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let pwd = document.getElementById(\"password_input\");\n            if (pwd.getAttribute(\"type\") === \"password\") {\n                pwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n",
                    "rendered": {
                      "text": "        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let pwd = document.getElementById(\"password_input\");\n            if (pwd.getAttribute(\"type\") === \"password\") {\n                pwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n",
                      "markdown": "`        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let pwd = document.getElementById(\"password_input\");\n            if (pwd.getAttribute(\"type\") === \"password\") {\n                pwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/native-login.html"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 47,
                  "endLine": 13,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    document.addEventListener('DOMContentLoaded', function() {\n        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let pwd = document.getElementById(\"password_input\");\n            if (pwd.getAttribute(\"type\") === \"password\") {\n                pwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n",
                    "rendered": {
                      "text": "    document.addEventListener('DOMContentLoaded', function() {\n        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let pwd = document.getElementById(\"password_input\");\n            if (pwd.getAttribute(\"type\") === \"password\") {\n                pwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n",
                      "markdown": "`    document.addEventListener('DOMContentLoaded', function() {\n        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let pwd = document.getElementById(\"password_input\");\n            if (pwd.getAttribute(\"type\") === \"password\") {\n                pwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/native-login.html"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 11,
                  "endLine": 30,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        warning.className = warning.className.replace(/\\bhidden\\b/, '');\n    }\n</script>\n{% endblock script %}\n\n{% block main %}\n{% block login %}\n",
                    "rendered": {
                      "text": "        warning.className = warning.className.replace(/\\bhidden\\b/, '');\n    }\n</script>\n{% endblock script %}\n\n{% block main %}\n{% block login %}\n",
                      "markdown": "`        warning.className = warning.className.replace(/\\bhidden\\b/, '');\n    }\n</script>\n{% endblock script %}\n\n{% block main %}\n{% block login %}\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/native-login.html"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 8,
                  "endLine": 7,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  {% set announcement = announcement_login %}\n{% endif %}\n\n{% block script %}\n{{ super() }}\n<script type=\"text/javascript\">\n    document.addEventListener('DOMContentLoaded', function() {\n",
                    "rendered": {
                      "text": "  {% set announcement = announcement_login %}\n{% endif %}\n\n{% block script %}\n{{ super() }}\n<script type=\"text/javascript\">\n    document.addEventListener('DOMContentLoaded', function() {\n",
                      "markdown": "`  {% set announcement = announcement_login %}\n{% endif %}\n\n{% block script %}\n{{ super() }}\n<script type=\"text/javascript\">\n    document.addEventListener('DOMContentLoaded', function() {\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/encoding.py"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 7,
                  "endLine": 86,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    (fmt % char).encode(): bytes((char,))\n    for ascii_range in _ascii_ranges\n    for char in ascii_range\n    for fmt in [\"%02x\", \"%02X\"]\n}\n# And then everything above 128, because bytes ≥ 128 are part of multibyte\n# Unicode characters.\n",
                    "rendered": {
                      "text": "    (fmt % char).encode(): bytes((char,))\n    for ascii_range in _ascii_ranges\n    for char in ascii_range\n    for fmt in [\"%02x\", \"%02X\"]\n}\n# And then everything above 128, because bytes ≥ 128 are part of multibyte\n# Unicode characters.\n",
                      "markdown": "`    (fmt % char).encode(): bytes((char,))\n    for ascii_range in _ascii_ranges\n    for char in ascii_range\n    for fmt in [\"%02x\", \"%02X\"]\n}\n# And then everything above 128, because bytes ≥ 128 are part of multibyte\n# Unicode characters.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 85,
                  "endLine": 96,
                  "endColumn": 93,
                  "snippet": {
                    "text": "            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n",
                    "rendered": {
                      "text": "            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n",
                      "markdown": "`            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 62,
                  "endLine": 96,
                  "endColumn": 70,
                  "snippet": {
                    "text": "            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n",
                    "rendered": {
                      "text": "            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n",
                      "markdown": "`            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 27,
                  "endLine": 96,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n",
                    "rendered": {
                      "text": "            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n",
                      "markdown": "`            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 50,
                  "endLine": 94,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            </div>\n            <p></p>\n            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n",
                    "rendered": {
                      "text": "            </div>\n            <p></p>\n            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n",
                      "markdown": "`            </div>\n            <p></p>\n            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 24,
                  "endLine": 94,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            </div>\n            <p></p>\n            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n",
                    "rendered": {
                      "text": "            </div>\n            <p></p>\n            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n",
                      "markdown": "`            </div>\n            <p></p>\n            \n            <label for=\"password_confirm\">Confirm password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_confirmation_input\" type=\"password\" name=\"signup_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 72,
                  "endLine": 87,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                    "rendered": {
                      "text": "\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                      "markdown": "`\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 49,
                  "endLine": 87,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                    "rendered": {
                      "text": "\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                      "markdown": "`\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 27,
                  "endLine": 87,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                    "rendered": {
                      "text": "\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                      "markdown": "`\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 40,
                  "endLine": 85,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            <p></p>\n            {% endif %}\n\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                    "rendered": {
                      "text": "            <p></p>\n            {% endif %}\n\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                      "markdown": "`            <p></p>\n            {% endif %}\n\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 24,
                  "endLine": 85,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            <p></p>\n            {% endif %}\n\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                    "rendered": {
                      "text": "            <p></p>\n            {% endif %}\n\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                      "markdown": "`            <p></p>\n            {% endif %}\n\n            <label for=\"password_input\">Password:</label>\n            <div class=\"input-group\">\n                <input id=\"password_input\" type=\"password\" name=\"signup_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 43,
                  "endLine": 18,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                button.textContent = \"🔑\";\n            } else {\n                pwd.setAttribute(\"type\", \"password\");\n                pwdc.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n        });\n",
                    "rendered": {
                      "text": "                button.textContent = \"🔑\";\n            } else {\n                pwd.setAttribute(\"type\", \"password\");\n                pwdc.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n        });\n",
                      "markdown": "`                button.textContent = \"🔑\";\n            } else {\n                pwd.setAttribute(\"type\", \"password\");\n                pwdc.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n        });\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 42,
                  "endLine": 17,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                pwdc.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n                pwd.setAttribute(\"type\", \"password\");\n                pwdc.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n",
                    "rendered": {
                      "text": "                pwdc.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n                pwd.setAttribute(\"type\", \"password\");\n                pwdc.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n",
                      "markdown": "`                pwdc.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n                pwd.setAttribute(\"type\", \"password\");\n                pwdc.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 46,
                  "endLine": 12,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            let pwd = document.getElementById(\"password_input\");\n            let pwdc = document.getElementById(\"password_confirmation_input\");\n\n            if (pwd.getAttribute(\"type\") === \"password\") {\n                pwd.setAttribute(\"type\", \"text\");\n                pwdc.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n",
                    "rendered": {
                      "text": "            let pwd = document.getElementById(\"password_input\");\n            let pwdc = document.getElementById(\"password_confirmation_input\");\n\n            if (pwd.getAttribute(\"type\") === \"password\") {\n                pwd.setAttribute(\"type\", \"text\");\n                pwdc.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n",
                      "markdown": "`            let pwd = document.getElementById(\"password_input\");\n            let pwdc = document.getElementById(\"password_confirmation_input\");\n\n            if (pwd.getAttribute(\"type\") === \"password\") {\n                pwd.setAttribute(\"type\", \"text\");\n                pwdc.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 48,
                  "endLine": 10,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let pwd = document.getElementById(\"password_input\");\n            let pwdc = document.getElementById(\"password_confirmation_input\");\n\n            if (pwd.getAttribute(\"type\") === \"password\") {\n                pwd.setAttribute(\"type\", \"text\");\n",
                    "rendered": {
                      "text": "        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let pwd = document.getElementById(\"password_input\");\n            let pwdc = document.getElementById(\"password_confirmation_input\");\n\n            if (pwd.getAttribute(\"type\") === \"password\") {\n                pwd.setAttribute(\"type\", \"text\");\n",
                      "markdown": "`        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let pwd = document.getElementById(\"password_input\");\n            let pwdc = document.getElementById(\"password_confirmation_input\");\n\n            if (pwd.getAttribute(\"type\") === \"password\") {\n                pwd.setAttribute(\"type\", \"text\");\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 47,
                  "endLine": 9,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    document.addEventListener('DOMContentLoaded', function() {\n        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let pwd = document.getElementById(\"password_input\");\n            let pwdc = document.getElementById(\"password_confirmation_input\");\n\n            if (pwd.getAttribute(\"type\") === \"password\") {\n",
                    "rendered": {
                      "text": "    document.addEventListener('DOMContentLoaded', function() {\n        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let pwd = document.getElementById(\"password_input\");\n            let pwdc = document.getElementById(\"password_confirmation_input\");\n\n            if (pwd.getAttribute(\"type\") === \"password\") {\n",
                      "markdown": "`    document.addEventListener('DOMContentLoaded', function() {\n        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let pwd = document.getElementById(\"password_input\");\n            let pwdc = document.getElementById(\"password_confirmation_input\");\n\n            if (pwd.getAttribute(\"type\") === \"password\") {\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "endLine": 44,
                  "endColumn": 19,
                  "snippet": {
                    "text": "{% if recaptcha_key %}\n<script src=\"https://www.google.com/recaptcha/api.js\" async defer></script>\n{% endif %}\n{% endblock script %}\n\n\n{% block main %}\n",
                    "rendered": {
                      "text": "{% if recaptcha_key %}\n<script src=\"https://www.google.com/recaptcha/api.js\" async defer></script>\n{% endif %}\n{% endblock script %}\n\n\n{% block main %}\n",
                      "markdown": "`{% if recaptcha_key %}\n<script src=\"https://www.google.com/recaptcha/api.js\" async defer></script>\n{% endif %}\n{% endblock script %}\n\n\n{% block main %}\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/signup.html"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 16,
                  "snippet": {
                    "text": "{% extends \"page.html\" %}\n\n{% block script %}\n{{ super() }}\n<script>\n    document.addEventListener('DOMContentLoaded', function() {\n",
                    "rendered": {
                      "text": "{% extends \"page.html\" %}\n\n{% block script %}\n{{ super() }}\n<script>\n    document.addEventListener('DOMContentLoaded', function() {\n",
                      "markdown": "`{% extends \"page.html\" %}\n\n{% block script %}\n{{ super() }}\n<script>\n    document.addEventListener('DOMContentLoaded', function() {\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 66,
                  "endLine": 50,
                  "endColumn": 74,
                  "snippet": {
                    "text": "            </div>\n            <p></p>\n\n            <input id=\"signup_submit\" type=\"submit\" value='Change Password' class='btn btn-jupyter' />\n        </div>\n    </form>\n\n",
                    "rendered": {
                      "text": "            </div>\n            <p></p>\n\n            <input id=\"signup_submit\" type=\"submit\" value='Change Password' class='btn btn-jupyter' />\n        </div>\n    </form>\n\n",
                      "markdown": "`            </div>\n            <p></p>\n\n            <input id=\"signup_submit\" type=\"submit\" value='Change Password' class='btn btn-jupyter' />\n        </div>\n    </form>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 86,
                  "endLine": 46,
                  "endColumn": 94,
                  "snippet": {
                    "text": "            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n",
                    "rendered": {
                      "text": "            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n",
                      "markdown": "`            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 66,
                  "endLine": 46,
                  "endColumn": 74,
                  "snippet": {
                    "text": "            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n",
                    "rendered": {
                      "text": "            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n",
                      "markdown": "`            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 31,
                  "endLine": 46,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n",
                    "rendered": {
                      "text": "            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n",
                      "markdown": "`            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 69,
                  "endLine": 44,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            </div>\n            <p></p>\n            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n",
                    "rendered": {
                      "text": "            </div>\n            <p></p>\n            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n",
                      "markdown": "`            </div>\n            <p></p>\n            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 28,
                  "endLine": 44,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            </div>\n            <p></p>\n            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n",
                    "rendered": {
                      "text": "            </div>\n            <p></p>\n            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n",
                      "markdown": "`            </div>\n            <p></p>\n            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 73,
                  "endLine": 37,
                  "endColumn": 81,
                  "snippet": {
                    "text": "        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                    "rendered": {
                      "text": "        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                      "markdown": "`        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 53,
                  "endLine": 37,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                    "rendered": {
                      "text": "        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                      "markdown": "`        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 31,
                  "endLine": 37,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                    "rendered": {
                      "text": "        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                      "markdown": "`        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 48,
                  "endLine": 35,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        <p>Please enter the new password you want to set for {{user_name}}.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                    "rendered": {
                      "text": "        <p>Please enter the new password you want to set for {{user_name}}.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                      "markdown": "`        <p>Please enter the new password you want to set for {{user_name}}.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 28,
                  "endLine": 35,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        <p>Please enter the new password you want to set for {{user_name}}.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                    "rendered": {
                      "text": "        <p>Please enter the new password you want to set for {{user_name}}.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                      "markdown": "`        <p>Please enter the new password you want to set for {{user_name}}.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 32,
                  "endLine": 32,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter the new password you want to set for {{user_name}}.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n",
                    "rendered": {
                      "text": "            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter the new password you want to set for {{user_name}}.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n",
                      "markdown": "`            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter the new password you want to set for {{user_name}}.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">     \n            <label for=\"new_password_input\">New password:</label>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 19,
                  "endLine": 29,
                  "endColumn": 27,
                  "snippet": {
                    "text": "<div class=\"container\">\n    <form action=\"{{post_url}}\" method=\"post\" role=\"form\">\n        <h1>\n            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter the new password you want to set for {{user_name}}.</p>\n",
                    "rendered": {
                      "text": "<div class=\"container\">\n    <form action=\"{{post_url}}\" method=\"post\" role=\"form\">\n        <h1>\n            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter the new password you want to set for {{user_name}}.</p>\n",
                      "markdown": "`<div class=\"container\">\n    <form action=\"{{post_url}}\" method=\"post\" role=\"form\">\n        <h1>\n            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter the new password you want to set for {{user_name}}.</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 43,
                  "endLine": 17,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                button.textContent = \"🔑\";\n            } else {\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n        });\n",
                    "rendered": {
                      "text": "                button.textContent = \"🔑\";\n            } else {\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n        });\n",
                      "markdown": "`                button.textContent = \"🔑\";\n            } else {\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n        });\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 43,
                  "endLine": 16,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                cpwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n",
                    "rendered": {
                      "text": "                cpwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n",
                      "markdown": "`                cpwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 47,
                  "endLine": 11,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        button.addEventListener(\"click\", function(e) {\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (npwd.getAttribute(\"type\") === \"password\") {\n                npwd.setAttribute(\"type\", \"text\");\n                cpwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n",
                    "rendered": {
                      "text": "        button.addEventListener(\"click\", function(e) {\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (npwd.getAttribute(\"type\") === \"password\") {\n                npwd.setAttribute(\"type\", \"text\");\n                cpwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n",
                      "markdown": "`        button.addEventListener(\"click\", function(e) {\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (npwd.getAttribute(\"type\") === \"password\") {\n                npwd.setAttribute(\"type\", \"text\");\n                cpwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 52,
                  "endLine": 10,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (npwd.getAttribute(\"type\") === \"password\") {\n                npwd.setAttribute(\"type\", \"text\");\n                cpwd.setAttribute(\"type\", \"text\");\n",
                    "rendered": {
                      "text": "        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (npwd.getAttribute(\"type\") === \"password\") {\n                npwd.setAttribute(\"type\", \"text\");\n                cpwd.setAttribute(\"type\", \"text\");\n",
                      "markdown": "`        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (npwd.getAttribute(\"type\") === \"password\") {\n                npwd.setAttribute(\"type\", \"text\");\n                cpwd.setAttribute(\"type\", \"text\");\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 52,
                  "endLine": 9,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    document.addEventListener('DOMContentLoaded', function() {\n        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (npwd.getAttribute(\"type\") === \"password\") {\n                npwd.setAttribute(\"type\", \"text\");\n",
                    "rendered": {
                      "text": "    document.addEventListener('DOMContentLoaded', function() {\n        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (npwd.getAttribute(\"type\") === \"password\") {\n                npwd.setAttribute(\"type\", \"text\");\n",
                      "markdown": "`    document.addEventListener('DOMContentLoaded', function() {\n        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (npwd.getAttribute(\"type\") === \"password\") {\n                npwd.setAttribute(\"type\", \"text\");\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 11,
                  "endLine": 23,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        });\n    });\n</script>\n{% endblock script %}\n\n{% block main %}\n<div class=\"container\">\n",
                    "rendered": {
                      "text": "        });\n    });\n</script>\n{% endblock script %}\n\n{% block main %}\n<div class=\"container\">\n",
                      "markdown": "`        });\n    });\n</script>\n{% endblock script %}\n\n{% block main %}\n<div class=\"container\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password-admin.html"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 16,
                  "snippet": {
                    "text": "{% extends \"page.html\" %}\n\n{% block script %}\n{{ super() }}\n<script type=\"text/javascript\">\n    document.addEventListener('DOMContentLoaded', function() {\n",
                    "rendered": {
                      "text": "{% extends \"page.html\" %}\n\n{% block script %}\n{{ super() }}\n<script type=\"text/javascript\">\n    document.addEventListener('DOMContentLoaded', function() {\n",
                      "markdown": "`{% extends \"page.html\" %}\n\n{% block script %}\n{{ super() }}\n<script type=\"text/javascript\">\n    document.addEventListener('DOMContentLoaded', function() {\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/crypto.py"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 46,
                  "endLine": 72,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    dklen = dklen or None\n    password = force_bytes(password)\n    salt = force_bytes(salt)\n    return hashlib.pbkdf2_hmac(digest().name, password, salt, iterations, dklen)\n",
                    "rendered": {
                      "text": "    dklen = dklen or None\n    password = force_bytes(password)\n    salt = force_bytes(salt)\n    return hashlib.pbkdf2_hmac(digest().name, password, salt, iterations, dklen)\n",
                      "markdown": "`    dklen = dklen or None\n    password = force_bytes(password)\n    salt = force_bytes(salt)\n    return hashlib.pbkdf2_hmac(digest().name, password, salt, iterations, dklen)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/crypto.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 27,
                  "endLine": 70,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    if digest is None:\n        digest = hashlib.sha256\n    dklen = dklen or None\n    password = force_bytes(password)\n    salt = force_bytes(salt)\n    return hashlib.pbkdf2_hmac(digest().name, password, salt, iterations, dklen)\n",
                    "rendered": {
                      "text": "    if digest is None:\n        digest = hashlib.sha256\n    dklen = dklen or None\n    password = force_bytes(password)\n    salt = force_bytes(salt)\n    return hashlib.pbkdf2_hmac(digest().name, password, salt, iterations, dklen)\n",
                      "markdown": "`    if digest is None:\n        digest = hashlib.sha256\n    dklen = dklen or None\n    password = force_bytes(password)\n    salt = force_bytes(salt)\n    return hashlib.pbkdf2_hmac(digest().name, password, salt, iterations, dklen)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/crypto.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    if digest is None:\n        digest = hashlib.sha256\n    dklen = dklen or None\n    password = force_bytes(password)\n    salt = force_bytes(salt)\n    return hashlib.pbkdf2_hmac(digest().name, password, salt, iterations, dklen)\n",
                    "rendered": {
                      "text": "    if digest is None:\n        digest = hashlib.sha256\n    dklen = dklen or None\n    password = force_bytes(password)\n    salt = force_bytes(salt)\n    return hashlib.pbkdf2_hmac(digest().name, password, salt, iterations, dklen)\n",
                      "markdown": "`    if digest is None:\n        digest = hashlib.sha256\n    dklen = dklen or None\n    password = force_bytes(password)\n    salt = force_bytes(salt)\n    return hashlib.pbkdf2_hmac(digest().name, password, salt, iterations, dklen)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/crypto.py"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 26,
                  "endLine": 66,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n\ndef pbkdf2(password, salt, iterations, dklen=0, digest=None):\n    \"\"\"Return the hash of password using pbkdf2.\"\"\"\n    if digest is None:\n        digest = hashlib.sha256\n    dklen = dklen or None\n",
                    "rendered": {
                      "text": "\n\ndef pbkdf2(password, salt, iterations, dklen=0, digest=None):\n    \"\"\"Return the hash of password using pbkdf2.\"\"\"\n    if digest is None:\n        digest = hashlib.sha256\n    dklen = dklen or None\n",
                      "markdown": "`\n\ndef pbkdf2(password, salt, iterations, dklen=0, digest=None):\n    \"\"\"Return the hash of password using pbkdf2.\"\"\"\n    if digest is None:\n        digest = hashlib.sha256\n    dklen = dklen or None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/crypto.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 11,
                  "endLine": 65,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    return secrets.compare_digest(force_bytes(val1), force_bytes(val2))\n\n\ndef pbkdf2(password, salt, iterations, dklen=0, digest=None):\n    \"\"\"Return the hash of password using pbkdf2.\"\"\"\n    if digest is None:\n        digest = hashlib.sha256\n",
                    "rendered": {
                      "text": "    return secrets.compare_digest(force_bytes(val1), force_bytes(val2))\n\n\ndef pbkdf2(password, salt, iterations, dklen=0, digest=None):\n    \"\"\"Return the hash of password using pbkdf2.\"\"\"\n    if digest is None:\n        digest = hashlib.sha256\n",
                      "markdown": "`    return secrets.compare_digest(force_bytes(val1), force_bytes(val2))\n\n\ndef pbkdf2(password, salt, iterations, dklen=0, digest=None):\n    \"\"\"Return the hash of password using pbkdf2.\"\"\"\n    if digest is None:\n        digest = hashlib.sha256\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/crypto/crypto.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 22,
                  "endLine": 43,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    return hmac.new(key, msg=force_bytes(value), digestmod=hasher)\n\n\nRANDOM_STRING_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n\n\ndef get_random_string(length, allowed_chars=RANDOM_STRING_CHARS):\n",
                    "rendered": {
                      "text": "    return hmac.new(key, msg=force_bytes(value), digestmod=hasher)\n\n\nRANDOM_STRING_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n\n\ndef get_random_string(length, allowed_chars=RANDOM_STRING_CHARS):\n",
                      "markdown": "`    return hmac.new(key, msg=force_bytes(value), digestmod=hasher)\n\n\nRANDOM_STRING_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n\n\ndef get_random_string(length, allowed_chars=RANDOM_STRING_CHARS):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 44,
                  "endLine": 114,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        Validates a time-based one-time password (TOTP) as generated by a user's\n        2fa application against the TOTP generated locally by the onetimepass\n        module. Assuming the user generated a TOTP with a common shared one-time\n        password secret (otp_secret), these passwords should match.\n        \"\"\"\n        return onetimepass.valid_totp(token, self.otp_secret)\n",
                    "rendered": {
                      "text": "        Validates a time-based one-time password (TOTP) as generated by a user's\n        2fa application against the TOTP generated locally by the onetimepass\n        module. Assuming the user generated a TOTP with a common shared one-time\n        password secret (otp_secret), these passwords should match.\n        \"\"\"\n        return onetimepass.valid_totp(token, self.otp_secret)\n",
                      "markdown": "`        Validates a time-based one-time password (TOTP) as generated by a user's\n        2fa application against the TOTP generated locally by the onetimepass\n        module. Assuming the user generated a TOTP with a common shared one-time\n        password secret (otp_secret), these passwords should match.\n        \"\"\"\n        return onetimepass.valid_totp(token, self.otp_secret)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 8,
                  "endLine": 114,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        Validates a time-based one-time password (TOTP) as generated by a user's\n        2fa application against the TOTP generated locally by the onetimepass\n        module. Assuming the user generated a TOTP with a common shared one-time\n        password secret (otp_secret), these passwords should match.\n        \"\"\"\n        return onetimepass.valid_totp(token, self.otp_secret)\n",
                    "rendered": {
                      "text": "        Validates a time-based one-time password (TOTP) as generated by a user's\n        2fa application against the TOTP generated locally by the onetimepass\n        module. Assuming the user generated a TOTP with a common shared one-time\n        password secret (otp_secret), these passwords should match.\n        \"\"\"\n        return onetimepass.valid_totp(token, self.otp_secret)\n",
                      "markdown": "`        Validates a time-based one-time password (TOTP) as generated by a user's\n        2fa application against the TOTP generated locally by the onetimepass\n        module. Assuming the user generated a TOTP with a common shared one-time\n        password secret (otp_secret), these passwords should match.\n        \"\"\"\n        return onetimepass.valid_totp(token, self.otp_secret)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 40,
                  "endLine": 111,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    def is_valid_token(self, token):\n        \"\"\"\n        Validates a time-based one-time password (TOTP) as generated by a user's\n        2fa application against the TOTP generated locally by the onetimepass\n        module. Assuming the user generated a TOTP with a common shared one-time\n        password secret (otp_secret), these passwords should match.\n",
                    "rendered": {
                      "text": "\n    def is_valid_token(self, token):\n        \"\"\"\n        Validates a time-based one-time password (TOTP) as generated by a user's\n        2fa application against the TOTP generated locally by the onetimepass\n        module. Assuming the user generated a TOTP with a common shared one-time\n        password secret (otp_secret), these passwords should match.\n",
                      "markdown": "`\n    def is_valid_token(self, token):\n        \"\"\"\n        Validates a time-based one-time password (TOTP) as generated by a user's\n        2fa application against the TOTP generated locally by the onetimepass\n        module. Assuming the user generated a TOTP with a common shared one-time\n        password secret (otp_secret), these passwords should match.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 70,
                  "endLine": 97,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n        return self.password == bcrypt.hashpw(password.encode(), self.password)\n\n    @validates(\"email\")\n    def validate_email(self, key, address):\n",
                    "rendered": {
                      "text": "        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n        return self.password == bcrypt.hashpw(password.encode(), self.password)\n\n    @validates(\"email\")\n    def validate_email(self, key, address):\n",
                      "markdown": "`        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n        return self.password == bcrypt.hashpw(password.encode(), self.password)\n\n    @validates(\"email\")\n    def validate_email(self, key, address):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 46,
                  "endLine": 97,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n        return self.password == bcrypt.hashpw(password.encode(), self.password)\n\n    @validates(\"email\")\n    def validate_email(self, key, address):\n",
                    "rendered": {
                      "text": "        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n        return self.password == bcrypt.hashpw(password.encode(), self.password)\n\n    @validates(\"email\")\n    def validate_email(self, key, address):\n",
                      "markdown": "`        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n        return self.password == bcrypt.hashpw(password.encode(), self.password)\n\n    @validates(\"email\")\n    def validate_email(self, key, address):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 20,
                  "endLine": 97,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n        return self.password == bcrypt.hashpw(password.encode(), self.password)\n\n    @validates(\"email\")\n    def validate_email(self, key, address):\n",
                    "rendered": {
                      "text": "        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n        return self.password == bcrypt.hashpw(password.encode(), self.password)\n\n    @validates(\"email\")\n    def validate_email(self, key, address):\n",
                      "markdown": "`        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n        return self.password == bcrypt.hashpw(password.encode(), self.password)\n\n    @validates(\"email\")\n    def validate_email(self, key, address):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 21,
                  "endLine": 94,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        Note that self.password has been set to the return value of calling\n        bcrypt.hashpw(...) before, that returns a concatenation of the random\n        salt used and the hashed salt+password combination. So, when we are\n        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n        return self.password == bcrypt.hashpw(password.encode(), self.password)\n",
                    "rendered": {
                      "text": "        Note that self.password has been set to the return value of calling\n        bcrypt.hashpw(...) before, that returns a concatenation of the random\n        salt used and the hashed salt+password combination. So, when we are\n        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n        return self.password == bcrypt.hashpw(password.encode(), self.password)\n",
                      "markdown": "`        Note that self.password has been set to the return value of calling\n        bcrypt.hashpw(...) before, that returns a concatenation of the random\n        salt used and the hashed salt+password combination. So, when we are\n        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n        return self.password == bcrypt.hashpw(password.encode(), self.password)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 38,
                  "endLine": 93,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n        Note that self.password has been set to the return value of calling\n        bcrypt.hashpw(...) before, that returns a concatenation of the random\n        salt used and the hashed salt+password combination. So, when we are\n        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n",
                    "rendered": {
                      "text": "\n        Note that self.password has been set to the return value of calling\n        bcrypt.hashpw(...) before, that returns a concatenation of the random\n        salt used and the hashed salt+password combination. So, when we are\n        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n",
                      "markdown": "`\n        Note that self.password has been set to the return value of calling\n        bcrypt.hashpw(...) before, that returns a concatenation of the random\n        salt used and the hashed salt+password combination. So, when we are\n        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n        enough to extract and use only the salt that was originally used.\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 23,
                  "endLine": 91,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n\n        Note that self.password has been set to the return value of calling\n        bcrypt.hashpw(...) before, that returns a concatenation of the random\n        salt used and the hashed salt+password combination. So, when we are\n        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n",
                    "rendered": {
                      "text": "        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n\n        Note that self.password has been set to the return value of calling\n        bcrypt.hashpw(...) before, that returns a concatenation of the random\n        salt used and the hashed salt+password combination. So, when we are\n        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n",
                      "markdown": "`        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n\n        Note that self.password has been set to the return value of calling\n        bcrypt.hashpw(...) before, that returns a concatenation of the random\n        salt used and the hashed salt+password combination. So, when we are\n        passing self.password back to bcrypt.hashpw(...) as a salt, it is smart\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 13,
                  "endLine": 89,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    def is_valid_password(self, password):\n        \"\"\"\n        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n\n        Note that self.password has been set to the return value of calling\n        bcrypt.hashpw(...) before, that returns a concatenation of the random\n",
                    "rendered": {
                      "text": "    def is_valid_password(self, password):\n        \"\"\"\n        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n\n        Note that self.password has been set to the return value of calling\n        bcrypt.hashpw(...) before, that returns a concatenation of the random\n",
                      "markdown": "`    def is_valid_password(self, password):\n        \"\"\"\n        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n\n        Note that self.password has been set to the return value of calling\n        bcrypt.hashpw(...) before, that returns a concatenation of the random\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 29,
                  "endLine": 88,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    def is_valid_password(self, password):\n        \"\"\"\n        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n\n        Note that self.password has been set to the return value of calling\n",
                    "rendered": {
                      "text": "\n    def is_valid_password(self, password):\n        \"\"\"\n        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n\n        Note that self.password has been set to the return value of calling\n",
                      "markdown": "`\n    def is_valid_password(self, password):\n        \"\"\"\n        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n\n        Note that self.password has been set to the return value of calling\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 32,
                  "endLine": 86,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        db.commit()\n        return user\n\n    def is_valid_password(self, password):\n        \"\"\"\n        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n",
                    "rendered": {
                      "text": "        db.commit()\n        return user\n\n    def is_valid_password(self, password):\n        \"\"\"\n        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n",
                      "markdown": "`        db.commit()\n        return user\n\n    def is_valid_password(self, password):\n        \"\"\"\n        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 17,
                  "endLine": 86,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        db.commit()\n        return user\n\n    def is_valid_password(self, password):\n        \"\"\"\n        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n",
                    "rendered": {
                      "text": "        db.commit()\n        return user\n\n    def is_valid_password(self, password):\n        \"\"\"\n        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n",
                      "markdown": "`        db.commit()\n        return user\n\n    def is_valid_password(self, password):\n        \"\"\"\n        Checks if a provided password hashes to the hash we have stored in\n        self.password.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 48,
                  "endLine": 49,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n    # otp_secret (one-time password secret) is given to a user during setup of\n    # 2fa. With a shared secret like this, both the user and nativeauthenticator\n    # are enabled to generate the same one-time password's, which enables them\n    # to be matched against each other.\n    otp_secret = Column(String(16))\n\n",
                    "rendered": {
                      "text": "\n    # otp_secret (one-time password secret) is given to a user during setup of\n    # 2fa. With a shared secret like this, both the user and nativeauthenticator\n    # are enabled to generate the same one-time password's, which enables them\n    # to be matched against each other.\n    otp_secret = Column(String(16))\n\n",
                      "markdown": "`\n    # otp_secret (one-time password secret) is given to a user during setup of\n    # 2fa. With a shared secret like this, both the user and nativeauthenticator\n    # are enabled to generate the same one-time password's, which enables them\n    # to be matched against each other.\n    otp_secret = Column(String(16))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 27,
                  "endLine": 47,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    # want to setup 2fa during sign-up.\n    has_2fa = Column(Boolean, default=False)\n\n    # otp_secret (one-time password secret) is given to a user during setup of\n    # 2fa. With a shared secret like this, both the user and nativeauthenticator\n    # are enabled to generate the same one-time password's, which enables them\n    # to be matched against each other.\n",
                    "rendered": {
                      "text": "    # want to setup 2fa during sign-up.\n    has_2fa = Column(Boolean, default=False)\n\n    # otp_secret (one-time password secret) is given to a user during setup of\n    # 2fa. With a shared secret like this, both the user and nativeauthenticator\n    # are enabled to generate the same one-time password's, which enables them\n    # to be matched against each other.\n",
                      "markdown": "`    # want to setup 2fa during sign-up.\n    has_2fa = Column(Boolean, default=False)\n\n    # otp_secret (one-time password secret) is given to a user during setup of\n    # 2fa. With a shared secret like this, both the user and nativeauthenticator\n    # are enabled to generate the same one-time password's, which enables them\n    # to be matched against each other.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 4,
                  "endLine": 29,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    # hashed password, but also the salt and cost that was used to hash the\n    # password. Since bcrypt can extract the salt from this concatenation, this\n    # can be used again during validation as salt.\n    password = Column(LargeBinary, nullable=False)\n\n    # is_authorized is a boolean to indicate if the user has been authorized,\n    # either by an admin, or by validating via an email for example.\n",
                    "rendered": {
                      "text": "    # hashed password, but also the salt and cost that was used to hash the\n    # password. Since bcrypt can extract the salt from this concatenation, this\n    # can be used again during validation as salt.\n    password = Column(LargeBinary, nullable=False)\n\n    # is_authorized is a boolean to indicate if the user has been authorized,\n    # either by an admin, or by validating via an email for example.\n",
                      "markdown": "`    # hashed password, but also the salt and cost that was used to hash the\n    # password. Since bcrypt can extract the salt from this concatenation, this\n    # can be used again during validation as salt.\n    password = Column(LargeBinary, nullable=False)\n\n    # is_authorized is a boolean to indicate if the user has been authorized,\n    # either by an admin, or by validating via an email for example.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 6,
                  "endLine": 27,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n    # password should be a bcrypt generated string that not only contains a\n    # hashed password, but also the salt and cost that was used to hash the\n    # password. Since bcrypt can extract the salt from this concatenation, this\n    # can be used again during validation as salt.\n    password = Column(LargeBinary, nullable=False)\n\n",
                    "rendered": {
                      "text": "\n    # password should be a bcrypt generated string that not only contains a\n    # hashed password, but also the salt and cost that was used to hash the\n    # password. Since bcrypt can extract the salt from this concatenation, this\n    # can be used again during validation as salt.\n    password = Column(LargeBinary, nullable=False)\n\n",
                      "markdown": "`\n    # password should be a bcrypt generated string that not only contains a\n    # hashed password, but also the salt and cost that was used to hash the\n    # password. Since bcrypt can extract the salt from this concatenation, this\n    # can be used again during validation as salt.\n    password = Column(LargeBinary, nullable=False)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 13,
                  "endLine": 26,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    username = Column(String(128), nullable=False)\n\n    # password should be a bcrypt generated string that not only contains a\n    # hashed password, but also the salt and cost that was used to hash the\n    # password. Since bcrypt can extract the salt from this concatenation, this\n    # can be used again during validation as salt.\n    password = Column(LargeBinary, nullable=False)\n",
                    "rendered": {
                      "text": "    username = Column(String(128), nullable=False)\n\n    # password should be a bcrypt generated string that not only contains a\n    # hashed password, but also the salt and cost that was used to hash the\n    # password. Since bcrypt can extract the salt from this concatenation, this\n    # can be used again during validation as salt.\n    password = Column(LargeBinary, nullable=False)\n",
                      "markdown": "`    username = Column(String(128), nullable=False)\n\n    # password should be a bcrypt generated string that not only contains a\n    # hashed password, but also the salt and cost that was used to hash the\n    # password. Since bcrypt can extract the salt from this concatenation, this\n    # can be used again during validation as salt.\n    password = Column(LargeBinary, nullable=False)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 6,
                  "endLine": 25,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    # class normalize_username function.\n    username = Column(String(128), nullable=False)\n\n    # password should be a bcrypt generated string that not only contains a\n    # hashed password, but also the salt and cost that was used to hash the\n    # password. Since bcrypt can extract the salt from this concatenation, this\n    # can be used again during validation as salt.\n",
                    "rendered": {
                      "text": "    # class normalize_username function.\n    username = Column(String(128), nullable=False)\n\n    # password should be a bcrypt generated string that not only contains a\n    # hashed password, but also the salt and cost that was used to hash the\n    # password. Since bcrypt can extract the salt from this concatenation, this\n    # can be used again during validation as salt.\n",
                      "markdown": "`    # class normalize_username function.\n    username = Column(String(128), nullable=False)\n\n    # password should be a bcrypt generated string that not only contains a\n    # hashed password, but also the salt and cost that was used to hash the\n    # password. Since bcrypt can extract the salt from this concatenation, this\n    # can be used again during validation as salt.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 30,
                  "endLine": 56,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        if not self.otp_secret:\n            self.otp_secret = base64.b32encode(os.urandom(10)).decode(\"utf-8\")\n\n    @classmethod\n    def find(cls, db, username):\n",
                    "rendered": {
                      "text": "    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        if not self.otp_secret:\n            self.otp_secret = base64.b32encode(os.urandom(10)).decode(\"utf-8\")\n\n    @classmethod\n    def find(cls, db, username):\n",
                      "markdown": "`    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        if not self.otp_secret:\n            self.otp_secret = base64.b32encode(os.urandom(10)).decode(\"utf-8\")\n\n    @classmethod\n    def find(cls, db, username):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 1,
                  "endColumn": 13,
                  "snippet": {
                    "text": "import base64\nimport os\nimport re\n\n",
                    "rendered": {
                      "text": "import base64\nimport os\nimport re\n\n",
                      "markdown": "`import base64\nimport os\nimport re\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 7,
                  "endLine": 61,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    @classmethod\n    def find(cls, db, username):\n        \"\"\"\n        Find a user info record by username.\n\n        Returns None if no user was found.\n        \"\"\"\n",
                    "rendered": {
                      "text": "    @classmethod\n    def find(cls, db, username):\n        \"\"\"\n        Find a user info record by username.\n\n        Returns None if no user was found.\n        \"\"\"\n",
                      "markdown": "`    @classmethod\n    def find(cls, db, username):\n        \"\"\"\n        Find a user info record by username.\n\n        Returns None if no user was found.\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/orm.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 6,
                  "endLine": 2,
                  "snippet": {
                    "text": "import base64\nimport os\nimport re\n\nimport bcrypt\n",
                    "rendered": {
                      "text": "import base64\nimport os\nimport re\n\nimport bcrypt\n",
                      "markdown": "`import base64\nimport os\nimport re\n\nimport bcrypt\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/jupyterhub_nativeauthenticator-1.3.0.dist-info/RECORD"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 37,
                  "endLine": 12,
                  "endColumn": 45,
                  "snippet": {
                    "text": "UmfBFLjKFUO0lWM56IOulXwIcSJG_r8sS0,7667\nnativeauthenticator/templates/authorization-area.html,sha256=KicEOo753xzzgyXg9tgVFLiLmVo1Qdfg6SlrwYCo2_4,1869\nnativeauthenticator/templates/change-password-admin.html,sha256=cDvY6-ndNa6_TTd5zLBLA67mkqbbRbuTJqSeX8_cZTM,2337\nnativeauthenticator/templates/change-password.html,sha256=G3FY3feuS-5FO5ANzhEIN_ZXHsrCPxdIwRTfIEb1P4g,2938\nnativeauthenticator/templates/my_message.html,sha256=bzPEhBwvyrvHPZbE1hYDNKyjo3WQJTQnNbbE51jVJ0Y,245\nnativeauthenticator/templates/native-login.html,sha256=cC-7Cylw7_UsZELdwOrZkjR-R-EQ-WaccbiaMa2q4e4,3077\nnativeauthenticator/templates/pag",
                    "rendered": {
                      "text": "UmfBFLjKFUO0lWM56IOulXwIcSJG_r8sS0,7667\nnativeauthenticator/templates/authorization-area.html,sha256=KicEOo753xzzgyXg9tgVFLiLmVo1Qdfg6SlrwYCo2_4,1869\nnativeauthenticator/templates/change-password-admin.html,sha256=cDvY6-ndNa6_TTd5zLBLA67mkqbbRbuTJqSeX8_cZTM,2337\nnativeauthenticator/templates/change-password.html,sha256=G3FY3feuS-5FO5ANzhEIN_ZXHsrCPxdIwRTfIEb1P4g,2938\nnativeauthenticator/templates/my_message.html,sha256=bzPEhBwvyrvHPZbE1hYDNKyjo3WQJTQnNbbE51jVJ0Y,245\nnativeauthenticator/templates/native-login.html,sha256=cC-7Cylw7_UsZELdwOrZkjR-R-EQ-WaccbiaMa2q4e4,3077\nnativeauthenticator/templates/pag",
                      "markdown": "`UmfBFLjKFUO0lWM56IOulXwIcSJG_r8sS0,7667\nnativeauthenticator/templates/authorization-area.html,sha256=KicEOo753xzzgyXg9tgVFLiLmVo1Qdfg6SlrwYCo2_4,1869\nnativeauthenticator/templates/change-password-admin.html,sha256=cDvY6-ndNa6_TTd5zLBLA67mkqbbRbuTJqSeX8_cZTM,2337\nnativeauthenticator/templates/change-password.html,sha256=G3FY3feuS-5FO5ANzhEIN_ZXHsrCPxdIwRTfIEb1P4g,2938\nnativeauthenticator/templates/my_message.html,sha256=bzPEhBwvyrvHPZbE1hYDNKyjo3WQJTQnNbbE51jVJ0Y,245\nnativeauthenticator/templates/native-login.html,sha256=cC-7Cylw7_UsZELdwOrZkjR-R-EQ-WaccbiaMa2q4e4,3077\nnativeauthenticator/templates/pag`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/jupyterhub_nativeauthenticator-1.3.0.dist-info/RECORD"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 37,
                  "endLine": 11,
                  "endColumn": 45,
                  "snippet": {
                    "text": "py,sha256=S1Q4ejz6SguxiES6B7GqP_hUTWJjPg28wKxBHMkN9-g,6459\nnativeauthenticator/crypto/signing.py,sha256=lSqDB6hNWUmfBFLjKFUO0lWM56IOulXwIcSJG_r8sS0,7667\nnativeauthenticator/templates/authorization-area.html,sha256=KicEOo753xzzgyXg9tgVFLiLmVo1Qdfg6SlrwYCo2_4,1869\nnativeauthenticator/templates/change-password-admin.html,sha256=cDvY6-ndNa6_TTd5zLBLA67mkqbbRbuTJqSeX8_cZTM,2337\nnativeauthenticator/templates/change-password.html,sha256=G3FY3feuS-5FO5ANzhEIN_ZXHsrCPxdIwRTfIEb1P4g,2938\nnativeauthenticator/templates/my_message.html,sha256=bzPEhBwvyrvHPZbE1hYDNKyjo3WQJTQnNbbE51jVJ0Y,245\nnativeauthenticator/temp",
                    "rendered": {
                      "text": "py,sha256=S1Q4ejz6SguxiES6B7GqP_hUTWJjPg28wKxBHMkN9-g,6459\nnativeauthenticator/crypto/signing.py,sha256=lSqDB6hNWUmfBFLjKFUO0lWM56IOulXwIcSJG_r8sS0,7667\nnativeauthenticator/templates/authorization-area.html,sha256=KicEOo753xzzgyXg9tgVFLiLmVo1Qdfg6SlrwYCo2_4,1869\nnativeauthenticator/templates/change-password-admin.html,sha256=cDvY6-ndNa6_TTd5zLBLA67mkqbbRbuTJqSeX8_cZTM,2337\nnativeauthenticator/templates/change-password.html,sha256=G3FY3feuS-5FO5ANzhEIN_ZXHsrCPxdIwRTfIEb1P4g,2938\nnativeauthenticator/templates/my_message.html,sha256=bzPEhBwvyrvHPZbE1hYDNKyjo3WQJTQnNbbE51jVJ0Y,245\nnativeauthenticator/temp",
                      "markdown": "`py,sha256=S1Q4ejz6SguxiES6B7GqP_hUTWJjPg28wKxBHMkN9-g,6459\nnativeauthenticator/crypto/signing.py,sha256=lSqDB6hNWUmfBFLjKFUO0lWM56IOulXwIcSJG_r8sS0,7667\nnativeauthenticator/templates/authorization-area.html,sha256=KicEOo753xzzgyXg9tgVFLiLmVo1Qdfg6SlrwYCo2_4,1869\nnativeauthenticator/templates/change-password-admin.html,sha256=cDvY6-ndNa6_TTd5zLBLA67mkqbbRbuTJqSeX8_cZTM,2337\nnativeauthenticator/templates/change-password.html,sha256=G3FY3feuS-5FO5ANzhEIN_ZXHsrCPxdIwRTfIEb1P4g,2938\nnativeauthenticator/templates/my_message.html,sha256=bzPEhBwvyrvHPZbE1hYDNKyjo3WQJTQnNbbE51jVJ0Y,245\nnativeauthenticator/temp`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 34,
                  "endLine": 241,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    assert auth.login_attempts[\"johnsnow\"][\"count\"] == 2\n\n    await auth.authenticate(app, infos)\n    assert not auth.login_attempts.get(\"johnsnow\")\n\n\nasync def test_authentication_with_exceed_atempts_of_login(tmpcwd, app):\n",
                    "rendered": {
                      "text": "    assert auth.login_attempts[\"johnsnow\"][\"count\"] == 2\n\n    await auth.authenticate(app, infos)\n    assert not auth.login_attempts.get(\"johnsnow\")\n\n\nasync def test_authentication_with_exceed_atempts_of_login(tmpcwd, app):\n",
                      "markdown": "`    assert auth.login_attempts[\"johnsnow\"][\"count\"] == 2\n\n    await auth.authenticate(app, infos)\n    assert not auth.login_attempts.get(\"johnsnow\")\n\n\nasync def test_authentication_with_exceed_atempts_of_login(tmpcwd, app):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 61,
                  "endLine": 366,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    expiration = datetime.datetime.now(tz.utc) + datetime.timedelta(days=2)\n    url = auth.generate_approval_url(\"somebody\", when=expiration)\n    slug = url.split(\"/\")[-1]\n    out = EmailAuthorizationHandler.validate_slug(slug, auth.secret_key)\n    assert out[\"username\"] == \"somebody\"\n    assert out[\"expire\"] == expiration\n",
                    "rendered": {
                      "text": "    expiration = datetime.datetime.now(tz.utc) + datetime.timedelta(days=2)\n    url = auth.generate_approval_url(\"somebody\", when=expiration)\n    slug = url.split(\"/\")[-1]\n    out = EmailAuthorizationHandler.validate_slug(slug, auth.secret_key)\n    assert out[\"username\"] == \"somebody\"\n    assert out[\"expire\"] == expiration\n",
                      "markdown": "`    expiration = datetime.datetime.now(tz.utc) + datetime.timedelta(days=2)\n    url = auth.generate_approval_url(\"somebody\", when=expiration)\n    slug = url.split(\"/\")[-1]\n    out = EmailAuthorizationHandler.validate_slug(slug, auth.secret_key)\n    assert out[\"username\"] == \"somebody\"\n    assert out[\"expire\"] == expiration\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 59,
                  "endLine": 360,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    url = auth.generate_approval_url(\"somebody\", when=expiration)\n    slug = url.split(\"/\")[-1]\n    with pytest.raises(ValueError):\n        EmailAuthorizationHandler.validate_slug(slug, auth.secret_key)\n\n    # confirm that a non-expired, correctly signed URL can be used\n    expiration = datetime.datetime.now(tz.utc) + datetime.timedelta(days=2)\n",
                    "rendered": {
                      "text": "    url = auth.generate_approval_url(\"somebody\", when=expiration)\n    slug = url.split(\"/\")[-1]\n    with pytest.raises(ValueError):\n        EmailAuthorizationHandler.validate_slug(slug, auth.secret_key)\n\n    # confirm that a non-expired, correctly signed URL can be used\n    expiration = datetime.datetime.now(tz.utc) + datetime.timedelta(days=2)\n",
                      "markdown": "`    url = auth.generate_approval_url(\"somebody\", when=expiration)\n    slug = url.split(\"/\")[-1]\n    with pytest.raises(ValueError):\n        EmailAuthorizationHandler.validate_slug(slug, auth.secret_key)\n\n    # confirm that a non-expired, correctly signed URL can be used\n    expiration = datetime.datetime.now(tz.utc) + datetime.timedelta(days=2)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 60,
                  "endLine": 353,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n    # confirm that a forged slug cannot be used\n    with pytest.raises(ValueError):\n        EmailAuthorizationHandler.validate_slug(\"foo\", auth.secret_key)\n\n    # confirm that an expired URL cannot be used\n    expiration = datetime.datetime.now(tz.utc) - datetime.timedelta(days=2)\n",
                    "rendered": {
                      "text": "\n    # confirm that a forged slug cannot be used\n    with pytest.raises(ValueError):\n        EmailAuthorizationHandler.validate_slug(\"foo\", auth.secret_key)\n\n    # confirm that an expired URL cannot be used\n    expiration = datetime.datetime.now(tz.utc) - datetime.timedelta(days=2)\n",
                      "markdown": "`\n    # confirm that a forged slug cannot be used\n    with pytest.raises(ValueError):\n        EmailAuthorizationHandler.validate_slug(\"foo\", auth.secret_key)\n\n    # confirm that an expired URL cannot be used\n    expiration = datetime.datetime.now(tz.utc) - datetime.timedelta(days=2)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 9,
                  "endLine": 348,
                  "endColumn": 19,
                  "snippet": {
                    "text": "async def test_approval_url(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    auth.allow_self_approval_for = \".*@example.com$\"\n    auth.secret_key = \"very long and kind-of random asdgaisgfjbafksdgasg\"\n    auth.setup_self_approval()\n\n    # confirm that a forged slug cannot be used\n",
                    "rendered": {
                      "text": "async def test_approval_url(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    auth.allow_self_approval_for = \".*@example.com$\"\n    auth.secret_key = \"very long and kind-of random asdgaisgfjbafksdgasg\"\n    auth.setup_self_approval()\n\n    # confirm that a forged slug cannot be used\n",
                      "markdown": "`async def test_approval_url(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    auth.allow_self_approval_for = \".*@example.com$\"\n    auth.secret_key = \"very long and kind-of random asdgaisgfjbafksdgasg\"\n    auth.setup_self_approval()\n\n    # confirm that a forged slug cannot be used\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 9,
                  "endLine": 339,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    with pytest.raises(ValueError):\n        auth.setup_self_approval()\n\n    auth.secret_key = \"very long and kind-of random asdgaisgfjbafksdgasg\"\n\n    auth.setup_self_approval()\n    assert auth.ask_email_on_signup is True\n",
                    "rendered": {
                      "text": "    with pytest.raises(ValueError):\n        auth.setup_self_approval()\n\n    auth.secret_key = \"very long and kind-of random asdgaisgfjbafksdgasg\"\n\n    auth.setup_self_approval()\n    assert auth.ask_email_on_signup is True\n",
                      "markdown": "`    with pytest.raises(ValueError):\n        auth.setup_self_approval()\n\n    auth.secret_key = \"very long and kind-of random asdgaisgfjbafksdgasg\"\n\n    auth.setup_self_approval()\n    assert auth.ask_email_on_signup is True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 9,
                  "endLine": 334,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    auth = NativeAuthenticator(db=app.db)\n    auth.ask_email_on_signup = False\n    auth.allow_self_approval_for = \".*@example.com$\"\n    auth.secret_key = \"short\"\n\n    with pytest.raises(ValueError):\n        auth.setup_self_approval()\n",
                    "rendered": {
                      "text": "    auth = NativeAuthenticator(db=app.db)\n    auth.ask_email_on_signup = False\n    auth.allow_self_approval_for = \".*@example.com$\"\n    auth.secret_key = \"short\"\n\n    with pytest.raises(ValueError):\n        auth.setup_self_approval()\n",
                      "markdown": "`    auth = NativeAuthenticator(db=app.db)\n    auth.ask_email_on_signup = False\n    auth.allow_self_approval_for = \".*@example.com$\"\n    auth.secret_key = \"short\"\n\n    with pytest.raises(ValueError):\n        auth.setup_self_approval()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 15,
                  "endLine": 330,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        auth.add_data_from_firstuse()\n\n\nasync def test_secret_key(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    auth.ask_email_on_signup = False\n    auth.allow_self_approval_for = \".*@example.com$\"\n",
                    "rendered": {
                      "text": "        auth.add_data_from_firstuse()\n\n\nasync def test_secret_key(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    auth.ask_email_on_signup = False\n    auth.allow_self_approval_for = \".*@example.com$\"\n",
                      "markdown": "`        auth.add_data_from_firstuse()\n\n\nasync def test_secret_key(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    auth.ask_email_on_signup = False\n    auth.allow_self_approval_for = \".*@example.com$\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 22,
                  "endLine": 325,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        db[user] = pwd\n\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    with pytest.raises(ValueError):\n        auth.add_data_from_firstuse()\n\n",
                    "rendered": {
                      "text": "        db[user] = pwd\n\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    with pytest.raises(ValueError):\n        auth.add_data_from_firstuse()\n\n",
                      "markdown": "`        db[user] = pwd\n\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    with pytest.raises(ValueError):\n        auth.add_data_from_firstuse()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 19,
                  "endLine": 321,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    ],\n)\nasync def test_import_from_firstuse_invalid_password(user, pwd, tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[user] = pwd\n\n    auth = NativeAuthenticator(db=app.db)\n",
                    "rendered": {
                      "text": "    ],\n)\nasync def test_import_from_firstuse_invalid_password(user, pwd, tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[user] = pwd\n\n    auth = NativeAuthenticator(db=app.db)\n",
                      "markdown": "`    ],\n)\nasync def test_import_from_firstuse_invalid_password(user, pwd, tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[user] = pwd\n\n    auth = NativeAuthenticator(db=app.db)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 44,
                  "endLine": 320,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        (\"user 1\", \"somethingelsereallysecure\"),\n    ],\n)\nasync def test_import_from_firstuse_invalid_password(user, pwd, tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[user] = pwd\n\n",
                    "rendered": {
                      "text": "        (\"user 1\", \"somethingelsereallysecure\"),\n    ],\n)\nasync def test_import_from_firstuse_invalid_password(user, pwd, tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[user] = pwd\n\n",
                      "markdown": "`        (\"user 1\", \"somethingelsereallysecure\"),\n    ],\n)\nasync def test_import_from_firstuse_invalid_password(user, pwd, tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[user] = pwd\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 19,
                  "endLine": 316,
                  "endColumn": 27,
                  "snippet": {
                    "text": "@pytest.mark.parametrize(\n    \"user,pwd\",\n    [\n        (\"user1\", \"password\"),\n        (\"user 1\", \"somethingelsereallysecure\"),\n    ],\n)\n",
                    "rendered": {
                      "text": "@pytest.mark.parametrize(\n    \"user,pwd\",\n    [\n        (\"user1\", \"password\"),\n        (\"user 1\", \"somethingelsereallysecure\"),\n    ],\n)\n",
                      "markdown": "`@pytest.mark.parametrize(\n    \"user,pwd\",\n    [\n        (\"user1\", \"password\"),\n        (\"user 1\", \"somethingelsereallysecure\"),\n    ],\n)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 48,
                  "endLine": 310,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    auth.add_data_from_firstuse()\n    files = os.listdir()\n    assert UserInfo.find(app.db, \"user1\")\n    assert (\"passwords.dbm\" not in files) and (\"passwords.dbm.db\" not in files)\n\n\n@pytest.mark.parametrize(\n",
                    "rendered": {
                      "text": "    auth.add_data_from_firstuse()\n    files = os.listdir()\n    assert UserInfo.find(app.db, \"user1\")\n    assert (\"passwords.dbm\" not in files) and (\"passwords.dbm.db\" not in files)\n\n\n@pytest.mark.parametrize(\n",
                      "markdown": "`    auth.add_data_from_firstuse()\n    files = os.listdir()\n    assert UserInfo.find(app.db, \"user1\")\n    assert (\"passwords.dbm\" not in files) and (\"passwords.dbm.db\" not in files)\n\n\n@pytest.mark.parametrize(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 13,
                  "endLine": 310,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    auth.add_data_from_firstuse()\n    files = os.listdir()\n    assert UserInfo.find(app.db, \"user1\")\n    assert (\"passwords.dbm\" not in files) and (\"passwords.dbm.db\" not in files)\n\n\n@pytest.mark.parametrize(\n",
                    "rendered": {
                      "text": "    auth.add_data_from_firstuse()\n    files = os.listdir()\n    assert UserInfo.find(app.db, \"user1\")\n    assert (\"passwords.dbm\" not in files) and (\"passwords.dbm.db\" not in files)\n\n\n@pytest.mark.parametrize(\n",
                      "markdown": "`    auth.add_data_from_firstuse()\n    files = os.listdir()\n    assert UserInfo.find(app.db, \"user1\")\n    assert (\"passwords.dbm\" not in files) and (\"passwords.dbm.db\" not in files)\n\n\n@pytest.mark.parametrize(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 23,
                  "endLine": 302,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nasync def test_import_from_firstuse_delete_db_after(tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[\"user1\"] = \"password\"\n\n    auth = NativeAuthenticator(db=app.db)\n    auth.delete_firstuse_db_after_import = True\n",
                    "rendered": {
                      "text": "\nasync def test_import_from_firstuse_delete_db_after(tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[\"user1\"] = \"password\"\n\n    auth = NativeAuthenticator(db=app.db)\n    auth.delete_firstuse_db_after_import = True\n",
                      "markdown": "`\nasync def test_import_from_firstuse_delete_db_after(tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[\"user1\"] = \"password\"\n\n    auth = NativeAuthenticator(db=app.db)\n    auth.delete_firstuse_db_after_import = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 19,
                  "endLine": 301,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\nasync def test_import_from_firstuse_delete_db_after(tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[\"user1\"] = \"password\"\n\n    auth = NativeAuthenticator(db=app.db)\n",
                    "rendered": {
                      "text": "\n\nasync def test_import_from_firstuse_delete_db_after(tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[\"user1\"] = \"password\"\n\n    auth = NativeAuthenticator(db=app.db)\n",
                      "markdown": "`\n\nasync def test_import_from_firstuse_delete_db_after(tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[\"user1\"] = \"password\"\n\n    auth = NativeAuthenticator(db=app.db)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 43,
                  "endLine": 297,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n    files = os.listdir()\n    assert UserInfo.find(app.db, \"user1\")\n    assert (\"passwords.dbm\" in files) or (\"passwords.dbm.db\" in files)\n\n\nasync def test_import_from_firstuse_delete_db_after(tmpcwd, app):\n",
                    "rendered": {
                      "text": "\n    files = os.listdir()\n    assert UserInfo.find(app.db, \"user1\")\n    assert (\"passwords.dbm\" in files) or (\"passwords.dbm.db\" in files)\n\n\nasync def test_import_from_firstuse_delete_db_after(tmpcwd, app):\n",
                      "markdown": "`\n    files = os.listdir()\n    assert UserInfo.find(app.db, \"user1\")\n    assert (\"passwords.dbm\" in files) or (\"passwords.dbm.db\" in files)\n\n\nasync def test_import_from_firstuse_delete_db_after(tmpcwd, app):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 13,
                  "endLine": 297,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n    files = os.listdir()\n    assert UserInfo.find(app.db, \"user1\")\n    assert (\"passwords.dbm\" in files) or (\"passwords.dbm.db\" in files)\n\n\nasync def test_import_from_firstuse_delete_db_after(tmpcwd, app):\n",
                    "rendered": {
                      "text": "\n    files = os.listdir()\n    assert UserInfo.find(app.db, \"user1\")\n    assert (\"passwords.dbm\" in files) or (\"passwords.dbm.db\" in files)\n\n\nasync def test_import_from_firstuse_delete_db_after(tmpcwd, app):\n",
                      "markdown": "`\n    files = os.listdir()\n    assert UserInfo.find(app.db, \"user1\")\n    assert (\"passwords.dbm\" in files) or (\"passwords.dbm.db\" in files)\n\n\nasync def test_import_from_firstuse_delete_db_after(tmpcwd, app):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 23,
                  "endLine": 290,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nasync def test_import_from_firstuse_dont_delete_db_after(tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[\"user1\"] = \"password\"\n\n    auth = NativeAuthenticator(db=app.db)\n    auth.add_data_from_firstuse()\n",
                    "rendered": {
                      "text": "\nasync def test_import_from_firstuse_dont_delete_db_after(tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[\"user1\"] = \"password\"\n\n    auth = NativeAuthenticator(db=app.db)\n    auth.add_data_from_firstuse()\n",
                      "markdown": "`\nasync def test_import_from_firstuse_dont_delete_db_after(tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[\"user1\"] = \"password\"\n\n    auth = NativeAuthenticator(db=app.db)\n    auth.add_data_from_firstuse()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 19,
                  "endLine": 289,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\nasync def test_import_from_firstuse_dont_delete_db_after(tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[\"user1\"] = \"password\"\n\n    auth = NativeAuthenticator(db=app.db)\n",
                    "rendered": {
                      "text": "\n\nasync def test_import_from_firstuse_dont_delete_db_after(tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[\"user1\"] = \"password\"\n\n    auth = NativeAuthenticator(db=app.db)\n",
                      "markdown": "`\n\nasync def test_import_from_firstuse_dont_delete_db_after(tmpcwd, app):\n    with dbm.open(\"passwords.dbm\", \"c\", 0o600) as db:\n        db[\"user1\"] = \"password\"\n\n    auth = NativeAuthenticator(db=app.db)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 34,
                  "endLine": 279,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nasync def test_delete_user(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    auth.create_user(\"johnsnow\", \"password\")\n\n    user = type(\"User\", (), {\"name\": \"johnsnow\"})\n    auth.delete_user(user)\n",
                    "rendered": {
                      "text": "\nasync def test_delete_user(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    auth.create_user(\"johnsnow\", \"password\")\n\n    user = type(\"User\", (), {\"name\": \"johnsnow\"})\n    auth.delete_user(user)\n",
                      "markdown": "`\nasync def test_delete_user(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    auth.create_user(\"johnsnow\", \"password\")\n\n    user = type(\"User\", (), {\"name\": \"johnsnow\"})\n    auth.delete_user(user)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 34,
                  "endLine": 268,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nasync def test_get_user(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    auth.create_user(\"johnsnow\", \"password\")\n\n    # Getting existing user is successful.\n    assert auth.get_user(\"johnsnow\") is not None\n",
                    "rendered": {
                      "text": "\nasync def test_get_user(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    auth.create_user(\"johnsnow\", \"password\")\n\n    # Getting existing user is successful.\n    assert auth.get_user(\"johnsnow\") is not None\n",
                      "markdown": "`\nasync def test_get_user(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    auth.create_user(\"johnsnow\", \"password\")\n\n    # Getting existing user is successful.\n    assert auth.get_user(\"johnsnow\") is not None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 25,
                  "endLine": 257,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        response = await auth.authenticate(app, infos)\n        assert not response\n\n    infos[\"password\"] = \"password\"\n    response = await auth.authenticate(app, infos)\n    assert not response\n\n",
                    "rendered": {
                      "text": "        response = await auth.authenticate(app, infos)\n        assert not response\n\n    infos[\"password\"] = \"password\"\n    response = await auth.authenticate(app, infos)\n    assert not response\n\n",
                      "markdown": "`        response = await auth.authenticate(app, infos)\n        assert not response\n\n    infos[\"password\"] = \"password\"\n    response = await auth.authenticate(app, infos)\n    assert not response\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 11,
                  "endLine": 257,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        response = await auth.authenticate(app, infos)\n        assert not response\n\n    infos[\"password\"] = \"password\"\n    response = await auth.authenticate(app, infos)\n    assert not response\n\n",
                    "rendered": {
                      "text": "        response = await auth.authenticate(app, infos)\n        assert not response\n\n    infos[\"password\"] = \"password\"\n    response = await auth.authenticate(app, infos)\n    assert not response\n\n",
                      "markdown": "`        response = await auth.authenticate(app, infos)\n        assert not response\n\n    infos[\"password\"] = \"password\"\n    response = await auth.authenticate(app, infos)\n    assert not response\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 41,
                  "endLine": 250,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    auth.secs_before_next_try = 10\n\n    infos = {\"username\": \"johnsnow\", \"password\": \"wrongpassword\"}\n    auth.create_user(infos[\"username\"], \"password\")\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n    for i in range(3):\n",
                    "rendered": {
                      "text": "    auth.secs_before_next_try = 10\n\n    infos = {\"username\": \"johnsnow\", \"password\": \"wrongpassword\"}\n    auth.create_user(infos[\"username\"], \"password\")\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n    for i in range(3):\n",
                      "markdown": "`    auth.secs_before_next_try = 10\n\n    infos = {\"username\": \"johnsnow\", \"password\": \"wrongpassword\"}\n    auth.create_user(infos[\"username\"], \"password\")\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n    for i in range(3):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 55,
                  "endLine": 249,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    auth.allowed_failed_logins = 3\n    auth.secs_before_next_try = 10\n\n    infos = {\"username\": \"johnsnow\", \"password\": \"wrongpassword\"}\n    auth.create_user(infos[\"username\"], \"password\")\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n",
                    "rendered": {
                      "text": "    auth.allowed_failed_logins = 3\n    auth.secs_before_next_try = 10\n\n    infos = {\"username\": \"johnsnow\", \"password\": \"wrongpassword\"}\n    auth.create_user(infos[\"username\"], \"password\")\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n",
                      "markdown": "`    auth.allowed_failed_logins = 3\n    auth.secs_before_next_try = 10\n\n    infos = {\"username\": \"johnsnow\", \"password\": \"wrongpassword\"}\n    auth.create_user(infos[\"username\"], \"password\")\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 38,
                  "endLine": 249,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    auth.allowed_failed_logins = 3\n    auth.secs_before_next_try = 10\n\n    infos = {\"username\": \"johnsnow\", \"password\": \"wrongpassword\"}\n    auth.create_user(infos[\"username\"], \"password\")\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n",
                    "rendered": {
                      "text": "    auth.allowed_failed_logins = 3\n    auth.secs_before_next_try = 10\n\n    infos = {\"username\": \"johnsnow\", \"password\": \"wrongpassword\"}\n    auth.create_user(infos[\"username\"], \"password\")\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n",
                      "markdown": "`    auth.allowed_failed_logins = 3\n    auth.secs_before_next_try = 10\n\n    infos = {\"username\": \"johnsnow\", \"password\": \"wrongpassword\"}\n    auth.create_user(infos[\"username\"], \"password\")\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 47,
                  "endLine": 229,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n    assert not auth.login_attempts\n",
                    "rendered": {
                      "text": "    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n    assert not auth.login_attempts\n",
                      "markdown": "`    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n    assert not auth.login_attempts\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 62,
                  "endLine": 228,
                  "endColumn": 70,
                  "snippet": {
                    "text": "async def test_authentication_login_count(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n",
                    "rendered": {
                      "text": "async def test_authentication_login_count(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n",
                      "markdown": "`async def test_authentication_login_count(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 44,
                  "endLine": 228,
                  "endColumn": 52,
                  "snippet": {
                    "text": "async def test_authentication_login_count(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n",
                    "rendered": {
                      "text": "async def test_authentication_login_count(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n",
                      "markdown": "`async def test_authentication_login_count(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 50,
                  "endLine": 227,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nasync def test_authentication_login_count(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n",
                    "rendered": {
                      "text": "\nasync def test_authentication_login_count(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n",
                      "markdown": "`\nasync def test_authentication_login_count(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 38,
                  "endLine": 227,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nasync def test_authentication_login_count(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n",
                    "rendered": {
                      "text": "\nasync def test_authentication_login_count(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n",
                      "markdown": "`\nasync def test_authentication_login_count(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    infos = {\"username\": \"johnsnow\", \"password\": \"password\"}\n    wrong_infos = {\"username\": \"johnsnow\", \"password\": \"wrong_password\"}\n    auth.create_user(infos[\"username\"], infos[\"password\"])\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 38,
                  "endLine": 212,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    assert handlers[4][0] == \"/authorize/([^/]*)\"\n    assert handlers[5][0] == \"/confirm/([^/]*)\"\n    assert handlers[6][0] == \"/change-password\"\n    assert handlers[7][0] == \"/change-password/([^/]+)\"\n\n\nasync def test_add_new_attempt_of_login(tmpcwd, app):\n",
                    "rendered": {
                      "text": "    assert handlers[4][0] == \"/authorize/([^/]*)\"\n    assert handlers[5][0] == \"/confirm/([^/]*)\"\n    assert handlers[6][0] == \"/change-password\"\n    assert handlers[7][0] == \"/change-password/([^/]+)\"\n\n\nasync def test_add_new_attempt_of_login(tmpcwd, app):\n",
                      "markdown": "`    assert handlers[4][0] == \"/authorize/([^/]*)\"\n    assert handlers[5][0] == \"/confirm/([^/]*)\"\n    assert handlers[6][0] == \"/change-password\"\n    assert handlers[7][0] == \"/change-password/([^/]+)\"\n\n\nasync def test_add_new_attempt_of_login(tmpcwd, app):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 38,
                  "endLine": 211,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    assert handlers[3][0] == \"/authorize\"\n    assert handlers[4][0] == \"/authorize/([^/]*)\"\n    assert handlers[5][0] == \"/confirm/([^/]*)\"\n    assert handlers[6][0] == \"/change-password\"\n    assert handlers[7][0] == \"/change-password/([^/]+)\"\n\n\n",
                    "rendered": {
                      "text": "    assert handlers[3][0] == \"/authorize\"\n    assert handlers[4][0] == \"/authorize/([^/]*)\"\n    assert handlers[5][0] == \"/confirm/([^/]*)\"\n    assert handlers[6][0] == \"/change-password\"\n    assert handlers[7][0] == \"/change-password/([^/]+)\"\n\n\n",
                      "markdown": "`    assert handlers[3][0] == \"/authorize\"\n    assert handlers[4][0] == \"/authorize/([^/]*)\"\n    assert handlers[5][0] == \"/confirm/([^/]*)\"\n    assert handlers[6][0] == \"/change-password\"\n    assert handlers[7][0] == \"/change-password/([^/]+)\"\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 48,
                  "endLine": 196,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    if authorized:\n        UserInfo.change_authorization(app.db, \"johnsnow\")\n    response = await auth.authenticate(\n        app, {\"username\": username, \"password\": password}\n    )\n    assert bool(response) == expected\n\n",
                    "rendered": {
                      "text": "    if authorized:\n        UserInfo.change_authorization(app.db, \"johnsnow\")\n    response = await auth.authenticate(\n        app, {\"username\": username, \"password\": password}\n    )\n    assert bool(response) == expected\n\n",
                      "markdown": "`    if authorized:\n        UserInfo.change_authorization(app.db, \"johnsnow\")\n    response = await auth.authenticate(\n        app, {\"username\": username, \"password\": password}\n    )\n    assert bool(response) == expected\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 37,
                  "endLine": 196,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    if authorized:\n        UserInfo.change_authorization(app.db, \"johnsnow\")\n    response = await auth.authenticate(\n        app, {\"username\": username, \"password\": password}\n    )\n    assert bool(response) == expected\n\n",
                    "rendered": {
                      "text": "    if authorized:\n        UserInfo.change_authorization(app.db, \"johnsnow\")\n    response = await auth.authenticate(\n        app, {\"username\": username, \"password\": password}\n    )\n    assert bool(response) == expected\n\n",
                      "markdown": "`    if authorized:\n        UserInfo.change_authorization(app.db, \"johnsnow\")\n    response = await auth.authenticate(\n        app, {\"username\": username, \"password\": password}\n    )\n    assert bool(response) == expected\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 34,
                  "endLine": 192,
                  "endColumn": 42,
                  "snippet": {
                    "text": "async def test_authentication(username, password, authorized, expected, tmpcwd, app):\n    \"\"\"Test if authentication fails with a unexistent user\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.create_user(\"johnsnow\", \"password\")\n    if authorized:\n        UserInfo.change_authorization(app.db, \"johnsnow\")\n    response = await auth.authenticate(\n",
                    "rendered": {
                      "text": "async def test_authentication(username, password, authorized, expected, tmpcwd, app):\n    \"\"\"Test if authentication fails with a unexistent user\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.create_user(\"johnsnow\", \"password\")\n    if authorized:\n        UserInfo.change_authorization(app.db, \"johnsnow\")\n    response = await auth.authenticate(\n",
                      "markdown": "`async def test_authentication(username, password, authorized, expected, tmpcwd, app):\n    \"\"\"Test if authentication fails with a unexistent user\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.create_user(\"johnsnow\", \"password\")\n    if authorized:\n        UserInfo.change_authorization(app.db, \"johnsnow\")\n    response = await auth.authenticate(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 40,
                  "endLine": 189,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        (\"johnsnow\", \"password\", True, True),\n    ],\n)\nasync def test_authentication(username, password, authorized, expected, tmpcwd, app):\n    \"\"\"Test if authentication fails with a unexistent user\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.create_user(\"johnsnow\", \"password\")\n",
                    "rendered": {
                      "text": "        (\"johnsnow\", \"password\", True, True),\n    ],\n)\nasync def test_authentication(username, password, authorized, expected, tmpcwd, app):\n    \"\"\"Test if authentication fails with a unexistent user\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.create_user(\"johnsnow\", \"password\")\n",
                      "markdown": "`        (\"johnsnow\", \"password\", True, True),\n    ],\n)\nasync def test_authentication(username, password, authorized, expected, tmpcwd, app):\n    \"\"\"Test if authentication fails with a unexistent user\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.create_user(\"johnsnow\", \"password\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 22,
                  "endLine": 186,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        (\"johnsnow\", \"123\", True, False),\n        (\"Snow\", \"password\", True, False),\n        (\"johnsnow\", \"password\", False, False),\n        (\"johnsnow\", \"password\", True, True),\n    ],\n)\nasync def test_authentication(username, password, authorized, expected, tmpcwd, app):\n",
                    "rendered": {
                      "text": "        (\"johnsnow\", \"123\", True, False),\n        (\"Snow\", \"password\", True, False),\n        (\"johnsnow\", \"password\", False, False),\n        (\"johnsnow\", \"password\", True, True),\n    ],\n)\nasync def test_authentication(username, password, authorized, expected, tmpcwd, app):\n",
                      "markdown": "`        (\"johnsnow\", \"123\", True, False),\n        (\"Snow\", \"password\", True, False),\n        (\"johnsnow\", \"password\", False, False),\n        (\"johnsnow\", \"password\", True, True),\n    ],\n)\nasync def test_authentication(username, password, authorized, expected, tmpcwd, app):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 22,
                  "endLine": 185,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        (\"name\", \"123\", False, False),\n        (\"johnsnow\", \"123\", True, False),\n        (\"Snow\", \"password\", True, False),\n        (\"johnsnow\", \"password\", False, False),\n        (\"johnsnow\", \"password\", True, True),\n    ],\n)\n",
                    "rendered": {
                      "text": "        (\"name\", \"123\", False, False),\n        (\"johnsnow\", \"123\", True, False),\n        (\"Snow\", \"password\", True, False),\n        (\"johnsnow\", \"password\", False, False),\n        (\"johnsnow\", \"password\", True, True),\n    ],\n)\n",
                      "markdown": "`        (\"name\", \"123\", False, False),\n        (\"johnsnow\", \"123\", True, False),\n        (\"Snow\", \"password\", True, False),\n        (\"johnsnow\", \"password\", False, False),\n        (\"johnsnow\", \"password\", True, True),\n    ],\n)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 18,
                  "endLine": 184,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    [\n        (\"name\", \"123\", False, False),\n        (\"johnsnow\", \"123\", True, False),\n        (\"Snow\", \"password\", True, False),\n        (\"johnsnow\", \"password\", False, False),\n        (\"johnsnow\", \"password\", True, True),\n    ],\n",
                    "rendered": {
                      "text": "    [\n        (\"name\", \"123\", False, False),\n        (\"johnsnow\", \"123\", True, False),\n        (\"Snow\", \"password\", True, False),\n        (\"johnsnow\", \"password\", False, False),\n        (\"johnsnow\", \"password\", True, True),\n    ],\n",
                      "markdown": "`    [\n        (\"name\", \"123\", False, False),\n        (\"johnsnow\", \"123\", True, False),\n        (\"Snow\", \"password\", True, False),\n        (\"johnsnow\", \"password\", False, False),\n        (\"johnsnow\", \"password\", True, True),\n    ],\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 14,
                  "endLine": 180,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\n@pytest.mark.parametrize(\n    \"username,password,authorized,expected\",\n    [\n        (\"name\", \"123\", False, False),\n        (\"johnsnow\", \"123\", True, False),\n",
                    "rendered": {
                      "text": "\n\n@pytest.mark.parametrize(\n    \"username,password,authorized,expected\",\n    [\n        (\"name\", \"123\", False, False),\n        (\"johnsnow\", \"123\", True, False),\n",
                      "markdown": "`\n\n@pytest.mark.parametrize(\n    \"username,password,authorized,expected\",\n    [\n        (\"name\", \"123\", False, False),\n        (\"johnsnow\", \"123\", True, False),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 41,
                  "endLine": 171,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    auth = NativeAuthenticator(db=app.db)\n    auth.enable_signup = enable_signup\n\n    user = auth.create_user(\"johnsnow\", \"password\")\n\n    if expected_success:\n        assert user.username == \"johnsnow\"\n",
                    "rendered": {
                      "text": "    auth = NativeAuthenticator(db=app.db)\n    auth.enable_signup = enable_signup\n\n    user = auth.create_user(\"johnsnow\", \"password\")\n\n    if expected_success:\n        assert user.username == \"johnsnow\"\n",
                      "markdown": "`    auth = NativeAuthenticator(db=app.db)\n    auth.enable_signup = enable_signup\n\n    user = auth.create_user(\"johnsnow\", \"password\")\n\n    if expected_success:\n        assert user.username == \"johnsnow\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 46,
                  "endLine": 156,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n    assert not auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"Daenerys\")\n\n\n@pytest.mark.parametrize(\n",
                    "rendered": {
                      "text": "    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n    assert not auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"Daenerys\")\n\n\n@pytest.mark.parametrize(\n",
                      "markdown": "`    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n    assert not auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"Daenerys\")\n\n\n@pytest.mark.parametrize(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 50,
                  "endLine": 155,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n    assert not auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"Daenerys\")\n\n\n",
                    "rendered": {
                      "text": "\n    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n    assert not auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"Daenerys\")\n\n\n",
                      "markdown": "`\n    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n    assert not auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"Daenerys\")\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 23,
                  "endLine": 154,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n    assert not auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"Daenerys\")\n\n",
                    "rendered": {
                      "text": "    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n    assert not auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"Daenerys\")\n\n",
                      "markdown": "`    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n    assert not auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"Daenerys\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 17,
                  "endLine": 153,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n    assert not auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"Daenerys\")\n",
                    "rendered": {
                      "text": "    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n    assert not auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"Daenerys\")\n",
                      "markdown": "`    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n    assert not auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"Daenerys\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 46,
                  "endLine": 151,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n    # Can't change password to something too common.\n    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n",
                    "rendered": {
                      "text": "\n    # Can't change password to something too common.\n    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n",
                      "markdown": "`\n    # Can't change password to something too common.\n    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # CAN change password to something fulfilling criteria.\n    assert auth.change_password(\"johnsnow\", \"Daenerys\") is not None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 23,
                  "endLine": 150,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too common.\n    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # CAN change password to something fulfilling criteria.\n",
                    "rendered": {
                      "text": "    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too common.\n    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # CAN change password to something fulfilling criteria.\n",
                      "markdown": "`    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too common.\n    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # CAN change password to something fulfilling criteria.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 19,
                  "endLine": 149,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too common.\n    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n",
                    "rendered": {
                      "text": "    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too common.\n    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n",
                      "markdown": "`    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too common.\n    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 46,
                  "endLine": 147,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n    # Can't change password to something too short.\n    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too common.\n    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n",
                    "rendered": {
                      "text": "\n    # Can't change password to something too short.\n    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too common.\n    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n",
                      "markdown": "`\n    # Can't change password to something too short.\n    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too common.\n    assert auth.change_password(\"johnsnow\", \"dragon\") is None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 23,
                  "endLine": 146,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too short.\n    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too common.\n",
                    "rendered": {
                      "text": "    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too short.\n    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too common.\n",
                      "markdown": "`    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too short.\n    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too common.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 19,
                  "endLine": 145,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    assert auth.change_password(\"samwelltarly\", \"palanquin\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too short.\n    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n",
                    "rendered": {
                      "text": "    assert auth.change_password(\"samwelltarly\", \"palanquin\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too short.\n    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n",
                      "markdown": "`    assert auth.change_password(\"samwelltarly\", \"palanquin\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too short.\n    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 46,
                  "endLine": 143,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n    # Can't change password of nonexistent users.\n    assert auth.change_password(\"samwelltarly\", \"palanquin\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too short.\n    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n",
                    "rendered": {
                      "text": "\n    # Can't change password of nonexistent users.\n    assert auth.change_password(\"samwelltarly\", \"palanquin\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too short.\n    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n",
                      "markdown": "`\n    # Can't change password of nonexistent users.\n    assert auth.change_password(\"samwelltarly\", \"palanquin\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too short.\n    assert auth.change_password(\"johnsnow\", \"mummer\") is None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 23,
                  "endLine": 142,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    auth.create_user(\"johnsnow\", \"ironwood\")\n\n    # Can't change password of nonexistent users.\n    assert auth.change_password(\"samwelltarly\", \"palanquin\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too short.\n",
                    "rendered": {
                      "text": "    auth.create_user(\"johnsnow\", \"ironwood\")\n\n    # Can't change password of nonexistent users.\n    assert auth.change_password(\"samwelltarly\", \"palanquin\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too short.\n",
                      "markdown": "`    auth.create_user(\"johnsnow\", \"ironwood\")\n\n    # Can't change password of nonexistent users.\n    assert auth.change_password(\"samwelltarly\", \"palanquin\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n    # Can't change password to something too short.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 19,
                  "endLine": 141,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    auth.create_user(\"johnsnow\", \"ironwood\")\n\n    # Can't change password of nonexistent users.\n    assert auth.change_password(\"samwelltarly\", \"palanquin\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n",
                    "rendered": {
                      "text": "\n    auth.create_user(\"johnsnow\", \"ironwood\")\n\n    # Can't change password of nonexistent users.\n    assert auth.change_password(\"samwelltarly\", \"palanquin\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n",
                      "markdown": "`\n    auth.create_user(\"johnsnow\", \"ironwood\")\n\n    # Can't change password of nonexistent users.\n    assert auth.change_password(\"samwelltarly\", \"palanquin\") is None\n    assert auth.get_user(\"johnsnow\").is_valid_password(\"ironwood\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 17,
                  "endLine": 137,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = 8\n\n    auth.create_user(\"johnsnow\", \"ironwood\")\n\n",
                    "rendered": {
                      "text": "    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = 8\n\n    auth.create_user(\"johnsnow\", \"ironwood\")\n\n",
                      "markdown": "`    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = 8\n\n    auth.create_user(\"johnsnow\", \"ironwood\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 22,
                  "endLine": 136,
                  "endColumn": 30,
                  "snippet": {
                    "text": "async def test_no_change_to_bad_password(tmpcwd, app):\n    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = 8\n\n    auth.create_user(\"johnsnow\", \"ironwood\")\n",
                    "rendered": {
                      "text": "async def test_no_change_to_bad_password(tmpcwd, app):\n    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = 8\n\n    auth.create_user(\"johnsnow\", \"ironwood\")\n",
                      "markdown": "`async def test_no_change_to_bad_password(tmpcwd, app):\n    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = 8\n\n    auth.create_user(\"johnsnow\", \"ironwood\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 50,
                  "endLine": 134,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = 8\n",
                    "rendered": {
                      "text": "\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = 8\n",
                      "markdown": "`\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = 8\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 26,
                  "endLine": 134,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = 8\n",
                    "rendered": {
                      "text": "\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = 8\n",
                      "markdown": "`\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = 8\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 32,
                  "endLine": 133,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    assert user.is_valid_password(\"newpassword\")\n\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n",
                    "rendered": {
                      "text": "    assert user.is_valid_password(\"newpassword\")\n\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n",
                      "markdown": "`    assert user.is_valid_password(\"newpassword\")\n\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n    \"\"\"Test that changing password doesn't bypass password requirements\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 38,
                  "endLine": 130,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n",
                    "rendered": {
                      "text": "    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n",
                      "markdown": "`    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 25,
                  "endLine": 130,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n",
                    "rendered": {
                      "text": "    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n",
                      "markdown": "`    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n\nasync def test_no_change_to_bad_password(tmpcwd, app):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 39,
                  "endLine": 129,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n\n",
                    "rendered": {
                      "text": "    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n\n",
                      "markdown": "`    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 29,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n\n",
                    "rendered": {
                      "text": "    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n\n",
                      "markdown": "`    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 41,
                  "endLine": 128,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n",
                    "rendered": {
                      "text": "    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n",
                      "markdown": "`    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 16,
                  "endLine": 128,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n",
                    "rendered": {
                      "text": "    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n",
                      "markdown": "`    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 35,
                  "endLine": 127,
                  "endColumn": 43,
                  "snippet": {
                    "text": "async def test_change_password(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n",
                    "rendered": {
                      "text": "async def test_change_password(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n",
                      "markdown": "`async def test_change_password(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 25,
                  "endLine": 127,
                  "endColumn": 33,
                  "snippet": {
                    "text": "async def test_change_password(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n",
                    "rendered": {
                      "text": "async def test_change_password(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n",
                      "markdown": "`async def test_change_password(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n    assert user.is_valid_password(\"newpassword\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 41,
                  "endLine": 126,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\nasync def test_change_password(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n",
                    "rendered": {
                      "text": "\nasync def test_change_password(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n",
                      "markdown": "`\nasync def test_change_password(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n    auth.change_password(\"johnsnow\", \"newpassword\")\n    assert not user.is_valid_password(\"password\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 22,
                  "endLine": 124,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    assert bool(user) == expected\n\n\nasync def test_change_password(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n",
                    "rendered": {
                      "text": "    assert bool(user) == expected\n\n\nasync def test_change_password(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n",
                      "markdown": "`    assert bool(user) == expected\n\n\nasync def test_change_password(tmpcwd, app):\n    auth = NativeAuthenticator(db=app.db)\n    user = auth.create_user(\"johnsnow\", \"password\")\n    assert user.is_valid_password(\"password\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 40,
                  "endLine": 120,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = min_len\n    user = auth.create_user(\"johnsnow\", password)\n    assert bool(user) == expected\n\n\n",
                    "rendered": {
                      "text": "    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = min_len\n    user = auth.create_user(\"johnsnow\", password)\n    assert bool(user) == expected\n\n\n",
                      "markdown": "`    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = min_len\n    user = auth.create_user(\"johnsnow\", password)\n    assert bool(user) == expected\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 17,
                  "endLine": 119,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = min_len\n    user = auth.create_user(\"johnsnow\", password)\n    assert bool(user) == expected\n\n",
                    "rendered": {
                      "text": "    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = min_len\n    user = auth.create_user(\"johnsnow\", password)\n    assert bool(user) == expected\n\n",
                      "markdown": "`    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = min_len\n    user = auth.create_user(\"johnsnow\", password)\n    assert bool(user) == expected\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 22,
                  "endLine": 118,
                  "endColumn": 30,
                  "snippet": {
                    "text": "):\n    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = min_len\n    user = auth.create_user(\"johnsnow\", password)\n    assert bool(user) == expected\n",
                    "rendered": {
                      "text": "):\n    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = min_len\n    user = auth.create_user(\"johnsnow\", password)\n    assert bool(user) == expected\n",
                      "markdown": "`):\n    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = min_len\n    user = auth.create_user(\"johnsnow\", password)\n    assert bool(user) == expected\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 45,
                  "endLine": 116,
                  "endColumn": 53,
                  "snippet": {
                    "text": "async def test_create_user_with_strong_passwords(\n    password, min_len, expected, tmpcwd, app\n):\n    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = min_len\n",
                    "rendered": {
                      "text": "async def test_create_user_with_strong_passwords(\n    password, min_len, expected, tmpcwd, app\n):\n    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = min_len\n",
                      "markdown": "`async def test_create_user_with_strong_passwords(\n    password, min_len, expected, tmpcwd, app\n):\n    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    auth.check_common_password = True\n    auth.minimum_password_length = min_len\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 4,
                  "endLine": 114,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    ],\n)\nasync def test_create_user_with_strong_passwords(\n    password, min_len, expected, tmpcwd, app\n):\n    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n",
                    "rendered": {
                      "text": "    ],\n)\nasync def test_create_user_with_strong_passwords(\n    password, min_len, expected, tmpcwd, app\n):\n    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n",
                      "markdown": "`    ],\n)\nasync def test_create_user_with_strong_passwords(\n    password, min_len, expected, tmpcwd, app\n):\n    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 39,
                  "endLine": 113,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        (\"averyveryverylongpassword\", 15, True),\n    ],\n)\nasync def test_create_user_with_strong_passwords(\n    password, min_len, expected, tmpcwd, app\n):\n    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n",
                    "rendered": {
                      "text": "        (\"averyveryverylongpassword\", 15, True),\n    ],\n)\nasync def test_create_user_with_strong_passwords(\n    password, min_len, expected, tmpcwd, app\n):\n    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n",
                      "markdown": "`        (\"averyveryverylongpassword\", 15, True),\n    ],\n)\nasync def test_create_user_with_strong_passwords(\n    password, min_len, expected, tmpcwd, app\n):\n    \"\"\"Test if method create_user and strong passwords mesh\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 27,
                  "endLine": 110,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        (\"qwerty\", 1, False),\n        (\"agameofthrones\", 1, True),\n        (\"agameofthrones\", 15, False),\n        (\"averyveryverylongpassword\", 15, True),\n    ],\n)\nasync def test_create_user_with_strong_passwords(\n",
                    "rendered": {
                      "text": "        (\"qwerty\", 1, False),\n        (\"agameofthrones\", 1, True),\n        (\"agameofthrones\", 15, False),\n        (\"averyveryverylongpassword\", 15, True),\n    ],\n)\nasync def test_create_user_with_strong_passwords(\n",
                      "markdown": "`        (\"qwerty\", 1, False),\n        (\"agameofthrones\", 1, True),\n        (\"agameofthrones\", 15, False),\n        (\"averyveryverylongpassword\", 15, True),\n    ],\n)\nasync def test_create_user_with_strong_passwords(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 5,
                  "endLine": 105,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n\n@pytest.mark.parametrize(\n    \"password,min_len,expected\",\n    [\n        (\"qwerty\", 1, False),\n        (\"agameofthrones\", 1, True),\n",
                    "rendered": {
                      "text": "\n\n@pytest.mark.parametrize(\n    \"password,min_len,expected\",\n    [\n        (\"qwerty\", 1, False),\n        (\"agameofthrones\", 1, True),\n",
                      "markdown": "`\n\n@pytest.mark.parametrize(\n    \"password,min_len,expected\",\n    [\n        (\"qwerty\", 1, False),\n        (\"agameofthrones\", 1, True),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 51,
                  "endLine": 97,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    auth.create_user(\"daenerystargaryen\", \"anotherpassword\")\n    assert auth.get_unauthed_amount() == 1\n\n    auth.create_user(\"tyrionlannister\", \"yetanotherpassword\")\n    assert auth.get_unauthed_amount() == 2\n\n    auth.admin_users = set({\"daenerystargaryen\"})\n",
                    "rendered": {
                      "text": "    auth.create_user(\"daenerystargaryen\", \"anotherpassword\")\n    assert auth.get_unauthed_amount() == 1\n\n    auth.create_user(\"tyrionlannister\", \"yetanotherpassword\")\n    assert auth.get_unauthed_amount() == 2\n\n    auth.admin_users = set({\"daenerystargaryen\"})\n",
                      "markdown": "`    auth.create_user(\"daenerystargaryen\", \"anotherpassword\")\n    assert auth.get_unauthed_amount() == 1\n\n    auth.create_user(\"tyrionlannister\", \"yetanotherpassword\")\n    assert auth.get_unauthed_amount() == 2\n\n    auth.admin_users = set({\"daenerystargaryen\"})\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 50,
                  "endLine": 94,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    UserInfo.change_authorization(app.db, \"johnsnow\")\n    assert auth.get_unauthed_amount() == 0\n\n    auth.create_user(\"daenerystargaryen\", \"anotherpassword\")\n    assert auth.get_unauthed_amount() == 1\n\n    auth.create_user(\"tyrionlannister\", \"yetanotherpassword\")\n",
                    "rendered": {
                      "text": "    UserInfo.change_authorization(app.db, \"johnsnow\")\n    assert auth.get_unauthed_amount() == 0\n\n    auth.create_user(\"daenerystargaryen\", \"anotherpassword\")\n    assert auth.get_unauthed_amount() == 1\n\n    auth.create_user(\"tyrionlannister\", \"yetanotherpassword\")\n",
                      "markdown": "`    UserInfo.change_authorization(app.db, \"johnsnow\")\n    assert auth.get_unauthed_amount() == 0\n\n    auth.create_user(\"daenerystargaryen\", \"anotherpassword\")\n    assert auth.get_unauthed_amount() == 1\n\n    auth.create_user(\"tyrionlannister\", \"yetanotherpassword\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 34,
                  "endLine": 88,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    auth.admin_users = set()\n    assert auth.get_unauthed_amount() == 0\n\n    auth.create_user(\"johnsnow\", \"password\")\n    assert auth.get_unauthed_amount() == 1\n\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n",
                    "rendered": {
                      "text": "    auth.admin_users = set()\n    assert auth.get_unauthed_amount() == 0\n\n    auth.create_user(\"johnsnow\", \"password\")\n    assert auth.get_unauthed_amount() == 1\n\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n",
                      "markdown": "`    auth.admin_users = set()\n    assert auth.get_unauthed_amount() == 0\n\n    auth.create_user(\"johnsnow\", \"password\")\n    assert auth.get_unauthed_amount() == 1\n\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 50,
                  "endLine": 73,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    UserInfo.change_authorization(app.db, \"johnsnow\")\n    assert auth.get_authed_users() == set({\"johnsnow\"})\n\n    auth.create_user(\"daenerystargaryen\", \"anotherpassword\")\n    assert auth.get_authed_users() == set({\"johnsnow\"})\n\n    auth.admin_users = set({\"daenerystargaryen\"})\n",
                    "rendered": {
                      "text": "    UserInfo.change_authorization(app.db, \"johnsnow\")\n    assert auth.get_authed_users() == set({\"johnsnow\"})\n\n    auth.create_user(\"daenerystargaryen\", \"anotherpassword\")\n    assert auth.get_authed_users() == set({\"johnsnow\"})\n\n    auth.admin_users = set({\"daenerystargaryen\"})\n",
                      "markdown": "`    UserInfo.change_authorization(app.db, \"johnsnow\")\n    assert auth.get_authed_users() == set({\"johnsnow\"})\n\n    auth.create_user(\"daenerystargaryen\", \"anotherpassword\")\n    assert auth.get_authed_users() == set({\"johnsnow\"})\n\n    auth.admin_users = set({\"daenerystargaryen\"})\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 34,
                  "endLine": 67,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    auth.admin_users = set()\n    assert auth.get_authed_users() == set()\n\n    auth.create_user(\"johnsnow\", \"password\")\n    assert auth.get_authed_users() == set()\n\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n",
                    "rendered": {
                      "text": "    auth.admin_users = set()\n    assert auth.get_authed_users() == set()\n\n    auth.create_user(\"johnsnow\", \"password\")\n    assert auth.get_authed_users() == set()\n\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n",
                      "markdown": "`    auth.admin_users = set()\n    assert auth.get_authed_users() == set()\n\n    auth.create_user(\"johnsnow\", \"password\")\n    assert auth.get_authed_users() == set()\n\n    UserInfo.change_authorization(app.db, \"johnsnow\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 55,
                  "endLine": 57,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    assert not auth.create_user(\"johnsnow\", \"password\")\n\n    # Creating a user with same handle but different pw should also fail.\n    assert not auth.create_user(\"johnsnow\", \"adifferentpassword\")\n\n\nasync def test_get_authed_users(tmpcwd, app):\n",
                    "rendered": {
                      "text": "    assert not auth.create_user(\"johnsnow\", \"password\")\n\n    # Creating a user with same handle but different pw should also fail.\n    assert not auth.create_user(\"johnsnow\", \"adifferentpassword\")\n\n\nasync def test_get_authed_users(tmpcwd, app):\n",
                      "markdown": "`    assert not auth.create_user(\"johnsnow\", \"password\")\n\n    # Creating a user with same handle but different pw should also fail.\n    assert not auth.create_user(\"johnsnow\", \"adifferentpassword\")\n\n\nasync def test_get_authed_users(tmpcwd, app):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 45,
                  "endLine": 54,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    assert auth.create_user(\"johnsnow\", \"password\")\n\n    # Creating the same account again should fail.\n    assert not auth.create_user(\"johnsnow\", \"password\")\n\n    # Creating a user with same handle but different pw should also fail.\n    assert not auth.create_user(\"johnsnow\", \"adifferentpassword\")\n",
                    "rendered": {
                      "text": "    assert auth.create_user(\"johnsnow\", \"password\")\n\n    # Creating the same account again should fail.\n    assert not auth.create_user(\"johnsnow\", \"password\")\n\n    # Creating a user with same handle but different pw should also fail.\n    assert not auth.create_user(\"johnsnow\", \"adifferentpassword\")\n",
                      "markdown": "`    assert auth.create_user(\"johnsnow\", \"password\")\n\n    # Creating the same account again should fail.\n    assert not auth.create_user(\"johnsnow\", \"password\")\n\n    # Creating a user with same handle but different pw should also fail.\n    assert not auth.create_user(\"johnsnow\", \"adifferentpassword\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 41,
                  "endLine": 51,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    auth = NativeAuthenticator(db=app.db)\n\n    # First creation should succeed.\n    assert auth.create_user(\"johnsnow\", \"password\")\n\n    # Creating the same account again should fail.\n    assert not auth.create_user(\"johnsnow\", \"password\")\n",
                    "rendered": {
                      "text": "    auth = NativeAuthenticator(db=app.db)\n\n    # First creation should succeed.\n    assert auth.create_user(\"johnsnow\", \"password\")\n\n    # Creating the same account again should fail.\n    assert not auth.create_user(\"johnsnow\", \"password\")\n",
                      "markdown": "`    auth = NativeAuthenticator(db=app.db)\n\n    # First creation should succeed.\n    assert auth.create_user(\"johnsnow\", \"password\")\n\n    # Creating the same account again should fail.\n    assert not auth.create_user(\"johnsnow\", \"password\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 46,
                  "endLine": 43,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    \"\"\"Test method create_user with bad characters on username\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    assert not auth.create_user(\"john snow\", \"password\")\n    assert not auth.create_user(\"john,snow\", \"password\")\n\n\nasync def test_create_user_twice(tmpcwd, app):\n",
                    "rendered": {
                      "text": "    \"\"\"Test method create_user with bad characters on username\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    assert not auth.create_user(\"john snow\", \"password\")\n    assert not auth.create_user(\"john,snow\", \"password\")\n\n\nasync def test_create_user_twice(tmpcwd, app):\n",
                      "markdown": "`    \"\"\"Test method create_user with bad characters on username\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    assert not auth.create_user(\"john snow\", \"password\")\n    assert not auth.create_user(\"john,snow\", \"password\")\n\n\nasync def test_create_user_twice(tmpcwd, app):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 46,
                  "endLine": 42,
                  "endColumn": 54,
                  "snippet": {
                    "text": "async def test_create_user_bad_characters(tmpcwd, app):\n    \"\"\"Test method create_user with bad characters on username\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    assert not auth.create_user(\"john snow\", \"password\")\n    assert not auth.create_user(\"john,snow\", \"password\")\n\n\n",
                    "rendered": {
                      "text": "async def test_create_user_bad_characters(tmpcwd, app):\n    \"\"\"Test method create_user with bad characters on username\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    assert not auth.create_user(\"john snow\", \"password\")\n    assert not auth.create_user(\"john,snow\", \"password\")\n\n\n",
                      "markdown": "`async def test_create_user_bad_characters(tmpcwd, app):\n    \"\"\"Test method create_user with bad characters on username\"\"\"\n    auth = NativeAuthenticator(db=app.db)\n    assert not auth.create_user(\"john snow\", \"password\")\n    assert not auth.create_user(\"john,snow\", \"password\")\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 34,
                  "endLine": 33,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    if open_signup:\n        auth.open_signup = True\n\n    auth.create_user(\"johnsnow\", \"password\")\n    user_info = UserInfo.find(app.db, \"johnsnow\")\n    assert user_info.username == \"johnsnow\"\n    assert user_info.is_authorized == expected_authorization\n",
                    "rendered": {
                      "text": "    if open_signup:\n        auth.open_signup = True\n\n    auth.create_user(\"johnsnow\", \"password\")\n    user_info = UserInfo.find(app.db, \"johnsnow\")\n    assert user_info.username == \"johnsnow\"\n    assert user_info.is_authorized == expected_authorization\n",
                      "markdown": "`    if open_signup:\n        auth.open_signup = True\n\n    auth.create_user(\"johnsnow\", \"password\")\n    user_info = UserInfo.find(app.db, \"johnsnow\")\n    assert user_info.username == \"johnsnow\"\n    assert user_info.is_authorized == expected_authorization\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/tests/test_authenticator.py"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 6,
                  "endLine": 5,
                  "snippet": {
                    "text": "import datetime\nimport dbm\nimport os\nimport time\nfrom datetime import timezone as tz\n\nimport pytest\n\n",
                    "rendered": {
                      "text": "import datetime\nimport dbm\nimport os\nimport time\nfrom datetime import timezone as tz\n\nimport pytest\n\n",
                      "markdown": "`import datetime\nimport dbm\nimport os\nimport time\nfrom datetime import timezone as tz\n\nimport pytest\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 66,
                  "endLine": 60,
                  "endColumn": 74,
                  "snippet": {
                    "text": "            </div>\n            <p></p>\n\n            <input id=\"signup_submit\" type=\"submit\" value='Change Password' class='btn btn-jupyter' />\n        </div>\n    </form>\n\n",
                    "rendered": {
                      "text": "            </div>\n            <p></p>\n\n            <input id=\"signup_submit\" type=\"submit\" value='Change Password' class='btn btn-jupyter' />\n        </div>\n    </form>\n\n",
                      "markdown": "`            </div>\n            <p></p>\n\n            <input id=\"signup_submit\" type=\"submit\" value='Change Password' class='btn btn-jupyter' />\n        </div>\n    </form>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 86,
                  "endLine": 55,
                  "endColumn": 94,
                  "snippet": {
                    "text": "            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n            </div>\n            <p></p>\n",
                    "rendered": {
                      "text": "            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n            </div>\n            <p></p>\n",
                      "markdown": "`            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n            </div>\n            <p></p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 66,
                  "endLine": 55,
                  "endColumn": 74,
                  "snippet": {
                    "text": "            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n            </div>\n            <p></p>\n",
                    "rendered": {
                      "text": "            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n            </div>\n            <p></p>\n",
                      "markdown": "`            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n            </div>\n            <p></p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 31,
                  "endLine": 55,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n            </div>\n            <p></p>\n",
                    "rendered": {
                      "text": "            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n            </div>\n            <p></p>\n",
                      "markdown": "`            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n            </div>\n            <p></p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 69,
                  "endLine": 53,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            </div>\n            <p></p>\n            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n",
                    "rendered": {
                      "text": "            </div>\n            <p></p>\n            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n",
                      "markdown": "`            </div>\n            <p></p>\n            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 28,
                  "endLine": 53,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            </div>\n            <p></p>\n            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n",
                    "rendered": {
                      "text": "            </div>\n            <p></p>\n            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n",
                      "markdown": "`            </div>\n            <p></p>\n            \n            <label for=\"new_password_confirmation_input\">Confirm new password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_confirmation_input\" type=\"password\" name=\"new_password_confirmation\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span></span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 73,
                  "endLine": 49,
                  "endColumn": 81,
                  "snippet": {
                    "text": "            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n            \n",
                    "rendered": {
                      "text": "            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n            \n",
                      "markdown": "`            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n            \n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 53,
                  "endLine": 49,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n            \n",
                    "rendered": {
                      "text": "            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n            \n",
                      "markdown": "`            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n            \n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 31,
                  "endLine": 49,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n            \n",
                    "rendered": {
                      "text": "            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n            \n",
                      "markdown": "`            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n            <p></p>\n            \n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 48,
                  "endLine": 47,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            </div>\n            <p></p>\n            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n",
                    "rendered": {
                      "text": "            </div>\n            <p></p>\n            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n",
                      "markdown": "`            </div>\n            <p></p>\n            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            </div>\n            <p></p>\n            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n",
                    "rendered": {
                      "text": "            </div>\n            <p></p>\n            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n",
                      "markdown": "`            </div>\n            <p></p>\n            \n            <label for=\"new_password_input\">New password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"new_password_input\" type=\"password\" name=\"new_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n            </div>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 73,
                  "endLine": 40,
                  "endColumn": 81,
                  "snippet": {
                    "text": "        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                    "rendered": {
                      "text": "        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                      "markdown": "`        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 53,
                  "endLine": 40,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                    "rendered": {
                      "text": "        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                      "markdown": "`        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 31,
                  "endLine": 40,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                    "rendered": {
                      "text": "        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n",
                      "markdown": "`        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n                    <button id=\"eye\" type=\"button\" style=\"border:0;\">👁</button>\n                </span>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 48,
                  "endLine": 38,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                    "rendered": {
                      "text": "        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                      "markdown": "`        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 28,
                  "endLine": 38,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                    "rendered": {
                      "text": "        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n",
                      "markdown": "`        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n            <div class=\"input-group col-xs-6\">\n                <input id=\"old_password_input\" type=\"password\" name=\"old_password\" val=\"\" autocapitalize=\"off\" autocorrect=\"off\" class=\"form-control\" />\n                <span class=\"input-group-addon\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 117,
                  "endLine": 35,
                  "endColumn": 125,
                  "snippet": {
                    "text": "            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n",
                    "rendered": {
                      "text": "            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n",
                      "markdown": "`            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 58,
                  "endLine": 35,
                  "endColumn": 66,
                  "snippet": {
                    "text": "            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n",
                    "rendered": {
                      "text": "            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n",
                      "markdown": "`            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 37,
                  "endLine": 35,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n",
                    "rendered": {
                      "text": "            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n",
                      "markdown": "`            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n        <input type=\"hidden\" name=\"_xsrf\" value=\"{{ xsrf }}\"/>\n        <div class=\"form-group\">\n            <label for=\"old_password_input\">Old password:</label>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 19,
                  "endLine": 32,
                  "endColumn": 27,
                  "snippet": {
                    "text": "<div class=\"container\">\n    <form action=\"{{post_url}}\" method=\"post\" role=\"form\">\n        <h1>\n            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n",
                    "rendered": {
                      "text": "<div class=\"container\">\n    <form action=\"{{post_url}}\" method=\"post\" role=\"form\">\n        <h1>\n            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n",
                      "markdown": "`<div class=\"container\">\n    <form action=\"{{post_url}}\" method=\"post\" role=\"form\">\n        <h1>\n            Change password for {{user_name}}\n        </h1>\n        \n        <p>Please enter your current password and the new password you want to set it to. If you have forgotten your password, an admin can reset it for you.</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 43,
                  "endLine": 20,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            } else {\n                opwd.setAttribute(\"type\", \"password\");\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n        });\n",
                    "rendered": {
                      "text": "            } else {\n                opwd.setAttribute(\"type\", \"password\");\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n        });\n",
                      "markdown": "`            } else {\n                opwd.setAttribute(\"type\", \"password\");\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n        });\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 43,
                  "endLine": 19,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                button.textContent = \"🔑\";\n            } else {\n                opwd.setAttribute(\"type\", \"password\");\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n",
                    "rendered": {
                      "text": "                button.textContent = \"🔑\";\n            } else {\n                opwd.setAttribute(\"type\", \"password\");\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n",
                      "markdown": "`                button.textContent = \"🔑\";\n            } else {\n                opwd.setAttribute(\"type\", \"password\");\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n            }\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 43,
                  "endLine": 18,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                cpwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n                opwd.setAttribute(\"type\", \"password\");\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n",
                    "rendered": {
                      "text": "                cpwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n                opwd.setAttribute(\"type\", \"password\");\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n",
                      "markdown": "`                cpwd.setAttribute(\"type\", \"text\");\n                button.textContent = \"🔑\";\n            } else {\n                opwd.setAttribute(\"type\", \"password\");\n                npwd.setAttribute(\"type\", \"password\");\n                cpwd.setAttribute(\"type\", \"password\");\n                button.textContent = \"👁\";\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 47,
                  "endLine": 12,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            let opwd = document.getElementById(\"old_password_input\");\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (opwd.getAttribute(\"type\") === \"password\") {\n                opwd.setAttribute(\"type\", \"text\");\n                npwd.setAttribute(\"type\", \"text\");\n                cpwd.setAttribute(\"type\", \"text\");\n",
                    "rendered": {
                      "text": "            let opwd = document.getElementById(\"old_password_input\");\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (opwd.getAttribute(\"type\") === \"password\") {\n                opwd.setAttribute(\"type\", \"text\");\n                npwd.setAttribute(\"type\", \"text\");\n                cpwd.setAttribute(\"type\", \"text\");\n",
                      "markdown": "`            let opwd = document.getElementById(\"old_password_input\");\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (opwd.getAttribute(\"type\") === \"password\") {\n                opwd.setAttribute(\"type\", \"text\");\n                npwd.setAttribute(\"type\", \"text\");\n                cpwd.setAttribute(\"type\", \"text\");\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 52,
                  "endLine": 11,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        button.addEventListener(\"click\", function(e) {\n            let opwd = document.getElementById(\"old_password_input\");\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (opwd.getAttribute(\"type\") === \"password\") {\n                opwd.setAttribute(\"type\", \"text\");\n                npwd.setAttribute(\"type\", \"text\");\n",
                    "rendered": {
                      "text": "        button.addEventListener(\"click\", function(e) {\n            let opwd = document.getElementById(\"old_password_input\");\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (opwd.getAttribute(\"type\") === \"password\") {\n                opwd.setAttribute(\"type\", \"text\");\n                npwd.setAttribute(\"type\", \"text\");\n",
                      "markdown": "`        button.addEventListener(\"click\", function(e) {\n            let opwd = document.getElementById(\"old_password_input\");\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (opwd.getAttribute(\"type\") === \"password\") {\n                opwd.setAttribute(\"type\", \"text\");\n                npwd.setAttribute(\"type\", \"text\");\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 52,
                  "endLine": 10,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let opwd = document.getElementById(\"old_password_input\");\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (opwd.getAttribute(\"type\") === \"password\") {\n                opwd.setAttribute(\"type\", \"text\");\n",
                    "rendered": {
                      "text": "        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let opwd = document.getElementById(\"old_password_input\");\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (opwd.getAttribute(\"type\") === \"password\") {\n                opwd.setAttribute(\"type\", \"text\");\n",
                      "markdown": "`        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let opwd = document.getElementById(\"old_password_input\");\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (opwd.getAttribute(\"type\") === \"password\") {\n                opwd.setAttribute(\"type\", \"text\");\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 52,
                  "endLine": 9,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    document.addEventListener('DOMContentLoaded', function() {\n        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let opwd = document.getElementById(\"old_password_input\");\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (opwd.getAttribute(\"type\") === \"password\") {\n",
                    "rendered": {
                      "text": "    document.addEventListener('DOMContentLoaded', function() {\n        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let opwd = document.getElementById(\"old_password_input\");\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (opwd.getAttribute(\"type\") === \"password\") {\n",
                      "markdown": "`    document.addEventListener('DOMContentLoaded', function() {\n        let button = document.getElementById('eye');\n        button.addEventListener(\"click\", function(e) {\n            let opwd = document.getElementById(\"old_password_input\");\n            let npwd = document.getElementById(\"new_password_input\");\n            let cpwd = document.getElementById(\"new_password_confirmation_input\");\n            if (opwd.getAttribute(\"type\") === \"password\") {\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        });\n    });\n</script>\n{% endblock script %}\n\n{% block main %}\n<div class=\"container\">\n",
                    "rendered": {
                      "text": "        });\n    });\n</script>\n{% endblock script %}\n\n{% block main %}\n<div class=\"container\">\n",
                      "markdown": "`        });\n    });\n</script>\n{% endblock script %}\n\n{% block main %}\n<div class=\"container\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/change-password.html"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 16,
                  "snippet": {
                    "text": "{% extends \"page.html\" %}\n\n{% block script %}\n{{ super() }}\n<script type=\"text/javascript\">\n    document.addEventListener('DOMContentLoaded', function() {\n",
                    "rendered": {
                      "text": "{% extends \"page.html\" %}\n\n{% block script %}\n{{ super() }}\n<script type=\"text/javascript\">\n    document.addEventListener('DOMContentLoaded', function() {\n",
                      "markdown": "`{% extends \"page.html\" %}\n\n{% block script %}\n{{ super() }}\n<script type=\"text/javascript\">\n    document.addEventListener('DOMContentLoaded', function() {\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/authorization-area.html"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 125,
                  "endLine": 38,
                  "endColumn": 133,
                  "snippet": {
                    "text": "                <td>{{ user.has_2fa }}</td>\n                <td>No</td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}authorize/{{ user.username }}\" role=\"button\">Authorize</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}change-password/{{ user.username }}\" role=\"button\">Change password</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}discard/{{ user.username }}\" role=\"button\">Discard</a></td>\n            </tr>\n            {% endif %}\n",
                    "rendered": {
                      "text": "                <td>{{ user.has_2fa }}</td>\n                <td>No</td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}authorize/{{ user.username }}\" role=\"button\">Authorize</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}change-password/{{ user.username }}\" role=\"button\">Change password</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}discard/{{ user.username }}\" role=\"button\">Discard</a></td>\n            </tr>\n            {% endif %}\n",
                      "markdown": "`                <td>{{ user.has_2fa }}</td>\n                <td>No</td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}authorize/{{ user.username }}\" role=\"button\">Authorize</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}change-password/{{ user.username }}\" role=\"button\">Change password</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}discard/{{ user.username }}\" role=\"button\">Discard</a></td>\n            </tr>\n            {% endif %}\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/authorization-area.html"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 74,
                  "endLine": 38,
                  "endColumn": 82,
                  "snippet": {
                    "text": "                <td>{{ user.has_2fa }}</td>\n                <td>No</td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}authorize/{{ user.username }}\" role=\"button\">Authorize</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}change-password/{{ user.username }}\" role=\"button\">Change password</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}discard/{{ user.username }}\" role=\"button\">Discard</a></td>\n            </tr>\n            {% endif %}\n",
                    "rendered": {
                      "text": "                <td>{{ user.has_2fa }}</td>\n                <td>No</td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}authorize/{{ user.username }}\" role=\"button\">Authorize</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}change-password/{{ user.username }}\" role=\"button\">Change password</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}discard/{{ user.username }}\" role=\"button\">Discard</a></td>\n            </tr>\n            {% endif %}\n",
                      "markdown": "`                <td>{{ user.has_2fa }}</td>\n                <td>No</td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}authorize/{{ user.username }}\" role=\"button\">Authorize</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}change-password/{{ user.username }}\" role=\"button\">Change password</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}discard/{{ user.username }}\" role=\"button\">Discard</a></td>\n            </tr>\n            {% endif %}\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/authorization-area.html"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 125,
                  "endLine": 28,
                  "endColumn": 133,
                  "snippet": {
                    "text": "                <td>{{ user.has_2fa }}</td>\n                <td>Yes</td>\n                <td><a class=\"btn btn-default\" href=\"{{ base_url }}authorize/{{ user.username }}\" role=\"button\">Unauthorize</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}change-password/{{ user.username }}\" role=\"button\">Change password</a></td>\n                <td></td>\n            </tr>\n            {% else %}\n",
                    "rendered": {
                      "text": "                <td>{{ user.has_2fa }}</td>\n                <td>Yes</td>\n                <td><a class=\"btn btn-default\" href=\"{{ base_url }}authorize/{{ user.username }}\" role=\"button\">Unauthorize</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}change-password/{{ user.username }}\" role=\"button\">Change password</a></td>\n                <td></td>\n            </tr>\n            {% else %}\n",
                      "markdown": "`                <td>{{ user.has_2fa }}</td>\n                <td>Yes</td>\n                <td><a class=\"btn btn-default\" href=\"{{ base_url }}authorize/{{ user.username }}\" role=\"button\">Unauthorize</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}change-password/{{ user.username }}\" role=\"button\">Change password</a></td>\n                <td></td>\n            </tr>\n            {% else %}\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/nativeauthenticator/templates/authorization-area.html"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 74,
                  "endLine": 28,
                  "endColumn": 82,
                  "snippet": {
                    "text": "                <td>{{ user.has_2fa }}</td>\n                <td>Yes</td>\n                <td><a class=\"btn btn-default\" href=\"{{ base_url }}authorize/{{ user.username }}\" role=\"button\">Unauthorize</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}change-password/{{ user.username }}\" role=\"button\">Change password</a></td>\n                <td></td>\n            </tr>\n            {% else %}\n",
                    "rendered": {
                      "text": "                <td>{{ user.has_2fa }}</td>\n                <td>Yes</td>\n                <td><a class=\"btn btn-default\" href=\"{{ base_url }}authorize/{{ user.username }}\" role=\"button\">Unauthorize</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}change-password/{{ user.username }}\" role=\"button\">Change password</a></td>\n                <td></td>\n            </tr>\n            {% else %}\n",
                      "markdown": "`                <td>{{ user.has_2fa }}</td>\n                <td>Yes</td>\n                <td><a class=\"btn btn-default\" href=\"{{ base_url }}authorize/{{ user.username }}\" role=\"button\">Unauthorize</a></td>\n                <td><a class=\"btn btn-jupyter\" href=\"{{ base_url }}change-password/{{ user.username }}\" role=\"button\">Change password</a></td>\n                <td></td>\n            </tr>\n            {% else %}\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/jupyterhub_nativeauthenticator-1.3.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 95,
                  "endLine": 39,
                  "endColumn": 103,
                  "snippet": {
                    "text": "\n- New users can signup on the system;\n- New users can be blocked from accessing the system awaiting admin authorization;\n- Option of enforcing password security by disallowing common passwords or requiring a minimum password length;\n- Option to block users after a set number of failed login attempts;\n- Option of open signup without need for initial authorization;\n- Option of asking more information about users on signup (e-mail).\n",
                    "rendered": {
                      "text": "\n- New users can signup on the system;\n- New users can be blocked from accessing the system awaiting admin authorization;\n- Option of enforcing password security by disallowing common passwords or requiring a minimum password length;\n- Option to block users after a set number of failed login attempts;\n- Option of open signup without need for initial authorization;\n- Option of asking more information about users on signup (e-mail).\n",
                      "markdown": "`\n- New users can signup on the system;\n- New users can be blocked from accessing the system awaiting admin authorization;\n- Option of enforcing password security by disallowing common passwords or requiring a minimum password length;\n- Option to block users after a set number of failed login attempts;\n- Option of open signup without need for initial authorization;\n- Option of asking more information about users on signup (e-mail).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/jupyterhub_nativeauthenticator-1.3.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 62,
                  "endLine": 39,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n- New users can signup on the system;\n- New users can be blocked from accessing the system awaiting admin authorization;\n- Option of enforcing password security by disallowing common passwords or requiring a minimum password length;\n- Option to block users after a set number of failed login attempts;\n- Option of open signup without need for initial authorization;\n- Option of asking more information about users on signup (e-mail).\n",
                    "rendered": {
                      "text": "\n- New users can signup on the system;\n- New users can be blocked from accessing the system awaiting admin authorization;\n- Option of enforcing password security by disallowing common passwords or requiring a minimum password length;\n- Option to block users after a set number of failed login attempts;\n- Option of open signup without need for initial authorization;\n- Option of asking more information about users on signup (e-mail).\n",
                      "markdown": "`\n- New users can signup on the system;\n- New users can be blocked from accessing the system awaiting admin authorization;\n- Option of enforcing password security by disallowing common passwords or requiring a minimum password length;\n- Option to block users after a set number of failed login attempts;\n- Option of open signup without need for initial authorization;\n- Option of asking more information about users on signup (e-mail).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/jupyterhub_nativeauthenticator-1.3.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 22,
                  "endLine": 39,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n- New users can signup on the system;\n- New users can be blocked from accessing the system awaiting admin authorization;\n- Option of enforcing password security by disallowing common passwords or requiring a minimum password length;\n- Option to block users after a set number of failed login attempts;\n- Option of open signup without need for initial authorization;\n- Option of asking more information about users on signup (e-mail).\n",
                    "rendered": {
                      "text": "\n- New users can signup on the system;\n- New users can be blocked from accessing the system awaiting admin authorization;\n- Option of enforcing password security by disallowing common passwords or requiring a minimum password length;\n- Option to block users after a set number of failed login attempts;\n- Option of open signup without need for initial authorization;\n- Option of asking more information about users on signup (e-mail).\n",
                      "markdown": "`\n- New users can signup on the system;\n- New users can be blocked from accessing the system awaiting admin authorization;\n- Option of enforcing password security by disallowing common passwords or requiring a minimum password length;\n- Option to block users after a set number of failed login attempts;\n- Option of open signup without need for initial authorization;\n- Option of asking more information about users on signup (e-mail).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-nativeauthenticator-1.3.0-r0.apk/py3-jupyterhub-nativeauthenticator-1.3.0-r0/usr/lib/python3.12/site-packages/jupyterhub_nativeauthenticator-1.3.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 8,
                  "endLine": 56,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nTo run the tests locally, you can install the development dependencies like so:\n\n```shell\npip install -e \".[test]\"\n```\n\nThen run tests with pytest:\n",
                    "rendered": {
                      "text": "\nTo run the tests locally, you can install the development dependencies like so:\n\n```shell\npip install -e \".[test]\"\n```\n\nThen run tests with pytest:\n",
                      "markdown": "`\nTo run the tests locally, you can install the development dependencies like so:\n\n```shell\npip install -e \".[test]\"\n```\n\nThen run tests with pytest:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}