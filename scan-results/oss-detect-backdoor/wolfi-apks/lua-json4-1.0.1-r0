{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 136,
                  "endLine": 347,
                  "endColumn": 140,
                  "snippet": {
                    "text": "    end\r\n  end\r\n  table.insert(t,string.sub(j, j+1))\r\n  assert(string.find(s, startChar, j+1), \"String decoding failed: missing closing \" .. startChar .. \" at position \" .. j .. \"(for string at position \" .. startPos .. \")\")\r\n  return table.concat(t,\"\"), j+2\r\n  -- END SoniEx2\r\nend\r\n",
                    "rendered": {
                      "text": "    end\r\n  end\r\n  table.insert(t,string.sub(j, j+1))\r\n  assert(string.find(s, startChar, j+1), \"String decoding failed: missing closing \" .. startChar .. \" at position \" .. j .. \"(for string at position \" .. startPos .. \")\")\r\n  return table.concat(t,\"\"), j+2\r\n  -- END SoniEx2\r\nend\r\n",
                      "markdown": "`    end\r\n  end\r\n  table.insert(t,string.sub(j, j+1))\r\n  assert(string.find(s, startChar, j+1), \"String decoding failed: missing closing \" .. startChar .. \" at position \" .. j .. \"(for string at position \" .. startPos .. \")\")\r\n  return table.concat(t,\"\"), j+2\r\n  -- END SoniEx2\r\nend\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 101,
                  "endLine": 347,
                  "endColumn": 105,
                  "snippet": {
                    "text": "    end\r\n  end\r\n  table.insert(t,string.sub(j, j+1))\r\n  assert(string.find(s, startChar, j+1), \"String decoding failed: missing closing \" .. startChar .. \" at position \" .. j .. \"(for string at position \" .. startPos .. \")\")\r\n  return table.concat(t,\"\"), j+2\r\n  -- END SoniEx2\r\nend\r\n",
                    "rendered": {
                      "text": "    end\r\n  end\r\n  table.insert(t,string.sub(j, j+1))\r\n  assert(string.find(s, startChar, j+1), \"String decoding failed: missing closing \" .. startChar .. \" at position \" .. j .. \"(for string at position \" .. startPos .. \")\")\r\n  return table.concat(t,\"\"), j+2\r\n  -- END SoniEx2\r\nend\r\n",
                      "markdown": "`    end\r\n  end\r\n  table.insert(t,string.sub(j, j+1))\r\n  assert(string.find(s, startChar, j+1), \"String decoding failed: missing closing \" .. startChar .. \" at position \" .. j .. \"(for string at position \" .. startPos .. \")\")\r\n  return table.concat(t,\"\"), j+2\r\n  -- END SoniEx2\r\nend\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 71,
                  "endLine": 326,
                  "endColumn": 75,
                  "snippet": {
                    "text": "      local a = string.sub(s,j+1,j+4)\r\n      j = j + 4\r\n      local n = tonumber(a, 16)\r\n      assert(n, \"String decoding failed: bad Unicode escape \" .. a .. \" at position \" .. i .. \" : \" .. j)\r\n      -- math.floor(x/2^y) == lazy right shift\r\n      -- a % 2^b == bitwise_and(a, (2^b)-1)\r\n      -- 64 = 2^6\r\n",
                    "rendered": {
                      "text": "      local a = string.sub(s,j+1,j+4)\r\n      j = j + 4\r\n      local n = tonumber(a, 16)\r\n      assert(n, \"String decoding failed: bad Unicode escape \" .. a .. \" at position \" .. i .. \" : \" .. j)\r\n      -- math.floor(x/2^y) == lazy right shift\r\n      -- a % 2^b == bitwise_and(a, (2^b)-1)\r\n      -- 64 = 2^6\r\n",
                      "markdown": "`      local a = string.sub(s,j+1,j+4)\r\n      j = j + 4\r\n      local n = tonumber(a, 16)\r\n      assert(n, \"String decoding failed: bad Unicode escape \" .. a .. \" at position \" .. i .. \" : \" .. j)\r\n      -- math.floor(x/2^y) == lazy right shift\r\n      -- a % 2^b == bitwise_and(a, (2^b)-1)\r\n      -- 64 = 2^6\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 92,
                  "endLine": 311,
                  "endColumn": 96,
                  "snippet": {
                    "text": "  -- START SoniEx2\r\n  -- PS: I don't think single quotes are valid JSON\r\n  assert(startChar == [[\"]] or startChar == [[']],'decode_scanString called for a non-string')\r\n  --assert(startPos, \"String decoding failed: missing closing \" .. startChar .. \" for string at position \" .. oldStart)\r\n  local t = {}\r\n  local i,j = startPos,startPos\r\n  while string.find(s, startChar, j+1) ~= j+1 do\r\n",
                    "rendered": {
                      "text": "  -- START SoniEx2\r\n  -- PS: I don't think single quotes are valid JSON\r\n  assert(startChar == [[\"]] or startChar == [[']],'decode_scanString called for a non-string')\r\n  --assert(startPos, \"String decoding failed: missing closing \" .. startChar .. \" for string at position \" .. oldStart)\r\n  local t = {}\r\n  local i,j = startPos,startPos\r\n  while string.find(s, startChar, j+1) ~= j+1 do\r\n",
                      "markdown": "`  -- START SoniEx2\r\n  -- PS: I don't think single quotes are valid JSON\r\n  assert(startChar == [[\"]] or startChar == [[']],'decode_scanString called for a non-string')\r\n  --assert(startPos, \"String decoding failed: missing closing \" .. startChar .. \" for string at position \" .. oldStart)\r\n  local t = {}\r\n  local i,j = startPos,startPos\r\n  while string.find(s, startChar, j+1) ~= j+1 do\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 92,
                  "endLine": 273,
                  "endColumn": 96,
                  "snippet": {
                    "text": "    assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)\r\n    startPos = decode_scanWhitespace(s,startPos)\r\n    assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)\r\n    assert(string.sub(s,startPos,startPos)==':','JSON object key-value assignment mal-formed at ' .. startPos)\r\n    startPos = decode_scanWhitespace(s,startPos+1)\r\n    assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)\r\n    value, startPos = json.decode(s,startPos)\r\n",
                    "rendered": {
                      "text": "    assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)\r\n    startPos = decode_scanWhitespace(s,startPos)\r\n    assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)\r\n    assert(string.sub(s,startPos,startPos)==':','JSON object key-value assignment mal-formed at ' .. startPos)\r\n    startPos = decode_scanWhitespace(s,startPos+1)\r\n    assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)\r\n    value, startPos = json.decode(s,startPos)\r\n",
                      "markdown": "`    assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)\r\n    startPos = decode_scanWhitespace(s,startPos)\r\n    assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)\r\n    assert(string.sub(s,startPos,startPos)==':','JSON object key-value assignment mal-formed at ' .. startPos)\r\n    startPos = decode_scanWhitespace(s,startPos+1)\r\n    assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)\r\n    value, startPos = json.decode(s,startPos)\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 97,
                  "endLine": 255,
                  "endColumn": 101,
                  "snippet": {
                    "text": "  local object = {}\r\n  local stringLen = string.len(s)\r\n  local key, value\r\n  assert(string.sub(s,startPos,startPos)=='{','decode_scanObject called but object does not start at position ' .. startPos .. ' in string:\\n' .. s)\r\n  startPos = startPos + 1\r\n  repeat\r\n    startPos = decode_scanWhitespace(s,startPos)\r\n",
                    "rendered": {
                      "text": "  local object = {}\r\n  local stringLen = string.len(s)\r\n  local key, value\r\n  assert(string.sub(s,startPos,startPos)=='{','decode_scanObject called but object does not start at position ' .. startPos .. ' in string:\\n' .. s)\r\n  startPos = startPos + 1\r\n  repeat\r\n    startPos = decode_scanWhitespace(s,startPos)\r\n",
                      "markdown": "`  local object = {}\r\n  local stringLen = string.len(s)\r\n  local key, value\r\n  assert(string.sub(s,startPos,startPos)=='{','decode_scanObject called but object does not start at position ' .. startPos .. ' in string:\\n' .. s)\r\n  startPos = startPos + 1\r\n  repeat\r\n    startPos = decode_scanWhitespace(s,startPos)\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 18,
                  "endLine": 246,
                  "endColumn": 22,
                  "snippet": {
                    "text": "end\r\n\r\n--- Scans a JSON object into a Lua object.\r\n-- startPos begins at the start of the object.\r\n-- Returns the object and the next starting position.\r\n-- @param s The string being scanned.\r\n-- @param startPos The starting position of the scan.\r\n",
                    "rendered": {
                      "text": "end\r\n\r\n--- Scans a JSON object into a Lua object.\r\n-- startPos begins at the start of the object.\r\n-- Returns the object and the next starting position.\r\n-- @param s The string being scanned.\r\n-- @param startPos The starting position of the scan.\r\n",
                      "markdown": "`end\r\n\r\n--- Scans a JSON object into a Lua object.\r\n-- startPos begins at the start of the object.\r\n-- Returns the object and the next starting position.\r\n-- @param s The string being scanned.\r\n-- @param startPos The starting position of the scan.\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 83,
                  "endLine": 241,
                  "endColumn": 87,
                  "snippet": {
                    "text": "  end\r\n  local stringValue = 'return ' .. string.sub(s,startPos, endPos-1)\r\n  local stringEval = load(stringValue)\r\n  assert(stringEval, 'Failed to scan number [ ' .. stringValue .. '] in JSON string at position ' .. startPos .. ' : ' .. endPos)\r\n  return stringEval(), endPos\r\nend\r\n\r\n",
                    "rendered": {
                      "text": "  end\r\n  local stringValue = 'return ' .. string.sub(s,startPos, endPos-1)\r\n  local stringEval = load(stringValue)\r\n  assert(stringEval, 'Failed to scan number [ ' .. stringValue .. '] in JSON string at position ' .. startPos .. ' : ' .. endPos)\r\n  return stringEval(), endPos\r\nend\r\n\r\n",
                      "markdown": "`  end\r\n  local stringValue = 'return ' .. string.sub(s,startPos, endPos-1)\r\n  local stringEval = load(stringValue)\r\n  assert(stringEval, 'Failed to scan number [ ' .. stringValue .. '] in JSON string at position ' .. startPos .. ' : ' .. endPos)\r\n  return stringEval(), endPos\r\nend\r\n\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 31,
                  "endLine": 228,
                  "endColumn": 35,
                  "snippet": {
                    "text": "-- Returns the number, and the position of the next character\r\n-- after the number.\r\n-- @param s The string being scanned.\r\n-- @param startPos The position at which to start scanning.\r\n-- @return number, int The extracted number and the position of the next character to scan.\r\nfunction decode_scanNumber(s,startPos)\r\n  local endPos = startPos+1\r\n",
                    "rendered": {
                      "text": "-- Returns the number, and the position of the next character\r\n-- after the number.\r\n-- @param s The string being scanned.\r\n-- @param startPos The position at which to start scanning.\r\n-- @return number, int The extracted number and the position of the next character to scan.\r\nfunction decode_scanNumber(s,startPos)\r\n  local endPos = startPos+1\r\n",
                      "markdown": "`-- Returns the number, and the position of the next character\r\n-- after the number.\r\n-- @param s The string being scanned.\r\n-- @param startPos The position at which to start scanning.\r\n-- @return number, int The extracted number and the position of the next character to scan.\r\nfunction decode_scanNumber(s,startPos)\r\n  local endPos = startPos+1\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 62,
                  "endLine": 219,
                  "endColumn": 66,
                  "snippet": {
                    "text": "      return consts[k], startPos + string.len(k)\r\n    end\r\n  end\r\n  assert(nil, 'Failed to scan constant from string ' .. s .. ' at starting position ' .. startPos)\r\nend\r\n\r\n--- Scans a number from the JSON encoded string.\r\n",
                    "rendered": {
                      "text": "      return consts[k], startPos + string.len(k)\r\n    end\r\n  end\r\n  assert(nil, 'Failed to scan constant from string ' .. s .. ' at starting position ' .. startPos)\r\nend\r\n\r\n--- Scans a number from the JSON encoded string.\r\n",
                      "markdown": "`      return consts[k], startPos + string.len(k)\r\n    end\r\n  end\r\n  assert(nil, 'Failed to scan constant from string ' .. s .. ' at starting position ' .. startPos)\r\nend\r\n\r\n--- Scans a number from the JSON encoded string.\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 71,
                  "endLine": 208,
                  "endColumn": 75,
                  "snippet": {
                    "text": "-- Returns the appropriate Lua type, and the position of the next character to read.\r\n-- @param s The string being scanned.\r\n-- @param startPos The position in the string at which to start scanning.\r\n-- @return object, int The object (true, false or nil) and the position at which the next character should be \r\n-- scanned.\r\nfunction decode_scanConstant(s, startPos)\r\n  local consts = { [\"true\"] = true, [\"false\"] = false, [\"null\"] = nil }\r\n",
                    "rendered": {
                      "text": "-- Returns the appropriate Lua type, and the position of the next character to read.\r\n-- @param s The string being scanned.\r\n-- @param startPos The position in the string at which to start scanning.\r\n-- @return object, int The object (true, false or nil) and the position at which the next character should be \r\n-- scanned.\r\nfunction decode_scanConstant(s, startPos)\r\n  local consts = { [\"true\"] = true, [\"false\"] = false, [\"null\"] = nil }\r\n",
                      "markdown": "`-- Returns the appropriate Lua type, and the position of the next character to read.\r\n-- @param s The string being scanned.\r\n-- @param startPos The position in the string at which to start scanning.\r\n-- @return object, int The object (true, false or nil) and the position at which the next character should be \r\n-- scanned.\r\nfunction decode_scanConstant(s, startPos)\r\n  local consts = { [\"true\"] = true, [\"false\"] = false, [\"null\"] = nil }\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 45,
                  "endLine": 207,
                  "endColumn": 49,
                  "snippet": {
                    "text": "--- Scans for given constants: true, false or null\r\n-- Returns the appropriate Lua type, and the position of the next character to read.\r\n-- @param s The string being scanned.\r\n-- @param startPos The position in the string at which to start scanning.\r\n-- @return object, int The object (true, false or nil) and the position at which the next character should be \r\n-- scanned.\r\nfunction decode_scanConstant(s, startPos)\r\n",
                    "rendered": {
                      "text": "--- Scans for given constants: true, false or null\r\n-- Returns the appropriate Lua type, and the position of the next character to read.\r\n-- @param s The string being scanned.\r\n-- @param startPos The position in the string at which to start scanning.\r\n-- @return object, int The object (true, false or nil) and the position at which the next character should be \r\n-- scanned.\r\nfunction decode_scanConstant(s, startPos)\r\n",
                      "markdown": "`--- Scans for given constants: true, false or null\r\n-- Returns the appropriate Lua type, and the position of the next character to read.\r\n-- @param s The string being scanned.\r\n-- @param startPos The position in the string at which to start scanning.\r\n-- @return object, int The object (true, false or nil) and the position at which the next character should be \r\n-- scanned.\r\nfunction decode_scanConstant(s, startPos)\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 53,
                  "endLine": 200,
                  "endColumn": 57,
                  "snippet": {
                    "text": "function decode_scanComment(s, startPos)\r\n  assert( string.sub(s,startPos,startPos+1)=='/*', \"decode_scanComment called but comment does not start at position \" .. startPos)\r\n  local endPos = string.find(s,'*/',startPos+2)\r\n  assert(endPos~=nil, \"Unterminated comment in string at \" .. startPos)\r\n  return endPos+2  \r\nend\r\n\r\n",
                    "rendered": {
                      "text": "function decode_scanComment(s, startPos)\r\n  assert( string.sub(s,startPos,startPos+1)=='/*', \"decode_scanComment called but comment does not start at position \" .. startPos)\r\n  local endPos = string.find(s,'*/',startPos+2)\r\n  assert(endPos~=nil, \"Unterminated comment in string at \" .. startPos)\r\n  return endPos+2  \r\nend\r\n\r\n",
                      "markdown": "`function decode_scanComment(s, startPos)\r\n  assert( string.sub(s,startPos,startPos+1)=='/*', \"decode_scanComment called but comment does not start at position \" .. startPos)\r\n  local endPos = string.find(s,'*/',startPos+2)\r\n  assert(endPos~=nil, \"Unterminated comment in string at \" .. startPos)\r\n  return endPos+2  \r\nend\r\n\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 104,
                  "endLine": 198,
                  "endColumn": 108,
                  "snippet": {
                    "text": "-- @param string s The JSON string to scan.\r\n-- @param int startPos The starting position of the comment\r\nfunction decode_scanComment(s, startPos)\r\n  assert( string.sub(s,startPos,startPos+1)=='/*', \"decode_scanComment called but comment does not start at position \" .. startPos)\r\n  local endPos = string.find(s,'*/',startPos+2)\r\n  assert(endPos~=nil, \"Unterminated comment in string at \" .. startPos)\r\n  return endPos+2  \r\n",
                    "rendered": {
                      "text": "-- @param string s The JSON string to scan.\r\n-- @param int startPos The starting position of the comment\r\nfunction decode_scanComment(s, startPos)\r\n  assert( string.sub(s,startPos,startPos+1)=='/*', \"decode_scanComment called but comment does not start at position \" .. startPos)\r\n  local endPos = string.find(s,'*/',startPos+2)\r\n  assert(endPos~=nil, \"Unterminated comment in string at \" .. startPos)\r\n  return endPos+2  \r\n",
                      "markdown": "`-- @param string s The JSON string to scan.\r\n-- @param int startPos The starting position of the comment\r\nfunction decode_scanComment(s, startPos)\r\n  assert( string.sub(s,startPos,startPos+1)=='/*', \"decode_scanComment called but comment does not start at position \" .. startPos)\r\n  local endPos = string.find(s,'*/',startPos+2)\r\n  assert(endPos~=nil, \"Unterminated comment in string at \" .. startPos)\r\n  return endPos+2  \r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 95,
                  "endLine": 172,
                  "endColumn": 99,
                  "snippet": {
                    "text": "function decode_scanArray(s,startPos)\r\n  local array = {}\t-- The return value\r\n  local stringLen = string.len(s)\r\n  assert(string.sub(s,startPos,startPos)=='[','decode_scanArray called but array does not start at position ' .. startPos .. ' in string:\\n'..s )\r\n  startPos = startPos + 1\r\n  -- Infinite loop for array elements\r\n  local index = 1\r\n",
                    "rendered": {
                      "text": "function decode_scanArray(s,startPos)\r\n  local array = {}\t-- The return value\r\n  local stringLen = string.len(s)\r\n  assert(string.sub(s,startPos,startPos)=='[','decode_scanArray called but array does not start at position ' .. startPos .. ' in string:\\n'..s )\r\n  startPos = startPos + 1\r\n  -- Infinite loop for array elements\r\n  local index = 1\r\n",
                      "markdown": "`function decode_scanArray(s,startPos)\r\n  local array = {}\t-- The return value\r\n  local stringLen = string.len(s)\r\n  assert(string.sub(s,startPos,startPos)=='[','decode_scanArray called but array does not start at position ' .. startPos .. ' in string:\\n'..s )\r\n  startPos = startPos + 1\r\n  -- Infinite loop for array elements\r\n  local index = 1\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 18,
                  "endLine": 164,
                  "endColumn": 22,
                  "snippet": {
                    "text": "-----------------------------------------------------------------------------\r\n\r\n--- Scans an array from JSON into a Lua object\r\n-- startPos begins at the start of the array.\r\n-- Returns the array and the next starting position\r\n-- @param s The string being scanned.\r\n-- @param startPos The starting position for the scan.\r\n",
                    "rendered": {
                      "text": "-----------------------------------------------------------------------------\r\n\r\n--- Scans an array from JSON into a Lua object\r\n-- startPos begins at the start of the array.\r\n-- Returns the array and the next starting position\r\n-- @param s The string being scanned.\r\n-- @param startPos The starting position for the scan.\r\n",
                      "markdown": "`-----------------------------------------------------------------------------\r\n\r\n--- Scans an array from JSON into a Lua object\r\n-- startPos begins at the start of the array.\r\n-- Returns the array and the next starting position\r\n-- @param s The string being scanned.\r\n-- @param startPos The starting position for the scan.\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 73,
                  "endLine": 127,
                  "endColumn": 77,
                  "snippet": {
                    "text": "function json.decode(s, startPos)\r\n  startPos = startPos and startPos or 1\r\n  startPos = decode_scanWhitespace(s,startPos)\r\n  assert(startPos<=string.len(s), 'Unterminated JSON encoded object found at position in [' .. s .. ']')\r\n  local curChar = string.sub(s,startPos,startPos)\r\n  -- Object\r\n  if curChar=='{' then\r\n",
                    "rendered": {
                      "text": "function json.decode(s, startPos)\r\n  startPos = startPos and startPos or 1\r\n  startPos = decode_scanWhitespace(s,startPos)\r\n  assert(startPos<=string.len(s), 'Unterminated JSON encoded object found at position in [' .. s .. ']')\r\n  local curChar = string.sub(s,startPos,startPos)\r\n  -- Object\r\n  if curChar=='{' then\r\n",
                      "markdown": "`function json.decode(s, startPos)\r\n  startPos = startPos and startPos or 1\r\n  startPos = decode_scanWhitespace(s,startPos)\r\n  assert(startPos<=string.len(s), 'Unterminated JSON encoded object found at position in [' .. s .. ']')\r\n  local curChar = string.sub(s,startPos,startPos)\r\n  -- Object\r\n  if curChar=='{' then\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 32,
                  "endLine": 418,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  return true, maxIndex\r\nend\r\n\r\n--- Determines whether the given Lua object / table / variable can be JSON encoded. The only\r\n-- types that are JSON encodable are: string, boolean, number, nil, table and json.null.\r\n-- In this implementation, all other types are ignored.\r\n-- @param o The object to examine.\r\n",
                    "rendered": {
                      "text": "  return true, maxIndex\r\nend\r\n\r\n--- Determines whether the given Lua object / table / variable can be JSON encoded. The only\r\n-- types that are JSON encodable are: string, boolean, number, nil, table and json.null.\r\n-- In this implementation, all other types are ignored.\r\n-- @param o The object to examine.\r\n",
                      "markdown": "`  return true, maxIndex\r\nend\r\n\r\n--- Determines whether the given Lua object / table / variable can be JSON encoded. The only\r\n-- types that are JSON encodable are: string, boolean, number, nil, table and json.null.\r\n-- In this implementation, all other types are ignored.\r\n-- @param o The object to examine.\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 31,
                  "endLine": 388,
                  "endColumn": 36,
                  "snippet": {
                    "text": " return s:gsub(\".\", function(c) return escapeList[c] end) -- SoniEx2: 5.0 compat\r\nend\r\n\r\n-- Determines whether the given Lua type is an array or a table / dictionary.\r\n-- We consider any table an array if it has indexes 1..n for its n items, and no\r\n-- other data in the table.\r\n-- I think this method is currently a little 'flaky', but can't think of a good way around it yet...\r\n",
                    "rendered": {
                      "text": " return s:gsub(\".\", function(c) return escapeList[c] end) -- SoniEx2: 5.0 compat\r\nend\r\n\r\n-- Determines whether the given Lua type is an array or a table / dictionary.\r\n-- We consider any table an array if it has indexes 1..n for its n items, and no\r\n-- other data in the table.\r\n-- I think this method is currently a little 'flaky', but can't think of a good way around it yet...\r\n",
                      "markdown": "` return s:gsub(\".\", function(c) return escapeList[c] end) -- SoniEx2: 5.0 compat\r\nend\r\n\r\n-- Determines whether the given Lua type is an array or a table / dictionary.\r\n-- We consider any table an array if it has indexes 1..n for its n items, and no\r\n-- other data in the table.\r\n-- I think this method is currently a little 'flaky', but can't think of a good way around it yet...\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 48,
                  "endLine": 304,
                  "endColumn": 53,
                  "snippet": {
                    "text": "-- (after the closing inverted comma or single quote).\r\n-- @param s The string being scanned.\r\n-- @param startPos The starting position of the scan.\r\n-- @return string, int The extracted string as a Lua string, and the next character to parse.\r\nfunction decode_scanString(s,startPos)\r\n  assert(startPos, 'decode_scanString(..) called without start position')\r\n  local startChar = string.sub(s,startPos,startPos)\r\n",
                    "rendered": {
                      "text": "-- (after the closing inverted comma or single quote).\r\n-- @param s The string being scanned.\r\n-- @param startPos The starting position of the scan.\r\n-- @return string, int The extracted string as a Lua string, and the next character to parse.\r\nfunction decode_scanString(s,startPos)\r\n  assert(startPos, 'decode_scanString(..) called without start position')\r\n  local startChar = string.sub(s,startPos,startPos)\r\n",
                      "markdown": "`-- (after the closing inverted comma or single quote).\r\n-- @param s The string being scanned.\r\n-- @param startPos The starting position of the scan.\r\n-- @return string, int The extracted string as a Lua string, and the next character to parse.\r\nfunction decode_scanString(s,startPos)\r\n  assert(startPos, 'decode_scanString(..) called without start position')\r\n  local startChar = string.sub(s,startPos,startPos)\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 36,
                  "endLine": 299,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\r\n--- Scans a JSON string from the opening inverted comma or single quote to the\r\n-- end of the string.\r\n-- Returns the string extracted as a Lua string,\r\n-- and the position of the next non-string character\r\n-- (after the closing inverted comma or single quote).\r\n-- @param s The string being scanned.\r\n",
                    "rendered": {
                      "text": "\r\n--- Scans a JSON string from the opening inverted comma or single quote to the\r\n-- end of the string.\r\n-- Returns the string extracted as a Lua string,\r\n-- and the position of the next non-string character\r\n-- (after the closing inverted comma or single quote).\r\n-- @param s The string being scanned.\r\n",
                      "markdown": "`\r\n--- Scans a JSON string from the opening inverted comma or single quote to the\r\n-- end of the string.\r\n-- Returns the string extracted as a Lua string,\r\n-- and the position of the next non-string character\r\n-- (after the closing inverted comma or single quote).\r\n-- @param s The string being scanned.\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 30,
                  "endLine": 245,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  return stringEval(), endPos\r\nend\r\n\r\n--- Scans a JSON object into a Lua object.\r\n-- startPos begins at the start of the object.\r\n-- Returns the object and the next starting position.\r\n-- @param s The string being scanned.\r\n",
                    "rendered": {
                      "text": "  return stringEval(), endPos\r\nend\r\n\r\n--- Scans a JSON object into a Lua object.\r\n-- startPos begins at the start of the object.\r\n-- Returns the object and the next starting position.\r\n-- @param s The string being scanned.\r\n",
                      "markdown": "`  return stringEval(), endPos\r\nend\r\n\r\n--- Scans a JSON object into a Lua object.\r\n-- startPos begins at the start of the object.\r\n-- Returns the object and the next starting position.\r\n-- @param s The string being scanned.\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 26,
                  "endLine": 205,
                  "endColumn": 31,
                  "snippet": {
                    "text": "end\r\n\r\n--- Scans for given constants: true, false or null\r\n-- Returns the appropriate Lua type, and the position of the next character to read.\r\n-- @param s The string being scanned.\r\n-- @param startPos The position in the string at which to start scanning.\r\n-- @return object, int The object (true, false or nil) and the position at which the next character should be \r\n",
                    "rendered": {
                      "text": "end\r\n\r\n--- Scans for given constants: true, false or null\r\n-- Returns the appropriate Lua type, and the position of the next character to read.\r\n-- @param s The string being scanned.\r\n-- @param startPos The position in the string at which to start scanning.\r\n-- @return object, int The object (true, false or nil) and the position at which the next character should be \r\n",
                      "markdown": "`end\r\n\r\n--- Scans for given constants: true, false or null\r\n-- Returns the appropriate Lua type, and the position of the next character to read.\r\n-- @param s The string being scanned.\r\n-- @param startPos The position in the string at which to start scanning.\r\n-- @return object, int The object (true, false or nil) and the position at which the next character should be \r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 35,
                  "endLine": 163,
                  "endColumn": 40,
                  "snippet": {
                    "text": "-- functions with an underscore.\r\n-----------------------------------------------------------------------------\r\n\r\n--- Scans an array from JSON into a Lua object\r\n-- startPos begins at the start of the array.\r\n-- Returns the array and the next starting position\r\n-- @param s The string being scanned.\r\n",
                    "rendered": {
                      "text": "-- functions with an underscore.\r\n-----------------------------------------------------------------------------\r\n\r\n--- Scans an array from JSON into a Lua object\r\n-- startPos begins at the start of the array.\r\n-- Returns the array and the next starting position\r\n-- @param s The string being scanned.\r\n",
                      "markdown": "`-- functions with an underscore.\r\n-----------------------------------------------------------------------------\r\n\r\n--- Scans an array from JSON into a Lua object\r\n-- startPos begins at the start of the array.\r\n-- Returns the array and the next starting position\r\n-- @param s The string being scanned.\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 62,
                  "endLine": 121,
                  "endColumn": 67,
                  "snippet": {
                    "text": "--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.\r\n-- @param s The string to scan.\r\n-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.\r\n-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,\r\n-- and the position of the first character after\r\n-- the scanned JSON object.\r\nfunction json.decode(s, startPos)\r\n",
                    "rendered": {
                      "text": "--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.\r\n-- @param s The string to scan.\r\n-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.\r\n-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,\r\n-- and the position of the first character after\r\n-- the scanned JSON object.\r\nfunction json.decode(s, startPos)\r\n",
                      "markdown": "`--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.\r\n-- @param s The string to scan.\r\n-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.\r\n-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,\r\n-- and the position of the first character after\r\n-- the scanned JSON object.\r\nfunction json.decode(s, startPos)\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 9,
                  "endLine": 121,
                  "endColumn": 14,
                  "snippet": {
                    "text": "--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.\r\n-- @param s The string to scan.\r\n-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.\r\n-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,\r\n-- and the position of the first character after\r\n-- the scanned JSON object.\r\nfunction json.decode(s, startPos)\r\n",
                    "rendered": {
                      "text": "--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.\r\n-- @param s The string to scan.\r\n-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.\r\n-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,\r\n-- and the position of the first character after\r\n-- the scanned JSON object.\r\nfunction json.decode(s, startPos)\r\n",
                      "markdown": "`--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.\r\n-- @param s The string to scan.\r\n-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.\r\n-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,\r\n-- and the position of the first character after\r\n-- the scanned JSON object.\r\nfunction json.decode(s, startPos)\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 60,
                  "endLine": 118,
                  "endColumn": 65,
                  "snippet": {
                    "text": "end\r\n\r\n\r\n--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.\r\n-- @param s The string to scan.\r\n-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.\r\n-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,\r\n",
                    "rendered": {
                      "text": "end\r\n\r\n\r\n--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.\r\n-- @param s The string to scan.\r\n-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.\r\n-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,\r\n",
                      "markdown": "`end\r\n\r\n\r\n--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.\r\n-- @param s The string to scan.\r\n-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.\r\n-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 58,
                  "endLine": 67,
                  "endColumn": 63,
                  "snippet": {
                    "text": "-----------------------------------------------------------------------------\r\n--- Encodes an arbitrary Lua object / variable.\r\n-- @param v The Lua object / variable to be JSON encoded.\r\n-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)\r\nfunction json.encode (v)\r\n  -- Handle nil values\r\n  if v==nil then\r\n",
                    "rendered": {
                      "text": "-----------------------------------------------------------------------------\r\n--- Encodes an arbitrary Lua object / variable.\r\n-- @param v The Lua object / variable to be JSON encoded.\r\n-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)\r\nfunction json.encode (v)\r\n  -- Handle nil values\r\n  if v==nil then\r\n",
                      "markdown": "`-----------------------------------------------------------------------------\r\n--- Encodes an arbitrary Lua object / variable.\r\n-- @param v The Lua object / variable to be JSON encoded.\r\n-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)\r\nfunction json.encode (v)\r\n  -- Handle nil values\r\n  if v==nil then\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 15,
                  "endLine": 66,
                  "endColumn": 20,
                  "snippet": {
                    "text": "-- PUBLIC FUNCTIONS\r\n-----------------------------------------------------------------------------\r\n--- Encodes an arbitrary Lua object / variable.\r\n-- @param v The Lua object / variable to be JSON encoded.\r\n-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)\r\nfunction json.encode (v)\r\n  -- Handle nil values\r\n",
                    "rendered": {
                      "text": "-- PUBLIC FUNCTIONS\r\n-----------------------------------------------------------------------------\r\n--- Encodes an arbitrary Lua object / variable.\r\n-- @param v The Lua object / variable to be JSON encoded.\r\n-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)\r\nfunction json.encode (v)\r\n  -- Handle nil values\r\n",
                      "markdown": "`-- PUBLIC FUNCTIONS\r\n-----------------------------------------------------------------------------\r\n--- Encodes an arbitrary Lua object / variable.\r\n-- @param v The Lua object / variable to be JSON encoded.\r\n-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)\r\nfunction json.encode (v)\r\n  -- Handle nil values\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 24,
                  "endLine": 65,
                  "endColumn": 29,
                  "snippet": {
                    "text": "-----------------------------------------------------------------------------\r\n-- PUBLIC FUNCTIONS\r\n-----------------------------------------------------------------------------\r\n--- Encodes an arbitrary Lua object / variable.\r\n-- @param v The Lua object / variable to be JSON encoded.\r\n-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)\r\nfunction json.encode (v)\r\n",
                    "rendered": {
                      "text": "-----------------------------------------------------------------------------\r\n-- PUBLIC FUNCTIONS\r\n-----------------------------------------------------------------------------\r\n--- Encodes an arbitrary Lua object / variable.\r\n-- @param v The Lua object / variable to be JSON encoded.\r\n-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)\r\nfunction json.encode (v)\r\n",
                      "markdown": "`-----------------------------------------------------------------------------\r\n-- PUBLIC FUNCTIONS\r\n-----------------------------------------------------------------------------\r\n--- Encodes an arbitrary Lua object / variable.\r\n-- @param v The Lua object / variable to be JSON encoded.\r\n-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)\r\nfunction json.encode (v)\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 17,
                  "endLine": 24,
                  "endColumn": 22,
                  "snippet": {
                    "text": "--    1.0.1 Introduced set_plugin_info call to register plugin details for Wireshark. Per\r\n--          suggestion by T. Lerman.\r\n--   0.9.20 Introduction of local Lua functions for private functions (removed _ function prefix). \r\n--          Fixed Lua 5.1 compatibility issues.\r\n--   \t\tIntroduced json.null to have null values in associative arrays.\r\n--          json.encode() performance improvement (more than 50%) through table.concat rather than ..\r\n--          Introduced decode ability to ignore /**/ comments in the JSON string.\r\n",
                    "rendered": {
                      "text": "--    1.0.1 Introduced set_plugin_info call to register plugin details for Wireshark. Per\r\n--          suggestion by T. Lerman.\r\n--   0.9.20 Introduction of local Lua functions for private functions (removed _ function prefix). \r\n--          Fixed Lua 5.1 compatibility issues.\r\n--   \t\tIntroduced json.null to have null values in associative arrays.\r\n--          json.encode() performance improvement (more than 50%) through table.concat rather than ..\r\n--          Introduced decode ability to ignore /**/ comments in the JSON string.\r\n",
                      "markdown": "`--    1.0.1 Introduced set_plugin_info call to register plugin details for Wireshark. Per\r\n--          suggestion by T. Lerman.\r\n--   0.9.20 Introduction of local Lua functions for private functions (removed _ function prefix). \r\n--          Fixed Lua 5.1 compatibility issues.\r\n--   \t\tIntroduced json.null to have null values in associative arrays.\r\n--          json.encode() performance improvement (more than 50%) through table.concat rather than ..\r\n--          Introduced decode ability to ignore /**/ comments in the JSON string.\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 33,
                  "endLine": 23,
                  "endColumn": 38,
                  "snippet": {
                    "text": "-- CHANGELOG\r\n--    1.0.1 Introduced set_plugin_info call to register plugin details for Wireshark. Per\r\n--          suggestion by T. Lerman.\r\n--   0.9.20 Introduction of local Lua functions for private functions (removed _ function prefix). \r\n--          Fixed Lua 5.1 compatibility issues.\r\n--   \t\tIntroduced json.null to have null values in associative arrays.\r\n--          json.encode() performance improvement (more than 50%) through table.concat rather than ..\r\n",
                    "rendered": {
                      "text": "-- CHANGELOG\r\n--    1.0.1 Introduced set_plugin_info call to register plugin details for Wireshark. Per\r\n--          suggestion by T. Lerman.\r\n--   0.9.20 Introduction of local Lua functions for private functions (removed _ function prefix). \r\n--          Fixed Lua 5.1 compatibility issues.\r\n--   \t\tIntroduced json.null to have null values in associative arrays.\r\n--          json.encode() performance improvement (more than 50%) through table.concat rather than ..\r\n",
                      "markdown": "`-- CHANGELOG\r\n--    1.0.1 Introduced set_plugin_info call to register plugin details for Wireshark. Per\r\n--          suggestion by T. Lerman.\r\n--   0.9.20 Introduction of local Lua functions for private functions (removed _ function prefix). \r\n--          Fixed Lua 5.1 compatibility issues.\r\n--   \t\tIntroduced json.null to have null values in associative arrays.\r\n--          json.encode() performance improvement (more than 50%) through table.concat rather than ..\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 24,
                  "endLine": 18,
                  "endColumn": 29,
                  "snippet": {
                    "text": "--     Returns a Lua object populated with the data encoded in the JSON string json_string.\r\n--\r\n-- REQUIREMENTS:\r\n--   compat-5.1 if using Lua 5.0\r\n--\r\n-- CHANGELOG\r\n--    1.0.1 Introduced set_plugin_info call to register plugin details for Wireshark. Per\r\n",
                    "rendered": {
                      "text": "--     Returns a Lua object populated with the data encoded in the JSON string json_string.\r\n--\r\n-- REQUIREMENTS:\r\n--   compat-5.1 if using Lua 5.0\r\n--\r\n-- CHANGELOG\r\n--    1.0.1 Introduced set_plugin_info call to register plugin details for Wireshark. Per\r\n",
                      "markdown": "`--     Returns a Lua object populated with the data encoded in the JSON string json_string.\r\n--\r\n-- REQUIREMENTS:\r\n--   compat-5.1 if using Lua 5.0\r\n--\r\n-- CHANGELOG\r\n--    1.0.1 Introduced set_plugin_info call to register plugin details for Wireshark. Per\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 16,
                  "endLine": 15,
                  "endColumn": 21,
                  "snippet": {
                    "text": "--   json.encode(o)\r\n--     Returns the table / string / boolean / number / nil / json.null value as a JSON-encoded string.\r\n--   json.decode(json_string)\r\n--     Returns a Lua object populated with the data encoded in the JSON string json_string.\r\n--\r\n-- REQUIREMENTS:\r\n--   compat-5.1 if using Lua 5.0\r\n",
                    "rendered": {
                      "text": "--   json.encode(o)\r\n--     Returns the table / string / boolean / number / nil / json.null value as a JSON-encoded string.\r\n--   json.decode(json_string)\r\n--     Returns a Lua object populated with the data encoded in the JSON string json_string.\r\n--\r\n-- REQUIREMENTS:\r\n--   compat-5.1 if using Lua 5.0\r\n",
                      "markdown": "`--   json.encode(o)\r\n--     Returns the table / string / boolean / number / nil / json.null value as a JSON-encoded string.\r\n--   json.decode(json_string)\r\n--     Returns a Lua object populated with the data encoded in the JSON string json_string.\r\n--\r\n-- REQUIREMENTS:\r\n--   compat-5.1 if using Lua 5.0\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/usr/share/lua/common/json.lua"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 53,
                  "endLine": 2,
                  "endColumn": 58,
                  "snippet": {
                    "text": "-----------------------------------------------------------------------------\r\n-- JSON4Lua: JSON encoding / decoding support for the Lua language.\r\n-- json Module.\r\n-- Author: Craig Mason-Jones\r\n-- Homepage: http://github.com/craigmj/json4lua/\r\n",
                    "rendered": {
                      "text": "-----------------------------------------------------------------------------\r\n-- JSON4Lua: JSON encoding / decoding support for the Lua language.\r\n-- json Module.\r\n-- Author: Craig Mason-Jones\r\n-- Homepage: http://github.com/craigmj/json4lua/\r\n",
                      "markdown": "`-----------------------------------------------------------------------------\r\n-- JSON4Lua: JSON encoding / decoding support for the Lua language.\r\n-- json Module.\r\n-- Author: Craig Mason-Jones\r\n-- Homepage: http://github.com/craigmj/json4lua/\r\n`"
                    }
                  },
                  "sourceLanguage": "lua"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/lua-json4-1.0.1-r0.apk/lua-json4-1.0.1-r0/.PKGINFO"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 25,
                  "endLine": 8,
                  "snippet": {
                    "text": "arch = x86_64\nsize = 76794\norigin = lua-json4\npkgdesc = JSON module for Lua\nurl = \ncommit = 65ca885485187b479f8d07610e794e29fb57a397\nbuilddate = 1727859713\nlicense = MIT\n",
                    "rendered": {
                      "text": "arch = x86_64\nsize = 76794\norigin = lua-json4\npkgdesc = JSON module for Lua\nurl = \ncommit = 65ca885485187b479f8d07610e794e29fb57a397\nbuilddate = 1727859713\nlicense = MIT\n",
                      "markdown": "`arch = x86_64\nsize = 76794\norigin = lua-json4\npkgdesc = JSON module for Lua\nurl = \ncommit = 65ca885485187b479f8d07610e794e29fb57a397\nbuilddate = 1727859713\nlicense = MIT\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}