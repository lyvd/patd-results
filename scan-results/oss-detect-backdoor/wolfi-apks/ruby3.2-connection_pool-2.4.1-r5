{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/lib/connection_pool/timed_stack.rb"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 29,
                  "endLine": 68,
                  "snippet": {
                    "text": "    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n    @mutex.synchronize do\n      loop do\n        raise ConnectionPool::PoolShuttingDownError if @shutdown_block\n        return fetch_connection(options) if connection_stored?(options)\n",
                    "rendered": {
                      "text": "    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n    @mutex.synchronize do\n      loop do\n        raise ConnectionPool::PoolShuttingDownError if @shutdown_block\n        return fetch_connection(options) if connection_stored?(options)\n",
                      "markdown": "`    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n    @mutex.synchronize do\n      loop do\n        raise ConnectionPool::PoolShuttingDownError if @shutdown_block\n        return fetch_connection(options) if connection_stored?(options)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/lib/connection_pool/timed_stack.rb"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 37,
                  "endLine": 66,
                  "snippet": {
                    "text": "\n  def pop(timeout = 0.5, options = {})\n    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n    @mutex.synchronize do\n      loop do\n",
                    "rendered": {
                      "text": "\n  def pop(timeout = 0.5, options = {})\n    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n    @mutex.synchronize do\n      loop do\n",
                      "markdown": "`\n  def pop(timeout = 0.5, options = {})\n    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n    @mutex.synchronize do\n      loop do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/lib/connection_pool/timed_stack.rb"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "endLine": 65,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n  def pop(timeout = 0.5, options = {})\n    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n    @mutex.synchronize do\n",
                    "rendered": {
                      "text": "\n  def pop(timeout = 0.5, options = {})\n    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n    @mutex.synchronize do\n",
                      "markdown": "`\n  def pop(timeout = 0.5, options = {})\n    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n    @mutex.synchronize do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/lib/connection_pool/timed_stack.rb"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 47,
                  "endLine": 65,
                  "snippet": {
                    "text": "  # options may be used by subclasses that extend TimedStack.\n\n  def pop(timeout = 0.5, options = {})\n    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n    @mutex.synchronize do\n",
                    "rendered": {
                      "text": "  # options may be used by subclasses that extend TimedStack.\n\n  def pop(timeout = 0.5, options = {})\n    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n    @mutex.synchronize do\n",
                      "markdown": "`  # options may be used by subclasses that extend TimedStack.\n\n  def pop(timeout = 0.5, options = {})\n    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n    @mutex.synchronize do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/lib/connection_pool/timed_stack.rb"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 12,
                  "endLine": 64,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  # options may be used by subclasses that extend TimedStack.\n\n  def pop(timeout = 0.5, options = {})\n    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n",
                    "rendered": {
                      "text": "  # options may be used by subclasses that extend TimedStack.\n\n  def pop(timeout = 0.5, options = {})\n    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n",
                      "markdown": "`  # options may be used by subclasses that extend TimedStack.\n\n  def pop(timeout = 0.5, options = {})\n    options, timeout = timeout, 0.5 if Hash === timeout\n    timeout = options.fetch :timeout, timeout\n\n    deadline = current_time + timeout\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/specifications/connection_pool-2.4.1.gemspec"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 29,
                  "endLine": 2,
                  "endColumn": 35,
                  "snippet": {
                    "text": "# -*- encoding: utf-8 -*-\n# stub: connection_pool 2.4.1 ruby lib\n\nGem::Specification.new do |s|\n  s.name = \"connection_pool\".freeze\n",
                    "rendered": {
                      "text": "# -*- encoding: utf-8 -*-\n# stub: connection_pool 2.4.1 ruby lib\n\nGem::Specification.new do |s|\n  s.name = \"connection_pool\".freeze\n",
                      "markdown": "`# -*- encoding: utf-8 -*-\n# stub: connection_pool 2.4.1 ruby lib\n\nGem::Specification.new do |s|\n  s.name = \"connection_pool\".freeze\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 21,
                  "endLine": 99,
                  "endColumn": 26,
                  "snippet": {
                    "text": "```ruby\ncp = ConnectionPool.new { Redis.new }\ncp.reload { |conn| conn.quit }\ncp.with { |conn| conn.get('some-count') }\n```\n\nLike `shutdown`, this will block until all connections are checked in and closed.\n",
                    "rendered": {
                      "text": "```ruby\ncp = ConnectionPool.new { Redis.new }\ncp.reload { |conn| conn.quit }\ncp.with { |conn| conn.get('some-count') }\n```\n\nLike `shutdown`, this will block until all connections are checked in and closed.\n",
                      "markdown": "````ruby\ncp = ConnectionPool.new { Redis.new }\ncp.reload { |conn| conn.quit }\ncp.with { |conn| conn.get('some-count') }\n```\n\nLike `shutdown`, this will block until all connections are checked in and closed.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 6,
                  "endLine": 45,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n``` ruby\n$memcached.with(timeout: 2.0) do |conn|\n  conn.get('some-count')\nend\n```\n\n",
                    "rendered": {
                      "text": "\n``` ruby\n$memcached.with(timeout: 2.0) do |conn|\n  conn.get('some-count')\nend\n```\n\n",
                      "markdown": "`\n``` ruby\n$memcached.with(timeout: 2.0) do |conn|\n  conn.get('some-count')\nend\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 6,
                  "endLine": 24,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n``` ruby\n$memcached.with do |conn|\n  conn.get('some-count')\nend\n```\n\n",
                    "rendered": {
                      "text": "\n``` ruby\n$memcached.with do |conn|\n  conn.get('some-count')\nend\n```\n\n",
                      "markdown": "`\n``` ruby\n$memcached.with do |conn|\n  conn.get('some-count')\nend\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 55,
                  "endLine": 128,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  clients.\n- **WARNING**: Don't ever use `Timeout.timeout` in your Ruby code or you will see\n  occasional silent corruption and mysterious errors. The Timeout API is unsafe\n  and cannot be used correctly, ever. Use proper socket timeout options as\n  exposed by Net::HTTP, Redis, Dalli, etc.\n\n\n",
                    "rendered": {
                      "text": "  clients.\n- **WARNING**: Don't ever use `Timeout.timeout` in your Ruby code or you will see\n  occasional silent corruption and mysterious errors. The Timeout API is unsafe\n  and cannot be used correctly, ever. Use proper socket timeout options as\n  exposed by Net::HTTP, Redis, Dalli, etc.\n\n\n",
                      "markdown": "`  clients.\n- **WARNING**: Don't ever use `Timeout.timeout` in your Ruby code or you will see\n  occasional silent corruption and mysterious errors. The Timeout API is unsafe\n  and cannot be used correctly, ever. Use proper socket timeout options as\n  exposed by Net::HTTP, Redis, Dalli, etc.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 57,
                  "endLine": 127,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  connections should be self-repairing. This is true of the Dalli and Redis\n  clients.\n- **WARNING**: Don't ever use `Timeout.timeout` in your Ruby code or you will see\n  occasional silent corruption and mysterious errors. The Timeout API is unsafe\n  and cannot be used correctly, ever. Use proper socket timeout options as\n  exposed by Net::HTTP, Redis, Dalli, etc.\n\n",
                    "rendered": {
                      "text": "  connections should be self-repairing. This is true of the Dalli and Redis\n  clients.\n- **WARNING**: Don't ever use `Timeout.timeout` in your Ruby code or you will see\n  occasional silent corruption and mysterious errors. The Timeout API is unsafe\n  and cannot be used correctly, ever. Use proper socket timeout options as\n  exposed by Net::HTTP, Redis, Dalli, etc.\n\n",
                      "markdown": "`  connections should be self-repairing. This is true of the Dalli and Redis\n  clients.\n- **WARNING**: Don't ever use `Timeout.timeout` in your Ruby code or you will see\n  occasional silent corruption and mysterious errors. The Timeout API is unsafe\n  and cannot be used correctly, ever. Use proper socket timeout options as\n  exposed by Net::HTTP, Redis, Dalli, etc.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 55,
                  "endLine": 126,
                  "endColumn": 61,
                  "snippet": {
                    "text": "- There is no provision for repairing or checking the health of a connection;\n  connections should be self-repairing. This is true of the Dalli and Redis\n  clients.\n- **WARNING**: Don't ever use `Timeout.timeout` in your Ruby code or you will see\n  occasional silent corruption and mysterious errors. The Timeout API is unsafe\n  and cannot be used correctly, ever. Use proper socket timeout options as\n  exposed by Net::HTTP, Redis, Dalli, etc.\n",
                    "rendered": {
                      "text": "- There is no provision for repairing or checking the health of a connection;\n  connections should be self-repairing. This is true of the Dalli and Redis\n  clients.\n- **WARNING**: Don't ever use `Timeout.timeout` in your Ruby code or you will see\n  occasional silent corruption and mysterious errors. The Timeout API is unsafe\n  and cannot be used correctly, ever. Use proper socket timeout options as\n  exposed by Net::HTTP, Redis, Dalli, etc.\n",
                      "markdown": "`- There is no provision for repairing or checking the health of a connection;\n  connections should be self-repairing. This is true of the Dalli and Redis\n  clients.\n- **WARNING**: Don't ever use `Timeout.timeout` in your Ruby code or you will see\n  occasional silent corruption and mysterious errors. The Timeout API is unsafe\n  and cannot be used correctly, ever. Use proper socket timeout options as\n  exposed by Net::HTTP, Redis, Dalli, etc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 7,
                  "endLine": 109,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\nThere are several methods that return information about a pool.\n\n```ruby\ncp = ConnectionPool.new(size: 10) { Redis.new }\ncp.size # => 10\ncp.available # => 10\n\n",
                    "rendered": {
                      "text": "\nThere are several methods that return information about a pool.\n\n```ruby\ncp = ConnectionPool.new(size: 10) { Redis.new }\ncp.size # => 10\ncp.available # => 10\n\n",
                      "markdown": "`\nThere are several methods that return information about a pool.\n\n```ruby\ncp = ConnectionPool.new(size: 10) { Redis.new }\ncp.size # => 10\ncp.available # => 10\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 7,
                  "endLine": 97,
                  "endColumn": 3,
                  "snippet": {
                    "text": "You can reload a ConnectionPool instance in the case it is desired to close all connections to the pool and, unlike `shutdown`, afterwards recreate connections so the pool may continue to be used.\nReloading may be useful after forking the process.\n\n```ruby\ncp = ConnectionPool.new { Redis.new }\ncp.reload { |conn| conn.quit }\ncp.with { |conn| conn.get('some-count') }\n```\n",
                    "rendered": {
                      "text": "You can reload a ConnectionPool instance in the case it is desired to close all connections to the pool and, unlike `shutdown`, afterwards recreate connections so the pool may continue to be used.\nReloading may be useful after forking the process.\n\n```ruby\ncp = ConnectionPool.new { Redis.new }\ncp.reload { |conn| conn.quit }\ncp.with { |conn| conn.get('some-count') }\n```\n",
                      "markdown": "`You can reload a ConnectionPool instance in the case it is desired to close all connections to the pool and, unlike `shutdown`, afterwards recreate connections so the pool may continue to be used.\nReloading may be useful after forking the process.\n\n```ruby\ncp = ConnectionPool.new { Redis.new }\ncp.reload { |conn| conn.quit }\ncp.with { |conn| conn.get('some-count') }\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 7,
                  "endLine": 84,
                  "endColumn": 3,
                  "snippet": {
                    "text": "You can shut down a ConnectionPool instance once it should no longer be used.\nFurther checkout attempts will immediately raise an error but existing checkouts will work.\n\n```ruby\ncp = ConnectionPool.new { Redis.new }\ncp.shutdown { |c| c.close }\n```\n\n",
                    "rendered": {
                      "text": "You can shut down a ConnectionPool instance once it should no longer be used.\nFurther checkout attempts will immediately raise an error but existing checkouts will work.\n\n```ruby\ncp = ConnectionPool.new { Redis.new }\ncp.shutdown { |c| c.close }\n```\n\n",
                      "markdown": "`You can shut down a ConnectionPool instance once it should no longer be used.\nFurther checkout attempts will immediately raise an error but existing checkouts will work.\n\n```ruby\ncp = ConnectionPool.new { Redis.new }\ncp.shutdown { |c| c.close }\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 3,
                  "endLine": 69,
                  "snippet": {
                    "text": "The wrapper uses `method_missing` to checkout a connection, run the requested method and then immediately check the connection back into the pool.\nIt's **not** high-performance so you'll want to port your performance sensitive code to use `with` as soon as possible.\n\n``` ruby\n$redis.with do |conn|\n  conn.sadd('foo', 1)\n  conn.smembers('foo')\nend\n",
                    "rendered": {
                      "text": "The wrapper uses `method_missing` to checkout a connection, run the requested method and then immediately check the connection back into the pool.\nIt's **not** high-performance so you'll want to port your performance sensitive code to use `with` as soon as possible.\n\n``` ruby\n$redis.with do |conn|\n  conn.sadd('foo', 1)\n  conn.smembers('foo')\nend\n",
                      "markdown": "`The wrapper uses `method_missing` to checkout a connection, run the requested method and then immediately check the connection back into the pool.\nIt's **not** high-performance so you'll want to port your performance sensitive code to use `with` as soon as possible.\n\n``` ruby\n$redis.with do |conn|\n  conn.sadd('foo', 1)\n  conn.smembers('foo')\nend\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 3,
                  "endLine": 60,
                  "snippet": {
                    "text": "\nYou can use `ConnectionPool::Wrapper` to wrap a single global connection, making it easier to migrate existing connection code over time:\n\n``` ruby\n$redis = ConnectionPool::Wrapper.new(size: 5, timeout: 3) { Redis.new }\n$redis.sadd('foo', 1)\n$redis.smembers('foo')\n```\n",
                    "rendered": {
                      "text": "\nYou can use `ConnectionPool::Wrapper` to wrap a single global connection, making it easier to migrate existing connection code over time:\n\n``` ruby\n$redis = ConnectionPool::Wrapper.new(size: 5, timeout: 3) { Redis.new }\n$redis.sadd('foo', 1)\n$redis.smembers('foo')\n```\n",
                      "markdown": "`\nYou can use `ConnectionPool::Wrapper` to wrap a single global connection, making it easier to migrate existing connection code over time:\n\n``` ruby\n$redis = ConnectionPool::Wrapper.new(size: 5, timeout: 3) { Redis.new }\n$redis.sadd('foo', 1)\n$redis.smembers('foo')\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 38,
                  "endLine": 49,
                  "endColumn": 47,
                  "snippet": {
                    "text": "end\n```\n\nThis will only modify the resource-get timeout for this particular\ninvocation.\nThis is useful if you want to fail-fast on certain non-critical\nsections when a resource is not available, or conversely if you are comfortable blocking longer on a particular resource.\n",
                    "rendered": {
                      "text": "end\n```\n\nThis will only modify the resource-get timeout for this particular\ninvocation.\nThis is useful if you want to fail-fast on certain non-critical\nsections when a resource is not available, or conversely if you are comfortable blocking longer on a particular resource.\n",
                      "markdown": "`end\n```\n\nThis will only modify the resource-get timeout for this particular\ninvocation.\nThis is useful if you want to fail-fast on certain non-critical\nsections when a resource is not available, or conversely if you are comfortable blocking longer on a particular resource.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 3,
                  "endLine": 44,
                  "snippet": {
                    "text": "\nOptionally, you can specify a timeout override using the with-block semantics:\n\n``` ruby\n$memcached.with(timeout: 2.0) do |conn|\n  conn.get('some-count')\nend\n```\n",
                    "rendered": {
                      "text": "\nOptionally, you can specify a timeout override using the with-block semantics:\n\n``` ruby\n$memcached.with(timeout: 2.0) do |conn|\n  conn.get('some-count')\nend\n```\n",
                      "markdown": "`\nOptionally, you can specify a timeout override using the with-block semantics:\n\n``` ruby\n$memcached.with(timeout: 2.0) do |conn|\n  conn.get('some-count')\nend\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 29,
                  "endLine": 41,
                  "endColumn": 38,
                  "snippet": {
                    "text": "$redis.then { |r| r.set 'foo' 'bar' }\n```\n\nOptionally, you can specify a timeout override using the with-block semantics:\n\n``` ruby\n$memcached.with(timeout: 2.0) do |conn|\n",
                    "rendered": {
                      "text": "$redis.then { |r| r.set 'foo' 'bar' }\n```\n\nOptionally, you can specify a timeout override using the with-block semantics:\n\n``` ruby\n$memcached.with(timeout: 2.0) do |conn|\n",
                      "markdown": "`$redis.then { |r| r.set 'foo' 'bar' }\n```\n\nOptionally, you can specify a timeout override using the with-block semantics:\n\n``` ruby\n$memcached.with(timeout: 2.0) do |conn|\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 3,
                  "endLine": 23,
                  "snippet": {
                    "text": "\nThen use the pool in your application:\n\n``` ruby\n$memcached.with do |conn|\n  conn.get('some-count')\nend\n```\n",
                    "rendered": {
                      "text": "\nThen use the pool in your application:\n\n``` ruby\n$memcached.with do |conn|\n  conn.get('some-count')\nend\n```\n",
                      "markdown": "`\nThen use the pool in your application:\n\n``` ruby\n$memcached.with do |conn|\n  conn.get('some-count')\nend\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 3,
                  "endLine": 17,
                  "snippet": {
                    "text": "\nCreate a pool of objects to share amongst the fibers or threads in your Ruby application:\n\n``` ruby\n$memcached = ConnectionPool.new(size: 5, timeout: 5) { Dalli::Client.new }\n```\n\nThen use the pool in your application:\n",
                    "rendered": {
                      "text": "\nCreate a pool of objects to share amongst the fibers or threads in your Ruby application:\n\n``` ruby\n$memcached = ConnectionPool.new(size: 5, timeout: 5) { Dalli::Client.new }\n```\n\nThen use the pool in your application:\n",
                      "markdown": "`\nCreate a pool of objects to share amongst the fibers or threads in your Ruby application:\n\n``` ruby\n$memcached = ConnectionPool.new(size: 5, timeout: 5) { Dalli::Client.new }\n```\n\nThen use the pool in your application:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 71,
                  "endLine": 14,
                  "endColumn": 77,
                  "snippet": {
                    "text": "Usage\n-----\n\nCreate a pool of objects to share amongst the fibers or threads in your Ruby application:\n\n``` ruby\n$memcached = ConnectionPool.new(size: 5, timeout: 5) { Dalli::Client.new }\n",
                    "rendered": {
                      "text": "Usage\n-----\n\nCreate a pool of objects to share amongst the fibers or threads in your Ruby application:\n\n``` ruby\n$memcached = ConnectionPool.new(size: 5, timeout: 5) { Dalli::Client.new }\n",
                      "markdown": "`Usage\n-----\n\nCreate a pool of objects to share amongst the fibers or threads in your Ruby application:\n\n``` ruby\n$memcached = ConnectionPool.new(size: 5, timeout: 5) { Dalli::Client.new }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/README.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 93,
                  "endLine": 9,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\nMongoDB has its own connection pool.\nActiveRecord has its own connection pool.\nThis is a generic connection pool that can be used with anything, e.g. Redis, Dalli and other Ruby network clients.\n\nUsage\n-----\n",
                    "rendered": {
                      "text": "\nMongoDB has its own connection pool.\nActiveRecord has its own connection pool.\nThis is a generic connection pool that can be used with anything, e.g. Redis, Dalli and other Ruby network clients.\n\nUsage\n-----\n",
                      "markdown": "`\nMongoDB has its own connection pool.\nActiveRecord has its own connection pool.\nThis is a generic connection pool that can be used with anything, e.g. Redis, Dalli and other Ruby network clients.\n\nUsage\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/Changes.md"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 26,
                  "endLine": 117,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n- `#with_connection` is now gone in favor of `#with`.\n\n- We no longer pollute the top level namespace with our internal\n`TimedStack` class.\n\n0.9.3\n",
                    "rendered": {
                      "text": "\n- `#with_connection` is now gone in favor of `#with`.\n\n- We no longer pollute the top level namespace with our internal\n`TimedStack` class.\n\n0.9.3\n",
                      "markdown": "`\n- `#with_connection` is now gone in favor of `#with`.\n\n- We no longer pollute the top level namespace with our internal\n`TimedStack` class.\n\n0.9.3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/Changes.md"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 36,
                  "endLine": 75,
                  "endColumn": 45,
                  "snippet": {
                    "text": "------\n\n- Work around a subtle race condition with code which uses `Timeout.timeout` and\n  checks out a connection within the timeout block.  This might cause\n  connections to get into a bad state and raise very odd errors. [tamird, #67]\n\n\n",
                    "rendered": {
                      "text": "------\n\n- Work around a subtle race condition with code which uses `Timeout.timeout` and\n  checks out a connection within the timeout block.  This might cause\n  connections to get into a bad state and raise very odd errors. [tamird, #67]\n\n\n",
                      "markdown": "`------\n\n- Work around a subtle race condition with code which uses `Timeout.timeout` and\n  checks out a connection within the timeout block.  This might cause\n  connections to get into a bad state and raise very odd errors. [tamird, #67]\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/Changes.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 15,
                  "endLine": 48,
                  "endColumn": 21,
                  "snippet": {
                    "text": "------\n\n- Allow CP::Wrapper to use an existing pool [#87, etiennebarrie]\n- Use monotonic time for more accurate timeouts [#84, jdantonio]\n\n2.2.0\n------\n",
                    "rendered": {
                      "text": "------\n\n- Allow CP::Wrapper to use an existing pool [#87, etiennebarrie]\n- Use monotonic time for more accurate timeouts [#84, jdantonio]\n\n2.2.0\n------\n",
                      "markdown": "`------\n\n- Allow CP::Wrapper to use an existing pool [#87, etiennebarrie]\n- Use monotonic time for more accurate timeouts [#84, jdantonio]\n\n2.2.0\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/Changes.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 28,
                  "endLine": 22,
                  "endColumn": 34,
                  "snippet": {
                    "text": "2.2.5\n------\n\n- Fix argument forwarding on Ruby 2.7 [#149]\n\n2.2.4\n------\n",
                    "rendered": {
                      "text": "2.2.5\n------\n\n- Fix argument forwarding on Ruby 2.7 [#149]\n\n2.2.4\n------\n",
                      "markdown": "`2.2.5\n------\n\n- Fix argument forwarding on Ruby 2.7 [#149]\n\n2.2.4\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/usr/lib/ruby/gems/3.2.0/gems/connection_pool-2.4.1/Changes.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 9,
                  "endLine": 16,
                  "endColumn": 15,
                  "snippet": {
                    "text": "2.3.0\n------\n\n- Minimum Ruby version is now 2.5.0\n- Add pool size to TimeoutError message\n\n2.2.5\n",
                    "rendered": {
                      "text": "2.3.0\n------\n\n- Minimum Ruby version is now 2.5.0\n- Add pool size to TimeoutError message\n\n2.2.5\n",
                      "markdown": "`2.3.0\n------\n\n- Minimum Ruby version is now 2.5.0\n- Add pool size to TimeoutError message\n\n2.2.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-connection_pool-2.4.1-r5.apk/ruby3.2-connection_pool-2.4.1-r5/.PKGINFO"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 37,
                  "endLine": 8,
                  "snippet": {
                    "text": "arch = x86_64\nsize = 101580\norigin = ruby3.2-connection_pool\npkgdesc = Generic connection pool for Ruby\nurl = \ncommit = 6c3e34c97c3fc70a86207abd16afe6de997cd7c6\nbuilddate = 1721404986\nlicense = MIT\n",
                    "rendered": {
                      "text": "arch = x86_64\nsize = 101580\norigin = ruby3.2-connection_pool\npkgdesc = Generic connection pool for Ruby\nurl = \ncommit = 6c3e34c97c3fc70a86207abd16afe6de997cd7c6\nbuilddate = 1721404986\nlicense = MIT\n",
                      "markdown": "`arch = x86_64\nsize = 101580\norigin = ruby3.2-connection_pool\npkgdesc = Generic connection pool for Ruby\nurl = \ncommit = 6c3e34c97c3fc70a86207abd16afe6de997cd7c6\nbuilddate = 1721404986\nlicense = MIT\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}