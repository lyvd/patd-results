{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 51,
                  "endLine": 472,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n    if ENV_ENFORCER_STATS in os.environ:\n        try:\n            enable_enforcer_stats = bool(os.environ.get(ENV_ENFORCER_STATS))\n        except:\n            enable_enforcer_stats = False\n\n",
                    "rendered": {
                      "text": "\n    if ENV_ENFORCER_STATS in os.environ:\n        try:\n            enable_enforcer_stats = bool(os.environ.get(ENV_ENFORCER_STATS))\n        except:\n            enable_enforcer_stats = False\n\n",
                      "markdown": "`\n    if ENV_ENFORCER_STATS in os.environ:\n        try:\n            enable_enforcer_stats = bool(os.environ.get(ENV_ENFORCER_STATS))\n        except:\n            enable_enforcer_stats = False\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 30,
                  "endLine": 466,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n        ctrl_pass = \"admin\"\n\n",
                    "rendered": {
                      "text": "    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n        ctrl_pass = \"admin\"\n\n",
                      "markdown": "`    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n        ctrl_pass = \"admin\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 30,
                  "endLine": 459,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    if argss.username:\n        ctrl_user = argss.username\n    elif ENV_CTRL_USERNAME in os.environ:\n        ctrl_user = os.environ.get(ENV_CTRL_USERNAME)\n    else:\n        ctrl_user = \"admin\"\n\n",
                    "rendered": {
                      "text": "    if argss.username:\n        ctrl_user = argss.username\n    elif ENV_CTRL_USERNAME in os.environ:\n        ctrl_user = os.environ.get(ENV_CTRL_USERNAME)\n    else:\n        ctrl_user = \"admin\"\n\n",
                      "markdown": "`    if argss.username:\n        ctrl_user = argss.username\n    elif ENV_CTRL_USERNAME in os.environ:\n        ctrl_user = os.environ.get(ENV_CTRL_USERNAME)\n    else:\n        ctrl_user = \"admin\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 29,
                  "endLine": 452,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    if argss.port:\n        port = argss.port\n    elif ENV_EXPORTER_PORT in os.environ:\n        port = int(os.environ.get(ENV_EXPORTER_PORT))\n    else:\n        sys.exit(\"Exporter port must be specified.\")\n\n",
                    "rendered": {
                      "text": "    if argss.port:\n        port = argss.port\n    elif ENV_EXPORTER_PORT in os.environ:\n        port = int(os.environ.get(ENV_EXPORTER_PORT))\n    else:\n        sys.exit(\"Exporter port must be specified.\")\n\n",
                      "markdown": "`    if argss.port:\n        port = argss.port\n    elif ENV_EXPORTER_PORT in os.environ:\n        port = int(os.environ.get(ENV_EXPORTER_PORT))\n    else:\n        sys.exit(\"Exporter port must be specified.\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 29,
                  "endLine": 445,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    if argss.server:\n        ctrl_svc = argss.server\n    elif ENV_CTRL_API_SVC in os.environ:\n        ctrl_svc = os.environ.get(ENV_CTRL_API_SVC)\n    else:\n        sys.exit(\"Controller API service endpoint must be specified.\")\n\n",
                    "rendered": {
                      "text": "    if argss.server:\n        ctrl_svc = argss.server\n    elif ENV_CTRL_API_SVC in os.environ:\n        ctrl_svc = os.environ.get(ENV_CTRL_API_SVC)\n    else:\n        sys.exit(\"Controller API service endpoint must be specified.\")\n\n",
                      "markdown": "`    if argss.server:\n        ctrl_svc = argss.server\n    elif ENV_CTRL_API_SVC in os.environ:\n        ctrl_svc = os.environ.get(ENV_CTRL_API_SVC)\n    else:\n        sys.exit(\"Controller API service endpoint must be specified.\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 23,
                  "endLine": 385,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                                  })\n\n        # Get log violation\n        response = self.get('/v1/log/violation')\n        if response:\n            # Set violation metrics\n            vtimelist = []\n",
                    "rendered": {
                      "text": "                                  })\n\n        # Get log violation\n        response = self.get('/v1/log/violation')\n        if response:\n            # Set violation metrics\n            vtimelist = []\n",
                      "markdown": "`                                  })\n\n        # Get log violation\n        response = self.get('/v1/log/violation')\n        if response:\n            # Set violation metrics\n            vtimelist = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 23,
                  "endLine": 355,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                                  })\n\n        # Get log incident\n        response = self.get('/v1/log/incident')\n        if response:\n            # Set incident metrics\n            itimelist = []\n",
                    "rendered": {
                      "text": "                                  })\n\n        # Get log incident\n        response = self.get('/v1/log/incident')\n        if response:\n            # Set incident metrics\n            itimelist = []\n",
                      "markdown": "`                                  })\n\n        # Get log incident\n        response = self.get('/v1/log/incident')\n        if response:\n            # Set incident metrics\n            itimelist = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 23,
                  "endLine": 322,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        # Set Log metrics\n        metric = Metric('nv_log', 'log of ' + ep, 'gauge')\n        # Get log threat\n        response = self.get('/v1/log/threat')\n        if response:\n            # Set threat\n            ttimelist = []\n",
                    "rendered": {
                      "text": "        # Set Log metrics\n        metric = Metric('nv_log', 'log of ' + ep, 'gauge')\n        # Get log threat\n        response = self.get('/v1/log/threat')\n        if response:\n            # Set threat\n            ttimelist = []\n",
                      "markdown": "`        # Set Log metrics\n        metric = Metric('nv_log', 'log of ' + ep, 'gauge')\n        # Get log threat\n        response = self.get('/v1/log/threat')\n        if response:\n            # Set threat\n            ttimelist = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 23,
                  "endLine": 294,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            yield metric\n\n        # Get container vulnerability\n        response = self.get('/v1/workload?brief=true')\n        if response:\n            # Set vulnerability metrics\n            cvlist = []\n",
                    "rendered": {
                      "text": "            yield metric\n\n        # Get container vulnerability\n        response = self.get('/v1/workload?brief=true')\n        if response:\n            # Set vulnerability metrics\n            cvlist = []\n",
                      "markdown": "`            yield metric\n\n        # Get container vulnerability\n        response = self.get('/v1/workload?brief=true')\n        if response:\n            # Set vulnerability metrics\n            cvlist = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 23,
                  "endLine": 272,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            yield metric\n\n        # Get platform vulnerability\n        response = self.get('/v1/scan/platform/')\n        if response:\n            # Set vulnerability metrics\n            metric = Metric('nv_platform_vulnerability',\n",
                    "rendered": {
                      "text": "            yield metric\n\n        # Get platform vulnerability\n        response = self.get('/v1/scan/platform/')\n        if response:\n            # Set vulnerability metrics\n            metric = Metric('nv_platform_vulnerability',\n",
                      "markdown": "`            yield metric\n\n        # Get platform vulnerability\n        response = self.get('/v1/scan/platform/')\n        if response:\n            # Set vulnerability metrics\n            metric = Metric('nv_platform_vulnerability',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 32,
                  "endLine": 252,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            metric = Metric('nv_image_vulnerability',\n                            'image vulnerability of ' + ep, 'gauge')\n            for c in json.loads(response.text)['summarys']:\n                response2 = self.get('/v1/scan/registry/' + c['name'] + '/images')\n                if response2:\n                    for img in json.loads(response2.text)['images']:\n                        metric.add_sample('nv_image_vulnerabilityHigh',\n",
                    "rendered": {
                      "text": "            metric = Metric('nv_image_vulnerability',\n                            'image vulnerability of ' + ep, 'gauge')\n            for c in json.loads(response.text)['summarys']:\n                response2 = self.get('/v1/scan/registry/' + c['name'] + '/images')\n                if response2:\n                    for img in json.loads(response2.text)['images']:\n                        metric.add_sample('nv_image_vulnerabilityHigh',\n",
                      "markdown": "`            metric = Metric('nv_image_vulnerability',\n                            'image vulnerability of ' + ep, 'gauge')\n            for c in json.loads(response.text)['summarys']:\n                response2 = self.get('/v1/scan/registry/' + c['name'] + '/images')\n                if response2:\n                    for img in json.loads(response2.text)['images']:\n                        metric.add_sample('nv_image_vulnerabilityHigh',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 23,
                  "endLine": 246,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                yield metric\n\n        # Get image vulnerability\n        response = self.get('/v1/scan/registry')\n        if response:\n            # Set vulnerability metrics\n            metric = Metric('nv_image_vulnerability',\n",
                    "rendered": {
                      "text": "                yield metric\n\n        # Get image vulnerability\n        response = self.get('/v1/scan/registry')\n        if response:\n            # Set vulnerability metrics\n            metric = Metric('nv_image_vulnerability',\n",
                      "markdown": "`                yield metric\n\n        # Get image vulnerability\n        response = self.get('/v1/scan/registry')\n        if response:\n            # Set vulnerability metrics\n            metric = Metric('nv_image_vulnerability',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 23,
                  "endLine": 228,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            yield metric\n\n        # Get debug admission stats\n        response = self.get('/v1/debug/admission_stats')\n        if response:\n            if response.status_code != 200:\n                print(\"Admission control stats request failed: %s\" % response)\n",
                    "rendered": {
                      "text": "            yield metric\n\n        # Get debug admission stats\n        response = self.get('/v1/debug/admission_stats')\n        if response:\n            if response.status_code != 200:\n                print(\"Admission control stats request failed: %s\" % response)\n",
                      "markdown": "`            yield metric\n\n        # Get debug admission stats\n        response = self.get('/v1/debug/admission_stats')\n        if response:\n            if response.status_code != 200:\n                print(\"Admission control stats request failed: %s\" % response)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 23,
                  "endLine": 213,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n\n        # Get host\n        response = self.get('/v1/host')\n        if response:\n            # Set host metrics\n            metric = Metric('nv_host', 'host information of ' + ep, 'gauge')\n",
                    "rendered": {
                      "text": "\n\n        # Get host\n        response = self.get('/v1/host')\n        if response:\n            # Set host metrics\n            metric = Metric('nv_host', 'host information of ' + ep, 'gauge')\n",
                      "markdown": "`\n\n        # Get host\n        response = self.get('/v1/host')\n        if response:\n            # Set host metrics\n            metric = Metric('nv_host', 'host information of ' + ep, 'gauge')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 32,
                  "endLine": 190,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            # Read each controller, set controller metrics\n            metric = Metric('nv_controller', 'controllers of ' + ep, 'gauge')\n            for c in json.loads(response.text)['controllers']:\n                response2 = self.get('/v1/controller/' + c['id'] + '/stats')\n                if response2:\n                    ejson = json.loads(response2.text)\n                    metric.add_sample('nv_controller_cpu',\n",
                    "rendered": {
                      "text": "            # Read each controller, set controller metrics\n            metric = Metric('nv_controller', 'controllers of ' + ep, 'gauge')\n            for c in json.loads(response.text)['controllers']:\n                response2 = self.get('/v1/controller/' + c['id'] + '/stats')\n                if response2:\n                    ejson = json.loads(response2.text)\n                    metric.add_sample('nv_controller_cpu',\n",
                      "markdown": "`            # Read each controller, set controller metrics\n            metric = Metric('nv_controller', 'controllers of ' + ep, 'gauge')\n            for c in json.loads(response.text)['controllers']:\n                response2 = self.get('/v1/controller/' + c['id'] + '/stats')\n                if response2:\n                    ejson = json.loads(response2.text)\n                    metric.add_sample('nv_controller_cpu',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 23,
                  "endLine": 185,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                yield metric\n\n        # Get controller\n        response = self.get('/v1/controller')\n        if response:\n            # Read each controller, set controller metrics\n            metric = Metric('nv_controller', 'controllers of ' + ep, 'gauge')\n",
                    "rendered": {
                      "text": "                yield metric\n\n        # Get controller\n        response = self.get('/v1/controller')\n        if response:\n            # Read each controller, set controller metrics\n            metric = Metric('nv_controller', 'controllers of ' + ep, 'gauge')\n",
                      "markdown": "`                yield metric\n\n        # Get controller\n        response = self.get('/v1/controller')\n        if response:\n            # Read each controller, set controller metrics\n            metric = Metric('nv_controller', 'controllers of ' + ep, 'gauge')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 36,
                  "endLine": 163,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                # Read each enforcer, set enforcer metrics\n                metric = Metric('nv_enforcer', 'enforcers of ' + ep, 'gauge')\n                for c in json.loads(response.text)['enforcers']:\n                    response2 = self.get('/v1/enforcer/' + c['id'] + '/stats')\n                    if response2:\n                        ejson = json.loads(response2.text)\n                        metric.add_sample('nv_enforcer_cpu',\n",
                    "rendered": {
                      "text": "                # Read each enforcer, set enforcer metrics\n                metric = Metric('nv_enforcer', 'enforcers of ' + ep, 'gauge')\n                for c in json.loads(response.text)['enforcers']:\n                    response2 = self.get('/v1/enforcer/' + c['id'] + '/stats')\n                    if response2:\n                        ejson = json.loads(response2.text)\n                        metric.add_sample('nv_enforcer_cpu',\n",
                      "markdown": "`                # Read each enforcer, set enforcer metrics\n                metric = Metric('nv_enforcer', 'enforcers of ' + ep, 'gauge')\n                for c in json.loads(response.text)['enforcers']:\n                    response2 = self.get('/v1/enforcer/' + c['id'] + '/stats')\n                    if response2:\n                        ejson = json.loads(response2.text)\n                        metric.add_sample('nv_enforcer_cpu',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 27,
                  "endLine": 158,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        # Get enforcer\n        if enable_enforcer_stats:\n            response = self.get('/v1/enforcer')\n            if response:\n                # Read each enforcer, set enforcer metrics\n                metric = Metric('nv_enforcer', 'enforcers of ' + ep, 'gauge')\n",
                    "rendered": {
                      "text": "\n        # Get enforcer\n        if enable_enforcer_stats:\n            response = self.get('/v1/enforcer')\n            if response:\n                # Read each enforcer, set enforcer metrics\n                metric = Metric('nv_enforcer', 'enforcers of ' + ep, 'gauge')\n",
                      "markdown": "`\n        # Get enforcer\n        if enable_enforcer_stats:\n            response = self.get('/v1/enforcer')\n            if response:\n                # Read each enforcer, set enforcer metrics\n                metric = Metric('nv_enforcer', 'enforcers of ' + ep, 'gauge')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 23,
                  "endLine": 131,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            yield metric\n\n        # Get conversation\n        response = self.get('/v1/conversation')\n        if response:\n            # Set conversation metrics\n            metric = Metric('nv_conversation', 'conversation of ' + ep,\n",
                    "rendered": {
                      "text": "            yield metric\n\n        # Get conversation\n        response = self.get('/v1/conversation')\n        if response:\n            # Set conversation metrics\n            metric = Metric('nv_conversation', 'conversation of ' + ep,\n",
                      "markdown": "`            yield metric\n\n        # Get conversation\n        response = self.get('/v1/conversation')\n        if response:\n            # Set conversation metrics\n            metric = Metric('nv_conversation', 'conversation of ' + ep,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 23,
                  "endLine": 76,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        ep = eps[0]\n\n        # Get system summary\n        response = self.get('/v1/system/summary')\n        if response:\n            sjson = json.loads(response.text)\n            # Set summary metrics\n",
                    "rendered": {
                      "text": "        ep = eps[0]\n\n        # Get system summary\n        response = self.get('/v1/system/summary')\n        if response:\n            sjson = json.loads(response.text)\n            # Set summary metrics\n",
                      "markdown": "`        ep = eps[0]\n\n        # Get system summary\n        response = self.get('/v1/system/summary')\n        if response:\n            sjson = json.loads(response.text)\n            # Set summary metrics\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 34,
                  "endLine": 58,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        retry = 0\n        while retry < 2:\n            try:\n                response = session.get(self._url + path, verify=False)\n            except requests.exceptions.RequestException as e:\n                print(e)\n                retry += 1\n",
                    "rendered": {
                      "text": "        retry = 0\n        while retry < 2:\n            try:\n                response = session.get(self._url + path, verify=False)\n            except requests.exceptions.RequestException as e:\n                print(e)\n                retry += 1\n",
                      "markdown": "`        retry = 0\n        while retry < 2:\n            try:\n                response = session.get(self._url + path, verify=False)\n            except requests.exceptions.RequestException as e:\n                print(e)\n                retry += 1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 27,
                  "endLine": 22,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    body = {\"password\": {\"username\": ctrl_user, \"password\": ctrl_pass}}\n    headers = {'Content-Type': 'application/json'}\n    try:\n        response = requests.post(ctrl_url + '/v1/auth',\n                                 headers=headers,\n                                 data=json.dumps(body),\n                                 verify=False)\n",
                    "rendered": {
                      "text": "    body = {\"password\": {\"username\": ctrl_user, \"password\": ctrl_pass}}\n    headers = {'Content-Type': 'application/json'}\n    try:\n        response = requests.post(ctrl_url + '/v1/auth',\n                                 headers=headers,\n                                 data=json.dumps(body),\n                                 verify=False)\n",
                      "markdown": "`    body = {\"password\": {\"username\": ctrl_user, \"password\": ctrl_pass}}\n    headers = {'Content-Type': 'application/json'}\n    try:\n        response = requests.post(ctrl_url + '/v1/auth',\n                                 headers=headers,\n                                 data=json.dumps(body),\n                                 verify=False)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 44,
                  "endLine": 466,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n        ctrl_pass = \"admin\"\n\n",
                    "rendered": {
                      "text": "    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n        ctrl_pass = \"admin\"\n\n",
                      "markdown": "`    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n        ctrl_pass = \"admin\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 18,
                  "endLine": 465,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n        ctrl_pass = \"admin\"\n",
                    "rendered": {
                      "text": "\n    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n        ctrl_pass = \"admin\"\n",
                      "markdown": "`\n    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n        ctrl_pass = \"admin\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 26,
                  "endLine": 464,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        ctrl_user = \"admin\"\n\n    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n",
                    "rendered": {
                      "text": "        ctrl_user = \"admin\"\n\n    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n",
                      "markdown": "`        ctrl_user = \"admin\"\n\n    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 13,
                  "endLine": 463,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    else:\n        ctrl_user = \"admin\"\n\n    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n",
                    "rendered": {
                      "text": "    else:\n        ctrl_user = \"admin\"\n\n    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n",
                      "markdown": "`    else:\n        ctrl_user = \"admin\"\n\n    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 46,
                  "endLine": 439,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    parser.add_argument(\"-p\",\n                        \"--password\",\n                        type=str,\n                        help=\"controller user password\")\n    argss = parser.parse_args()\n\n    if argss.server:\n",
                    "rendered": {
                      "text": "    parser.add_argument(\"-p\",\n                        \"--password\",\n                        type=str,\n                        help=\"controller user password\")\n    argss = parser.parse_args()\n\n    if argss.server:\n",
                      "markdown": "`    parser.add_argument(\"-p\",\n                        \"--password\",\n                        type=str,\n                        help=\"controller user password\")\n    argss = parser.parse_args()\n\n    if argss.server:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 27,
                  "endLine": 437,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                        type=str,\n                        help=\"controller user name\")\n    parser.add_argument(\"-p\",\n                        \"--password\",\n                        type=str,\n                        help=\"controller user password\")\n    argss = parser.parse_args()\n",
                    "rendered": {
                      "text": "                        type=str,\n                        help=\"controller user name\")\n    parser.add_argument(\"-p\",\n                        \"--password\",\n                        type=str,\n                        help=\"controller user password\")\n    argss = parser.parse_args()\n",
                      "markdown": "`                        type=str,\n                        help=\"controller user name\")\n    parser.add_argument(\"-p\",\n                        \"--password\",\n                        type=str,\n                        help=\"controller user password\")\n    argss = parser.parse_args()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 26,
                  "endLine": 421,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nENV_CTRL_API_SVC = \"CTRL_API_SERVICE\"\nENV_CTRL_USERNAME = \"CTRL_USERNAME\"\nENV_CTRL_PASSWORD = \"CTRL_PASSWORD\"\nENV_EXPORTER_PORT = \"EXPORTER_PORT\"\nENV_ENFORCER_STATS = \"ENFORCER_STATS\"\n\n",
                    "rendered": {
                      "text": "\nENV_CTRL_API_SVC = \"CTRL_API_SERVICE\"\nENV_CTRL_USERNAME = \"CTRL_USERNAME\"\nENV_CTRL_PASSWORD = \"CTRL_PASSWORD\"\nENV_EXPORTER_PORT = \"EXPORTER_PORT\"\nENV_ENFORCER_STATS = \"ENFORCER_STATS\"\n\n",
                      "markdown": "`\nENV_CTRL_API_SVC = \"CTRL_API_SERVICE\"\nENV_CTRL_USERNAME = \"CTRL_USERNAME\"\nENV_CTRL_PASSWORD = \"CTRL_PASSWORD\"\nENV_EXPORTER_PORT = \"EXPORTER_PORT\"\nENV_ENFORCER_STATS = \"ENFORCER_STATS\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 9,
                  "endLine": 421,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nENV_CTRL_API_SVC = \"CTRL_API_SERVICE\"\nENV_CTRL_USERNAME = \"CTRL_USERNAME\"\nENV_CTRL_PASSWORD = \"CTRL_PASSWORD\"\nENV_EXPORTER_PORT = \"EXPORTER_PORT\"\nENV_ENFORCER_STATS = \"ENFORCER_STATS\"\n\n",
                    "rendered": {
                      "text": "\nENV_CTRL_API_SVC = \"CTRL_API_SERVICE\"\nENV_CTRL_USERNAME = \"CTRL_USERNAME\"\nENV_CTRL_PASSWORD = \"CTRL_PASSWORD\"\nENV_EXPORTER_PORT = \"EXPORTER_PORT\"\nENV_ENFORCER_STATS = \"ENFORCER_STATS\"\n\n",
                      "markdown": "`\nENV_CTRL_API_SVC = \"CTRL_API_SERVICE\"\nENV_CTRL_USERNAME = \"CTRL_USERNAME\"\nENV_CTRL_PASSWORD = \"CTRL_PASSWORD\"\nENV_EXPORTER_PORT = \"EXPORTER_PORT\"\nENV_ENFORCER_STATS = \"ENFORCER_STATS\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 49,
                  "endLine": 19,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\ndef _login(ctrl_url, ctrl_user, ctrl_pass):\n    print(\"Login to controller ...\")\n    body = {\"password\": {\"username\": ctrl_user, \"password\": ctrl_pass}}\n    headers = {'Content-Type': 'application/json'}\n    try:\n        response = requests.post(ctrl_url + '/v1/auth',\n",
                    "rendered": {
                      "text": "\ndef _login(ctrl_url, ctrl_user, ctrl_pass):\n    print(\"Login to controller ...\")\n    body = {\"password\": {\"username\": ctrl_user, \"password\": ctrl_pass}}\n    headers = {'Content-Type': 'application/json'}\n    try:\n        response = requests.post(ctrl_url + '/v1/auth',\n",
                      "markdown": "`\ndef _login(ctrl_url, ctrl_user, ctrl_pass):\n    print(\"Login to controller ...\")\n    body = {\"password\": {\"username\": ctrl_user, \"password\": ctrl_pass}}\n    headers = {'Content-Type': 'application/json'}\n    try:\n        response = requests.post(ctrl_url + '/v1/auth',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 13,
                  "endLine": 19,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\ndef _login(ctrl_url, ctrl_user, ctrl_pass):\n    print(\"Login to controller ...\")\n    body = {\"password\": {\"username\": ctrl_user, \"password\": ctrl_pass}}\n    headers = {'Content-Type': 'application/json'}\n    try:\n        response = requests.post(ctrl_url + '/v1/auth',\n",
                    "rendered": {
                      "text": "\ndef _login(ctrl_url, ctrl_user, ctrl_pass):\n    print(\"Login to controller ...\")\n    body = {\"password\": {\"username\": ctrl_user, \"password\": ctrl_pass}}\n    headers = {'Content-Type': 'application/json'}\n    try:\n        response = requests.post(ctrl_url + '/v1/auth',\n",
                      "markdown": "`\ndef _login(ctrl_url, ctrl_user, ctrl_pass):\n    print(\"Login to controller ...\")\n    body = {\"password\": {\"username\": ctrl_user, \"password\": ctrl_pass}}\n    headers = {'Content-Type': 'application/json'}\n    try:\n        response = requests.post(ctrl_url + '/v1/auth',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 44,
                  "endLine": 472,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n    if ENV_ENFORCER_STATS in os.environ:\n        try:\n            enable_enforcer_stats = bool(os.environ.get(ENV_ENFORCER_STATS))\n        except:\n            enable_enforcer_stats = False\n\n",
                    "rendered": {
                      "text": "\n    if ENV_ENFORCER_STATS in os.environ:\n        try:\n            enable_enforcer_stats = bool(os.environ.get(ENV_ENFORCER_STATS))\n        except:\n            enable_enforcer_stats = False\n\n",
                      "markdown": "`\n    if ENV_ENFORCER_STATS in os.environ:\n        try:\n            enable_enforcer_stats = bool(os.environ.get(ENV_ENFORCER_STATS))\n        except:\n            enable_enforcer_stats = False\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 23,
                  "endLine": 466,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n        ctrl_pass = \"admin\"\n\n",
                    "rendered": {
                      "text": "    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n        ctrl_pass = \"admin\"\n\n",
                      "markdown": "`    if argss.password:\n        ctrl_pass = argss.password\n    elif ENV_CTRL_PASSWORD in os.environ:\n        ctrl_pass = os.environ.get(ENV_CTRL_PASSWORD)\n    else:\n        ctrl_pass = \"admin\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 23,
                  "endLine": 459,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    if argss.username:\n        ctrl_user = argss.username\n    elif ENV_CTRL_USERNAME in os.environ:\n        ctrl_user = os.environ.get(ENV_CTRL_USERNAME)\n    else:\n        ctrl_user = \"admin\"\n\n",
                    "rendered": {
                      "text": "    if argss.username:\n        ctrl_user = argss.username\n    elif ENV_CTRL_USERNAME in os.environ:\n        ctrl_user = os.environ.get(ENV_CTRL_USERNAME)\n    else:\n        ctrl_user = \"admin\"\n\n",
                      "markdown": "`    if argss.username:\n        ctrl_user = argss.username\n    elif ENV_CTRL_USERNAME in os.environ:\n        ctrl_user = os.environ.get(ENV_CTRL_USERNAME)\n    else:\n        ctrl_user = \"admin\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 22,
                  "endLine": 452,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    if argss.port:\n        port = argss.port\n    elif ENV_EXPORTER_PORT in os.environ:\n        port = int(os.environ.get(ENV_EXPORTER_PORT))\n    else:\n        sys.exit(\"Exporter port must be specified.\")\n\n",
                    "rendered": {
                      "text": "    if argss.port:\n        port = argss.port\n    elif ENV_EXPORTER_PORT in os.environ:\n        port = int(os.environ.get(ENV_EXPORTER_PORT))\n    else:\n        sys.exit(\"Exporter port must be specified.\")\n\n",
                      "markdown": "`    if argss.port:\n        port = argss.port\n    elif ENV_EXPORTER_PORT in os.environ:\n        port = int(os.environ.get(ENV_EXPORTER_PORT))\n    else:\n        sys.exit(\"Exporter port must be specified.\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 22,
                  "endLine": 445,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    if argss.server:\n        ctrl_svc = argss.server\n    elif ENV_CTRL_API_SVC in os.environ:\n        ctrl_svc = os.environ.get(ENV_CTRL_API_SVC)\n    else:\n        sys.exit(\"Controller API service endpoint must be specified.\")\n\n",
                    "rendered": {
                      "text": "    if argss.server:\n        ctrl_svc = argss.server\n    elif ENV_CTRL_API_SVC in os.environ:\n        ctrl_svc = os.environ.get(ENV_CTRL_API_SVC)\n    else:\n        sys.exit(\"Controller API service endpoint must be specified.\")\n\n",
                      "markdown": "`    if argss.server:\n        ctrl_svc = argss.server\n    elif ENV_CTRL_API_SVC in os.environ:\n        ctrl_svc = os.environ.get(ENV_CTRL_API_SVC)\n    else:\n        sys.exit(\"Controller API service endpoint must be specified.\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 32,
                  "endLine": 231,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        response = self.get('/v1/debug/admission_stats')\n        if response:\n            if response.status_code != 200:\n                print(\"Admission control stats request failed: %s\" % response)\n            else:\n                djson = json.loads(response.text)\n                # Set admission metrics\n",
                    "rendered": {
                      "text": "        response = self.get('/v1/debug/admission_stats')\n        if response:\n            if response.status_code != 200:\n                print(\"Admission control stats request failed: %s\" % response)\n            else:\n                djson = json.loads(response.text)\n                # Set admission metrics\n",
                      "markdown": "`        response = self.get('/v1/debug/admission_stats')\n        if response:\n            if response.status_code != 200:\n                print(\"Admission control stats request failed: %s\" % response)\n            else:\n                djson = json.loads(response.text)\n                # Set admission metrics\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "endLine": 37,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n    token = json.loads(response.text)[\"token\"][\"token\"]\n\n    # Update request session\n    session.headers.update({\"Content-Type\": \"application/json\"})\n    session.headers.update({'X-Auth-Token': token})\n    return 0\n",
                    "rendered": {
                      "text": "\n    token = json.loads(response.text)[\"token\"][\"token\"]\n\n    # Update request session\n    session.headers.update({\"Content-Type\": \"application/json\"})\n    session.headers.update({'X-Auth-Token': token})\n    return 0\n",
                      "markdown": "`\n    token = json.loads(response.text)[\"token\"][\"token\"]\n\n    # Update request session\n    session.headers.update({\"Content-Type\": \"application/json\"})\n    session.headers.update({'X-Auth-Token': token})\n    return 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 32,
                  "endLine": 447,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    elif ENV_CTRL_API_SVC in os.environ:\n        ctrl_svc = os.environ.get(ENV_CTRL_API_SVC)\n    else:\n        sys.exit(\"Controller API service endpoint must be specified.\")\n\n    if argss.port:\n        port = argss.port\n",
                    "rendered": {
                      "text": "    elif ENV_CTRL_API_SVC in os.environ:\n        ctrl_svc = os.environ.get(ENV_CTRL_API_SVC)\n    else:\n        sys.exit(\"Controller API service endpoint must be specified.\")\n\n    if argss.port:\n        port = argss.port\n",
                      "markdown": "`    elif ENV_CTRL_API_SVC in os.environ:\n        ctrl_svc = os.environ.get(ENV_CTRL_API_SVC)\n    else:\n        sys.exit(\"Controller API service endpoint must be specified.\")\n\n    if argss.port:\n        port = argss.port\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 44,
                  "endLine": 118,
                  "snippet": {
                    "text": "                metric.add_sample('nv_summary_cvedbVersion',\n                                  value=sjson[\"summary\"][\"cvedb_version\"],\n                                  labels={'target': ep})\n            # Convert time, set CVEDB create time\n            dt = sjson[\"summary\"][\"cvedb_create_time\"]\n            if not dt:\n                metric.add_sample('nv_summary_cvedbTime',\n                                  value=0,\n",
                    "rendered": {
                      "text": "                metric.add_sample('nv_summary_cvedbVersion',\n                                  value=sjson[\"summary\"][\"cvedb_version\"],\n                                  labels={'target': ep})\n            # Convert time, set CVEDB create time\n            dt = sjson[\"summary\"][\"cvedb_create_time\"]\n            if not dt:\n                metric.add_sample('nv_summary_cvedbTime',\n                                  value=0,\n",
                      "markdown": "`                metric.add_sample('nv_summary_cvedbVersion',\n                                  value=sjson[\"summary\"][\"cvedb_version\"],\n                                  labels={'target': ep})\n            # Convert time, set CVEDB create time\n            dt = sjson[\"summary\"][\"cvedb_create_time\"]\n            if not dt:\n                metric.add_sample('nv_summary_cvedbTime',\n                                  value=0,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/neuvector-prometheus-exporter-1.1.0.0-r0.apk/neuvector-prometheus-exporter-1.1.0.0-r0/usr/bin/nv_exporter.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 6,
                  "endLine": 10,
                  "snippet": {
                    "text": "import requests\nimport signal\nimport sys\nimport time\nimport urllib3\n\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n",
                    "rendered": {
                      "text": "import requests\nimport signal\nimport sys\nimport time\nimport urllib3\n\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n",
                      "markdown": "`import requests\nimport signal\nimport sys\nimport time\nimport urllib3\n\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}