{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4026,
                  "startColumn": 5,
                  "endLine": 4026,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Version 0.9.2, 2002-08-18\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* DH_PrivateKey::public_value() was returning the wrong value\n* Various BigInt optimizations\n* The filters.h header now includes hex.h and base64.h\n* Moved Counter mode to ctr.h\n",
                    "rendered": {
                      "text": "Version 0.9.2, 2002-08-18\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* DH_PrivateKey::public_value() was returning the wrong value\n* Various BigInt optimizations\n* The filters.h header now includes hex.h and base64.h\n* Moved Counter mode to ctr.h\n",
                      "markdown": "`Version 0.9.2, 2002-08-18\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* DH_PrivateKey::public_value() was returning the wrong value\n* Various BigInt optimizations\n* The filters.h header now includes hex.h and base64.h\n* Moved Counter mode to ctr.h\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3843,
                  "startColumn": 42,
                  "endLine": 3843,
                  "endColumn": 52,
                  "snippet": {
                    "text": "* Base64_Decoder and Hex_Decoder can now validate input\n* Removed support for the LibraryInitializer option 'egd_path'\n* Added tests for DSA X.509 and PKCS #8 key formats\n* Removed a long deprecated feature of DH_PrivateKey's constructor\n* Updated the RPM .spec file\n* Major documentation updates\n\n",
                    "rendered": {
                      "text": "* Base64_Decoder and Hex_Decoder can now validate input\n* Removed support for the LibraryInitializer option 'egd_path'\n* Added tests for DSA X.509 and PKCS #8 key formats\n* Removed a long deprecated feature of DH_PrivateKey's constructor\n* Updated the RPM .spec file\n* Major documentation updates\n\n",
                      "markdown": "`* Base64_Decoder and Hex_Decoder can now validate input\n* Removed support for the LibraryInitializer option 'egd_path'\n* Added tests for DSA X.509 and PKCS #8 key formats\n* Removed a long deprecated feature of DH_PrivateKey's constructor\n* Updated the RPM .spec file\n* Major documentation updates\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3043,
                  "startColumn": 6,
                  "endLine": 3043,
                  "endColumn": 16,
                  "snippet": {
                    "text": "* Remove the randomizing version of OctetString::change\n* Make the cipher and MAC to use in Randpool configurable\n* Move RandomNumberGenerator declaration to rng.h\n* RSA_PrivateKey will not generate keys smaller than 1024 bits\n* Fix an error decoding BER UNIVERSAL types with special taggings\n\nVersion 1.7.6, 2008-05-05\n",
                    "rendered": {
                      "text": "* Remove the randomizing version of OctetString::change\n* Make the cipher and MAC to use in Randpool configurable\n* Move RandomNumberGenerator declaration to rng.h\n* RSA_PrivateKey will not generate keys smaller than 1024 bits\n* Fix an error decoding BER UNIVERSAL types with special taggings\n\nVersion 1.7.6, 2008-05-05\n",
                      "markdown": "`* Remove the randomizing version of OctetString::change\n* Make the cipher and MAC to use in Randpool configurable\n* Move RandomNumberGenerator declaration to rng.h\n* RSA_PrivateKey will not generate keys smaller than 1024 bits\n* Fix an error decoding BER UNIVERSAL types with special taggings\n\nVersion 1.7.6, 2008-05-05\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2772,
                  "startColumn": 33,
                  "endLine": 2772,
                  "endColumn": 41,
                  "snippet": {
                    "text": "Version 1.8.6, 2009-08-13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add Cryptobox, a set of simple password-based encryption routines\n* Only read world-readable files when walking /proc for entropy\n* Fix building with TR1 disabled\n* Fix x86 bswap support for Visual C++\n",
                    "rendered": {
                      "text": "Version 1.8.6, 2009-08-13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add Cryptobox, a set of simple password-based encryption routines\n* Only read world-readable files when walking /proc for entropy\n* Fix building with TR1 disabled\n* Fix x86 bswap support for Visual C++\n",
                      "markdown": "`Version 1.8.6, 2009-08-13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add Cryptobox, a set of simple password-based encryption routines\n* Only read world-readable files when walking /proc for entropy\n* Fix building with TR1 disabled\n* Fix x86 bswap support for Visual C++\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2670,
                  "startColumn": 18,
                  "endLine": 2670,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n* Add a block cipher cascade construction\n\n* Add support for password hashing for authentication (passhash9.h)\n\n* Add support for Win32 high resolution system timers\n\n",
                    "rendered": {
                      "text": "\n* Add a block cipher cascade construction\n\n* Add support for password hashing for authentication (passhash9.h)\n\n* Add support for Win32 high resolution system timers\n\n",
                      "markdown": "`\n* Add a block cipher cascade construction\n\n* Add support for password hashing for authentication (passhash9.h)\n\n* Add support for Win32 high resolution system timers\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2564,
                  "endLine": 2564,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nThe default iteration count for the password based encryption schemes\nhas been increased from 2048 to 10000. This should make\npassword-guessing attacks against private keys encrypted with versions\nafter this release somewhat harder.\n\nNew functions for encoding public and private keys to binary,\n",
                    "rendered": {
                      "text": "\nThe default iteration count for the password based encryption schemes\nhas been increased from 2048 to 10000. This should make\npassword-guessing attacks against private keys encrypted with versions\nafter this release somewhat harder.\n\nNew functions for encoding public and private keys to binary,\n",
                      "markdown": "`\nThe default iteration count for the password based encryption schemes\nhas been increased from 2048 to 10000. This should make\npassword-guessing attacks against private keys encrypted with versions\nafter this release somewhat harder.\n\nNew functions for encoding public and private keys to binary,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2562,
                  "startColumn": 36,
                  "endLine": 2562,
                  "endColumn": 44,
                  "snippet": {
                    "text": "not support IVs at all, then calls to ``set_iv`` would be silently\nignored. Now an exception about the invalid IV length will be thrown.\n\nThe default iteration count for the password based encryption schemes\nhas been increased from 2048 to 10000. This should make\npassword-guessing attacks against private keys encrypted with versions\nafter this release somewhat harder.\n",
                    "rendered": {
                      "text": "not support IVs at all, then calls to ``set_iv`` would be silently\nignored. Now an exception about the invalid IV length will be thrown.\n\nThe default iteration count for the password based encryption schemes\nhas been increased from 2048 to 10000. This should make\npassword-guessing attacks against private keys encrypted with versions\nafter this release somewhat harder.\n",
                      "markdown": "`not support IVs at all, then calls to ``set_iv`` would be silently\nignored. Now an exception about the invalid IV length will be thrown.\n\nThe default iteration count for the password based encryption schemes\nhas been increased from 2048 to 10000. This should make\npassword-guessing attacks against private keys encrypted with versions\nafter this release somewhat harder.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2415,
                  "startColumn": 36,
                  "endLine": 2415,
                  "endColumn": 44,
                  "snippet": {
                    "text": "Version 1.9.14, 2011-03-01\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add support for bcrypt, OpenBSD's password hashing scheme.\n\n* Add support for NIST's AES key wrapping algorithm, as described in\n  :rfc:`3394`. It is available by including ``rfc3394.h``.\n",
                    "rendered": {
                      "text": "Version 1.9.14, 2011-03-01\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add support for bcrypt, OpenBSD's password hashing scheme.\n\n* Add support for NIST's AES key wrapping algorithm, as described in\n  :rfc:`3394`. It is available by including ``rfc3394.h``.\n",
                      "markdown": "`Version 1.9.14, 2011-03-01\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add support for bcrypt, OpenBSD's password hashing scheme.\n\n* Add support for NIST's AES key wrapping algorithm, as described in\n  :rfc:`3394`. It is available by including ``rfc3394.h``.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2380,
                  "startColumn": 17,
                  "endLine": 2380,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n* Disable the by-default 'strong' checking of private keys that are\n  loaded from storage. You can always request key material sanity\n  checking using Private_Key::check_key.\n\n* Bring back removed functions ``min_keylength_of``,\n  ``max_keylength_of``, ``keylength_multiple_of`` in ``lookup.h`` to\n",
                    "rendered": {
                      "text": "\n* Disable the by-default 'strong' checking of private keys that are\n  loaded from storage. You can always request key material sanity\n  checking using Private_Key::check_key.\n\n* Bring back removed functions ``min_keylength_of``,\n  ``max_keylength_of``, ``keylength_multiple_of`` in ``lookup.h`` to\n",
                      "markdown": "`\n* Disable the by-default 'strong' checking of private keys that are\n  loaded from storage. You can always request key material sanity\n  checking using Private_Key::check_key.\n\n* Bring back removed functions ``min_keylength_of``,\n  ``max_keylength_of``, ``keylength_multiple_of`` in ``lookup.h`` to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 21,
                  "endLine": 270,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n* Avoid ``static_assert`` triggering under MSVC debug builds (GH #646)\n\n* The antique PBKDF1 password hashing scheme is deprecated and will be\n  removed in a future release. It was only used to support the equally\n  ancient PBES1 private key encryption scheme, which was removed in 1.11.8.\n\n",
                    "rendered": {
                      "text": "\n* Avoid ``static_assert`` triggering under MSVC debug builds (GH #646)\n\n* The antique PBKDF1 password hashing scheme is deprecated and will be\n  removed in a future release. It was only used to support the equally\n  ancient PBES1 private key encryption scheme, which was removed in 1.11.8.\n\n",
                      "markdown": "`\n* Avoid ``static_assert`` triggering under MSVC debug builds (GH #646)\n\n* The antique PBKDF1 password hashing scheme is deprecated and will be\n  removed in a future release. It was only used to support the equally\n  ancient PBES1 private key encryption scheme, which was removed in 1.11.8.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 19,
                  "endLine": 145,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n* Add DSA deterministic parameter generation test from FIPS 186-3.\n\n* Fix PKCS11_ECDSA_PrivateKey::check_key (GH #712)\n\n* Fixed problems running configure.py outside of the base directory\n\n",
                    "rendered": {
                      "text": "\n* Add DSA deterministic parameter generation test from FIPS 186-3.\n\n* Fix PKCS11_ECDSA_PrivateKey::check_key (GH #712)\n\n* Fixed problems running configure.py outside of the base directory\n\n",
                      "markdown": "`\n* Add DSA deterministic parameter generation test from FIPS 186-3.\n\n* Fix PKCS11_ECDSA_PrivateKey::check_key (GH #712)\n\n* Fixed problems running configure.py outside of the base directory\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4106,
                  "startColumn": 10,
                  "endLine": 4106,
                  "endColumn": 16,
                  "snippet": {
                    "text": "* Did a workaround in pipe.cpp for GCC 2.95.x on Linux\n* Removed some debugging code from init.cpp that made FTW ES useless\n* Better checking for invalid arguments in the PK algorithms\n* Reduced Base64 and Hex default line length (if line breaking is used)\n* Fixes for HP's aCC compiler\n* Cleanups in BigInt\n\n",
                    "rendered": {
                      "text": "* Did a workaround in pipe.cpp for GCC 2.95.x on Linux\n* Removed some debugging code from init.cpp that made FTW ES useless\n* Better checking for invalid arguments in the PK algorithms\n* Reduced Base64 and Hex default line length (if line breaking is used)\n* Fixes for HP's aCC compiler\n* Cleanups in BigInt\n\n",
                      "markdown": "`* Did a workaround in pipe.cpp for GCC 2.95.x on Linux\n* Removed some debugging code from init.cpp that made FTW ES useless\n* Better checking for invalid arguments in the PK algorithms\n* Reduced Base64 and Hex default line length (if line breaking is used)\n* Fixes for HP's aCC compiler\n* Cleanups in BigInt\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4028,
                  "startColumn": 46,
                  "endLine": 4028,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n* DH_PrivateKey::public_value() was returning the wrong value\n* Various BigInt optimizations\n* The filters.h header now includes hex.h and base64.h\n* Moved Counter mode to ctr.h\n* Fixed a couple minor problems with VC++ 7\n* Fixed problems with the RPM spec file\n",
                    "rendered": {
                      "text": "\n* DH_PrivateKey::public_value() was returning the wrong value\n* Various BigInt optimizations\n* The filters.h header now includes hex.h and base64.h\n* Moved Counter mode to ctr.h\n* Fixed a couple minor problems with VC++ 7\n* Fixed problems with the RPM spec file\n",
                      "markdown": "`\n* DH_PrivateKey::public_value() was returning the wrong value\n* Various BigInt optimizations\n* The filters.h header now includes hex.h and base64.h\n* Moved Counter mode to ctr.h\n* Fixed a couple minor problems with VC++ 7\n* Fixed problems with the RPM spec file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3694,
                  "startColumn": 17,
                  "endLine": 3694,
                  "endColumn": 23,
                  "snippet": {
                    "text": "* Added an option to specify the line width when encoding PEM\n* Removed the \"rng/safe_longterm\" option; it's always on now\n* Changed the cipher used for RNG super-encryption from ARC4 to WiderWake4+1\n* Cleaned up the base64/hex encoders and decoders\n* Added an ASN.1/BER decoder as an example\n* AES had its internals marked 'public' in previous versions\n* Changed the value of the ASN.1 NO_OBJECT enum\n",
                    "rendered": {
                      "text": "* Added an option to specify the line width when encoding PEM\n* Removed the \"rng/safe_longterm\" option; it's always on now\n* Changed the cipher used for RNG super-encryption from ARC4 to WiderWake4+1\n* Cleaned up the base64/hex encoders and decoders\n* Added an ASN.1/BER decoder as an example\n* AES had its internals marked 'public' in previous versions\n* Changed the value of the ASN.1 NO_OBJECT enum\n",
                      "markdown": "`* Added an option to specify the line width when encoding PEM\n* Removed the \"rng/safe_longterm\" option; it's always on now\n* Changed the cipher used for RNG super-encryption from ARC4 to WiderWake4+1\n* Cleaned up the base64/hex encoders and decoders\n* Added an ASN.1/BER decoder as an example\n* AES had its internals marked 'public' in previous versions\n* Changed the value of the ASN.1 NO_OBJECT enum\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3148,
                  "startColumn": 22,
                  "endLine": 3148,
                  "endColumn": 28,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix some base64 decoder bugs\n* Add a new option to base64 encoding, to always append a newline\n* Fix some build problems under Visual Studio with debug enabled\n* Fix a bug in BER_Decoder that was triggered under some compilers\n\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix some base64 decoder bugs\n* Add a new option to base64 encoding, to always append a newline\n* Fix some build problems under Visual Studio with debug enabled\n* Fix a bug in BER_Decoder that was triggered under some compilers\n\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix some base64 decoder bugs\n* Add a new option to base64 encoding, to always append a newline\n* Fix some build problems under Visual Studio with debug enabled\n* Fix a bug in BER_Decoder that was triggered under some compilers\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3147,
                  "startColumn": 11,
                  "endLine": 3147,
                  "endColumn": 17,
                  "snippet": {
                    "text": "Version 1.6.1, 2007-01-20\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix some base64 decoder bugs\n* Add a new option to base64 encoding, to always append a newline\n* Fix some build problems under Visual Studio with debug enabled\n* Fix a bug in BER_Decoder that was triggered under some compilers\n",
                    "rendered": {
                      "text": "Version 1.6.1, 2007-01-20\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix some base64 decoder bugs\n* Add a new option to base64 encoding, to always append a newline\n* Fix some build problems under Visual Studio with debug enabled\n* Fix a bug in BER_Decoder that was triggered under some compilers\n",
                      "markdown": "`Version 1.6.1, 2007-01-20\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix some base64 decoder bugs\n* Add a new option to base64 encoding, to always append a newline\n* Fix some build problems under Visual Studio with debug enabled\n* Fix a bug in BER_Decoder that was triggered under some compilers\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2488,
                  "startColumn": 6,
                  "endLine": 2488,
                  "endColumn": 12,
                  "snippet": {
                    "text": "* Use small tables in the first round of AES\n* Removed AES class: app must choose AES-128, AES-192, or AES-256\n* Add hex encoding/decoding functions that can be used without a Pipe\n* Add base64 encoding functions that can be used without a Pipe\n* Add to_string function to X509_Certificate\n* Add support for dynamic engine loading on Windows\n* Replace BlockCipher::BLOCK_SIZE attribute with function block_size()\n",
                    "rendered": {
                      "text": "* Use small tables in the first round of AES\n* Removed AES class: app must choose AES-128, AES-192, or AES-256\n* Add hex encoding/decoding functions that can be used without a Pipe\n* Add base64 encoding functions that can be used without a Pipe\n* Add to_string function to X509_Certificate\n* Add support for dynamic engine loading on Windows\n* Replace BlockCipher::BLOCK_SIZE attribute with function block_size()\n",
                      "markdown": "`* Use small tables in the first round of AES\n* Removed AES class: app must choose AES-128, AES-192, or AES-256\n* Add hex encoding/decoding functions that can be used without a Pipe\n* Add base64 encoding functions that can be used without a Pipe\n* Add to_string function to X509_Certificate\n* Add support for dynamic engine loading on Windows\n* Replace BlockCipher::BLOCK_SIZE attribute with function block_size()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2267,
                  "startColumn": 38,
                  "endLine": 2267,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  of GCC\n\n* Functions for base64 decoding that work standalone (without needing\n  to use a pipe) have been added to ``base64.h``\n\n* The function ``BigInt::to_u32bit`` was inadvertently removed in 1.9.11\n  and has been added back.\n",
                    "rendered": {
                      "text": "  of GCC\n\n* Functions for base64 decoding that work standalone (without needing\n  to use a pipe) have been added to ``base64.h``\n\n* The function ``BigInt::to_u32bit`` was inadvertently removed in 1.9.11\n  and has been added back.\n",
                      "markdown": "`  of GCC\n\n* Functions for base64 decoding that work standalone (without needing\n  to use a pipe) have been added to ``base64.h``\n\n* The function ``BigInt::to_u32bit`` was inadvertently removed in 1.9.11\n  and has been added back.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2266,
                  "startColumn": 16,
                  "endLine": 2266,
                  "endColumn": 22,
                  "snippet": {
                    "text": "* TR1 support is not longer automatically assumed under older versions\n  of GCC\n\n* Functions for base64 decoding that work standalone (without needing\n  to use a pipe) have been added to ``base64.h``\n\n* The function ``BigInt::to_u32bit`` was inadvertently removed in 1.9.11\n",
                    "rendered": {
                      "text": "* TR1 support is not longer automatically assumed under older versions\n  of GCC\n\n* Functions for base64 decoding that work standalone (without needing\n  to use a pipe) have been added to ``base64.h``\n\n* The function ``BigInt::to_u32bit`` was inadvertently removed in 1.9.11\n",
                      "markdown": "`* TR1 support is not longer automatically assumed under older versions\n  of GCC\n\n* Functions for base64 decoding that work standalone (without needing\n  to use a pipe) have been added to ``base64.h``\n\n* The function ``BigInt::to_u32bit`` was inadvertently removed in 1.9.11\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1647,
                  "startColumn": 13,
                  "endLine": 1647,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  which runs the tests, and ``botan`` which is used as a driver to call\n  into various subcommands which can also act as examples of library\n  use, much in the manner of the ``openssl`` command. It understands the\n  commands ``base64``, ``asn1``, ``x509``, ``tls_client``, ``tls_server``,\n  ``bcrypt``, ``keygen``, ``speed``, and various others. As part of this\n  change many obsolete, duplicated, or one-off examples were removed,\n  while others were extended with new functionality. Contributions of\n",
                    "rendered": {
                      "text": "  which runs the tests, and ``botan`` which is used as a driver to call\n  into various subcommands which can also act as examples of library\n  use, much in the manner of the ``openssl`` command. It understands the\n  commands ``base64``, ``asn1``, ``x509``, ``tls_client``, ``tls_server``,\n  ``bcrypt``, ``keygen``, ``speed``, and various others. As part of this\n  change many obsolete, duplicated, or one-off examples were removed,\n  while others were extended with new functionality. Contributions of\n",
                      "markdown": "`  which runs the tests, and ``botan`` which is used as a driver to call\n  into various subcommands which can also act as examples of library\n  use, much in the manner of the ``openssl`` command. It understands the\n  commands ``base64``, ``asn1``, ``x509``, ``tls_client``, ``tls_server``,\n  ``bcrypt``, ``keygen``, ``speed``, and various others. As part of this\n  change many obsolete, duplicated, or one-off examples were removed,\n  while others were extended with new functionality. Contributions of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 64,
                  "endLine": 134,
                  "endColumn": 70,
                  "snippet": {
                    "text": "* The entropy sources for EGD and BeOS, as well as the Unix entropy source which\n  executed processes to get statistical data have been removed. (GH #692)\n\n* The openpgp module (which just implemented OpenPGP compatible base64 encoding\n  and decoding, nothing else) has been removed.\n\n* Added new configure.py argument `--optimize-for-size`. Currently just sets\n",
                    "rendered": {
                      "text": "* The entropy sources for EGD and BeOS, as well as the Unix entropy source which\n  executed processes to get statistical data have been removed. (GH #692)\n\n* The openpgp module (which just implemented OpenPGP compatible base64 encoding\n  and decoding, nothing else) has been removed.\n\n* Added new configure.py argument `--optimize-for-size`. Currently just sets\n",
                      "markdown": "`* The entropy sources for EGD and BeOS, as well as the Unix entropy source which\n  executed processes to get statistical data have been removed. (GH #692)\n\n* The openpgp module (which just implemented OpenPGP compatible base64 encoding\n  and decoding, nothing else) has been removed.\n\n* Added new configure.py argument `--optimize-for-size`. Currently just sets\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4325,
                  "startColumn": 48,
                  "endLine": 4325,
                  "endColumn": 52,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Rewrote configure script: more consistent and complete\n* Made it easier to find out parameters of types at run time (opencl.h)\n* New functions for finding the version being used (version.h)\n* New SymmetricKey interface for Filters (symkey.h)\n* InvalidKeyLength now records what the invalid key length was\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Rewrote configure script: more consistent and complete\n* Made it easier to find out parameters of types at run time (opencl.h)\n* New functions for finding the version being used (version.h)\n* New SymmetricKey interface for Filters (symkey.h)\n* InvalidKeyLength now records what the invalid key length was\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Rewrote configure script: more consistent and complete\n* Made it easier to find out parameters of types at run time (opencl.h)\n* New functions for finding the version being used (version.h)\n* New SymmetricKey interface for Filters (symkey.h)\n* InvalidKeyLength now records what the invalid key length was\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4066,
                  "startColumn": 12,
                  "endLine": 4066,
                  "endColumn": 16,
                  "snippet": {
                    "text": "* Removed various deprecated types and headers\n* Cleaned up the Pipe interface a bit\n* Minor additions to the documentation\n* First stab at a Visual C++ makefile (doc/Makefile.vc7)\n\nVersion 0.8.6, 2002-07-25\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* Removed various deprecated types and headers\n* Cleaned up the Pipe interface a bit\n* Minor additions to the documentation\n* First stab at a Visual C++ makefile (doc/Makefile.vc7)\n\nVersion 0.8.6, 2002-07-25\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* Removed various deprecated types and headers\n* Cleaned up the Pipe interface a bit\n* Minor additions to the documentation\n* First stab at a Visual C++ makefile (doc/Makefile.vc7)\n\nVersion 0.8.6, 2002-07-25\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4061,
                  "startColumn": 25,
                  "endLine": 4061,
                  "endColumn": 29,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fixed bugs in EME1 and EMSA4\n* Fixed a potential crash at shutdown\n* Cipher modes returned an ill-formed name\n* Removed various deprecated types and headers\n* Cleaned up the Pipe interface a bit\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fixed bugs in EME1 and EMSA4\n* Fixed a potential crash at shutdown\n* Cipher modes returned an ill-formed name\n* Removed various deprecated types and headers\n* Cleaned up the Pipe interface a bit\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fixed bugs in EME1 and EMSA4\n* Fixed a potential crash at shutdown\n* Cipher modes returned an ill-formed name\n* Removed various deprecated types and headers\n* Cleaned up the Pipe interface a bit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3937,
                  "startColumn": 36,
                  "endLine": 3937,
                  "endColumn": 40,
                  "snippet": {
                    "text": "* X9.42 DH parameters use a PEM label of 'X942 DH PARAMETERS'\n* Added key pair consistency checking\n* Fixed a compatibility problem with gcc 2.96 (pointed out by Hany Greiss)\n* A botan-config script is generated at configure time\n* Documentation updates\n\nVersion 1.1.3, 2002-11-03\n",
                    "rendered": {
                      "text": "* X9.42 DH parameters use a PEM label of 'X942 DH PARAMETERS'\n* Added key pair consistency checking\n* Fixed a compatibility problem with gcc 2.96 (pointed out by Hany Greiss)\n* A botan-config script is generated at configure time\n* Documentation updates\n\nVersion 1.1.3, 2002-11-03\n",
                      "markdown": "`* X9.42 DH parameters use a PEM label of 'X942 DH PARAMETERS'\n* Added key pair consistency checking\n* Fixed a compatibility problem with gcc 2.96 (pointed out by Hany Greiss)\n* A botan-config script is generated at configure time\n* Documentation updates\n\nVersion 1.1.3, 2002-11-03\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3621,
                  "startColumn": 40,
                  "endLine": 3621,
                  "endColumn": 44,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Added a new module 'minimal', which disables most algorithms\n* SecureAllocator allocates a few blocks at startup\n* A few minor MPI cleanups\n* RPM spec file cleanups and fixes\n\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Added a new module 'minimal', which disables most algorithms\n* SecureAllocator allocates a few blocks at startup\n* A few minor MPI cleanups\n* RPM spec file cleanups and fixes\n\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Added a new module 'minimal', which disables most algorithms\n* SecureAllocator allocates a few blocks at startup\n* A few minor MPI cleanups\n* RPM spec file cleanups and fixes\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3552,
                  "startColumn": 45,
                  "endLine": 3552,
                  "endColumn": 49,
                  "snippet": {
                    "text": "* Fixed two show-stopping bugs in PKCS10_Request\n* Added some sanity checks in Pipe/Filter\n* The DNS and URI entries would get swapped in subjectAlternativeNames\n* MAC_Filter is now willing to not take a key at creation time\n* Setting the expiration times of certs and CRLs is more flexible\n* Fixed problems building on AIX with GCC\n* Fixed some problems in the tutorial pointed out by Dominik Vogt\n",
                    "rendered": {
                      "text": "* Fixed two show-stopping bugs in PKCS10_Request\n* Added some sanity checks in Pipe/Filter\n* The DNS and URI entries would get swapped in subjectAlternativeNames\n* MAC_Filter is now willing to not take a key at creation time\n* Setting the expiration times of certs and CRLs is more flexible\n* Fixed problems building on AIX with GCC\n* Fixed some problems in the tutorial pointed out by Dominik Vogt\n",
                      "markdown": "`* Fixed two show-stopping bugs in PKCS10_Request\n* Added some sanity checks in Pipe/Filter\n* The DNS and URI entries would get swapped in subjectAlternativeNames\n* MAC_Filter is now willing to not take a key at creation time\n* Setting the expiration times of certs and CRLs is more flexible\n* Fixed problems building on AIX with GCC\n* Fixed some problems in the tutorial pointed out by Dominik Vogt\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3527,
                  "startColumn": 41,
                  "endLine": 3527,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n* Major fixes for Cygwin builds\n* Minor MacOS X install fixes\n* The configure script is a little better at picking the right modules\n* Removed ml_unix from the 'unix' module set for Cygwin compatibility\n* Fixed a stupid compile problem in pkcs10.h\n\n",
                    "rendered": {
                      "text": "\n* Major fixes for Cygwin builds\n* Minor MacOS X install fixes\n* The configure script is a little better at picking the right modules\n* Removed ml_unix from the 'unix' module set for Cygwin compatibility\n* Fixed a stupid compile problem in pkcs10.h\n\n",
                      "markdown": "`\n* Major fixes for Cygwin builds\n* Minor MacOS X install fixes\n* The configure script is a little better at picking the right modules\n* Removed ml_unix from the 'unix' module set for Cygwin compatibility\n* Fixed a stupid compile problem in pkcs10.h\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3195,
                  "startColumn": 1,
                  "endLine": 3195,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Initialization failures are dealt with somewhat better\n* Add an example implementing Pollard's Rho algorithm\n* Better option handling in the test/benchmark tool\n* Expand the xor_ciph example to support longer keys\n* Some updates to the documentation\n\nVersion 1.5.9, 2006-07-12\n",
                    "rendered": {
                      "text": "* Initialization failures are dealt with somewhat better\n* Add an example implementing Pollard's Rho algorithm\n* Better option handling in the test/benchmark tool\n* Expand the xor_ciph example to support longer keys\n* Some updates to the documentation\n\nVersion 1.5.9, 2006-07-12\n",
                      "markdown": "`* Initialization failures are dealt with somewhat better\n* Add an example implementing Pollard's Rho algorithm\n* Better option handling in the test/benchmark tool\n* Expand the xor_ciph example to support longer keys\n* Some updates to the documentation\n\nVersion 1.5.9, 2006-07-12\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3188,
                  "startColumn": 1,
                  "endLine": 3188,
                  "endColumn": 9,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add x86 assembler versions of MD4, MD5, and SHA-1\n* Expand InitializerOptions' language to support on/off switches\n* Fix definition of OID 2.5.4.8; was accidentally changed in 1.5.9\n* Fix possible resource leaks in the mmap allocator\n* Slightly optimized buffering in MDx_HashFunction\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add x86 assembler versions of MD4, MD5, and SHA-1\n* Expand InitializerOptions' language to support on/off switches\n* Fix definition of OID 2.5.4.8; was accidentally changed in 1.5.9\n* Fix possible resource leaks in the mmap allocator\n* Slightly optimized buffering in MDx_HashFunction\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add x86 assembler versions of MD4, MD5, and SHA-1\n* Expand InitializerOptions' language to support on/off switches\n* Fix definition of OID 2.5.4.8; was accidentally changed in 1.5.9\n* Fix possible resource leaks in the mmap allocator\n* Slightly optimized buffering in MDx_HashFunction\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3135,
                  "startColumn": 1,
                  "endLine": 3135,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Somewhat better support for out of tree builds\n* Minor optimizations for RC2 and Tiger\n* Documentation updates\n* Update the todo list\n\nVersion 1.6.2, 2007-03-24\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* Somewhat better support for out of tree builds\n* Minor optimizations for RC2 and Tiger\n* Documentation updates\n* Update the todo list\n\nVersion 1.6.2, 2007-03-24\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* Somewhat better support for out of tree builds\n* Minor optimizations for RC2 and Tiger\n* Documentation updates\n* Update the todo list\n\nVersion 1.6.2, 2007-03-24\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2938,
                  "startColumn": 1,
                  "endLine": 2938,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Minimize internal dependencies, allowing for smaller build configurations\n* Add new User Manual and Architecture Guide from FlexSecure GmbH\n* Alter configure.pl options for better autotools compatibility\n* Update build instructions for recent changes to configure.pl\n* Fix CPU detection using /proc/cpuinfo\n\nVersion 1.7.14, 2008-09-30\n",
                    "rendered": {
                      "text": "* Minimize internal dependencies, allowing for smaller build configurations\n* Add new User Manual and Architecture Guide from FlexSecure GmbH\n* Alter configure.pl options for better autotools compatibility\n* Update build instructions for recent changes to configure.pl\n* Fix CPU detection using /proc/cpuinfo\n\nVersion 1.7.14, 2008-09-30\n",
                      "markdown": "`* Minimize internal dependencies, allowing for smaller build configurations\n* Add new User Manual and Architecture Guide from FlexSecure GmbH\n* Alter configure.pl options for better autotools compatibility\n* Update build instructions for recent changes to configure.pl\n* Fix CPU detection using /proc/cpuinfo\n\nVersion 1.7.14, 2008-09-30\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2559,
                  "startColumn": 15,
                  "endLine": 2559,
                  "endColumn": 19,
                  "snippet": {
                    "text": "Add ``Keyed_Filter::valid_iv_length`` which makes it possible to query\nas to what IV length(s) a particular filter allows. Previously,\npartially because there was no such query mechanism, if a filter did\nnot support IVs at all, then calls to ``set_iv`` would be silently\nignored. Now an exception about the invalid IV length will be thrown.\n\nThe default iteration count for the password based encryption schemes\n",
                    "rendered": {
                      "text": "Add ``Keyed_Filter::valid_iv_length`` which makes it possible to query\nas to what IV length(s) a particular filter allows. Previously,\npartially because there was no such query mechanism, if a filter did\nnot support IVs at all, then calls to ``set_iv`` would be silently\nignored. Now an exception about the invalid IV length will be thrown.\n\nThe default iteration count for the password based encryption schemes\n",
                      "markdown": "`Add ``Keyed_Filter::valid_iv_length`` which makes it possible to query\nas to what IV length(s) a particular filter allows. Previously,\npartially because there was no such query mechanism, if a filter did\nnot support IVs at all, then calls to ``set_iv`` would be silently\nignored. Now an exception about the invalid IV length will be thrown.\n\nThe default iteration count for the password based encryption schemes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2535,
                  "startColumn": 48,
                  "endLine": 2535,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  than the table-based implementation on some processors. The current\n  code has been tested with GCC 4.5, Visual C++ 2008, and Clang 2.8.\n\n* Support for dynamically loading Engine objects at runtime was also\n  added. Currently only system that use ``dlopen``-style dynamic\n  linking are supported.\n\n",
                    "rendered": {
                      "text": "  than the table-based implementation on some processors. The current\n  code has been tested with GCC 4.5, Visual C++ 2008, and Clang 2.8.\n\n* Support for dynamically loading Engine objects at runtime was also\n  added. Currently only system that use ``dlopen``-style dynamic\n  linking are supported.\n\n",
                      "markdown": "`  than the table-based implementation on some processors. The current\n  code has been tested with GCC 4.5, Visual C++ 2008, and Clang 2.8.\n\n* Support for dynamically loading Engine objects at runtime was also\n  added. Currently only system that use ``dlopen``-style dynamic\n  linking are supported.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2482,
                  "startColumn": 1,
                  "endLine": 2482,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  were all removed, and several other functions, like clear and\n  resize, have changed meaning.\n\n* Update Skein-512 to match the v1.3 specification\n* Fix a number of CRL encoding and decoding bugs\n* Counter mode now always encrypts 256 blocks in parallel\n* Use small tables in the first round of AES\n",
                    "rendered": {
                      "text": "  were all removed, and several other functions, like clear and\n  resize, have changed meaning.\n\n* Update Skein-512 to match the v1.3 specification\n* Fix a number of CRL encoding and decoding bugs\n* Counter mode now always encrypts 256 blocks in parallel\n* Use small tables in the first round of AES\n",
                      "markdown": "`  were all removed, and several other functions, like clear and\n  resize, have changed meaning.\n\n* Update Skein-512 to match the v1.3 specification\n* Fix a number of CRL encoding and decoding bugs\n* Counter mode now always encrypts 256 blocks in parallel\n* Use small tables in the first round of AES\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2457,
                  "startColumn": 1,
                  "endLine": 2457,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Add the Keccak hash function\n* Fix compilation problems in Python wrappers\n* Fix compilation problem in OpenSSL engine\n* Update SQLite3 database encryption codec\n\nVersion 1.9.11, 2010-11-29\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* Add the Keccak hash function\n* Fix compilation problems in Python wrappers\n* Fix compilation problem in OpenSSL engine\n* Update SQLite3 database encryption codec\n\nVersion 1.9.11, 2010-11-29\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* Add the Keccak hash function\n* Fix compilation problems in Python wrappers\n* Fix compilation problem in OpenSSL engine\n* Update SQLite3 database encryption codec\n\nVersion 1.9.11, 2010-11-29\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2392,
                  "startColumn": 41,
                  "endLine": 2392,
                  "endColumn": 45,
                  "snippet": {
                    "text": "* First release candidate for 1.10.0\n\n* Modify how message expansion is done in SHA-256 and SHA-512.\n  Instead of expanding the entire message at the start, compute them\n  in the minimum number of registers. Values are computed 15 rounds\n  before they are needed. On a Core i7-860, GCC 4.5.2, went from 143\n  to 157 MiB/s in SHA-256, and 211 to 256 MiB/s in SHA-512.\n",
                    "rendered": {
                      "text": "* First release candidate for 1.10.0\n\n* Modify how message expansion is done in SHA-256 and SHA-512.\n  Instead of expanding the entire message at the start, compute them\n  in the minimum number of registers. Values are computed 15 rounds\n  before they are needed. On a Core i7-860, GCC 4.5.2, went from 143\n  to 157 MiB/s in SHA-256, and 211 to 256 MiB/s in SHA-512.\n",
                      "markdown": "`* First release candidate for 1.10.0\n\n* Modify how message expansion is done in SHA-256 and SHA-512.\n  Instead of expanding the entire message at the start, compute them\n  in the minimum number of registers. Values are computed 15 rounds\n  before they are needed. On a Core i7-860, GCC 4.5.2, went from 143\n  to 157 MiB/s in SHA-256, and 211 to 256 MiB/s in SHA-512.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2301,
                  "startColumn": 33,
                  "endLine": 2301,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  ``fpe_fe1.h``, and the functions are named ``fe1_encrypt`` and\n  ``fe1_decrypt``.\n\n* New options to ``configure.py`` control what tools are used for\n  documentation generation. The ``--with-sphinx`` option enables using\n  Sphinx to convert ReST into HTML; otherwise the ReST sources are\n  installed directly. If ``--with-doxygen`` is used, Doxygen will run\n",
                    "rendered": {
                      "text": "  ``fpe_fe1.h``, and the functions are named ``fe1_encrypt`` and\n  ``fe1_decrypt``.\n\n* New options to ``configure.py`` control what tools are used for\n  documentation generation. The ``--with-sphinx`` option enables using\n  Sphinx to convert ReST into HTML; otherwise the ReST sources are\n  installed directly. If ``--with-doxygen`` is used, Doxygen will run\n",
                      "markdown": "`  ``fpe_fe1.h``, and the functions are named ``fe1_encrypt`` and\n  ``fe1_decrypt``.\n\n* New options to ``configure.py`` control what tools are used for\n  documentation generation. The ``--with-sphinx`` option enables using\n  Sphinx to convert ReST into HTML; otherwise the ReST sources are\n  installed directly. If ``--with-doxygen`` is used, Doxygen will run\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2231,
                  "startColumn": 19,
                  "endLine": 2231,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n* In OAEP decoding, scan for the delimiter bytes using a loop that is\n  written without conditionals so as to help avoid timing analysis.\n  Unfortunately GCC at least is 'smart' enough to compile it to\n  jumps anyway.\n\n* The SSE2 implementation of IDEA did not work correctly when compiled\n",
                    "rendered": {
                      "text": "\n* In OAEP decoding, scan for the delimiter bytes using a loop that is\n  written without conditionals so as to help avoid timing analysis.\n  Unfortunately GCC at least is 'smart' enough to compile it to\n  jumps anyway.\n\n* The SSE2 implementation of IDEA did not work correctly when compiled\n",
                      "markdown": "`\n* In OAEP decoding, scan for the delimiter bytes using a loop that is\n  written without conditionals so as to help avoid timing analysis.\n  Unfortunately GCC at least is 'smart' enough to compile it to\n  jumps anyway.\n\n* The SSE2 implementation of IDEA did not work correctly when compiled\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2158,
                  "startColumn": 37,
                  "endLine": 2158,
                  "endColumn": 41,
                  "snippet": {
                    "text": "will allow running it under Python 2.5:\n``perl -pi -e 's/except (.*) as (.*):/except $1, $2:/g' configure.py``\n\nNote that Python 2.4 is not supported at all.\n\nVersion 1.10.1, 2011-07-11\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "will allow running it under Python 2.5:\n``perl -pi -e 's/except (.*) as (.*):/except $1, $2:/g' configure.py``\n\nNote that Python 2.4 is not supported at all.\n\nVersion 1.10.1, 2011-07-11\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`will allow running it under Python 2.5:\n``perl -pi -e 's/except (.*) as (.*):/except $1, $2:/g' configure.py``\n\nNote that Python 2.4 is not supported at all.\n\nVersion 1.10.1, 2011-07-11\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2085,
                  "startColumn": 27,
                  "endLine": 2085,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nA change in 1.10.2 accidentally broke ABI compatibility with 1.10.1\nand earlier versions, causing programs compiled against 1.10.1 to\ncrash if linked with 1.10.2 at runtime.\n\nRecent versions of OpenSSL include extra information in ECC private\nkeys, the presence of which caused an exception when such a key was\n",
                    "rendered": {
                      "text": "\nA change in 1.10.2 accidentally broke ABI compatibility with 1.10.1\nand earlier versions, causing programs compiled against 1.10.1 to\ncrash if linked with 1.10.2 at runtime.\n\nRecent versions of OpenSSL include extra information in ECC private\nkeys, the presence of which caused an exception when such a key was\n",
                      "markdown": "`\nA change in 1.10.2 accidentally broke ABI compatibility with 1.10.1\nand earlier versions, causing programs compiled against 1.10.1 to\ncrash if linked with 1.10.2 at runtime.\n\nRecent versions of OpenSSL include extra information in ECC private\nkeys, the presence of which caused an exception when such a key was\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2049,
                  "startColumn": 27,
                  "endLine": 2049,
                  "endColumn": 31,
                  "snippet": {
                    "text": "memory current Linux kernels allow unpriveledged users to lock.\n\nA filter using LZMA was contributed by Vojtech Kral. It is available\nif LZMA support was enabled at compilation time by passing\n``--with-lzma`` to ``configure.py``.\n\n:rfc:`5915` adds some extended information which can be included in\n",
                    "rendered": {
                      "text": "memory current Linux kernels allow unpriveledged users to lock.\n\nA filter using LZMA was contributed by Vojtech Kral. It is available\nif LZMA support was enabled at compilation time by passing\n``--with-lzma`` to ``configure.py``.\n\n:rfc:`5915` adds some extended information which can be included in\n",
                      "markdown": "`memory current Linux kernels allow unpriveledged users to lock.\n\nA filter using LZMA was contributed by Vojtech Kral. It is available\nif LZMA support was enabled at compilation time by passing\n``--with-lzma`` to ``configure.py``.\n\n:rfc:`5915` adds some extended information which can be included in\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1943,
                  "startColumn": 11,
                  "endLine": 1943,
                  "endColumn": 15,
                  "snippet": {
                    "text": "`pref_version``, which previously controlled this, has been removed.\n\n`TLS::Session_Manager_In_Memory`` now chooses a random\n256-bit key at startup and encrypts all sessions (using the existing\n`TLS::Session::encrypt`` mechanism) while they are stored in\nmemory. This is primarily to reduce pressure on locked memory, as each\nsession normally requires 48 bytes of locked memory for the master\n",
                    "rendered": {
                      "text": "`pref_version``, which previously controlled this, has been removed.\n\n`TLS::Session_Manager_In_Memory`` now chooses a random\n256-bit key at startup and encrypts all sessions (using the existing\n`TLS::Session::encrypt`` mechanism) while they are stored in\nmemory. This is primarily to reduce pressure on locked memory, as each\nsession normally requires 48 bytes of locked memory for the master\n",
                      "markdown": "``pref_version``, which previously controlled this, has been removed.\n\n`TLS::Session_Manager_In_Memory`` now chooses a random\n256-bit key at startup and encrypts all sessions (using the existing\n`TLS::Session::encrypt`` mechanism) while they are stored in\nmemory. This is primarily to reduce pressure on locked memory, as each\nsession normally requires 48 bytes of locked memory for the master\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1814,
                  "startColumn": 58,
                  "endLine": 1814,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n* The TLS channels now accept a new parameter specifying how many\n  bytes to preallocate for the record handling buffers, which allows\n  an application some control over how much memory is used at runtime\n  for a particular connection.\n\n* Applications can now send arbitrary TLS alert messages using\n",
                    "rendered": {
                      "text": "\n* The TLS channels now accept a new parameter specifying how many\n  bytes to preallocate for the record handling buffers, which allows\n  an application some control over how much memory is used at runtime\n  for a particular connection.\n\n* Applications can now send arbitrary TLS alert messages using\n",
                      "markdown": "`\n* The TLS channels now accept a new parameter specifying how many\n  bytes to preallocate for the record handling buffers, which allows\n  an application some control over how much memory is used at runtime\n  for a particular connection.\n\n* Applications can now send arbitrary TLS alert messages using\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1814,
                  "startColumn": 21,
                  "endLine": 1814,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n* The TLS channels now accept a new parameter specifying how many\n  bytes to preallocate for the record handling buffers, which allows\n  an application some control over how much memory is used at runtime\n  for a particular connection.\n\n* Applications can now send arbitrary TLS alert messages using\n",
                    "rendered": {
                      "text": "\n* The TLS channels now accept a new parameter specifying how many\n  bytes to preallocate for the record handling buffers, which allows\n  an application some control over how much memory is used at runtime\n  for a particular connection.\n\n* Applications can now send arbitrary TLS alert messages using\n",
                      "markdown": "`\n* The TLS channels now accept a new parameter specifying how many\n  bytes to preallocate for the record handling buffers, which allows\n  an application some control over how much memory is used at runtime\n  for a particular connection.\n\n* Applications can now send arbitrary TLS alert messages using\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1798,
                  "startColumn": 25,
                  "endLine": 1798,
                  "endColumn": 29,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* CPU specific extensions are now always compiled if support for the\n  operations is available at build time, and flags enabling use of\n  extra operations (such as SSE2) are only included when compiling\n  files which specifically request support. This means, for instance,\n  that the SSSE3 and AES-NI implementations of AES are always included\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* CPU specific extensions are now always compiled if support for the\n  operations is available at build time, and flags enabling use of\n  extra operations (such as SSE2) are only included when compiling\n  files which specifically request support. This means, for instance,\n  that the SSSE3 and AES-NI implementations of AES are always included\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* CPU specific extensions are now always compiled if support for the\n  operations is available at build time, and flags enabling use of\n  extra operations (such as SSE2) are only included when compiling\n  files which specifically request support. This means, for instance,\n  that the SSSE3 and AES-NI implementations of AES are always included\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1756,
                  "startColumn": 27,
                  "endLine": 1756,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  or read just a few bytes, skip /dev/urandom, fail to satisfy the entropy\n  target, and the poll would continue using other (slower) sources. This caused\n  substantial performance/latency problems in RNG heavy applications. Now all\n  devices are selected over at once, with the effect that a full read from\n  urandom always occurs, along with however much (if any) output is available\n  from blocking sources.\n\n",
                    "rendered": {
                      "text": "  or read just a few bytes, skip /dev/urandom, fail to satisfy the entropy\n  target, and the poll would continue using other (slower) sources. This caused\n  substantial performance/latency problems in RNG heavy applications. Now all\n  devices are selected over at once, with the effect that a full read from\n  urandom always occurs, along with however much (if any) output is available\n  from blocking sources.\n\n",
                      "markdown": "`  or read just a few bytes, skip /dev/urandom, fail to satisfy the entropy\n  target, and the poll would continue using other (slower) sources. This caused\n  substantial performance/latency problems in RNG heavy applications. Now all\n  devices are selected over at once, with the effect that a full read from\n  urandom always occurs, along with however much (if any) output is available\n  from blocking sources.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1218,
                  "startColumn": 9,
                  "endLine": 1218,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n* The library now builds on Visual C++ 2013\n\n* The GCM update granularity was reduced from 4096 to 16 bytes.\n\n* Fix a bug that prevented building the amalgamation until a non-amalgamation\n  configuration was performed first in the same directory.\n",
                    "rendered": {
                      "text": "\n* The library now builds on Visual C++ 2013\n\n* The GCM update granularity was reduced from 4096 to 16 bytes.\n\n* Fix a bug that prevented building the amalgamation until a non-amalgamation\n  configuration was performed first in the same directory.\n",
                      "markdown": "`\n* The library now builds on Visual C++ 2013\n\n* The GCM update granularity was reduced from 4096 to 16 bytes.\n\n* Fix a bug that prevented building the amalgamation until a non-amalgamation\n  configuration was performed first in the same directory.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1138,
                  "startColumn": 29,
                  "endLine": 1138,
                  "endColumn": 33,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* In this release Botan has switched VCS from ``monotone`` to ``git``,\n  and is now hosted on github at https://github.com/randombit/botan\n\n* The TLS client called ``std::set_difference`` on an invalid iterator\n  pair. This could potentially lead to a crash depending on the\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* In this release Botan has switched VCS from ``monotone`` to ``git``,\n  and is now hosted on github at https://github.com/randombit/botan\n\n* The TLS client called ``std::set_difference`` on an invalid iterator\n  pair. This could potentially lead to a crash depending on the\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* In this release Botan has switched VCS from ``monotone`` to ``git``,\n  and is now hosted on github at https://github.com/randombit/botan\n\n* The TLS client called ``std::set_difference`` on an invalid iterator\n  pair. This could potentially lead to a crash depending on the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1115,
                  "startColumn": 18,
                  "endLine": 1115,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n* SECURITY: The BER decoder would crash due to reading from offset 0\n  of an empty vector if it encountered a BIT STRING which did not\n  contain any data at all. As the type requires a 1 byte field this is\n  not valid BER but could occur in malformed data. Found with afl.\n  CVE-2015-5726\n\n",
                    "rendered": {
                      "text": "\n* SECURITY: The BER decoder would crash due to reading from offset 0\n  of an empty vector if it encountered a BIT STRING which did not\n  contain any data at all. As the type requires a 1 byte field this is\n  not valid BER but could occur in malformed data. Found with afl.\n  CVE-2015-5726\n\n",
                      "markdown": "`\n* SECURITY: The BER decoder would crash due to reading from offset 0\n  of an empty vector if it encountered a BIT STRING which did not\n  contain any data at all. As the type requires a 1 byte field this is\n  not valid BER but could occur in malformed data. Found with afl.\n  CVE-2015-5726\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1083,
                  "startColumn": 9,
                  "endLine": 1083,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n* The TLS heartbeat extension is deprecated and unless strong arguments\n  are raised in its favor it will be removed in a future release.\n  Comment at https://github.com/randombit/botan/issues/187\n\n* The x86-32 assembly versions of MD4, MD5, SHA-1, and Serpent and the\n  x86-64 version of SHA-1 have been removed. With compilers from this\n",
                    "rendered": {
                      "text": "\n* The TLS heartbeat extension is deprecated and unless strong arguments\n  are raised in its favor it will be removed in a future release.\n  Comment at https://github.com/randombit/botan/issues/187\n\n* The x86-32 assembly versions of MD4, MD5, SHA-1, and Serpent and the\n  x86-64 version of SHA-1 have been removed. With compilers from this\n",
                      "markdown": "`\n* The TLS heartbeat extension is deprecated and unless strong arguments\n  are raised in its favor it will be removed in a future release.\n  Comment at https://github.com/randombit/botan/issues/187\n\n* The x86-32 assembly versions of MD4, MD5, SHA-1, and Serpent and the\n  x86-64 version of SHA-1 have been removed. With compilers from this\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1071,
                  "startColumn": 18,
                  "endLine": 1071,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n* SECURITY: The BER decoder would crash due to reading from offset 0\n  of an empty vector if it encountered a BIT STRING which did not\n  contain any data at all. As the type requires a 1 byte field this is\n  not valid BER but could occur in malformed data. Found with afl.\n  CVE-2015-5726\n\n",
                    "rendered": {
                      "text": "\n* SECURITY: The BER decoder would crash due to reading from offset 0\n  of an empty vector if it encountered a BIT STRING which did not\n  contain any data at all. As the type requires a 1 byte field this is\n  not valid BER but could occur in malformed data. Found with afl.\n  CVE-2015-5726\n\n",
                      "markdown": "`\n* SECURITY: The BER decoder would crash due to reading from offset 0\n  of an empty vector if it encountered a BIT STRING which did not\n  contain any data at all. As the type requires a 1 byte field this is\n  not valid BER but could occur in malformed data. Found with afl.\n  CVE-2015-5726\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1017,
                  "startColumn": 44,
                  "endLine": 1018,
                  "snippet": {
                    "text": "* Add new HMAC_DRBG constructor taking a name for the MAC to use, rather\n  than a pointer to an object.\n\n* The OCaml module is now a separate project at\n  https://github.com/randombit/botan-ocaml\n\n* The encrypted sqlite database support in contrib has moved to\n  https://github.com/randombit/botan-sqlite\n",
                    "rendered": {
                      "text": "* Add new HMAC_DRBG constructor taking a name for the MAC to use, rather\n  than a pointer to an object.\n\n* The OCaml module is now a separate project at\n  https://github.com/randombit/botan-ocaml\n\n* The encrypted sqlite database support in contrib has moved to\n  https://github.com/randombit/botan-sqlite\n",
                      "markdown": "`* Add new HMAC_DRBG constructor taking a name for the MAC to use, rather\n  than a pointer to an object.\n\n* The OCaml module is now a separate project at\n  https://github.com/randombit/botan-ocaml\n\n* The encrypted sqlite database support in contrib has moved to\n  https://github.com/randombit/botan-sqlite\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 981,
                  "startColumn": 67,
                  "endLine": 981,
                  "endColumn": 71,
                  "snippet": {
                    "text": "* DL_Group now prohibits creating a group smaller than 1024 bits.\n\n* Add System_RNG type. Previously the global system RNG was only accessible via\n  `system_rng` which returned a reference to the object. However is at times\n  useful to have a unique_ptr<RandomNumberGenerator> which will be either the\n  system RNG or an AutoSeeded_RNG, depending on availability, which this\n  additional type allows.\n",
                    "rendered": {
                      "text": "* DL_Group now prohibits creating a group smaller than 1024 bits.\n\n* Add System_RNG type. Previously the global system RNG was only accessible via\n  `system_rng` which returned a reference to the object. However is at times\n  useful to have a unique_ptr<RandomNumberGenerator> which will be either the\n  system RNG or an AutoSeeded_RNG, depending on availability, which this\n  additional type allows.\n",
                      "markdown": "`* DL_Group now prohibits creating a group smaller than 1024 bits.\n\n* Add System_RNG type. Previously the global system RNG was only accessible via\n  `system_rng` which returned a reference to the object. However is at times\n  useful to have a unique_ptr<RandomNumberGenerator> which will be either the\n  system RNG or an AutoSeeded_RNG, depending on availability, which this\n  additional type allows.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 955,
                  "startColumn": 46,
                  "endLine": 955,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  By writing the code such that it does not depend on secret inputs for branch\n  or memory indexes, such a side channel would be much less likely to exist.\n\n  The OAEP code has previously made an attempt at constant time operation, but\n  it used a construct which many compilers converted into a conditional jump.\n\n* Add support for using ctgrind (https://github.com/agl/ctgrind) to test that\n",
                    "rendered": {
                      "text": "  By writing the code such that it does not depend on secret inputs for branch\n  or memory indexes, such a side channel would be much less likely to exist.\n\n  The OAEP code has previously made an attempt at constant time operation, but\n  it used a construct which many compilers converted into a conditional jump.\n\n* Add support for using ctgrind (https://github.com/agl/ctgrind) to test that\n",
                      "markdown": "`  By writing the code such that it does not depend on secret inputs for branch\n  or memory indexes, such a side channel would be much less likely to exist.\n\n  The OAEP code has previously made an attempt at constant time operation, but\n  it used a construct which many compilers converted into a conditional jump.\n\n* Add support for using ctgrind (https://github.com/agl/ctgrind) to test that\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 874,
                  "startColumn": 37,
                  "endLine": 874,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  result of this, except that the output format of `botan-test` has changed.\n\n* Improved side channel countermeasures for the table based AES implementation.\n  The 4K T tables are computed (once) at runtime to avoid various cache based\n  attacks which are possible due to shared VMM mappings of read only tables.\n  Additionally every cache line of the table is read from prior to processing\n  the block(s).\n",
                    "rendered": {
                      "text": "  result of this, except that the output format of `botan-test` has changed.\n\n* Improved side channel countermeasures for the table based AES implementation.\n  The 4K T tables are computed (once) at runtime to avoid various cache based\n  attacks which are possible due to shared VMM mappings of read only tables.\n  Additionally every cache line of the table is read from prior to processing\n  the block(s).\n",
                      "markdown": "`  result of this, except that the output format of `botan-test` has changed.\n\n* Improved side channel countermeasures for the table based AES implementation.\n  The 4K T tables are computed (once) at runtime to avoid various cache based\n  attacks which are possible due to shared VMM mappings of read only tables.\n  Additionally every cache line of the table is read from prior to processing\n  the block(s).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 22,
                  "endLine": 695,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  with downstream distributors/users building XP compatiable binaries\n  which is still an option even in VS 2015\n\n* MCEIES requires KDF1 at runtime but did not require it be enabled\n  in the build. GH #369\n\n* Small optimizations to Keccak hash\n",
                    "rendered": {
                      "text": "  with downstream distributors/users building XP compatiable binaries\n  which is still an option even in VS 2015\n\n* MCEIES requires KDF1 at runtime but did not require it be enabled\n  in the build. GH #369\n\n* Small optimizations to Keccak hash\n",
                      "markdown": "`  with downstream distributors/users building XP compatiable binaries\n  which is still an option even in VS 2015\n\n* MCEIES requires KDF1 at runtime but did not require it be enabled\n  in the build. GH #369\n\n* Small optimizations to Keccak hash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 26,
                  "endLine": 608,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  in real time. The server similarly failed to check on the hash a\n  client used during client certificate authentication.\n\n* Reject empty TLS records at the record processing layer since such a\n  record is not valid regardless of the record type. Later checks\n  already correctly rejected empty records, but during processing such\n  a record, a pointer to the end of the vector was created, causing a\n",
                    "rendered": {
                      "text": "  in real time. The server similarly failed to check on the hash a\n  client used during client certificate authentication.\n\n* Reject empty TLS records at the record processing layer since such a\n  record is not valid regardless of the record type. Later checks\n  already correctly rejected empty records, but during processing such\n  a record, a pointer to the end of the vector was created, causing a\n",
                      "markdown": "`  in real time. The server similarly failed to check on the hash a\n  client used during client certificate authentication.\n\n* Reject empty TLS records at the record processing layer since such a\n  record is not valid regardless of the record type. Later checks\n  already correctly rejected empty records, but during processing such\n  a record, a pointer to the end of the vector was created, causing a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 573,
                  "startColumn": 30,
                  "endLine": 573,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  running Unix programs like ``arp``, ``netstat``, and ``dmesg`` which\n  produce information which may be difficult for a remote attacker to\n  guess. This exists primarily as a last-ditch for Unix systems\n  without ``/dev/random``. But at this point such systems effectively\n  no longer exist, and the use of ``fork`` and ``exec`` by the library\n  complicates effective application sandboxing.\n\n",
                    "rendered": {
                      "text": "  running Unix programs like ``arp``, ``netstat``, and ``dmesg`` which\n  produce information which may be difficult for a remote attacker to\n  guess. This exists primarily as a last-ditch for Unix systems\n  without ``/dev/random``. But at this point such systems effectively\n  no longer exist, and the use of ``fork`` and ``exec`` by the library\n  complicates effective application sandboxing.\n\n",
                      "markdown": "`  running Unix programs like ``arp``, ``netstat``, and ``dmesg`` which\n  produce information which may be difficult for a remote attacker to\n  guess. This exists primarily as a last-ditch for Unix systems\n  without ``/dev/random``. But at this point such systems effectively\n  no longer exist, and the use of ``fork`` and ``exec`` by the library\n  complicates effective application sandboxing.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 51,
                  "endLine": 535,
                  "endColumn": 55,
                  "snippet": {
                    "text": "  the (still experimental) OCB ciphersuites have changed.\n\n* Previously an unknown critical extension caused X.509 certificate\n  parsing to fail; such a cert could not be created at all. Now\n  parsing succeeds and the certificate validation fails with\n  an error indicating an unknown critical extension. GH #469\n\n",
                    "rendered": {
                      "text": "  the (still experimental) OCB ciphersuites have changed.\n\n* Previously an unknown critical extension caused X.509 certificate\n  parsing to fail; such a cert could not be created at all. Now\n  parsing succeeds and the certificate validation fails with\n  an error indicating an unknown critical extension. GH #469\n\n",
                      "markdown": "`  the (still experimental) OCB ciphersuites have changed.\n\n* Previously an unknown critical extension caused X.509 certificate\n  parsing to fail; such a cert could not be created at all. Now\n  parsing succeeds and the certificate validation fails with\n  an error indicating an unknown critical extension. GH #469\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 46,
                  "endLine": 520,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  Transform& or Keyed_Transform& to refer to a cipher should be replaced\n  by Cipher_Mode&. The compression algorithm interface has changed; the start\n  function now takes the per-message compression ratio to use. Previously the\n  compression level to use had to be set once, at creation time, and\n  the required ``secure_vector`` argument to ``start`` was required to be empty.\n  The new API is documented in `compression.rst` in the manual.\n\n",
                    "rendered": {
                      "text": "  Transform& or Keyed_Transform& to refer to a cipher should be replaced\n  by Cipher_Mode&. The compression algorithm interface has changed; the start\n  function now takes the per-message compression ratio to use. Previously the\n  compression level to use had to be set once, at creation time, and\n  the required ``secure_vector`` argument to ``start`` was required to be empty.\n  The new API is documented in `compression.rst` in the manual.\n\n",
                      "markdown": "`  Transform& or Keyed_Transform& to refer to a cipher should be replaced\n  by Cipher_Mode&. The compression algorithm interface has changed; the start\n  function now takes the per-message compression ratio to use. Previously the\n  compression level to use had to be set once, at creation time, and\n  the required ``secure_vector`` argument to ``start`` was required to be empty.\n  The new API is documented in `compression.rst` in the manual.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 47,
                  "endLine": 485,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  overflowed. This bug has no implications on the security but affects\n  interoperability.\n\n  With a 96-bit nonce, this could only occur if at least 2**32 128-bit\n  blocks (64 GiB) were encrypted. This actually exceeds the maximum\n  allowable length of a GCM plaintext; when messages longer than\n  2**32 - 2 blocks are encrypted, GCM loses its security properties.\n",
                    "rendered": {
                      "text": "  overflowed. This bug has no implications on the security but affects\n  interoperability.\n\n  With a 96-bit nonce, this could only occur if at least 2**32 128-bit\n  blocks (64 GiB) were encrypted. This actually exceeds the maximum\n  allowable length of a GCM plaintext; when messages longer than\n  2**32 - 2 blocks are encrypted, GCM loses its security properties.\n",
                      "markdown": "`  overflowed. This bug has no implications on the security but affects\n  interoperability.\n\n  With a 96-bit nonce, this could only occur if at least 2**32 128-bit\n  blocks (64 GiB) were encrypted. This actually exceeds the maximum\n  allowable length of a GCM plaintext; when messages longer than\n  2**32 - 2 blocks are encrypted, GCM loses its security properties.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 477,
                  "startColumn": 31,
                  "endLine": 477,
                  "endColumn": 35,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* In 1.11.23 a bug was introduced such that CBC-encrypted TLS packets\n  containing no plaintext bytes at all were incorrectly rejected with\n  a MAC failure. Records like this are used by OpenSSL in TLS 1.0\n  connections in order to randomize the IV.\n\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* In 1.11.23 a bug was introduced such that CBC-encrypted TLS packets\n  containing no plaintext bytes at all were incorrectly rejected with\n  a MAC failure. Records like this are used by OpenSSL in TLS 1.0\n  connections in order to randomize the IV.\n\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* In 1.11.23 a bug was introduced such that CBC-encrypted TLS packets\n  containing no plaintext bytes at all were incorrectly rejected with\n  a MAC failure. Records like this are used by OpenSSL in TLS 1.0\n  connections in order to randomize the IV.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 17,
                  "endLine": 317,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  classes AES_128, AES_128_SSSE3, and AES_128_NI which used (resp) a table-based\n  implementation vulnerable to side channels, a constant time version using\n  SSSE3 SIMD extensions on modern x86, and x86 AES-NI instructions. Using the\n  correct version at runtime required using ``BlockCipher::create``. Now, only\n  the class AES_128 is presented, and the best available version is always used\n  based on CPUID checks. The tests have been extended to selectively disable\n  CPUID bits to ensure all available versions are tested. (GH #477 #623)\n",
                    "rendered": {
                      "text": "  classes AES_128, AES_128_SSSE3, and AES_128_NI which used (resp) a table-based\n  implementation vulnerable to side channels, a constant time version using\n  SSSE3 SIMD extensions on modern x86, and x86 AES-NI instructions. Using the\n  correct version at runtime required using ``BlockCipher::create``. Now, only\n  the class AES_128 is presented, and the best available version is always used\n  based on CPUID checks. The tests have been extended to selectively disable\n  CPUID bits to ensure all available versions are tested. (GH #477 #623)\n",
                      "markdown": "`  classes AES_128, AES_128_SSSE3, and AES_128_NI which used (resp) a table-based\n  implementation vulnerable to side channels, a constant time version using\n  SSSE3 SIMD extensions on modern x86, and x86 AES-NI instructions. Using the\n  correct version at runtime required using ``BlockCipher::create``. Now, only\n  the class AES_128 is presented, and the best available version is always used\n  based on CPUID checks. The tests have been extended to selectively disable\n  CPUID bits to ensure all available versions are tested. (GH #477 #623)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 42,
                  "endLine": 155,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n* Fix a crash in speed command for Salsa20 (GH #697)\n\n* Allow a custom ECC curve to be specified at build time, for application or\n  system specific curves. (GH #636 #710)\n\n* Use NOMINMAX on Windows to avoid problems in amalgamation build. (GH #740)\n",
                    "rendered": {
                      "text": "\n* Fix a crash in speed command for Salsa20 (GH #697)\n\n* Allow a custom ECC curve to be specified at build time, for application or\n  system specific curves. (GH #636 #710)\n\n* Use NOMINMAX on Windows to avoid problems in amalgamation build. (GH #740)\n",
                      "markdown": "`\n* Fix a crash in speed command for Salsa20 (GH #697)\n\n* Allow a custom ECC curve to be specified at build time, for application or\n  system specific curves. (GH #636 #710)\n\n* Use NOMINMAX on Windows to avoid problems in amalgamation build. (GH #740)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 25,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "* Add Cipher_Mode::reset which resets message-specific state, allowing\n  discarding state but allowing continued processing under the same key. (GH #552)\n\n* The ability to add OIDs at runtime has been removed. This additionally removes\n  a global lock which was acquired on each OID lookup. (GH #706)\n\n* The default TLS policy now disables static RSA ciphersuites, all DSA\n",
                    "rendered": {
                      "text": "* Add Cipher_Mode::reset which resets message-specific state, allowing\n  discarding state but allowing continued processing under the same key. (GH #552)\n\n* The ability to add OIDs at runtime has been removed. This additionally removes\n  a global lock which was acquired on each OID lookup. (GH #706)\n\n* The default TLS policy now disables static RSA ciphersuites, all DSA\n",
                      "markdown": "`* Add Cipher_Mode::reset which resets message-specific state, allowing\n  discarding state but allowing continued processing under the same key. (GH #552)\n\n* The ability to add OIDs at runtime has been removed. This additionally removes\n  a global lock which was acquired on each OID lookup. (GH #706)\n\n* The default TLS policy now disables static RSA ciphersuites, all DSA\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Add ESP block cipher padding from RFC 4304. GH #724\n\n* Incompatible change to HKDF: previously the HKDF type in Botan was only the\n  Expand half of HKDF. Now HKDF is the full Extract-then-Expand KDF, and\n  HKDF_Extract and HKDF_Expand are available. If you previously used HKDF, you\n  must switch to using HKDF_Expand. (GH #723)\n\n",
                    "rendered": {
                      "text": "* Add ESP block cipher padding from RFC 4304. GH #724\n\n* Incompatible change to HKDF: previously the HKDF type in Botan was only the\n  Expand half of HKDF. Now HKDF is the full Extract-then-Expand KDF, and\n  HKDF_Extract and HKDF_Expand are available. If you previously used HKDF, you\n  must switch to using HKDF_Expand. (GH #723)\n\n",
                      "markdown": "`* Add ESP block cipher padding from RFC 4304. GH #724\n\n* Incompatible change to HKDF: previously the HKDF type in Botan was only the\n  Expand half of HKDF. Now HKDF is the full Extract-then-Expand KDF, and\n  HKDF_Extract and HKDF_Expand are available. If you previously used HKDF, you\n  must switch to using HKDF_Expand. (GH #723)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4325,
                  "startColumn": 55,
                  "endLine": 4325,
                  "endColumn": 61,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Rewrote configure script: more consistent and complete\n* Made it easier to find out parameters of types at run time (opencl.h)\n* New functions for finding the version being used (version.h)\n* New SymmetricKey interface for Filters (symkey.h)\n* InvalidKeyLength now records what the invalid key length was\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Rewrote configure script: more consistent and complete\n* Made it easier to find out parameters of types at run time (opencl.h)\n* New functions for finding the version being used (version.h)\n* New SymmetricKey interface for Filters (symkey.h)\n* InvalidKeyLength now records what the invalid key length was\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Rewrote configure script: more consistent and complete\n* Made it easier to find out parameters of types at run time (opencl.h)\n* New functions for finding the version being used (version.h)\n* New SymmetricKey interface for Filters (symkey.h)\n* InvalidKeyLength now records what the invalid key length was\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4325,
                  "startColumn": 19,
                  "endLine": 4325,
                  "endColumn": 25,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Rewrote configure script: more consistent and complete\n* Made it easier to find out parameters of types at run time (opencl.h)\n* New functions for finding the version being used (version.h)\n* New SymmetricKey interface for Filters (symkey.h)\n* InvalidKeyLength now records what the invalid key length was\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Rewrote configure script: more consistent and complete\n* Made it easier to find out parameters of types at run time (opencl.h)\n* New functions for finding the version being used (version.h)\n* New SymmetricKey interface for Filters (symkey.h)\n* InvalidKeyLength now records what the invalid key length was\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Rewrote configure script: more consistent and complete\n* Made it easier to find out parameters of types at run time (opencl.h)\n* New functions for finding the version being used (version.h)\n* New SymmetricKey interface for Filters (symkey.h)\n* InvalidKeyLength now records what the invalid key length was\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4305,
                  "startColumn": 25,
                  "endLine": 4305,
                  "endColumn": 31,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix build problems on Solaris/SPARC\n* Fix build problems with Perl versions < 5.6\n* Fixed some stupid code that broke on a few compilers\n* Added string handling functions to Pipe\n* MISTY1 optimizations\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix build problems on Solaris/SPARC\n* Fix build problems with Perl versions < 5.6\n* Fixed some stupid code that broke on a few compilers\n* Added string handling functions to Pipe\n* MISTY1 optimizations\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix build problems on Solaris/SPARC\n* Fix build problems with Perl versions < 5.6\n* Fixed some stupid code that broke on a few compilers\n* Added string handling functions to Pipe\n* MISTY1 optimizations\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4282,
                  "startColumn": 43,
                  "endLine": 4282,
                  "endColumn": 49,
                  "snippet": {
                    "text": "* Big speed-ups for ISAAC, Adler32, CRC24, and CRC32\n* Optimized CAST-256, DES, SAFER-SK, Serpent, SEAL, MD2, and RIPEMD-160\n* Some semantics of SecureVector have changed slightly\n* The mlock module has been removed for the time being\n* Added string handling functions for hashes and MACs\n* Various non-user-visible cleanups\n* Shared library soname is now set to the full version number\n",
                    "rendered": {
                      "text": "* Big speed-ups for ISAAC, Adler32, CRC24, and CRC32\n* Optimized CAST-256, DES, SAFER-SK, Serpent, SEAL, MD2, and RIPEMD-160\n* Some semantics of SecureVector have changed slightly\n* The mlock module has been removed for the time being\n* Added string handling functions for hashes and MACs\n* Various non-user-visible cleanups\n* Shared library soname is now set to the full version number\n",
                      "markdown": "`* Big speed-ups for ISAAC, Adler32, CRC24, and CRC32\n* Optimized CAST-256, DES, SAFER-SK, Serpent, SEAL, MD2, and RIPEMD-160\n* Some semantics of SecureVector have changed slightly\n* The mlock module has been removed for the time being\n* Added string handling functions for hashes and MACs\n* Various non-user-visible cleanups\n* Shared library soname is now set to the full version number\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4236,
                  "startColumn": 43,
                  "endLine": 4237,
                  "snippet": {
                    "text": "* Moved 'devrand' module into main distribution (ent_file.h), renamed to\n  File_EntropySource, and changed interface somewhat.\n* Made Randpool somewhat more conservative and also 25% faster\n* Minor fixes and updates for the configure script\n* Added some tweaks for memory allocation\n* Documentation updates for the new Pipe interface\n* Fixed various minor bugs\n* Added a couple of new example programs (stack and hasher2)\n",
                    "rendered": {
                      "text": "* Moved 'devrand' module into main distribution (ent_file.h), renamed to\n  File_EntropySource, and changed interface somewhat.\n* Made Randpool somewhat more conservative and also 25% faster\n* Minor fixes and updates for the configure script\n* Added some tweaks for memory allocation\n* Documentation updates for the new Pipe interface\n* Fixed various minor bugs\n* Added a couple of new example programs (stack and hasher2)\n",
                      "markdown": "`* Moved 'devrand' module into main distribution (ent_file.h), renamed to\n  File_EntropySource, and changed interface somewhat.\n* Made Randpool somewhat more conservative and also 25% faster\n* Minor fixes and updates for the configure script\n* Added some tweaks for memory allocation\n* Documentation updates for the new Pipe interface\n* Fixed various minor bugs\n* Added a couple of new example programs (stack and hasher2)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4106,
                  "startColumn": 9,
                  "endLine": 4106,
                  "endColumn": 17,
                  "snippet": {
                    "text": "* Did a workaround in pipe.cpp for GCC 2.95.x on Linux\n* Removed some debugging code from init.cpp that made FTW ES useless\n* Better checking for invalid arguments in the PK algorithms\n* Reduced Base64 and Hex default line length (if line breaking is used)\n* Fixes for HP's aCC compiler\n* Cleanups in BigInt\n\n",
                    "rendered": {
                      "text": "* Did a workaround in pipe.cpp for GCC 2.95.x on Linux\n* Removed some debugging code from init.cpp that made FTW ES useless\n* Better checking for invalid arguments in the PK algorithms\n* Reduced Base64 and Hex default line length (if line breaking is used)\n* Fixes for HP's aCC compiler\n* Cleanups in BigInt\n\n",
                      "markdown": "`* Did a workaround in pipe.cpp for GCC 2.95.x on Linux\n* Removed some debugging code from init.cpp that made FTW ES useless\n* Better checking for invalid arguments in the PK algorithms\n* Reduced Base64 and Hex default line length (if line breaking is used)\n* Fixes for HP's aCC compiler\n* Cleanups in BigInt\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 4031,
                  "startColumn": 25,
                  "endLine": 4031,
                  "endColumn": 30,
                  "snippet": {
                    "text": "* The filters.h header now includes hex.h and base64.h\n* Moved Counter mode to ctr.h\n* Fixed a couple minor problems with VC++ 7\n* Fixed problems with the RPM spec file\n\nVersion 0.9.1, 2002-08-10\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* The filters.h header now includes hex.h and base64.h\n* Moved Counter mode to ctr.h\n* Fixed a couple minor problems with VC++ 7\n* Fixed problems with the RPM spec file\n\nVersion 0.9.1, 2002-08-10\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* The filters.h header now includes hex.h and base64.h\n* Moved Counter mode to ctr.h\n* Fixed a couple minor problems with VC++ 7\n* Fixed problems with the RPM spec file\n\nVersion 0.9.1, 2002-08-10\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3937,
                  "startColumn": 49,
                  "endLine": 3938,
                  "snippet": {
                    "text": "* X9.42 DH parameters use a PEM label of 'X942 DH PARAMETERS'\n* Added key pair consistency checking\n* Fixed a compatibility problem with gcc 2.96 (pointed out by Hany Greiss)\n* A botan-config script is generated at configure time\n* Documentation updates\n\nVersion 1.1.3, 2002-11-03\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* X9.42 DH parameters use a PEM label of 'X942 DH PARAMETERS'\n* Added key pair consistency checking\n* Fixed a compatibility problem with gcc 2.96 (pointed out by Hany Greiss)\n* A botan-config script is generated at configure time\n* Documentation updates\n\nVersion 1.1.3, 2002-11-03\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* X9.42 DH parameters use a PEM label of 'X942 DH PARAMETERS'\n* Added key pair consistency checking\n* Fixed a compatibility problem with gcc 2.96 (pointed out by Hany Greiss)\n* A botan-config script is generated at configure time\n* Documentation updates\n\nVersion 1.1.3, 2002-11-03\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3937,
                  "startColumn": 16,
                  "endLine": 3937,
                  "endColumn": 24,
                  "snippet": {
                    "text": "* X9.42 DH parameters use a PEM label of 'X942 DH PARAMETERS'\n* Added key pair consistency checking\n* Fixed a compatibility problem with gcc 2.96 (pointed out by Hany Greiss)\n* A botan-config script is generated at configure time\n* Documentation updates\n\nVersion 1.1.3, 2002-11-03\n",
                    "rendered": {
                      "text": "* X9.42 DH parameters use a PEM label of 'X942 DH PARAMETERS'\n* Added key pair consistency checking\n* Fixed a compatibility problem with gcc 2.96 (pointed out by Hany Greiss)\n* A botan-config script is generated at configure time\n* Documentation updates\n\nVersion 1.1.3, 2002-11-03\n",
                      "markdown": "`* X9.42 DH parameters use a PEM label of 'X942 DH PARAMETERS'\n* Added key pair consistency checking\n* Fixed a compatibility problem with gcc 2.96 (pointed out by Hany Greiss)\n* A botan-config script is generated at configure time\n* Documentation updates\n\nVersion 1.1.3, 2002-11-03\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3844,
                  "startColumn": 13,
                  "endLine": 3844,
                  "endColumn": 18,
                  "snippet": {
                    "text": "* Removed support for the LibraryInitializer option 'egd_path'\n* Added tests for DSA X.509 and PKCS #8 key formats\n* Removed a long deprecated feature of DH_PrivateKey's constructor\n* Updated the RPM .spec file\n* Major documentation updates\n\nVersion 1.1.11, 2003-04-07\n",
                    "rendered": {
                      "text": "* Removed support for the LibraryInitializer option 'egd_path'\n* Added tests for DSA X.509 and PKCS #8 key formats\n* Removed a long deprecated feature of DH_PrivateKey's constructor\n* Updated the RPM .spec file\n* Major documentation updates\n\nVersion 1.1.11, 2003-04-07\n",
                      "markdown": "`* Removed support for the LibraryInitializer option 'egd_path'\n* Added tests for DSA X.509 and PKCS #8 key formats\n* Removed a long deprecated feature of DH_PrivateKey's constructor\n* Updated the RPM .spec file\n* Major documentation updates\n\nVersion 1.1.11, 2003-04-07\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3809,
                  "startColumn": 24,
                  "endLine": 3809,
                  "endColumn": 32,
                  "snippet": {
                    "text": "* Removed the Pipe I/O operators taking a FILE*\n* Moved the BigInt encoding/decoding functions into the BigInt class\n* Integrated several fixes for VC++ 7 (from Hany Greiss)\n* Fixed the configure.pl script for Windows builds\n\nVersion 1.2.0, 2003-04-28\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* Removed the Pipe I/O operators taking a FILE*\n* Moved the BigInt encoding/decoding functions into the BigInt class\n* Integrated several fixes for VC++ 7 (from Hany Greiss)\n* Fixed the configure.pl script for Windows builds\n\nVersion 1.2.0, 2003-04-28\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* Removed the Pipe I/O operators taking a FILE*\n* Moved the BigInt encoding/decoding functions into the BigInt class\n* Integrated several fixes for VC++ 7 (from Hany Greiss)\n* Fixed the configure.pl script for Windows builds\n\nVersion 1.2.0, 2003-04-28\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3749,
                  "startColumn": 21,
                  "endLine": 3749,
                  "endColumn": 30,
                  "snippet": {
                    "text": "* Fixed a tricky and long-standing memory leak in Pipe\n* Major cleanups and fixes in the memory allocation system\n* Removed alloc_mlock, which has been superseded by the ml_unix module\n* Removed a denial of service vulnerability in X509_Store\n* Fixed compilation problems with VS .NET 2003 and Codewarrior 8\n* Added another variant of PKCS8::load_key, taking a memory buffer\n* Fixed various minor/obscure bugs which occurred when MP_WORD_BITS != 32\n",
                    "rendered": {
                      "text": "* Fixed a tricky and long-standing memory leak in Pipe\n* Major cleanups and fixes in the memory allocation system\n* Removed alloc_mlock, which has been superseded by the ml_unix module\n* Removed a denial of service vulnerability in X509_Store\n* Fixed compilation problems with VS .NET 2003 and Codewarrior 8\n* Added another variant of PKCS8::load_key, taking a memory buffer\n* Fixed various minor/obscure bugs which occurred when MP_WORD_BITS != 32\n",
                      "markdown": "`* Fixed a tricky and long-standing memory leak in Pipe\n* Major cleanups and fixes in the memory allocation system\n* Removed alloc_mlock, which has been superseded by the ml_unix module\n* Removed a denial of service vulnerability in X509_Store\n* Fixed compilation problems with VS .NET 2003 and Codewarrior 8\n* Added another variant of PKCS8::load_key, taking a memory buffer\n* Fixed various minor/obscure bugs which occurred when MP_WORD_BITS != 32\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3730,
                  "startColumn": 13,
                  "endLine": 3730,
                  "endColumn": 18,
                  "snippet": {
                    "text": "* Renamed the option default_to_ca to v1_assume_ca\n* Fixed a minor bug in X.509 certificate generation\n* Fixed a latent bug in the OID lookup code\n* Updated the RPM spec file\n* Added to the tutorial\n\nVersion 1.2.6, 2003-07-04\n",
                    "rendered": {
                      "text": "* Renamed the option default_to_ca to v1_assume_ca\n* Fixed a minor bug in X.509 certificate generation\n* Fixed a latent bug in the OID lookup code\n* Updated the RPM spec file\n* Added to the tutorial\n\nVersion 1.2.6, 2003-07-04\n",
                      "markdown": "`* Renamed the option default_to_ca to v1_assume_ca\n* Fixed a minor bug in X.509 certificate generation\n* Fixed a latent bug in the OID lookup code\n* Updated the RPM spec file\n* Added to the tutorial\n\nVersion 1.2.6, 2003-07-04\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3698,
                  "startColumn": 36,
                  "endLine": 3699,
                  "snippet": {
                    "text": "* Added an ASN.1/BER decoder as an example\n* AES had its internals marked 'public' in previous versions\n* Changed the value of the ASN.1 NO_OBJECT enum\n* Various new hacks in the configure script\n* Removed the already nominal support for SunOS\n\nVersion 1.3.1, 2003-11-04\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* Added an ASN.1/BER decoder as an example\n* AES had its internals marked 'public' in previous versions\n* Changed the value of the ASN.1 NO_OBJECT enum\n* Various new hacks in the configure script\n* Removed the already nominal support for SunOS\n\nVersion 1.3.1, 2003-11-04\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* Added an ASN.1/BER decoder as an example\n* AES had its internals marked 'public' in previous versions\n* Changed the value of the ASN.1 NO_OBJECT enum\n* Various new hacks in the configure script\n* Removed the already nominal support for SunOS\n\nVersion 1.3.1, 2003-11-04\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3643,
                  "startColumn": 1,
                  "endLine": 3643,
                  "endColumn": 6,
                  "snippet": {
                    "text": "* The BER decoder can now handle tags larger than 30\n* Fixed tm_hard.cpp to recognize SPARC on more systems\n* Workarounds for a GCC 2.95.x bug in x509find.cpp\n* RPM changed to install into /usr instead of /usr/local\n* Added support for QNX\n\nVersion 1.2.8, 2003-11-21\n",
                    "rendered": {
                      "text": "* The BER decoder can now handle tags larger than 30\n* Fixed tm_hard.cpp to recognize SPARC on more systems\n* Workarounds for a GCC 2.95.x bug in x509find.cpp\n* RPM changed to install into /usr instead of /usr/local\n* Added support for QNX\n\nVersion 1.2.8, 2003-11-21\n",
                      "markdown": "`* The BER decoder can now handle tags larger than 30\n* Fixed tm_hard.cpp to recognize SPARC on more systems\n* Workarounds for a GCC 2.95.x bug in x509find.cpp\n* RPM changed to install into /usr instead of /usr/local\n* Added support for QNX\n\nVersion 1.2.8, 2003-11-21\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3623,
                  "startColumn": 1,
                  "endLine": 3623,
                  "endColumn": 6,
                  "snippet": {
                    "text": "* Added a new module 'minimal', which disables most algorithms\n* SecureAllocator allocates a few blocks at startup\n* A few minor MPI cleanups\n* RPM spec file cleanups and fixes\n\nVersion 1.3.5, 2003-11-30\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* Added a new module 'minimal', which disables most algorithms\n* SecureAllocator allocates a few blocks at startup\n* A few minor MPI cleanups\n* RPM spec file cleanups and fixes\n\nVersion 1.3.5, 2003-11-30\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* Added a new module 'minimal', which disables most algorithms\n* SecureAllocator allocates a few blocks at startup\n* A few minor MPI cleanups\n* RPM spec file cleanups and fixes\n\nVersion 1.3.5, 2003-11-30\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3571,
                  "startColumn": 23,
                  "endLine": 3571,
                  "endColumn": 32,
                  "snippet": {
                    "text": "Version 1.3.9, 2004-03-07\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Added an engine using OpenSSL (requires 0.9.7 or later)\n* X509_Certificate would lose email addresses stored in the DN\n* Fixed a missing initialization in a BigInt constructor\n* Fixed several Visual C++ compile problems\n",
                    "rendered": {
                      "text": "Version 1.3.9, 2004-03-07\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Added an engine using OpenSSL (requires 0.9.7 or later)\n* X509_Certificate would lose email addresses stored in the DN\n* Fixed a missing initialization in a BigInt constructor\n* Fixed several Visual C++ compile problems\n",
                      "markdown": "`Version 1.3.9, 2004-03-07\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Added an engine using OpenSSL (requires 0.9.7 or later)\n* X509_Certificate would lose email addresses stored in the DN\n* Fixed a missing initialization in a BigInt constructor\n* Fixed several Visual C++ compile problems\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3552,
                  "startColumn": 57,
                  "endLine": 3553,
                  "snippet": {
                    "text": "* Fixed two show-stopping bugs in PKCS10_Request\n* Added some sanity checks in Pipe/Filter\n* The DNS and URI entries would get swapped in subjectAlternativeNames\n* MAC_Filter is now willing to not take a key at creation time\n* Setting the expiration times of certs and CRLs is more flexible\n* Fixed problems building on AIX with GCC\n* Fixed some problems in the tutorial pointed out by Dominik Vogt\n* Documentation updates\n",
                    "rendered": {
                      "text": "* Fixed two show-stopping bugs in PKCS10_Request\n* Added some sanity checks in Pipe/Filter\n* The DNS and URI entries would get swapped in subjectAlternativeNames\n* MAC_Filter is now willing to not take a key at creation time\n* Setting the expiration times of certs and CRLs is more flexible\n* Fixed problems building on AIX with GCC\n* Fixed some problems in the tutorial pointed out by Dominik Vogt\n* Documentation updates\n",
                      "markdown": "`* Fixed two show-stopping bugs in PKCS10_Request\n* Added some sanity checks in Pipe/Filter\n* The DNS and URI entries would get swapped in subjectAlternativeNames\n* MAC_Filter is now willing to not take a key at creation time\n* Setting the expiration times of certs and CRLs is more flexible\n* Fixed problems building on AIX with GCC\n* Fixed some problems in the tutorial pointed out by Dominik Vogt\n* Documentation updates\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3542,
                  "startColumn": 54,
                  "endLine": 3542,
                  "endColumn": 63,
                  "snippet": {
                    "text": "* Fixed a problem when decoding some PKCS #10 requests\n* Hex_Decoder would not check inputs, reported by Vaclav Ovsik\n* Changed default CRL expire time from 30 days to 7 days\n* X509_CRL's default PEM header is now \"X509 CRL\", for OpenSSL compatibility\n* Corrected errors in the API doc, fixes from Ken Perano\n* More documentation about the Pipe/Filter code\n\n",
                    "rendered": {
                      "text": "* Fixed a problem when decoding some PKCS #10 requests\n* Hex_Decoder would not check inputs, reported by Vaclav Ovsik\n* Changed default CRL expire time from 30 days to 7 days\n* X509_CRL's default PEM header is now \"X509 CRL\", for OpenSSL compatibility\n* Corrected errors in the API doc, fixes from Ken Perano\n* More documentation about the Pipe/Filter code\n\n",
                      "markdown": "`* Fixed a problem when decoding some PKCS #10 requests\n* Hex_Decoder would not check inputs, reported by Vaclav Ovsik\n* Changed default CRL expire time from 30 days to 7 days\n* X509_CRL's default PEM header is now \"X509 CRL\", for OpenSSL compatibility\n* Corrected errors in the API doc, fixes from Ken Perano\n* More documentation about the Pipe/Filter code\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3541,
                  "startColumn": 28,
                  "endLine": 3541,
                  "endColumn": 34,
                  "snippet": {
                    "text": "* Renamed a few X509_Certificate and PKCS10_Request member functions\n* Fixed a problem when decoding some PKCS #10 requests\n* Hex_Decoder would not check inputs, reported by Vaclav Ovsik\n* Changed default CRL expire time from 30 days to 7 days\n* X509_CRL's default PEM header is now \"X509 CRL\", for OpenSSL compatibility\n* Corrected errors in the API doc, fixes from Ken Perano\n* More documentation about the Pipe/Filter code\n",
                    "rendered": {
                      "text": "* Renamed a few X509_Certificate and PKCS10_Request member functions\n* Fixed a problem when decoding some PKCS #10 requests\n* Hex_Decoder would not check inputs, reported by Vaclav Ovsik\n* Changed default CRL expire time from 30 days to 7 days\n* X509_CRL's default PEM header is now \"X509 CRL\", for OpenSSL compatibility\n* Corrected errors in the API doc, fixes from Ken Perano\n* More documentation about the Pipe/Filter code\n",
                      "markdown": "`* Renamed a few X509_Certificate and PKCS10_Request member functions\n* Fixed a problem when decoding some PKCS #10 requests\n* Hex_Decoder would not check inputs, reported by Vaclav Ovsik\n* Changed default CRL expire time from 30 days to 7 days\n* X509_CRL's default PEM header is now \"X509 CRL\", for OpenSSL compatibility\n* Corrected errors in the API doc, fixes from Ken Perano\n* More documentation about the Pipe/Filter code\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3527,
                  "startColumn": 15,
                  "endLine": 3527,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n* Major fixes for Cygwin builds\n* Minor MacOS X install fixes\n* The configure script is a little better at picking the right modules\n* Removed ml_unix from the 'unix' module set for Cygwin compatibility\n* Fixed a stupid compile problem in pkcs10.h\n\n",
                    "rendered": {
                      "text": "\n* Major fixes for Cygwin builds\n* Minor MacOS X install fixes\n* The configure script is a little better at picking the right modules\n* Removed ml_unix from the 'unix' module set for Cygwin compatibility\n* Fixed a stupid compile problem in pkcs10.h\n\n",
                      "markdown": "`\n* Major fixes for Cygwin builds\n* Minor MacOS X install fixes\n* The configure script is a little better at picking the right modules\n* Removed ml_unix from the 'unix' module set for Cygwin compatibility\n* Fixed a stupid compile problem in pkcs10.h\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3516,
                  "startColumn": 41,
                  "endLine": 3517,
                  "snippet": {
                    "text": "* Removed duplicate entry in Unix command list for es_unix\n* Moved the Cert_Usage enumeration into X509_Store\n* Added new timing methods for PK benchmarks, clock_gettime and RDTSC\n* Fixed a few minor bugs in the configure script\n* Removed some deprecated functions from x509cert.h and pkcs10.h\n* Removed the 'minimal' module, has to be updated for Engine support\n* Changed MP_WORD_BITS macro to BOTAN_MP_WORD_BITS to clean up namespace\n* Documentation updates\n",
                    "rendered": {
                      "text": "* Removed duplicate entry in Unix command list for es_unix\n* Moved the Cert_Usage enumeration into X509_Store\n* Added new timing methods for PK benchmarks, clock_gettime and RDTSC\n* Fixed a few minor bugs in the configure script\n* Removed some deprecated functions from x509cert.h and pkcs10.h\n* Removed the 'minimal' module, has to be updated for Engine support\n* Changed MP_WORD_BITS macro to BOTAN_MP_WORD_BITS to clean up namespace\n* Documentation updates\n",
                      "markdown": "`* Removed duplicate entry in Unix command list for es_unix\n* Moved the Cert_Usage enumeration into X509_Store\n* Added new timing methods for PK benchmarks, clock_gettime and RDTSC\n* Fixed a few minor bugs in the configure script\n* Removed some deprecated functions from x509cert.h and pkcs10.h\n* Removed the 'minimal' module, has to be updated for Engine support\n* Changed MP_WORD_BITS macro to BOTAN_MP_WORD_BITS to clean up namespace\n* Documentation updates\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3509,
                  "startColumn": 15,
                  "endLine": 3509,
                  "endColumn": 23,
                  "snippet": {
                    "text": "* Fixes for compiling with GCC 3.4 and Sun C++ 5.5\n* Fixes for Linux/s390, OpenBSD, and Solaris\n* Added support for Linux/s390x\n* The configure script was totally broken for 'generic' OS\n* Removed Montgomery reduction due to bugs\n* Removed an unused header, pkcs8alg.h\n* check --validate returns an error code if any tests failed\n",
                    "rendered": {
                      "text": "* Fixes for compiling with GCC 3.4 and Sun C++ 5.5\n* Fixes for Linux/s390, OpenBSD, and Solaris\n* Added support for Linux/s390x\n* The configure script was totally broken for 'generic' OS\n* Removed Montgomery reduction due to bugs\n* Removed an unused header, pkcs8alg.h\n* check --validate returns an error code if any tests failed\n",
                      "markdown": "`* Fixes for compiling with GCC 3.4 and Sun C++ 5.5\n* Fixes for Linux/s390, OpenBSD, and Solaris\n* Added support for Linux/s390x\n* The configure script was totally broken for 'generic' OS\n* Removed Montgomery reduction due to bugs\n* Removed an unused header, pkcs8alg.h\n* check --validate returns an error code if any tests failed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3471,
                  "startColumn": 45,
                  "endLine": 3472,
                  "snippet": {
                    "text": "* Fixed a long-standing build problem with conflicting include files\n* Fixed some examples that hadn't been updated for 1.4.x\n* Portability fixes for Solaris, BSD, HP-UX, and others\n* Lots of fixes and cleanups in the configure script\n* Updated the Gentoo ebuild file\n\nVersion 1.4.1, 2004-10-10\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* Fixed a long-standing build problem with conflicting include files\n* Fixed some examples that hadn't been updated for 1.4.x\n* Portability fixes for Solaris, BSD, HP-UX, and others\n* Lots of fixes and cleanups in the configure script\n* Updated the Gentoo ebuild file\n\nVersion 1.4.1, 2004-10-10\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* Fixed a long-standing build problem with conflicting include files\n* Fixed some examples that hadn't been updated for 1.4.x\n* Portability fixes for Solaris, BSD, HP-UX, and others\n* Lots of fixes and cleanups in the configure script\n* Updated the Gentoo ebuild file\n\nVersion 1.4.1, 2004-10-10\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3465,
                  "startColumn": 46,
                  "endLine": 3465,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n* Fixed a major CRL handling bug\n* Cipher and hash operations can be offloaded to engines\n* Added support for cipher and hash offload in OpenSSL engine\n* Improvements for 64-bit CPUs without a widening multiply instruction\n* Support for SHA2-* and Whirlpool with EMSA2\n* Fixed a long-standing build problem with conflicting include files\n",
                    "rendered": {
                      "text": "\n* Fixed a major CRL handling bug\n* Cipher and hash operations can be offloaded to engines\n* Added support for cipher and hash offload in OpenSSL engine\n* Improvements for 64-bit CPUs without a widening multiply instruction\n* Support for SHA2-* and Whirlpool with EMSA2\n* Fixed a long-standing build problem with conflicting include files\n",
                      "markdown": "`\n* Fixed a major CRL handling bug\n* Cipher and hash operations can be offloaded to engines\n* Added support for cipher and hash offload in OpenSSL engine\n* Improvements for 64-bit CPUs without a widening multiply instruction\n* Support for SHA2-* and Whirlpool with EMSA2\n* Fixed a long-standing build problem with conflicting include files\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3457,
                  "startColumn": 20,
                  "endLine": 3457,
                  "endColumn": 28,
                  "snippet": {
                    "text": "* Memory locking allocators are more likely to be used\n* Fixed the placement of includes in some modules\n* Fixed broken installation procedure\n* Fixes in configure script to support alternate install programs\n* Modules can specify the minimum version they support\n\nVersion 1.4.2, 2004-10-31\n",
                    "rendered": {
                      "text": "* Memory locking allocators are more likely to be used\n* Fixed the placement of includes in some modules\n* Fixed broken installation procedure\n* Fixes in configure script to support alternate install programs\n* Modules can specify the minimum version they support\n\nVersion 1.4.2, 2004-10-31\n",
                      "markdown": "`* Memory locking allocators are more likely to be used\n* Fixed the placement of includes in some modules\n* Fixed broken installation procedure\n* Fixes in configure script to support alternate install programs\n* Modules can specify the minimum version they support\n\nVersion 1.4.2, 2004-10-31\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3386,
                  "startColumn": 20,
                  "endLine": 3386,
                  "endColumn": 28,
                  "snippet": {
                    "text": "* Added support for high-resolution PowerPC timers\n* Fixed a bug in the configure script causing problems on FreeBSD\n* Changed ANSI X9.31 to support arbitrary block ciphers\n* Make the configure script a bit less noisy\n* Added more test vectors for some algorithms, including all the AES finalists\n* Various cosmetic source code cleanups\n\n",
                    "rendered": {
                      "text": "* Added support for high-resolution PowerPC timers\n* Fixed a bug in the configure script causing problems on FreeBSD\n* Changed ANSI X9.31 to support arbitrary block ciphers\n* Make the configure script a bit less noisy\n* Added more test vectors for some algorithms, including all the AES finalists\n* Various cosmetic source code cleanups\n\n",
                      "markdown": "`* Added support for high-resolution PowerPC timers\n* Fixed a bug in the configure script causing problems on FreeBSD\n* Changed ANSI X9.31 to support arbitrary block ciphers\n* Make the configure script a bit less noisy\n* Added more test vectors for some algorithms, including all the AES finalists\n* Various cosmetic source code cleanups\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3384,
                  "startColumn": 30,
                  "endLine": 3384,
                  "endColumn": 38,
                  "snippet": {
                    "text": "* Twofish and RC6 are significantly faster with GCC\n* Much better support for 64-bit PowerPC\n* Added support for high-resolution PowerPC timers\n* Fixed a bug in the configure script causing problems on FreeBSD\n* Changed ANSI X9.31 to support arbitrary block ciphers\n* Make the configure script a bit less noisy\n* Added more test vectors for some algorithms, including all the AES finalists\n",
                    "rendered": {
                      "text": "* Twofish and RC6 are significantly faster with GCC\n* Much better support for 64-bit PowerPC\n* Added support for high-resolution PowerPC timers\n* Fixed a bug in the configure script causing problems on FreeBSD\n* Changed ANSI X9.31 to support arbitrary block ciphers\n* Make the configure script a bit less noisy\n* Added more test vectors for some algorithms, including all the AES finalists\n",
                      "markdown": "`* Twofish and RC6 are significantly faster with GCC\n* Much better support for 64-bit PowerPC\n* Added support for high-resolution PowerPC timers\n* Fixed a bug in the configure script causing problems on FreeBSD\n* Changed ANSI X9.31 to support arbitrary block ciphers\n* Make the configure script a bit less noisy\n* Added more test vectors for some algorithms, including all the AES finalists\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3365,
                  "startColumn": 5,
                  "endLine": 3365,
                  "endColumn": 14,
                  "snippet": {
                    "text": "* Changed Randpool to use HMAC instead of a plain hash as the mixing function\n* Fixed a bug in the allocators; found and fixed by Matthew Gregan\n* Enabled the use of binary file I/O, when requested by the application\n* The OpenSSL engine's block cipher code was missing some deallocation calls\n* Disabled the es_ftw module on NetBSD, due to header problems there\n* Fixed a problem preventing tm_hard from building on MacOS X on PowerPC\n* Some cleanups for the modules that use inline assembler\n",
                    "rendered": {
                      "text": "* Changed Randpool to use HMAC instead of a plain hash as the mixing function\n* Fixed a bug in the allocators; found and fixed by Matthew Gregan\n* Enabled the use of binary file I/O, when requested by the application\n* The OpenSSL engine's block cipher code was missing some deallocation calls\n* Disabled the es_ftw module on NetBSD, due to header problems there\n* Fixed a problem preventing tm_hard from building on MacOS X on PowerPC\n* Some cleanups for the modules that use inline assembler\n",
                      "markdown": "`* Changed Randpool to use HMAC instead of a plain hash as the mixing function\n* Fixed a bug in the allocators; found and fixed by Matthew Gregan\n* Enabled the use of binary file I/O, when requested by the application\n* The OpenSSL engine's block cipher code was missing some deallocation calls\n* Disabled the es_ftw module on NetBSD, due to header problems there\n* Fixed a problem preventing tm_hard from building on MacOS X on PowerPC\n* Some cleanups for the modules that use inline assembler\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3349,
                  "startColumn": 15,
                  "endLine": 3349,
                  "endColumn": 23,
                  "snippet": {
                    "text": "* Fixed two build problems in es_capi; reported by Matthew Gregan\n* Added a constructor to DataSource_Memory taking a std::string\n* Placing the same Filter in multiple Pipes triggers an exception\n* The configure script accepts --docdir and --libdir\n* Merged doc/rngs.txt into the main API document\n* Thanks to Joel Low for several bug reports on early tarballs of 1.4.11\n\n",
                    "rendered": {
                      "text": "* Fixed two build problems in es_capi; reported by Matthew Gregan\n* Added a constructor to DataSource_Memory taking a std::string\n* Placing the same Filter in multiple Pipes triggers an exception\n* The configure script accepts --docdir and --libdir\n* Merged doc/rngs.txt into the main API document\n* Thanks to Joel Low for several bug reports on early tarballs of 1.4.11\n\n",
                      "markdown": "`* Fixed two build problems in es_capi; reported by Matthew Gregan\n* Added a constructor to DataSource_Memory taking a std::string\n* Placing the same Filter in multiple Pipes triggers an exception\n* The configure script accepts --docdir and --libdir\n* Merged doc/rngs.txt into the main API document\n* Thanks to Joel Low for several bug reports on early tarballs of 1.4.11\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3195,
                  "startColumn": 1,
                  "endLine": 3195,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Initialization failures are dealt with somewhat better\n* Add an example implementing Pollard's Rho algorithm\n* Better option handling in the test/benchmark tool\n* Expand the xor_ciph example to support longer keys\n* Some updates to the documentation\n\nVersion 1.5.9, 2006-07-12\n",
                    "rendered": {
                      "text": "* Initialization failures are dealt with somewhat better\n* Add an example implementing Pollard's Rho algorithm\n* Better option handling in the test/benchmark tool\n* Expand the xor_ciph example to support longer keys\n* Some updates to the documentation\n\nVersion 1.5.9, 2006-07-12\n",
                      "markdown": "`* Initialization failures are dealt with somewhat better\n* Add an example implementing Pollard's Rho algorithm\n* Better option handling in the test/benchmark tool\n* Expand the xor_ciph example to support longer keys\n* Some updates to the documentation\n\nVersion 1.5.9, 2006-07-12\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3188,
                  "startColumn": 1,
                  "endLine": 3188,
                  "endColumn": 9,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add x86 assembler versions of MD4, MD5, and SHA-1\n* Expand InitializerOptions' language to support on/off switches\n* Fix definition of OID 2.5.4.8; was accidentally changed in 1.5.9\n* Fix possible resource leaks in the mmap allocator\n* Slightly optimized buffering in MDx_HashFunction\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add x86 assembler versions of MD4, MD5, and SHA-1\n* Expand InitializerOptions' language to support on/off switches\n* Fix definition of OID 2.5.4.8; was accidentally changed in 1.5.9\n* Fix possible resource leaks in the mmap allocator\n* Slightly optimized buffering in MDx_HashFunction\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add x86 assembler versions of MD4, MD5, and SHA-1\n* Expand InitializerOptions' language to support on/off switches\n* Fix definition of OID 2.5.4.8; was accidentally changed in 1.5.9\n* Fix possible resource leaks in the mmap allocator\n* Slightly optimized buffering in MDx_HashFunction\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3148,
                  "startColumn": 21,
                  "endLine": 3148,
                  "endColumn": 29,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix some base64 decoder bugs\n* Add a new option to base64 encoding, to always append a newline\n* Fix some build problems under Visual Studio with debug enabled\n* Fix a bug in BER_Decoder that was triggered under some compilers\n\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix some base64 decoder bugs\n* Add a new option to base64 encoding, to always append a newline\n* Fix some build problems under Visual Studio with debug enabled\n* Fix a bug in BER_Decoder that was triggered under some compilers\n\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix some base64 decoder bugs\n* Add a new option to base64 encoding, to always append a newline\n* Fix some build problems under Visual Studio with debug enabled\n* Fix a bug in BER_Decoder that was triggered under some compilers\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3147,
                  "startColumn": 10,
                  "endLine": 3147,
                  "endColumn": 18,
                  "snippet": {
                    "text": "Version 1.6.1, 2007-01-20\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix some base64 decoder bugs\n* Add a new option to base64 encoding, to always append a newline\n* Fix some build problems under Visual Studio with debug enabled\n* Fix a bug in BER_Decoder that was triggered under some compilers\n",
                    "rendered": {
                      "text": "Version 1.6.1, 2007-01-20\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix some base64 decoder bugs\n* Add a new option to base64 encoding, to always append a newline\n* Fix some build problems under Visual Studio with debug enabled\n* Fix a bug in BER_Decoder that was triggered under some compilers\n",
                      "markdown": "`Version 1.6.1, 2007-01-20\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix some base64 decoder bugs\n* Add a new option to base64 encoding, to always append a newline\n* Fix some build problems under Visual Studio with debug enabled\n* Fix a bug in BER_Decoder that was triggered under some compilers\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3069,
                  "startColumn": 54,
                  "endLine": 3069,
                  "endColumn": 60,
                  "snippet": {
                    "text": "* Allow using a std::istream to initialize a DataSource_Stream object\n* Fix compilation problem in zlib compression module\n* The chunk sized used by Pooling_Allocator is now a compile time setting\n* The size of random blinding factors is now a compile time setting\n* The install target no longer tries to set a particular owner/group\n\nVersion 1.7.4, 2008-03-10\n",
                    "rendered": {
                      "text": "* Allow using a std::istream to initialize a DataSource_Stream object\n* Fix compilation problem in zlib compression module\n* The chunk sized used by Pooling_Allocator is now a compile time setting\n* The size of random blinding factors is now a compile time setting\n* The install target no longer tries to set a particular owner/group\n\nVersion 1.7.4, 2008-03-10\n",
                      "markdown": "`* Allow using a std::istream to initialize a DataSource_Stream object\n* Fix compilation problem in zlib compression module\n* The chunk sized used by Pooling_Allocator is now a compile time setting\n* The size of random blinding factors is now a compile time setting\n* The install target no longer tries to set a particular owner/group\n\nVersion 1.7.4, 2008-03-10\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3068,
                  "startColumn": 60,
                  "endLine": 3068,
                  "endColumn": 66,
                  "snippet": {
                    "text": "* Ignore spaces inside of a decimal string in BigInt::decode\n* Allow using a std::istream to initialize a DataSource_Stream object\n* Fix compilation problem in zlib compression module\n* The chunk sized used by Pooling_Allocator is now a compile time setting\n* The size of random blinding factors is now a compile time setting\n* The install target no longer tries to set a particular owner/group\n\n",
                    "rendered": {
                      "text": "* Ignore spaces inside of a decimal string in BigInt::decode\n* Allow using a std::istream to initialize a DataSource_Stream object\n* Fix compilation problem in zlib compression module\n* The chunk sized used by Pooling_Allocator is now a compile time setting\n* The size of random blinding factors is now a compile time setting\n* The install target no longer tries to set a particular owner/group\n\n",
                      "markdown": "`* Ignore spaces inside of a decimal string in BigInt::decode\n* Allow using a std::istream to initialize a DataSource_Stream object\n* Fix compilation problem in zlib compression module\n* The chunk sized used by Pooling_Allocator is now a compile time setting\n* The size of random blinding factors is now a compile time setting\n* The install target no longer tries to set a particular owner/group\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 3025,
                  "startColumn": 18,
                  "endLine": 3025,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n* Added the block cipher Noekeon\n* Remove global deref_alias function\n* X509_Store takes timeout options as constructor arguments\n* Add Shanks-Tonelli algorithm, contributed by FlexSecure GmbH\n* Extend random_prime() for generating primes of any bit length\n* Remove Config class\n",
                    "rendered": {
                      "text": "\n* Added the block cipher Noekeon\n* Remove global deref_alias function\n* X509_Store takes timeout options as constructor arguments\n* Add Shanks-Tonelli algorithm, contributed by FlexSecure GmbH\n* Extend random_prime() for generating primes of any bit length\n* Remove Config class\n",
                      "markdown": "`\n* Added the block cipher Noekeon\n* Remove global deref_alias function\n* X509_Store takes timeout options as constructor arguments\n* Add Shanks-Tonelli algorithm, contributed by FlexSecure GmbH\n* Extend random_prime() for generating primes of any bit length\n* Remove Config class\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2965,
                  "startColumn": 7,
                  "endLine": 2965,
                  "endColumn": 13,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add x86 assembly for Visual Studio C++, by Luca Piccarreta\n* Add a Perl XS module, by Vaclav Ovsik\n* Add SWIG-based wrapper for Botan\n* Add SSE2 implementation of SHA-1, by Dean Gaudet\n* Remove the BigInt::sig_words cache due to bugs\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add x86 assembly for Visual Studio C++, by Luca Piccarreta\n* Add a Perl XS module, by Vaclav Ovsik\n* Add SWIG-based wrapper for Botan\n* Add SSE2 implementation of SHA-1, by Dean Gaudet\n* Remove the BigInt::sig_words cache due to bugs\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add x86 assembly for Visual Studio C++, by Luca Piccarreta\n* Add a Perl XS module, by Vaclav Ovsik\n* Add SWIG-based wrapper for Botan\n* Add SSE2 implementation of SHA-1, by Dean Gaudet\n* Remove the BigInt::sig_words cache due to bugs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2927,
                  "startColumn": 7,
                  "endLine": 2927,
                  "endColumn": 16,
                  "snippet": {
                    "text": "* Add BSI variant of EMSA1 from InSiTo\n* Add GF(p) and ECDSA tests from InSiTo\n* Split ECDSA and ECKAEG into distinct modules\n* Allow OpenSSL and GNU MP engines to be built with public key algos disabled\n* Rename sha256.h to sha2_32.h and sha_64.h to sha2_64.h\n\nVersion 1.7.15, 2008-10-07\n",
                    "rendered": {
                      "text": "* Add BSI variant of EMSA1 from InSiTo\n* Add GF(p) and ECDSA tests from InSiTo\n* Split ECDSA and ECKAEG into distinct modules\n* Allow OpenSSL and GNU MP engines to be built with public key algos disabled\n* Rename sha256.h to sha2_32.h and sha_64.h to sha2_64.h\n\nVersion 1.7.15, 2008-10-07\n",
                      "markdown": "`* Add BSI variant of EMSA1 from InSiTo\n* Add GF(p) and ECDSA tests from InSiTo\n* Split ECDSA and ECKAEG into distinct modules\n* Allow OpenSSL and GNU MP engines to be built with public key algos disabled\n* Rename sha256.h to sha2_32.h and sha_64.h to sha2_64.h\n\nVersion 1.7.15, 2008-10-07\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2798,
                  "startColumn": 32,
                  "endLine": 2799,
                  "snippet": {
                    "text": "Version 1.8.3, 2009-07-11\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add a new Python configuration script\n* Add the Skein-512 SHA-3 candidate hash function\n* Add the XTS block cipher mode from IEEE P1619\n* Fix random_prime when generating a prime of less than 7 bits\n* Improve handling of low-entropy situations during PRNG seeding\n",
                    "rendered": {
                      "text": "Version 1.8.3, 2009-07-11\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add a new Python configuration script\n* Add the Skein-512 SHA-3 candidate hash function\n* Add the XTS block cipher mode from IEEE P1619\n* Fix random_prime when generating a prime of less than 7 bits\n* Improve handling of low-entropy situations during PRNG seeding\n",
                      "markdown": "`Version 1.8.3, 2009-07-11\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add a new Python configuration script\n* Add the Skein-512 SHA-3 candidate hash function\n* Add the XTS block cipher mode from IEEE P1619\n* Fix random_prime when generating a prime of less than 7 bits\n* Improve handling of low-entropy situations during PRNG seeding\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2767,
                  "startColumn": 34,
                  "endLine": 2767,
                  "endColumn": 42,
                  "snippet": {
                    "text": "* Minor speedups to the Turing key schedule\n* Fix processing multiple messages in XTS mode\n* Add --no-autoload option to configure.py, for minimized builds\n* The previously used configure.pl script is no longer supported\n\nVersion 1.8.6, 2009-08-13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* Minor speedups to the Turing key schedule\n* Fix processing multiple messages in XTS mode\n* Add --no-autoload option to configure.py, for minimized builds\n* The previously used configure.pl script is no longer supported\n\nVersion 1.8.6, 2009-08-13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* Minor speedups to the Turing key schedule\n* Fix processing multiple messages in XTS mode\n* Add --no-autoload option to configure.py, for minimized builds\n* The previously used configure.pl script is no longer supported\n\nVersion 1.8.6, 2009-08-13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2740,
                  "startColumn": 40,
                  "endLine": 2740,
                  "endColumn": 46,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Better support for Python and Perl wrappers\n* Add an implementation of Blue Midnight Wish (Round 2 tweak version)\n* Modify Skein-512 to match the tweaked 1.2 specification\n* Add threshold secret sharing (draft-mcgrew-tss-02)\n* Add runtime cpu feature detection for x86/x86-64\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Better support for Python and Perl wrappers\n* Add an implementation of Blue Midnight Wish (Round 2 tweak version)\n* Modify Skein-512 to match the tweaked 1.2 specification\n* Add threshold secret sharing (draft-mcgrew-tss-02)\n* Add runtime cpu feature detection for x86/x86-64\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Better support for Python and Perl wrappers\n* Add an implementation of Blue Midnight Wish (Round 2 tweak version)\n* Modify Skein-512 to match the tweaked 1.2 specification\n* Add threshold secret sharing (draft-mcgrew-tss-02)\n* Add runtime cpu feature detection for x86/x86-64\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2739,
                  "startColumn": 31,
                  "endLine": 2739,
                  "endColumn": 37,
                  "snippet": {
                    "text": "Version 1.9.1, 2009-10-23\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Better support for Python and Perl wrappers\n* Add an implementation of Blue Midnight Wish (Round 2 tweak version)\n* Modify Skein-512 to match the tweaked 1.2 specification\n* Add threshold secret sharing (draft-mcgrew-tss-02)\n",
                    "rendered": {
                      "text": "Version 1.9.1, 2009-10-23\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Better support for Python and Perl wrappers\n* Add an implementation of Blue Midnight Wish (Round 2 tweak version)\n* Modify Skein-512 to match the tweaked 1.2 specification\n* Add threshold secret sharing (draft-mcgrew-tss-02)\n",
                      "markdown": "`Version 1.9.1, 2009-10-23\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Better support for Python and Perl wrappers\n* Add an implementation of Blue Midnight Wish (Round 2 tweak version)\n* Modify Skein-512 to match the tweaked 1.2 specification\n* Add threshold secret sharing (draft-mcgrew-tss-02)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2666,
                  "startColumn": 5,
                  "endLine": 2666,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n* Perform CBC decryption in parallel where possible\n\n* Add SQLite3 db encryption codec, contributed by Olivier de Gaalon\n\n* Add a block cipher cascade construction\n\n",
                    "rendered": {
                      "text": "\n* Perform CBC decryption in parallel where possible\n\n* Add SQLite3 db encryption codec, contributed by Olivier de Gaalon\n\n* Add a block cipher cascade construction\n\n",
                      "markdown": "`\n* Perform CBC decryption in parallel where possible\n\n* Add SQLite3 db encryption codec, contributed by Olivier de Gaalon\n\n* Add a block cipher cascade construction\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2608,
                  "startColumn": 14,
                  "endLine": 2608,
                  "endColumn": 20,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add support for wide multiplications on 64-bit Windows\n* Use constant time multiplication in IDEA\n* Avoid possible timing attack against OAEP decoding\n* Removed FORK-256; rarely used and it has been broken\n* Rename ``--use-boost-python`` to ``--with-boost-python``\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add support for wide multiplications on 64-bit Windows\n* Use constant time multiplication in IDEA\n* Avoid possible timing attack against OAEP decoding\n* Removed FORK-256; rarely used and it has been broken\n* Rename ``--use-boost-python`` to ``--with-boost-python``\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add support for wide multiplications on 64-bit Windows\n* Use constant time multiplication in IDEA\n* Avoid possible timing attack against OAEP decoding\n* Removed FORK-256; rarely used and it has been broken\n* Rename ``--use-boost-python`` to ``--with-boost-python``\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2600,
                  "startColumn": 16,
                  "endLine": 2600,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n* Work around problem with recent binutils in x86-64 SHA-1\n\n* The Perl build script is no longer supported and refuses to run by\n  default. If you really want to use it, pass\n  ``--i-know-this-is-broken`` to the script.\n\n",
                    "rendered": {
                      "text": "\n* Work around problem with recent binutils in x86-64 SHA-1\n\n* The Perl build script is no longer supported and refuses to run by\n  default. If you really want to use it, pass\n  ``--i-know-this-is-broken`` to the script.\n\n",
                      "markdown": "`\n* Work around problem with recent binutils in x86-64 SHA-1\n\n* The Perl build script is no longer supported and refuses to run by\n  default. If you really want to use it, pass\n  ``--i-know-this-is-broken`` to the script.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2600,
                  "startColumn": 5,
                  "endLine": 2600,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n* Work around problem with recent binutils in x86-64 SHA-1\n\n* The Perl build script is no longer supported and refuses to run by\n  default. If you really want to use it, pass\n  ``--i-know-this-is-broken`` to the script.\n\n",
                    "rendered": {
                      "text": "\n* Work around problem with recent binutils in x86-64 SHA-1\n\n* The Perl build script is no longer supported and refuses to run by\n  default. If you really want to use it, pass\n  ``--i-know-this-is-broken`` to the script.\n\n",
                      "markdown": "`\n* Work around problem with recent binutils in x86-64 SHA-1\n\n* The Perl build script is no longer supported and refuses to run by\n  default. If you really want to use it, pass\n  ``--i-know-this-is-broken`` to the script.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2579,
                  "startColumn": 14,
                  "endLine": 2579,
                  "endColumn": 20,
                  "snippet": {
                    "text": "Version 1.8.9, 2010-06-16\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Use constant time multiplication in IDEA\n\n* Avoid possible timing attack against OAEP decoding\n\n",
                    "rendered": {
                      "text": "Version 1.8.9, 2010-06-16\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Use constant time multiplication in IDEA\n\n* Avoid possible timing attack against OAEP decoding\n\n",
                      "markdown": "`Version 1.8.9, 2010-06-16\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Use constant time multiplication in IDEA\n\n* Avoid possible timing attack against OAEP decoding\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2511,
                  "startColumn": 16,
                  "endLine": 2511,
                  "endColumn": 24,
                  "snippet": {
                    "text": "* Fix compilation under Sun Studio on Linux and Solaris\n* Add several functions for compatibility with 1.9\n* In the examples, read most input files as binary\n* The Perl build script has been removed in this release\n\nVersion 1.8.10, 2010-08-31\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* Fix compilation under Sun Studio on Linux and Solaris\n* Add several functions for compatibility with 1.9\n* In the examples, read most input files as binary\n* The Perl build script has been removed in this release\n\nVersion 1.8.10, 2010-08-31\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* Fix compilation under Sun Studio on Linux and Solaris\n* Add several functions for compatibility with 1.9\n* In the examples, read most input files as binary\n* The Perl build script has been removed in this release\n\nVersion 1.8.10, 2010-08-31\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2511,
                  "startColumn": 5,
                  "endLine": 2511,
                  "endColumn": 11,
                  "snippet": {
                    "text": "* Fix compilation under Sun Studio on Linux and Solaris\n* Add several functions for compatibility with 1.9\n* In the examples, read most input files as binary\n* The Perl build script has been removed in this release\n\nVersion 1.8.10, 2010-08-31\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* Fix compilation under Sun Studio on Linux and Solaris\n* Add several functions for compatibility with 1.9\n* In the examples, read most input files as binary\n* The Perl build script has been removed in this release\n\nVersion 1.8.10, 2010-08-31\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* Fix compilation under Sun Studio on Linux and Solaris\n* Add several functions for compatibility with 1.9\n* In the examples, read most input files as binary\n* The Perl build script has been removed in this release\n\nVersion 1.8.10, 2010-08-31\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2494,
                  "startColumn": 59,
                  "endLine": 2495,
                  "snippet": {
                    "text": "* Replace BlockCipher::BLOCK_SIZE attribute with function block_size()\n* Replace HashFunction::HASH_BLOCK_SIZE attribute with hash_block_size()\n* Move PBKDF lookup to engine system\n* The IDEA key schedule has been changed to run in constant time\n* Add Algorithm and Key_Length_Specification classes\n* Switch default PKCS #8 encryption algorithm from AES-128 to AES-256\n* Allow using PBKDF2 with empty passphrases\n* Add compile-time deprecation warnings for GCC, Clang, and MSVC\n",
                    "rendered": {
                      "text": "* Replace BlockCipher::BLOCK_SIZE attribute with function block_size()\n* Replace HashFunction::HASH_BLOCK_SIZE attribute with hash_block_size()\n* Move PBKDF lookup to engine system\n* The IDEA key schedule has been changed to run in constant time\n* Add Algorithm and Key_Length_Specification classes\n* Switch default PKCS #8 encryption algorithm from AES-128 to AES-256\n* Allow using PBKDF2 with empty passphrases\n* Add compile-time deprecation warnings for GCC, Clang, and MSVC\n",
                      "markdown": "`* Replace BlockCipher::BLOCK_SIZE attribute with function block_size()\n* Replace HashFunction::HASH_BLOCK_SIZE attribute with hash_block_size()\n* Move PBKDF lookup to engine system\n* The IDEA key schedule has been changed to run in constant time\n* Add Algorithm and Key_Length_Specification classes\n* Switch default PKCS #8 encryption algorithm from AES-128 to AES-256\n* Allow using PBKDF2 with empty passphrases\n* Add compile-time deprecation warnings for GCC, Clang, and MSVC\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2488,
                  "startColumn": 5,
                  "endLine": 2488,
                  "endColumn": 13,
                  "snippet": {
                    "text": "* Use small tables in the first round of AES\n* Removed AES class: app must choose AES-128, AES-192, or AES-256\n* Add hex encoding/decoding functions that can be used without a Pipe\n* Add base64 encoding functions that can be used without a Pipe\n* Add to_string function to X509_Certificate\n* Add support for dynamic engine loading on Windows\n* Replace BlockCipher::BLOCK_SIZE attribute with function block_size()\n",
                    "rendered": {
                      "text": "* Use small tables in the first round of AES\n* Removed AES class: app must choose AES-128, AES-192, or AES-256\n* Add hex encoding/decoding functions that can be used without a Pipe\n* Add base64 encoding functions that can be used without a Pipe\n* Add to_string function to X509_Certificate\n* Add support for dynamic engine loading on Windows\n* Replace BlockCipher::BLOCK_SIZE attribute with function block_size()\n",
                      "markdown": "`* Use small tables in the first round of AES\n* Removed AES class: app must choose AES-128, AES-192, or AES-256\n* Add hex encoding/decoding functions that can be used without a Pipe\n* Add base64 encoding functions that can be used without a Pipe\n* Add to_string function to X509_Certificate\n* Add support for dynamic engine loading on Windows\n* Replace BlockCipher::BLOCK_SIZE attribute with function block_size()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2457,
                  "startColumn": 8,
                  "endLine": 2457,
                  "endColumn": 17,
                  "snippet": {
                    "text": "* Add the Keccak hash function\n* Fix compilation problems in Python wrappers\n* Fix compilation problem in OpenSSL engine\n* Update SQLite3 database encryption codec\n\nVersion 1.9.11, 2010-11-29\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* Add the Keccak hash function\n* Fix compilation problems in Python wrappers\n* Fix compilation problem in OpenSSL engine\n* Update SQLite3 database encryption codec\n\nVersion 1.9.11, 2010-11-29\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* Add the Keccak hash function\n* Fix compilation problems in Python wrappers\n* Fix compilation problem in OpenSSL engine\n* Update SQLite3 database encryption codec\n\nVersion 1.9.11, 2010-11-29\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2456,
                  "startColumn": 28,
                  "endLine": 2456,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n* Add the Keccak hash function\n* Fix compilation problems in Python wrappers\n* Fix compilation problem in OpenSSL engine\n* Update SQLite3 database encryption codec\n\nVersion 1.9.11, 2010-11-29\n",
                    "rendered": {
                      "text": "\n* Add the Keccak hash function\n* Fix compilation problems in Python wrappers\n* Fix compilation problem in OpenSSL engine\n* Update SQLite3 database encryption codec\n\nVersion 1.9.11, 2010-11-29\n",
                      "markdown": "`\n* Add the Keccak hash function\n* Fix compilation problems in Python wrappers\n* Fix compilation problem in OpenSSL engine\n* Update SQLite3 database encryption codec\n\nVersion 1.9.11, 2010-11-29\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2266,
                  "startColumn": 15,
                  "endLine": 2266,
                  "endColumn": 23,
                  "snippet": {
                    "text": "* TR1 support is not longer automatically assumed under older versions\n  of GCC\n\n* Functions for base64 decoding that work standalone (without needing\n  to use a pipe) have been added to ``base64.h``\n\n* The function ``BigInt::to_u32bit`` was inadvertently removed in 1.9.11\n",
                    "rendered": {
                      "text": "* TR1 support is not longer automatically assumed under older versions\n  of GCC\n\n* Functions for base64 decoding that work standalone (without needing\n  to use a pipe) have been added to ``base64.h``\n\n* The function ``BigInt::to_u32bit`` was inadvertently removed in 1.9.11\n",
                      "markdown": "`* TR1 support is not longer automatically assumed under older versions\n  of GCC\n\n* Functions for base64 decoding that work standalone (without needing\n  to use a pipe) have been added to ``base64.h``\n\n* The function ``BigInt::to_u32bit`` was inadvertently removed in 1.9.11\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2172,
                  "startColumn": 20,
                  "endLine": 2172,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  allows an object to be properly roundtripped, which is necessary to\n  fix the race condition described above.\n\n* A new distribution script is now included, as\n  ``src/build-data/scripts/dist.py``\n\n* The ``build.h`` header now includes, if available, an identifier of\n",
                    "rendered": {
                      "text": "  allows an object to be properly roundtripped, which is necessary to\n  fix the race condition described above.\n\n* A new distribution script is now included, as\n  ``src/build-data/scripts/dist.py``\n\n* The ``build.h`` header now includes, if available, an identifier of\n",
                      "markdown": "`  allows an object to be properly roundtripped, which is necessary to\n  fix the race condition described above.\n\n* A new distribution script is now included, as\n  ``src/build-data/scripts/dist.py``\n\n* The ``build.h`` header now includes, if available, an identifier of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2087,
                  "startColumn": 18,
                  "endLine": 2087,
                  "endColumn": 27,
                  "snippet": {
                    "text": "and earlier versions, causing programs compiled against 1.10.1 to\ncrash if linked with 1.10.2 at runtime.\n\nRecent versions of OpenSSL include extra information in ECC private\nkeys, the presence of which caused an exception when such a key was\nloaded by botan. The decoding of ECC private keys has been changed to\nignore these fields if they are set.\n",
                    "rendered": {
                      "text": "and earlier versions, causing programs compiled against 1.10.1 to\ncrash if linked with 1.10.2 at runtime.\n\nRecent versions of OpenSSL include extra information in ECC private\nkeys, the presence of which caused an exception when such a key was\nloaded by botan. The decoding of ECC private keys has been changed to\nignore these fields if they are set.\n",
                      "markdown": "`and earlier versions, causing programs compiled against 1.10.1 to\ncrash if linked with 1.10.2 at runtime.\n\nRecent versions of OpenSSL include extra information in ECC private\nkeys, the presence of which caused an exception when such a key was\nloaded by botan. The decoding of ECC private keys has been changed to\nignore these fields if they are set.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2070,
                  "startColumn": 20,
                  "endLine": 2070,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  crash due to null pointer dereference where normally an exception\n  would occur.\n\n* Recent versions of OpenSSL include extra information in ECC private\n  keys, the presence of which caused an exception when such a key was\n  loaded by botan. The decoding of ECC private keys has been changed to\n  ignore these fields if they are set.\n",
                    "rendered": {
                      "text": "  crash due to null pointer dereference where normally an exception\n  would occur.\n\n* Recent versions of OpenSSL include extra information in ECC private\n  keys, the presence of which caused an exception when such a key was\n  loaded by botan. The decoding of ECC private keys has been changed to\n  ignore these fields if they are set.\n",
                      "markdown": "`  crash due to null pointer dereference where normally an exception\n  would occur.\n\n* Recent versions of OpenSSL include extra information in ECC private\n  keys, the presence of which caused an exception when such a key was\n  loaded by botan. The decoding of ECC private keys has been changed to\n  ignore these fields if they are set.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2059,
                  "startColumn": 41,
                  "endLine": 2059,
                  "endColumn": 49,
                  "snippet": {
                    "text": "and if the public key value is included it is used, as otherwise the\npublic key needs to be rederived from the private key. However the\nlibrary does not include these fields on encoding keys for\ncompatibility with software that does not expect them (including older\nversions of botan).\n\nVersion 1.8.14, 2012-07-18\n",
                    "rendered": {
                      "text": "and if the public key value is included it is used, as otherwise the\npublic key needs to be rederived from the private key. However the\nlibrary does not include these fields on encoding keys for\ncompatibility with software that does not expect them (including older\nversions of botan).\n\nVersion 1.8.14, 2012-07-18\n",
                      "markdown": "`and if the public key value is included it is used, as otherwise the\npublic key needs to be rederived from the private key. However the\nlibrary does not include these fields on encoding keys for\ncompatibility with software that does not expect them (including older\nversions of botan).\n\nVersion 1.8.14, 2012-07-18\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2055,
                  "startColumn": 2,
                  "endLine": 2055,
                  "endColumn": 11,
                  "snippet": {
                    "text": ":rfc:`5915` adds some extended information which can be included in\nECC private keys which the ECC key decoder did not expect, causing an\nexception when such a key was loaded. In particular, recent versions\nof OpenSSL use these fields. Now these fields are decoded properly,\nand if the public key value is included it is used, as otherwise the\npublic key needs to be rederived from the private key. However the\nlibrary does not include these fields on encoding keys for\n",
                    "rendered": {
                      "text": ":rfc:`5915` adds some extended information which can be included in\nECC private keys which the ECC key decoder did not expect, causing an\nexception when such a key was loaded. In particular, recent versions\nof OpenSSL use these fields. Now these fields are decoded properly,\nand if the public key value is included it is used, as otherwise the\npublic key needs to be rederived from the private key. However the\nlibrary does not include these fields on encoding keys for\n",
                      "markdown": "`:rfc:`5915` adds some extended information which can be included in\nECC private keys which the ECC key decoder did not expect, causing an\nexception when such a key was loaded. In particular, recent versions\nof OpenSSL use these fields. Now these fields are decoded properly,\nand if the public key value is included it is used, as otherwise the\npublic key needs to be rederived from the private key. However the\nlibrary does not include these fields on encoding keys for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2049,
                  "startColumn": 42,
                  "endLine": 2049,
                  "endColumn": 48,
                  "snippet": {
                    "text": "memory current Linux kernels allow unpriveledged users to lock.\n\nA filter using LZMA was contributed by Vojtech Kral. It is available\nif LZMA support was enabled at compilation time by passing\n``--with-lzma`` to ``configure.py``.\n\n:rfc:`5915` adds some extended information which can be included in\n",
                    "rendered": {
                      "text": "memory current Linux kernels allow unpriveledged users to lock.\n\nA filter using LZMA was contributed by Vojtech Kral. It is available\nif LZMA support was enabled at compilation time by passing\n``--with-lzma`` to ``configure.py``.\n\n:rfc:`5915` adds some extended information which can be included in\n",
                      "markdown": "`memory current Linux kernels allow unpriveledged users to lock.\n\nA filter using LZMA was contributed by Vojtech Kral. It is available\nif LZMA support was enabled at compilation time by passing\n``--with-lzma`` to ``configure.py``.\n\n:rfc:`5915` adds some extended information which can be included in\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 2023,
                  "startColumn": 12,
                  "endLine": 2023,
                  "endColumn": 21,
                  "snippet": {
                    "text": "sockets.  New TLS features include TLS v1.2 support, client\ncertificate authentication, renegotiation, session tickets, and\nsession resumption. Session information can be saved in memory or to\nan encrypted SQLite3 database. Newly supported TLS ciphersuite\nalgorithms include using SHA-2 for message authentication, pre shared\nkeys and SRP for authentication and key exchange, ECC algorithms for\nkey exchange and signatures, and anonymous DH/ECDH key exchange.\n",
                    "rendered": {
                      "text": "sockets.  New TLS features include TLS v1.2 support, client\ncertificate authentication, renegotiation, session tickets, and\nsession resumption. Session information can be saved in memory or to\nan encrypted SQLite3 database. Newly supported TLS ciphersuite\nalgorithms include using SHA-2 for message authentication, pre shared\nkeys and SRP for authentication and key exchange, ECC algorithms for\nkey exchange and signatures, and anonymous DH/ECDH key exchange.\n",
                      "markdown": "`sockets.  New TLS features include TLS v1.2 support, client\ncertificate authentication, renegotiation, session tickets, and\nsession resumption. Session information can be saved in memory or to\nan encrypted SQLite3 database. Newly supported TLS ciphersuite\nalgorithms include using SHA-2 for message authentication, pre shared\nkeys and SRP for authentication and key exchange, ECC algorithms for\nkey exchange and signatures, and anonymous DH/ECDH key exchange.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1927,
                  "startColumn": 53,
                  "endLine": 1927,
                  "endColumn": 59,
                  "snippet": {
                    "text": "  rejected. Credits to Timothy Prepscius for pointing out these values\n  are not normally used and probably signal something fishy.\n\n* The return value of version_string is now a compile time constant\n  string, so version information can be more easily extracted from\n  binaries.\n\n",
                    "rendered": {
                      "text": "  rejected. Credits to Timothy Prepscius for pointing out these values\n  are not normally used and probably signal something fishy.\n\n* The return value of version_string is now a compile time constant\n  string, so version information can be more easily extracted from\n  binaries.\n\n",
                      "markdown": "`  rejected. Credits to Timothy Prepscius for pointing out these values\n  are not normally used and probably signal something fishy.\n\n* The return value of version_string is now a compile time constant\n  string, so version information can be more easily extracted from\n  binaries.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1890,
                  "startColumn": 62,
                  "endLine": 1890,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  Now ``clear_mem`` calls ``zero_mem`` which is compiled separately and\n  which zeros out the array through a volatile pointer. It is possible\n  some compiler with some optimization setting (especially with\n  something like LTO) might still skip the writes. It would be nice if\n  there was an automated way to test this.\n\n* The new filter ``Threaded_Fork`` acts like a normal\n",
                    "rendered": {
                      "text": "  Now ``clear_mem`` calls ``zero_mem`` which is compiled separately and\n  which zeros out the array through a volatile pointer. It is possible\n  some compiler with some optimization setting (especially with\n  something like LTO) might still skip the writes. It would be nice if\n  there was an automated way to test this.\n\n* The new filter ``Threaded_Fork`` acts like a normal\n",
                      "markdown": "`  Now ``clear_mem`` calls ``zero_mem`` which is compiled separately and\n  which zeros out the array through a volatile pointer. It is possible\n  some compiler with some optimization setting (especially with\n  something like LTO) might still skip the writes. It would be nice if\n  there was an automated way to test this.\n\n* The new filter ``Threaded_Fork`` acts like a normal\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1880,
                  "startColumn": 22,
                  "endLine": 1880,
                  "endColumn": 30,
                  "snippet": {
                    "text": "Version 1.11.2, 2013-03-02\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* A bug in the release script caused the ``botan_version.py`` included\n  in 1.11.1`` to be invalid, which required a manual edit to fix\n  (Bugzilla 226)\n\n",
                    "rendered": {
                      "text": "Version 1.11.2, 2013-03-02\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* A bug in the release script caused the ``botan_version.py`` included\n  in 1.11.1`` to be invalid, which required a manual edit to fix\n  (Bugzilla 226)\n\n",
                      "markdown": "`Version 1.11.2, 2013-03-02\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* A bug in the release script caused the ``botan_version.py`` included\n  in 1.11.1`` to be invalid, which required a manual edit to fix\n  (Bugzilla 226)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1875,
                  "startColumn": 15,
                  "endLine": 1875,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n* Use correct flags for creating a shared library on OS X under Clang.\n\n* Fix a compile time incompatibility with Visual C++ 2012.\n\nVersion 1.11.2, 2013-03-02\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "\n* Use correct flags for creating a shared library on OS X under Clang.\n\n* Fix a compile time incompatibility with Visual C++ 2012.\n\nVersion 1.11.2, 2013-03-02\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`\n* Use correct flags for creating a shared library on OS X under Clang.\n\n* Fix a compile time incompatibility with Visual C++ 2012.\n\nVersion 1.11.2, 2013-03-02\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1806,
                  "startColumn": 29,
                  "endLine": 1806,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  use on CPUs that do not support those operations.\n\n* The default TLS policy now only accepts TLS, to minimize surprise\n  for servers which might not expect to negotiate DTLS. Previously a\n  server would by default negotiate either protocol type (clients\n  would only accept the same protocol type as they\n  offered). Applications which use DTLS or combined TLS/DTLS need to\n",
                    "rendered": {
                      "text": "  use on CPUs that do not support those operations.\n\n* The default TLS policy now only accepts TLS, to minimize surprise\n  for servers which might not expect to negotiate DTLS. Previously a\n  server would by default negotiate either protocol type (clients\n  would only accept the same protocol type as they\n  offered). Applications which use DTLS or combined TLS/DTLS need to\n",
                      "markdown": "`  use on CPUs that do not support those operations.\n\n* The default TLS policy now only accepts TLS, to minimize surprise\n  for servers which might not expect to negotiate DTLS. Previously a\n  server would by default negotiate either protocol type (clients\n  would only accept the same protocol type as they\n  offered). Applications which use DTLS or combined TLS/DTLS need to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1603,
                  "startColumn": 19,
                  "endLine": 1603,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n* The Square, Skipjack, and Luby-Rackoff block ciphers have been removed.\n\n* The Blue Midnight Wish hash function has been removed.\n\n* Skein-512 no longer supports output lengths greater than 512 bits.\n\n",
                    "rendered": {
                      "text": "\n* The Square, Skipjack, and Luby-Rackoff block ciphers have been removed.\n\n* The Blue Midnight Wish hash function has been removed.\n\n* Skein-512 no longer supports output lengths greater than 512 bits.\n\n",
                      "markdown": "`\n* The Square, Skipjack, and Luby-Rackoff block ciphers have been removed.\n\n* The Blue Midnight Wish hash function has been removed.\n\n* Skein-512 no longer supports output lengths greater than 512 bits.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1518,
                  "startColumn": 19,
                  "endLine": 1518,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n* Added AltiVec detection for POWER8 processors.\n\n* Add a new install script written in Python which replaces shell hackery in the\n  makefiles.\n\n* Various modifications to better support Visual C++ 2013 and 2015. Github\n",
                    "rendered": {
                      "text": "\n* Added AltiVec detection for POWER8 processors.\n\n* Add a new install script written in Python which replaces shell hackery in the\n  makefiles.\n\n* Various modifications to better support Visual C++ 2013 and 2015. Github\n",
                      "markdown": "`\n* Added AltiVec detection for POWER8 processors.\n\n* Add a new install script written in Python which replaces shell hackery in the\n  makefiles.\n\n* Various modifications to better support Visual C++ 2013 and 2015. Github\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1489,
                  "startColumn": 53,
                  "endLine": 1489,
                  "endColumn": 59,
                  "snippet": {
                    "text": "* The zlib module now also supports gzip compression and decompression.\n\n* Avoid a crash in low-entropy situations when reading from /dev/random, when\n  select indicated the device was readable but by the time we start the read the\n  entropy pool had been depleted.\n\n* The Miller-Rabin primality test function now takes a parameter allowing the\n",
                    "rendered": {
                      "text": "* The zlib module now also supports gzip compression and decompression.\n\n* Avoid a crash in low-entropy situations when reading from /dev/random, when\n  select indicated the device was readable but by the time we start the read the\n  entropy pool had been depleted.\n\n* The Miller-Rabin primality test function now takes a parameter allowing the\n",
                      "markdown": "`* The zlib module now also supports gzip compression and decompression.\n\n* Avoid a crash in low-entropy situations when reading from /dev/random, when\n  select indicated the device was readable but by the time we start the read the\n  entropy pool had been depleted.\n\n* The Miller-Rabin primality test function now takes a parameter allowing the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1475,
                  "startColumn": 55,
                  "endLine": 1475,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  use L=3. Thanks to Manuel Pégourié-Gonnard for the anaylsis and patch.\n  Bugzilla 270.\n\n* DTLS now supports timeouts and handshake retransmits. Timeout checking\n  is triggered by the application calling the new TLS::Channel::timeout_check.\n\n* Add a TLS policy hook to disable putting the value of the local clock in hello\n",
                    "rendered": {
                      "text": "  use L=3. Thanks to Manuel Pégourié-Gonnard for the anaylsis and patch.\n  Bugzilla 270.\n\n* DTLS now supports timeouts and handshake retransmits. Timeout checking\n  is triggered by the application calling the new TLS::Channel::timeout_check.\n\n* Add a TLS policy hook to disable putting the value of the local clock in hello\n",
                      "markdown": "`  use L=3. Thanks to Manuel Pégourié-Gonnard for the anaylsis and patch.\n  Bugzilla 270.\n\n* DTLS now supports timeouts and handshake retransmits. Timeout checking\n  is triggered by the application calling the new TLS::Channel::timeout_check.\n\n* Add a TLS policy hook to disable putting the value of the local clock in hello\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1463,
                  "startColumn": 42,
                  "endLine": 1463,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  applications implementing fallback are protected. Servers always check the\n  SCSV.\n\n* In previous versions a TLS::Server could service either TLS or DTLS\n  connections depending on policy settings and what type of client hello it\n  received. This has changed and now a Server object is initialized for\n  either TLS or DTLS operation. The default policy previously prohibited\n",
                    "rendered": {
                      "text": "  applications implementing fallback are protected. Servers always check the\n  SCSV.\n\n* In previous versions a TLS::Server could service either TLS or DTLS\n  connections depending on policy settings and what type of client hello it\n  received. This has changed and now a Server object is initialized for\n  either TLS or DTLS operation. The default policy previously prohibited\n",
                      "markdown": "`  applications implementing fallback are protected. Servers always check the\n  SCSV.\n\n* In previous versions a TLS::Server could service either TLS or DTLS\n  connections depending on policy settings and what type of client hello it\n  received. This has changed and now a Server object is initialized for\n  either TLS or DTLS operation. The default policy previously prohibited\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1439,
                  "startColumn": 5,
                  "endLine": 1439,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n* The ``botan-config`` script previously tried to guess its prefix from\n  the location of the binary. However this was error prone, and now\n  the script assumes the final installation prefix matches the value\n  set during the build. Github issue 29.\n\nVersion 1.11.10, 2014-12-10\n",
                    "rendered": {
                      "text": "\n* The ``botan-config`` script previously tried to guess its prefix from\n  the location of the binary. However this was error prone, and now\n  the script assumes the final installation prefix matches the value\n  set during the build. Github issue 29.\n\nVersion 1.11.10, 2014-12-10\n",
                      "markdown": "`\n* The ``botan-config`` script previously tried to guess its prefix from\n  the location of the binary. However this was error prone, and now\n  the script assumes the final installation prefix matches the value\n  set during the build. Github issue 29.\n\nVersion 1.11.10, 2014-12-10\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1437,
                  "startColumn": 22,
                  "endLine": 1437,
                  "endColumn": 30,
                  "snippet": {
                    "text": "* Fix decoding indefinite length BER constructs that contain a context\n  sensitive tag of zero. Github pull 26 from Janusz Chorko.\n\n* The ``botan-config`` script previously tried to guess its prefix from\n  the location of the binary. However this was error prone, and now\n  the script assumes the final installation prefix matches the value\n  set during the build. Github issue 29.\n",
                    "rendered": {
                      "text": "* Fix decoding indefinite length BER constructs that contain a context\n  sensitive tag of zero. Github pull 26 from Janusz Chorko.\n\n* The ``botan-config`` script previously tried to guess its prefix from\n  the location of the binary. However this was error prone, and now\n  the script assumes the final installation prefix matches the value\n  set during the build. Github issue 29.\n",
                      "markdown": "`* Fix decoding indefinite length BER constructs that contain a context\n  sensitive tag of zero. Github pull 26 from Janusz Chorko.\n\n* The ``botan-config`` script previously tried to guess its prefix from\n  the location of the binary. However this was error prone, and now\n  the script assumes the final installation prefix matches the value\n  set during the build. Github issue 29.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1425,
                  "startColumn": 47,
                  "endLine": 1426,
                  "snippet": {
                    "text": "Version 1.10.9, 2014-12-13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fixed EAX tag verification to run in constant time\n\n* The default TLS policy now disables SSLv3.\n\n* A crash could occur when reading from a blocking random device if\n",
                    "rendered": {
                      "text": "Version 1.10.9, 2014-12-13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fixed EAX tag verification to run in constant time\n\n* The default TLS policy now disables SSLv3.\n\n* A crash could occur when reading from a blocking random device if\n",
                      "markdown": "`Version 1.10.9, 2014-12-13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fixed EAX tag verification to run in constant time\n\n* The default TLS policy now disables SSLv3.\n\n* A crash could occur when reading from a blocking random device if\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1400,
                  "startColumn": 57,
                  "endLine": 1401,
                  "snippet": {
                    "text": "  SQL dbs in general, though Sqlite3 remains the only implementation.\n  The main logic of the TLS session manager which stored encrypted\n  sessions to a Sqlite3 database (``TLS::Session_Manager_SQLite``) has\n  been moved to the new ``TLS::Session_Manager_SQL``. The Sqlite3\n  manager API remains the same but now just subclasses\n  ``TLS::Session_Manager_SQL`` and has a constructor instantiate the\n  concrete database instance.\n\n",
                    "rendered": {
                      "text": "  SQL dbs in general, though Sqlite3 remains the only implementation.\n  The main logic of the TLS session manager which stored encrypted\n  sessions to a Sqlite3 database (``TLS::Session_Manager_SQLite``) has\n  been moved to the new ``TLS::Session_Manager_SQL``. The Sqlite3\n  manager API remains the same but now just subclasses\n  ``TLS::Session_Manager_SQL`` and has a constructor instantiate the\n  concrete database instance.\n\n",
                      "markdown": "`  SQL dbs in general, though Sqlite3 remains the only implementation.\n  The main logic of the TLS session manager which stored encrypted\n  sessions to a Sqlite3 database (``TLS::Session_Manager_SQLite``) has\n  been moved to the new ``TLS::Session_Manager_SQL``. The Sqlite3\n  manager API remains the same but now just subclasses\n  ``TLS::Session_Manager_SQL`` and has a constructor instantiate the\n  concrete database instance.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1399,
                  "startColumn": 15,
                  "endLine": 1399,
                  "endColumn": 24,
                  "snippet": {
                    "text": "* The Sqlite3 wrapper has been abstracted to a simple interface for\n  SQL dbs in general, though Sqlite3 remains the only implementation.\n  The main logic of the TLS session manager which stored encrypted\n  sessions to a Sqlite3 database (``TLS::Session_Manager_SQLite``) has\n  been moved to the new ``TLS::Session_Manager_SQL``. The Sqlite3\n  manager API remains the same but now just subclasses\n  ``TLS::Session_Manager_SQL`` and has a constructor instantiate the\n",
                    "rendered": {
                      "text": "* The Sqlite3 wrapper has been abstracted to a simple interface for\n  SQL dbs in general, though Sqlite3 remains the only implementation.\n  The main logic of the TLS session manager which stored encrypted\n  sessions to a Sqlite3 database (``TLS::Session_Manager_SQLite``) has\n  been moved to the new ``TLS::Session_Manager_SQL``. The Sqlite3\n  manager API remains the same but now just subclasses\n  ``TLS::Session_Manager_SQL`` and has a constructor instantiate the\n",
                      "markdown": "`* The Sqlite3 wrapper has been abstracted to a simple interface for\n  SQL dbs in general, though Sqlite3 remains the only implementation.\n  The main logic of the TLS session manager which stored encrypted\n  sessions to a Sqlite3 database (``TLS::Session_Manager_SQLite``) has\n  been moved to the new ``TLS::Session_Manager_SQL``. The Sqlite3\n  manager API remains the same but now just subclasses\n  ``TLS::Session_Manager_SQL`` and has a constructor instantiate the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1397,
                  "startColumn": 28,
                  "endLine": 1397,
                  "endColumn": 37,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* The Sqlite3 wrapper has been abstracted to a simple interface for\n  SQL dbs in general, though Sqlite3 remains the only implementation.\n  The main logic of the TLS session manager which stored encrypted\n  sessions to a Sqlite3 database (``TLS::Session_Manager_SQLite``) has\n  been moved to the new ``TLS::Session_Manager_SQL``. The Sqlite3\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* The Sqlite3 wrapper has been abstracted to a simple interface for\n  SQL dbs in general, though Sqlite3 remains the only implementation.\n  The main logic of the TLS session manager which stored encrypted\n  sessions to a Sqlite3 database (``TLS::Session_Manager_SQLite``) has\n  been moved to the new ``TLS::Session_Manager_SQL``. The Sqlite3\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* The Sqlite3 wrapper has been abstracted to a simple interface for\n  SQL dbs in general, though Sqlite3 remains the only implementation.\n  The main logic of the TLS session manager which stored encrypted\n  sessions to a Sqlite3 database (``TLS::Session_Manager_SQLite``) has\n  been moved to the new ``TLS::Session_Manager_SQL``. The Sqlite3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1396,
                  "startColumn": 5,
                  "endLine": 1396,
                  "endColumn": 14,
                  "snippet": {
                    "text": "Version 1.11.11, 2014-12-21\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* The Sqlite3 wrapper has been abstracted to a simple interface for\n  SQL dbs in general, though Sqlite3 remains the only implementation.\n  The main logic of the TLS session manager which stored encrypted\n  sessions to a Sqlite3 database (``TLS::Session_Manager_SQLite``) has\n",
                    "rendered": {
                      "text": "Version 1.11.11, 2014-12-21\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* The Sqlite3 wrapper has been abstracted to a simple interface for\n  SQL dbs in general, though Sqlite3 remains the only implementation.\n  The main logic of the TLS session manager which stored encrypted\n  sessions to a Sqlite3 database (``TLS::Session_Manager_SQLite``) has\n",
                      "markdown": "`Version 1.11.11, 2014-12-21\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* The Sqlite3 wrapper has been abstracted to a simple interface for\n  SQL dbs in general, though Sqlite3 remains the only implementation.\n  The main logic of the TLS session manager which stored encrypted\n  sessions to a Sqlite3 database (``TLS::Session_Manager_SQLite``) has\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1367,
                  "startColumn": 17,
                  "endLine": 1367,
                  "endColumn": 25,
                  "snippet": {
                    "text": "* The Python install script added in version 1.11.10 failed to place the\n  headers into a versioned subdirectory.\n\n* Fix the install script when running under Python3.\n\n* Avoid code that triggers iterator debugging asserts under MSVC 2013. Github\n  pull 36 from Simon Warta.\n",
                    "rendered": {
                      "text": "* The Python install script added in version 1.11.10 failed to place the\n  headers into a versioned subdirectory.\n\n* Fix the install script when running under Python3.\n\n* Avoid code that triggers iterator debugging asserts under MSVC 2013. Github\n  pull 36 from Simon Warta.\n",
                      "markdown": "`* The Python install script added in version 1.11.10 failed to place the\n  headers into a versioned subdirectory.\n\n* Fix the install script when running under Python3.\n\n* Avoid code that triggers iterator debugging asserts under MSVC 2013. Github\n  pull 36 from Simon Warta.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1364,
                  "startColumn": 20,
                  "endLine": 1364,
                  "endColumn": 28,
                  "snippet": {
                    "text": "* The functions base64_encode and base64_decode would erroneously\n  throw an exception if passed a zero-length input. Github issue 37.\n\n* The Python install script added in version 1.11.10 failed to place the\n  headers into a versioned subdirectory.\n\n* Fix the install script when running under Python3.\n",
                    "rendered": {
                      "text": "* The functions base64_encode and base64_decode would erroneously\n  throw an exception if passed a zero-length input. Github issue 37.\n\n* The Python install script added in version 1.11.10 failed to place the\n  headers into a versioned subdirectory.\n\n* Fix the install script when running under Python3.\n",
                      "markdown": "`* The functions base64_encode and base64_decode would erroneously\n  throw an exception if passed a zero-length input. Github issue 37.\n\n* The Python install script added in version 1.11.10 failed to place the\n  headers into a versioned subdirectory.\n\n* Fix the install script when running under Python3.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1321,
                  "startColumn": 18,
                  "endLine": 1321,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  available mlocked memory, this allows botan to coexist with an application\n  which wants to mlock memory for its own uses.\n\n* The botan-config script previously installed on Unix systems has been\n  removed.  Its functionality is replaced by the ``config`` command of the\n  ``botan`` tool executable, for example ``botan config cflags`` instead of\n  ``botan-config --cflags``.\n",
                    "rendered": {
                      "text": "  available mlocked memory, this allows botan to coexist with an application\n  which wants to mlock memory for its own uses.\n\n* The botan-config script previously installed on Unix systems has been\n  removed.  Its functionality is replaced by the ``config`` command of the\n  ``botan`` tool executable, for example ``botan config cflags`` instead of\n  ``botan-config --cflags``.\n",
                      "markdown": "`  available mlocked memory, this allows botan to coexist with an application\n  which wants to mlock memory for its own uses.\n\n* The botan-config script previously installed on Unix systems has been\n  removed.  Its functionality is replaced by the ``config`` command of the\n  ``botan`` tool executable, for example ``botan config cflags`` instead of\n  ``botan-config --cflags``.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1277,
                  "startColumn": 46,
                  "endLine": 1277,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n* Add specialized reducers for P-192, P-224, P-256, and P-384\n\n* OCB mode, which provides a fast and constant time AEAD mode without requiring\n  hardware support, is now supported in TLS, following\n  draft-zauner-tls-aes-ocb-01. Because this specification is not yet finalized\n  is not yet enabled by the default policy, and the ciphersuite numbers used are\n",
                    "rendered": {
                      "text": "\n* Add specialized reducers for P-192, P-224, P-256, and P-384\n\n* OCB mode, which provides a fast and constant time AEAD mode without requiring\n  hardware support, is now supported in TLS, following\n  draft-zauner-tls-aes-ocb-01. Because this specification is not yet finalized\n  is not yet enabled by the default policy, and the ciphersuite numbers used are\n",
                      "markdown": "`\n* Add specialized reducers for P-192, P-224, P-256, and P-384\n\n* OCB mode, which provides a fast and constant time AEAD mode without requiring\n  hardware support, is now supported in TLS, following\n  draft-zauner-tls-aes-ocb-01. Because this specification is not yet finalized\n  is not yet enabled by the default policy, and the ciphersuite numbers used are\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1253,
                  "startColumn": 57,
                  "endLine": 1253,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  multiple times without harm.\n\n  The engine code has also been removed, replaced by a much lighter-weight\n  object registry system which provides lookups in faster time and with less\n  memory overhead than the previous approach.\n\n  One caveat of the current system with regards to static linking: because only\n",
                    "rendered": {
                      "text": "  multiple times without harm.\n\n  The engine code has also been removed, replaced by a much lighter-weight\n  object registry system which provides lookups in faster time and with less\n  memory overhead than the previous approach.\n\n  One caveat of the current system with regards to static linking: because only\n",
                      "markdown": "`  multiple times without harm.\n\n  The engine code has also been removed, replaced by a much lighter-weight\n  object registry system which provides lookups in faster time and with less\n  memory overhead than the previous approach.\n\n  One caveat of the current system with regards to static linking: because only\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1239,
                  "startColumn": 13,
                  "endLine": 1239,
                  "endColumn": 22,
                  "snippet": {
                    "text": "* Fixed memory leaks in TLS and cipher modes introduced in 1.11.14\n\n* MARK-4 failed when OpenSSL was enabled in the build in 1.11.14\n  because the OpenSSL version ignored the skip parameter.\n\n* Fix compilation problem on OS X/clang\n\n",
                    "rendered": {
                      "text": "* Fixed memory leaks in TLS and cipher modes introduced in 1.11.14\n\n* MARK-4 failed when OpenSSL was enabled in the build in 1.11.14\n  because the OpenSSL version ignored the skip parameter.\n\n* Fix compilation problem on OS X/clang\n\n",
                      "markdown": "`* Fixed memory leaks in TLS and cipher modes introduced in 1.11.14\n\n* MARK-4 failed when OpenSSL was enabled in the build in 1.11.14\n  because the OpenSSL version ignored the skip parameter.\n\n* Fix compilation problem on OS X/clang\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1238,
                  "startColumn": 20,
                  "endLine": 1238,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n* Fixed memory leaks in TLS and cipher modes introduced in 1.11.14\n\n* MARK-4 failed when OpenSSL was enabled in the build in 1.11.14\n  because the OpenSSL version ignored the skip parameter.\n\n* Fix compilation problem on OS X/clang\n",
                    "rendered": {
                      "text": "\n* Fixed memory leaks in TLS and cipher modes introduced in 1.11.14\n\n* MARK-4 failed when OpenSSL was enabled in the build in 1.11.14\n  because the OpenSSL version ignored the skip parameter.\n\n* Fix compilation problem on OS X/clang\n",
                      "markdown": "`\n* Fixed memory leaks in TLS and cipher modes introduced in 1.11.14\n\n* MARK-4 failed when OpenSSL was enabled in the build in 1.11.14\n  because the OpenSSL version ignored the skip parameter.\n\n* Fix compilation problem on OS X/clang\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1208,
                  "startColumn": 14,
                  "endLine": 1208,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  supporting specialized implementations which only support particular\n  padding types.\n\n* Added global timeout to HMAC_RNG entropy reseed. The defaults are\n  the values set in the build.h macros ``BOTAN_RNG_AUTO_RESEED_TIMEOUT``\n  and ``BOTAN_RNG_RESEED_DEFAULT_TIMEOUT``, but can be overriden\n  on a specific poll with the new API call reseed_with_timeout.\n",
                    "rendered": {
                      "text": "  supporting specialized implementations which only support particular\n  padding types.\n\n* Added global timeout to HMAC_RNG entropy reseed. The defaults are\n  the values set in the build.h macros ``BOTAN_RNG_AUTO_RESEED_TIMEOUT``\n  and ``BOTAN_RNG_RESEED_DEFAULT_TIMEOUT``, but can be overriden\n  on a specific poll with the new API call reseed_with_timeout.\n",
                      "markdown": "`  supporting specialized implementations which only support particular\n  padding types.\n\n* Added global timeout to HMAC_RNG entropy reseed. The defaults are\n  the values set in the build.h macros ``BOTAN_RNG_AUTO_RESEED_TIMEOUT``\n  and ``BOTAN_RNG_RESEED_DEFAULT_TIMEOUT``, but can be overriden\n  on a specific poll with the new API call reseed_with_timeout.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1201,
                  "startColumn": 42,
                  "endLine": 1201,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  Dr. Falko Strenzke. On some systems verifications are between 1.5\n  and 2 times faster than in 1.11.15.\n\n* RSA encrypt and decrypt operations using OpenSSL have been added.\n\n* Public key operation types now handle all aspects of the operation,\n  such as hashing and padding for signatures. This change allows\n",
                    "rendered": {
                      "text": "  Dr. Falko Strenzke. On some systems verifications are between 1.5\n  and 2 times faster than in 1.11.15.\n\n* RSA encrypt and decrypt operations using OpenSSL have been added.\n\n* Public key operation types now handle all aspects of the operation,\n  such as hashing and padding for signatures. This change allows\n",
                      "markdown": "`  Dr. Falko Strenzke. On some systems verifications are between 1.5\n  and 2 times faster than in 1.11.15.\n\n* RSA encrypt and decrypt operations using OpenSSL have been added.\n\n* Public key operation types now handle all aspects of the operation,\n  such as hashing and padding for signatures. This change allows\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1131,
                  "startColumn": 48,
                  "endLine": 1131,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n* The default TLS policy no longer allows RC4.\n\n* Fix a signed integer overflow in Blue Midnight Wish that may cause\n  incorrect computations or undefined behavior.\n\nVersion 1.11.18, 2015-07-05\n",
                    "rendered": {
                      "text": "\n* The default TLS policy no longer allows RC4.\n\n* Fix a signed integer overflow in Blue Midnight Wish that may cause\n  incorrect computations or undefined behavior.\n\nVersion 1.11.18, 2015-07-05\n",
                      "markdown": "`\n* The default TLS policy no longer allows RC4.\n\n* Fix a signed integer overflow in Blue Midnight Wish that may cause\n  incorrect computations or undefined behavior.\n\nVersion 1.11.18, 2015-07-05\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1032,
                  "startColumn": 25,
                  "endLine": 1032,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  including exponent blinding and randomization of the point\n  representation to help protect against side channel attacks.\n\n* An ECDSA provider using OpenSSL has been added.\n\n* The ordering of algorithm priorities has been reversed. Previously\n  255 was the lowest priority and 0 was the highest priority. Now it\n",
                    "rendered": {
                      "text": "  including exponent blinding and randomization of the point\n  representation to help protect against side channel attacks.\n\n* An ECDSA provider using OpenSSL has been added.\n\n* The ordering of algorithm priorities has been reversed. Previously\n  255 was the lowest priority and 0 was the highest priority. Now it\n",
                      "markdown": "`  including exponent blinding and randomization of the point\n  representation to help protect against side channel attacks.\n\n* An ECDSA provider using OpenSSL has been added.\n\n* The ordering of algorithm priorities has been reversed. Previously\n  255 was the lowest priority and 0 was the highest priority. Now it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 1023,
                  "startColumn": 5,
                  "endLine": 1023,
                  "endColumn": 11,
                  "snippet": {
                    "text": "* The encrypted sqlite database support in contrib has moved to\n  https://github.com/randombit/botan-sqlite\n\n* The Perl XS module has been removed as it was no longer maintained.\n\nVersion 1.11.20, 2015-09-07\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* The encrypted sqlite database support in contrib has moved to\n  https://github.com/randombit/botan-sqlite\n\n* The Perl XS module has been removed as it was no longer maintained.\n\nVersion 1.11.20, 2015-09-07\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* The encrypted sqlite database support in contrib has moved to\n  https://github.com/randombit/botan-sqlite\n\n* The Perl XS module has been removed as it was no longer maintained.\n\nVersion 1.11.20, 2015-09-07\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 992,
                  "startColumn": 52,
                  "endLine": 992,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  under the more understandable name `--minimized-build`.\n\n* Note: 1.11.22 was briefly released on 2015-10-26. The only difference between\n  the two was a fix for a compilation problem in the OpenSSL RSA code.  As the\n  1.11.22 release had already been tagged it was simpler to immediately release\n  1.11.23 rather than redo the release.\n\n",
                    "rendered": {
                      "text": "  under the more understandable name `--minimized-build`.\n\n* Note: 1.11.22 was briefly released on 2015-10-26. The only difference between\n  the two was a fix for a compilation problem in the OpenSSL RSA code.  As the\n  1.11.22 release had already been tagged it was simpler to immediately release\n  1.11.23 rather than redo the release.\n\n",
                      "markdown": "`  under the more understandable name `--minimized-build`.\n\n* Note: 1.11.22 was briefly released on 2015-10-26. The only difference between\n  the two was a fix for a compilation problem in the OpenSSL RSA code.  As the\n  1.11.22 release had already been tagged it was simpler to immediately release\n  1.11.23 rather than redo the release.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 969,
                  "startColumn": 1,
                  "endLine": 969,
                  "endColumn": 10,
                  "snippet": {
                    "text": "* Public key operations can now be used with specified providers by passing an\n  additional parameter to the constructor of the PK operation.\n\n* OpenSSL RSA provider now supports signature creation and verification.\n\n* The blinding code used for RSA, Diffie-Hellman, ElGamal and Rabin-Williams now\n  periodically reinitializes the sequence of blinding values instead of always\n",
                    "rendered": {
                      "text": "* Public key operations can now be used with specified providers by passing an\n  additional parameter to the constructor of the PK operation.\n\n* OpenSSL RSA provider now supports signature creation and verification.\n\n* The blinding code used for RSA, Diffie-Hellman, ElGamal and Rabin-Williams now\n  periodically reinitializes the sequence of blinding values instead of always\n",
                      "markdown": "`* Public key operations can now be used with specified providers by passing an\n  additional parameter to the constructor of the PK operation.\n\n* OpenSSL RSA provider now supports signature creation and verification.\n\n* The blinding code used for RSA, Diffie-Hellman, ElGamal and Rabin-Williams now\n  periodically reinitializes the sequence of blinding values instead of always\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 963,
                  "startColumn": 59,
                  "endLine": 963,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  The testing relies on dynamic checking using valgrind.\n\n  So far PKCS #1 decoding, OAEP decoding, Montgomery reduction, IDEA, and\n  Curve25519 have been notated and confirmed to be constant time on Linux/x86-64\n  when compiled by gcc.\n\n* Public key operations can now be used with specified providers by passing an\n",
                    "rendered": {
                      "text": "  The testing relies on dynamic checking using valgrind.\n\n  So far PKCS #1 decoding, OAEP decoding, Montgomery reduction, IDEA, and\n  Curve25519 have been notated and confirmed to be constant time on Linux/x86-64\n  when compiled by gcc.\n\n* Public key operations can now be used with specified providers by passing an\n",
                      "markdown": "`  The testing relies on dynamic checking using valgrind.\n\n  So far PKCS #1 decoding, OAEP decoding, Montgomery reduction, IDEA, and\n  Curve25519 have been notated and confirmed to be constant time on Linux/x86-64\n  when compiled by gcc.\n\n* Public key operations can now be used with specified providers by passing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 955,
                  "startColumn": 58,
                  "endLine": 955,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  By writing the code such that it does not depend on secret inputs for branch\n  or memory indexes, such a side channel would be much less likely to exist.\n\n  The OAEP code has previously made an attempt at constant time operation, but\n  it used a construct which many compilers converted into a conditional jump.\n\n* Add support for using ctgrind (https://github.com/agl/ctgrind) to test that\n",
                    "rendered": {
                      "text": "  By writing the code such that it does not depend on secret inputs for branch\n  or memory indexes, such a side channel would be much less likely to exist.\n\n  The OAEP code has previously made an attempt at constant time operation, but\n  it used a construct which many compilers converted into a conditional jump.\n\n* Add support for using ctgrind (https://github.com/agl/ctgrind) to test that\n",
                      "markdown": "`  By writing the code such that it does not depend on secret inputs for branch\n  or memory indexes, such a side channel would be much less likely to exist.\n\n  The OAEP code has previously made an attempt at constant time operation, but\n  it used a construct which many compilers converted into a conditional jump.\n\n* Add support for using ctgrind (https://github.com/agl/ctgrind) to test that\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 950,
                  "startColumn": 34,
                  "endLine": 950,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  cryptographic operations are vulnerable to oracle attacks, including via side\n  channels such as timing or cache-based analysis. In theory it would be\n  possible to attack the previous implementations using such a side channel,\n  which could allow an attacker to mount a plaintext recovery attack.\n\n  By writing the code such that it does not depend on secret inputs for branch\n  or memory indexes, such a side channel would be much less likely to exist.\n",
                    "rendered": {
                      "text": "  cryptographic operations are vulnerable to oracle attacks, including via side\n  channels such as timing or cache-based analysis. In theory it would be\n  possible to attack the previous implementations using such a side channel,\n  which could allow an attacker to mount a plaintext recovery attack.\n\n  By writing the code such that it does not depend on secret inputs for branch\n  or memory indexes, such a side channel would be much less likely to exist.\n",
                      "markdown": "`  cryptographic operations are vulnerable to oracle attacks, including via side\n  channels such as timing or cache-based analysis. In theory it would be\n  possible to attack the previous implementations using such a side channel,\n  which could allow an attacker to mount a plaintext recovery attack.\n\n  By writing the code such that it does not depend on secret inputs for branch\n  or memory indexes, such a side channel would be much less likely to exist.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 890,
                  "startColumn": 5,
                  "endLine": 890,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  Windows a CriticalSection is used instead. Analysis and patch from\n  Matej Kenda (TopIT d.o.o.). GH #321\n\n* The OpenSSL implementation of RC4 would return the wrong value from `name` if\n  leading bytes of the keystream had been skipped in the output.\n\n* Fixed the signature of the FFI function botan_pubkey_destroy, which took the\n",
                    "rendered": {
                      "text": "  Windows a CriticalSection is used instead. Analysis and patch from\n  Matej Kenda (TopIT d.o.o.). GH #321\n\n* The OpenSSL implementation of RC4 would return the wrong value from `name` if\n  leading bytes of the keystream had been skipped in the output.\n\n* Fixed the signature of the FFI function botan_pubkey_destroy, which took the\n",
                      "markdown": "`  Windows a CriticalSection is used instead. Analysis and patch from\n  Matej Kenda (TopIT d.o.o.). GH #321\n\n* The OpenSSL implementation of RC4 would return the wrong value from `name` if\n  leading bytes of the keystream had been skipped in the output.\n\n* Fixed the signature of the FFI function botan_pubkey_destroy, which took the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 883,
                  "startColumn": 10,
                  "endLine": 883,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  secp128r2 has been removed.\n\n* The portable version of GCM has been changed to run using only\n  constant time operations.\n\n* Work around a bug in MSVC 2013 std::mutex which on some Windows\n  versions can result in a deadlock during static initialization. On\n",
                    "rendered": {
                      "text": "  secp128r2 has been removed.\n\n* The portable version of GCM has been changed to run using only\n  constant time operations.\n\n* Work around a bug in MSVC 2013 std::mutex which on some Windows\n  versions can result in a deadlock during static initialization. On\n",
                      "markdown": "`  secp128r2 has been removed.\n\n* The portable version of GCM has been changed to run using only\n  constant time operations.\n\n* Work around a bug in MSVC 2013 std::mutex which on some Windows\n  versions can result in a deadlock during static initialization. On\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 847,
                  "startColumn": 50,
                  "endLine": 847,
                  "endColumn": 56,
                  "snippet": {
                    "text": "  something without a use case to justify it it seemed simpler to\n  remove it. Undefined behavior found by Daniel Neus.\n\n* Support for using ``ctgrind`` for checking const time blocks has\n  been replaced by calling the valgrind memcheck APIs directly. This\n  allows const-time behavior to be tested without requiring a modified\n  valgrind binary. Adding the appropriate calls requires defining\n",
                    "rendered": {
                      "text": "  something without a use case to justify it it seemed simpler to\n  remove it. Undefined behavior found by Daniel Neus.\n\n* Support for using ``ctgrind`` for checking const time blocks has\n  been replaced by calling the valgrind memcheck APIs directly. This\n  allows const-time behavior to be tested without requiring a modified\n  valgrind binary. Adding the appropriate calls requires defining\n",
                      "markdown": "`  something without a use case to justify it it seemed simpler to\n  remove it. Undefined behavior found by Daniel Neus.\n\n* Support for using ``ctgrind`` for checking const time blocks has\n  been replaced by calling the valgrind memcheck APIs directly. This\n  allows const-time behavior to be tested without requiring a modified\n  valgrind binary. Adding the appropriate calls requires defining\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 818,
                  "startColumn": 29,
                  "endLine": 818,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n* Add support for RSA-KEM from ISO 18033-2\n\n* Add support for ECDH in the OpenSSL provider\n\n* Fix a bug in DataSource::discard_next() which could cause either an\n  infinite loop or the discarding of an incorrect number of bytes.\n",
                    "rendered": {
                      "text": "\n* Add support for RSA-KEM from ISO 18033-2\n\n* Add support for ECDH in the OpenSSL provider\n\n* Fix a bug in DataSource::discard_next() which could cause either an\n  infinite loop or the discarding of an incorrect number of bytes.\n",
                      "markdown": "`\n* Add support for RSA-KEM from ISO 18033-2\n\n* Add support for ECDH in the OpenSSL provider\n\n* Fix a bug in DataSource::discard_next() which could cause either an\n  infinite loop or the discarding of an incorrect number of bytes.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 680,
                  "startColumn": 63,
                  "endLine": 681,
                  "snippet": {
                    "text": "  Clang analyzer (GH #441), cppcheck (GH #444, #445), and Coverity.\n\n* Add --with-valgrind configure option to enable building against the\n  valgrind client API. This currently enables checking of const time\n  operations using memcheck.\n\n* Fix remaining Wshadow warnings. Enable Wshadow in build. GH #427\n\n",
                    "rendered": {
                      "text": "  Clang analyzer (GH #441), cppcheck (GH #444, #445), and Coverity.\n\n* Add --with-valgrind configure option to enable building against the\n  valgrind client API. This currently enables checking of const time\n  operations using memcheck.\n\n* Fix remaining Wshadow warnings. Enable Wshadow in build. GH #427\n\n",
                      "markdown": "`  Clang analyzer (GH #441), cppcheck (GH #444, #445), and Coverity.\n\n* Add --with-valgrind configure option to enable building against the\n  valgrind client API. This currently enables checking of const time\n  operations using memcheck.\n\n* Fix remaining Wshadow warnings. Enable Wshadow in build. GH #427\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 16,
                  "endLine": 597,
                  "endColumn": 23,
                  "snippet": {
                    "text": "* CVE-2016-2849 DSA and ECDSA used a modular inverse function which\n  had input dependent loops. It is possible a side channel attack on\n  this function could be used to recover sufficient information about\n  the nonce k to mount a lattice attack and recover the private key.\n  Found by Sean Devlin.\n\n* CVE-2016-2850 The TLS client did not check that the signature\n",
                    "rendered": {
                      "text": "* CVE-2016-2849 DSA and ECDSA used a modular inverse function which\n  had input dependent loops. It is possible a side channel attack on\n  this function could be used to recover sufficient information about\n  the nonce k to mount a lattice attack and recover the private key.\n  Found by Sean Devlin.\n\n* CVE-2016-2850 The TLS client did not check that the signature\n",
                      "markdown": "`* CVE-2016-2849 DSA and ECDSA used a modular inverse function which\n  had input dependent loops. It is possible a side channel attack on\n  this function could be used to recover sufficient information about\n  the nonce k to mount a lattice attack and recover the private key.\n  Found by Sean Devlin.\n\n* CVE-2016-2850 The TLS client did not check that the signature\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 32,
                  "endLine": 588,
                  "endColumn": 41,
                  "snippet": {
                    "text": "* Use constant time PKCS #1 unpadding to avoid possible side channel\n  attack against RSA decryption (CVE-2015-7827)\n\n* Avoid a compilation problem in OpenSSL engine when ECDSA was\n  disabled. Gentoo bug 542010\n\nVersion 1.11.29, 2016-03-20\n",
                    "rendered": {
                      "text": "* Use constant time PKCS #1 unpadding to avoid possible side channel\n  attack against RSA decryption (CVE-2015-7827)\n\n* Avoid a compilation problem in OpenSSL engine when ECDSA was\n  disabled. Gentoo bug 542010\n\nVersion 1.11.29, 2016-03-20\n",
                      "markdown": "`* Use constant time PKCS #1 unpadding to avoid possible side channel\n  attack against RSA decryption (CVE-2015-7827)\n\n* Avoid a compilation problem in OpenSSL engine when ECDSA was\n  disabled. Gentoo bug 542010\n\nVersion 1.11.29, 2016-03-20\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 585,
                  "startColumn": 14,
                  "endLine": 585,
                  "endColumn": 20,
                  "snippet": {
                    "text": "* Use constant time modular inverse algorithm to avoid possible\n  side channel attack against ECDSA (CVE-2016-2849)\n\n* Use constant time PKCS #1 unpadding to avoid possible side channel\n  attack against RSA decryption (CVE-2015-7827)\n\n* Avoid a compilation problem in OpenSSL engine when ECDSA was\n",
                    "rendered": {
                      "text": "* Use constant time modular inverse algorithm to avoid possible\n  side channel attack against ECDSA (CVE-2016-2849)\n\n* Use constant time PKCS #1 unpadding to avoid possible side channel\n  attack against RSA decryption (CVE-2015-7827)\n\n* Avoid a compilation problem in OpenSSL engine when ECDSA was\n",
                      "markdown": "`* Use constant time modular inverse algorithm to avoid possible\n  side channel attack against ECDSA (CVE-2016-2849)\n\n* Use constant time PKCS #1 unpadding to avoid possible side channel\n  attack against RSA decryption (CVE-2015-7827)\n\n* Avoid a compilation problem in OpenSSL engine when ECDSA was\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 14,
                  "endLine": 582,
                  "endColumn": 20,
                  "snippet": {
                    "text": "Version 1.10.13, 2016-04-23\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Use constant time modular inverse algorithm to avoid possible\n  side channel attack against ECDSA (CVE-2016-2849)\n\n* Use constant time PKCS #1 unpadding to avoid possible side channel\n",
                    "rendered": {
                      "text": "Version 1.10.13, 2016-04-23\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Use constant time modular inverse algorithm to avoid possible\n  side channel attack against ECDSA (CVE-2016-2849)\n\n* Use constant time PKCS #1 unpadding to avoid possible side channel\n",
                      "markdown": "`Version 1.10.13, 2016-04-23\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Use constant time modular inverse algorithm to avoid possible\n  side channel attack against ECDSA (CVE-2016-2849)\n\n* Use constant time PKCS #1 unpadding to avoid possible side channel\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 46,
                  "endLine": 478,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n* In 1.11.23 a bug was introduced such that CBC-encrypted TLS packets\n  containing no plaintext bytes at all were incorrectly rejected with\n  a MAC failure. Records like this are used by OpenSSL in TLS 1.0\n  connections in order to randomize the IV.\n\n* A bug in GCM caused incorrect results if the 32-bit counter field\n",
                    "rendered": {
                      "text": "\n* In 1.11.23 a bug was introduced such that CBC-encrypted TLS packets\n  containing no plaintext bytes at all were incorrectly rejected with\n  a MAC failure. Records like this are used by OpenSSL in TLS 1.0\n  connections in order to randomize the IV.\n\n* A bug in GCM caused incorrect results if the 32-bit counter field\n",
                      "markdown": "`\n* In 1.11.23 a bug was introduced such that CBC-encrypted TLS packets\n  containing no plaintext bytes at all were incorrectly rejected with\n  a MAC failure. Records like this are used by OpenSSL in TLS 1.0\n  connections in order to randomize the IV.\n\n* A bug in GCM caused incorrect results if the 32-bit counter field\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 56,
                  "endLine": 315,
                  "endColumn": 62,
                  "snippet": {
                    "text": "* How the library presents optimized algorithm implementations has changed.  For\n  example with the algorithm AES-128, previously there were three BlockCipher\n  classes AES_128, AES_128_SSSE3, and AES_128_NI which used (resp) a table-based\n  implementation vulnerable to side channels, a constant time version using\n  SSSE3 SIMD extensions on modern x86, and x86 AES-NI instructions. Using the\n  correct version at runtime required using ``BlockCipher::create``. Now, only\n  the class AES_128 is presented, and the best available version is always used\n",
                    "rendered": {
                      "text": "* How the library presents optimized algorithm implementations has changed.  For\n  example with the algorithm AES-128, previously there were three BlockCipher\n  classes AES_128, AES_128_SSSE3, and AES_128_NI which used (resp) a table-based\n  implementation vulnerable to side channels, a constant time version using\n  SSSE3 SIMD extensions on modern x86, and x86 AES-NI instructions. Using the\n  correct version at runtime required using ``BlockCipher::create``. Now, only\n  the class AES_128 is presented, and the best available version is always used\n",
                      "markdown": "`* How the library presents optimized algorithm implementations has changed.  For\n  example with the algorithm AES-128, previously there were three BlockCipher\n  classes AES_128, AES_128_SSSE3, and AES_128_NI which used (resp) a table-based\n  implementation vulnerable to side channels, a constant time version using\n  SSSE3 SIMD extensions on modern x86, and x86 AES-NI instructions. Using the\n  correct version at runtime required using ``BlockCipher::create``. Now, only\n  the class AES_128 is presented, and the best available version is always used\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 53,
                  "endLine": 278,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n* Added Linux ppc64le cross compile target to Travis CI (GH #654)\n\n* If RC4 is disabled, also disable it coming from the OpenSSL provider (GH #641)\n\n* Add TLS message parsing tests (GH #640)\n\n",
                    "rendered": {
                      "text": "\n* Added Linux ppc64le cross compile target to Travis CI (GH #654)\n\n* If RC4 is disabled, also disable it coming from the OpenSSL provider (GH #641)\n\n* Add TLS message parsing tests (GH #640)\n\n",
                      "markdown": "`\n* Added Linux ppc64le cross compile target to Travis CI (GH #654)\n\n* If RC4 is disabled, also disable it coming from the OpenSSL provider (GH #641)\n\n* Add TLS message parsing tests (GH #640)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 30,
                  "endLine": 218,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n* Add Certificate_Store_In_SQL which supports storing certs, keys, and\n  revocation information in a SQL database. Subclass Certificate_Store_In_SQLite\n  specializes with support for SQLite3 databases. (GH #631)\n\n* The Certificate_Store interface has been changed to deal with\n  ``std::shared_ptrs`` instead of raw pointers (GH #471 #631)\n",
                    "rendered": {
                      "text": "\n* Add Certificate_Store_In_SQL which supports storing certs, keys, and\n  revocation information in a SQL database. Subclass Certificate_Store_In_SQLite\n  specializes with support for SQLite3 databases. (GH #631)\n\n* The Certificate_Store interface has been changed to deal with\n  ``std::shared_ptrs`` instead of raw pointers (GH #471 #631)\n",
                      "markdown": "`\n* Add Certificate_Store_In_SQL which supports storing certs, keys, and\n  revocation information in a SQL database. Subclass Certificate_Store_In_SQLite\n  specializes with support for SQLite3 databases. (GH #631)\n\n* The Certificate_Store interface has been changed to deal with\n  ``std::shared_ptrs`` instead of raw pointers (GH #471 #631)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 17,
                  "endLine": 204,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  thrown from a destructor, causing a call to std::terminate.\n\n* When RC4 is disabled in the build, also prevent it from being\n  included in the OpenSSL provider. (GH #638)\n\nVersion 1.11.33, 2016-10-26\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "  thrown from a destructor, causing a call to std::terminate.\n\n* When RC4 is disabled in the build, also prevent it from being\n  included in the OpenSSL provider. (GH #638)\n\nVersion 1.11.33, 2016-10-26\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`  thrown from a destructor, causing a call to std::terminate.\n\n* When RC4 is disabled in the build, also prevent it from being\n  included in the OpenSSL provider. (GH #638)\n\nVersion 1.11.33, 2016-10-26\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 16,
                  "endLine": 188,
                  "endColumn": 22,
                  "snippet": {
                    "text": "* Fixed some problems when running configure.py outside of the base directory,\n  especially when using relative paths.\n\n* Add (back) the Perl XS wrapper and sqlite encryption code.\n\nVersion 1.10.14, 2016-11-28\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "* Fixed some problems when running configure.py outside of the base directory,\n  especially when using relative paths.\n\n* Add (back) the Perl XS wrapper and sqlite encryption code.\n\nVersion 1.10.14, 2016-11-28\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`* Fixed some problems when running configure.py outside of the base directory,\n  especially when using relative paths.\n\n* Add (back) the Perl XS wrapper and sqlite encryption code.\n\nVersion 1.10.14, 2016-11-28\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 55,
                  "endLine": 181,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n* The LibraryInitializer type is no longer needed and is now deprecated.\n\n* The license and news files were moved from doc to the top level directory.\n  There should not be any other visible change (eg, to the installed version)\n  as a result of this move.\n\n",
                    "rendered": {
                      "text": "\n* The LibraryInitializer type is no longer needed and is now deprecated.\n\n* The license and news files were moved from doc to the top level directory.\n  There should not be any other visible change (eg, to the installed version)\n  as a result of this move.\n\n",
                      "markdown": "`\n* The LibraryInitializer type is no longer needed and is now deprecated.\n\n* The license and news files were moved from doc to the top level directory.\n  There should not be any other visible change (eg, to the installed version)\n  as a result of this move.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 63,
                  "endLine": 134,
                  "endColumn": 71,
                  "snippet": {
                    "text": "* The entropy sources for EGD and BeOS, as well as the Unix entropy source which\n  executed processes to get statistical data have been removed. (GH #692)\n\n* The openpgp module (which just implemented OpenPGP compatible base64 encoding\n  and decoding, nothing else) has been removed.\n\n* Added new configure.py argument `--optimize-for-size`. Currently just sets\n",
                    "rendered": {
                      "text": "* The entropy sources for EGD and BeOS, as well as the Unix entropy source which\n  executed processes to get statistical data have been removed. (GH #692)\n\n* The openpgp module (which just implemented OpenPGP compatible base64 encoding\n  and decoding, nothing else) has been removed.\n\n* Added new configure.py argument `--optimize-for-size`. Currently just sets\n",
                      "markdown": "`* The entropy sources for EGD and BeOS, as well as the Unix entropy source which\n  executed processes to get statistical data have been removed. (GH #692)\n\n* The openpgp module (which just implemented OpenPGP compatible base64 encoding\n  and decoding, nothing else) has been removed.\n\n* Added new configure.py argument `--optimize-for-size`. Currently just sets\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Add ESP block cipher padding from RFC 4304. GH #724\n\n* Incompatible change to HKDF: previously the HKDF type in Botan was only the\n  Expand half of HKDF. Now HKDF is the full Extract-then-Expand KDF, and\n  HKDF_Extract and HKDF_Expand are available. If you previously used HKDF, you\n  must switch to using HKDF_Expand. (GH #723)\n\n",
                    "rendered": {
                      "text": "* Add ESP block cipher padding from RFC 4304. GH #724\n\n* Incompatible change to HKDF: previously the HKDF type in Botan was only the\n  Expand half of HKDF. Now HKDF is the full Extract-then-Expand KDF, and\n  HKDF_Extract and HKDF_Expand are available. If you previously used HKDF, you\n  must switch to using HKDF_Expand. (GH #723)\n\n",
                      "markdown": "`* Add ESP block cipher padding from RFC 4304. GH #724\n\n* Incompatible change to HKDF: previously the HKDF type in Botan was only the\n  Expand half of HKDF. Now HKDF is the full Extract-then-Expand KDF, and\n  HKDF_Extract and HKDF_Expand are available. If you previously used HKDF, you\n  must switch to using HKDF_Expand. (GH #723)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 18,
                  "endLine": 30,
                  "endColumn": 27,
                  "snippet": {
                    "text": "* Fix a bug that prevented `configure.py` from running under Python3\n\n* Botan 1.10.x does not support the OpenSSL 1.1 API. Now the build\n  will `#error` if OpenSSL 1.1 is detected. Avoid `--with-openssl`\n  if compiling against 1.1 or later. (GH #753)\n\n* Import patches from Debian adding basic support for building on\n",
                    "rendered": {
                      "text": "* Fix a bug that prevented `configure.py` from running under Python3\n\n* Botan 1.10.x does not support the OpenSSL 1.1 API. Now the build\n  will `#error` if OpenSSL 1.1 is detected. Avoid `--with-openssl`\n  if compiling against 1.1 or later. (GH #753)\n\n* Import patches from Debian adding basic support for building on\n",
                      "markdown": "`* Fix a bug that prevented `configure.py` from running under Python3\n\n* Botan 1.10.x does not support the OpenSSL 1.1 API. Now the build\n  will `#error` if OpenSSL 1.1 is detected. Avoid `--with-openssl`\n  if compiling against 1.1 or later. (GH #753)\n\n* Import patches from Debian adding basic support for building on\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/old_news.rst"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 35,
                  "endLine": 29,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n* Fix a bug that prevented `configure.py` from running under Python3\n\n* Botan 1.10.x does not support the OpenSSL 1.1 API. Now the build\n  will `#error` if OpenSSL 1.1 is detected. Avoid `--with-openssl`\n  if compiling against 1.1 or later. (GH #753)\n\n",
                    "rendered": {
                      "text": "\n* Fix a bug that prevented `configure.py` from running under Python3\n\n* Botan 1.10.x does not support the OpenSSL 1.1 API. Now the build\n  will `#error` if OpenSSL 1.1 is detected. Avoid `--with-openssl`\n  if compiling against 1.1 or later. (GH #753)\n\n",
                      "markdown": "`\n* Fix a bug that prevented `configure.py` from running under Python3\n\n* Botan 1.10.x does not support the OpenSSL 1.1 API. Now the build\n  will `#error` if OpenSSL 1.1 is detected. Avoid `--with-openssl`\n  if compiling against 1.1 or later. (GH #753)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 85,
                  "endColumn": 7,
                  "snippet": {
                    "text": "Don't forget to also push tags::\n\n  $ git push origin --tags release-3 master\n\nUpdate The Website\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe website content is created by ``src/scripts/website.py``.\n",
                    "rendered": {
                      "text": "Don't forget to also push tags::\n\n  $ git push origin --tags release-3 master\n\nUpdate The Website\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe website content is created by ``src/scripts/website.py``.\n",
                      "markdown": "`Don't forget to also push tags::\n\n  $ git push origin --tags release-3 master\n\nUpdate The Website\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe website content is created by ``src/scripts/website.py``.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 35,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nTag the Release\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUpdate the release date in the release notes and change the entry for\nthe appropriate branch in ``readme.rst`` to point to the new release.\n\nNow check in, and backport changes to the release branch::\n",
                    "rendered": {
                      "text": "\nTag the Release\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUpdate the release date in the release notes and change the entry for\nthe appropriate branch in ``readme.rst`` to point to the new release.\n\nNow check in, and backport changes to the release branch::\n",
                      "markdown": "`\nTag the Release\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUpdate the release date in the release notes and change the entry for\nthe appropriate branch in ``readme.rst`` to point to the new release.\n\nNow check in, and backport changes to the release branch::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 20,
                  "endLine": 24,
                  "endColumn": 24,
                  "snippet": {
                    "text": "Other checks which are not in CI:\n\n - Native compile on FreeBSD x86-64\n - Native compile on at least one unusual platform (AIX, NetBSD, ...)\n - Build the website content to detect any Doxygen problems\n - Test many build configurations (using `src/scripts/test_all_configs.py`)\n - Build/test SoftHSM\n",
                    "rendered": {
                      "text": "Other checks which are not in CI:\n\n - Native compile on FreeBSD x86-64\n - Native compile on at least one unusual platform (AIX, NetBSD, ...)\n - Build the website content to detect any Doxygen problems\n - Test many build configurations (using `src/scripts/test_all_configs.py`)\n - Build/test SoftHSM\n",
                      "markdown": "`Other checks which are not in CI:\n\n - Native compile on FreeBSD x86-64\n - Native compile on at least one unusual platform (AIX, NetBSD, ...)\n - Build the website content to detect any Doxygen problems\n - Test many build configurations (using `src/scripts/test_all_configs.py`)\n - Build/test SoftHSM\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 3,
                  "endLine": 97,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  $ cd botan-website\n  $ git add .\n  $ git commit -m \"Update for 3.8.2\"\n  $ git push origin master\n\nAnnounce The Release\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "  $ cd botan-website\n  $ git add .\n  $ git commit -m \"Update for 3.8.2\"\n  $ git push origin master\n\nAnnounce The Release\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`  $ cd botan-website\n  $ git add .\n  $ git commit -m \"Update for 3.8.2\"\n  $ git push origin master\n\nAnnounce The Release\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 3,
                  "endLine": 96,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  $ ./src/scripts/website.py --output-dir botan-website\n  $ cd botan-website\n  $ git add .\n  $ git commit -m \"Update for 3.8.2\"\n  $ git push origin master\n\nAnnounce The Release\n",
                    "rendered": {
                      "text": "  $ ./src/scripts/website.py --output-dir botan-website\n  $ cd botan-website\n  $ git add .\n  $ git commit -m \"Update for 3.8.2\"\n  $ git push origin master\n\nAnnounce The Release\n",
                      "markdown": "`  $ ./src/scripts/website.py --output-dir botan-website\n  $ cd botan-website\n  $ git add .\n  $ git commit -m \"Update for 3.8.2\"\n  $ git push origin master\n\nAnnounce The Release\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 3,
                  "endLine": 95,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  $ git checkout git@botan.randombit.net:/srv/git/botan-website.git\n  $ ./src/scripts/website.py --output-dir botan-website\n  $ cd botan-website\n  $ git add .\n  $ git commit -m \"Update for 3.8.2\"\n  $ git push origin master\n\n",
                    "rendered": {
                      "text": "  $ git checkout git@botan.randombit.net:/srv/git/botan-website.git\n  $ ./src/scripts/website.py --output-dir botan-website\n  $ cd botan-website\n  $ git add .\n  $ git commit -m \"Update for 3.8.2\"\n  $ git push origin master\n\n",
                      "markdown": "`  $ git checkout git@botan.randombit.net:/srv/git/botan-website.git\n  $ ./src/scripts/website.py --output-dir botan-website\n  $ cd botan-website\n  $ git add .\n  $ git commit -m \"Update for 3.8.2\"\n  $ git push origin master\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 3,
                  "endLine": 92,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nThe website is mirrored automatically from a git repository which must be updated::\n\n  $ git checkout git@botan.randombit.net:/srv/git/botan-website.git\n  $ ./src/scripts/website.py --output-dir botan-website\n  $ cd botan-website\n  $ git add .\n",
                    "rendered": {
                      "text": "\nThe website is mirrored automatically from a git repository which must be updated::\n\n  $ git checkout git@botan.randombit.net:/srv/git/botan-website.git\n  $ ./src/scripts/website.py --output-dir botan-website\n  $ cd botan-website\n  $ git add .\n",
                      "markdown": "`\nThe website is mirrored automatically from a git repository which must be updated::\n\n  $ git checkout git@botan.randombit.net:/srv/git/botan-website.git\n  $ ./src/scripts/website.py --output-dir botan-website\n  $ cd botan-website\n  $ git add .\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 44,
                  "endLine": 90,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\nThe website content is created by ``src/scripts/website.py``.\n\nThe website is mirrored automatically from a git repository which must be updated::\n\n  $ git checkout git@botan.randombit.net:/srv/git/botan-website.git\n  $ ./src/scripts/website.py --output-dir botan-website\n",
                    "rendered": {
                      "text": "\nThe website content is created by ``src/scripts/website.py``.\n\nThe website is mirrored automatically from a git repository which must be updated::\n\n  $ git checkout git@botan.randombit.net:/srv/git/botan-website.git\n  $ ./src/scripts/website.py --output-dir botan-website\n",
                      "markdown": "`\nThe website content is created by ``src/scripts/website.py``.\n\nThe website is mirrored automatically from a git repository which must be updated::\n\n  $ git checkout git@botan.randombit.net:/srv/git/botan-website.git\n  $ ./src/scripts/website.py --output-dir botan-website\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nDon't forget to also push tags::\n\n  $ git push origin --tags release-3 master\n\nUpdate The Website\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "\nDon't forget to also push tags::\n\n  $ git push origin --tags release-3 master\n\nUpdate The Website\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`\nDon't forget to also push tags::\n\n  $ git push origin --tags release-3 master\n\nUpdate The Website\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 3,
                  "endLine": 74,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  $ sha256sum Botan-3.8.2.tgz >> sha256sums.txt\n  $ git add .\n  $ git commit -m \"Release version 3.8.2\"\n  $ git push origin master\n\nA cron job updates the live site every 10 minutes.\n\n",
                    "rendered": {
                      "text": "  $ sha256sum Botan-3.8.2.tgz >> sha256sums.txt\n  $ git add .\n  $ git commit -m \"Release version 3.8.2\"\n  $ git push origin master\n\nA cron job updates the live site every 10 minutes.\n\n",
                      "markdown": "`  $ sha256sum Botan-3.8.2.tgz >> sha256sums.txt\n  $ git add .\n  $ git commit -m \"Release version 3.8.2\"\n  $ git push origin master\n\nA cron job updates the live site every 10 minutes.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 3,
                  "endLine": 73,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  $ cd botan-releases\n  $ sha256sum Botan-3.8.2.tgz >> sha256sums.txt\n  $ git add .\n  $ git commit -m \"Release version 3.8.2\"\n  $ git push origin master\n\nA cron job updates the live site every 10 minutes.\n",
                    "rendered": {
                      "text": "  $ cd botan-releases\n  $ sha256sum Botan-3.8.2.tgz >> sha256sums.txt\n  $ git add .\n  $ git commit -m \"Release version 3.8.2\"\n  $ git push origin master\n\nA cron job updates the live site every 10 minutes.\n",
                      "markdown": "`  $ cd botan-releases\n  $ sha256sum Botan-3.8.2.tgz >> sha256sums.txt\n  $ git add .\n  $ git commit -m \"Release version 3.8.2\"\n  $ git push origin master\n\nA cron job updates the live site every 10 minutes.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 3,
                  "endLine": 72,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  $ src/scripts/dist.py 3.8.2 --output-dir=botan-releases\n  $ cd botan-releases\n  $ sha256sum Botan-3.8.2.tgz >> sha256sums.txt\n  $ git add .\n  $ git commit -m \"Release version 3.8.2\"\n  $ git push origin master\n\n",
                    "rendered": {
                      "text": "  $ src/scripts/dist.py 3.8.2 --output-dir=botan-releases\n  $ cd botan-releases\n  $ sha256sum Botan-3.8.2.tgz >> sha256sums.txt\n  $ git add .\n  $ git commit -m \"Release version 3.8.2\"\n  $ git push origin master\n\n",
                      "markdown": "`  $ src/scripts/dist.py 3.8.2 --output-dir=botan-releases\n  $ cd botan-releases\n  $ sha256sum Botan-3.8.2.tgz >> sha256sums.txt\n  $ git add .\n  $ git commit -m \"Release version 3.8.2\"\n  $ git push origin master\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 3,
                  "endLine": 68,
                  "endColumn": 8,
                  "snippet": {
                    "text": "The releases served on the official site are taken from the contents\nin a git repository::\n\n  $ git checkout git@botan.randombit.net:/srv/git/botan-releases.git\n  $ src/scripts/dist.py 3.8.2 --output-dir=botan-releases\n  $ cd botan-releases\n  $ sha256sum Botan-3.8.2.tgz >> sha256sums.txt\n",
                    "rendered": {
                      "text": "The releases served on the official site are taken from the contents\nin a git repository::\n\n  $ git checkout git@botan.randombit.net:/srv/git/botan-releases.git\n  $ src/scripts/dist.py 3.8.2 --output-dir=botan-releases\n  $ cd botan-releases\n  $ sha256sum Botan-3.8.2.tgz >> sha256sums.txt\n",
                      "markdown": "`The releases served on the official site are taken from the contents\nin a git repository::\n\n  $ git checkout git@botan.randombit.net:/srv/git/botan-releases.git\n  $ src/scripts/dist.py 3.8.2 --output-dir=botan-releases\n  $ cd botan-releases\n  $ sha256sum Botan-3.8.2.tgz >> sha256sums.txt\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 4,
                  "endLine": 66,
                  "endColumn": 9,
                  "snippet": {
                    "text": "*should not* be released without signatures.\n\nThe releases served on the official site are taken from the contents\nin a git repository::\n\n  $ git checkout git@botan.randombit.net:/srv/git/botan-releases.git\n  $ src/scripts/dist.py 3.8.2 --output-dir=botan-releases\n",
                    "rendered": {
                      "text": "*should not* be released without signatures.\n\nThe releases served on the official site are taken from the contents\nin a git repository::\n\n  $ git checkout git@botan.randombit.net:/srv/git/botan-releases.git\n  $ src/scripts/dist.py 3.8.2 --output-dir=botan-releases\n",
                      "markdown": "`*should not* be released without signatures.\n\nThe releases served on the official site are taken from the contents\nin a git repository::\n\n  $ git checkout git@botan.randombit.net:/srv/git/botan-releases.git\n  $ src/scripts/dist.py 3.8.2 --output-dir=botan-releases\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 3,
                  "endLine": 59,
                  "endColumn": 11,
                  "snippet": {
                    "text": "Now do a final build/test of the released tarball.\n\nThe ``--pgp-key-id`` option is used to specify a PGP keyid. If set,\nthe script assumes that it can execute GnuPG and will attempt to\ncreate signatures for the tarballs. The default value is ``EFBADFBC``,\nwhich is the official signing key. You can use ``--pgp-key-id=none``\nto avoid creating any signature, though official distributed releases\n",
                    "rendered": {
                      "text": "Now do a final build/test of the released tarball.\n\nThe ``--pgp-key-id`` option is used to specify a PGP keyid. If set,\nthe script assumes that it can execute GnuPG and will attempt to\ncreate signatures for the tarballs. The default value is ``EFBADFBC``,\nwhich is the official signing key. You can use ``--pgp-key-id=none``\nto avoid creating any signature, though official distributed releases\n",
                      "markdown": "`Now do a final build/test of the released tarball.\n\nThe ``--pgp-key-id`` option is used to specify a PGP keyid. If set,\nthe script assumes that it can execute GnuPG and will attempt to\ncreate signatures for the tarballs. The default value is ``EFBADFBC``,\nwhich is the official signing key. You can use ``--pgp-key-id=none``\nto avoid creating any signature, though official distributed releases\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 68,
                  "endLine": 49,
                  "endColumn": 4,
                  "snippet": {
                    "text": "Build The Release Tarballs\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe release script is ``src/scripts/dist.py`` and must be run from a\ngit workspace.\n\n  $ src/scripts/dist.py 3.8.2\n\n",
                    "rendered": {
                      "text": "Build The Release Tarballs\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe release script is ``src/scripts/dist.py`` and must be run from a\ngit workspace.\n\n  $ src/scripts/dist.py 3.8.2\n\n",
                      "markdown": "`Build The Release Tarballs\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe release script is ``src/scripts/dist.py`` and must be run from a\ngit workspace.\n\n  $ src/scripts/dist.py 3.8.2\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 11,
                  "endLine": 48,
                  "endColumn": 19,
                  "snippet": {
                    "text": "Build The Release Tarballs\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe release script is ``src/scripts/dist.py`` and must be run from a\ngit workspace.\n\n  $ src/scripts/dist.py 3.8.2\n",
                    "rendered": {
                      "text": "Build The Release Tarballs\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe release script is ``src/scripts/dist.py`` and must be run from a\ngit workspace.\n\n  $ src/scripts/dist.py 3.8.2\n",
                      "markdown": "`Build The Release Tarballs\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe release script is ``src/scripts/dist.py`` and must be run from a\ngit workspace.\n\n  $ src/scripts/dist.py 3.8.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 3,
                  "endLine": 43,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  $ git commit readme.rst news.rst -m \"Update for 3.8.2 release\"\n  $ git checkout release-3\n  $ git merge master\n  $ git tag 3.8.2\n\nBuild The Release Tarballs\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "  $ git commit readme.rst news.rst -m \"Update for 3.8.2 release\"\n  $ git checkout release-3\n  $ git merge master\n  $ git tag 3.8.2\n\nBuild The Release Tarballs\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`  $ git commit readme.rst news.rst -m \"Update for 3.8.2 release\"\n  $ git checkout release-3\n  $ git merge master\n  $ git tag 3.8.2\n\nBuild The Release Tarballs\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 3,
                  "endLine": 42,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n  $ git commit readme.rst news.rst -m \"Update for 3.8.2 release\"\n  $ git checkout release-3\n  $ git merge master\n  $ git tag 3.8.2\n\nBuild The Release Tarballs\n",
                    "rendered": {
                      "text": "\n  $ git commit readme.rst news.rst -m \"Update for 3.8.2 release\"\n  $ git checkout release-3\n  $ git merge master\n  $ git tag 3.8.2\n\nBuild The Release Tarballs\n",
                      "markdown": "`\n  $ git commit readme.rst news.rst -m \"Update for 3.8.2 release\"\n  $ git checkout release-3\n  $ git merge master\n  $ git tag 3.8.2\n\nBuild The Release Tarballs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 3,
                  "endLine": 41,
                  "endColumn": 8,
                  "snippet": {
                    "text": "Now check in, and backport changes to the release branch::\n\n  $ git commit readme.rst news.rst -m \"Update for 3.8.2 release\"\n  $ git checkout release-3\n  $ git merge master\n  $ git tag 3.8.2\n\n",
                    "rendered": {
                      "text": "Now check in, and backport changes to the release branch::\n\n  $ git commit readme.rst news.rst -m \"Update for 3.8.2 release\"\n  $ git checkout release-3\n  $ git merge master\n  $ git tag 3.8.2\n\n",
                      "markdown": "`Now check in, and backport changes to the release branch::\n\n  $ git commit readme.rst news.rst -m \"Update for 3.8.2 release\"\n  $ git checkout release-3\n  $ git merge master\n  $ git tag 3.8.2\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/release_process.rst"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "endLine": 40,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nNow check in, and backport changes to the release branch::\n\n  $ git commit readme.rst news.rst -m \"Update for 3.8.2 release\"\n  $ git checkout release-3\n  $ git merge master\n  $ git tag 3.8.2\n",
                    "rendered": {
                      "text": "\nNow check in, and backport changes to the release branch::\n\n  $ git commit readme.rst news.rst -m \"Update for 3.8.2 release\"\n  $ git checkout release-3\n  $ git merge master\n  $ git tag 3.8.2\n",
                      "markdown": "`\nNow check in, and backport changes to the release branch::\n\n  $ git commit readme.rst news.rst -m \"Update for 3.8.2 release\"\n  $ git checkout release-3\n  $ git merge master\n  $ git tag 3.8.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/next_major.rst"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 7,
                  "endLine": 21,
                  "endColumn": 18,
                  "snippet": {
                    "text": "A number of operations currently defined on Public_Key can be\nmoved to Asymetric_Key, for example key_length and algorithm_identifier.\n\nDue to Private_Key deriving from Public_Key, the fingerprint functions\nare oddly named. Otherwise we can't correctly disambiguate sk->fingerprint();\nshould this be the fingerprint of the public or private key. With the\nsplit we can move this to Asymetric_Key::fingerprint and know that the\n",
                    "rendered": {
                      "text": "A number of operations currently defined on Public_Key can be\nmoved to Asymetric_Key, for example key_length and algorithm_identifier.\n\nDue to Private_Key deriving from Public_Key, the fingerprint functions\nare oddly named. Otherwise we can't correctly disambiguate sk->fingerprint();\nshould this be the fingerprint of the public or private key. With the\nsplit we can move this to Asymetric_Key::fingerprint and know that the\n",
                      "markdown": "`A number of operations currently defined on Public_Key can be\nmoved to Asymetric_Key, for example key_length and algorithm_identifier.\n\nDue to Private_Key deriving from Public_Key, the fingerprint functions\nare oddly named. Otherwise we can't correctly disambiguate sk->fingerprint();\nshould this be the fingerprint of the public or private key. With the\nsplit we can move this to Asymetric_Key::fingerprint and know that the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/next_major.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 21,
                  "endLine": 7,
                  "endColumn": 29,
                  "snippet": {
                    "text": "* Remove most/all explicitly deprecated modules, interfaces, and features.\n  Check deprecated.rst plus BOTAN_DEPRECATED annotations.\n\n* Make the remaining PasswordHash interfaces internal\n\n* Remove EC_Point/CurveGFp\n\n",
                    "rendered": {
                      "text": "* Remove most/all explicitly deprecated modules, interfaces, and features.\n  Check deprecated.rst plus BOTAN_DEPRECATED annotations.\n\n* Make the remaining PasswordHash interfaces internal\n\n* Remove EC_Point/CurveGFp\n\n",
                      "markdown": "`* Remove most/all explicitly deprecated modules, interfaces, and features.\n  Check deprecated.rst plus BOTAN_DEPRECATED annotations.\n\n* Make the remaining PasswordHash interfaces internal\n\n* Remove EC_Point/CurveGFp\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/mistakes.rst"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 20,
                  "endLine": 73,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nThe problems with the Pipe API are documented, and it is no longer used within\nthe library itself. But since many people seem to like it and many applications\nuse it, we are stuck at least with maintaining it as it currently exists.\n\nLicense\n---------\n",
                    "rendered": {
                      "text": "\nThe problems with the Pipe API are documented, and it is no longer used within\nthe library itself. But since many people seem to like it and many applications\nuse it, we are stuck at least with maintaining it as it currently exists.\n\nLicense\n---------\n",
                      "markdown": "`\nThe problems with the Pipe API are documented, and it is no longer used within\nthe library itself. But since many people seem to like it and many applications\nuse it, we are stuck at least with maintaining it as it currently exists.\n\nLicense\n---------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/mistakes.rst"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 23,
                  "endLine": 42,
                  "endColumn": 27,
                  "snippet": {
                    "text": "harder to understand. Should have been handled with a result<> type instead.\n\nAlternatively, and possibly more practically, there should have not been any\nexception hierarchy (or at least not one visible to users) - instead only the\nhigh level Exception type with contains an error type enum.\n\nVirtual inheritance\n",
                    "rendered": {
                      "text": "harder to understand. Should have been handled with a result<> type instead.\n\nAlternatively, and possibly more practically, there should have not been any\nexception hierarchy (or at least not one visible to users) - instead only the\nhigh level Exception type with contains an error type enum.\n\nVirtual inheritance\n",
                      "markdown": "`harder to understand. Should have been handled with a result<> type instead.\n\nAlternatively, and possibly more practically, there should have not been any\nexception hierarchy (or at least not one visible to users) - instead only the\nhigh level Exception type with contains an error type enum.\n\nVirtual inheritance\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/mistakes.rst"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 40,
                  "endLine": 11,
                  "endColumn": 44,
                  "snippet": {
                    "text": "---------\n\nAs an implementation language, I still think C++ is the best choice (or at least\nthe best choice available in early '00s) at offering good performance,\nreasonable abstractions, and low overhead. But the user API should have been\npure C with opaque structs (rather like the FFI layer, which was added much\nlater). Then an expressive C++ API could be built on top of the C API. This\n",
                    "rendered": {
                      "text": "---------\n\nAs an implementation language, I still think C++ is the best choice (or at least\nthe best choice available in early '00s) at offering good performance,\nreasonable abstractions, and low overhead. But the user API should have been\npure C with opaque structs (rather like the FFI layer, which was added much\nlater). Then an expressive C++ API could be built on top of the C API. This\n",
                      "markdown": "`---------\n\nAs an implementation language, I still think C++ is the best choice (or at least\nthe best choice available in early '00s) at offering good performance,\nreasonable abstractions, and low overhead. But the user API should have been\npure C with opaque structs (rather like the FFI layer, which was added much\nlater). Then an expressive C++ API could be built on top of the C API. This\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/mistakes.rst"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 71,
                  "endLine": 10,
                  "endColumn": 75,
                  "snippet": {
                    "text": "C++ API\n---------\n\nAs an implementation language, I still think C++ is the best choice (or at least\nthe best choice available in early '00s) at offering good performance,\nreasonable abstractions, and low overhead. But the user API should have been\npure C with opaque structs (rather like the FFI layer, which was added much\n",
                    "rendered": {
                      "text": "C++ API\n---------\n\nAs an implementation language, I still think C++ is the best choice (or at least\nthe best choice available in early '00s) at offering good performance,\nreasonable abstractions, and low overhead. But the user API should have been\npure C with opaque structs (rather like the FFI layer, which was added much\n",
                      "markdown": "`C++ API\n---------\n\nAs an implementation language, I still think C++ is the best choice (or at least\nthe best choice available in early '00s) at offering good performance,\nreasonable abstractions, and low overhead. But the user API should have been\npure C with opaque structs (rather like the FFI layer, which was added much\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/mistakes.rst"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 49,
                  "endLine": 69,
                  "endColumn": 55,
                  "snippet": {
                    "text": "the downside is it makes the application code totally opaque; some bytes go into\na Pipe object and then come out the end transformed in some way. What happens in\nbetween? Unless the Pipe was built in the same function and you can see the\nparameters to the constructor, there is no way to find out.\n\nThe problems with the Pipe API are documented, and it is no longer used within\nthe library itself. But since many people seem to like it and many applications\n",
                    "rendered": {
                      "text": "the downside is it makes the application code totally opaque; some bytes go into\na Pipe object and then come out the end transformed in some way. What happens in\nbetween? Unless the Pipe was built in the same function and you can see the\nparameters to the constructor, there is no way to find out.\n\nThe problems with the Pipe API are documented, and it is no longer used within\nthe library itself. But since many people seem to like it and many applications\n",
                      "markdown": "`the downside is it makes the application code totally opaque; some bytes go into\na Pipe object and then come out the end transformed in some way. What happens in\nbetween? Unless the Pipe was built in the same function and you can see the\nparameters to the constructor, there is no way to find out.\n\nThe problems with the Pipe API are documented, and it is no longer used within\nthe library itself. But since many people seem to like it and many applications\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/mistakes.rst"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 52,
                  "endLine": 14,
                  "endColumn": 57,
                  "snippet": {
                    "text": "the best choice available in early '00s) at offering good performance,\nreasonable abstractions, and low overhead. But the user API should have been\npure C with opaque structs (rather like the FFI layer, which was added much\nlater). Then an expressive C++ API could be built on top of the C API. This\nwould have given us a stable ABI, allowed C applications to use the library, and\n(these days) make it easier to progressively rewrite the library in Rust.\n\n",
                    "rendered": {
                      "text": "the best choice available in early '00s) at offering good performance,\nreasonable abstractions, and low overhead. But the user API should have been\npure C with opaque structs (rather like the FFI layer, which was added much\nlater). Then an expressive C++ API could be built on top of the C API. This\nwould have given us a stable ABI, allowed C applications to use the library, and\n(these days) make it easier to progressively rewrite the library in Rust.\n\n",
                      "markdown": "`the best choice available in early '00s) at offering good performance,\nreasonable abstractions, and low overhead. But the user API should have been\npure C with opaque structs (rather like the FFI layer, which was added much\nlater). Then an expressive C++ API could be built on top of the C API. This\nwould have given us a stable ABI, allowed C applications to use the library, and\n(these days) make it easier to progressively rewrite the library in Rust.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 1293,
                  "startColumn": 41,
                  "endLine": 1293,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n   HSS-LMS is stateful, meaning the private key updates after each signature\n   creation. Applications are responsible for updating their persistent secret\n   with the new output of ``Private_Key::private_key_bits()`` after each signature\n   creation. If the same private key is ever used to generate\n   two different signatures, then the scheme becomes insecure. For this reason,\n   it can be challenging to use HSS-LMS securely.\n",
                    "rendered": {
                      "text": "\n   HSS-LMS is stateful, meaning the private key updates after each signature\n   creation. Applications are responsible for updating their persistent secret\n   with the new output of ``Private_Key::private_key_bits()`` after each signature\n   creation. If the same private key is ever used to generate\n   two different signatures, then the scheme becomes insecure. For this reason,\n   it can be challenging to use HSS-LMS securely.\n",
                      "markdown": "`\n   HSS-LMS is stateful, meaning the private key updates after each signature\n   creation. Applications are responsible for updating their persistent secret\n   with the new output of ``Private_Key::private_key_bits()`` after each signature\n   creation. If the same private key is ever used to generate\n   two different signatures, then the scheme becomes insecure. For this reason,\n   it can be challenging to use HSS-LMS securely.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 1293,
                  "startColumn": 28,
                  "endLine": 1293,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n   HSS-LMS is stateful, meaning the private key updates after each signature\n   creation. Applications are responsible for updating their persistent secret\n   with the new output of ``Private_Key::private_key_bits()`` after each signature\n   creation. If the same private key is ever used to generate\n   two different signatures, then the scheme becomes insecure. For this reason,\n   it can be challenging to use HSS-LMS securely.\n",
                    "rendered": {
                      "text": "\n   HSS-LMS is stateful, meaning the private key updates after each signature\n   creation. Applications are responsible for updating their persistent secret\n   with the new output of ``Private_Key::private_key_bits()`` after each signature\n   creation. If the same private key is ever used to generate\n   two different signatures, then the scheme becomes insecure. For this reason,\n   it can be challenging to use HSS-LMS securely.\n",
                      "markdown": "`\n   HSS-LMS is stateful, meaning the private key updates after each signature\n   creation. Applications are responsible for updating their persistent secret\n   with the new output of ``Private_Key::private_key_bits()`` after each signature\n   creation. If the same private key is ever used to generate\n   two different signatures, then the scheme becomes insecure. For this reason,\n   it can be challenging to use HSS-LMS securely.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 1238,
                  "startColumn": 41,
                  "endLine": 1238,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n   XMSS is stateful, meaning the private key updates after each signature\n   creation. Applications are responsible for updating their persistent secret\n   with the new output of ``Private_Key::private_key_bits()`` after each signature\n   creation. If the same private key is ever used to generate\n   two different signatures, then the scheme becomes insecure. For this reason,\n   it can be challenging to use XMSS securely.\n",
                    "rendered": {
                      "text": "\n   XMSS is stateful, meaning the private key updates after each signature\n   creation. Applications are responsible for updating their persistent secret\n   with the new output of ``Private_Key::private_key_bits()`` after each signature\n   creation. If the same private key is ever used to generate\n   two different signatures, then the scheme becomes insecure. For this reason,\n   it can be challenging to use XMSS securely.\n",
                      "markdown": "`\n   XMSS is stateful, meaning the private key updates after each signature\n   creation. Applications are responsible for updating their persistent secret\n   with the new output of ``Private_Key::private_key_bits()`` after each signature\n   creation. If the same private key is ever used to generate\n   two different signatures, then the scheme becomes insecure. For this reason,\n   it can be challenging to use XMSS securely.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 1238,
                  "startColumn": 28,
                  "endLine": 1238,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n   XMSS is stateful, meaning the private key updates after each signature\n   creation. Applications are responsible for updating their persistent secret\n   with the new output of ``Private_Key::private_key_bits()`` after each signature\n   creation. If the same private key is ever used to generate\n   two different signatures, then the scheme becomes insecure. For this reason,\n   it can be challenging to use XMSS securely.\n",
                    "rendered": {
                      "text": "\n   XMSS is stateful, meaning the private key updates after each signature\n   creation. Applications are responsible for updating their persistent secret\n   with the new output of ``Private_Key::private_key_bits()`` after each signature\n   creation. If the same private key is ever used to generate\n   two different signatures, then the scheme becomes insecure. For this reason,\n   it can be challenging to use XMSS securely.\n",
                      "markdown": "`\n   XMSS is stateful, meaning the private key updates after each signature\n   creation. Applications are responsible for updating their persistent secret\n   with the new output of ``Private_Key::private_key_bits()`` after each signature\n   creation. If the same private key is ever used to generate\n   two different signatures, then the scheme becomes insecure. For this reason,\n   it can be challenging to use XMSS securely.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 1025,
                  "startColumn": 43,
                  "endLine": 1025,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n.. cpp:class:: PK_Key_Agreement\n\n  .. cpp:function:: PK_Key_Agreement(const Private_Key& key, \\\n                    RandomNumberGenerator& rng, \\\n                    const std::string& kdf, \\\n                    const std::string& provider = \"\")\n",
                    "rendered": {
                      "text": "\n.. cpp:class:: PK_Key_Agreement\n\n  .. cpp:function:: PK_Key_Agreement(const Private_Key& key, \\\n                    RandomNumberGenerator& rng, \\\n                    const std::string& kdf, \\\n                    const std::string& provider = \"\")\n",
                      "markdown": "`\n.. cpp:class:: PK_Key_Agreement\n\n  .. cpp:function:: PK_Key_Agreement(const Private_Key& key, \\\n                    RandomNumberGenerator& rng, \\\n                    const std::string& kdf, \\\n                    const std::string& provider = \"\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 677,
                  "startColumn": 37,
                  "endLine": 677,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n.. cpp:class:: PK_Signer\n\n   .. cpp:function:: PK_Signer(const Private_Key& key, \\\n      const std::string& padding, \\\n      Signature_Format format = Siganture_Format::Standard)\n\n",
                    "rendered": {
                      "text": "\n.. cpp:class:: PK_Signer\n\n   .. cpp:function:: PK_Signer(const Private_Key& key, \\\n      const std::string& padding, \\\n      Signature_Format format = Siganture_Format::Standard)\n\n",
                      "markdown": "`\n.. cpp:class:: PK_Signer\n\n   .. cpp:function:: PK_Signer(const Private_Key& key, \\\n      const std::string& padding, \\\n      Signature_Format format = Siganture_Format::Standard)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 585,
                  "startColumn": 13,
                  "endLine": 585,
                  "endColumn": 24,
                  "snippet": {
                    "text": "         const ECIES_System_Params& ecies_params, \\\n         RandomNumberGenerator& rng)\n\n      Where *private_key* is the key to use for the key agreement. The system\n      parameters are specified in *ecies_params* and the RNG to use is passed in\n      *rng*.\n\n",
                    "rendered": {
                      "text": "         const ECIES_System_Params& ecies_params, \\\n         RandomNumberGenerator& rng)\n\n      Where *private_key* is the key to use for the key agreement. The system\n      parameters are specified in *ecies_params* and the RNG to use is passed in\n      *rng*.\n\n",
                      "markdown": "`         const ECIES_System_Params& ecies_params, \\\n         RandomNumberGenerator& rng)\n\n      Where *private_key* is the key to use for the key agreement. The system\n      parameters are specified in *ecies_params* and the RNG to use is passed in\n      *rng*.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 65,
                  "endLine": 581,
                  "endColumn": 76,
                  "snippet": {
                    "text": "   the KDF (see :ref:`key_derivation_function`), the cipher (see\n   :ref:`cipher_modes`) and the MAC.\n\n   .. cpp:function:: ECIES_Encryptor(const PK_Key_Agreement_Key& private_key, \\\n         const ECIES_System_Params& ecies_params, \\\n         RandomNumberGenerator& rng)\n\n",
                    "rendered": {
                      "text": "   the KDF (see :ref:`key_derivation_function`), the cipher (see\n   :ref:`cipher_modes`) and the MAC.\n\n   .. cpp:function:: ECIES_Encryptor(const PK_Key_Agreement_Key& private_key, \\\n         const ECIES_System_Params& ecies_params, \\\n         RandomNumberGenerator& rng)\n\n",
                      "markdown": "`   the KDF (see :ref:`key_derivation_function`), the cipher (see\n   :ref:`cipher_modes`) and the MAC.\n\n   .. cpp:function:: ECIES_Encryptor(const PK_Key_Agreement_Key& private_key, \\\n         const ECIES_System_Params& ecies_params, \\\n         RandomNumberGenerator& rng)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 46,
                  "endLine": 562,
                  "endColumn": 56,
                  "snippet": {
                    "text": "      MessageAuthenticationCode. The encryption is performed by XORing the\n      message with a stream of bytes provided by the KDF.\n\n   .. cpp:function:: DLIES_Encryptor(const DH_PrivateKey& own_priv_key, \\\n         RandomNumberGenerator& rng, \\\n         std::unique_ptr<KDF> kdf, \\\n         std::unique_ptr<Cipher_Mode> cipher, \\\n",
                    "rendered": {
                      "text": "      MessageAuthenticationCode. The encryption is performed by XORing the\n      message with a stream of bytes provided by the KDF.\n\n   .. cpp:function:: DLIES_Encryptor(const DH_PrivateKey& own_priv_key, \\\n         RandomNumberGenerator& rng, \\\n         std::unique_ptr<KDF> kdf, \\\n         std::unique_ptr<Cipher_Mode> cipher, \\\n",
                      "markdown": "`      MessageAuthenticationCode. The encryption is performed by XORing the\n      message with a stream of bytes provided by the KDF.\n\n   .. cpp:function:: DLIES_Encryptor(const DH_PrivateKey& own_priv_key, \\\n         RandomNumberGenerator& rng, \\\n         std::unique_ptr<KDF> kdf, \\\n         std::unique_ptr<Cipher_Mode> cipher, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 551,
                  "startColumn": 46,
                  "endLine": 551,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n   Available in the header ``dlies.h``\n\n   .. cpp:function:: DLIES_Encryptor(const DH_PrivateKey& own_priv_key, \\\n         RandomNumberGenerator& rng, \\\n         std::unique_ptr<KDF> kdf, \\\n         std::unique_ptr<MessageAuthenticationCode> mac, \\\n",
                    "rendered": {
                      "text": "\n   Available in the header ``dlies.h``\n\n   .. cpp:function:: DLIES_Encryptor(const DH_PrivateKey& own_priv_key, \\\n         RandomNumberGenerator& rng, \\\n         std::unique_ptr<KDF> kdf, \\\n         std::unique_ptr<MessageAuthenticationCode> mac, \\\n",
                      "markdown": "`\n   Available in the header ``dlies.h``\n\n   .. cpp:function:: DLIES_Encryptor(const DH_PrivateKey& own_priv_key, \\\n         RandomNumberGenerator& rng, \\\n         std::unique_ptr<KDF> kdf, \\\n         std::unique_ptr<MessageAuthenticationCode> mac, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 35,
                  "endLine": 385,
                  "endColumn": 46,
                  "snippet": {
                    "text": "DL_Group\n------------------------------\n\nAs described in :ref:`creating_new_private_keys`, a discrete logarithm group\ncan be shared among many keys, even keys created by users who do not trust\neach other. However, it is necessary to trust the entity who created the\ngroup; that is why organization like NIST use algorithms which generate groups\n",
                    "rendered": {
                      "text": "DL_Group\n------------------------------\n\nAs described in :ref:`creating_new_private_keys`, a discrete logarithm group\ncan be shared among many keys, even keys created by users who do not trust\neach other. However, it is necessary to trust the entity who created the\ngroup; that is why organization like NIST use algorithms which generate groups\n",
                      "markdown": "`DL_Group\n------------------------------\n\nAs described in :ref:`creating_new_private_keys`, a discrete logarithm group\ncan be shared among many keys, even keys created by users who do not trust\neach other. However, it is necessary to trust the entity who created the\ngroup; that is why organization like NIST use algorithms which generate groups\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 20,
                  "endLine": 372,
                  "endColumn": 31,
                  "snippet": {
                    "text": ".. cpp:function:: std::unique_ptr<Public_Key> X509::load_key(const std::string& filename)\n\n  These functions operate in the same way as the ones described in\n  :ref:`serializing_private_keys`, except that no encryption option is\n  available.\n\n.. note::\n",
                    "rendered": {
                      "text": ".. cpp:function:: std::unique_ptr<Public_Key> X509::load_key(const std::string& filename)\n\n  These functions operate in the same way as the ones described in\n  :ref:`serializing_private_keys`, except that no encryption option is\n  available.\n\n.. note::\n",
                      "markdown": "`.. cpp:function:: std::unique_ptr<Public_Key> X509::load_key(const std::string& filename)\n\n  These functions operate in the same way as the ones described in\n  :ref:`serializing_private_keys`, except that no encryption option is\n  available.\n\n.. note::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 67,
                  "endLine": 349,
                  "endColumn": 75,
                  "snippet": {
                    "text": "``DataSource_Stream`` to read from a file or ``DataSource_Memory`` for an\nin-memory buffer.\n\nThe versions taking a ``std::string`` attempt to decrypt using the password\ngiven (if the key is encrypted; if it is not, the passphase value will be\nignored). If the passphrase does not decrypt the key, an exception will be\nthrown.\n",
                    "rendered": {
                      "text": "``DataSource_Stream`` to read from a file or ``DataSource_Memory`` for an\nin-memory buffer.\n\nThe versions taking a ``std::string`` attempt to decrypt using the password\ngiven (if the key is encrypted; if it is not, the passphase value will be\nignored). If the passphrase does not decrypt the key, an exception will be\nthrown.\n",
                      "markdown": "```DataSource_Stream`` to read from a file or ``DataSource_Memory`` for an\nin-memory buffer.\n\nThe versions taking a ``std::string`` attempt to decrypt using the password\ngiven (if the key is encrypted; if it is not, the passphase value will be\nignored). If the passphrase does not decrypt the key, an exception will be\nthrown.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 34,
                  "endLine": 339,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                                      std::function<std::string ()> get_passphrase)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      const std::string& pass)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source)\n\nThese functions will return an object allocated key object based on the data\nfrom whatever source it is using (assuming, of course, the source is in fact\n",
                    "rendered": {
                      "text": "                                      std::function<std::string ()> get_passphrase)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      const std::string& pass)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source)\n\nThese functions will return an object allocated key object based on the data\nfrom whatever source it is using (assuming, of course, the source is in fact\n",
                      "markdown": "`                                      std::function<std::string ()> get_passphrase)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      const std::string& pass)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source)\n\nThese functions will return an object allocated key object based on the data\nfrom whatever source it is using (assuming, of course, the source is in fact\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 34,
                  "endLine": 337,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      std::function<std::string ()> get_passphrase)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      const std::string& pass)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source)\n\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      std::function<std::string ()> get_passphrase)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      const std::string& pass)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source)\n\n",
                      "markdown": "`\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      std::function<std::string ()> get_passphrase)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      const std::string& pass)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 34,
                  "endLine": 335,
                  "endColumn": 45,
                  "snippet": {
                    "text": "Last but not least, there are some functions that will load (and\ndecrypt, if necessary) a PKCS #8 private key:\n\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      std::function<std::string ()> get_passphrase)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      const std::string& pass)\n",
                    "rendered": {
                      "text": "Last but not least, there are some functions that will load (and\ndecrypt, if necessary) a PKCS #8 private key:\n\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      std::function<std::string ()> get_passphrase)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      const std::string& pass)\n",
                      "markdown": "`Last but not least, there are some functions that will load (and\ndecrypt, if necessary) a PKCS #8 private key:\n\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      std::function<std::string ()> get_passphrase)\n.. cpp:function:: std::unique_ptr<Private_Key> load_key(DataSource& source, \\\n                                      const std::string& pass)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 54,
                  "endLine": 327,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n  Serializes the private key and returns the result.\n\n.. cpp:function:: std::string PKCS8::PEM_encode(const Private_Key& key)\n\n  Serializes the private key, base64 encodes it, and returns the\n  result.\n",
                    "rendered": {
                      "text": "\n  Serializes the private key and returns the result.\n\n.. cpp:function:: std::string PKCS8::PEM_encode(const Private_Key& key)\n\n  Serializes the private key, base64 encodes it, and returns the\n  result.\n",
                      "markdown": "`\n  Serializes the private key and returns the result.\n\n.. cpp:function:: std::string PKCS8::PEM_encode(const Private_Key& key)\n\n  Serializes the private key, base64 encodes it, and returns the\n  result.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 65,
                  "endLine": 323,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  security requirements, always use the versions that encrypt the key based on\n  a passphrase, described above.\n\n.. cpp:function:: secure_vector<uint8_t> PKCS8::BER_encode(const Private_Key& key)\n\n  Serializes the private key and returns the result.\n\n",
                    "rendered": {
                      "text": "  security requirements, always use the versions that encrypt the key based on\n  a passphrase, described above.\n\n.. cpp:function:: secure_vector<uint8_t> PKCS8::BER_encode(const Private_Key& key)\n\n  Serializes the private key and returns the result.\n\n",
                      "markdown": "`  security requirements, always use the versions that encrypt the key based on\n  a passphrase, described above.\n\n.. cpp:function:: secure_vector<uint8_t> PKCS8::BER_encode(const Private_Key& key)\n\n  Serializes the private key and returns the result.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 11,
                  "endLine": 319,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n  In most situations, using unencrypted private key storage is a bad idea,\n  because anyone can come along and grab the private key without having to\n  know any passwords or other secrets. Unless you have very particular\n  security requirements, always use the versions that encrypt the key based on\n  a passphrase, described above.\n\n",
                    "rendered": {
                      "text": "\n  In most situations, using unencrypted private key storage is a bad idea,\n  because anyone can come along and grab the private key without having to\n  know any passwords or other secrets. Unless you have very particular\n  security requirements, always use the versions that encrypt the key based on\n  a passphrase, described above.\n\n",
                      "markdown": "`\n  In most situations, using unencrypted private key storage is a bad idea,\n  because anyone can come along and grab the private key without having to\n  know any passwords or other secrets. Unless you have very particular\n  security requirements, always use the versions that encrypt the key based on\n  a passphrase, described above.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 54,
                  "endLine": 303,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  other libraries only support CBC mode for private key encryption. GCM has\n  been supported in PBES2 since 2.0. SIV has been supported since 2.8.\n\n.. cpp:function:: std::string PKCS8::PEM_encode(const Private_Key& key, \\\n   RandomNumberGenerator& rng, const std::string& pass, const std::string& pbe_algo = \"\")\n\n  This formats the key in the same manner as ``BER_encode``, but additionally\n",
                    "rendered": {
                      "text": "  other libraries only support CBC mode for private key encryption. GCM has\n  been supported in PBES2 since 2.0. SIV has been supported since 2.8.\n\n.. cpp:function:: std::string PKCS8::PEM_encode(const Private_Key& key, \\\n   RandomNumberGenerator& rng, const std::string& pass, const std::string& pbe_algo = \"\")\n\n  This formats the key in the same manner as ``BER_encode``, but additionally\n",
                      "markdown": "`  other libraries only support CBC mode for private key encryption. GCM has\n  been supported in PBES2 since 2.0. SIV has been supported since 2.8.\n\n.. cpp:function:: std::string PKCS8::PEM_encode(const Private_Key& key, \\\n   RandomNumberGenerator& rng, const std::string& pass, const std::string& pbe_algo = \"\")\n\n  This formats the key in the same manner as ``BER_encode``, but additionally\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 14,
                  "endLine": 290,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  \"AES-128/CBC\" or \"Camellia-256/GCM\". For best interop with other systems, use\n  AES in CBC mode. The PBKDF can be either the name of a hash function (in which\n  case PBKDF2 is used with that hash) or \"Scrypt\", which causes the scrypt\n  memory hard password hashing function to be used. Scrypt is supported since\n  version 2.7.0.\n\n  Use `PBE-PKCS5v20(AES-256/CBC,SHA-256)` if you want to ensure the keys can\n",
                    "rendered": {
                      "text": "  \"AES-128/CBC\" or \"Camellia-256/GCM\". For best interop with other systems, use\n  AES in CBC mode. The PBKDF can be either the name of a hash function (in which\n  case PBKDF2 is used with that hash) or \"Scrypt\", which causes the scrypt\n  memory hard password hashing function to be used. Scrypt is supported since\n  version 2.7.0.\n\n  Use `PBE-PKCS5v20(AES-256/CBC,SHA-256)` if you want to ensure the keys can\n",
                      "markdown": "`  \"AES-128/CBC\" or \"Camellia-256/GCM\". For best interop with other systems, use\n  AES in CBC mode. The PBKDF can be either the name of a hash function (in which\n  case PBKDF2 is used with that hash) or \"Scrypt\", which causes the scrypt\n  memory hard password hashing function to be used. Scrypt is supported since\n  version 2.7.0.\n\n  Use `PBE-PKCS5v20(AES-256/CBC,SHA-256)` if you want to ensure the keys can\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 2,
                  "endLine": 280,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  key.\n\n  The final (optional) argument, *pbe_algo*, specifies a particular\n  password based encryption (or PBE) algorithm. If you don't specify a\n  PBE, a sensible default will be used.\n\n  The currently supported PBE is PBES2 from PKCS5. Format is as follows:\n",
                    "rendered": {
                      "text": "  key.\n\n  The final (optional) argument, *pbe_algo*, specifies a particular\n  password based encryption (or PBE) algorithm. If you don't specify a\n  PBE, a sensible default will be used.\n\n  The currently supported PBE is PBES2 from PKCS5. Format is as follows:\n",
                      "markdown": "`  key.\n\n  The final (optional) argument, *pbe_algo*, specifies a particular\n  password based encryption (or PBE) algorithm. If you don't specify a\n  PBE, a sensible default will be used.\n\n  The currently supported PBE is PBES2 from PKCS5. Format is as follows:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 3,
                  "endLine": 276,
                  "endColumn": 11,
                  "snippet": {
                    "text": "   RandomNumberGenerator& rng, const std::string& password, const std::string& pbe_algo = \"\")\n\n  Takes any private key object, serializes it, encrypts it using\n  *password*, and returns a binary structure representing the private\n  key.\n\n  The final (optional) argument, *pbe_algo*, specifies a particular\n",
                    "rendered": {
                      "text": "   RandomNumberGenerator& rng, const std::string& password, const std::string& pbe_algo = \"\")\n\n  Takes any private key object, serializes it, encrypts it using\n  *password*, and returns a binary structure representing the private\n  key.\n\n  The final (optional) argument, *pbe_algo*, specifies a particular\n",
                      "markdown": "`   RandomNumberGenerator& rng, const std::string& password, const std::string& pbe_algo = \"\")\n\n  Takes any private key object, serializes it, encrypts it using\n  *password*, and returns a binary structure representing the private\n  key.\n\n  The final (optional) argument, *pbe_algo*, specifies a particular\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 50,
                  "endLine": 273,
                  "endColumn": 58,
                  "snippet": {
                    "text": "encrypted storage.\n\n.. cpp:function:: secure_vector<uint8_t> PKCS8::BER_encode(const Private_Key& key, \\\n   RandomNumberGenerator& rng, const std::string& password, const std::string& pbe_algo = \"\")\n\n  Takes any private key object, serializes it, encrypts it using\n  *password*, and returns a binary structure representing the private\n",
                    "rendered": {
                      "text": "encrypted storage.\n\n.. cpp:function:: secure_vector<uint8_t> PKCS8::BER_encode(const Private_Key& key, \\\n   RandomNumberGenerator& rng, const std::string& password, const std::string& pbe_algo = \"\")\n\n  Takes any private key object, serializes it, encrypts it using\n  *password*, and returns a binary structure representing the private\n",
                      "markdown": "`encrypted storage.\n\n.. cpp:function:: secure_vector<uint8_t> PKCS8::BER_encode(const Private_Key& key, \\\n   RandomNumberGenerator& rng, const std::string& password, const std::string& pbe_algo = \"\")\n\n  Takes any private key object, serializes it, encrypts it using\n  *password*, and returns a binary structure representing the private\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 65,
                  "endLine": 272,
                  "endColumn": 76,
                  "snippet": {
                    "text": "for which are defined in ``pkcs8.h``. It supports both unencrypted and\nencrypted storage.\n\n.. cpp:function:: secure_vector<uint8_t> PKCS8::BER_encode(const Private_Key& key, \\\n   RandomNumberGenerator& rng, const std::string& password, const std::string& pbe_algo = \"\")\n\n  Takes any private key object, serializes it, encrypts it using\n",
                    "rendered": {
                      "text": "for which are defined in ``pkcs8.h``. It supports both unencrypted and\nencrypted storage.\n\n.. cpp:function:: secure_vector<uint8_t> PKCS8::BER_encode(const Private_Key& key, \\\n   RandomNumberGenerator& rng, const std::string& password, const std::string& pbe_algo = \"\")\n\n  Takes any private key object, serializes it, encrypts it using\n",
                      "markdown": "`for which are defined in ``pkcs8.h``. It supports both unencrypted and\nencrypted storage.\n\n.. cpp:function:: secure_vector<uint8_t> PKCS8::BER_encode(const Private_Key& key, \\\n   RandomNumberGenerator& rng, const std::string& password, const std::string& pbe_algo = \"\")\n\n  Takes any private key object, serializes it, encrypts it using\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 16,
                  "endLine": 263,
                  "endColumn": 27,
                  "snippet": {
                    "text": ".. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. _serializing_private_keys:\n\nSerializing Private Keys Using PKCS #8\n----------------------------------------\n",
                    "rendered": {
                      "text": ".. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. _serializing_private_keys:\n\nSerializing Private Keys Using PKCS #8\n----------------------------------------\n",
                      "markdown": "`.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. _serializing_private_keys:\n\nSerializing Private Keys Using PKCS #8\n----------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 50,
                  "endLine": 260,
                  "endColumn": 60,
                  "snippet": {
                    "text": ".. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. _serializing_private_keys:\n",
                    "rendered": {
                      "text": ".. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. _serializing_private_keys:\n",
                      "markdown": "`.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. _serializing_private_keys:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 28,
                  "endLine": 260,
                  "endColumn": 38,
                  "snippet": {
                    "text": ".. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. _serializing_private_keys:\n",
                    "rendered": {
                      "text": ".. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. _serializing_private_keys:\n",
                      "markdown": "`.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. _serializing_private_keys:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 40,
                  "endLine": 257,
                  "endColumn": 50,
                  "snippet": {
                    "text": ".. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": ".. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 23,
                  "endLine": 257,
                  "endColumn": 33,
                  "snippet": {
                    "text": ".. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": ".. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: GOST_3410_PrivateKey::GOST_3410_PrivateKey(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 44,
                  "endLine": 254,
                  "endColumn": 54,
                  "snippet": {
                    "text": ".. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n      const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": ".. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n      const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n      const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 25,
                  "endLine": 254,
                  "endColumn": 35,
                  "snippet": {
                    "text": ".. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n      const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": ".. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n      const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n      const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECDH_PrivateKey::ECDH_PrivateKey(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 46,
                  "endLine": 251,
                  "endColumn": 56,
                  "snippet": {
                    "text": ".. cpp:function:: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n      const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": ".. cpp:function:: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n      const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`.. cpp:function:: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n      const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 26,
                  "endLine": 251,
                  "endColumn": 36,
                  "snippet": {
                    "text": ".. cpp:function:: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n      const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": ".. cpp:function:: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n      const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`.. cpp:function:: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n      const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECGDSA_PrivateKey::ECGDSA_PrivateKey(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 42,
                  "endLine": 248,
                  "endColumn": 52,
                  "snippet": {
                    "text": "Finally, given an ``EC_Group`` object, you can create a new ECDSA, ECKCDSA, ECGDSA,\nECDH, or GOST 34.10-2001 private key with\n\n.. cpp:function:: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": "Finally, given an ``EC_Group`` object, you can create a new ECDSA, ECKCDSA, ECGDSA,\nECDH, or GOST 34.10-2001 private key with\n\n.. cpp:function:: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`Finally, given an ``EC_Group`` object, you can create a new ECDSA, ECKCDSA, ECGDSA,\nECDH, or GOST 34.10-2001 private key with\n\n.. cpp:function:: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 24,
                  "endLine": 248,
                  "endColumn": 34,
                  "snippet": {
                    "text": "Finally, given an ``EC_Group`` object, you can create a new ECDSA, ECKCDSA, ECGDSA,\nECDH, or GOST 34.10-2001 private key with\n\n.. cpp:function:: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": "Finally, given an ``EC_Group`` object, you can create a new ECDSA, ECKCDSA, ECGDSA,\nECDH, or GOST 34.10-2001 private key with\n\n.. cpp:function:: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`Finally, given an ``EC_Group`` object, you can create a new ECDSA, ECKCDSA, ECGDSA,\nECDH, or GOST 34.10-2001 private key with\n\n.. cpp:function:: ECDSA_PrivateKey::ECDSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const EC_Group& domain, const BigInt& x = 0)\n\n.. cpp:function:: ECKCDSA_PrivateKey::ECKCDSA_PrivateKey(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 65,
                  "endLine": 241,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\n  The optional *x* parameter to each of these constructors is a private key\n  value. This allows you to create keys where the private key is formed by\n  some special technique; for instance you can use the hash of a password (see\n  :ref:`pbkdf` for how to do that) as a private key value. Normally, you would\n  leave the value as zero, letting the class generate a new random key.\n\n",
                    "rendered": {
                      "text": "\n  The optional *x* parameter to each of these constructors is a private key\n  value. This allows you to create keys where the private key is formed by\n  some special technique; for instance you can use the hash of a password (see\n  :ref:`pbkdf` for how to do that) as a private key value. Normally, you would\n  leave the value as zero, letting the class generate a new random key.\n\n",
                      "markdown": "`\n  The optional *x* parameter to each of these constructors is a private key\n  value. This allows you to create keys where the private key is formed by\n  some special technique; for instance you can use the hash of a password (see\n  :ref:`pbkdf` for how to do that) as a private key value. Normally, you would\n  leave the value as zero, letting the class generate a new random key.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 46,
                  "endLine": 236,
                  "endColumn": 56,
                  "snippet": {
                    "text": ".. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n  The optional *x* parameter to each of these constructors is a private key\n",
                    "rendered": {
                      "text": ".. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n  The optional *x* parameter to each of these constructors is a private key\n",
                      "markdown": "`.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n  The optional *x* parameter to each of these constructors is a private key\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 26,
                  "endLine": 236,
                  "endColumn": 36,
                  "snippet": {
                    "text": ".. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n  The optional *x* parameter to each of these constructors is a private key\n",
                    "rendered": {
                      "text": ".. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n  The optional *x* parameter to each of these constructors is a private key\n",
                      "markdown": "`.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n  The optional *x* parameter to each of these constructors is a private key\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 36,
                  "endLine": 233,
                  "endColumn": 46,
                  "snippet": {
                    "text": ".. cpp:function:: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": ".. cpp:function:: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`.. cpp:function:: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 21,
                  "endLine": 233,
                  "endColumn": 31,
                  "snippet": {
                    "text": ".. cpp:function:: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": ".. cpp:function:: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`.. cpp:function:: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: ElGamal_PrivateKey::ElGamal_PrivateKey(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 38,
                  "endLine": 230,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\nGiven a ``DL_Group``, you can create new DSA, Diffie-Hellman and ElGamal key pairs with\n\n.. cpp:function:: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": "\nGiven a ``DL_Group``, you can create new DSA, Diffie-Hellman and ElGamal key pairs with\n\n.. cpp:function:: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`\nGiven a ``DL_Group``, you can create new DSA, Diffie-Hellman and ElGamal key pairs with\n\n.. cpp:function:: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 22,
                  "endLine": 230,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nGiven a ``DL_Group``, you can create new DSA, Diffie-Hellman and ElGamal key pairs with\n\n.. cpp:function:: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": "\nGiven a ``DL_Group``, you can create new DSA, Diffie-Hellman and ElGamal key pairs with\n\n.. cpp:function:: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`\nGiven a ``DL_Group``, you can create new DSA, Diffie-Hellman and ElGamal key pairs with\n\n.. cpp:function:: DSA_PrivateKey::DSA_PrivateKey(RandomNumberGenerator& rng, \\\n   const DL_Group& group, const BigInt& x = 0)\n\n.. cpp:function:: DH_PrivateKey::DH_PrivateKey(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 38,
                  "endLine": 203,
                  "endColumn": 48,
                  "snippet": {
                    "text": "the public key modulus in bits. So to create a new RSA private key, you would\ncall\n\n.. cpp:function:: RSA_PrivateKey::RSA_PrivateKey(RandomNumberGenerator& rng, size_t bits)\n\n  A constructor that creates a new random RSA private key with a modulus\n  of length *bits*.\n",
                    "rendered": {
                      "text": "the public key modulus in bits. So to create a new RSA private key, you would\ncall\n\n.. cpp:function:: RSA_PrivateKey::RSA_PrivateKey(RandomNumberGenerator& rng, size_t bits)\n\n  A constructor that creates a new random RSA private key with a modulus\n  of length *bits*.\n",
                      "markdown": "`the public key modulus in bits. So to create a new RSA private key, you would\ncall\n\n.. cpp:function:: RSA_PrivateKey::RSA_PrivateKey(RandomNumberGenerator& rng, size_t bits)\n\n  A constructor that creates a new random RSA private key with a modulus\n  of length *bits*.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 22,
                  "endLine": 203,
                  "endColumn": 32,
                  "snippet": {
                    "text": "the public key modulus in bits. So to create a new RSA private key, you would\ncall\n\n.. cpp:function:: RSA_PrivateKey::RSA_PrivateKey(RandomNumberGenerator& rng, size_t bits)\n\n  A constructor that creates a new random RSA private key with a modulus\n  of length *bits*.\n",
                    "rendered": {
                      "text": "the public key modulus in bits. So to create a new RSA private key, you would\ncall\n\n.. cpp:function:: RSA_PrivateKey::RSA_PrivateKey(RandomNumberGenerator& rng, size_t bits)\n\n  A constructor that creates a new random RSA private key with a modulus\n  of length *bits*.\n",
                      "markdown": "`the public key modulus in bits. So to create a new RSA private key, you would\ncall\n\n.. cpp:function:: RSA_PrivateKey::RSA_PrivateKey(RandomNumberGenerator& rng, size_t bits)\n\n  A constructor that creates a new random RSA private key with a modulus\n  of length *bits*.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 17,
                  "endLine": 191,
                  "endColumn": 28,
                  "snippet": {
                    "text": "in their respective countries (Germany, South Korea, China, and Russia, resp),\nand are completely obscure and unused outside of that context.\n\n.. _creating_new_private_keys:\n\nCreating New Private Keys\n----------------------------------------\n",
                    "rendered": {
                      "text": "in their respective countries (Germany, South Korea, China, and Russia, resp),\nand are completely obscure and unused outside of that context.\n\n.. _creating_new_private_keys:\n\nCreating New Private Keys\n----------------------------------------\n",
                      "markdown": "`in their respective countries (Germany, South Korea, China, and Russia, resp),\nand are completely obscure and unused outside of that context.\n\n.. _creating_new_private_keys:\n\nCreating New Private Keys\n----------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 57,
                  "endLine": 14,
                  "endColumn": 68,
                  "snippet": {
                    "text": "Public and private keys are represented by classes ``Public_Key`` and\n``Private_Key``. Both derive from ``Asymmetric_Key``.\n\nCurrently there is an inheritance relationship between ``Private_Key`` and\n``Public_Key``, so that a private key can also be used as the corresponding\npublic key. It is best to avoid relying on this, as this inheritance will be\nremoved in a future major release.\n",
                    "rendered": {
                      "text": "Public and private keys are represented by classes ``Public_Key`` and\n``Private_Key``. Both derive from ``Asymmetric_Key``.\n\nCurrently there is an inheritance relationship between ``Private_Key`` and\n``Public_Key``, so that a private key can also be used as the corresponding\npublic key. It is best to avoid relying on this, as this inheritance will be\nremoved in a future major release.\n",
                      "markdown": "`Public and private keys are represented by classes ``Public_Key`` and\n``Private_Key``. Both derive from ``Asymmetric_Key``.\n\nCurrently there is an inheritance relationship between ``Private_Key`` and\n``Public_Key``, so that a private key can also be used as the corresponding\npublic key. It is best to avoid relying on this, as this inheritance will be\nremoved in a future major release.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 2,
                  "endLine": 12,
                  "endColumn": 13,
                  "snippet": {
                    "text": "----------------------------------------\n\nPublic and private keys are represented by classes ``Public_Key`` and\n``Private_Key``. Both derive from ``Asymmetric_Key``.\n\nCurrently there is an inheritance relationship between ``Private_Key`` and\n``Public_Key``, so that a private key can also be used as the corresponding\n",
                    "rendered": {
                      "text": "----------------------------------------\n\nPublic and private keys are represented by classes ``Public_Key`` and\n``Private_Key``. Both derive from ``Asymmetric_Key``.\n\nCurrently there is an inheritance relationship between ``Private_Key`` and\n``Public_Key``, so that a private key can also be used as the corresponding\n",
                      "markdown": "`----------------------------------------\n\nPublic and private keys are represented by classes ``Public_Key`` and\n``Private_Key``. Both derive from ``Asymmetric_Key``.\n\nCurrently there is an inheritance relationship between ``Private_Key`` and\n``Public_Key``, so that a private key can also be used as the corresponding\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 30,
                  "endLine": 329,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n.. cpp:function:: std::string PKCS8::PEM_encode(const Private_Key& key)\n\n  Serializes the private key, base64 encodes it, and returns the\n  result.\n\nLast but not least, there are some functions that will load (and\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: std::string PKCS8::PEM_encode(const Private_Key& key)\n\n  Serializes the private key, base64 encodes it, and returns the\n  result.\n\nLast but not least, there are some functions that will load (and\n",
                      "markdown": "`\n.. cpp:function:: std::string PKCS8::PEM_encode(const Private_Key& key)\n\n  Serializes the private key, base64 encodes it, and returns the\n  result.\n\nLast but not least, there are some functions that will load (and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 1186,
                  "startColumn": 72,
                  "endLine": 1187,
                  "snippet": {
                    "text": "is based on the implementation HyMES, with the kind permission of Nicolas\nSendrier and INRIA to release a C++ adaption of their original C code under the\nBotan license. It was then modified by Falko Strenzke to add side channel and\nfault attack countermeasures. You can read more about the implementation at\nhttp://www.cryptosource.de/docs/mceliece_in_botan.pdf\n\nEncryption in the McEliece scheme consists of choosing a message block of size\n`n`, encoding it in the error correcting code which is the public key, then\n",
                    "rendered": {
                      "text": "is based on the implementation HyMES, with the kind permission of Nicolas\nSendrier and INRIA to release a C++ adaption of their original C code under the\nBotan license. It was then modified by Falko Strenzke to add side channel and\nfault attack countermeasures. You can read more about the implementation at\nhttp://www.cryptosource.de/docs/mceliece_in_botan.pdf\n\nEncryption in the McEliece scheme consists of choosing a message block of size\n`n`, encoding it in the error correcting code which is the public key, then\n",
                      "markdown": "`is based on the implementation HyMES, with the kind permission of Nicolas\nSendrier and INRIA to release a C++ adaption of their original C code under the\nBotan license. It was then modified by Falko Strenzke to add side channel and\nfault attack countermeasures. You can read more about the implementation at\nhttp://www.cryptosource.de/docs/mceliece_in_botan.pdf\n\nEncryption in the McEliece scheme consists of choosing a message block of size\n`n`, encoding it in the error correcting code which is the public key, then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 691,
                  "startColumn": 36,
                  "endLine": 691,
                  "endColumn": 40,
                  "snippet": {
                    "text": "       Botan both supports non-deterministic and deterministic (as per RFC\n       6979) DSA and ECDSA signatures. Either type of signature can be verified\n       by any other (EC)DSA library, regardless of which mode it prefers. If the\n       ``rfc6979`` module is enabled at build time, deterministic DSA and ECDSA\n       signatures will be created.\n\n     The proper value of *padding* depends on the algorithm. For many signature\n",
                    "rendered": {
                      "text": "       Botan both supports non-deterministic and deterministic (as per RFC\n       6979) DSA and ECDSA signatures. Either type of signature can be verified\n       by any other (EC)DSA library, regardless of which mode it prefers. If the\n       ``rfc6979`` module is enabled at build time, deterministic DSA and ECDSA\n       signatures will be created.\n\n     The proper value of *padding* depends on the algorithm. For many signature\n",
                      "markdown": "`       Botan both supports non-deterministic and deterministic (as per RFC\n       6979) DSA and ECDSA signatures. Either type of signature can be verified\n       by any other (EC)DSA library, regardless of which mode it prefers. If the\n       ``rfc6979`` module is enabled at build time, deterministic DSA and ECDSA\n       signatures will be created.\n\n     The proper value of *padding* depends on the algorithm. For many signature\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 1230,
                  "startColumn": 34,
                  "endLine": 1230,
                  "endColumn": 40,
                  "snippet": {
                    "text": "----------------------------------------\n\nBotan implements the single tree version of the eXtended Merkle Signature\nScheme (XMSS) using Winternitz One Time Signatures+ (WOTS+). The implementation\nis based on `RFC 8391 \"XMSS: eXtended Merkle Signature Scheme\"\n<https://tools.ietf.org/html/rfc8391>`_.\n\n",
                    "rendered": {
                      "text": "----------------------------------------\n\nBotan implements the single tree version of the eXtended Merkle Signature\nScheme (XMSS) using Winternitz One Time Signatures+ (WOTS+). The implementation\nis based on `RFC 8391 \"XMSS: eXtended Merkle Signature Scheme\"\n<https://tools.ietf.org/html/rfc8391>`_.\n\n",
                      "markdown": "`----------------------------------------\n\nBotan implements the single tree version of the eXtended Merkle Signature\nScheme (XMSS) using Winternitz One Time Signatures+ (WOTS+). The implementation\nis based on `RFC 8391 \"XMSS: eXtended Merkle Signature Scheme\"\n<https://tools.ietf.org/html/rfc8391>`_.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 29,
                  "endLine": 329,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n.. cpp:function:: std::string PKCS8::PEM_encode(const Private_Key& key)\n\n  Serializes the private key, base64 encodes it, and returns the\n  result.\n\nLast but not least, there are some functions that will load (and\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: std::string PKCS8::PEM_encode(const Private_Key& key)\n\n  Serializes the private key, base64 encodes it, and returns the\n  result.\n\nLast but not least, there are some functions that will load (and\n",
                      "markdown": "`\n.. cpp:function:: std::string PKCS8::PEM_encode(const Private_Key& key)\n\n  Serializes the private key, base64 encodes it, and returns the\n  result.\n\nLast but not least, there are some functions that will load (and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 51,
                  "endLine": 214,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  desktop it might take up to half a second. In a GUI blocking for\n  that long can be a problem. The usual approach is to perform key\n  generation in a new thread, with a animated modal UI element so the\n  user knows the application is still alive. If you wish to provide a\n  progress estimate things get a bit complicated but some library\n  users documented their approach in\n  `a blog post <https://medium.com/nexenio/indicating-progress-of-rsa-key-pair-generation-the-practical-approach-a049ba829dbe>`_.\n",
                    "rendered": {
                      "text": "  desktop it might take up to half a second. In a GUI blocking for\n  that long can be a problem. The usual approach is to perform key\n  generation in a new thread, with a animated modal UI element so the\n  user knows the application is still alive. If you wish to provide a\n  progress estimate things get a bit complicated but some library\n  users documented their approach in\n  `a blog post <https://medium.com/nexenio/indicating-progress-of-rsa-key-pair-generation-the-practical-approach-a049ba829dbe>`_.\n",
                      "markdown": "`  desktop it might take up to half a second. In a GUI blocking for\n  that long can be a problem. The usual approach is to perform key\n  generation in a new thread, with a animated modal UI element so the\n  user knows the application is still alive. If you wish to provide a\n  progress estimate things get a bit complicated but some library\n  users documented their approach in\n  `a blog post <https://medium.com/nexenio/indicating-progress-of-rsa-key-pair-generation-the-practical-approach-a049ba829dbe>`_.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pubkey.rst"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 28,
                  "endLine": 68,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n      Note that pre-standard post-quantum algorithms of the NIST competition\n      (e.g. Kyber, Dilithium, FrodoKEM, etc) do not have a standardized BER\n      encoding, yet. For the time being, the raw public key bits are returned\n      for these algorithms. That might change as the standards evolve.\n\n   .. cpp:function:: std::vector<uint8_t> raw_public_key_bits() const = 0;\n",
                    "rendered": {
                      "text": "\n      Note that pre-standard post-quantum algorithms of the NIST competition\n      (e.g. Kyber, Dilithium, FrodoKEM, etc) do not have a standardized BER\n      encoding, yet. For the time being, the raw public key bits are returned\n      for these algorithms. That might change as the standards evolve.\n\n   .. cpp:function:: std::vector<uint8_t> raw_public_key_bits() const = 0;\n",
                      "markdown": "`\n      Note that pre-standard post-quantum algorithms of the NIST competition\n      (e.g. Kyber, Dilithium, FrodoKEM, etc) do not have a standardized BER\n      encoding, yet. For the time being, the raw public key bits are returned\n      for these algorithms. That might change as the standards evolve.\n\n   .. cpp:function:: std::vector<uint8_t> raw_public_key_bits() const = 0;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/sem_ver.rst"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 50,
                  "endLine": 65,
                  "endColumn": 54,
                  "snippet": {
                    "text": "use but are really only intended for use by the library itself.\n\nThe developers denote such functions by starting them with an underscore\n(``_``). Any such function may change or disappear at any time.\n",
                    "rendered": {
                      "text": "use but are really only intended for use by the library itself.\n\nThe developers denote such functions by starting them with an underscore\n(``_``). Any such function may change or disappear at any time.\n",
                      "markdown": "`use but are really only intended for use by the library itself.\n\nThe developers denote such functions by starting them with an underscore\n(``_``). Any such function may change or disappear at any time.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/sem_ver.rst"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 33,
                  "endLine": 54,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nCertain modules can be marked as experimental in the build system.\nSuch modules are not built by default. Any functionality exposed by\nsuch modules may change or vanish at any time without warning. See\n:ref:`building` for more information on enabling or disabling these\nmodules.\n\n",
                    "rendered": {
                      "text": "\nCertain modules can be marked as experimental in the build system.\nSuch modules are not built by default. Any functionality exposed by\nsuch modules may change or vanish at any time without warning. See\n:ref:`building` for more information on enabling or disabling these\nmodules.\n\n",
                      "markdown": "`\nCertain modules can be marked as experimental in the build system.\nSuch modules are not built by default. Any functionality exposed by\nsuch modules may change or vanish at any time without warning. See\n:ref:`building` for more information on enabling or disabling these\nmodules.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/sem_ver.rst"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 40,
                  "endLine": 54,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nCertain modules can be marked as experimental in the build system.\nSuch modules are not built by default. Any functionality exposed by\nsuch modules may change or vanish at any time without warning. See\n:ref:`building` for more information on enabling or disabling these\nmodules.\n\n",
                    "rendered": {
                      "text": "\nCertain modules can be marked as experimental in the build system.\nSuch modules are not built by default. Any functionality exposed by\nsuch modules may change or vanish at any time without warning. See\n:ref:`building` for more information on enabling or disabling these\nmodules.\n\n",
                      "markdown": "`\nCertain modules can be marked as experimental in the build system.\nSuch modules are not built by default. Any functionality exposed by\nsuch modules may change or vanish at any time without warning. See\n:ref:`building` for more information on enabling or disabling these\nmodules.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 50,
                  "endLine": 210,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n\n  Bug introduced in 1.11.0, fixed in 2.1.0.\n",
                    "rendered": {
                      "text": "  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n\n  Bug introduced in 1.11.0, fixed in 2.1.0.\n",
                      "markdown": "`  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n\n  Bug introduced in 1.11.0, fixed in 2.1.0.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 9,
                  "endLine": 209,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n\n",
                    "rendered": {
                      "text": "\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n\n",
                      "markdown": "`\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 2,
                  "endLine": 208,
                  "endColumn": 10,
                  "snippet": {
                    "text": "* 2017-03-23 (CVE-2017-7252): Incorrect bcrypt computation\n\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n",
                    "rendered": {
                      "text": "* 2017-03-23 (CVE-2017-7252): Incorrect bcrypt computation\n\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n",
                      "markdown": "`* 2017-03-23 (CVE-2017-7252): Incorrect bcrypt computation\n\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 35,
                  "endLine": 207,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n* 2017-03-23 (CVE-2017-7252): Incorrect bcrypt computation\n\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n",
                    "rendered": {
                      "text": "\n* 2017-03-23 (CVE-2017-7252): Incorrect bcrypt computation\n\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n",
                      "markdown": "`\n* 2017-03-23 (CVE-2017-7252): Incorrect bcrypt computation\n\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 6,
                  "endLine": 88,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n* 2020-12-21 (CVE-2021-24115): Codec encoding/decoding was not constant time\n\n  The base64, base32, base58 and hex encoding/decoding routines used lookup\n  tables which could leak information via a cache-based side channel attack.\n  The encoding tables were small and unlikely to be exploitable, but the\n  decoding tables were large enough to cause non-negligible information\n",
                    "rendered": {
                      "text": "\n* 2020-12-21 (CVE-2021-24115): Codec encoding/decoding was not constant time\n\n  The base64, base32, base58 and hex encoding/decoding routines used lookup\n  tables which could leak information via a cache-based side channel attack.\n  The encoding tables were small and unlikely to be exploitable, but the\n  decoding tables were large enough to cause non-negligible information\n",
                      "markdown": "`\n* 2020-12-21 (CVE-2021-24115): Codec encoding/decoding was not constant time\n\n  The base64, base32, base58 and hex encoding/decoding routines used lookup\n  tables which could leak information via a cache-based side channel attack.\n  The encoding tables were small and unlikely to be exploitable, but the\n  decoding tables were large enough to cause non-negligible information\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 60,
                  "endLine": 405,
                  "endColumn": 64,
                  "snippet": {
                    "text": "* 2015-08-03 (CVE-2015-5726): Crash in BER decoder\n\n  The BER decoder would crash due to reading from offset 0 of an empty vector if\n  it encountered a BIT STRING which did not contain any data at all. This can be\n  used to easily crash applications reading untrusted ASN.1 data, but does not\n  seem exploitable for code execution. Found with afl.\n\n",
                    "rendered": {
                      "text": "* 2015-08-03 (CVE-2015-5726): Crash in BER decoder\n\n  The BER decoder would crash due to reading from offset 0 of an empty vector if\n  it encountered a BIT STRING which did not contain any data at all. This can be\n  used to easily crash applications reading untrusted ASN.1 data, but does not\n  seem exploitable for code execution. Found with afl.\n\n",
                      "markdown": "`* 2015-08-03 (CVE-2015-5726): Crash in BER decoder\n\n  The BER decoder would crash due to reading from offset 0 of an empty vector if\n  it encountered a BIT STRING which did not contain any data at all. This can be\n  used to easily crash applications reading untrusted ASN.1 data, but does not\n  seem exploitable for code execution. Found with afl.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 46,
                  "endLine": 310,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n  On systems which use the mlock pool allocator, it would allow an\n  attacker to overwrite memory held in secure_vector objects. After\n  this point the write will hit the guard page at the end of the\n  mmap'ed region so it probably could not be used for code execution\n  directly, but would allow overwriting adjacent key material.\n\n",
                    "rendered": {
                      "text": "\n  On systems which use the mlock pool allocator, it would allow an\n  attacker to overwrite memory held in secure_vector objects. After\n  this point the write will hit the guard page at the end of the\n  mmap'ed region so it probably could not be used for code execution\n  directly, but would allow overwriting adjacent key material.\n\n",
                      "markdown": "`\n  On systems which use the mlock pool allocator, it would allow an\n  attacker to overwrite memory held in secure_vector objects. After\n  this point the write will hit the guard page at the end of the\n  mmap'ed region so it probably could not be used for code execution\n  directly, but would allow overwriting adjacent key material.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 40,
                  "endLine": 208,
                  "endColumn": 44,
                  "snippet": {
                    "text": "* 2017-03-23 (CVE-2017-7252): Incorrect bcrypt computation\n\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n",
                    "rendered": {
                      "text": "* 2017-03-23 (CVE-2017-7252): Incorrect bcrypt computation\n\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n",
                      "markdown": "`* 2017-03-23 (CVE-2017-7252): Incorrect bcrypt computation\n\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 11,
                  "endLine": 208,
                  "endColumn": 15,
                  "snippet": {
                    "text": "* 2017-03-23 (CVE-2017-7252): Incorrect bcrypt computation\n\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n",
                    "rendered": {
                      "text": "* 2017-03-23 (CVE-2017-7252): Incorrect bcrypt computation\n\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n",
                      "markdown": "`* 2017-03-23 (CVE-2017-7252): Incorrect bcrypt computation\n\n  Botan's implementation of bcrypt password hashing scheme truncated long\n  passwords at 56 characters, instead of at bcrypt's standard 72 characters\n  limit. Passwords with lengths between these two bounds could be cracked more\n  easily than should be the case due to the final password bytes being ignored.\n  Found and reported by Solar Designer.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 45,
                  "endLine": 108,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  sub-CA which was constrained by a name constraints extension in its own\n  certificate to issue a certificate containing a prohibited DN. Until 2.15.0,\n  there was no API to access these alternative name DNs so it is unlikely that\n  any application would make incorrect access control decisions on the basis of\n  the incorrect DN. Reported by Mario Korth of Ruhr-Universität Bochum.\n\n  Introduced in 1.11.29, fixed in 2.15.0\n",
                    "rendered": {
                      "text": "  sub-CA which was constrained by a name constraints extension in its own\n  certificate to issue a certificate containing a prohibited DN. Until 2.15.0,\n  there was no API to access these alternative name DNs so it is unlikely that\n  any application would make incorrect access control decisions on the basis of\n  the incorrect DN. Reported by Mario Korth of Ruhr-Universität Bochum.\n\n  Introduced in 1.11.29, fixed in 2.15.0\n",
                      "markdown": "`  sub-CA which was constrained by a name constraints extension in its own\n  certificate to issue a certificate containing a prohibited DN. Until 2.15.0,\n  there was no API to access these alternative name DNs so it is unlikely that\n  any application would make incorrect access control decisions on the basis of\n  the incorrect DN. Reported by Mario Korth of Ruhr-Universität Bochum.\n\n  Introduced in 1.11.29, fixed in 2.15.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 35,
                  "endLine": 49,
                  "endColumn": 39,
                  "snippet": {
                    "text": "* 2024-02-20 (CVE-2024-34703): DoS due to oversized elliptic curve parameters\n\n  When decoding an ASN.1 encoded elliptic curve, Botan would verify the `p`\n  parameter was actually prime, and at least some minimum size. However it\n  failed to check if the prime was far too large (for example thousands of\n  bits), in which case checking the prime would take a significant amount of\n  computation. Now the maximum size of arbitrary elliptic curves when decoding\n",
                    "rendered": {
                      "text": "* 2024-02-20 (CVE-2024-34703): DoS due to oversized elliptic curve parameters\n\n  When decoding an ASN.1 encoded elliptic curve, Botan would verify the `p`\n  parameter was actually prime, and at least some minimum size. However it\n  failed to check if the prime was far too large (for example thousands of\n  bits), in which case checking the prime would take a significant amount of\n  computation. Now the maximum size of arbitrary elliptic curves when decoding\n",
                      "markdown": "`* 2024-02-20 (CVE-2024-34703): DoS due to oversized elliptic curve parameters\n\n  When decoding an ASN.1 encoded elliptic curve, Botan would verify the `p`\n  parameter was actually prime, and at least some minimum size. However it\n  failed to check if the prime was far too large (for example thousands of\n  bits), in which case checking the prime would take a significant amount of\n  computation. Now the maximum size of arbitrary elliptic curves when decoding\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 62,
                  "endLine": 16,
                  "snippet": {
                    "text": "        Key fingerprint = 4E60 C735 51AF 2188 DF0A  5A62 78E9 8043 5712 3B60\n        uid         Jack Lloyd <jack@randombit.net>\n\nThis key can be found in the file ``doc/pgpkey.txt`` or online at\nhttps://keybase.io/jacklloyd and on most PGP keyservers.\n\n2024\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "        Key fingerprint = 4E60 C735 51AF 2188 DF0A  5A62 78E9 8043 5712 3B60\n        uid         Jack Lloyd <jack@randombit.net>\n\nThis key can be found in the file ``doc/pgpkey.txt`` or online at\nhttps://keybase.io/jacklloyd and on most PGP keyservers.\n\n2024\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`        Key fingerprint = 4E60 C735 51AF 2188 DF0A  5A62 78E9 8043 5712 3B60\n        uid         Jack Lloyd <jack@randombit.net>\n\nThis key can be found in the file ``doc/pgpkey.txt`` or online at\nhttps://keybase.io/jacklloyd and on most PGP keyservers.\n\n2024\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 1,
                  "endLine": 397,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  could be used to mount a Bleichenbacher million-message attack. PKCS #1 v1.5\n  decoding has been rewritten to use a sequence of operations which do not\n  contain any input-dependent indexes or jumps. Notations for checking constant\n  time blocks with ctgrind (https://github.com/agl/ctgrind) were added to PKCS\n  #1 decoding among other areas. Found in a review by Sirrix AG and 3curity GmbH.\n\n  Fixed in 1.11.22 and 1.10.13. Affected all previous versions.\n",
                    "rendered": {
                      "text": "  could be used to mount a Bleichenbacher million-message attack. PKCS #1 v1.5\n  decoding has been rewritten to use a sequence of operations which do not\n  contain any input-dependent indexes or jumps. Notations for checking constant\n  time blocks with ctgrind (https://github.com/agl/ctgrind) were added to PKCS\n  #1 decoding among other areas. Found in a review by Sirrix AG and 3curity GmbH.\n\n  Fixed in 1.11.22 and 1.10.13. Affected all previous versions.\n",
                      "markdown": "`  could be used to mount a Bleichenbacher million-message attack. PKCS #1 v1.5\n  decoding has been rewritten to use a sequence of operations which do not\n  contain any input-dependent indexes or jumps. Notations for checking constant\n  time blocks with ctgrind (https://github.com/agl/ctgrind) were added to PKCS\n  #1 decoding among other areas. Found in a review by Sirrix AG and 3curity GmbH.\n\n  Fixed in 1.11.22 and 1.10.13. Affected all previous versions.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 18,
                  "endLine": 394,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  During RSA decryption, how long decoding of PKCS #1 v1.5 padding took was\n  input dependent. If these differences could be measured by an attacker, it\n  could be used to mount a Bleichenbacher million-message attack. PKCS #1 v1.5\n  decoding has been rewritten to use a sequence of operations which do not\n  contain any input-dependent indexes or jumps. Notations for checking constant\n  time blocks with ctgrind (https://github.com/agl/ctgrind) were added to PKCS\n",
                    "rendered": {
                      "text": "\n  During RSA decryption, how long decoding of PKCS #1 v1.5 padding took was\n  input dependent. If these differences could be measured by an attacker, it\n  could be used to mount a Bleichenbacher million-message attack. PKCS #1 v1.5\n  decoding has been rewritten to use a sequence of operations which do not\n  contain any input-dependent indexes or jumps. Notations for checking constant\n  time blocks with ctgrind (https://github.com/agl/ctgrind) were added to PKCS\n",
                      "markdown": "`\n  During RSA decryption, how long decoding of PKCS #1 v1.5 padding took was\n  input dependent. If these differences could be measured by an attacker, it\n  could be used to mount a Bleichenbacher million-message attack. PKCS #1 v1.5\n  decoding has been rewritten to use a sequence of operations which do not\n  contain any input-dependent indexes or jumps. Notations for checking constant\n  time blocks with ctgrind (https://github.com/agl/ctgrind) were added to PKCS\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 68,
                  "endLine": 391,
                  "snippet": {
                    "text": "\n  Introduced in 1.11.0, fixed in 1.11.22\n\n* 2015-10-26 (CVE-2015-7827): PKCS #1 v1.5 decoding was not constant time\n\n  During RSA decryption, how long decoding of PKCS #1 v1.5 padding took was\n  input dependent. If these differences could be measured by an attacker, it\n  could be used to mount a Bleichenbacher million-message attack. PKCS #1 v1.5\n",
                    "rendered": {
                      "text": "\n  Introduced in 1.11.0, fixed in 1.11.22\n\n* 2015-10-26 (CVE-2015-7827): PKCS #1 v1.5 decoding was not constant time\n\n  During RSA decryption, how long decoding of PKCS #1 v1.5 padding took was\n  input dependent. If these differences could be measured by an attacker, it\n  could be used to mount a Bleichenbacher million-message attack. PKCS #1 v1.5\n",
                      "markdown": "`\n  Introduced in 1.11.0, fixed in 1.11.22\n\n* 2015-10-26 (CVE-2015-7827): PKCS #1 v1.5 decoding was not constant time\n\n  During RSA decryption, how long decoding of PKCS #1 v1.5 padding took was\n  input dependent. If these differences could be measured by an attacker, it\n  could be used to mount a Bleichenbacher million-message attack. PKCS #1 v1.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 25,
                  "endLine": 233,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n  A side channel in OAEP decoding could be used to distinguish RSA ciphertexts\n  that did or did not have a leading 0 byte. For an attacker capable of\n  precisely measuring the time taken for OAEP decoding, this could be used as an\n  oracle allowing decryption of arbitrary RSA ciphertexts. Remote exploitation\n  seems difficult as OAEP decoding is always paired with RSA decryption, which\n  takes substantially more (and variable) time, and so will tend to mask the\n",
                    "rendered": {
                      "text": "\n  A side channel in OAEP decoding could be used to distinguish RSA ciphertexts\n  that did or did not have a leading 0 byte. For an attacker capable of\n  precisely measuring the time taken for OAEP decoding, this could be used as an\n  oracle allowing decryption of arbitrary RSA ciphertexts. Remote exploitation\n  seems difficult as OAEP decoding is always paired with RSA decryption, which\n  takes substantially more (and variable) time, and so will tend to mask the\n",
                      "markdown": "`\n  A side channel in OAEP decoding could be used to distinguish RSA ciphertexts\n  that did or did not have a leading 0 byte. For an attacker capable of\n  precisely measuring the time taken for OAEP decoding, this could be used as an\n  oracle allowing decryption of arbitrary RSA ciphertexts. Remote exploitation\n  seems difficult as OAEP decoding is always paired with RSA decryption, which\n  takes substantially more (and variable) time, and so will tend to mask the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 74,
                  "endLine": 122,
                  "snippet": {
                    "text": "  predictor. No information about the contents was leaked, but the length alone\n  might be used to make inferences about the contents. This issue affects TLS\n  CBC ciphersuites as well as CBC encryption using PKCS7 or other similar padding\n  mechanisms. In all cases, the unpadding operations were already constant time\n  and are not affected. Reported by Maximilian Blochberger of Universität\n  Hamburg.\n\n  Fixed in 2.14.0, all prior versions affected.\n",
                    "rendered": {
                      "text": "  predictor. No information about the contents was leaked, but the length alone\n  might be used to make inferences about the contents. This issue affects TLS\n  CBC ciphersuites as well as CBC encryption using PKCS7 or other similar padding\n  mechanisms. In all cases, the unpadding operations were already constant time\n  and are not affected. Reported by Maximilian Blochberger of Universität\n  Hamburg.\n\n  Fixed in 2.14.0, all prior versions affected.\n",
                      "markdown": "`  predictor. No information about the contents was leaked, but the length alone\n  might be used to make inferences about the contents. This issue affects TLS\n  CBC ciphersuites as well as CBC encryption using PKCS7 or other similar padding\n  mechanisms. In all cases, the unpadding operations were already constant time\n  and are not affected. Reported by Maximilian Blochberger of Universität\n  Hamburg.\n\n  Fixed in 2.14.0, all prior versions affected.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 46,
                  "endLine": 115,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n* 2020-03-24: Side channel during CBC padding\n\n  The CBC padding operations were not constant time and as a result would leak\n  the length of the plaintext values which were being padded to an attacker\n  running a side channel attack via shared resources such as cache or branch\n  predictor. No information about the contents was leaked, but the length alone\n",
                    "rendered": {
                      "text": "\n* 2020-03-24: Side channel during CBC padding\n\n  The CBC padding operations were not constant time and as a result would leak\n  the length of the plaintext values which were being padded to an attacker\n  running a side channel attack via shared resources such as cache or branch\n  predictor. No information about the contents was leaked, but the length alone\n",
                      "markdown": "`\n* 2020-03-24: Side channel during CBC padding\n\n  The CBC padding operations were not constant time and as a result would leak\n  the length of the plaintext values which were being padded to an attacker\n  running a side channel attack via shared resources such as cache or branch\n  predictor. No information about the contents was leaked, but the length alone\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 71,
                  "endLine": 87,
                  "snippet": {
                    "text": "2020\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* 2020-12-21 (CVE-2021-24115): Codec encoding/decoding was not constant time\n\n  The base64, base32, base58 and hex encoding/decoding routines used lookup\n  tables which could leak information via a cache-based side channel attack.\n  The encoding tables were small and unlikely to be exploitable, but the\n",
                    "rendered": {
                      "text": "2020\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* 2020-12-21 (CVE-2021-24115): Codec encoding/decoding was not constant time\n\n  The base64, base32, base58 and hex encoding/decoding routines used lookup\n  tables which could leak information via a cache-based side channel attack.\n  The encoding tables were small and unlikely to be exploitable, but the\n",
                      "markdown": "`2020\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* 2020-12-21 (CVE-2021-24115): Codec encoding/decoding was not constant time\n\n  The base64, base32, base58 and hex encoding/decoding routines used lookup\n  tables which could leak information via a cache-based side channel attack.\n  The encoding tables were small and unlikely to be exploitable, but the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 40,
                  "endLine": 21,
                  "endColumn": 49,
                  "snippet": {
                    "text": "2024\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* 2024-07-08 (CVE-2024-34702): Denial of Service Due to Excessive Name Constraints\n\n  Checking name constraints in X.509 certificates is quadratic in the number of\n  names and name constraints. An attacker who presented a certificate chain\n",
                    "rendered": {
                      "text": "2024\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* 2024-07-08 (CVE-2024-34702): Denial of Service Due to Excessive Name Constraints\n\n  Checking name constraints in X.509 certificates is quadratic in the number of\n  names and name constraints. An attacker who presented a certificate chain\n",
                      "markdown": "`2024\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* 2024-07-08 (CVE-2024-34702): Denial of Service Due to Excessive Name Constraints\n\n  Checking name constraints in X.509 certificates is quadratic in the number of\n  names and name constraints. An attacker who presented a certificate chain\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/security.rst"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 66,
                  "endLine": 9,
                  "endColumn": 5,
                  "snippet": {
                    "text": "========================================\n\nIf you think you have found a security bug in Botan please contact\nJack Lloyd (jack@randombit.net). If you would like to encrypt your\nmail please use::\n\n  pub   rsa3072/57123B60 2015-03-23\n        Key fingerprint = 4E60 C735 51AF 2188 DF0A  5A62 78E9 8043 5712 3B60\n",
                    "rendered": {
                      "text": "========================================\n\nIf you think you have found a security bug in Botan please contact\nJack Lloyd (jack@randombit.net). If you would like to encrypt your\nmail please use::\n\n  pub   rsa3072/57123B60 2015-03-23\n        Key fingerprint = 4E60 C735 51AF 2188 DF0A  5A62 78E9 8043 5712 3B60\n",
                      "markdown": "`========================================\n\nIf you think you have found a security bug in Botan please contact\nJack Lloyd (jack@randombit.net). If you would like to encrypt your\nmail please use::\n\n  pub   rsa3072/57123B60 2015-03-23\n        Key fingerprint = 4E60 C735 51AF 2188 DF0A  5A62 78E9 8043 5712 3B60\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/continuous_integration.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 50,
                  "endLine": 8,
                  "snippet": {
                    "text": "CI Build Script\n----------------\n\nThe Github Actions builds are orchestrated using a script\n``src/scripts/ci_build.py``. This allows one to easily reproduce the CI process\non a local machine.\n\nGithub Actions\n",
                    "rendered": {
                      "text": "CI Build Script\n----------------\n\nThe Github Actions builds are orchestrated using a script\n``src/scripts/ci_build.py``. This allows one to easily reproduce the CI process\non a local machine.\n\nGithub Actions\n",
                      "markdown": "`CI Build Script\n----------------\n\nThe Github Actions builds are orchestrated using a script\n``src/scripts/ci_build.py``. This allows one to easily reproduce the CI process\non a local machine.\n\nGithub Actions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/continuous_integration.rst"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 8,
                  "endLine": 5,
                  "snippet": {
                    "text": "Continuous Integration and Automated Testing\n===============================================\n\nCI Build Script\n----------------\n\nThe Github Actions builds are orchestrated using a script\n``src/scripts/ci_build.py``. This allows one to easily reproduce the CI process\n",
                    "rendered": {
                      "text": "Continuous Integration and Automated Testing\n===============================================\n\nCI Build Script\n----------------\n\nThe Github Actions builds are orchestrated using a script\n``src/scripts/ci_build.py``. This allows one to easily reproduce the CI process\n",
                      "markdown": "`Continuous Integration and Automated Testing\n===============================================\n\nCI Build Script\n----------------\n\nThe Github Actions builds are orchestrated using a script\n``src/scripts/ci_build.py``. This allows one to easily reproduce the CI process\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/stream_ciphers.rst"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 68,
                  "endLine": 129,
                  "endColumn": 72,
                  "snippet": {
                    "text": "It is possible to choose the width of the counter portion, which can improve\nperformance somewhat, but limits the maximum number of bytes that can safely be\nencrypted. Different protocols have different conventions for the width of the\ncounter portion. This is done by specifying the width (which must be at least 4\nbytes, allowing to encrypt 2\\ :sup:`32` blocks of data) for example using\n\"CTR(AES-256,8)\" will select a 64-bit (8 byte) counter.\n\n",
                    "rendered": {
                      "text": "It is possible to choose the width of the counter portion, which can improve\nperformance somewhat, but limits the maximum number of bytes that can safely be\nencrypted. Different protocols have different conventions for the width of the\ncounter portion. This is done by specifying the width (which must be at least 4\nbytes, allowing to encrypt 2\\ :sup:`32` blocks of data) for example using\n\"CTR(AES-256,8)\" will select a 64-bit (8 byte) counter.\n\n",
                      "markdown": "`It is possible to choose the width of the counter portion, which can improve\nperformance somewhat, but limits the maximum number of bytes that can safely be\nencrypted. Different protocols have different conventions for the width of the\ncounter portion. This is done by specifying the width (which must be at least 4\nbytes, allowing to encrypt 2\\ :sup:`32` blocks of data) for example using\n\"CTR(AES-256,8)\" will select a 64-bit (8 byte) counter.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/stream_ciphers.rst"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 55,
                  "endLine": 60,
                  "endColumn": 59,
                  "snippet": {
                    "text": "  .. cpp:function:: bool valid_iv_length(size_t iv_len) const\n\n     This function returns true if and only if *length* is a valid IV length for\n     the stream cipher. Some ciphers do not support IVs at all, and will return\n     false for any value except zero.\n\n  .. cpp:function:: size_t default_iv_length() const\n",
                    "rendered": {
                      "text": "  .. cpp:function:: bool valid_iv_length(size_t iv_len) const\n\n     This function returns true if and only if *length* is a valid IV length for\n     the stream cipher. Some ciphers do not support IVs at all, and will return\n     false for any value except zero.\n\n  .. cpp:function:: size_t default_iv_length() const\n",
                      "markdown": "`  .. cpp:function:: bool valid_iv_length(size_t iv_len) const\n\n     This function returns true if and only if *length* is a valid IV length for\n     the stream cipher. Some ciphers do not support IVs at all, and will return\n     false for any value except zero.\n\n  .. cpp:function:: size_t default_iv_length() const\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 49,
                  "endLine": 267,
                  "endColumn": 57,
                  "snippet": {
                    "text": "iteration count (this should be significantly larger than the size of the\nlongest passphrase that might reasonably be used; somewhere from 1024 to 65536\nwould probably be about right). Using both a reasonably sized salt and a large\niteration count is highly recommended to prevent password guessing attempts.\n\nAlgorithm specification name:\n``OpenPGP-S2K(<HashFunction>)``, e.g. ``OpenPGP-S2K(SHA-384)``\n",
                    "rendered": {
                      "text": "iteration count (this should be significantly larger than the size of the\nlongest passphrase that might reasonably be used; somewhere from 1024 to 65536\nwould probably be about right). Using both a reasonably sized salt and a large\niteration count is highly recommended to prevent password guessing attempts.\n\nAlgorithm specification name:\n``OpenPGP-S2K(<HashFunction>)``, e.g. ``OpenPGP-S2K(SHA-384)``\n",
                      "markdown": "`iteration count (this should be significantly larger than the size of the\nlongest passphrase that might reasonably be used; somewhere from 1024 to 65536\nwould probably be about right). Using both a reasonably sized salt and a large\niteration count is highly recommended to prevent password guessing attempts.\n\nAlgorithm specification name:\n``OpenPGP-S2K(<HashFunction>)``, e.g. ``OpenPGP-S2K(SHA-384)``\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 55,
                  "endLine": 234,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n.. versionadded:: 2.11.0\n\nBcrypt-PBKDF is a variant of the well known ``bcrypt`` password hashing\nfunction.  Like ``bcrypt`` it is based around using Blowfish for the key\nexpansion, which requires 4 KiB of fast random access memory, making hardware\nbased attacks more expensive. Unlike Argon2 or Scrypt, the memory usage is not\n",
                    "rendered": {
                      "text": "\n.. versionadded:: 2.11.0\n\nBcrypt-PBKDF is a variant of the well known ``bcrypt`` password hashing\nfunction.  Like ``bcrypt`` it is based around using Blowfish for the key\nexpansion, which requires 4 KiB of fast random access memory, making hardware\nbased attacks more expensive. Unlike Argon2 or Scrypt, the memory usage is not\n",
                      "markdown": "`\n.. versionadded:: 2.11.0\n\nBcrypt-PBKDF is a variant of the well known ``bcrypt`` password hashing\nfunction.  Like ``bcrypt`` it is based around using Blowfish for the key\nexpansion, which requires 4 KiB of fast random access memory, making hardware\nbased attacks more expensive. Unlike Argon2 or Scrypt, the memory usage is not\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 33,
                  "endLine": 219,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n.. versionadded:: 2.11.0\n\nArgon2 is the winner of the PHC (Password Hashing Competition) and\nprovides a tunable memory hard PBKDF. There are three minor variants\nof Argon2 - Argon2d, Argon2i, and Argon2id. All three are implemented.\n\n",
                    "rendered": {
                      "text": "\n.. versionadded:: 2.11.0\n\nArgon2 is the winner of the PHC (Password Hashing Competition) and\nprovides a tunable memory hard PBKDF. There are three minor variants\nof Argon2 - Argon2d, Argon2i, and Argon2id. All three are implemented.\n\n",
                      "markdown": "`\n.. versionadded:: 2.11.0\n\nArgon2 is the winner of the PHC (Password Hashing Competition) and\nprovides a tunable memory hard PBKDF. There are three minor variants\nof Argon2 - Argon2d, Argon2i, and Argon2id. All three are implemented.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 25,
                  "endLine": 175,
                  "endColumn": 33,
                  "snippet": {
                    "text": "PBKDF2\n^^^^^^^^^^^^\n\nPBKDF2 is the \"standard\" password derivation scheme, widely implemented in many\ndifferent libraries. It uses HMAC internally and requires choosing a hash\nfunction to use. (If in doubt use SHA-256 or SHA-512). It also requires choosing\nan iteration count, which makes brute force attacks more expensive. Use *at\n",
                    "rendered": {
                      "text": "PBKDF2\n^^^^^^^^^^^^\n\nPBKDF2 is the \"standard\" password derivation scheme, widely implemented in many\ndifferent libraries. It uses HMAC internally and requires choosing a hash\nfunction to use. (If in doubt use SHA-256 or SHA-512). It also requires choosing\nan iteration count, which makes brute force attacks more expensive. Use *at\n",
                      "markdown": "`PBKDF2\n^^^^^^^^^^^^\n\nPBKDF2 is the \"standard\" password derivation scheme, widely implemented in many\ndifferent libraries. It uses HMAC internally and requires choosing a hash\nfunction to use. (If in doubt use SHA-256 or SHA-512). It also requires choosing\nan iteration count, which makes brute force attacks more expensive. Use *at\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 37,
                  "endLine": 149,
                  "endColumn": 45,
                  "snippet": {
                    "text": "a real application might want to include a version number of their file format\nas associated data. See :ref:`aead` for more information.\n\n.. literalinclude:: /../src/examples/password_encryption.cpp\n   :language: cpp\n\nAvailable Schemes\n",
                    "rendered": {
                      "text": "a real application might want to include a version number of their file format\nas associated data. See :ref:`aead` for more information.\n\n.. literalinclude:: /../src/examples/password_encryption.cpp\n   :language: cpp\n\nAvailable Schemes\n",
                      "markdown": "`a real application might want to include a version number of their file format\nas associated data. See :ref:`aead` for more information.\n\n.. literalinclude:: /../src/examples/password_encryption.cpp\n   :language: cpp\n\nAvailable Schemes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 54,
                  "endLine": 144,
                  "endColumn": 62,
                  "snippet": {
                    "text": "   :language: cpp\n\nCombining a password based key derivation with an authenticated cipher yields an\napplication that can encrypt and decrypt data using a password. Note that this\nexample does not incorporate any \"associated data\" into the AEAD. For instance,\na real application might want to include a version number of their file format\nas associated data. See :ref:`aead` for more information.\n",
                    "rendered": {
                      "text": "   :language: cpp\n\nCombining a password based key derivation with an authenticated cipher yields an\napplication that can encrypt and decrypt data using a password. Note that this\nexample does not incorporate any \"associated data\" into the AEAD. For instance,\na real application might want to include a version number of their file format\nas associated data. See :ref:`aead` for more information.\n",
                      "markdown": "`   :language: cpp\n\nCombining a password based key derivation with an authenticated cipher yields an\napplication that can encrypt and decrypt data using a password. Note that this\nexample does not incorporate any \"associated data\" into the AEAD. For instance,\na real application might want to include a version number of their file format\nas associated data. See :ref:`aead` for more information.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 12,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": ".. literalinclude:: /../src/examples/pwdhash.cpp\n   :language: cpp\n\nCombining a password based key derivation with an authenticated cipher yields an\napplication that can encrypt and decrypt data using a password. Note that this\nexample does not incorporate any \"associated data\" into the AEAD. For instance,\na real application might want to include a version number of their file format\n",
                    "rendered": {
                      "text": ".. literalinclude:: /../src/examples/pwdhash.cpp\n   :language: cpp\n\nCombining a password based key derivation with an authenticated cipher yields an\napplication that can encrypt and decrypt data using a password. Note that this\nexample does not incorporate any \"associated data\" into the AEAD. For instance,\na real application might want to include a version number of their file format\n",
                      "markdown": "`.. literalinclude:: /../src/examples/pwdhash.cpp\n   :language: cpp\n\nCombining a password based key derivation with an authenticated cipher yields an\napplication that can encrypt and decrypt data using a password. Note that this\nexample does not incorporate any \"associated data\" into the AEAD. For instance,\na real application might want to include a version number of their file format\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 49,
                  "endLine": 138,
                  "endColumn": 57,
                  "snippet": {
                    "text": "Code Examples\n-------------\n\nAn example demonstrating using the API to hash a password using Argon2i:\n\n.. literalinclude:: /../src/examples/pwdhash.cpp\n   :language: cpp\n",
                    "rendered": {
                      "text": "Code Examples\n-------------\n\nAn example demonstrating using the API to hash a password using Argon2i:\n\n.. literalinclude:: /../src/examples/pwdhash.cpp\n   :language: cpp\n",
                      "markdown": "`Code Examples\n-------------\n\nAn example demonstrating using the API to hash a password using Argon2i:\n\n.. literalinclude:: /../src/examples/pwdhash.cpp\n   :language: cpp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 15,
                  "endLine": 125,
                  "endColumn": 23,
                  "snippet": {
                    "text": "   .. cpp:function:: std::unique_ptr<PasswordHash> from_params( \\\n         size_t i1, size_t i2 = 0, size_t i3 = 0) const\n\n      Create a password hash using some scheme specific format. Parameters are as follows:\n\n      * For PBKDF2, PGP-S2K, and Bcrypt-PBKDF, ``i1`` is iterations\n      * Scrypt uses ``i1`` == ``N``, ``i2`` == ``r``, and ``i3`` == ``p``\n",
                    "rendered": {
                      "text": "   .. cpp:function:: std::unique_ptr<PasswordHash> from_params( \\\n         size_t i1, size_t i2 = 0, size_t i3 = 0) const\n\n      Create a password hash using some scheme specific format. Parameters are as follows:\n\n      * For PBKDF2, PGP-S2K, and Bcrypt-PBKDF, ``i1`` is iterations\n      * Scrypt uses ``i1`` == ``N``, ``i2`` == ``r``, and ``i3`` == ``p``\n",
                      "markdown": "`   .. cpp:function:: std::unique_ptr<PasswordHash> from_params( \\\n         size_t i1, size_t i2 = 0, size_t i3 = 0) const\n\n      Create a password hash using some scheme specific format. Parameters are as follows:\n\n      * For PBKDF2, PGP-S2K, and Bcrypt-PBKDF, ``i1`` is iterations\n      * Scrypt uses ``i1`` == ``N``, ``i2`` == ``r``, and ``i3`` == ``p``\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 37,
                  "endLine": 122,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      hit the target size. The length of time the tuning loop runs can be\n      controlled using the *tuning_msec* parameter.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> from_params( \\\n         size_t i1, size_t i2 = 0, size_t i3 = 0) const\n\n      Create a password hash using some scheme specific format. Parameters are as follows:\n",
                    "rendered": {
                      "text": "      hit the target size. The length of time the tuning loop runs can be\n      controlled using the *tuning_msec* parameter.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> from_params( \\\n         size_t i1, size_t i2 = 0, size_t i3 = 0) const\n\n      Create a password hash using some scheme specific format. Parameters are as follows:\n",
                      "markdown": "`      hit the target size. The length of time the tuning loop runs can be\n      controlled using the *tuning_msec* parameter.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> from_params( \\\n         size_t i1, size_t i2 = 0, size_t i3 = 0) const\n\n      Create a password hash using some scheme specific format. Parameters are as follows:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 15,
                  "endLine": 110,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                     size_t max_memory_usage_mb = 0, \\\n                     std::chrono::milliseconds tuning_msec = std::chrono::milliseconds(10)) const\n\n      Return a password hash instance tuned to run for approximately ``msec``\n      milliseconds when producing an output of length ``output_len``. (Accuracy\n      may vary, use the command line utility ``botan pbkdf_tune`` to check.)\n\n",
                    "rendered": {
                      "text": "                     size_t max_memory_usage_mb = 0, \\\n                     std::chrono::milliseconds tuning_msec = std::chrono::milliseconds(10)) const\n\n      Return a password hash instance tuned to run for approximately ``msec``\n      milliseconds when producing an output of length ``output_len``. (Accuracy\n      may vary, use the command line utility ``botan pbkdf_tune`` to check.)\n\n",
                      "markdown": "`                     size_t max_memory_usage_mb = 0, \\\n                     std::chrono::milliseconds tuning_msec = std::chrono::milliseconds(10)) const\n\n      Return a password hash instance tuned to run for approximately ``msec``\n      milliseconds when producing an output of length ``output_len``. (Accuracy\n      may vary, use the command line utility ``botan pbkdf_tune`` to check.)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 37,
                  "endLine": 104,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      Create a default instance of the password hashing algorithm. Be warned the\n      value returned here may change from release to release.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> tune( \\\n                     size_t output_len, \\\n                     std::chrono::milliseconds msec, \\\n                     size_t max_memory_usage_mb = 0, \\\n",
                    "rendered": {
                      "text": "      Create a default instance of the password hashing algorithm. Be warned the\n      value returned here may change from release to release.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> tune( \\\n                     size_t output_len, \\\n                     std::chrono::milliseconds msec, \\\n                     size_t max_memory_usage_mb = 0, \\\n",
                      "markdown": "`      Create a default instance of the password hashing algorithm. Be warned the\n      value returned here may change from release to release.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> tune( \\\n                     size_t output_len, \\\n                     std::chrono::milliseconds msec, \\\n                     size_t max_memory_usage_mb = 0, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 39,
                  "endLine": 101,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n   .. cpp:function:: std::unique_ptr<PasswordHash> default_params() const\n\n      Create a default instance of the password hashing algorithm. Be warned the\n      value returned here may change from release to release.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> tune( \\\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: std::unique_ptr<PasswordHash> default_params() const\n\n      Create a default instance of the password hashing algorithm. Be warned the\n      value returned here may change from release to release.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> tune( \\\n",
                      "markdown": "`\n   .. cpp:function:: std::unique_ptr<PasswordHash> default_params() const\n\n      Create a default instance of the password hashing algorithm. Be warned the\n      value returned here may change from release to release.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> tune( \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 37,
                  "endLine": 99,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      For example \"PBKDF2(SHA-256)\", \"Scrypt\", \"Argon2id\". Returns null if the\n      algorithm is not available.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> default_params() const\n\n      Create a default instance of the password hashing algorithm. Be warned the\n      value returned here may change from release to release.\n",
                    "rendered": {
                      "text": "      For example \"PBKDF2(SHA-256)\", \"Scrypt\", \"Argon2id\". Returns null if the\n      algorithm is not available.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> default_params() const\n\n      Create a default instance of the password hashing algorithm. Be warned the\n      value returned here may change from release to release.\n",
                      "markdown": "`      For example \"PBKDF2(SHA-256)\", \"Scrypt\", \"Argon2id\". Returns null if the\n      algorithm is not available.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> default_params() const\n\n      Create a default instance of the password hashing algorithm. Be warned the\n      value returned here may change from release to release.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 44,
                  "endLine": 94,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n.. cpp:class:: PasswordHashFamily\n\n   .. cpp:function:: static std::unique_ptr<PasswordHashFamily> create(const std::string& what)\n\n      For example \"PBKDF2(SHA-256)\", \"Scrypt\", \"Argon2id\". Returns null if the\n      algorithm is not available.\n",
                    "rendered": {
                      "text": "\n.. cpp:class:: PasswordHashFamily\n\n   .. cpp:function:: static std::unique_ptr<PasswordHashFamily> create(const std::string& what)\n\n      For example \"PBKDF2(SHA-256)\", \"Scrypt\", \"Argon2id\". Returns null if the\n      algorithm is not available.\n",
                      "markdown": "`\n.. cpp:class:: PasswordHashFamily\n\n   .. cpp:function:: static std::unique_ptr<PasswordHashFamily> create(const std::string& what)\n\n      For example \"PBKDF2(SHA-256)\", \"Scrypt\", \"Argon2id\". Returns null if the\n      algorithm is not available.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 15,
                  "endLine": 92,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n\n.. cpp:class:: PasswordHashFamily\n\n   .. cpp:function:: static std::unique_ptr<PasswordHashFamily> create(const std::string& what)\n\n",
                    "rendered": {
                      "text": "\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n\n.. cpp:class:: PasswordHashFamily\n\n   .. cpp:function:: static std::unique_ptr<PasswordHashFamily> create(const std::string& what)\n\n",
                      "markdown": "`\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n\n.. cpp:class:: PasswordHashFamily\n\n   .. cpp:function:: static std::unique_ptr<PasswordHashFamily> create(const std::string& what)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 59,
                  "endLine": 90,
                  "endColumn": 67,
                  "snippet": {
                    "text": "      Returns true if this password hash supports supplying associated data\n      to :cpp:func:`PasswordHash::hash`.\n\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n\n.. cpp:class:: PasswordHashFamily\n\n",
                    "rendered": {
                      "text": "      Returns true if this password hash supports supplying associated data\n      to :cpp:func:`PasswordHash::hash`.\n\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n\n.. cpp:class:: PasswordHashFamily\n\n",
                      "markdown": "`      Returns true if this password hash supports supplying associated data\n      to :cpp:func:`PasswordHash::hash`.\n\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n\n.. cpp:class:: PasswordHashFamily\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 6,
                  "endLine": 90,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      Returns true if this password hash supports supplying associated data\n      to :cpp:func:`PasswordHash::hash`.\n\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n\n.. cpp:class:: PasswordHashFamily\n\n",
                    "rendered": {
                      "text": "      Returns true if this password hash supports supplying associated data\n      to :cpp:func:`PasswordHash::hash`.\n\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n\n.. cpp:class:: PasswordHashFamily\n\n",
                      "markdown": "`      Returns true if this password hash supports supplying associated data\n      to :cpp:func:`PasswordHash::hash`.\n\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n\n.. cpp:class:: PasswordHashFamily\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 20,
                  "endLine": 88,
                  "endColumn": 28,
                  "snippet": {
                    "text": "   .. cpp:function:: bool supports_associated_data() const\n\n      Returns true if this password hash supports supplying associated data\n      to :cpp:func:`PasswordHash::hash`.\n\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n\n",
                    "rendered": {
                      "text": "   .. cpp:function:: bool supports_associated_data() const\n\n      Returns true if this password hash supports supplying associated data\n      to :cpp:func:`PasswordHash::hash`.\n\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n\n",
                      "markdown": "`   .. cpp:function:: bool supports_associated_data() const\n\n      Returns true if this password hash supports supplying associated data\n      to :cpp:func:`PasswordHash::hash`.\n\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 27,
                  "endLine": 87,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n   .. cpp:function:: bool supports_associated_data() const\n\n      Returns true if this password hash supports supplying associated data\n      to :cpp:func:`PasswordHash::hash`.\n\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: bool supports_associated_data() const\n\n      Returns true if this password hash supports supplying associated data\n      to :cpp:func:`PasswordHash::hash`.\n\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n",
                      "markdown": "`\n   .. cpp:function:: bool supports_associated_data() const\n\n      Returns true if this password hash supports supplying associated data\n      to :cpp:func:`PasswordHash::hash`.\n\nThe ``PasswordHashFamily`` creates specific instances of ``PasswordHash``:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 20,
                  "endLine": 83,
                  "endColumn": 28,
                  "snippet": {
                    "text": "   .. cpp:function:: bool supports_keyed_operation() const\n\n      Returns true if this password hash supports supplying a secret key\n      to :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: bool supports_associated_data() const\n\n",
                    "rendered": {
                      "text": "   .. cpp:function:: bool supports_keyed_operation() const\n\n      Returns true if this password hash supports supplying a secret key\n      to :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: bool supports_associated_data() const\n\n",
                      "markdown": "`   .. cpp:function:: bool supports_keyed_operation() const\n\n      Returns true if this password hash supports supplying a secret key\n      to :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: bool supports_associated_data() const\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 27,
                  "endLine": 82,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n   .. cpp:function:: bool supports_keyed_operation() const\n\n      Returns true if this password hash supports supplying a secret key\n      to :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: bool supports_associated_data() const\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: bool supports_keyed_operation() const\n\n      Returns true if this password hash supports supplying a secret key\n      to :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: bool supports_associated_data() const\n",
                      "markdown": "`\n   .. cpp:function:: bool supports_keyed_operation() const\n\n      Returns true if this password hash supports supplying a secret key\n      to :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: bool supports_associated_data() const\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 66,
                  "endLine": 53,
                  "endColumn": 74,
                  "snippet": {
                    "text": "                     const uint8_t ad[], size_t ad_len, \\\n                     const uint8_t key[], size_t key_len) const\n\n       Same functionality as the 5 argument variant of :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: std::string to_string() const\n\n",
                    "rendered": {
                      "text": "                     const uint8_t ad[], size_t ad_len, \\\n                     const uint8_t key[], size_t key_len) const\n\n       Same functionality as the 5 argument variant of :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: std::string to_string() const\n\n",
                      "markdown": "`                     const uint8_t ad[], size_t ad_len, \\\n                     const uint8_t key[], size_t key_len) const\n\n       Same functionality as the 5 argument variant of :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: std::string to_string() const\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 56,
                  "endLine": 48,
                  "endColumn": 64,
                  "snippet": {
                    "text": "      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len, \\\n                     const uint8_t ad[], size_t ad_len, \\\n                     const uint8_t key[], size_t key_len) const\n",
                    "rendered": {
                      "text": "      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len, \\\n                     const uint8_t ad[], size_t ad_len, \\\n                     const uint8_t key[], size_t key_len) const\n",
                      "markdown": "`      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len, \\\n                     const uint8_t ad[], size_t ad_len, \\\n                     const uint8_t key[], size_t key_len) const\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 33,
                  "endLine": 48,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len, \\\n                     const uint8_t ad[], size_t ad_len, \\\n                     const uint8_t key[], size_t key_len) const\n",
                    "rendered": {
                      "text": "      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len, \\\n                     const uint8_t ad[], size_t ad_len, \\\n                     const uint8_t key[], size_t key_len) const\n",
                      "markdown": "`      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len, \\\n                     const uint8_t ad[], size_t ad_len, \\\n                     const uint8_t key[], size_t key_len) const\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 65,
                  "endLine": 45,
                  "endColumn": 73,
                  "snippet": {
                    "text": "                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len) const\n\n      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n",
                    "rendered": {
                      "text": "                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len) const\n\n      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n",
                      "markdown": "`                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len) const\n\n      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 56,
                  "endLine": 42,
                  "endColumn": 64,
                  "snippet": {
                    "text": "      to be empty. Currently non-empty AD/key is only supported with Argon2.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len) const\n\n      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n",
                    "rendered": {
                      "text": "      to be empty. Currently non-empty AD/key is only supported with Argon2.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len) const\n\n      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n",
                      "markdown": "`      to be empty. Currently non-empty AD/key is only supported with Argon2.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len) const\n\n      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 33,
                  "endLine": 42,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      to be empty. Currently non-empty AD/key is only supported with Argon2.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len) const\n\n      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n",
                    "rendered": {
                      "text": "      to be empty. Currently non-empty AD/key is only supported with Argon2.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len) const\n\n      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n",
                      "markdown": "`      to be empty. Currently non-empty AD/key is only supported with Argon2.\n\n   .. cpp:function:: void derive_key(uint8_t out[], size_t out_len, \\\n                     const char* password, const size_t password_len, \\\n                     const uint8_t salt[], size_t salt_len) const\n\n      Same functionality as the 3 argument variant of :cpp:func:`PasswordHash::hash`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                               std::span<const uint8> ad, \\\n                               std::span<const uint8> key)\n\n      Derive a key from the specified *password*, *salt*, associated data (*ad*), and\n      secret *key*, placing it into *out*. The *ad* and *key* are both allowed\n      to be empty. Currently non-empty AD/key is only supported with Argon2.\n\n",
                    "rendered": {
                      "text": "                               std::span<const uint8> ad, \\\n                               std::span<const uint8> key)\n\n      Derive a key from the specified *password*, *salt*, associated data (*ad*), and\n      secret *key*, placing it into *out*. The *ad* and *key* are both allowed\n      to be empty. Currently non-empty AD/key is only supported with Argon2.\n\n",
                      "markdown": "`                               std::span<const uint8> ad, \\\n                               std::span<const uint8> key)\n\n      Derive a key from the specified *password*, *salt*, associated data (*ad*), and\n      secret *key*, placing it into *out*. The *ad* and *key* are both allowed\n      to be empty. Currently non-empty AD/key is only supported with Argon2.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 48,
                  "endLine": 32,
                  "endColumn": 56,
                  "snippet": {
                    "text": "      Derive a key from the specified *password* and *salt*, placing it into *out*.\n\n   .. cpp:function:: void hash(std::span<uint8_t> out, \\\n                               std::string_view password, \\\n                               std::span<const uint8> salt, \\\n                               std::span<const uint8> ad, \\\n                               std::span<const uint8> key)\n",
                    "rendered": {
                      "text": "      Derive a key from the specified *password* and *salt*, placing it into *out*.\n\n   .. cpp:function:: void hash(std::span<uint8_t> out, \\\n                               std::string_view password, \\\n                               std::span<const uint8> salt, \\\n                               std::span<const uint8> ad, \\\n                               std::span<const uint8> key)\n",
                      "markdown": "`      Derive a key from the specified *password* and *salt*, placing it into *out*.\n\n   .. cpp:function:: void hash(std::span<uint8_t> out, \\\n                               std::string_view password, \\\n                               std::span<const uint8> salt, \\\n                               std::span<const uint8> ad, \\\n                               std::span<const uint8> key)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 39,
                  "endLine": 29,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                               std::string_view password, \\\n                               std::span<uint8> salt)\n\n      Derive a key from the specified *password* and *salt*, placing it into *out*.\n\n   .. cpp:function:: void hash(std::span<uint8_t> out, \\\n                               std::string_view password, \\\n",
                    "rendered": {
                      "text": "                               std::string_view password, \\\n                               std::span<uint8> salt)\n\n      Derive a key from the specified *password* and *salt*, placing it into *out*.\n\n   .. cpp:function:: void hash(std::span<uint8_t> out, \\\n                               std::string_view password, \\\n",
                      "markdown": "`                               std::string_view password, \\\n                               std::span<uint8> salt)\n\n      Derive a key from the specified *password* and *salt*, placing it into *out*.\n\n   .. cpp:function:: void hash(std::span<uint8_t> out, \\\n                               std::string_view password, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 48,
                  "endLine": 26,
                  "endColumn": 56,
                  "snippet": {
                    "text": ".. cpp:class:: PasswordHash\n\n   .. cpp:function:: void hash(std::span<uint8_t> out, \\\n                               std::string_view password, \\\n                               std::span<uint8> salt)\n\n      Derive a key from the specified *password* and *salt*, placing it into *out*.\n",
                    "rendered": {
                      "text": ".. cpp:class:: PasswordHash\n\n   .. cpp:function:: void hash(std::span<uint8_t> out, \\\n                               std::string_view password, \\\n                               std::span<uint8> salt)\n\n      Derive a key from the specified *password* and *salt*, placing it into *out*.\n",
                      "markdown": "`.. cpp:class:: PasswordHash\n\n   .. cpp:function:: void hash(std::span<uint8_t> out, \\\n                               std::string_view password, \\\n                               std::span<uint8> salt)\n\n      Derive a key from the specified *password* and *salt*, placing it into *out*.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 15,
                  "endLine": 23,
                  "endColumn": 23,
                  "snippet": {
                    "text": "specified with all parameters (say \"Scrypt\" with ``N`` = 8192, ``r`` = 64, and\n``p`` = 8) and which can be used to derive keys.\n\n.. cpp:class:: PasswordHash\n\n   .. cpp:function:: void hash(std::span<uint8_t> out, \\\n                               std::string_view password, \\\n",
                    "rendered": {
                      "text": "specified with all parameters (say \"Scrypt\" with ``N`` = 8192, ``r`` = 64, and\n``p`` = 8) and which can be used to derive keys.\n\n.. cpp:class:: PasswordHash\n\n   .. cpp:function:: void hash(std::span<uint8_t> out, \\\n                               std::string_view password, \\\n",
                      "markdown": "`specified with all parameters (say \"Scrypt\" with ``N`` = 8192, ``r`` = 64, and\n``p`` = 8) and which can be used to derive keys.\n\n.. cpp:class:: PasswordHash\n\n   .. cpp:function:: void hash(std::span<uint8_t> out, \\\n                               std::string_view password, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 2,
                  "endLine": 19,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nThis API, declared in ``pwdhash.h``, has two classes, ``PasswordHashFamily``\nrepresenting the general algorithm, such as \"PBKDF2(SHA-256)\", or \"Scrypt\", and\n``PasswordHash`` representing a specific instance of the problem which is fully\nspecified with all parameters (say \"Scrypt\" with ``N`` = 8192, ``r`` = 64, and\n``p`` = 8) and which can be used to derive keys.\n\n",
                    "rendered": {
                      "text": "\nThis API, declared in ``pwdhash.h``, has two classes, ``PasswordHashFamily``\nrepresenting the general algorithm, such as \"PBKDF2(SHA-256)\", or \"Scrypt\", and\n``PasswordHash`` representing a specific instance of the problem which is fully\nspecified with all parameters (say \"Scrypt\" with ``N`` = 8192, ``r`` = 64, and\n``p`` = 8) and which can be used to derive keys.\n\n",
                      "markdown": "`\nThis API, declared in ``pwdhash.h``, has two classes, ``PasswordHashFamily``\nrepresenting the general algorithm, such as \"PBKDF2(SHA-256)\", or \"Scrypt\", and\n``PasswordHash`` representing a specific instance of the problem which is fully\nspecified with all parameters (say \"Scrypt\" with ``N`` = 8192, ``r`` = 64, and\n``p`` = 8) and which can be used to derive keys.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 56,
                  "endLine": 17,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n.. versionadded:: 2.8.0\n\nThis API, declared in ``pwdhash.h``, has two classes, ``PasswordHashFamily``\nrepresenting the general algorithm, such as \"PBKDF2(SHA-256)\", or \"Scrypt\", and\n``PasswordHash`` representing a specific instance of the problem which is fully\nspecified with all parameters (say \"Scrypt\" with ``N`` = 8192, ``r`` = 64, and\n",
                    "rendered": {
                      "text": "\n.. versionadded:: 2.8.0\n\nThis API, declared in ``pwdhash.h``, has two classes, ``PasswordHashFamily``\nrepresenting the general algorithm, such as \"PBKDF2(SHA-256)\", or \"Scrypt\", and\n``PasswordHash`` representing a specific instance of the problem which is fully\nspecified with all parameters (say \"Scrypt\" with ``N`` = 8192, ``r`` = 64, and\n",
                      "markdown": "`\n.. versionadded:: 2.8.0\n\nThis API, declared in ``pwdhash.h``, has two classes, ``PasswordHashFamily``\nrepresenting the general algorithm, such as \"PBKDF2(SHA-256)\", or \"Scrypt\", and\n``PasswordHash`` representing a specific instance of the problem which is fully\nspecified with all parameters (say \"Scrypt\" with ``N`` = 8192, ``r`` = 64, and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "endColumn": 8,
                  "snippet": {
                    "text": "reduce the speed of brute force search, thus they are parameterized in some\nway which allows their required computation to be tuned.\n\nPasswordHash\n--------------\n\n.. versionadded:: 2.8.0\n",
                    "rendered": {
                      "text": "reduce the speed of brute force search, thus they are parameterized in some\nway which allows their required computation to be tuned.\n\nPasswordHash\n--------------\n\n.. versionadded:: 2.8.0\n",
                      "markdown": "`reduce the speed of brute force search, thus they are parameterized in some\nway which allows their required computation to be tuned.\n\nPasswordHash\n--------------\n\n.. versionadded:: 2.8.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 44,
                  "endLine": 7,
                  "endColumn": 52,
                  "snippet": {
                    "text": "Password Based Key Derivation\n========================================\n\nOften one needs to convert a human readable password into a cryptographic\nkey. It is useful to slow down the computation of these computations in order to\nreduce the speed of brute force search, thus they are parameterized in some\nway which allows their required computation to be tuned.\n",
                    "rendered": {
                      "text": "Password Based Key Derivation\n========================================\n\nOften one needs to convert a human readable password into a cryptographic\nkey. It is useful to slow down the computation of these computations in order to\nreduce the speed of brute force search, thus they are parameterized in some\nway which allows their required computation to be tuned.\n",
                      "markdown": "`Password Based Key Derivation\n========================================\n\nOften one needs to convert a human readable password into a cryptographic\nkey. It is useful to slow down the computation of these computations in order to\nreduce the speed of brute force search, thus they are parameterized in some\nway which allows their required computation to be tuned.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n.. _pbkdf:\n\nPassword Based Key Derivation\n========================================\n\nOften one needs to convert a human readable password into a cryptographic\n",
                    "rendered": {
                      "text": "\n.. _pbkdf:\n\nPassword Based Key Derivation\n========================================\n\nOften one needs to convert a human readable password into a cryptographic\n",
                      "markdown": "`\n.. _pbkdf:\n\nPassword Based Key Derivation\n========================================\n\nOften one needs to convert a human readable password into a cryptographic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 47,
                  "endLine": 322,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n   Use an iteration count of at least 10000. The salt should be\n   randomly chosen by a good random number generator (see\n   :ref:`random_number_generators` for how), or at the very least\n   unique to this usage of the passphrase.\n\n   If you call this function again with the same parameters, you will\n",
                    "rendered": {
                      "text": "\n   Use an iteration count of at least 10000. The salt should be\n   randomly chosen by a good random number generator (see\n   :ref:`random_number_generators` for how), or at the very least\n   unique to this usage of the passphrase.\n\n   If you call this function again with the same parameters, you will\n",
                      "markdown": "`\n   Use an iteration count of at least 10000. The salt should be\n   randomly chosen by a good random number generator (see\n   :ref:`random_number_generators` for how), or at the very least\n   unique to this usage of the passphrase.\n\n   If you call this function again with the same parameters, you will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 28,
                  "endLine": 320,
                  "endColumn": 32,
                  "snippet": {
                    "text": "   *salt_len* bytes) using an algorithm-specific interpretation of\n   *iterations*, producing a key of length *output_len*.\n\n   Use an iteration count of at least 10000. The salt should be\n   randomly chosen by a good random number generator (see\n   :ref:`random_number_generators` for how), or at the very least\n   unique to this usage of the passphrase.\n",
                    "rendered": {
                      "text": "   *salt_len* bytes) using an algorithm-specific interpretation of\n   *iterations*, producing a key of length *output_len*.\n\n   Use an iteration count of at least 10000. The salt should be\n   randomly chosen by a good random number generator (see\n   :ref:`random_number_generators` for how), or at the very least\n   unique to this usage of the passphrase.\n",
                      "markdown": "`   *salt_len* bytes) using an algorithm-specific interpretation of\n   *iterations*, producing a key of length *output_len*.\n\n   Use an iteration count of at least 10000. The salt should be\n   randomly chosen by a good random number generator (see\n   :ref:`random_number_generators` for how), or at the very least\n   unique to this usage of the passphrase.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 60,
                  "endLine": 262,
                  "endColumn": 64,
                  "snippet": {
                    "text": "the passphrase.\n\nTo get what OpenPGP calls \"Simple S2K\", set iterations to 0, and do not specify\na salt. To get \"Salted S2K\", again leave the iteration count at 0, but give an\n8-byte salt. \"Salted and Iterated S2K\" requires an 8-byte salt and some\niteration count (this should be significantly larger than the size of the\nlongest passphrase that might reasonably be used; somewhere from 1024 to 65536\n",
                    "rendered": {
                      "text": "the passphrase.\n\nTo get what OpenPGP calls \"Simple S2K\", set iterations to 0, and do not specify\na salt. To get \"Salted S2K\", again leave the iteration count at 0, but give an\n8-byte salt. \"Salted and Iterated S2K\" requires an 8-byte salt and some\niteration count (this should be significantly larger than the size of the\nlongest passphrase that might reasonably be used; somewhere from 1024 to 65536\n",
                      "markdown": "`the passphrase.\n\nTo get what OpenPGP calls \"Simple S2K\", set iterations to 0, and do not specify\na salt. To get \"Salted S2K\", again leave the iteration count at 0, but give an\n8-byte salt. \"Salted and Iterated S2K\" requires an 8-byte salt and some\niteration count (this should be significantly larger than the size of the\nlongest passphrase that might reasonably be used; somewhere from 1024 to 65536\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 46,
                  "endLine": 257,
                  "endColumn": 50,
                  "snippet": {
                    "text": "here. For one thing, it uses the iteration count in a strange manner; instead of\nspecifying how many times to iterate the hash, it tells how many *bytes* should\nbe hashed in total (including the salt). So the exact iteration count will\ndepend on the size of the salt (which is fixed at 8 bytes by the OpenPGP\nstandard, though the implementation will allow any salt size) and the size of\nthe passphrase.\n\n",
                    "rendered": {
                      "text": "here. For one thing, it uses the iteration count in a strange manner; instead of\nspecifying how many times to iterate the hash, it tells how many *bytes* should\nbe hashed in total (including the salt). So the exact iteration count will\ndepend on the size of the salt (which is fixed at 8 bytes by the OpenPGP\nstandard, though the implementation will allow any salt size) and the size of\nthe passphrase.\n\n",
                      "markdown": "`here. For one thing, it uses the iteration count in a strange manner; instead of\nspecifying how many times to iterate the hash, it tells how many *bytes* should\nbe hashed in total (including the salt). So the exact iteration count will\ndepend on the size of the salt (which is fixed at 8 bytes by the OpenPGP\nstandard, though the implementation will allow any salt size) and the size of\nthe passphrase.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 11,
                  "endLine": 200,
                  "endColumn": 20,
                  "snippet": {
                    "text": "ASICs substantially more expensive.\n\nScrypt has three parameters, usually termed ``N``, ``r``, and ``p``.  ``N`` is\nthe primary control of the workfactor, and must be a power of 2. For interactive\nlogins use 32768, for protection of secret keys or backups use 1048576.\n\nThe ``r`` parameter controls how 'wide' the internal hashing operation is. It\n",
                    "rendered": {
                      "text": "ASICs substantially more expensive.\n\nScrypt has three parameters, usually termed ``N``, ``r``, and ``p``.  ``N`` is\nthe primary control of the workfactor, and must be a power of 2. For interactive\nlogins use 32768, for protection of secret keys or backups use 1048576.\n\nThe ``r`` parameter controls how 'wide' the internal hashing operation is. It\n",
                      "markdown": "`ASICs substantially more expensive.\n\nScrypt has three parameters, usually termed ``N``, ``r``, and ``p``.  ``N`` is\nthe primary control of the workfactor, and must be a power of 2. For interactive\nlogins use 32768, for protection of secret keys or backups use 1048576.\n\nThe ``r`` parameter controls how 'wide' the internal hashing operation is. It\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 65,
                  "endLine": 158,
                  "endColumn": 69,
                  "snippet": {
                    "text": "General Recommendations\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you need wide interoperability use PBKDF2 with HMAC-SHA256 and at least 50K\niterations. If you don't, use Argon2id with p=1, t=3 and M as large as you\ncan reasonably set (say 1 gigabyte).\n\n",
                    "rendered": {
                      "text": "General Recommendations\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you need wide interoperability use PBKDF2 with HMAC-SHA256 and at least 50K\niterations. If you don't, use Argon2id with p=1, t=3 and M as large as you\ncan reasonably set (say 1 gigabyte).\n\n",
                      "markdown": "`General Recommendations\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you need wide interoperability use PBKDF2 with HMAC-SHA256 and at least 50K\niterations. If you don't, use Argon2id with p=1, t=3 and M as large as you\ncan reasonably set (say 1 gigabyte).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 44,
                  "endLine": 114,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      milliseconds when producing an output of length ``output_len``. (Accuracy\n      may vary, use the command line utility ``botan pbkdf_tune`` to check.)\n\n      The parameters will be selected to use at most *max_memory_usage_mb* megabytes\n      of memory, or if left as zero any size is allowed.\n\n      This function works by runing a short tuning loop to estimate the\n",
                    "rendered": {
                      "text": "      milliseconds when producing an output of length ``output_len``. (Accuracy\n      may vary, use the command line utility ``botan pbkdf_tune`` to check.)\n\n      The parameters will be selected to use at most *max_memory_usage_mb* megabytes\n      of memory, or if left as zero any size is allowed.\n\n      This function works by runing a short tuning loop to estimate the\n",
                      "markdown": "`      milliseconds when producing an output of length ``output_len``. (Accuracy\n      may vary, use the command line utility ``botan pbkdf_tune`` to check.)\n\n      The parameters will be selected to use at most *max_memory_usage_mb* megabytes\n      of memory, or if left as zero any size is allowed.\n\n      This function works by runing a short tuning loop to estimate the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pbkdf.rst"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 40,
                  "endLine": 119,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n      This function works by runing a short tuning loop to estimate the\n      performance of the algorithm, then scaling the parameters appropriately to\n      hit the target size. The length of time the tuning loop runs can be\n      controlled using the *tuning_msec* parameter.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> from_params( \\\n",
                    "rendered": {
                      "text": "\n      This function works by runing a short tuning loop to estimate the\n      performance of the algorithm, then scaling the parameters appropriately to\n      hit the target size. The length of time the tuning loop runs can be\n      controlled using the *tuning_msec* parameter.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> from_params( \\\n",
                      "markdown": "`\n      This function works by runing a short tuning loop to estimate the\n      performance of the algorithm, then scaling the parameters appropriately to\n      hit the target size. The length of time the tuning loop runs can be\n      controlled using the *tuning_msec* parameter.\n\n   .. cpp:function:: std::unique_ptr<PasswordHash> from_params( \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/cipher_modes.rst"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 68,
                  "endLine": 316,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n  .. cpp:function:: size_t final_minimum_size() const\n\n       The AEAD interface requires :cpp:func:`finish` be called with at least\n       this many bytes (which may be zero, or greater than\n       :cpp:func:`update_granularity`)\n\n",
                    "rendered": {
                      "text": "\n  .. cpp:function:: size_t final_minimum_size() const\n\n       The AEAD interface requires :cpp:func:`finish` be called with at least\n       this many bytes (which may be zero, or greater than\n       :cpp:func:`update_granularity`)\n\n",
                      "markdown": "`\n  .. cpp:function:: size_t final_minimum_size() const\n\n       The AEAD interface requires :cpp:func:`finish` be called with at least\n       this many bytes (which may be zero, or greater than\n       :cpp:func:`update_granularity`)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/cipher_modes.rst"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 70,
                  "endLine": 298,
                  "snippet": {
                    "text": "          (aka Integrity_Failure, which was the name for this exception in\n          versions before 2.10, a typedef is included for compatability).\n\n          If this occurs, all plaintext previously output via calls to update\n          must be destroyed and not used in any way that an attacker could\n          observe the effects of. This could be anything from echoing the\n          plaintext back (perhaps in an error message), or by making an external\n          RPC whose destination or contents depend on the plaintext. The only\n",
                    "rendered": {
                      "text": "          (aka Integrity_Failure, which was the name for this exception in\n          versions before 2.10, a typedef is included for compatability).\n\n          If this occurs, all plaintext previously output via calls to update\n          must be destroyed and not used in any way that an attacker could\n          observe the effects of. This could be anything from echoing the\n          plaintext back (perhaps in an error message), or by making an external\n          RPC whose destination or contents depend on the plaintext. The only\n",
                      "markdown": "`          (aka Integrity_Failure, which was the name for this exception in\n          versions before 2.10, a typedef is included for compatability).\n\n          If this occurs, all plaintext previously output via calls to update\n          must be destroyed and not used in any way that an attacker could\n          observe the effects of. This could be anything from echoing the\n          plaintext back (perhaps in an error message), or by making an external\n          RPC whose destination or contents depend on the plaintext. The only\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/cipher_modes.rst"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 19,
                  "endLine": 288,
                  "endColumn": 27,
                  "snippet": {
                    "text": "       :cpp:func:`final_minimum_size` bytes.\n\n       Note that if you have the entire message in hand, calling finish without\n       ever calling update is both efficient and convenient.\n\n       .. note::\n\n",
                    "rendered": {
                      "text": "       :cpp:func:`final_minimum_size` bytes.\n\n       Note that if you have the entire message in hand, calling finish without\n       ever calling update is both efficient and convenient.\n\n       .. note::\n\n",
                      "markdown": "`       :cpp:func:`final_minimum_size` bytes.\n\n       Note that if you have the entire message in hand, calling finish without\n       ever calling update is both efficient and convenient.\n\n       .. note::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/cipher_modes.rst"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 67,
                  "endLine": 284,
                  "endColumn": 71,
                  "snippet": {
                    "text": "  .. cpp:function:: void finish(secure_vector<uint8_t>& buffer, size_t offset = 0)\n\n       Complete processing a message with a final input of *buffer*, which is\n       treated the same as with :cpp:func:`update`. It must contain at least\n       :cpp:func:`final_minimum_size` bytes.\n\n       Note that if you have the entire message in hand, calling finish without\n",
                    "rendered": {
                      "text": "  .. cpp:function:: void finish(secure_vector<uint8_t>& buffer, size_t offset = 0)\n\n       Complete processing a message with a final input of *buffer*, which is\n       treated the same as with :cpp:func:`update`. It must contain at least\n       :cpp:func:`final_minimum_size` bytes.\n\n       Note that if you have the entire message in hand, calling finish without\n",
                      "markdown": "`  .. cpp:function:: void finish(secure_vector<uint8_t>& buffer, size_t offset = 0)\n\n       Complete processing a message with a final input of *buffer*, which is\n       treated the same as with :cpp:func:`update`. It must contain at least\n       :cpp:func:`final_minimum_size` bytes.\n\n       Note that if you have the entire message in hand, calling finish without\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/cipher_modes.rst"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 58,
                  "endLine": 275,
                  "endColumn": 66,
                  "snippet": {
                    "text": "       be returned empty.\n\n       On input, the buffer must be sized in blocks of size\n       :cpp:func:`update_granularity`. For instance if the update granularity\n       was 64, then *buffer* could be 64, 128, 192, ... bytes.\n\n       The first *offset* bytes of *buffer* will be ignored (this allows in\n",
                    "rendered": {
                      "text": "       be returned empty.\n\n       On input, the buffer must be sized in blocks of size\n       :cpp:func:`update_granularity`. For instance if the update granularity\n       was 64, then *buffer* could be 64, 128, 192, ... bytes.\n\n       The first *offset* bytes of *buffer* will be ignored (this allows in\n",
                      "markdown": "`       be returned empty.\n\n       On input, the buffer must be sized in blocks of size\n       :cpp:func:`update_granularity`. For instance if the update granularity\n       was 64, then *buffer* could be 64, 128, 192, ... bytes.\n\n       The first *offset* bytes of *buffer* will be ignored (this allows in\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/cipher_modes.rst"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 70,
                  "endLine": 219,
                  "endColumn": 3,
                  "snippet": {
                    "text": "Available if ``BOTAN_HAS_MODE_XTS`` is defined.\n\nXTS is a mode specialized for encrypting disk or database storage\nwhere ciphertext expansion is not possible. XTS requires all inputs be\nat least one full block (16 bytes for AES), however for any acceptable\ninput length, there is no ciphertext expansion.\n\nAlgorithm specification name:\n",
                    "rendered": {
                      "text": "Available if ``BOTAN_HAS_MODE_XTS`` is defined.\n\nXTS is a mode specialized for encrypting disk or database storage\nwhere ciphertext expansion is not possible. XTS requires all inputs be\nat least one full block (16 bytes for AES), however for any acceptable\ninput length, there is no ciphertext expansion.\n\nAlgorithm specification name:\n",
                      "markdown": "`Available if ``BOTAN_HAS_MODE_XTS`` is defined.\n\nXTS is a mode specialized for encrypting disk or database storage\nwhere ciphertext expansion is not possible. XTS requires all inputs be\nat least one full block (16 bytes for AES), however for any acceptable\ninput length, there is no ciphertext expansion.\n\nAlgorithm specification name:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/cipher_modes.rst"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 21,
                  "endLine": 172,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nCiphertext stealing (CTS) is also implemented. This scheme allows the\nciphertext to have the same length as the plaintext, however using CTS\nrequires the input be at least one full block plus one byte. It is\nalso less commonly implemented.\n\n.. warning::\n",
                    "rendered": {
                      "text": "\nCiphertext stealing (CTS) is also implemented. This scheme allows the\nciphertext to have the same length as the plaintext, however using CTS\nrequires the input be at least one full block plus one byte. It is\nalso less commonly implemented.\n\n.. warning::\n",
                      "markdown": "`\nCiphertext stealing (CTS) is also implemented. This scheme allows the\nciphertext to have the same length as the plaintext, however using CTS\nrequires the input be at least one full block plus one byte. It is\nalso less commonly implemented.\n\n.. warning::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/cipher_modes.rst"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 57,
                  "endLine": 124,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n  .. cpp:function:: void finish(secure_vector<uint8_t>& final_block, size_t offset = 0)\n\n    Finalize the message processing with a final block of at least :cpp:func:`minimum_final_size` size.\n    The first *offset* bytes of the passed final block will be ignored.\n\n.. _cipher_modes_example:\n",
                    "rendered": {
                      "text": "\n  .. cpp:function:: void finish(secure_vector<uint8_t>& final_block, size_t offset = 0)\n\n    Finalize the message processing with a final block of at least :cpp:func:`minimum_final_size` size.\n    The first *offset* bytes of the passed final block will be ignored.\n\n.. _cipher_modes_example:\n",
                      "markdown": "`\n  .. cpp:function:: void finish(secure_vector<uint8_t>& final_block, size_t offset = 0)\n\n    Finalize the message processing with a final block of at least :cpp:func:`minimum_final_size` size.\n    The first *offset* bytes of the passed final block will be ignored.\n\n.. _cipher_modes_example:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 2558,
                  "startColumn": 15,
                  "endLine": 2558,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n* The deprecated ECB Cipher_Mode class has been removed (GH #756)\n\n",
                    "rendered": {
                      "text": "\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n* The deprecated ECB Cipher_Mode class has been removed (GH #756)\n\n",
                      "markdown": "`\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n* The deprecated ECB Cipher_Mode class has been removed (GH #756)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 2558,
                  "startColumn": 2,
                  "endLine": 2558,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n* The deprecated ECB Cipher_Mode class has been removed (GH #756)\n\n",
                    "rendered": {
                      "text": "\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n* The deprecated ECB Cipher_Mode class has been removed (GH #756)\n\n",
                      "markdown": "`\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n* The deprecated ECB Cipher_Mode class has been removed (GH #756)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 2557,
                  "startColumn": 25,
                  "endLine": 2557,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  Public_Key::subject_public_key which does exactly that. (GH #685 #757)\n\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n* The deprecated ECB Cipher_Mode class has been removed (GH #756)\n",
                    "rendered": {
                      "text": "  Public_Key::subject_public_key which does exactly that. (GH #685 #757)\n\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n* The deprecated ECB Cipher_Mode class has been removed (GH #756)\n",
                      "markdown": "`  Public_Key::subject_public_key which does exactly that. (GH #685 #757)\n\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n* The deprecated ECB Cipher_Mode class has been removed (GH #756)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 2556,
                  "startColumn": 28,
                  "endLine": 2556,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  X.509 SubjectPublicKey, to public_key_bits. Add a new non-virtual function\n  Public_Key::subject_public_key which does exactly that. (GH #685 #757)\n\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n",
                    "rendered": {
                      "text": "  X.509 SubjectPublicKey, to public_key_bits. Add a new non-virtual function\n  Public_Key::subject_public_key which does exactly that. (GH #685 #757)\n\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n",
                      "markdown": "`  X.509 SubjectPublicKey, to public_key_bits. Add a new non-virtual function\n  Public_Key::subject_public_key which does exactly that. (GH #685 #757)\n\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 2556,
                  "startColumn": 9,
                  "endLine": 2556,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  X.509 SubjectPublicKey, to public_key_bits. Add a new non-virtual function\n  Public_Key::subject_public_key which does exactly that. (GH #685 #757)\n\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n",
                    "rendered": {
                      "text": "  X.509 SubjectPublicKey, to public_key_bits. Add a new non-virtual function\n  Public_Key::subject_public_key which does exactly that. (GH #685 #757)\n\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n",
                      "markdown": "`  X.509 SubjectPublicKey, to public_key_bits. Add a new non-virtual function\n  Public_Key::subject_public_key which does exactly that. (GH #685 #757)\n\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 2383,
                  "startColumn": 41,
                  "endLine": 2383,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  potentially incorrect certificate validation results. Found independently\n  by Cisco Talos team and OSS-Fuzz. (CVE-2017-2801)\n\n* Correct minimum work factor for Bcrypt password hashes. All other\n  implementations require the work factor be at least 4. Previously Botan simply\n  required it be greater than zero. (GH #938)\n\n",
                    "rendered": {
                      "text": "  potentially incorrect certificate validation results. Found independently\n  by Cisco Talos team and OSS-Fuzz. (CVE-2017-2801)\n\n* Correct minimum work factor for Bcrypt password hashes. All other\n  implementations require the work factor be at least 4. Previously Botan simply\n  required it be greater than zero. (GH #938)\n\n",
                      "markdown": "`  potentially incorrect certificate validation results. Found independently\n  by Cisco Talos team and OSS-Fuzz. (CVE-2017-2801)\n\n* Correct minimum work factor for Bcrypt password hashes. All other\n  implementations require the work factor be at least 4. Previously Botan simply\n  required it be greater than zero. (GH #938)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 2374,
                  "startColumn": 38,
                  "endLine": 2374,
                  "endColumn": 46,
                  "snippet": {
                    "text": "Version 2.1.0, 2017-04-04\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix incorrect truncation in Bcrypt. Passwords in length between 56 and 72\n  characters were truncated at 56 characters. Found and reported by Solar Designer.\n  (CVE-2017-7252) (GH #938)\n\n",
                    "rendered": {
                      "text": "Version 2.1.0, 2017-04-04\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix incorrect truncation in Bcrypt. Passwords in length between 56 and 72\n  characters were truncated at 56 characters. Found and reported by Solar Designer.\n  (CVE-2017-7252) (GH #938)\n\n",
                      "markdown": "`Version 2.1.0, 2017-04-04\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix incorrect truncation in Bcrypt. Passwords in length between 56 and 72\n  characters were truncated at 56 characters. Found and reported by Solar Designer.\n  (CVE-2017-7252) (GH #938)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 2297,
                  "startColumn": 11,
                  "endLine": 2297,
                  "endColumn": 19,
                  "snippet": {
                    "text": "* Add support for SHA-1 and SHA-2 instructions added in ARMv8 (GH #844)\n\n* Add support for HOTP (RFC 4226) and TOTP (RFC 6238)\n  one-time-password algorithms (GH #1054)\n\n* Fix a bug that caused secure_allocator to not fully zeroize blocks\n  when sizeof(T) was greater than 1.\n",
                    "rendered": {
                      "text": "* Add support for SHA-1 and SHA-2 instructions added in ARMv8 (GH #844)\n\n* Add support for HOTP (RFC 4226) and TOTP (RFC 6238)\n  one-time-password algorithms (GH #1054)\n\n* Fix a bug that caused secure_allocator to not fully zeroize blocks\n  when sizeof(T) was greater than 1.\n",
                      "markdown": "`* Add support for SHA-1 and SHA-2 instructions added in ARMv8 (GH #844)\n\n* Add support for HOTP (RFC 4226) and TOTP (RFC 6238)\n  one-time-password algorithms (GH #1054)\n\n* Fix a bug that caused secure_allocator to not fully zeroize blocks\n  when sizeof(T) was greater than 1.\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 2202,
                  "startColumn": 38,
                  "endLine": 2202,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n* Add ``constant_time_compare`` as better named equivalent of ``same_mem``.\n\n* Silence a Clang warning in ``create_private_key`` (GH #1150)\n\n* The fuzzers have been better integrated with the main build. See the\n  handbook for details. (GH #1158)\n",
                    "rendered": {
                      "text": "\n* Add ``constant_time_compare`` as better named equivalent of ``same_mem``.\n\n* Silence a Clang warning in ``create_private_key`` (GH #1150)\n\n* The fuzzers have been better integrated with the main build. See the\n  handbook for details. (GH #1158)\n",
                      "markdown": "`\n* Add ``constant_time_compare`` as better named equivalent of ``same_mem``.\n\n* Silence a Clang warning in ``create_private_key`` (GH #1150)\n\n* The fuzzers have been better integrated with the main build. See the\n  handbook for details. (GH #1158)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 1873,
                  "startColumn": 4,
                  "endLine": 1873,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n* Add ``Public_Key::fingerprint_public`` which allows fingerprinting the public key.\n  The previously available ``Private_Key::fingerprint`` is deprecated, now\n  ``Private_Key::fingerprint_private`` should be used if this is required.\n  (GH #1357)\n\n* ECC certificates generated by Botan used an invalid encoding for the\n",
                    "rendered": {
                      "text": "\n* Add ``Public_Key::fingerprint_public`` which allows fingerprinting the public key.\n  The previously available ``Private_Key::fingerprint`` is deprecated, now\n  ``Private_Key::fingerprint_private`` should be used if this is required.\n  (GH #1357)\n\n* ECC certificates generated by Botan used an invalid encoding for the\n",
                      "markdown": "`\n* Add ``Public_Key::fingerprint_public`` which allows fingerprinting the public key.\n  The previously available ``Private_Key::fingerprint`` is deprecated, now\n  ``Private_Key::fingerprint_private`` should be used if this is required.\n  (GH #1357)\n\n* ECC certificates generated by Botan used an invalid encoding for the\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 1872,
                  "startColumn": 29,
                  "endLine": 1872,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  fixing GH #1326)\n\n* Add ``Public_Key::fingerprint_public`` which allows fingerprinting the public key.\n  The previously available ``Private_Key::fingerprint`` is deprecated, now\n  ``Private_Key::fingerprint_private`` should be used if this is required.\n  (GH #1357)\n\n",
                    "rendered": {
                      "text": "  fixing GH #1326)\n\n* Add ``Public_Key::fingerprint_public`` which allows fingerprinting the public key.\n  The previously available ``Private_Key::fingerprint`` is deprecated, now\n  ``Private_Key::fingerprint_private`` should be used if this is required.\n  (GH #1357)\n\n",
                      "markdown": "`  fixing GH #1326)\n\n* Add ``Public_Key::fingerprint_public`` which allows fingerprinting the public key.\n  The previously available ``Private_Key::fingerprint`` is deprecated, now\n  ``Private_Key::fingerprint_private`` should be used if this is required.\n  (GH #1357)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 1651,
                  "startColumn": 25,
                  "endLine": 1651,
                  "endColumn": 33,
                  "snippet": {
                    "text": "* Allow the year to be up to 2200 in ASN.1 time objects. Previously this\n  was limited to 2100. (GH #1536)\n\n* Add support for Scrypt password hashing (GH #1570)\n\n* Add support for using Scrypt for private key encryption (GH #1574)\n\n",
                    "rendered": {
                      "text": "* Allow the year to be up to 2200 in ASN.1 time objects. Previously this\n  was limited to 2100. (GH #1536)\n\n* Add support for Scrypt password hashing (GH #1570)\n\n* Add support for using Scrypt for private key encryption (GH #1574)\n\n",
                      "markdown": "`* Allow the year to be up to 2200 in ASN.1 time objects. Previously this\n  was limited to 2100. (GH #1536)\n\n* Add support for Scrypt password hashing (GH #1570)\n\n* Add support for using Scrypt for private key encryption (GH #1574)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 1541,
                  "startColumn": 12,
                  "endLine": 1541,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n* Add AVX2 implementations of ChaCha (GH #1662) and Serpent (GH #1660)\n\n* Add a new password hashing interface in pwdhash.h (GH #1670)\n\n* C binding improvements. Added functions to get name and supported\n  keylengths of cipher, hash and MAC objects, support for FE1 format\n",
                    "rendered": {
                      "text": "\n* Add AVX2 implementations of ChaCha (GH #1662) and Serpent (GH #1660)\n\n* Add a new password hashing interface in pwdhash.h (GH #1670)\n\n* C binding improvements. Added functions to get name and supported\n  keylengths of cipher, hash and MAC objects, support for FE1 format\n",
                      "markdown": "`\n* Add AVX2 implementations of ChaCha (GH #1662) and Serpent (GH #1660)\n\n* Add a new password hashing interface in pwdhash.h (GH #1670)\n\n* C binding improvements. Added functions to get name and supported\n  keylengths of cipher, hash and MAC objects, support for FE1 format\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 1212,
                  "startColumn": 23,
                  "endLine": 1212,
                  "endColumn": 31,
                  "snippet": {
                    "text": "Version 2.11.0, 2019-07-01\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add Argon2 PBKDF and password hash (GH #459 #1981 #1987)\n\n* Add Bcrypt-PBKDF (GH #1990)\n\n",
                    "rendered": {
                      "text": "Version 2.11.0, 2019-07-01\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add Argon2 PBKDF and password hash (GH #459 #1981 #1987)\n\n* Add Bcrypt-PBKDF (GH #1990)\n\n",
                      "markdown": "`Version 2.11.0, 2019-07-01\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add Argon2 PBKDF and password hash (GH #459 #1981 #1987)\n\n* Add Bcrypt-PBKDF (GH #1990)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 573,
                  "startColumn": 8,
                  "endLine": 573,
                  "endColumn": 19,
                  "snippet": {
                    "text": "* New ``Cipher_Mode`` APIs ``ideal_granularity`` and ``requires_entire_message``\n  (GH #3172 #3168)\n\n* New ``Private_Key::public_key`` returns a new object containing the public\n  key associated with that private key. (GH #2520)\n\n* ``SymmetricAlgorithm::has_keying_material`` allows checking if a key has\n",
                    "rendered": {
                      "text": "* New ``Cipher_Mode`` APIs ``ideal_granularity`` and ``requires_entire_message``\n  (GH #3172 #3168)\n\n* New ``Private_Key::public_key`` returns a new object containing the public\n  key associated with that private key. (GH #2520)\n\n* ``SymmetricAlgorithm::has_keying_material`` allows checking if a key has\n",
                      "markdown": "`* New ``Cipher_Mode`` APIs ``ideal_granularity`` and ``requires_entire_message``\n  (GH #3172 #3168)\n\n* New ``Private_Key::public_key`` returns a new object containing the public\n  key associated with that private key. (GH #2520)\n\n* ``SymmetricAlgorithm::has_keying_material`` allows checking if a key has\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 18,
                  "endLine": 562,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  pointer ``T*``. ``T::clone`` is retained but simply releases the result of\n  ``new_object``. (GH #2689 #2704)\n\n* Add an API to ``PasswordHash`` accepting an AD and/or secret key, allowing\n  those facilities to be used without using an algorithm specific API (GH #2707)\n\n* Add new ``X509_DN::DER_encode`` function. (GH #2472)\n",
                    "rendered": {
                      "text": "  pointer ``T*``. ``T::clone`` is retained but simply releases the result of\n  ``new_object``. (GH #2689 #2704)\n\n* Add an API to ``PasswordHash`` accepting an AD and/or secret key, allowing\n  those facilities to be used without using an algorithm specific API (GH #2707)\n\n* Add new ``X509_DN::DER_encode`` function. (GH #2472)\n",
                      "markdown": "`  pointer ``T*``. ``T::clone`` is retained but simply releases the result of\n  ``new_object``. (GH #2689 #2704)\n\n* Add an API to ``PasswordHash`` accepting an AD and/or secret key, allowing\n  those facilities to be used without using an algorithm specific API (GH #2707)\n\n* Add new ``X509_DN::DER_encode`` function. (GH #2472)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 27,
                  "endLine": 198,
                  "endColumn": 37,
                  "snippet": {
                    "text": "* Add Private_Key::remaining_operations() that indicates the number of\n  remaining signatures for stateful hash-based signatures (GH #3821)\n\n* Add implementation of EC_PrivateKey::check_key() (GH #3782 #3804)\n\n* Add hardware acceleration for SHA-512 on ARMv8 (GH #3860 #3864)\n\n",
                    "rendered": {
                      "text": "* Add Private_Key::remaining_operations() that indicates the number of\n  remaining signatures for stateful hash-based signatures (GH #3821)\n\n* Add implementation of EC_PrivateKey::check_key() (GH #3782 #3804)\n\n* Add hardware acceleration for SHA-512 on ARMv8 (GH #3860 #3864)\n\n",
                      "markdown": "`* Add Private_Key::remaining_operations() that indicates the number of\n  remaining signatures for stateful hash-based signatures (GH #3821)\n\n* Add implementation of EC_PrivateKey::check_key() (GH #3782 #3804)\n\n* Add hardware acceleration for SHA-512 on ARMv8 (GH #3860 #3864)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 6,
                  "endLine": 195,
                  "endColumn": 17,
                  "snippet": {
                    "text": "* Add AsymmetricKey::generate_another() to generate a new key of the\n  same type and parameters as an existing key (GH #3770 #3786)\n\n* Add Private_Key::remaining_operations() that indicates the number of\n  remaining signatures for stateful hash-based signatures (GH #3821)\n\n* Add implementation of EC_PrivateKey::check_key() (GH #3782 #3804)\n",
                    "rendered": {
                      "text": "* Add AsymmetricKey::generate_another() to generate a new key of the\n  same type and parameters as an existing key (GH #3770 #3786)\n\n* Add Private_Key::remaining_operations() that indicates the number of\n  remaining signatures for stateful hash-based signatures (GH #3821)\n\n* Add implementation of EC_PrivateKey::check_key() (GH #3782 #3804)\n",
                      "markdown": "`* Add AsymmetricKey::generate_another() to generate a new key of the\n  same type and parameters as an existing key (GH #3770 #3786)\n\n* Add Private_Key::remaining_operations() that indicates the number of\n  remaining signatures for stateful hash-based signatures (GH #3821)\n\n* Add implementation of EC_PrivateKey::check_key() (GH #3782 #3804)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/news.txt"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 18,
                  "endLine": 170,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n* Update GH Actions to v4 (GH #3923)\n\n* Add examples of password based encryption and HTTPS+ASIO client.\n  (GH #3935 #3910)\n\nVersion 3.3.0, 2024-02-20\n",
                    "rendered": {
                      "text": "\n* Update GH Actions to v4 (GH #3923)\n\n* Add examples of password based encryption and HTTPS+ASIO client.\n  (GH #3935 #3910)\n\nVersion 3.3.0, 2024-02-20\n",
                      "markdown": "`\n* Update GH Actions to v4 (GH #3923)\n\n* Add examples of password based encryption and HTTPS+ASIO client.\n  (GH #3935 #3910)\n\nVersion 3.3.0, 2024-02-20\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/fuzzing.rst"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 3,
                  "endLine": 58,
                  "endColumn": 8,
                  "snippet": {
                    "text": "TLS-Attacker (https://github.com/RUB-NDS/TLS-Attacker) includes a mode for fuzzing\nTLS servers. A prebuilt copy of TLS-Attacker is available in a git repository::\n\n  $ git clone --depth 1 https://github.com/randombit/botan-ci-tools.git\n\nTo run it against Botan's server::\n\n",
                    "rendered": {
                      "text": "TLS-Attacker (https://github.com/RUB-NDS/TLS-Attacker) includes a mode for fuzzing\nTLS servers. A prebuilt copy of TLS-Attacker is available in a git repository::\n\n  $ git clone --depth 1 https://github.com/randombit/botan-ci-tools.git\n\nTo run it against Botan's server::\n\n",
                      "markdown": "`TLS-Attacker (https://github.com/RUB-NDS/TLS-Attacker) includes a mode for fuzzing\nTLS servers. A prebuilt copy of TLS-Attacker is available in a git repository::\n\n  $ git clone --depth 1 https://github.com/randombit/botan-ci-tools.git\n\nTo run it against Botan's server::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/fuzzing.rst"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 62,
                  "endLine": 56,
                  "endColumn": 67,
                  "snippet": {
                    "text": "--------------------------\n\nTLS-Attacker (https://github.com/RUB-NDS/TLS-Attacker) includes a mode for fuzzing\nTLS servers. A prebuilt copy of TLS-Attacker is available in a git repository::\n\n  $ git clone --depth 1 https://github.com/randombit/botan-ci-tools.git\n\n",
                    "rendered": {
                      "text": "--------------------------\n\nTLS-Attacker (https://github.com/RUB-NDS/TLS-Attacker) includes a mode for fuzzing\nTLS servers. A prebuilt copy of TLS-Attacker is available in a git repository::\n\n  $ git clone --depth 1 https://github.com/randombit/botan-ci-tools.git\n\n",
                      "markdown": "`--------------------------\n\nTLS-Attacker (https://github.com/RUB-NDS/TLS-Attacker) includes a mode for fuzzing\nTLS servers. A prebuilt copy of TLS-Attacker is available in a git repository::\n\n  $ git clone --depth 1 https://github.com/randombit/botan-ci-tools.git\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 21,
                  "endLine": 52,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  secret sharing, all or nothing transform, and others\n* ``modes`` contains block cipher modes (CBC, GCM, etc)\n* ``passhash`` contains password hashing algorithms for authentication\n* ``pbkdf`` contains password hashing algorithms for key derivation\n* ``pk_pad`` contains padding schemes for public key algorithms\n* ``prov`` contains bindings to external libraries such as PKCS #11\n* ``psk_db`` contains a generic interface for a Pre-Shared-Key database\n",
                    "rendered": {
                      "text": "  secret sharing, all or nothing transform, and others\n* ``modes`` contains block cipher modes (CBC, GCM, etc)\n* ``passhash`` contains password hashing algorithms for authentication\n* ``pbkdf`` contains password hashing algorithms for key derivation\n* ``pk_pad`` contains padding schemes for public key algorithms\n* ``prov`` contains bindings to external libraries such as PKCS #11\n* ``psk_db`` contains a generic interface for a Pre-Shared-Key database\n",
                      "markdown": "`  secret sharing, all or nothing transform, and others\n* ``modes`` contains block cipher modes (CBC, GCM, etc)\n* ``passhash`` contains password hashing algorithms for authentication\n* ``pbkdf`` contains password hashing algorithms for key derivation\n* ``pk_pad`` contains padding schemes for public key algorithms\n* ``prov`` contains bindings to external libraries such as PKCS #11\n* ``psk_db`` contains a generic interface for a Pre-Shared-Key database\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 24,
                  "endLine": 51,
                  "endColumn": 32,
                  "snippet": {
                    "text": "* ``misc`` contains odds and ends: format preserving encryption, SRP, threshold\n  secret sharing, all or nothing transform, and others\n* ``modes`` contains block cipher modes (CBC, GCM, etc)\n* ``passhash`` contains password hashing algorithms for authentication\n* ``pbkdf`` contains password hashing algorithms for key derivation\n* ``pk_pad`` contains padding schemes for public key algorithms\n* ``prov`` contains bindings to external libraries such as PKCS #11\n",
                    "rendered": {
                      "text": "* ``misc`` contains odds and ends: format preserving encryption, SRP, threshold\n  secret sharing, all or nothing transform, and others\n* ``modes`` contains block cipher modes (CBC, GCM, etc)\n* ``passhash`` contains password hashing algorithms for authentication\n* ``pbkdf`` contains password hashing algorithms for key derivation\n* ``pk_pad`` contains padding schemes for public key algorithms\n* ``prov`` contains bindings to external libraries such as PKCS #11\n",
                      "markdown": "`* ``misc`` contains odds and ends: format preserving encryption, SRP, threshold\n  secret sharing, all or nothing transform, and others\n* ``modes`` contains block cipher modes (CBC, GCM, etc)\n* ``passhash`` contains password hashing algorithms for authentication\n* ``pbkdf`` contains password hashing algorithms for key derivation\n* ``pk_pad`` contains padding schemes for public key algorithms\n* ``prov`` contains bindings to external libraries such as PKCS #11\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 27,
                  "snippet": {
                    "text": "* ``asn1`` is the DER encoder/decoder\n* ``base`` defines some high level types\n* ``block`` contains the block cipher implementations\n* ``codec`` has hex, base64, base32, base58\n* ``compat`` a (partial) compatibility layer for the libsodium API\n* ``compression`` has the compression wrappers (zlib, bzip2, lzma)\n* ``entropy`` has various entropy sources used by some of the RNGs\n",
                    "rendered": {
                      "text": "* ``asn1`` is the DER encoder/decoder\n* ``base`` defines some high level types\n* ``block`` contains the block cipher implementations\n* ``codec`` has hex, base64, base32, base58\n* ``compat`` a (partial) compatibility layer for the libsodium API\n* ``compression`` has the compression wrappers (zlib, bzip2, lzma)\n* ``entropy`` has various entropy sources used by some of the RNGs\n",
                      "markdown": "`* ``asn1`` is the DER encoder/decoder\n* ``base`` defines some high level types\n* ``block`` contains the block cipher implementations\n* ``codec`` has hex, base64, base32, base58\n* ``compat`` a (partial) compatibility layer for the libsodium API\n* ``compression`` has the compression wrappers (zlib, bzip2, lzma)\n* ``entropy`` has various entropy sources used by some of the RNGs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 297,
                  "endColumn": 3,
                  "snippet": {
                    "text": "integration), plus various operating system utilities like basic filesystem\noperations. These provide major pieces of functionality which seem worth the\ntrouble of maintaining an integration with.\n\nAt this point the most plausible examples of an appropriate new external\ndependency are all deeper integrations with system level cryptographic\ninterfaces (CommonCrypto, CryptoAPI, /dev/crypto, iOS keychain, TPM 2.0, etc)\n",
                    "rendered": {
                      "text": "integration), plus various operating system utilities like basic filesystem\noperations. These provide major pieces of functionality which seem worth the\ntrouble of maintaining an integration with.\n\nAt this point the most plausible examples of an appropriate new external\ndependency are all deeper integrations with system level cryptographic\ninterfaces (CommonCrypto, CryptoAPI, /dev/crypto, iOS keychain, TPM 2.0, etc)\n",
                      "markdown": "`integration), plus various operating system utilities like basic filesystem\noperations. These provide major pieces of functionality which seem worth the\ntrouble of maintaining an integration with.\n\nAt this point the most plausible examples of an appropriate new external\ndependency are all deeper integrations with system level cryptographic\ninterfaces (CommonCrypto, CryptoAPI, /dev/crypto, iOS keychain, TPM 2.0, etc)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 60,
                  "endLine": 286,
                  "endColumn": 64,
                  "snippet": {
                    "text": "the call stack is all contained within the boundary.  So the additional API\nreally needs to pull its weight. For example a simple text parser or such which\ncan be trivially implemented is not really for consideration. As a rough idea of\nthe bar, equate the viewed cost of an external dependency as at least 1000\nadditional lines of code in the library. That is, if the library really does\nneed this functionality, and it can be done in the library for less than that,\nthen it makes sense to just write the code. Yup.\n",
                    "rendered": {
                      "text": "the call stack is all contained within the boundary.  So the additional API\nreally needs to pull its weight. For example a simple text parser or such which\ncan be trivially implemented is not really for consideration. As a rough idea of\nthe bar, equate the viewed cost of an external dependency as at least 1000\nadditional lines of code in the library. That is, if the library really does\nneed this functionality, and it can be done in the library for less than that,\nthen it makes sense to just write the code. Yup.\n",
                      "markdown": "`the call stack is all contained within the boundary.  So the additional API\nreally needs to pull its weight. For example a simple text parser or such which\ncan be trivially implemented is not really for consideration. As a rough idea of\nthe bar, equate the viewed cost of an external dependency as at least 1000\nadditional lines of code in the library. That is, if the library really does\nneed this functionality, and it can be done in the library for less than that,\nthen it makes sense to just write the code. Yup.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 281,
                  "endLine": 282,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\nAny external library dependency - even optional ones - is met with as one PR\nsubmitter put it \"great skepticism\".\n\nAt every API boundary there is potential for confusion that does not exist when\nthe call stack is all contained within the boundary.  So the additional API\nreally needs to pull its weight. For example a simple text parser or such which\ncan be trivially implemented is not really for consideration. As a rough idea of\n",
                    "rendered": {
                      "text": "\nAny external library dependency - even optional ones - is met with as one PR\nsubmitter put it \"great skepticism\".\n\nAt every API boundary there is potential for confusion that does not exist when\nthe call stack is all contained within the boundary.  So the additional API\nreally needs to pull its weight. For example a simple text parser or such which\ncan be trivially implemented is not really for consideration. As a rough idea of\n",
                      "markdown": "`\nAny external library dependency - even optional ones - is met with as one PR\nsubmitter put it \"great skepticism\".\n\nAt every API boundary there is potential for confusion that does not exist when\nthe call stack is all contained within the boundary.  So the additional API\nreally needs to pull its weight. For example a simple text parser or such which\ncan be trivially implemented is not really for consideration. As a rough idea of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 75,
                  "endLine": 256,
                  "snippet": {
                    "text": "maintainability is seen as worth any potential performance tradeoff. One risk\nwith intrinsics is that the compiler might rewrite your clever const-time SIMD\ninto something with a conditional jump, but code intended to be const-time\nshould in any case be annotated (using ``CT::poison``) so it can be checked at\nruntime with tools.\n\nOperating System Dependencies\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                    "rendered": {
                      "text": "maintainability is seen as worth any potential performance tradeoff. One risk\nwith intrinsics is that the compiler might rewrite your clever const-time SIMD\ninto something with a conditional jump, but code intended to be const-time\nshould in any case be annotated (using ``CT::poison``) so it can be checked at\nruntime with tools.\n\nOperating System Dependencies\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                      "markdown": "`maintainability is seen as worth any potential performance tradeoff. One risk\nwith intrinsics is that the compiler might rewrite your clever const-time SIMD\ninto something with a conditional jump, but code intended to be const-time\nshould in any case be annotated (using ``CT::poison``) so it can be checked at\nruntime with tools.\n\nOperating System Dependencies\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 78,
                  "endLine": 187,
                  "endColumn": 3,
                  "snippet": {
                    "text": "When designing a new API (for use either by library users or just internally)\ntry writing out the calling code first. That is, write out some code calling\nyour idealized API, then just implement that API.  This can often help avoid\ncut-and-paste by creating the correct abstractions needed to solve the problem\nat hand.\n\nThe C++11 ``auto`` keyword is very convenient but only use it when the type\ntruly is obvious (considering also the potential for unexpected integer\n",
                    "rendered": {
                      "text": "When designing a new API (for use either by library users or just internally)\ntry writing out the calling code first. That is, write out some code calling\nyour idealized API, then just implement that API.  This can often help avoid\ncut-and-paste by creating the correct abstractions needed to solve the problem\nat hand.\n\nThe C++11 ``auto`` keyword is very convenient but only use it when the type\ntruly is obvious (considering also the potential for unexpected integer\n",
                      "markdown": "`When designing a new API (for use either by library users or just internally)\ntry writing out the calling code first. That is, write out some code calling\nyour idealized API, then just implement that API.  This can often help avoid\ncut-and-paste by creating the correct abstractions needed to solve the problem\nat hand.\n\nThe C++11 ``auto`` keyword is very convenient but only use it when the type\ntruly is obvious (considering also the potential for unexpected integer\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 28,
                  "endLine": 177,
                  "endColumn": 32,
                  "snippet": {
                    "text": "----------------------------------------\n\nWhen writing your code remember the need for it to be easily understood by\nreviewers and auditors, both at the time of the patch submission and in the\nfuture.\n\nAvoid complicated template metaprogramming where possible. It has its places but\n",
                    "rendered": {
                      "text": "----------------------------------------\n\nWhen writing your code remember the need for it to be easily understood by\nreviewers and auditors, both at the time of the patch submission and in the\nfuture.\n\nAvoid complicated template metaprogramming where possible. It has its places but\n",
                      "markdown": "`----------------------------------------\n\nWhen writing your code remember the need for it to be easily understood by\nreviewers and auditors, both at the time of the patch submission and in the\nfuture.\n\nAvoid complicated template metaprogramming where possible. It has its places but\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 38,
                  "endLine": 171,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  */\n\nIf you are making a substantial or non-trivial change to an existing file, add\nor update your own copyright statement at the top of each file.\n\nStyle Conventions\n----------------------------------------\n",
                    "rendered": {
                      "text": "  */\n\nIf you are making a substantial or non-trivial change to an existing file, add\nor update your own copyright statement at the top of each file.\n\nStyle Conventions\n----------------------------------------\n",
                      "markdown": "`  */\n\nIf you are making a substantial or non-trivial change to an existing file, add\nor update your own copyright statement at the top of each file.\n\nStyle Conventions\n----------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 2,
                  "endLine": 171,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  */\n\nIf you are making a substantial or non-trivial change to an existing file, add\nor update your own copyright statement at the top of each file.\n\nStyle Conventions\n----------------------------------------\n",
                    "rendered": {
                      "text": "  */\n\nIf you are making a substantial or non-trivial change to an existing file, add\nor update your own copyright statement at the top of each file.\n\nStyle Conventions\n----------------------------------------\n",
                      "markdown": "`  */\n\nIf you are making a substantial or non-trivial change to an existing file, add\nor update your own copyright statement at the top of each file.\n\nStyle Conventions\n----------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 160,
                  "endLine": 161,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\nCopyright Notice\n----------------------------------------\n\nAt the top of any new file add a comment with a copyright and a reference to the\nlicense, for example::\n\n  /*\n",
                    "rendered": {
                      "text": "\nCopyright Notice\n----------------------------------------\n\nAt the top of any new file add a comment with a copyright and a reference to the\nlicense, for example::\n\n  /*\n",
                      "markdown": "`\nCopyright Notice\n----------------------------------------\n\nAt the top of any new file add a comment with a copyright and a reference to the\nlicense, for example::\n\n  /*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 55,
                  "endLine": 110,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\nDo *NOT* merge ``master`` into your topic branch, this creates needless commits\nand noise in history. Instead, as needed, rebase your branch against master\n(``git rebase -i master``) and force push the branch to update the PR. If the\nGitHub PR page does not report any merge conflicts and nobody asks you to\nrebase, you don't need to rebase.\n\n",
                    "rendered": {
                      "text": "\nDo *NOT* merge ``master`` into your topic branch, this creates needless commits\nand noise in history. Instead, as needed, rebase your branch against master\n(``git rebase -i master``) and force push the branch to update the PR. If the\nGitHub PR page does not report any merge conflicts and nobody asks you to\nrebase, you don't need to rebase.\n\n",
                      "markdown": "`\nDo *NOT* merge ``master`` into your topic branch, this creates needless commits\nand noise in history. Instead, as needed, rebase your branch against master\n(``git rebase -i master``) and force push the branch to update the PR. If the\nGitHub PR page does not report any merge conflicts and nobody asks you to\nrebase, you don't need to rebase.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 88,
                  "endColumn": 7,
                  "snippet": {
                    "text": "simple bug fix, a one sentence description is perhaps sufficient. If there is an\nexisting ticket on GitHub with discussion or other information, reference it in\nyour change note as 'GH #000'.\n\nUpdate ``doc/credits.txt`` with your information so people know what you did!\n\nIf you are interested in contributing but don't know where to start check out\n``doc/dev_ref/todo.rst`` for some ideas - these are changes we would almost\n",
                    "rendered": {
                      "text": "simple bug fix, a one sentence description is perhaps sufficient. If there is an\nexisting ticket on GitHub with discussion or other information, reference it in\nyour change note as 'GH #000'.\n\nUpdate ``doc/credits.txt`` with your information so people know what you did!\n\nIf you are interested in contributing but don't know where to start check out\n``doc/dev_ref/todo.rst`` for some ideas - these are changes we would almost\n",
                      "markdown": "`simple bug fix, a one sentence description is perhaps sufficient. If there is an\nexisting ticket on GitHub with discussion or other information, reference it in\nyour change note as 'GH #000'.\n\nUpdate ``doc/credits.txt`` with your information so people know what you did!\n\nIf you are interested in contributing but don't know where to start check out\n``doc/dev_ref/todo.rst`` for some ideas - these are changes we would almost\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 73,
                  "endLine": 83,
                  "snippet": {
                    "text": "See https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work for\ninstructions on how to set this up.\n\nDepending on what your change is, your PR should probably also include an update\nto ``news.rst`` with a note explaining the change. If your change is a\nsimple bug fix, a one sentence description is perhaps sufficient. If there is an\nexisting ticket on GitHub with discussion or other information, reference it in\nyour change note as 'GH #000'.\n",
                    "rendered": {
                      "text": "See https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work for\ninstructions on how to set this up.\n\nDepending on what your change is, your PR should probably also include an update\nto ``news.rst`` with a note explaining the change. If your change is a\nsimple bug fix, a one sentence description is perhaps sufficient. If there is an\nexisting ticket on GitHub with discussion or other information, reference it in\nyour change note as 'GH #000'.\n",
                      "markdown": "`See https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work for\ninstructions on how to set this up.\n\nDepending on what your change is, your PR should probably also include an update\nto ``news.rst`` with a note explaining the change. If your change is a\nsimple bug fix, a one sentence description is perhaps sufficient. If there is an\nexisting ticket on GitHub with discussion or other information, reference it in\nyour change note as 'GH #000'.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 42,
                  "endLine": 292,
                  "endColumn": 51,
                  "snippet": {
                    "text": "then it makes sense to just write the code. Yup.\n\nCurrently the (optional) external dependencies of the library are several\ncompression libraries (zlib, bzip2, lzma), sqlite3 database, Trousers (TPM\nintegration), plus various operating system utilities like basic filesystem\noperations. These provide major pieces of functionality which seem worth the\ntrouble of maintaining an integration with.\n",
                    "rendered": {
                      "text": "then it makes sense to just write the code. Yup.\n\nCurrently the (optional) external dependencies of the library are several\ncompression libraries (zlib, bzip2, lzma), sqlite3 database, Trousers (TPM\nintegration), plus various operating system utilities like basic filesystem\noperations. These provide major pieces of functionality which seem worth the\ntrouble of maintaining an integration with.\n",
                      "markdown": "`then it makes sense to just write the code. Yup.\n\nCurrently the (optional) external dependencies of the library are several\ncompression libraries (zlib, bzip2, lzma), sqlite3 database, Trousers (TPM\nintegration), plus various operating system utilities like basic filesystem\noperations. These provide major pieces of functionality which seem worth the\ntrouble of maintaining an integration with.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 47,
                  "endLine": 217,
                  "snippet": {
                    "text": "\n``clang-format`` is used for all C++ formatting. The configuration is\nin ``.clang-format`` in the root directory. You can rerun the\nformatter using ``make fmt`` or by invoking the script\n``src/scripts/dev_tools/run_clang_format.py``. If the output would be\ntruly horrible, it is allowed to disable formatting for a specific\narea using ``// clang-format off`` annotations.\n\n",
                    "rendered": {
                      "text": "\n``clang-format`` is used for all C++ formatting. The configuration is\nin ``.clang-format`` in the root directory. You can rerun the\nformatter using ``make fmt`` or by invoking the script\n``src/scripts/dev_tools/run_clang_format.py``. If the output would be\ntruly horrible, it is allowed to disable formatting for a specific\narea using ``// clang-format off`` annotations.\n\n",
                      "markdown": "`\n``clang-format`` is used for all C++ formatting. The configuration is\nin ``.clang-format`` in the root directory. You can rerun the\nformatter using ``make fmt`` or by invoking the script\n``src/scripts/dev_tools/run_clang_format.py``. If the output would be\ntruly horrible, it is allowed to disable formatting for a specific\narea using ``// clang-format off`` annotations.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 35,
                  "endLine": 177,
                  "endColumn": 41,
                  "snippet": {
                    "text": "----------------------------------------\n\nWhen writing your code remember the need for it to be easily understood by\nreviewers and auditors, both at the time of the patch submission and in the\nfuture.\n\nAvoid complicated template metaprogramming where possible. It has its places but\n",
                    "rendered": {
                      "text": "----------------------------------------\n\nWhen writing your code remember the need for it to be easily understood by\nreviewers and auditors, both at the time of the patch submission and in the\nfuture.\n\nAvoid complicated template metaprogramming where possible. It has its places but\n",
                      "markdown": "`----------------------------------------\n\nWhen writing your code remember the need for it to be easily understood by\nreviewers and auditors, both at the time of the patch submission and in the\nfuture.\n\nAvoid complicated template metaprogramming where possible. It has its places but\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 45,
                  "endLine": 171,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  */\n\nIf you are making a substantial or non-trivial change to an existing file, add\nor update your own copyright statement at the top of each file.\n\nStyle Conventions\n----------------------------------------\n",
                    "rendered": {
                      "text": "  */\n\nIf you are making a substantial or non-trivial change to an existing file, add\nor update your own copyright statement at the top of each file.\n\nStyle Conventions\n----------------------------------------\n",
                      "markdown": "`  */\n\nIf you are making a substantial or non-trivial change to an existing file, add\nor update your own copyright statement at the top of each file.\n\nStyle Conventions\n----------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 6,
                  "endLine": 161,
                  "endColumn": 11,
                  "snippet": {
                    "text": "Copyright Notice\n----------------------------------------\n\nAt the top of any new file add a comment with a copyright and a reference to the\nlicense, for example::\n\n  /*\n",
                    "rendered": {
                      "text": "Copyright Notice\n----------------------------------------\n\nAt the top of any new file add a comment with a copyright and a reference to the\nlicense, for example::\n\n  /*\n",
                      "markdown": "`Copyright Notice\n----------------------------------------\n\nAt the top of any new file add a comment with a copyright and a reference to the\nlicense, for example::\n\n  /*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 15,
                  "endLine": 115,
                  "endColumn": 21,
                  "snippet": {
                    "text": "rebase, you don't need to rebase.\n\nTry to keep your history clean and use rebase to squash your commits as\nneeded. If your diff is less than roughly 100 lines, it should probably be a\nsingle commit. Only split commits as needed to help with review/understanding of\nthe change.\n\n",
                    "rendered": {
                      "text": "rebase, you don't need to rebase.\n\nTry to keep your history clean and use rebase to squash your commits as\nneeded. If your diff is less than roughly 100 lines, it should probably be a\nsingle commit. Only split commits as needed to help with review/understanding of\nthe change.\n\n",
                      "markdown": "`rebase, you don't need to rebase.\n\nTry to keep your history clean and use rebase to squash your commits as\nneeded. If your diff is less than roughly 100 lines, it should probably be a\nsingle commit. Only split commits as needed to help with review/understanding of\nthe change.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 105,
                  "endColumn": 4,
                  "snippet": {
                    "text": "If adding a new function declaration to ``ffi.h``, the same PR must also add the\nsame declaration in the Python binding ``botan3.py``, in addition the new API\nfunctionality must be exposed to Python and a test written in Python.\n\nGit Usage\n----------------------------------------\n\nDo *NOT* merge ``master`` into your topic branch, this creates needless commits\n",
                    "rendered": {
                      "text": "If adding a new function declaration to ``ffi.h``, the same PR must also add the\nsame declaration in the Python binding ``botan3.py``, in addition the new API\nfunctionality must be exposed to Python and a test written in Python.\n\nGit Usage\n----------------------------------------\n\nDo *NOT* merge ``master`` into your topic branch, this creates needless commits\n",
                      "markdown": "`If adding a new function declaration to ``ffi.h``, the same PR must also add the\nsame declaration in the Python binding ``botan3.py``, in addition the new API\nfunctionality must be exposed to Python and a test written in Python.\n\nGit Usage\n----------------------------------------\n\nDo *NOT* merge ``master`` into your topic branch, this creates needless commits\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 28,
                  "endLine": 78,
                  "endColumn": 33,
                  "snippet": {
                    "text": "even if it is not complete/ready to go, feel free to open a draft PR\nfor early review and comment.\n\nIf possible please sign your git commits using a PGP key.\nSee https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work for\ninstructions on how to set this up.\n\n",
                    "rendered": {
                      "text": "even if it is not complete/ready to go, feel free to open a draft PR\nfor early review and comment.\n\nIf possible please sign your git commits using a PGP key.\nSee https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work for\ninstructions on how to set this up.\n\n",
                      "markdown": "`even if it is not complete/ready to go, feel free to open a draft PR\nfor early review and comment.\n\nIf possible please sign your git commits using a PGP key.\nSee https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work for\ninstructions on how to set this up.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/contributing.rst"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 70,
                  "endLine": 24,
                  "snippet": {
                    "text": "* ``scripts`` contains misc scripts: install, distribution, various\n  codegen things. Scripts controlling CI go under ``scripts/ci``.\n* ``configs`` contains configuration files tools like pylint\n* ``editors`` contains configuration files for editors like vscode and emacs\n\nUnder ``doc`` one finds the sources of this documentation\n\nLibrary Layout\n",
                    "rendered": {
                      "text": "* ``scripts`` contains misc scripts: install, distribution, various\n  codegen things. Scripts controlling CI go under ``scripts/ci``.\n* ``configs`` contains configuration files tools like pylint\n* ``editors`` contains configuration files for editors like vscode and emacs\n\nUnder ``doc`` one finds the sources of this documentation\n\nLibrary Layout\n",
                      "markdown": "`* ``scripts`` contains misc scripts: install, distribution, various\n  codegen things. Scripts controlling CI go under ``scripts/ci``.\n* ``configs`` contains configuration files tools like pylint\n* ``editors`` contains configuration files for editors like vscode and emacs\n\nUnder ``doc`` one finds the sources of this documentation\n\nLibrary Layout\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/rng.rst"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 35,
                  "endLine": 223,
                  "endColumn": 39,
                  "snippet": {
                    "text": "This RNG type directly invokes a CPU instruction capable of generating\na cryptographically secure random number. On x86 it uses ``rdrand``,\non POWER ``darn``. If the relevant instruction is not available, the\nconstructor of the class will throw at runtime. You can test\nbeforehand by checking the result of ``Processor_RNG::available()``.\n\nTPM_RNG\n",
                    "rendered": {
                      "text": "This RNG type directly invokes a CPU instruction capable of generating\na cryptographically secure random number. On x86 it uses ``rdrand``,\non POWER ``darn``. If the relevant instruction is not available, the\nconstructor of the class will throw at runtime. You can test\nbeforehand by checking the result of ``Processor_RNG::available()``.\n\nTPM_RNG\n",
                      "markdown": "`This RNG type directly invokes a CPU instruction capable of generating\na cryptographically secure random number. On x86 it uses ``rdrand``,\non POWER ``darn``. If the relevant instruction is not available, the\nconstructor of the class will throw at runtime. You can test\nbeforehand by checking the result of ``Processor_RNG::available()``.\n\nTPM_RNG\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/rng.rst"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 63,
                  "endLine": 39,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n   .. cpp:function:: void add_entropy(const uint8_t* data, size_t length)\n\n      Incorporates provided data into the state of the PRNG, if at all possible.\n      This works for most RNG types, including the system and TPM RNGs. But if\n      the RNG doesn't support this operation, the data is dropped, no error is\n      indicated.\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: void add_entropy(const uint8_t* data, size_t length)\n\n      Incorporates provided data into the state of the PRNG, if at all possible.\n      This works for most RNG types, including the system and TPM RNGs. But if\n      the RNG doesn't support this operation, the data is dropped, no error is\n      indicated.\n",
                      "markdown": "`\n   .. cpp:function:: void add_entropy(const uint8_t* data, size_t length)\n\n      Incorporates provided data into the state of the PRNG, if at all possible.\n      This works for most RNG types, including the system and TPM RNGs. But if\n      the RNG doesn't support this operation, the data is dropped, no error is\n      indicated.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/rng.rst"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 28,
                  "endLine": 35,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n      Generates a single random byte and returns it. Note that calling this\n      function several times is much slower than calling ``randomize`` once to\n      produce multiple bytes at a time.\n\n   .. cpp:function:: void add_entropy(const uint8_t* data, size_t length)\n\n",
                    "rendered": {
                      "text": "\n      Generates a single random byte and returns it. Note that calling this\n      function several times is much slower than calling ``randomize`` once to\n      produce multiple bytes at a time.\n\n   .. cpp:function:: void add_entropy(const uint8_t* data, size_t length)\n\n",
                      "markdown": "`\n      Generates a single random byte and returns it. Note that calling this\n      function several times is much slower than calling ``randomize`` once to\n      produce multiple bytes at a time.\n\n   .. cpp:function:: void add_entropy(const uint8_t* data, size_t length)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/rng.rst"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 45,
                  "endLine": 28,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n      .. note::\n\n         When RDRAND is enabled and available at runtime, instead of timestamps\n         the output of RDRAND is used as the additional data.\n\n   .. cpp:function:: uint8_t next_byte()\n",
                    "rendered": {
                      "text": "\n      .. note::\n\n         When RDRAND is enabled and available at runtime, instead of timestamps\n         the output of RDRAND is used as the additional data.\n\n   .. cpp:function:: uint8_t next_byte()\n",
                      "markdown": "`\n      .. note::\n\n         When RDRAND is enabled and available at runtime, instead of timestamps\n         the output of RDRAND is used as the additional data.\n\n   .. cpp:function:: uint8_t next_byte()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/rng.rst"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 12,
                  "endLine": 207,
                  "endColumn": 18,
                  "snippet": {
                    "text": "One thing applications using ``ChaCha_RNG`` need to be aware of is that for\nperformance reasons, no backtracking resistance is implemented in the RNG\ndesign. An attacker who recovers the ``ChaCha_RNG`` state can recover the output\nbackwards in time to the last rekey and forwards to the next rekey.\n\nAn explicit reseeding (:cpp:func:`RandomNumberGenerator::add_entropy`) or\nproviding any input to the RNG\n",
                    "rendered": {
                      "text": "One thing applications using ``ChaCha_RNG`` need to be aware of is that for\nperformance reasons, no backtracking resistance is implemented in the RNG\ndesign. An attacker who recovers the ``ChaCha_RNG`` state can recover the output\nbackwards in time to the last rekey and forwards to the next rekey.\n\nAn explicit reseeding (:cpp:func:`RandomNumberGenerator::add_entropy`) or\nproviding any input to the RNG\n",
                      "markdown": "`One thing applications using ``ChaCha_RNG`` need to be aware of is that for\nperformance reasons, no backtracking resistance is implemented in the RNG\ndesign. An attacker who recovers the ``ChaCha_RNG`` state can recover the output\nbackwards in time to the last rekey and forwards to the next rekey.\n\nAn explicit reseeding (:cpp:func:`RandomNumberGenerator::add_entropy`) or\nproviding any input to the RNG\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/rng.rst"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 41,
                  "endLine": 98,
                  "endColumn": 47,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAutoSeeded_RNG is type naming a 'best available' userspace PRNG. The\nexact definition of this has changed over time and may change again in the\nfuture. Fortunately there is no compatibility concerns when changing\nany RNG since the only expectation is it produces bits\nindistinguishable from random.\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAutoSeeded_RNG is type naming a 'best available' userspace PRNG. The\nexact definition of this has changed over time and may change again in the\nfuture. Fortunately there is no compatibility concerns when changing\nany RNG since the only expectation is it produces bits\nindistinguishable from random.\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAutoSeeded_RNG is type naming a 'best available' userspace PRNG. The\nexact definition of this has changed over time and may change again in the\nfuture. Fortunately there is no compatibility concerns when changing\nany RNG since the only expectation is it produces bits\nindistinguishable from random.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 83,
                  "endLine": 223,
                  "endColumn": 88,
                  "snippet": {
                    "text": "\n   Returns tuple of salt, iterations, and psk\n\n.. py:function:: pbkdf_timed(algo, password, out_len, ms_to_run = 300, salt = rng().get(12))\n\n   Runs for as many iterations as needed to consumed ms_to_run\n   milliseconds on whatever we're running on. Returns tuple of salt,\n",
                    "rendered": {
                      "text": "\n   Returns tuple of salt, iterations, and psk\n\n.. py:function:: pbkdf_timed(algo, password, out_len, ms_to_run = 300, salt = rng().get(12))\n\n   Runs for as many iterations as needed to consumed ms_to_run\n   milliseconds on whatever we're running on. Returns tuple of salt,\n",
                      "markdown": "`\n   Returns tuple of salt, iterations, and psk\n\n.. py:function:: pbkdf_timed(algo, password, out_len, ms_to_run = 300, salt = rng().get(12))\n\n   Runs for as many iterations as needed to consumed ms_to_run\n   milliseconds on whatever we're running on. Returns tuple of salt,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 78,
                  "endLine": 47,
                  "endColumn": 83,
                  "snippet": {
                    "text": "     rng). The system RNG is very cheap to create, as just a single file\n     handle or CSP handle is kept open, from first use until shutdown,\n     no matter how many 'system' rng instances are created. Thus it is\n     easy to use the RNG in a one-off way, with `botan.RandomNumberGenerator().get(32)`.\n\n   .. py:method:: get(length)\n\n",
                    "rendered": {
                      "text": "     rng). The system RNG is very cheap to create, as just a single file\n     handle or CSP handle is kept open, from first use until shutdown,\n     no matter how many 'system' rng instances are created. Thus it is\n     easy to use the RNG in a one-off way, with `botan.RandomNumberGenerator().get(32)`.\n\n   .. py:method:: get(length)\n\n",
                      "markdown": "`     rng). The system RNG is very cheap to create, as just a single file\n     handle or CSP handle is kept open, from first use until shutdown,\n     no matter how many 'system' rng instances are created. Thus it is\n     easy to use the RNG in a one-off way, with `botan.RandomNumberGenerator().get(32)`.\n\n   .. py:method:: get(length)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 15,
                  "endLine": 340,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n.. py:class:: PrivateKey\n\n  Previously ``private_key``\n\n  .. py:classmethod:: create(algo, param, rng)\n\n",
                    "rendered": {
                      "text": "\n.. py:class:: PrivateKey\n\n  Previously ``private_key``\n\n  .. py:classmethod:: create(algo, param, rng)\n\n",
                      "markdown": "`\n.. py:class:: PrivateKey\n\n  Previously ``private_key``\n\n  .. py:classmethod:: create(algo, param, rng)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 14,
                  "endLine": 338,
                  "endColumn": 24,
                  "snippet": {
                    "text": "Private Key\n----------------------------------------\n\n.. py:class:: PrivateKey\n\n  Previously ``private_key``\n\n",
                    "rendered": {
                      "text": "Private Key\n----------------------------------------\n\n.. py:class:: PrivateKey\n\n  Previously ``private_key``\n\n",
                      "markdown": "`Private Key\n----------------------------------------\n\n.. py:class:: PrivateKey\n\n  Previously ``private_key``\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 58,
                  "endLine": 236,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n.. py:function:: scrypt(out_len, password, salt, N=1024, r=8, p=8)\n\n   Runs Scrypt key derivation function over the specified password\n   and salt using Scrypt parameters N, r, p.\n\nKDF\n",
                    "rendered": {
                      "text": "\n.. py:function:: scrypt(out_len, password, salt, N=1024, r=8, p=8)\n\n   Runs Scrypt key derivation function over the specified password\n   and salt using Scrypt parameters N, r, p.\n\nKDF\n",
                      "markdown": "`\n.. py:function:: scrypt(out_len, password, salt, N=1024, r=8, p=8)\n\n   Runs Scrypt key derivation function over the specified password\n   and salt using Scrypt parameters N, r, p.\n\nKDF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 33,
                  "endLine": 234,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n.. versionadded:: 2.8.0\n\n.. py:function:: scrypt(out_len, password, salt, N=1024, r=8, p=8)\n\n   Runs Scrypt key derivation function over the specified password\n   and salt using Scrypt parameters N, r, p.\n",
                    "rendered": {
                      "text": "\n.. versionadded:: 2.8.0\n\n.. py:function:: scrypt(out_len, password, salt, N=1024, r=8, p=8)\n\n   Runs Scrypt key derivation function over the specified password\n   and salt using Scrypt parameters N, r, p.\n",
                      "markdown": "`\n.. versionadded:: 2.8.0\n\n.. py:function:: scrypt(out_len, password, salt, N=1024, r=8, p=8)\n\n   Runs Scrypt key derivation function over the specified password\n   and salt using Scrypt parameters N, r, p.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 35,
                  "endLine": 223,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n   Returns tuple of salt, iterations, and psk\n\n.. py:function:: pbkdf_timed(algo, password, out_len, ms_to_run = 300, salt = rng().get(12))\n\n   Runs for as many iterations as needed to consumed ms_to_run\n   milliseconds on whatever we're running on. Returns tuple of salt,\n",
                    "rendered": {
                      "text": "\n   Returns tuple of salt, iterations, and psk\n\n.. py:function:: pbkdf_timed(algo, password, out_len, ms_to_run = 300, salt = rng().get(12))\n\n   Runs for as many iterations as needed to consumed ms_to_run\n   milliseconds on whatever we're running on. Returns tuple of salt,\n",
                      "markdown": "`\n   Returns tuple of salt, iterations, and psk\n\n.. py:function:: pbkdf_timed(algo, password, out_len, ms_to_run = 300, salt = rng().get(12))\n\n   Runs for as many iterations as needed to consumed ms_to_run\n   milliseconds on whatever we're running on. Returns tuple of salt,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 29,
                  "endLine": 210,
                  "endColumn": 37,
                  "snippet": {
                    "text": "PBKDF\n----------------------------------------\n\n.. py:function:: pbkdf(algo, password, out_len, iterations = 100000, salt = None)\n\n   Runs a PBKDF2 algo specified as a string (eg 'PBKDF2(SHA-256)',\n   'PBKDF2(CMAC(Blowfish))').  Runs with specified iterations, with\n",
                    "rendered": {
                      "text": "PBKDF\n----------------------------------------\n\n.. py:function:: pbkdf(algo, password, out_len, iterations = 100000, salt = None)\n\n   Runs a PBKDF2 algo specified as a string (eg 'PBKDF2(SHA-256)',\n   'PBKDF2(CMAC(Blowfish))').  Runs with specified iterations, with\n",
                      "markdown": "`PBKDF\n----------------------------------------\n\n.. py:function:: pbkdf(algo, password, out_len, iterations = 100000, salt = None)\n\n   Runs a PBKDF2 algo specified as a string (eg 'PBKDF2(SHA-256)',\n   'PBKDF2(CMAC(Blowfish))').  Runs with specified iterations, with\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 11,
                  "endLine": 205,
                  "endColumn": 19,
                  "snippet": {
                    "text": ".. py:function:: check_bcrypt(passwd, bcrypt)\n\n   Check a bcrypt hash against the provided password, returning True\n   iff the password matches.\n\nPBKDF\n----------------------------------------\n",
                    "rendered": {
                      "text": ".. py:function:: check_bcrypt(passwd, bcrypt)\n\n   Check a bcrypt hash against the provided password, returning True\n   iff the password matches.\n\nPBKDF\n----------------------------------------\n",
                      "markdown": "`.. py:function:: check_bcrypt(passwd, bcrypt)\n\n   Check a bcrypt hash against the provided password, returning True\n   iff the password matches.\n\nPBKDF\n----------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 44,
                  "endLine": 204,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n.. py:function:: check_bcrypt(passwd, bcrypt)\n\n   Check a bcrypt hash against the provided password, returning True\n   iff the password matches.\n\nPBKDF\n",
                    "rendered": {
                      "text": "\n.. py:function:: check_bcrypt(passwd, bcrypt)\n\n   Check a bcrypt hash against the provided password, returning True\n   iff the password matches.\n\nPBKDF\n",
                      "markdown": "`\n.. py:function:: check_bcrypt(passwd, bcrypt)\n\n   Check a bcrypt hash against the provided password, returning True\n   iff the password matches.\n\nPBKDF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 16,
                  "endLine": 200,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n.. py:function:: bcrypt(passwd, rng, work_factor = 10)\n\n   Provided the password and an RNG object, returns a bcrypt string\n\n.. py:function:: check_bcrypt(passwd, bcrypt)\n\n",
                    "rendered": {
                      "text": "\n.. py:function:: bcrypt(passwd, rng, work_factor = 10)\n\n   Provided the password and an RNG object, returns a bcrypt string\n\n.. py:function:: check_bcrypt(passwd, bcrypt)\n\n",
                      "markdown": "`\n.. py:function:: bcrypt(passwd, rng, work_factor = 10)\n\n   Provided the password and an RNG object, returns a bcrypt string\n\n.. py:function:: check_bcrypt(passwd, bcrypt)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 11,
                  "endLine": 638,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      Setting to 110 requires 2048-bit RSA and SHA-256 or higher. Set to zero\n      to accept a default.\n\n      If ``hostname`` is given, it will be checked against the certificates CN field.\n\n      Set ``reference_time`` to be the time which the certificate chain is\n      validated against. Use zero (default) to use the current system clock.\n",
                    "rendered": {
                      "text": "      Setting to 110 requires 2048-bit RSA and SHA-256 or higher. Set to zero\n      to accept a default.\n\n      If ``hostname`` is given, it will be checked against the certificates CN field.\n\n      Set ``reference_time`` to be the time which the certificate chain is\n      validated against. Use zero (default) to use the current system clock.\n",
                      "markdown": "`      Setting to 110 requires 2048-bit RSA and SHA-256 or higher. Set to zero\n      to accept a default.\n\n      If ``hostname`` is given, it will be checked against the certificates CN field.\n\n      Set ``reference_time`` to be the time which the certificate chain is\n      validated against. Use zero (default) to use the current system clock.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 619,
                  "startColumn": 18,
                  "endLine": 619,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                  trusted=None, \\\n                  trusted_path=None, \\\n                  required_strength=0, \\\n                  hostname=None, \\\n                  reference_time=0 \\\n                  crls=None)\n\n",
                    "rendered": {
                      "text": "                  trusted=None, \\\n                  trusted_path=None, \\\n                  required_strength=0, \\\n                  hostname=None, \\\n                  reference_time=0 \\\n                  crls=None)\n\n",
                      "markdown": "`                  trusted=None, \\\n                  trusted_path=None, \\\n                  required_strength=0, \\\n                  hostname=None, \\\n                  reference_time=0 \\\n                  crls=None)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 599,
                  "startColumn": 85,
                  "endLine": 599,
                  "endColumn": 93,
                  "snippet": {
                    "text": "\n   .. py:method:: hostname_match(hostname)\n\n      Return True if the Common Name (CN) field of the certificate matches a given ``hostname``.\n\n   .. py:method:: not_before()\n\n",
                    "rendered": {
                      "text": "\n   .. py:method:: hostname_match(hostname)\n\n      Return True if the Common Name (CN) field of the certificate matches a given ``hostname``.\n\n   .. py:method:: not_before()\n\n",
                      "markdown": "`\n   .. py:method:: hostname_match(hostname)\n\n      Return True if the Common Name (CN) field of the certificate matches a given ``hostname``.\n\n   .. py:method:: not_before()\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 33,
                  "endLine": 597,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n      ``key`` specifies a value to get, for instance ``\"Name\"`` or `\"Country\"`.\n\n   .. py:method:: hostname_match(hostname)\n\n      Return True if the Common Name (CN) field of the certificate matches a given ``hostname``.\n\n",
                    "rendered": {
                      "text": "\n      ``key`` specifies a value to get, for instance ``\"Name\"`` or `\"Country\"`.\n\n   .. py:method:: hostname_match(hostname)\n\n      Return True if the Common Name (CN) field of the certificate matches a given ``hostname``.\n\n",
                      "markdown": "`\n      ``key`` specifies a value to get, for instance ``\"Name\"`` or `\"Country\"`.\n\n   .. py:method:: hostname_match(hostname)\n\n      Return True if the Common Name (CN) field of the certificate matches a given ``hostname``.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 18,
                  "endLine": 597,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n      ``key`` specifies a value to get, for instance ``\"Name\"`` or `\"Country\"`.\n\n   .. py:method:: hostname_match(hostname)\n\n      Return True if the Common Name (CN) field of the certificate matches a given ``hostname``.\n\n",
                    "rendered": {
                      "text": "\n      ``key`` specifies a value to get, for instance ``\"Name\"`` or `\"Country\"`.\n\n   .. py:method:: hostname_match(hostname)\n\n      Return True if the Common Name (CN) field of the certificate matches a given ``hostname``.\n\n",
                      "markdown": "`\n      ``key`` specifies a value to get, for instance ``\"Name\"`` or `\"Country\"`.\n\n   .. py:method:: hostname_match(hostname)\n\n      Return True if the Common Name (CN) field of the certificate matches a given ``hostname``.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 49,
                  "endLine": 186,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n       Consumes input text and returns output. Input text must be of\n       update_granularity() length.  Alternately, always call finish\n       with the entire message, avoiding calls to update entirely\n\n    .. py:method:: finish(txt = None)\n\n",
                    "rendered": {
                      "text": "\n       Consumes input text and returns output. Input text must be of\n       update_granularity() length.  Alternately, always call finish\n       with the entire message, avoiding calls to update entirely\n\n    .. py:method:: finish(txt = None)\n\n",
                      "markdown": "`\n       Consumes input text and returns output. Input text must be of\n       update_granularity() length.  Alternately, always call finish\n       with the entire message, avoiding calls to update entirely\n\n    .. py:method:: finish(txt = None)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 14,
                  "endLine": 155,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    .. py:method:: update_granularity()\n\n       Returns update block size. Call to update() must provide input\n       of exactly this many bytes\n\n    .. py:method:: is_authenticated()\n",
                    "rendered": {
                      "text": "\n    .. py:method:: update_granularity()\n\n       Returns update block size. Call to update() must provide input\n       of exactly this many bytes\n\n    .. py:method:: is_authenticated()\n",
                      "markdown": "`\n    .. py:method:: update_granularity()\n\n       Returns update block size. Call to update() must provide input\n       of exactly this many bytes\n\n    .. py:method:: is_authenticated()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 38,
                  "endLine": 640,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n      If ``hostname`` is given, it will be checked against the certificates CN field.\n\n      Set ``reference_time`` to be the time which the certificate chain is\n      validated against. Use zero (default) to use the current system clock.\n\n      ``crls`` is a list of CRLs issued by either trusted or untrusted authorities.\n",
                    "rendered": {
                      "text": "\n      If ``hostname`` is given, it will be checked against the certificates CN field.\n\n      Set ``reference_time`` to be the time which the certificate chain is\n      validated against. Use zero (default) to use the current system clock.\n\n      ``crls`` is a list of CRLs issued by either trusted or untrusted authorities.\n",
                      "markdown": "`\n      If ``hostname`` is given, it will be checked against the certificates CN field.\n\n      Set ``reference_time`` to be the time which the certificate chain is\n      validated against. Use zero (default) to use the current system clock.\n\n      ``crls`` is a list of CRLs issued by either trusted or untrusted authorities.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 607,
                  "startColumn": 16,
                  "endLine": 607,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n   .. py:method:: not_after()\n\n      Return the time the certificate expires, as seconds since epoch.\n\n   .. py:method:: allowed_usage(usage_list)\n\n",
                    "rendered": {
                      "text": "\n   .. py:method:: not_after()\n\n      Return the time the certificate expires, as seconds since epoch.\n\n   .. py:method:: allowed_usage(usage_list)\n\n",
                      "markdown": "`\n   .. py:method:: not_after()\n\n      Return the time the certificate expires, as seconds since epoch.\n\n   .. py:method:: allowed_usage(usage_list)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 16,
                  "endLine": 603,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n   .. py:method:: not_before()\n\n      Return the time the certificate becomes valid, as seconds since epoch.\n\n   .. py:method:: not_after()\n\n",
                    "rendered": {
                      "text": "\n   .. py:method:: not_before()\n\n      Return the time the certificate becomes valid, as seconds since epoch.\n\n   .. py:method:: not_after()\n\n",
                      "markdown": "`\n   .. py:method:: not_before()\n\n      Return the time the certificate becomes valid, as seconds since epoch.\n\n   .. py:method:: not_after()\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 75,
                  "endLine": 552,
                  "endColumn": 81,
                  "snippet": {
                    "text": "   .. py:method:: time_expires()\n\n      Return the time the certificate expires, as a string in form\n      \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n      relative to UTC.\n\n   .. py:method:: to_string()\n",
                    "rendered": {
                      "text": "   .. py:method:: time_expires()\n\n      Return the time the certificate expires, as a string in form\n      \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n      relative to UTC.\n\n   .. py:method:: to_string()\n",
                      "markdown": "`   .. py:method:: time_expires()\n\n      Return the time the certificate expires, as a string in form\n      \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n      relative to UTC.\n\n   .. py:method:: to_string()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 551,
                  "startColumn": 16,
                  "endLine": 551,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n   .. py:method:: time_expires()\n\n      Return the time the certificate expires, as a string in form\n      \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n      relative to UTC.\n\n",
                    "rendered": {
                      "text": "\n   .. py:method:: time_expires()\n\n      Return the time the certificate expires, as a string in form\n      \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n      relative to UTC.\n\n",
                      "markdown": "`\n   .. py:method:: time_expires()\n\n      Return the time the certificate expires, as a string in form\n      \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n      relative to UTC.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 546,
                  "startColumn": 75,
                  "endLine": 546,
                  "endColumn": 81,
                  "snippet": {
                    "text": "   .. py:method:: time_starts()\n\n      Return the time the certificate becomes valid, as a string in form\n      \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n      relative to UTC.\n\n   .. py:method:: time_expires()\n",
                    "rendered": {
                      "text": "   .. py:method:: time_starts()\n\n      Return the time the certificate becomes valid, as a string in form\n      \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n      relative to UTC.\n\n   .. py:method:: time_expires()\n",
                      "markdown": "`   .. py:method:: time_starts()\n\n      Return the time the certificate becomes valid, as a string in form\n      \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n      relative to UTC.\n\n   .. py:method:: time_expires()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/python.rst"
                },
                "region": {
                  "startLine": 545,
                  "startColumn": 16,
                  "endLine": 545,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n   .. py:method:: time_starts()\n\n      Return the time the certificate becomes valid, as a string in form\n      \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n      relative to UTC.\n\n",
                    "rendered": {
                      "text": "\n   .. py:method:: time_starts()\n\n      Return the time the certificate becomes valid, as a string in form\n      \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n      relative to UTC.\n\n",
                      "markdown": "`\n   .. py:method:: time_starts()\n\n      Return the time the certificate becomes valid, as a string in form\n      \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n      relative to UTC.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 58,
                  "endLine": 212,
                  "endColumn": 66,
                  "snippet": {
                    "text": "   10000 * ``work_factor`` PBKDF2 iterations, using 96 bits of salt taken from\n   ``rng``. Using work factor of 10 or more is recommended.\n\n.. cpp:function:: bool check_passhash9(const std::string& password, \\\n   const std::string& hash)\n\n   Functions much like ``check_bcrypt``\n",
                    "rendered": {
                      "text": "   10000 * ``work_factor`` PBKDF2 iterations, using 96 bits of salt taken from\n   ``rng``. Using work factor of 10 or more is recommended.\n\n.. cpp:function:: bool check_passhash9(const std::string& password, \\\n   const std::string& hash)\n\n   Functions much like ``check_bcrypt``\n",
                      "markdown": "`   10000 * ``work_factor`` PBKDF2 iterations, using 96 bits of salt taken from\n   ``rng``. Using work factor of 10 or more is recommended.\n\n.. cpp:function:: bool check_passhash9(const std::string& password, \\\n   const std::string& hash)\n\n   Functions much like ``check_bcrypt``\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 68,
                  "endLine": 201,
                  "endColumn": 76,
                  "snippet": {
                    "text": "   This password format string (\"$9$\") conflicts with the format used\n   for scrypt password hashes on Cisco systems.\n\n.. cpp:function:: std::string generate_passhash9(const std::string& password, \\\n   RandomNumberGenerator& rng, uint16_t work_factor = 15, uint8_t alg_id = 4)\n\n   Functions much like ``generate_bcrypt``. The last parameter,\n",
                    "rendered": {
                      "text": "   This password format string (\"$9$\") conflicts with the format used\n   for scrypt password hashes on Cisco systems.\n\n.. cpp:function:: std::string generate_passhash9(const std::string& password, \\\n   RandomNumberGenerator& rng, uint16_t work_factor = 15, uint8_t alg_id = 4)\n\n   Functions much like ``generate_bcrypt``. The last parameter,\n",
                      "markdown": "`   This password format string (\"$9$\") conflicts with the format used\n   for scrypt password hashes on Cisco systems.\n\n.. cpp:function:: std::string generate_passhash9(const std::string& password, \\\n   RandomNumberGenerator& rng, uint16_t work_factor = 15, uint8_t alg_id = 4)\n\n   Functions much like ``generate_bcrypt``. The last parameter,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 14,
                  "endLine": 199,
                  "endColumn": 22,
                  "snippet": {
                    "text": ".. warning::\n\n   This password format string (\"$9$\") conflicts with the format used\n   for scrypt password hashes on Cisco systems.\n\n.. cpp:function:: std::string generate_passhash9(const std::string& password, \\\n   RandomNumberGenerator& rng, uint16_t work_factor = 15, uint8_t alg_id = 4)\n",
                    "rendered": {
                      "text": ".. warning::\n\n   This password format string (\"$9$\") conflicts with the format used\n   for scrypt password hashes on Cisco systems.\n\n.. cpp:function:: std::string generate_passhash9(const std::string& password, \\\n   RandomNumberGenerator& rng, uint16_t work_factor = 15, uint8_t alg_id = 4)\n",
                      "markdown": "`.. warning::\n\n   This password format string (\"$9$\") conflicts with the format used\n   for scrypt password hashes on Cisco systems.\n\n.. cpp:function:: std::string generate_passhash9(const std::string& password, \\\n   RandomNumberGenerator& rng, uint16_t work_factor = 15, uint8_t alg_id = 4)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 8,
                  "endLine": 198,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n.. warning::\n\n   This password format string (\"$9$\") conflicts with the format used\n   for scrypt password hashes on Cisco systems.\n\n.. cpp:function:: std::string generate_passhash9(const std::string& password, \\\n",
                    "rendered": {
                      "text": "\n.. warning::\n\n   This password format string (\"$9$\") conflicts with the format used\n   for scrypt password hashes on Cisco systems.\n\n.. cpp:function:: std::string generate_passhash9(const std::string& password, \\\n",
                      "markdown": "`\n.. warning::\n\n   This password format string (\"$9$\") conflicts with the format used\n   for scrypt password hashes on Cisco systems.\n\n.. cpp:function:: std::string generate_passhash9(const std::string& password, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 20,
                  "endLine": 194,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nThis function should be secure with the proper parameters, and will remain in\nthe library for the foreseeable future, but it is specific to Botan rather than\nbeing a widely used password hash. Prefer bcrypt or Argon2.\n\n.. warning::\n\n",
                    "rendered": {
                      "text": "\nThis function should be secure with the proper parameters, and will remain in\nthe library for the foreseeable future, but it is specific to Botan rather than\nbeing a widely used password hash. Prefer bcrypt or Argon2.\n\n.. warning::\n\n",
                      "markdown": "`\nThis function should be secure with the proper parameters, and will remain in\nthe library for the foreseeable future, but it is specific to Botan rather than\nbeing a widely used password hash. Prefer bcrypt or Argon2.\n\n.. warning::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 22,
                  "endLine": 185,
                  "endColumn": 30,
                  "snippet": {
                    "text": "Passhash9\n----------------------------------------\n\nBotan also provides a password hashing technique called passhash9, in\n``passhash9.h``, which is based on PBKDF2.\n\nPasshash9 hashes look like::\n",
                    "rendered": {
                      "text": "Passhash9\n----------------------------------------\n\nBotan also provides a password hashing technique called passhash9, in\n``passhash9.h``, which is based on PBKDF2.\n\nPasshash9 hashes look like::\n",
                      "markdown": "`Passhash9\n----------------------------------------\n\nBotan also provides a password hashing technique called passhash9, in\n``passhash9.h``, which is based on PBKDF2.\n\nPasshash9 hashes look like::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 3,
                  "endLine": 177,
                  "endColumn": 11,
                  "snippet": {
                    "text": "   const std::string& hash)\n\n   Takes a password and a bcrypt output and returns true if the\n   password is the same as the one that was used to generate the\n   bcrypt hash.\n\n.. _passhash9:\n",
                    "rendered": {
                      "text": "   const std::string& hash)\n\n   Takes a password and a bcrypt output and returns true if the\n   password is the same as the one that was used to generate the\n   bcrypt hash.\n\n.. _passhash9:\n",
                      "markdown": "`   const std::string& hash)\n\n   Takes a password and a bcrypt output and returns true if the\n   password is the same as the one that was used to generate the\n   bcrypt hash.\n\n.. _passhash9:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 11,
                  "endLine": 176,
                  "endColumn": 19,
                  "snippet": {
                    "text": ".. cpp:function:: bool check_bcrypt(const std::string& password, \\\n   const std::string& hash)\n\n   Takes a password and a bcrypt output and returns true if the\n   password is the same as the one that was used to generate the\n   bcrypt hash.\n\n",
                    "rendered": {
                      "text": ".. cpp:function:: bool check_bcrypt(const std::string& password, \\\n   const std::string& hash)\n\n   Takes a password and a bcrypt output and returns true if the\n   password is the same as the one that was used to generate the\n   bcrypt hash.\n\n",
                      "markdown": "`.. cpp:function:: bool check_bcrypt(const std::string& password, \\\n   const std::string& hash)\n\n   Takes a password and a bcrypt output and returns true if the\n   password is the same as the one that was used to generate the\n   bcrypt hash.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 55,
                  "endLine": 173,
                  "endColumn": 63,
                  "snippet": {
                    "text": "   rejects all work factors greater than 18 since even that work factor requires\n   roughly 15 seconds of computation on a fast machine.\n\n.. cpp:function:: bool check_bcrypt(const std::string& password, \\\n   const std::string& hash)\n\n   Takes a password and a bcrypt output and returns true if the\n",
                    "rendered": {
                      "text": "   rejects all work factors greater than 18 since even that work factor requires\n   roughly 15 seconds of computation on a fast machine.\n\n.. cpp:function:: bool check_bcrypt(const std::string& password, \\\n   const std::string& hash)\n\n   Takes a password and a bcrypt output and returns true if the\n",
                      "markdown": "`   rejects all work factors greater than 18 since even that work factor requires\n   roughly 15 seconds of computation on a fast machine.\n\n.. cpp:function:: bool check_bcrypt(const std::string& password, \\\n   const std::string& hash)\n\n   Takes a password and a bcrypt output and returns true if the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 49,
                  "endLine": 156,
                  "endColumn": 57,
                  "snippet": {
                    "text": "   high value administrator passwords, consider using work factor 15 or 16; at\n   these work factors each bcrypt computation takes several seconds. Since admin\n   logins will be relatively uncommon, it might be acceptable for each login\n   attempt to take some time. As of 2018, a good password cracking rig (with 8\n   NVIDIA 1080 cards) can attempt about 1 billion bcrypt computations per month\n   for work factor 13. For work factor 12, it can do twice as many.  For work\n   factor 15, it can do only one quarter as many attempts.\n",
                    "rendered": {
                      "text": "   high value administrator passwords, consider using work factor 15 or 16; at\n   these work factors each bcrypt computation takes several seconds. Since admin\n   logins will be relatively uncommon, it might be acceptable for each login\n   attempt to take some time. As of 2018, a good password cracking rig (with 8\n   NVIDIA 1080 cards) can attempt about 1 billion bcrypt computations per month\n   for work factor 13. For work factor 12, it can do twice as many.  For work\n   factor 15, it can do only one quarter as many attempts.\n",
                      "markdown": "`   high value administrator passwords, consider using work factor 15 or 16; at\n   these work factors each bcrypt computation takes several seconds. Since admin\n   logins will be relatively uncommon, it might be acceptable for each login\n   attempt to take some time. As of 2018, a good password cracking rig (with 8\n   NVIDIA 1080 cards) can attempt about 1 billion bcrypt computations per month\n   for work factor 13. For work factor 12, it can do twice as many.  For work\n   factor 15, it can do only one quarter as many attempts.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 28,
                  "endLine": 153,
                  "endColumn": 36,
                  "snippet": {
                    "text": "   It is recommended to set the work factor as high as your system can tolerate\n   (from a performance and latency perspective) since higher work factors greatly\n   improve the security against GPU-based attacks.  For example, for protecting\n   high value administrator passwords, consider using work factor 15 or 16; at\n   these work factors each bcrypt computation takes several seconds. Since admin\n   logins will be relatively uncommon, it might be acceptable for each login\n   attempt to take some time. As of 2018, a good password cracking rig (with 8\n",
                    "rendered": {
                      "text": "   It is recommended to set the work factor as high as your system can tolerate\n   (from a performance and latency perspective) since higher work factors greatly\n   improve the security against GPU-based attacks.  For example, for protecting\n   high value administrator passwords, consider using work factor 15 or 16; at\n   these work factors each bcrypt computation takes several seconds. Since admin\n   logins will be relatively uncommon, it might be acceptable for each login\n   attempt to take some time. As of 2018, a good password cracking rig (with 8\n",
                      "markdown": "`   It is recommended to set the work factor as high as your system can tolerate\n   (from a performance and latency perspective) since higher work factors greatly\n   improve the security against GPU-based attacks.  For example, for protecting\n   high value administrator passwords, consider using work factor 15 or 16; at\n   these work factors each bcrypt computation takes several seconds. Since admin\n   logins will be relatively uncommon, it might be acceptable for each login\n   attempt to take some time. As of 2018, a good password cracking rig (with 8\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 17,
                  "endLine": 143,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                    char bcrypt_version = \"a\")\n\n   Takes the password to hash, a rng, and a work factor.\n   The resulting password hash is returned as a string.\n\n   Higher work factors increase the amount of time the algorithm runs,\n   increasing the cost of cracking attempts. The increase is exponential, so a\n",
                    "rendered": {
                      "text": "                    char bcrypt_version = \"a\")\n\n   Takes the password to hash, a rng, and a work factor.\n   The resulting password hash is returned as a string.\n\n   Higher work factors increase the amount of time the algorithm runs,\n   increasing the cost of cracking attempts. The increase is exponential, so a\n",
                      "markdown": "`                    char bcrypt_version = \"a\")\n\n   Takes the password to hash, a rng, and a work factor.\n   The resulting password hash is returned as a string.\n\n   Higher work factors increase the amount of time the algorithm runs,\n   increasing the cost of cracking attempts. The increase is exponential, so a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 13,
                  "endLine": 142,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                    uint16_t work_factor = 12, \\\n                    char bcrypt_version = \"a\")\n\n   Takes the password to hash, a rng, and a work factor.\n   The resulting password hash is returned as a string.\n\n   Higher work factors increase the amount of time the algorithm runs,\n",
                    "rendered": {
                      "text": "                    uint16_t work_factor = 12, \\\n                    char bcrypt_version = \"a\")\n\n   Takes the password to hash, a rng, and a work factor.\n   The resulting password hash is returned as a string.\n\n   Higher work factors increase the amount of time the algorithm runs,\n",
                      "markdown": "`                    uint16_t work_factor = 12, \\\n                    char bcrypt_version = \"a\")\n\n   Takes the password to hash, a rng, and a work factor.\n   The resulting password hash is returned as a string.\n\n   Higher work factors increase the amount of time the algorithm runs,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 65,
                  "endLine": 137,
                  "endColumn": 73,
                  "snippet": {
                    "text": "   might cause interop problems if another library needs to validate the\n   password hashes.)\n\n.. cpp:function:: std::string generate_bcrypt(const std::string& password, \\\n                    RandomNumberGenerator& rng, \\\n                    uint16_t work_factor = 12, \\\n                    char bcrypt_version = \"a\")\n",
                    "rendered": {
                      "text": "   might cause interop problems if another library needs to validate the\n   password hashes.)\n\n.. cpp:function:: std::string generate_bcrypt(const std::string& password, \\\n                    RandomNumberGenerator& rng, \\\n                    uint16_t work_factor = 12, \\\n                    char bcrypt_version = \"a\")\n",
                      "markdown": "`   might cause interop problems if another library needs to validate the\n   password hashes.)\n\n.. cpp:function:: std::string generate_bcrypt(const std::string& password, \\\n                    RandomNumberGenerator& rng, \\\n                    uint16_t work_factor = 12, \\\n                    char bcrypt_version = \"a\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 3,
                  "endLine": 135,
                  "endColumn": 11,
                  "snippet": {
                    "text": "   bcrypt implementation will hash whatever values are given in the\n   ``std::string`` including any embedded NULLs so this is not an issue, but\n   might cause interop problems if another library needs to validate the\n   password hashes.)\n\n.. cpp:function:: std::string generate_bcrypt(const std::string& password, \\\n                    RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": "   bcrypt implementation will hash whatever values are given in the\n   ``std::string`` including any embedded NULLs so this is not an issue, but\n   might cause interop problems if another library needs to validate the\n   password hashes.)\n\n.. cpp:function:: std::string generate_bcrypt(const std::string& password, \\\n                    RandomNumberGenerator& rng, \\\n",
                      "markdown": "`   bcrypt implementation will hash whatever values are given in the\n   ``std::string`` including any embedded NULLs so this is not an issue, but\n   might cause interop problems if another library needs to validate the\n   password hashes.)\n\n.. cpp:function:: std::string generate_bcrypt(const std::string& password, \\\n                    RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 59,
                  "endLine": 130,
                  "endColumn": 67,
                  "snippet": {
                    "text": "   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n   ``std::string`` including any embedded NULLs so this is not an issue, but\n",
                    "rendered": {
                      "text": "   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n   ``std::string`` including any embedded NULLs so this is not an issue, but\n",
                      "markdown": "`   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n   ``std::string`` including any embedded NULLs so this is not an issue, but\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 7,
                  "endLine": 130,
                  "endColumn": 15,
                  "snippet": {
                    "text": "   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n   ``std::string`` including any embedded NULLs so this is not an issue, but\n",
                    "rendered": {
                      "text": "   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n   ``std::string`` including any embedded NULLs so this is not an issue, but\n",
                      "markdown": "`   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n   ``std::string`` including any embedded NULLs so this is not an issue, but\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 68,
                  "endLine": 128,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\n   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n",
                    "rendered": {
                      "text": "\n   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n",
                      "markdown": "`\n   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 18,
                  "endLine": 128,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n",
                    "rendered": {
                      "text": "\n   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n",
                      "markdown": "`\n   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 36,
                  "endLine": 126,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n.. note::\n\n   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n",
                    "rendered": {
                      "text": "\n.. note::\n\n   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n",
                      "markdown": "`\n.. note::\n\n   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 36,
                  "endLine": 117,
                  "endColumn": 44,
                  "snippet": {
                    "text": "other implementations exist. It is made available by including ``bcrypt.h``.\n\nIt has the advantage that it requires a small amount (4K) of fast RAM\nto compute, which can make hardware password cracking somewhat more\nexpensive.\n\nBcrypt provides outputs that look like this::\n",
                    "rendered": {
                      "text": "other implementations exist. It is made available by including ``bcrypt.h``.\n\nIt has the advantage that it requires a small amount (4K) of fast RAM\nto compute, which can make hardware password cracking somewhat more\nexpensive.\n\nBcrypt provides outputs that look like this::\n",
                      "markdown": "`other implementations exist. It is made available by including ``bcrypt.h``.\n\nIt has the advantage that it requires a small amount (4K) of fast RAM\nto compute, which can make hardware password cracking somewhat more\nexpensive.\n\nBcrypt provides outputs that look like this::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113,
                  "endColumn": 8,
                  "snippet": {
                    "text": "----------------------------------------\n\n`Bcrypt <https://www.usenix.org/legacy/event/usenix99/provos/provos.pdf>`_ is a\npassword hashing scheme originally designed for use in OpenBSD, but numerous\nother implementations exist. It is made available by including ``bcrypt.h``.\n\nIt has the advantage that it requires a small amount (4K) of fast RAM\n",
                    "rendered": {
                      "text": "----------------------------------------\n\n`Bcrypt <https://www.usenix.org/legacy/event/usenix99/provos/provos.pdf>`_ is a\npassword hashing scheme originally designed for use in OpenBSD, but numerous\nother implementations exist. It is made available by including ``bcrypt.h``.\n\nIt has the advantage that it requires a small amount (4K) of fast RAM\n",
                      "markdown": "`----------------------------------------\n\n`Bcrypt <https://www.usenix.org/legacy/event/usenix99/provos/provos.pdf>`_ is a\npassword hashing scheme originally designed for use in OpenBSD, but numerous\nother implementations exist. It is made available by including ``bcrypt.h``.\n\nIt has the advantage that it requires a small amount (4K) of fast RAM\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 55,
                  "endLine": 106,
                  "endColumn": 63,
                  "snippet": {
                    "text": ".. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n                                           const std::string& hash)\n\n   Verify an Argon2 password hash against the provided password. Returns false if\n   the input hash seems malformed or if the computed hash does not match.\n\nBcrypt\n",
                    "rendered": {
                      "text": ".. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n                                           const std::string& hash)\n\n   Verify an Argon2 password hash against the provided password. Returns false if\n   the input hash seems malformed or if the computed hash does not match.\n\nBcrypt\n",
                      "markdown": "`.. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n                                           const std::string& hash)\n\n   Verify an Argon2 password hash against the provided password. Returns false if\n   the input hash seems malformed or if the computed hash does not match.\n\nBcrypt\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 20,
                  "endLine": 106,
                  "endColumn": 28,
                  "snippet": {
                    "text": ".. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n                                           const std::string& hash)\n\n   Verify an Argon2 password hash against the provided password. Returns false if\n   the input hash seems malformed or if the computed hash does not match.\n\nBcrypt\n",
                    "rendered": {
                      "text": ".. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n                                           const std::string& hash)\n\n   Verify an Argon2 password hash against the provided password. Returns false if\n   the input hash seems malformed or if the computed hash does not match.\n\nBcrypt\n",
                      "markdown": "`.. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n                                           const std::string& hash)\n\n   Verify an Argon2 password hash against the provided password. Returns false if\n   the input hash seems malformed or if the computed hash does not match.\n\nBcrypt\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 72,
                  "endLine": 103,
                  "endColumn": 80,
                  "snippet": {
                    "text": "   Generate an Argon2 hash of the specified password. The ``y`` parameter specifies\n   the variant: 0 for Argon2d, 1 for Argon2i, and 2 for Argon2id.\n\n.. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n                                           const std::string& hash)\n\n   Verify an Argon2 password hash against the provided password. Returns false if\n",
                    "rendered": {
                      "text": "   Generate an Argon2 hash of the specified password. The ``y`` parameter specifies\n   the variant: 0 for Argon2d, 1 for Argon2i, and 2 for Argon2id.\n\n.. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n                                           const std::string& hash)\n\n   Verify an Argon2 password hash against the provided password. Returns false if\n",
                      "markdown": "`   Generate an Argon2 hash of the specified password. The ``y`` parameter specifies\n   the variant: 0 for Argon2d, 1 for Argon2i, and 2 for Argon2id.\n\n.. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n                                           const std::string& hash)\n\n   Verify an Argon2 password hash against the provided password. Returns false if\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 55,
                  "endLine": 103,
                  "endColumn": 63,
                  "snippet": {
                    "text": "   Generate an Argon2 hash of the specified password. The ``y`` parameter specifies\n   the variant: 0 for Argon2d, 1 for Argon2i, and 2 for Argon2id.\n\n.. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n                                           const std::string& hash)\n\n   Verify an Argon2 password hash against the provided password. Returns false if\n",
                    "rendered": {
                      "text": "   Generate an Argon2 hash of the specified password. The ``y`` parameter specifies\n   the variant: 0 for Argon2d, 1 for Argon2i, and 2 for Argon2id.\n\n.. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n                                           const std::string& hash)\n\n   Verify an Argon2 password hash against the provided password. Returns false if\n",
                      "markdown": "`   Generate an Argon2 hash of the specified password. The ``y`` parameter specifies\n   the variant: 0 for Argon2d, 1 for Argon2i, and 2 for Argon2id.\n\n.. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n                                           const std::string& hash)\n\n   Verify an Argon2 password hash against the provided password. Returns false if\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 44,
                  "endLine": 100,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                          size_t p, size_t M, size_t t, \\\n                          size_t y = 2, size_t salt_len = 16, size_t output_len = 32)\n\n   Generate an Argon2 hash of the specified password. The ``y`` parameter specifies\n   the variant: 0 for Argon2d, 1 for Argon2i, and 2 for Argon2id.\n\n.. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n",
                    "rendered": {
                      "text": "                          size_t p, size_t M, size_t t, \\\n                          size_t y = 2, size_t salt_len = 16, size_t output_len = 32)\n\n   Generate an Argon2 hash of the specified password. The ``y`` parameter specifies\n   the variant: 0 for Argon2d, 1 for Argon2i, and 2 for Argon2id.\n\n.. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n",
                      "markdown": "`                          size_t p, size_t M, size_t t, \\\n                          size_t y = 2, size_t salt_len = 16, size_t output_len = 32)\n\n   Generate an Argon2 hash of the specified password. The ``y`` parameter specifies\n   the variant: 0 for Argon2d, 1 for Argon2i, and 2 for Argon2id.\n\n.. cpp:function:: bool argon2_check_pwhash(const char* password, size_t password_len, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 82,
                  "endLine": 95,
                  "endColumn": 90,
                  "snippet": {
                    "text": "recommend using Argon2id with ``t`` and ``p`` both equal to 1 and ``M`` set to\nthe largest amount of memory usable in your environment.\n\n.. cpp:function:: std::string argon2_generate_pwhash(const char* password, size_t password_len, \\\n                          RandomNumberGenerator& rng, \\\n                          size_t p, size_t M, size_t t, \\\n                          size_t y = 2, size_t salt_len = 16, size_t output_len = 32)\n",
                    "rendered": {
                      "text": "recommend using Argon2id with ``t`` and ``p`` both equal to 1 and ``M`` set to\nthe largest amount of memory usable in your environment.\n\n.. cpp:function:: std::string argon2_generate_pwhash(const char* password, size_t password_len, \\\n                          RandomNumberGenerator& rng, \\\n                          size_t p, size_t M, size_t t, \\\n                          size_t y = 2, size_t salt_len = 16, size_t output_len = 32)\n",
                      "markdown": "`recommend using Argon2id with ``t`` and ``p`` both equal to 1 and ``M`` set to\nthe largest amount of memory usable in your environment.\n\n.. cpp:function:: std::string argon2_generate_pwhash(const char* password, size_t password_len, \\\n                          RandomNumberGenerator& rng, \\\n                          size_t p, size_t M, size_t t, \\\n                          size_t y = 2, size_t salt_len = 16, size_t output_len = 32)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 65,
                  "endLine": 95,
                  "endColumn": 73,
                  "snippet": {
                    "text": "recommend using Argon2id with ``t`` and ``p`` both equal to 1 and ``M`` set to\nthe largest amount of memory usable in your environment.\n\n.. cpp:function:: std::string argon2_generate_pwhash(const char* password, size_t password_len, \\\n                          RandomNumberGenerator& rng, \\\n                          size_t p, size_t M, size_t t, \\\n                          size_t y = 2, size_t salt_len = 16, size_t output_len = 32)\n",
                    "rendered": {
                      "text": "recommend using Argon2id with ``t`` and ``p`` both equal to 1 and ``M`` set to\nthe largest amount of memory usable in your environment.\n\n.. cpp:function:: std::string argon2_generate_pwhash(const char* password, size_t password_len, \\\n                          RandomNumberGenerator& rng, \\\n                          size_t p, size_t M, size_t t, \\\n                          size_t y = 2, size_t salt_len = 16, size_t output_len = 32)\n",
                      "markdown": "`recommend using Argon2id with ``t`` and ``p`` both equal to 1 and ``M`` set to\nthe largest amount of memory usable in your environment.\n\n.. cpp:function:: std::string argon2_generate_pwhash(const char* password, size_t password_len, \\\n                          RandomNumberGenerator& rng, \\\n                          size_t p, size_t M, size_t t, \\\n                          size_t y = 2, size_t salt_len = 16, size_t output_len = 32)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 66,
                  "endLine": 88,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\nThere are three variants of Argon2, namely Argon2d, Argon2i and Argon2id.\nArgon2d uses data dependent table lookups with may leak information about the\npassword via side channel attacks, and is **not recommended** for password\nhashing. Argon2i uses data independent table lookups and is immune to these\nattacks, but at the cost of requiring higher ``t`` for security. Argon2id uses a\nhybrid approach which is thought to be highly secure. The algorithm designers\n",
                    "rendered": {
                      "text": "\nThere are three variants of Argon2, namely Argon2d, Argon2i and Argon2id.\nArgon2d uses data dependent table lookups with may leak information about the\npassword via side channel attacks, and is **not recommended** for password\nhashing. Argon2i uses data independent table lookups and is immune to these\nattacks, but at the cost of requiring higher ``t`` for security. Argon2id uses a\nhybrid approach which is thought to be highly secure. The algorithm designers\n",
                      "markdown": "`\nThere are three variants of Argon2, namely Argon2d, Argon2i and Argon2id.\nArgon2d uses data dependent table lookups with may leak information about the\npassword via side channel attacks, and is **not recommended** for password\nhashing. Argon2i uses data independent table lookups and is immune to these\nattacks, but at the cost of requiring higher ``t`` for security. Argon2id uses a\nhybrid approach which is thought to be highly secure. The algorithm designers\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nThere are three variants of Argon2, namely Argon2d, Argon2i and Argon2id.\nArgon2d uses data dependent table lookups with may leak information about the\npassword via side channel attacks, and is **not recommended** for password\nhashing. Argon2i uses data independent table lookups and is immune to these\nattacks, but at the cost of requiring higher ``t`` for security. Argon2id uses a\nhybrid approach which is thought to be highly secure. The algorithm designers\n",
                    "rendered": {
                      "text": "\nThere are three variants of Argon2, namely Argon2d, Argon2i and Argon2id.\nArgon2d uses data dependent table lookups with may leak information about the\npassword via side channel attacks, and is **not recommended** for password\nhashing. Argon2i uses data independent table lookups and is immune to these\nattacks, but at the cost of requiring higher ``t`` for security. Argon2id uses a\nhybrid approach which is thought to be highly secure. The algorithm designers\n",
                      "markdown": "`\nThere are three variants of Argon2, namely Argon2d, Argon2i and Argon2id.\nArgon2d uses data dependent table lookups with may leak information about the\npassword via side channel attacks, and is **not recommended** for password\nhashing. Argon2i uses data independent table lookups and is immune to these\nattacks, but at the cost of requiring higher ``t`` for security. Argon2id uses a\nhybrid approach which is thought to be highly secure. The algorithm designers\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 22,
                  "endLine": 77,
                  "endColumn": 30,
                  "snippet": {
                    "text": ".. versionadded:: 2.11.0\n\nArgon2 is the winner of the PHC (Password Hashing Competition) and provides\na tunable memory hard password hash. It has a standard string encoding, which looks like::\n\n  \"$argon2i$v=19$m=8192,t=10,p=3$YWFhYWFhYWE$itkWB9ODqTd85wUsoib7pfpVTNGMOu0ZJan1odl25V8\"\n\n",
                    "rendered": {
                      "text": ".. versionadded:: 2.11.0\n\nArgon2 is the winner of the PHC (Password Hashing Competition) and provides\na tunable memory hard password hash. It has a standard string encoding, which looks like::\n\n  \"$argon2i$v=19$m=8192,t=10,p=3$YWFhYWFhYWE$itkWB9ODqTd85wUsoib7pfpVTNGMOu0ZJan1odl25V8\"\n\n",
                      "markdown": "`.. versionadded:: 2.11.0\n\nArgon2 is the winner of the PHC (Password Hashing Competition) and provides\na tunable memory hard password hash. It has a standard string encoding, which looks like::\n\n  \"$argon2i$v=19$m=8192,t=10,p=3$YWFhYWFhYWE$itkWB9ODqTd85wUsoib7pfpVTNGMOu0ZJan1odl25V8\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 33,
                  "endLine": 76,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n.. versionadded:: 2.11.0\n\nArgon2 is the winner of the PHC (Password Hashing Competition) and provides\na tunable memory hard password hash. It has a standard string encoding, which looks like::\n\n  \"$argon2i$v=19$m=8192,t=10,p=3$YWFhYWFhYWE$itkWB9ODqTd85wUsoib7pfpVTNGMOu0ZJan1odl25V8\"\n",
                    "rendered": {
                      "text": "\n.. versionadded:: 2.11.0\n\nArgon2 is the winner of the PHC (Password Hashing Competition) and provides\na tunable memory hard password hash. It has a standard string encoding, which looks like::\n\n  \"$argon2i$v=19$m=8192,t=10,p=3$YWFhYWFhYWE$itkWB9ODqTd85wUsoib7pfpVTNGMOu0ZJan1odl25V8\"\n",
                      "markdown": "`\n.. versionadded:: 2.11.0\n\nArgon2 is the winner of the PHC (Password Hashing Competition) and provides\na tunable memory hard password hash. It has a standard string encoding, which looks like::\n\n  \"$argon2i$v=19$m=8192,t=10,p=3$YWFhYWFhYWE$itkWB9ODqTd85wUsoib7pfpVTNGMOu0ZJan1odl25V8\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 36,
                  "endLine": 68,
                  "endColumn": 44,
                  "snippet": {
                    "text": "bcrypt approach requires over 4 KiB of RAM (for the Blowfish key\nschedule) and may also make some hardware attacks more expensive.\n\nBotan provides three techniques for password hashing: Argon2, bcrypt, and\npasshash9 (based on PBKDF2).\n\nArgon2\n",
                    "rendered": {
                      "text": "bcrypt approach requires over 4 KiB of RAM (for the Blowfish key\nschedule) and may also make some hardware attacks more expensive.\n\nBotan provides three techniques for password hashing: Argon2, bcrypt, and\npasshash9 (based on PBKDF2).\n\nArgon2\n",
                      "markdown": "`bcrypt approach requires over 4 KiB of RAM (for the Blowfish key\nschedule) and may also make some hardware attacks more expensive.\n\nBotan provides three techniques for password hashing: Argon2, bcrypt, and\npasshash9 (based on PBKDF2).\n\nArgon2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 50,
                  "endLine": 63,
                  "endColumn": 58,
                  "snippet": {
                    "text": "Memory usage while checking a password is also a consideration; if the\ncomputation requires using a certain minimum amount of memory, then an\nattacker can become memory-bound, which may in particular make\ncustomized cracking hardware more expensive. Some password hashing\ndesigns, such as scrypt, explicitly attempt to provide this. The\nbcrypt approach requires over 4 KiB of RAM (for the Blowfish key\nschedule) and may also make some hardware attacks more expensive.\n",
                    "rendered": {
                      "text": "Memory usage while checking a password is also a consideration; if the\ncomputation requires using a certain minimum amount of memory, then an\nattacker can become memory-bound, which may in particular make\ncustomized cracking hardware more expensive. Some password hashing\ndesigns, such as scrypt, explicitly attempt to provide this. The\nbcrypt approach requires over 4 KiB of RAM (for the Blowfish key\nschedule) and may also make some hardware attacks more expensive.\n",
                      "markdown": "`Memory usage while checking a password is also a consideration; if the\ncomputation requires using a certain minimum amount of memory, then an\nattacker can become memory-bound, which may in particular make\ncustomized cracking hardware more expensive. Some password hashing\ndesigns, such as scrypt, explicitly attempt to provide this. The\nbcrypt approach requires over 4 KiB of RAM (for the Blowfish key\nschedule) and may also make some hardware attacks more expensive.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 30,
                  "endLine": 60,
                  "endColumn": 38,
                  "snippet": {
                    "text": "(or, equivalently, will require 100,000 times as many zombie botnet\nhosts).\n\nMemory usage while checking a password is also a consideration; if the\ncomputation requires using a certain minimum amount of memory, then an\nattacker can become memory-bound, which may in particular make\ncustomized cracking hardware more expensive. Some password hashing\n",
                    "rendered": {
                      "text": "(or, equivalently, will require 100,000 times as many zombie botnet\nhosts).\n\nMemory usage while checking a password is also a consideration; if the\ncomputation requires using a certain minimum amount of memory, then an\nattacker can become memory-bound, which may in particular make\ncustomized cracking hardware more expensive. Some password hashing\n",
                      "markdown": "`(or, equivalently, will require 100,000 times as many zombie botnet\nhosts).\n\nMemory usage while checking a password is also a consideration; if the\ncomputation requires using a certain minimum amount of memory, then an\nattacker can become memory-bound, which may in particular make\ncustomized cracking hardware more expensive. Some password hashing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 24,
                  "endLine": 54,
                  "endColumn": 32,
                  "snippet": {
                    "text": "user authentication happens quite rarely, and usually there are more\nexpensive operations that need to occur anyway (network and database\nI/O, etc). On the other hand, an attacker who is attempting to break a\ndatabase full of stolen password hashes will be seriously\ninconvenienced by a factor of 100,000 slowdown; they will be able to\nonly test at a rate of .0001% of what they would without iterations\n(or, equivalently, will require 100,000 times as many zombie botnet\n",
                    "rendered": {
                      "text": "user authentication happens quite rarely, and usually there are more\nexpensive operations that need to occur anyway (network and database\nI/O, etc). On the other hand, an attacker who is attempting to break a\ndatabase full of stolen password hashes will be seriously\ninconvenienced by a factor of 100,000 slowdown; they will be able to\nonly test at a rate of .0001% of what they would without iterations\n(or, equivalently, will require 100,000 times as many zombie botnet\n",
                      "markdown": "`user authentication happens quite rarely, and usually there are more\nexpensive operations that need to occur anyway (network and database\nI/O, etc). On the other hand, an attacker who is attempting to break a\ndatabase full of stolen password hashes will be seriously\ninconvenienced by a factor of 100,000 slowdown; they will be able to\nonly test at a rate of .0001% of what they would without iterations\n(or, equivalently, will require 100,000 times as many zombie botnet\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "endColumn": 8,
                  "snippet": {
                    "text": "The other approach, iteration, refers to the general technique of\nforcing multiple one way function evaluations when computing the\noutput, to slow down the operation. For instance if hashing a single\npassword requires running SHA-256 100,000 times instead of just once,\nthat will slow down user authentication by a factor of 100,000, but\nuser authentication happens quite rarely, and usually there are more\nexpensive operations that need to occur anyway (network and database\n",
                    "rendered": {
                      "text": "The other approach, iteration, refers to the general technique of\nforcing multiple one way function evaluations when computing the\noutput, to slow down the operation. For instance if hashing a single\npassword requires running SHA-256 100,000 times instead of just once,\nthat will slow down user authentication by a factor of 100,000, but\nuser authentication happens quite rarely, and usually there are more\nexpensive operations that need to occur anyway (network and database\n",
                      "markdown": "`The other approach, iteration, refers to the general technique of\nforcing multiple one way function evaluations when computing the\noutput, to slow down the operation. For instance if hashing a single\npassword requires running SHA-256 100,000 times instead of just once,\nthat will slow down user authentication by a factor of 100,000, but\nuser authentication happens quite rarely, and usually there are more\nexpensive operations that need to occur anyway (network and database\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 58,
                  "endLine": 43,
                  "endColumn": 66,
                  "snippet": {
                    "text": "only after about 2\\ :sup:\\ `(n/2)` salts have been generated. Choosing a\nlarge salt (say 80 to 128 bits) ensures this is very unlikely. Note\nthat in password hashing salt collisions are unfortunate, but not\nfatal - it simply allows the attacker to attack those two passwords in\nparallel easier than they would otherwise be able to.\n\nThe other approach, iteration, refers to the general technique of\n",
                    "rendered": {
                      "text": "only after about 2\\ :sup:\\ `(n/2)` salts have been generated. Choosing a\nlarge salt (say 80 to 128 bits) ensures this is very unlikely. Note\nthat in password hashing salt collisions are unfortunate, but not\nfatal - it simply allows the attacker to attack those two passwords in\nparallel easier than they would otherwise be able to.\n\nThe other approach, iteration, refers to the general technique of\n",
                      "markdown": "`only after about 2\\ :sup:\\ `(n/2)` salts have been generated. Choosing a\nlarge salt (say 80 to 128 bits) ensures this is very unlikely. Note\nthat in password hashing salt collisions are unfortunate, but not\nfatal - it simply allows the attacker to attack those two passwords in\nparallel easier than they would otherwise be able to.\n\nThe other approach, iteration, refers to the general technique of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 8,
                  "endLine": 42,
                  "endColumn": 16,
                  "snippet": {
                    "text": "collide. Choosing n-bit salts randomly, salt collisions become likely\nonly after about 2\\ :sup:\\ `(n/2)` salts have been generated. Choosing a\nlarge salt (say 80 to 128 bits) ensures this is very unlikely. Note\nthat in password hashing salt collisions are unfortunate, but not\nfatal - it simply allows the attacker to attack those two passwords in\nparallel easier than they would otherwise be able to.\n\n",
                    "rendered": {
                      "text": "collide. Choosing n-bit salts randomly, salt collisions become likely\nonly after about 2\\ :sup:\\ `(n/2)` salts have been generated. Choosing a\nlarge salt (say 80 to 128 bits) ensures this is very unlikely. Note\nthat in password hashing salt collisions are unfortunate, but not\nfatal - it simply allows the attacker to attack those two passwords in\nparallel easier than they would otherwise be able to.\n\n",
                      "markdown": "`collide. Choosing n-bit salts randomly, salt collisions become likely\nonly after about 2\\ :sup:\\ `(n/2)` salts have been generated. Choosing a\nlarge salt (say 80 to 128 bits) ensures this is very unlikely. Note\nthat in password hashing salt collisions are unfortunate, but not\nfatal - it simply allows the attacker to attack those two passwords in\nparallel easier than they would otherwise be able to.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "endColumn": 8,
                  "snippet": {
                    "text": "reduce the effectiveness of offline dictionary generation, because for\neach potential password, an attacker would have to compute the one way\nfunction output for all possible salts. It also prevents the same\npassword from producing the same output, as long as the salts do not\ncollide. Choosing n-bit salts randomly, salt collisions become likely\nonly after about 2\\ :sup:\\ `(n/2)` salts have been generated. Choosing a\nlarge salt (say 80 to 128 bits) ensures this is very unlikely. Note\n",
                    "rendered": {
                      "text": "reduce the effectiveness of offline dictionary generation, because for\neach potential password, an attacker would have to compute the one way\nfunction output for all possible salts. It also prevents the same\npassword from producing the same output, as long as the salts do not\ncollide. Choosing n-bit salts randomly, salt collisions become likely\nonly after about 2\\ :sup:\\ `(n/2)` salts have been generated. Choosing a\nlarge salt (say 80 to 128 bits) ensures this is very unlikely. Note\n",
                      "markdown": "`reduce the effectiveness of offline dictionary generation, because for\neach potential password, an attacker would have to compute the one way\nfunction output for all possible salts. It also prevents the same\npassword from producing the same output, as long as the salts do not\ncollide. Choosing n-bit salts randomly, salt collisions become likely\nonly after about 2\\ :sup:\\ `(n/2)` salts have been generated. Choosing a\nlarge salt (say 80 to 128 bits) ensures this is very unlikely. Note\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 15,
                  "endLine": 36,
                  "endColumn": 23,
                  "snippet": {
                    "text": "iteration. Salting refers to including, along with the password, a\nrandomly chosen value which perturbs the one way function. Salting can\nreduce the effectiveness of offline dictionary generation, because for\neach potential password, an attacker would have to compute the one way\nfunction output for all possible salts. It also prevents the same\npassword from producing the same output, as long as the salts do not\ncollide. Choosing n-bit salts randomly, salt collisions become likely\n",
                    "rendered": {
                      "text": "iteration. Salting refers to including, along with the password, a\nrandomly chosen value which perturbs the one way function. Salting can\nreduce the effectiveness of offline dictionary generation, because for\neach potential password, an attacker would have to compute the one way\nfunction output for all possible salts. It also prevents the same\npassword from producing the same output, as long as the salts do not\ncollide. Choosing n-bit salts randomly, salt collisions become likely\n",
                      "markdown": "`iteration. Salting refers to including, along with the password, a\nrandomly chosen value which perturbs the one way function. Salting can\nreduce the effectiveness of offline dictionary generation, because for\neach potential password, an attacker would have to compute the one way\nfunction output for all possible salts. It also prevents the same\npassword from producing the same output, as long as the salts do not\ncollide. Choosing n-bit salts randomly, salt collisions become likely\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 55,
                  "endLine": 33,
                  "endColumn": 63,
                  "snippet": {
                    "text": "inspection of the database.\n\nThere are two solutions to these problems: salting and\niteration. Salting refers to including, along with the password, a\nrandomly chosen value which perturbs the one way function. Salting can\nreduce the effectiveness of offline dictionary generation, because for\neach potential password, an attacker would have to compute the one way\n",
                    "rendered": {
                      "text": "inspection of the database.\n\nThere are two solutions to these problems: salting and\niteration. Salting refers to including, along with the password, a\nrandomly chosen value which perturbs the one way function. Salting can\nreduce the effectiveness of offline dictionary generation, because for\neach potential password, an attacker would have to compute the one way\n",
                      "markdown": "`inspection of the database.\n\nThere are two solutions to these problems: salting and\niteration. Salting refers to including, along with the password, a\nrandomly chosen value which perturbs the one way function. Salting can\nreduce the effectiveness of offline dictionary generation, because for\neach potential password, an attacker would have to compute the one way\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 39,
                  "endLine": 28,
                  "endColumn": 47,
                  "snippet": {
                    "text": "match, then he has found the password. Even worse, this can happen\n*offline*: an attacker can begin hashing common passwords days,\nmonths, or years before ever gaining access to the database. In\naddition, if two users choose the same password, the one way function\noutput will be the same for both of them, which will be visible upon\ninspection of the database.\n\n",
                    "rendered": {
                      "text": "match, then he has found the password. Even worse, this can happen\n*offline*: an attacker can begin hashing common passwords days,\nmonths, or years before ever gaining access to the database. In\naddition, if two users choose the same password, the one way function\noutput will be the same for both of them, which will be visible upon\ninspection of the database.\n\n",
                      "markdown": "`match, then he has found the password. Even worse, this can happen\n*offline*: an attacker can begin hashing common passwords days,\nmonths, or years before ever gaining access to the database. In\naddition, if two users choose the same password, the one way function\noutput will be the same for both of them, which will be visible upon\ninspection of the database.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 48,
                  "endLine": 26,
                  "endColumn": 56,
                  "snippet": {
                    "text": "words and other possible passwords, storing them in a list. Then he\ncan search through his list; if a stored hash and an entry in his list\nmatch, then he has found the password. Even worse, this can happen\n*offline*: an attacker can begin hashing common passwords days,\nmonths, or years before ever gaining access to the database. In\naddition, if two users choose the same password, the one way function\noutput will be the same for both of them, which will be visible upon\n",
                    "rendered": {
                      "text": "words and other possible passwords, storing them in a list. Then he\ncan search through his list; if a stored hash and an entry in his list\nmatch, then he has found the password. Even worse, this can happen\n*offline*: an attacker can begin hashing common passwords days,\nmonths, or years before ever gaining access to the database. In\naddition, if two users choose the same password, the one way function\noutput will be the same for both of them, which will be visible upon\n",
                      "markdown": "`words and other possible passwords, storing them in a list. Then he\ncan search through his list; if a stored hash and an entry in his list\nmatch, then he has found the password. Even worse, this can happen\n*offline*: an attacker can begin hashing common passwords days,\nmonths, or years before ever gaining access to the database. In\naddition, if two users choose the same password, the one way function\noutput will be the same for both of them, which will be visible upon\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 29,
                  "endLine": 25,
                  "endColumn": 37,
                  "snippet": {
                    "text": "access to such a stored password database, is hash common dictionary\nwords and other possible passwords, storing them in a list. Then he\ncan search through his list; if a stored hash and an entry in his list\nmatch, then he has found the password. Even worse, this can happen\n*offline*: an attacker can begin hashing common passwords days,\nmonths, or years before ever gaining access to the database. In\naddition, if two users choose the same password, the one way function\n",
                    "rendered": {
                      "text": "access to such a stored password database, is hash common dictionary\nwords and other possible passwords, storing them in a list. Then he\ncan search through his list; if a stored hash and an entry in his list\nmatch, then he has found the password. Even worse, this can happen\n*offline*: an attacker can begin hashing common passwords days,\nmonths, or years before ever gaining access to the database. In\naddition, if two users choose the same password, the one way function\n",
                      "markdown": "`access to such a stored password database, is hash common dictionary\nwords and other possible passwords, storing them in a list. Then he\ncan search through his list; if a stored hash and an entry in his list\nmatch, then he has found the password. Even worse, this can happen\n*offline*: an attacker can begin hashing common passwords days,\nmonths, or years before ever gaining access to the database. In\naddition, if two users choose the same password, the one way function\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 25,
                  "endLine": 23,
                  "endColumn": 33,
                  "snippet": {
                    "text": "Common hash functions such as SHA-256 are one way, but used alone they\nhave problems for this purpose. What an attacker can do, upon gaining\naccess to such a stored password database, is hash common dictionary\nwords and other possible passwords, storing them in a list. Then he\ncan search through his list; if a stored hash and an entry in his list\nmatch, then he has found the password. Even worse, this can happen\n*offline*: an attacker can begin hashing common passwords days,\n",
                    "rendered": {
                      "text": "Common hash functions such as SHA-256 are one way, but used alone they\nhave problems for this purpose. What an attacker can do, upon gaining\naccess to such a stored password database, is hash common dictionary\nwords and other possible passwords, storing them in a list. Then he\ncan search through his list; if a stored hash and an entry in his list\nmatch, then he has found the password. Even worse, this can happen\n*offline*: an attacker can begin hashing common passwords days,\n",
                      "markdown": "`Common hash functions such as SHA-256 are one way, but used alone they\nhave problems for this purpose. What an attacker can do, upon gaining\naccess to such a stored password database, is hash common dictionary\nwords and other possible passwords, storing them in a list. Then he\ncan search through his list; if a stored hash and an entry in his list\nmatch, then he has found the password. Even worse, this can happen\n*offline*: an attacker can begin hashing common passwords days,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 24,
                  "endLine": 22,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nCommon hash functions such as SHA-256 are one way, but used alone they\nhave problems for this purpose. What an attacker can do, upon gaining\naccess to such a stored password database, is hash common dictionary\nwords and other possible passwords, storing them in a list. Then he\ncan search through his list; if a stored hash and an entry in his list\nmatch, then he has found the password. Even worse, this can happen\n",
                    "rendered": {
                      "text": "\nCommon hash functions such as SHA-256 are one way, but used alone they\nhave problems for this purpose. What an attacker can do, upon gaining\naccess to such a stored password database, is hash common dictionary\nwords and other possible passwords, storing them in a list. Then he\ncan search through his list; if a stored hash and an entry in his list\nmatch, then he has found the password. Even worse, this can happen\n",
                      "markdown": "`\nCommon hash functions such as SHA-256 are one way, but used alone they\nhave problems for this purpose. What an attacker can do, upon gaining\naccess to such a stored password database, is hash common dictionary\nwords and other possible passwords, storing them in a list. Then he\ncan search through his list; if a stored hash and an entry in his list\nmatch, then he has found the password. Even worse, this can happen\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 49,
                  "endLine": 18,
                  "endColumn": 57,
                  "snippet": {
                    "text": "function and compare the value just computed with the one that was\nstored. If they match, then the authentication request succeeds. But\nwhen an attacker gains access to the database, they only have the\noutput of the one way function, not the original password.\n\nCommon hash functions such as SHA-256 are one way, but used alone they\nhave problems for this purpose. What an attacker can do, upon gaining\n",
                    "rendered": {
                      "text": "function and compare the value just computed with the one that was\nstored. If they match, then the authentication request succeeds. But\nwhen an attacker gains access to the database, they only have the\noutput of the one way function, not the original password.\n\nCommon hash functions such as SHA-256 are one way, but used alone they\nhave problems for this purpose. What an attacker can do, upon gaining\n",
                      "markdown": "`function and compare the value just computed with the one that was\nstored. If they match, then the authentication request succeeds. But\nwhen an attacker gains access to the database, they only have the\noutput of the one way function, not the original password.\n\nCommon hash functions such as SHA-256 are one way, but used alone they\nhave problems for this purpose. What an attacker can do, upon gaining\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 29,
                  "endLine": 13,
                  "endColumn": 37,
                  "snippet": {
                    "text": "machines.\n\nThe general approach is to store, instead of the password, the output\nof a one way function of the password. Upon receiving an\nauthentication request, the authenticating party can recompute the one way\nfunction and compare the value just computed with the one that was\nstored. If they match, then the authentication request succeeds. But\n",
                    "rendered": {
                      "text": "machines.\n\nThe general approach is to store, instead of the password, the output\nof a one way function of the password. Upon receiving an\nauthentication request, the authenticating party can recompute the one way\nfunction and compare the value just computed with the one that was\nstored. If they match, then the authentication request succeeds. But\n",
                      "markdown": "`machines.\n\nThe general approach is to store, instead of the password, the output\nof a one way function of the password. Upon receiving an\nauthentication request, the authenticating party can recompute the one way\nfunction and compare the value just computed with the one that was\nstored. If they match, then the authentication request succeeds. But\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 49,
                  "endLine": 12,
                  "endColumn": 57,
                  "snippet": {
                    "text": "known an attacker has a substantial head start on attacking other\nmachines.\n\nThe general approach is to store, instead of the password, the output\nof a one way function of the password. Upon receiving an\nauthentication request, the authenticating party can recompute the one way\nfunction and compare the value just computed with the one that was\n",
                    "rendered": {
                      "text": "known an attacker has a substantial head start on attacking other\nmachines.\n\nThe general approach is to store, instead of the password, the output\nof a one way function of the password. Upon receiving an\nauthentication request, the authenticating party can recompute the one way\nfunction and compare the value just computed with the one that was\n",
                      "markdown": "`known an attacker has a substantial head start on attacking other\nmachines.\n\nThe general approach is to store, instead of the password, the output\nof a one way function of the password. Upon receiving an\nauthentication request, the authenticating party can recompute the one way\nfunction and compare the value just computed with the one that was\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 37,
                  "endLine": 8,
                  "endColumn": 45,
                  "snippet": {
                    "text": "simplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\nmachines.\n\n",
                    "rendered": {
                      "text": "simplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\nmachines.\n\n",
                      "markdown": "`simplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\nmachines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 29,
                  "endLine": 7,
                  "endColumn": 37,
                  "snippet": {
                    "text": "Storing passwords for user authentication purposes in plaintext is the\nsimplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\nmachines.\n",
                    "rendered": {
                      "text": "Storing passwords for user authentication purposes in plaintext is the\nsimplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\nmachines.\n",
                      "markdown": "`Storing passwords for user authentication purposes in plaintext is the\nsimplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\nmachines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 22,
                  "endLine": 6,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nStoring passwords for user authentication purposes in plaintext is the\nsimplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\n",
                    "rendered": {
                      "text": "\nStoring passwords for user authentication purposes in plaintext is the\nsimplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\n",
                      "markdown": "`\nStoring passwords for user authentication purposes in plaintext is the\nsimplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 8,
                  "endLine": 4,
                  "endColumn": 16,
                  "snippet": {
                    "text": "Password Hashing\n========================================\n\nStoring passwords for user authentication purposes in plaintext is the\nsimplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\n",
                    "rendered": {
                      "text": "Password Hashing\n========================================\n\nStoring passwords for user authentication purposes in plaintext is the\nsimplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\n",
                      "markdown": "`Password Hashing\n========================================\n\nStoring passwords for user authentication purposes in plaintext is the\nsimplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 1,
                  "endLine": 1,
                  "endColumn": 8,
                  "snippet": {
                    "text": "Password Hashing\n========================================\n\nStoring passwords for user authentication purposes in plaintext is the\n",
                    "rendered": {
                      "text": "Password Hashing\n========================================\n\nStoring passwords for user authentication purposes in plaintext is the\n",
                      "markdown": "`Password Hashing\n========================================\n\nStoring passwords for user authentication purposes in plaintext is the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 50,
                  "endLine": 129,
                  "endColumn": 56,
                  "snippet": {
                    "text": "   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n",
                    "rendered": {
                      "text": "   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n",
                      "markdown": "`   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 52,
                  "endLine": 168,
                  "endColumn": 56,
                  "snippet": {
                    "text": "   three versions are identical beyond the version identifier. Which variant to\n   use is controlled by the ``bcrypt_version`` argument.\n\n   The bcrypt work factor must be at least 4 (though at this work factor bcrypt\n   is not very secure). The bcrypt format allows up to 31, but Botan currently\n   rejects all work factors greater than 18 since even that work factor requires\n   roughly 15 seconds of computation on a fast machine.\n",
                    "rendered": {
                      "text": "   three versions are identical beyond the version identifier. Which variant to\n   use is controlled by the ``bcrypt_version`` argument.\n\n   The bcrypt work factor must be at least 4 (though at this work factor bcrypt\n   is not very secure). The bcrypt format allows up to 31, but Botan currently\n   rejects all work factors greater than 18 since even that work factor requires\n   roughly 15 seconds of computation on a fast machine.\n",
                      "markdown": "`   three versions are identical beyond the version identifier. Which variant to\n   use is controlled by the ``bcrypt_version`` argument.\n\n   The bcrypt work factor must be at least 4 (though at this work factor bcrypt\n   is not very secure). The bcrypt format allows up to 31, but Botan currently\n   rejects all work factors greater than 18 since even that work factor requires\n   roughly 15 seconds of computation on a fast machine.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 33,
                  "endLine": 168,
                  "endColumn": 37,
                  "snippet": {
                    "text": "   three versions are identical beyond the version identifier. Which variant to\n   use is controlled by the ``bcrypt_version`` argument.\n\n   The bcrypt work factor must be at least 4 (though at this work factor bcrypt\n   is not very secure). The bcrypt format allows up to 31, but Botan currently\n   rejects all work factors greater than 18 since even that work factor requires\n   roughly 15 seconds of computation on a fast machine.\n",
                    "rendered": {
                      "text": "   three versions are identical beyond the version identifier. Which variant to\n   use is controlled by the ``bcrypt_version`` argument.\n\n   The bcrypt work factor must be at least 4 (though at this work factor bcrypt\n   is not very secure). The bcrypt format allows up to 31, but Botan currently\n   rejects all work factors greater than 18 since even that work factor requires\n   roughly 15 seconds of computation on a fast machine.\n",
                      "markdown": "`   three versions are identical beyond the version identifier. Which variant to\n   use is controlled by the ``bcrypt_version`` argument.\n\n   The bcrypt work factor must be at least 4 (though at this work factor bcrypt\n   is not very secure). The bcrypt format allows up to 31, but Botan currently\n   rejects all work factors greater than 18 since even that work factor requires\n   roughly 15 seconds of computation on a fast machine.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 75,
                  "endLine": 154,
                  "snippet": {
                    "text": "ded to set the work factor as high as your system can tolerate\n   (from a performance and latency perspective) since higher work factors greatly\n   improve the security against GPU-based attacks.  For example, for protecting\n   high value administrator passwords, consider using work factor 15 or 16; at\n   these work factors each bcrypt computation takes several seconds. Since admin\n   logins will be relatively uncommon, it might be acceptable for each login\n   attempt to take some time. As of 2018, a good password cracking rig (with 8\n   NVIDIA 1080 cards) can attempt about 1 billion bcrypt comput",
                    "rendered": {
                      "text": "ded to set the work factor as high as your system can tolerate\n   (from a performance and latency perspective) since higher work factors greatly\n   improve the security against GPU-based attacks.  For example, for protecting\n   high value administrator passwords, consider using work factor 15 or 16; at\n   these work factors each bcrypt computation takes several seconds. Since admin\n   logins will be relatively uncommon, it might be acceptable for each login\n   attempt to take some time. As of 2018, a good password cracking rig (with 8\n   NVIDIA 1080 cards) can attempt about 1 billion bcrypt comput",
                      "markdown": "`ded to set the work factor as high as your system can tolerate\n   (from a performance and latency perspective) since higher work factors greatly\n   improve the security against GPU-based attacks.  For example, for protecting\n   high value administrator passwords, consider using work factor 15 or 16; at\n   these work factors each bcrypt computation takes several seconds. Since admin\n   logins will be relatively uncommon, it might be acceptable for each login\n   attempt to take some time. As of 2018, a good password cracking rig (with 8\n   NVIDIA 1080 cards) can attempt about 1 billion bcrypt comput`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 67,
                  "endLine": 130,
                  "endColumn": 71,
                  "snippet": {
                    "text": "   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n   ``std::string`` including any embedded NULLs so this is not an issue, but\n",
                    "rendered": {
                      "text": "   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n   ``std::string`` including any embedded NULLs so this is not an issue, but\n",
                      "markdown": "`   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n   ``std::string`` including any embedded NULLs so this is not an issue, but\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 69,
                  "endLine": 126,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\n.. note::\n\n   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n",
                    "rendered": {
                      "text": "\n.. note::\n\n   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n",
                      "markdown": "`\n.. note::\n\n   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 12,
                  "endLine": 90,
                  "endColumn": 16,
                  "snippet": {
                    "text": "Argon2d uses data dependent table lookups with may leak information about the\npassword via side channel attacks, and is **not recommended** for password\nhashing. Argon2i uses data independent table lookups and is immune to these\nattacks, but at the cost of requiring higher ``t`` for security. Argon2id uses a\nhybrid approach which is thought to be highly secure. The algorithm designers\nrecommend using Argon2id with ``t`` and ``p`` both equal to 1 and ``M`` set to\nthe largest amount of memory usable in your environment.\n",
                    "rendered": {
                      "text": "Argon2d uses data dependent table lookups with may leak information about the\npassword via side channel attacks, and is **not recommended** for password\nhashing. Argon2i uses data independent table lookups and is immune to these\nattacks, but at the cost of requiring higher ``t`` for security. Argon2id uses a\nhybrid approach which is thought to be highly secure. The algorithm designers\nrecommend using Argon2id with ``t`` and ``p`` both equal to 1 and ``M`` set to\nthe largest amount of memory usable in your environment.\n",
                      "markdown": "`Argon2d uses data dependent table lookups with may leak information about the\npassword via side channel attacks, and is **not recommended** for password\nhashing. Argon2i uses data independent table lookups and is immune to these\nattacks, but at the cost of requiring higher ``t`` for security. Argon2id uses a\nhybrid approach which is thought to be highly secure. The algorithm designers\nrecommend using Argon2id with ``t`` and ``p`` both equal to 1 and ``M`` set to\nthe largest amount of memory usable in your environment.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 9,
                  "endLine": 56,
                  "endColumn": 13,
                  "snippet": {
                    "text": "I/O, etc). On the other hand, an attacker who is attempting to break a\ndatabase full of stolen password hashes will be seriously\ninconvenienced by a factor of 100,000 slowdown; they will be able to\nonly test at a rate of .0001% of what they would without iterations\n(or, equivalently, will require 100,000 times as many zombie botnet\nhosts).\n\n",
                    "rendered": {
                      "text": "I/O, etc). On the other hand, an attacker who is attempting to break a\ndatabase full of stolen password hashes will be seriously\ninconvenienced by a factor of 100,000 slowdown; they will be able to\nonly test at a rate of .0001% of what they would without iterations\n(or, equivalently, will require 100,000 times as many zombie botnet\nhosts).\n\n",
                      "markdown": "`I/O, etc). On the other hand, an attacker who is attempting to break a\ndatabase full of stolen password hashes will be seriously\ninconvenienced by a factor of 100,000 slowdown; they will be able to\nonly test at a rate of .0001% of what they would without iterations\n(or, equivalently, will require 100,000 times as many zombie botnet\nhosts).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 45,
                  "endLine": 145,
                  "endColumn": 51,
                  "snippet": {
                    "text": "   Takes the password to hash, a rng, and a work factor.\n   The resulting password hash is returned as a string.\n\n   Higher work factors increase the amount of time the algorithm runs,\n   increasing the cost of cracking attempts. The increase is exponential, so a\n   work factor of 12 takes roughly twice as long as work factor 11. The default\n   work factor was set to 10 up until the 2.8.0 release.\n",
                    "rendered": {
                      "text": "   Takes the password to hash, a rng, and a work factor.\n   The resulting password hash is returned as a string.\n\n   Higher work factors increase the amount of time the algorithm runs,\n   increasing the cost of cracking attempts. The increase is exponential, so a\n   work factor of 12 takes roughly twice as long as work factor 11. The default\n   work factor was set to 10 up until the 2.8.0 release.\n",
                      "markdown": "`   Takes the password to hash, a rng, and a work factor.\n   The resulting password hash is returned as a string.\n\n   Higher work factors increase the amount of time the algorithm runs,\n   increasing the cost of cracking attempts. The increase is exponential, so a\n   work factor of 12 takes roughly twice as long as work factor 11. The default\n   work factor was set to 10 up until the 2.8.0 release.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 49,
                  "endLine": 129,
                  "endColumn": 57,
                  "snippet": {
                    "text": "   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n",
                    "rendered": {
                      "text": "   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n",
                      "markdown": "`   Due to the design of bcrypt, the password is effectively truncated at 72\n   characters; further characters are ignored and do not change the hash. To\n   support longer passwords, one common approach is to pre-hash the password\n   with SHA-256, then run bcrypt using the hex or base64 encoding of the hash as\n   the password. (Many bcrypt implementations truncate the password at the first\n   NULL character, so hashing the raw binary SHA-256 may cause problems. Botan's\n   bcrypt implementation will hash whatever values are given in the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 35,
                  "endLine": 9,
                  "endColumn": 41,
                  "snippet": {
                    "text": "database in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\nmachines.\n\nThe general approach is to store, instead of the password, the output\n",
                    "rendered": {
                      "text": "database in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\nmachines.\n\nThe general approach is to store, instead of the password, the output\n",
                      "markdown": "`database in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\nmachines.\n\nThe general approach is to store, instead of the password, the output\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/passhash.rst"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 57,
                  "endLine": 8,
                  "endColumn": 66,
                  "snippet": {
                    "text": "simplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\nmachines.\n\n",
                    "rendered": {
                      "text": "simplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\nmachines.\n\n",
                      "markdown": "`simplest but least secure method; when an attacker compromises the\ndatabase in which the passwords are stored, they immediately gain\naccess to all of them. Often passwords are reused among multiple\nservices or machines, meaning once a password to a single service is\nknown an attacker has a substantial head start on attacking other\nmachines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/footguns.rst"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 56,
                  "endLine": 59,
                  "endColumn": 60,
                  "snippet": {
                    "text": "both processes, likely bad things will happen due to internal locks. You can\navoid this problem by either at build time disabling the features associated\nwith these locks (namely ``locking_allocator`` and ``thread_utils``) or\ndisabling them at runtime using :ref:`env_vars`, ideally at the very start of\n`main`.\n",
                    "rendered": {
                      "text": "both processes, likely bad things will happen due to internal locks. You can\navoid this problem by either at build time disabling the features associated\nwith these locks (namely ``locking_allocator`` and ``thread_utils``) or\ndisabling them at runtime using :ref:`env_vars`, ideally at the very start of\n`main`.\n",
                      "markdown": "`both processes, likely bad things will happen due to internal locks. You can\navoid this problem by either at build time disabling the features associated\nwith these locks (namely ``locking_allocator`` and ``thread_utils``) or\ndisabling them at runtime using :ref:`env_vars`, ideally at the very start of\n`main`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/footguns.rst"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 14,
                  "endLine": 59,
                  "endColumn": 18,
                  "snippet": {
                    "text": "both processes, likely bad things will happen due to internal locks. You can\navoid this problem by either at build time disabling the features associated\nwith these locks (namely ``locking_allocator`` and ``thread_utils``) or\ndisabling them at runtime using :ref:`env_vars`, ideally at the very start of\n`main`.\n",
                    "rendered": {
                      "text": "both processes, likely bad things will happen due to internal locks. You can\navoid this problem by either at build time disabling the features associated\nwith these locks (namely ``locking_allocator`` and ``thread_utils``) or\ndisabling them at runtime using :ref:`env_vars`, ideally at the very start of\n`main`.\n",
                      "markdown": "`both processes, likely bad things will happen due to internal locks. You can\navoid this problem by either at build time disabling the features associated\nwith these locks (namely ``locking_allocator`` and ``thread_utils``) or\ndisabling them at runtime using :ref:`env_vars`, ideally at the very start of\n`main`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/footguns.rst"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 28,
                  "endLine": 57,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nIf you use the `fork` syscall in your code, and attempt to use the library in\nboth processes, likely bad things will happen due to internal locks. You can\navoid this problem by either at build time disabling the features associated\nwith these locks (namely ``locking_allocator`` and ``thread_utils``) or\ndisabling them at runtime using :ref:`env_vars`, ideally at the very start of\n`main`.\n",
                    "rendered": {
                      "text": "\nIf you use the `fork` syscall in your code, and attempt to use the library in\nboth processes, likely bad things will happen due to internal locks. You can\navoid this problem by either at build time disabling the features associated\nwith these locks (namely ``locking_allocator`` and ``thread_utils``) or\ndisabling them at runtime using :ref:`env_vars`, ideally at the very start of\n`main`.\n",
                      "markdown": "`\nIf you use the `fork` syscall in your code, and attempt to use the library in\nboth processes, likely bad things will happen due to internal locks. You can\navoid this problem by either at build time disabling the features associated\nwith these locks (namely ``locking_allocator`` and ``thread_utils``) or\ndisabling them at runtime using :ref:`env_vars`, ideally at the very start of\n`main`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/footguns.rst"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 42,
                  "endLine": 39,
                  "endColumn": 46,
                  "snippet": {
                    "text": "after your object is destroyed.\n\nIdeally a more satisfactory solution to this issue could be found, especially\ngiven the difficulty of disabling the pool at runtime.\n\nMultithreaded Access\n----------------------\n",
                    "rendered": {
                      "text": "after your object is destroyed.\n\nIdeally a more satisfactory solution to this issue could be found, especially\ngiven the difficulty of disabling the pool at runtime.\n\nMultithreaded Access\n----------------------\n",
                      "markdown": "`after your object is destroyed.\n\nIdeally a more satisfactory solution to this issue could be found, especially\ngiven the difficulty of disabling the pool at runtime.\n\nMultithreaded Access\n----------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/footguns.rst"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 50,
                  "endLine": 26,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nThe best course of action is to avoid ``static`` variables. If that is\nimpossible or inconvenient, one option is to disable the pool, either at build\ntime (disable the ``locking_allocator`` module) or at runtime. Unfortunately the\nruntime setting requires setting an environment variable (see :ref:`env_vars`),\nand doing so consistently *prior to static intialization* is not trivial, due to\nthe previously mentioned fiasco. One option might be to use GCC's\n",
                    "rendered": {
                      "text": "\nThe best course of action is to avoid ``static`` variables. If that is\nimpossible or inconvenient, one option is to disable the pool, either at build\ntime (disable the ``locking_allocator`` module) or at runtime. Unfortunately the\nruntime setting requires setting an environment variable (see :ref:`env_vars`),\nand doing so consistently *prior to static intialization* is not trivial, due to\nthe previously mentioned fiasco. One option might be to use GCC's\n",
                      "markdown": "`\nThe best course of action is to avoid ``static`` variables. If that is\nimpossible or inconvenient, one option is to disable the pool, either at build\ntime (disable the ``locking_allocator`` module) or at runtime. Unfortunately the\nruntime setting requires setting an environment variable (see :ref:`env_vars`),\nand doing so consistently *prior to static intialization* is not trivial, due to\nthe previously mentioned fiasco. One option might be to use GCC's\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/footguns.rst"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 69,
                  "endLine": 25,
                  "endColumn": 73,
                  "snippet": {
                    "text": "in reverse.\n\nThe best course of action is to avoid ``static`` variables. If that is\nimpossible or inconvenient, one option is to disable the pool, either at build\ntime (disable the ``locking_allocator`` module) or at runtime. Unfortunately the\nruntime setting requires setting an environment variable (see :ref:`env_vars`),\nand doing so consistently *prior to static intialization* is not trivial, due to\n",
                    "rendered": {
                      "text": "in reverse.\n\nThe best course of action is to avoid ``static`` variables. If that is\nimpossible or inconvenient, one option is to disable the pool, either at build\ntime (disable the ``locking_allocator`` module) or at runtime. Unfortunately the\nruntime setting requires setting an environment variable (see :ref:`env_vars`),\nand doing so consistently *prior to static intialization* is not trivial, due to\n",
                      "markdown": "`in reverse.\n\nThe best course of action is to avoid ``static`` variables. If that is\nimpossible or inconvenient, one option is to disable the pool, either at build\ntime (disable the ``locking_allocator`` module) or at runtime. Unfortunately the\nruntime setting requires setting an environment variable (see :ref:`env_vars`),\nand doing so consistently *prior to static intialization* is not trivial, due to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/footguns.rst"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 26,
                  "endLine": 12,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nIf you maintain ``static`` variables which hold Botan objects, you will perhaps\nfind that in some circumstances your application crashes in strange ways on\nshutdown. That is because, at least on some operating systems, Botan uses a\nlocked memory pool as backing storage for the ``secure_vector`` type. This pool\nallocates out of pages which have been locked into memory using ``mlock`` or\n``VirtualLock`` system calls.\n",
                    "rendered": {
                      "text": "\nIf you maintain ``static`` variables which hold Botan objects, you will perhaps\nfind that in some circumstances your application crashes in strange ways on\nshutdown. That is because, at least on some operating systems, Botan uses a\nlocked memory pool as backing storage for the ``secure_vector`` type. This pool\nallocates out of pages which have been locked into memory using ``mlock`` or\n``VirtualLock`` system calls.\n",
                      "markdown": "`\nIf you maintain ``static`` variables which hold Botan objects, you will perhaps\nfind that in some circumstances your application crashes in strange ways on\nshutdown. That is because, at least on some operating systems, Botan uses a\nlocked memory pool as backing storage for the ``secure_vector`` type. This pool\nallocates out of pages which have been locked into memory using ``mlock`` or\n``VirtualLock`` system calls.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/footguns.rst"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 37,
                  "endLine": 57,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\nIf you use the `fork` syscall in your code, and attempt to use the library in\nboth processes, likely bad things will happen due to internal locks. You can\navoid this problem by either at build time disabling the features associated\nwith these locks (namely ``locking_allocator`` and ``thread_utils``) or\ndisabling them at runtime using :ref:`env_vars`, ideally at the very start of\n`main`.\n",
                    "rendered": {
                      "text": "\nIf you use the `fork` syscall in your code, and attempt to use the library in\nboth processes, likely bad things will happen due to internal locks. You can\navoid this problem by either at build time disabling the features associated\nwith these locks (namely ``locking_allocator`` and ``thread_utils``) or\ndisabling them at runtime using :ref:`env_vars`, ideally at the very start of\n`main`.\n",
                      "markdown": "`\nIf you use the `fork` syscall in your code, and attempt to use the library in\nboth processes, likely bad things will happen due to internal locks. You can\navoid this problem by either at build time disabling the features associated\nwith these locks (namely ``locking_allocator`` and ``thread_utils``) or\ndisabling them at runtime using :ref:`env_vars`, ideally at the very start of\n`main`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/footguns.rst"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 78,
                  "endLine": 26,
                  "endColumn": 5,
                  "snippet": {
                    "text": "in reverse.\n\nThe best course of action is to avoid ``static`` variables. If that is\nimpossible or inconvenient, one option is to disable the pool, either at build\ntime (disable the ``locking_allocator`` module) or at runtime. Unfortunately the\nruntime setting requires setting an environment variable (see :ref:`env_vars`),\nand doing so consistently *prior to static intialization* is not trivial, due to\nthe previously mentioned fiasco. One option might be to use GCC's\n",
                    "rendered": {
                      "text": "in reverse.\n\nThe best course of action is to avoid ``static`` variables. If that is\nimpossible or inconvenient, one option is to disable the pool, either at build\ntime (disable the ``locking_allocator`` module) or at runtime. Unfortunately the\nruntime setting requires setting an environment variable (see :ref:`env_vars`),\nand doing so consistently *prior to static intialization* is not trivial, due to\nthe previously mentioned fiasco. One option might be to use GCC's\n",
                      "markdown": "`in reverse.\n\nThe best course of action is to avoid ``static`` variables. If that is\nimpossible or inconvenient, one option is to disable the pool, either at build\ntime (disable the ``locking_allocator`` module) or at runtime. Unfortunately the\nruntime setting requires setting an environment variable (see :ref:`env_vars`),\nand doing so consistently *prior to static intialization* is not trivial, due to\nthe previously mentioned fiasco. One option might be to use GCC's\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/footguns.rst"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 79,
                  "endLine": 11,
                  "endColumn": 5,
                  "snippet": {
                    "text": "Static Objects\n------------------\n\nIf you maintain ``static`` variables which hold Botan objects, you will perhaps\nfind that in some circumstances your application crashes in strange ways on\nshutdown. That is because, at least on some operating systems, Botan uses a\nlocked memory pool as backing storage for the ``secure_vector`` type. This pool\nallocates out of pages which have been locked into memory using ``mlock`` or\n",
                    "rendered": {
                      "text": "Static Objects\n------------------\n\nIf you maintain ``static`` variables which hold Botan objects, you will perhaps\nfind that in some circumstances your application crashes in strange ways on\nshutdown. That is because, at least on some operating systems, Botan uses a\nlocked memory pool as backing storage for the ``secure_vector`` type. This pool\nallocates out of pages which have been locked into memory using ``mlock`` or\n",
                      "markdown": "`Static Objects\n------------------\n\nIf you maintain ``static`` variables which hold Botan objects, you will perhaps\nfind that in some circumstances your application crashes in strange ways on\nshutdown. That is because, at least on some operating systems, Botan uses a\nlocked memory pool as backing storage for the ``secure_vector`` type. This pool\nallocates out of pages which have been locked into memory using ``mlock`` or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 47,
                  "endLine": 110,
                  "endColumn": 57,
                  "snippet": {
                    "text": "sign messages just like any other key. Only PKCS #1 v1.5 signatures are supported\nby the v1.2 TPM.\n\n.. cpp:function:: std::vector<std::string> TPM_PrivateKey::registered_keys(TPM_Context& ctx)\n\n      This static function returns the list of all keys (in URL format)\n      registered with the system\n",
                    "rendered": {
                      "text": "sign messages just like any other key. Only PKCS #1 v1.5 signatures are supported\nby the v1.2 TPM.\n\n.. cpp:function:: std::vector<std::string> TPM_PrivateKey::registered_keys(TPM_Context& ctx)\n\n      This static function returns the list of all keys (in URL format)\n      registered with the system\n",
                      "markdown": "`sign messages just like any other key. Only PKCS #1 v1.5 signatures are supported\nby the v1.2 TPM.\n\n.. cpp:function:: std::vector<std::string> TPM_PrivateKey::registered_keys(TPM_Context& ctx)\n\n      This static function returns the list of all keys (in URL format)\n      registered with the system\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 8,
                  "endLine": 106,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n        Returns the bare TSS key handle. Use if you need to call the raw TSS API.\n\nA ``TPM_PrivateKey`` can be passed to a ``PK_Signer`` constructor and used to\nsign messages just like any other key. Only PKCS #1 v1.5 signatures are supported\nby the v1.2 TPM.\n\n",
                    "rendered": {
                      "text": "\n        Returns the bare TSS key handle. Use if you need to call the raw TSS API.\n\nA ``TPM_PrivateKey`` can be passed to a ``PK_Signer`` constructor and used to\nsign messages just like any other key. Only PKCS #1 v1.5 signatures are supported\nby the v1.2 TPM.\n\n",
                      "markdown": "`\n        Returns the bare TSS key handle. Use if you need to call the raw TSS API.\n\nA ``TPM_PrivateKey`` can be passed to a ``PK_Signer`` constructor and used to\nsign messages just like any other key. Only PKCS #1 v1.5 signatures are supported\nby the v1.2 TPM.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 25,
                  "endLine": 92,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        Export the key as an encrypted blob. This blob can later be presented\n        back to the same TPM to load the key.\n\n   .. cpp:function:: TPM_PrivateKey(TPM_Context& ctx, const std::vector<uint8_t>& blob)\n\n        Load a TPM key previously exported as a blob with ``export_blob``.\n\n",
                    "rendered": {
                      "text": "        Export the key as an encrypted blob. This blob can later be presented\n        back to the same TPM to load the key.\n\n   .. cpp:function:: TPM_PrivateKey(TPM_Context& ctx, const std::vector<uint8_t>& blob)\n\n        Load a TPM key previously exported as a blob with ``export_blob``.\n\n",
                      "markdown": "`        Export the key as an encrypted blob. This blob can later be presented\n        back to the same TPM to load the key.\n\n   .. cpp:function:: TPM_PrivateKey(TPM_Context& ctx, const std::vector<uint8_t>& blob)\n\n        Load a TPM key previously exported as a blob with ``export_blob``.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 26,
                  "endLine": 82,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        Returns a UUID which can be passed back to constructor below.\n\n   .. cpp:function::  TPM_PrivateKey(TPM_Context& ctx, const std::string& uuid, \\\n                                      TPM_Storage_Type storage_type)\n\n        Load a registered key. The UUID was returned by the ``register_key`` function.\n",
                    "rendered": {
                      "text": "\n        Returns a UUID which can be passed back to constructor below.\n\n   .. cpp:function::  TPM_PrivateKey(TPM_Context& ctx, const std::string& uuid, \\\n                                      TPM_Storage_Type storage_type)\n\n        Load a registered key. The UUID was returned by the ``register_key`` function.\n",
                      "markdown": "`\n        Returns a UUID which can be passed back to constructor below.\n\n   .. cpp:function::  TPM_PrivateKey(TPM_Context& ctx, const std::string& uuid, \\\n                                      TPM_Storage_Type storage_type)\n\n        Load a registered key. The UUID was returned by the ``register_key`` function.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 32,
                  "endLine": 62,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n        The TPM processor is not fast, be prepared for this to take a while.\n\n        The key_password is the password to the TPM key ?\n\n   .. cpp:function::  std::string register_key(TPM_Storage_Type storage_type)\n\n",
                    "rendered": {
                      "text": "\n        The TPM processor is not fast, be prepared for this to take a while.\n\n        The key_password is the password to the TPM key ?\n\n   .. cpp:function::  std::string register_key(TPM_Storage_Type storage_type)\n\n",
                      "markdown": "`\n        The TPM processor is not fast, be prepared for this to take a while.\n\n        The key_password is the password to the TPM key ?\n\n   .. cpp:function::  std::string register_key(TPM_Storage_Type storage_type)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 16,
                  "endLine": 62,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n        The TPM processor is not fast, be prepared for this to take a while.\n\n        The key_password is the password to the TPM key ?\n\n   .. cpp:function::  std::string register_key(TPM_Storage_Type storage_type)\n\n",
                    "rendered": {
                      "text": "\n        The TPM processor is not fast, be prepared for this to take a while.\n\n        The key_password is the password to the TPM key ?\n\n   .. cpp:function::  std::string register_key(TPM_Storage_Type storage_type)\n\n",
                      "markdown": "`\n        The TPM processor is not fast, be prepared for this to take a while.\n\n        The key_password is the password to the TPM key ?\n\n   .. cpp:function::  std::string register_key(TPM_Storage_Type storage_type)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 83,
                  "endLine": 54,
                  "endColumn": 91,
                  "snippet": {
                    "text": "\n.. cpp:class:: TPM_PrivateKey\n\n   .. cpp:function:: TPM_PrivateKey(TPM_Context& ctx, size_t bits, const char* key_password)\n\n        Create a new RSA key stored on the TPM. The bits should be either 1024\n        or 2048; the TPM interface hypothetically allows larger keys but in\n",
                    "rendered": {
                      "text": "\n.. cpp:class:: TPM_PrivateKey\n\n   .. cpp:function:: TPM_PrivateKey(TPM_Context& ctx, size_t bits, const char* key_password)\n\n        Create a new RSA key stored on the TPM. The bits should be either 1024\n        or 2048; the TPM interface hypothetically allows larger keys but in\n",
                      "markdown": "`\n.. cpp:class:: TPM_PrivateKey\n\n   .. cpp:function:: TPM_PrivateKey(TPM_Context& ctx, size_t bits, const char* key_password)\n\n        Create a new RSA key stored on the TPM. The bits should be either 1024\n        or 2048; the TPM interface hypothetically allows larger keys but in\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 25,
                  "endLine": 54,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n.. cpp:class:: TPM_PrivateKey\n\n   .. cpp:function:: TPM_PrivateKey(TPM_Context& ctx, size_t bits, const char* key_password)\n\n        Create a new RSA key stored on the TPM. The bits should be either 1024\n        or 2048; the TPM interface hypothetically allows larger keys but in\n",
                    "rendered": {
                      "text": "\n.. cpp:class:: TPM_PrivateKey\n\n   .. cpp:function:: TPM_PrivateKey(TPM_Context& ctx, size_t bits, const char* key_password)\n\n        Create a new RSA key stored on the TPM. The bits should be either 1024\n        or 2048; the TPM interface hypothetically allows larger keys but in\n",
                      "markdown": "`\n.. cpp:class:: TPM_PrivateKey\n\n   .. cpp:function:: TPM_PrivateKey(TPM_Context& ctx, size_t bits, const char* key_password)\n\n        Create a new RSA key stored on the TPM. The bits should be either 1024\n        or 2048; the TPM interface hypothetically allows larger keys but in\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 19,
                  "endLine": 52,
                  "endColumn": 29,
                  "snippet": {
                    "text": "hardware it uses a different private key type, with a somewhat different API to\nmatch the TPM's behavior.\n\n.. cpp:class:: TPM_PrivateKey\n\n   .. cpp:function:: TPM_PrivateKey(TPM_Context& ctx, size_t bits, const char* key_password)\n\n",
                    "rendered": {
                      "text": "hardware it uses a different private key type, with a somewhat different API to\nmatch the TPM's behavior.\n\n.. cpp:class:: TPM_PrivateKey\n\n   .. cpp:function:: TPM_PrivateKey(TPM_Context& ctx, size_t bits, const char* key_password)\n\n",
                      "markdown": "`hardware it uses a different private key type, with a somewhat different API to\nmatch the TPM's behavior.\n\n.. cpp:class:: TPM_PrivateKey\n\n   .. cpp:function:: TPM_PrivateKey(TPM_Context& ctx, size_t bits, const char* key_password)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 22,
                  "endLine": 35,
                  "endColumn": 30,
                  "snippet": {
                    "text": "     an argument, which is an informative message for the user. It should return\n     a string containing the password entered by the user.\n\n     Normally the SRK password is null. Use nullptr to signal this.\n\nThe TPM contains a RNG of unknown design or quality. If that doesn't scare you\noff, you can use it with ``TPM_RNG`` which implements the standard\n",
                    "rendered": {
                      "text": "     an argument, which is an informative message for the user. It should return\n     a string containing the password entered by the user.\n\n     Normally the SRK password is null. Use nullptr to signal this.\n\nThe TPM contains a RNG of unknown design or quality. If that doesn't scare you\noff, you can use it with ``TPM_RNG`` which implements the standard\n",
                      "markdown": "`     an argument, which is an informative message for the user. It should return\n     a string containing the password entered by the user.\n\n     Normally the SRK password is null. Use nullptr to signal this.\n\nThe TPM contains a RNG of unknown design or quality. If that doesn't scare you\noff, you can use it with ``TPM_RNG`` which implements the standard\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 29,
                  "endLine": 33,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n     The (somewhat improperly named) pin_cb callback type takes a std::string as\n     an argument, which is an informative message for the user. It should return\n     a string containing the password entered by the user.\n\n     Normally the SRK password is null. Use nullptr to signal this.\n\n",
                    "rendered": {
                      "text": "\n     The (somewhat improperly named) pin_cb callback type takes a std::string as\n     an argument, which is an informative message for the user. It should return\n     a string containing the password entered by the user.\n\n     Normally the SRK password is null. Use nullptr to signal this.\n\n",
                      "markdown": "`\n     The (somewhat improperly named) pin_cb callback type takes a std::string as\n     an argument, which is an informative message for the user. It should return\n     a string containing the password entered by the user.\n\n     Normally the SRK password is null. Use nullptr to signal this.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 61,
                  "endLine": 29,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n.. cpp:class:: TPM_Context\n\n    .. cpp:function:: TPM_Context(pin_cb cb, const char* srk_password)\n\n     The (somewhat improperly named) pin_cb callback type takes a std::string as\n     an argument, which is an informative message for the user. It should return\n",
                    "rendered": {
                      "text": "\n.. cpp:class:: TPM_Context\n\n    .. cpp:function:: TPM_Context(pin_cb cb, const char* srk_password)\n\n     The (somewhat improperly named) pin_cb callback type takes a std::string as\n     an argument, which is an informative message for the user. It should return\n",
                      "markdown": "`\n.. cpp:class:: TPM_Context\n\n    .. cpp:function:: TPM_Context(pin_cb cb, const char* srk_password)\n\n     The (somewhat improperly named) pin_cb callback type takes a std::string as\n     an argument, which is an informative message for the user. It should return\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tpm.rst"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 53,
                  "endLine": 12,
                  "endColumn": 57,
                  "snippet": {
                    "text": "which can be used to measure software state (this is TPMs most famous use, for\nauthenticating a boot sequence).\n\nThe TPM NVRAM and PCR APIs are not supported by Botan at this time, patches welcome.\n\nCurrently only v1.2 TPMs are supported, and the only TPM library supported is\nTrouSerS (http://trousers.sourceforge.net/). Hopefully both of these limitations\n",
                    "rendered": {
                      "text": "which can be used to measure software state (this is TPMs most famous use, for\nauthenticating a boot sequence).\n\nThe TPM NVRAM and PCR APIs are not supported by Botan at this time, patches welcome.\n\nCurrently only v1.2 TPMs are supported, and the only TPM library supported is\nTrouSerS (http://trousers.sourceforge.net/). Hopefully both of these limitations\n",
                      "markdown": "`which can be used to measure software state (this is TPMs most famous use, for\nauthenticating a boot sequence).\n\nThe TPM NVRAM and PCR APIs are not supported by Botan at this time, patches welcome.\n\nCurrently only v1.2 TPMs are supported, and the only TPM library supported is\nTrouSerS (http://trousers.sourceforge.net/). Hopefully both of these limitations\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 30,
                  "endLine": 104,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n     If usage is `Usage_Type::TLS_SERVER_AUTH`, then *hostname* should\n     match the information in the server certificate. If usage is\n     `TLS_CLIENT_AUTH`, then *hostname* specifies the host the client\n     is authenticating against (from SNI); the callback can use this for\n     any special site specific auth logic.\n\n",
                    "rendered": {
                      "text": "\n     If usage is `Usage_Type::TLS_SERVER_AUTH`, then *hostname* should\n     match the information in the server certificate. If usage is\n     `TLS_CLIENT_AUTH`, then *hostname* specifies the host the client\n     is authenticating against (from SNI); the callback can use this for\n     any special site specific auth logic.\n\n",
                      "markdown": "`\n     If usage is `Usage_Type::TLS_SERVER_AUTH`, then *hostname* should\n     match the information in the server certificate. If usage is\n     `TLS_CLIENT_AUTH`, then *hostname* specifies the host the client\n     is authenticating against (from SNI); the callback can use this for\n     any special site specific auth logic.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 54,
                  "endLine": 102,
                  "endColumn": 62,
                  "snippet": {
                    "text": "     certificate is the first element. Throws an exception if any\n     error makes this certificate chain unacceptable.\n\n     If usage is `Usage_Type::TLS_SERVER_AUTH`, then *hostname* should\n     match the information in the server certificate. If usage is\n     `TLS_CLIENT_AUTH`, then *hostname* specifies the host the client\n     is authenticating against (from SNI); the callback can use this for\n",
                    "rendered": {
                      "text": "     certificate is the first element. Throws an exception if any\n     error makes this certificate chain unacceptable.\n\n     If usage is `Usage_Type::TLS_SERVER_AUTH`, then *hostname* should\n     match the information in the server certificate. If usage is\n     `TLS_CLIENT_AUTH`, then *hostname* specifies the host the client\n     is authenticating against (from SNI); the callback can use this for\n",
                      "markdown": "`     certificate is the first element. Throws an exception if any\n     error makes this certificate chain unacceptable.\n\n     If usage is `Usage_Type::TLS_SERVER_AUTH`, then *hostname* should\n     match the information in the server certificate. If usage is\n     `TLS_CLIENT_AUTH`, then *hostname* specifies the host the client\n     is authenticating against (from SNI); the callback can use this for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 36,
                  "endLine": 91,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                   const std::vector<std::shared_ptr<const OCSP::Response>>& ocsp_responses, \\\n                   const std::vector<Certificate_Store*>& trusted_roots, \\\n                   Usage_Type usage, \\\n                   std::string_view hostname, \\\n                   const Policy& policy)\n\n     Optional - default implementation should work for many users.\n",
                    "rendered": {
                      "text": "                   const std::vector<std::shared_ptr<const OCSP::Response>>& ocsp_responses, \\\n                   const std::vector<Certificate_Store*>& trusted_roots, \\\n                   Usage_Type usage, \\\n                   std::string_view hostname, \\\n                   const Policy& policy)\n\n     Optional - default implementation should work for many users.\n",
                      "markdown": "`                   const std::vector<std::shared_ptr<const OCSP::Response>>& ocsp_responses, \\\n                   const std::vector<Certificate_Store*>& trusted_roots, \\\n                   Usage_Type usage, \\\n                   std::string_view hostname, \\\n                   const Policy& policy)\n\n     Optional - default implementation should work for many users.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 1203,
                  "startColumn": 78,
                  "endLine": 1204,
                  "snippet": {
                    "text": "\nTo use the asio stream wrapper, a relatively recent version of boost is required.\nInclude ``botan/asio_compat.h`` and check that ``BOTAN_FOUND_COMPATIBLE_BOOST_ASIO_VERSION``\nis defined before including ``botan/asio_stream.h`` to be ensure compatibility at\ncompile time of your application.\n\nThe asio Stream offers the following interface:\n\n",
                    "rendered": {
                      "text": "\nTo use the asio stream wrapper, a relatively recent version of boost is required.\nInclude ``botan/asio_compat.h`` and check that ``BOTAN_FOUND_COMPATIBLE_BOOST_ASIO_VERSION``\nis defined before including ``botan/asio_stream.h`` to be ensure compatibility at\ncompile time of your application.\n\nThe asio Stream offers the following interface:\n\n",
                      "markdown": "`\nTo use the asio stream wrapper, a relatively recent version of boost is required.\nInclude ``botan/asio_compat.h`` and check that ``BOTAN_FOUND_COMPATIBLE_BOOST_ASIO_VERSION``\nis defined before including ``botan/asio_stream.h`` to be ensure compatibility at\ncompile time of your application.\n\nThe asio Stream offers the following interface:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 1043,
                  "startColumn": 39,
                  "endLine": 1043,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n     Return allowed ciphersuites in order of preference\n\n     Allows an application to have full control over ciphersuites\n     by returning desired ciphersuites in preference order.\n\n.. _tls_alerts:\n",
                    "rendered": {
                      "text": "\n     Return allowed ciphersuites in order of preference\n\n     Allows an application to have full control over ciphersuites\n     by returning desired ciphersuites in preference order.\n\n.. _tls_alerts:\n",
                      "markdown": "`\n     Return allowed ciphersuites in order of preference\n\n     Allows an application to have full control over ciphersuites\n     by returning desired ciphersuites in preference order.\n\n.. _tls_alerts:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 979,
                  "startColumn": 66,
                  "endLine": 979,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n     Return the number of session tickets a TLS 1.3 server should issue\n     automatically once a successful handshake was made. Alternatively, users\n     may manually call ``TLS::Server::send_new_session_tickets()`` at any time\n     after a successful handshake.\n\n     Default: 1\n",
                    "rendered": {
                      "text": "\n     Return the number of session tickets a TLS 1.3 server should issue\n     automatically once a successful handshake was made. Alternatively, users\n     may manually call ``TLS::Server::send_new_session_tickets()`` at any time\n     after a successful handshake.\n\n     Default: 1\n",
                      "markdown": "`\n     Return the number of session tickets a TLS 1.3 server should issue\n     automatically once a successful handshake was made. Alternatively, users\n     may manually call ``TLS::Server::send_new_session_tickets()`` at any time\n     after a successful handshake.\n\n     Default: 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 678,
                  "startColumn": 41,
                  "endLine": 678,
                  "endColumn": 50,
                  "snippet": {
                    "text": "TLS Policies\n----------------------------------------\n\n``TLS::Policy`` is how an application can control details of what will\nbe negotiated during a handshake. The base class acts as the default\npolicy. There is also a ``Strict_Policy`` (which forces only secure\noptions, reducing compatibility) and ``Text_Policy`` which reads\n",
                    "rendered": {
                      "text": "TLS Policies\n----------------------------------------\n\n``TLS::Policy`` is how an application can control details of what will\nbe negotiated during a handshake. The base class acts as the default\npolicy. There is also a ``Strict_Policy`` (which forces only secure\noptions, reducing compatibility) and ``Text_Policy`` which reads\n",
                      "markdown": "`TLS Policies\n----------------------------------------\n\n``TLS::Policy`` is how an application can control details of what will\nbe negotiated during a handshake. The base class acts as the default\npolicy. There is also a ``Strict_Policy`` (which forces only secure\noptions, reducing compatibility) and ``Text_Policy`` which reads\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 7,
                  "endLine": 621,
                  "endColumn": 11,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis session manager is only available if support for SQLite3 was\nenabled at build time. If the macro\n``BOTAN_HAS_TLS_SQLITE3_SESSION_MANAGER`` is defined, then\n``botan/tls_session_manager_sqlite.h`` contains\n``TLS::Session_Manager_SQLite`` which stores sessions persistently to\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis session manager is only available if support for SQLite3 was\nenabled at build time. If the macro\n``BOTAN_HAS_TLS_SQLITE3_SESSION_MANAGER`` is defined, then\n``botan/tls_session_manager_sqlite.h`` contains\n``TLS::Session_Manager_SQLite`` which stores sessions persistently to\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis session manager is only available if support for SQLite3 was\nenabled at build time. If the macro\n``BOTAN_HAS_TLS_SQLITE3_SESSION_MANAGER`` is defined, then\n``botan/tls_session_manager_sqlite.h`` contains\n``TLS::Session_Manager_SQLite`` which stores sessions persistently to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 8,
                  "endLine": 614,
                  "endColumn": 12,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``TLS::Session_Manager_Noop`` implementation does not save\nsessions at all, and thus session resumption always fails. Its\nconstructor has no arguments.\n\nSQLite3 Session Manager\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``TLS::Session_Manager_Noop`` implementation does not save\nsessions at all, and thus session resumption always fails. Its\nconstructor has no arguments.\n\nSQLite3 Session Manager\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``TLS::Session_Manager_Noop`` implementation does not save\nsessions at all, and thus session resumption always fails. Its\nconstructor has no arguments.\n\nSQLite3 Session Manager\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 585,
                  "startColumn": 20,
                  "endLine": 585,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      Try to find some saved sessions using information about the server. TLS\n      1.3 clients may offer more than one session for resumption to the server.\n      It is okay to ignore the *max_sessions_hint* and just return exactly one\n      or no sessions at all.\n\n .. cpp:function:: recursive_mutex_type& mutex()\n\n",
                    "rendered": {
                      "text": "      Try to find some saved sessions using information about the server. TLS\n      1.3 clients may offer more than one session for resumption to the server.\n      It is okay to ignore the *max_sessions_hint* and just return exactly one\n      or no sessions at all.\n\n .. cpp:function:: recursive_mutex_type& mutex()\n\n",
                      "markdown": "`      Try to find some saved sessions using information about the server. TLS\n      1.3 clients may offer more than one session for resumption to the server.\n      It is okay to ignore the *max_sessions_hint* and just return exactly one\n      or no sessions at all.\n\n .. cpp:function:: recursive_mutex_type& mutex()\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 563,
                  "startColumn": 5,
                  "endLine": 563,
                  "endColumn": 9,
                  "snippet": {
                    "text": " .. cpp:function:: size_t remove(const Session_Handle& handle)\n\n      Remove the session identified by *handle*. Future attempts\n      at resumption should fail for this session. Returns the number of sessions\n      actually removed.\n\n .. cpp:function:: size_t remove_all()\n",
                    "rendered": {
                      "text": " .. cpp:function:: size_t remove(const Session_Handle& handle)\n\n      Remove the session identified by *handle*. Future attempts\n      at resumption should fail for this session. Returns the number of sessions\n      actually removed.\n\n .. cpp:function:: size_t remove_all()\n",
                      "markdown": "` .. cpp:function:: size_t remove(const Session_Handle& handle)\n\n      Remove the session identified by *handle*. Future attempts\n      at resumption should fail for this session. Returns the number of sessions\n      actually removed.\n\n .. cpp:function:: size_t remove_all()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 59,
                  "endLine": 408,
                  "snippet": {
                    "text": "   server using the ALPN extension.\n\n   The optional *reserved_io_buffer_size* specifies how many bytes to\n   pre-allocate in the I/O buffers. Use this if you want to control\n   how much memory the channel uses initially (the buffers will be\n   resized as needed to process inputs). Otherwise some reasonable\n   default is used.\n\n",
                    "rendered": {
                      "text": "   server using the ALPN extension.\n\n   The optional *reserved_io_buffer_size* specifies how many bytes to\n   pre-allocate in the I/O buffers. Use this if you want to control\n   how much memory the channel uses initially (the buffers will be\n   resized as needed to process inputs). Otherwise some reasonable\n   default is used.\n\n",
                      "markdown": "`   server using the ALPN extension.\n\n   The optional *reserved_io_buffer_size* specifies how many bytes to\n   pre-allocate in the I/O buffers. Use this if you want to control\n   how much memory the channel uses initially (the buffers will be\n   resized as needed to process inputs). Otherwise some reasonable\n   default is used.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 38,
                  "endLine": 386,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   addresses are not allowed by RFC 6066 and may lead to interoperability\n   problems.\n\n   Use the optional *offer_version* to control the version of TLS you\n   wish the client to offer. Normally, you'll want to offer the most\n   recent version of (D)TLS that is available, however some broken\n   servers are intolerant of certain versions being offered, and for\n",
                    "rendered": {
                      "text": "   addresses are not allowed by RFC 6066 and may lead to interoperability\n   problems.\n\n   Use the optional *offer_version* to control the version of TLS you\n   wish the client to offer. Normally, you'll want to offer the most\n   recent version of (D)TLS that is available, however some broken\n   servers are intolerant of certain versions being offered, and for\n",
                      "markdown": "`   addresses are not allowed by RFC 6066 and may lead to interoperability\n   problems.\n\n   Use the optional *offer_version* to control the version of TLS you\n   wish the client to offer. Normally, you'll want to offer the most\n   recent version of (D)TLS that is available, however some broken\n   servers are intolerant of certain versions being offered, and for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 45,
                  "endLine": 304,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n   .. cpp:function:: void update_traffic_keys(bool request_peer_update = false)\n\n      After a successful handshake, this will update our traffic keys and\n      may send a request to do the same to the peer.\n\n      Note that this is a TLS 1.3 feature and invocations on a channel\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: void update_traffic_keys(bool request_peer_update = false)\n\n      After a successful handshake, this will update our traffic keys and\n      may send a request to do the same to the peer.\n\n      Note that this is a TLS 1.3 feature and invocations on a channel\n",
                      "markdown": "`\n   .. cpp:function:: void update_traffic_keys(bool request_peer_update = false)\n\n      After a successful handshake, this will update our traffic keys and\n      may send a request to do the same to the peer.\n\n      Note that this is a TLS 1.3 feature and invocations on a channel\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 64,
                  "endLine": 234,
                  "snippet": {
                    "text": "   .. cpp:function:: void send(std::span<const uint8_t> vec)\n\n     Create one or more new TLS application records containing the\n     provided data and send them. This will eventually result in at\n     least one call to the ``output_fn`` callback before ``send``\n     returns.\n\n     If the current TLS connection state is unable to transmit new\n",
                    "rendered": {
                      "text": "   .. cpp:function:: void send(std::span<const uint8_t> vec)\n\n     Create one or more new TLS application records containing the\n     provided data and send them. This will eventually result in at\n     least one call to the ``output_fn`` callback before ``send``\n     returns.\n\n     If the current TLS connection state is unable to transmit new\n",
                      "markdown": "`   .. cpp:function:: void send(std::span<const uint8_t> vec)\n\n     Create one or more new TLS application records containing the\n     provided data and send them. This will eventually result in at\n     least one call to the ``output_fn`` callback before ``send``\n     returns.\n\n     If the current TLS connection state is unable to transmit new\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 1204,
                  "startColumn": 7,
                  "endLine": 1204,
                  "endColumn": 13,
                  "snippet": {
                    "text": "To use the asio stream wrapper, a relatively recent version of boost is required.\nInclude ``botan/asio_compat.h`` and check that ``BOTAN_FOUND_COMPATIBLE_BOOST_ASIO_VERSION``\nis defined before including ``botan/asio_stream.h`` to be ensure compatibility at\ncompile time of your application.\n\nThe asio Stream offers the following interface:\n\n",
                    "rendered": {
                      "text": "To use the asio stream wrapper, a relatively recent version of boost is required.\nInclude ``botan/asio_compat.h`` and check that ``BOTAN_FOUND_COMPATIBLE_BOOST_ASIO_VERSION``\nis defined before including ``botan/asio_stream.h`` to be ensure compatibility at\ncompile time of your application.\n\nThe asio Stream offers the following interface:\n\n",
                      "markdown": "`To use the asio stream wrapper, a relatively recent version of boost is required.\nInclude ``botan/asio_compat.h`` and check that ``BOTAN_FOUND_COMPATIBLE_BOOST_ASIO_VERSION``\nis defined before including ``botan/asio_stream.h`` to be ensure compatibility at\ncompile time of your application.\n\nThe asio Stream offers the following interface:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 1126,
                  "startColumn": 57,
                  "endLine": 1126,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\nNote that post-quantum key exchanges in TLS 1.3 are not conclusively\nstandardized. Therefore, the key exchange group identifiers used by various TLS\n1.3 implementations are not consistent. Applications that wish to enable hybrid\nkey exchanges must enable the hybrid algorithms in their TLS policy. Override\n`TLS::Policy::key_exchange_groups()` and return a list of the desired exchange\ngroups. For text-based policy configurations use the identifiers in parenthesis.\n",
                    "rendered": {
                      "text": "\nNote that post-quantum key exchanges in TLS 1.3 are not conclusively\nstandardized. Therefore, the key exchange group identifiers used by various TLS\n1.3 implementations are not consistent. Applications that wish to enable hybrid\nkey exchanges must enable the hybrid algorithms in their TLS policy. Override\n`TLS::Policy::key_exchange_groups()` and return a list of the desired exchange\ngroups. For text-based policy configurations use the identifiers in parenthesis.\n",
                      "markdown": "`\nNote that post-quantum key exchanges in TLS 1.3 are not conclusively\nstandardized. Therefore, the key exchange group identifiers used by various TLS\n1.3 implementations are not consistent. Applications that wish to enable hybrid\nkey exchanges must enable the hybrid algorithms in their TLS policy. Override\n`TLS::Policy::key_exchange_groups()` and return a list of the desired exchange\ngroups. For text-based policy configurations use the identifiers in parenthesis.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 979,
                  "startColumn": 73,
                  "endLine": 980,
                  "snippet": {
                    "text": "\n     Return the number of session tickets a TLS 1.3 server should issue\n     automatically once a successful handshake was made. Alternatively, users\n     may manually call ``TLS::Server::send_new_session_tickets()`` at any time\n     after a successful handshake.\n\n     Default: 1\n\n",
                    "rendered": {
                      "text": "\n     Return the number of session tickets a TLS 1.3 server should issue\n     automatically once a successful handshake was made. Alternatively, users\n     may manually call ``TLS::Server::send_new_session_tickets()`` at any time\n     after a successful handshake.\n\n     Default: 1\n\n",
                      "markdown": "`\n     Return the number of session tickets a TLS 1.3 server should issue\n     automatically once a successful handshake was made. Alternatively, users\n     may manually call ``TLS::Server::send_new_session_tickets()`` at any time\n     after a successful handshake.\n\n     Default: 1\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 11,
                  "endLine": 642,
                  "endColumn": 20,
                  "snippet": {
                    "text": "       std::string_view db_filename, \\\n       size_t max_sessions = 1000)\n\n   Uses the sqlite3 database named by *db_filename*.\n\nStateless Session Manager\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "       std::string_view db_filename, \\\n       size_t max_sessions = 1000)\n\n   Uses the sqlite3 database named by *db_filename*.\n\nStateless Session Manager\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`       std::string_view db_filename, \\\n       size_t max_sessions = 1000)\n\n   Uses the sqlite3 database named by *db_filename*.\n\nStateless Session Manager\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 625,
                  "startColumn": 1,
                  "endLine": 625,
                  "endColumn": 10,
                  "snippet": {
                    "text": "``BOTAN_HAS_TLS_SQLITE3_SESSION_MANAGER`` is defined, then\n``botan/tls_session_manager_sqlite.h`` contains\n``TLS::Session_Manager_SQLite`` which stores sessions persistently to\na sqlite3 database. The session data is encrypted using a passphrase,\nand stored in two tables, named ``tls_sessions`` (which holds the\nactual session information) and ``tls_sessions_metadata`` (which holds\nthe PBKDF information).\n",
                    "rendered": {
                      "text": "``BOTAN_HAS_TLS_SQLITE3_SESSION_MANAGER`` is defined, then\n``botan/tls_session_manager_sqlite.h`` contains\n``TLS::Session_Manager_SQLite`` which stores sessions persistently to\na sqlite3 database. The session data is encrypted using a passphrase,\nand stored in two tables, named ``tls_sessions`` (which holds the\nactual session information) and ``tls_sessions_metadata`` (which holds\nthe PBKDF information).\n",
                      "markdown": "```BOTAN_HAS_TLS_SQLITE3_SESSION_MANAGER`` is defined, then\n``botan/tls_session_manager_sqlite.h`` contains\n``TLS::Session_Manager_SQLite`` which stores sessions persistently to\na sqlite3 database. The session data is encrypted using a passphrase,\nand stored in two tables, named ``tls_sessions`` (which holds the\nactual session information) and ``tls_sessions_metadata`` (which holds\nthe PBKDF information).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 53,
                  "endLine": 620,
                  "endColumn": 62,
                  "snippet": {
                    "text": "SQLite3 Session Manager\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis session manager is only available if support for SQLite3 was\nenabled at build time. If the macro\n``BOTAN_HAS_TLS_SQLITE3_SESSION_MANAGER`` is defined, then\n``botan/tls_session_manager_sqlite.h`` contains\n",
                    "rendered": {
                      "text": "SQLite3 Session Manager\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis session manager is only available if support for SQLite3 was\nenabled at build time. If the macro\n``BOTAN_HAS_TLS_SQLITE3_SESSION_MANAGER`` is defined, then\n``botan/tls_session_manager_sqlite.h`` contains\n",
                      "markdown": "`SQLite3 Session Manager\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis session manager is only available if support for SQLite3 was\nenabled at build time. If the macro\n``BOTAN_HAS_TLS_SQLITE3_SESSION_MANAGER`` is defined, then\n``botan/tls_session_manager_sqlite.h`` contains\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 616,
                  "endLine": 617,
                  "endColumn": 8,
                  "snippet": {
                    "text": "The ``TLS::Session_Manager_Noop`` implementation does not save\nsessions at all, and thus session resumption always fails. Its\nconstructor has no arguments.\n\nSQLite3 Session Manager\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis session manager is only available if support for SQLite3 was\n",
                    "rendered": {
                      "text": "The ``TLS::Session_Manager_Noop`` implementation does not save\nsessions at all, and thus session resumption always fails. Its\nconstructor has no arguments.\n\nSQLite3 Session Manager\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis session manager is only available if support for SQLite3 was\n",
                      "markdown": "`The ``TLS::Session_Manager_Noop`` implementation does not save\nsessions at all, and thus session resumption always fails. Its\nconstructor has no arguments.\n\nSQLite3 Session Manager\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis session manager is only available if support for SQLite3 was\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 12,
                  "endLine": 582,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n .. cpp:function:: std::vector<Session_with_Handle> find_some(const Server_Information& info, size_t max_sessions_hint)\n\n      Try to find some saved sessions using information about the server. TLS\n      1.3 clients may offer more than one session for resumption to the server.\n      It is okay to ignore the *max_sessions_hint* and just return exactly one\n      or no sessions at all.\n",
                    "rendered": {
                      "text": "\n .. cpp:function:: std::vector<Session_with_Handle> find_some(const Server_Information& info, size_t max_sessions_hint)\n\n      Try to find some saved sessions using information about the server. TLS\n      1.3 clients may offer more than one session for resumption to the server.\n      It is okay to ignore the *max_sessions_hint* and just return exactly one\n      or no sessions at all.\n",
                      "markdown": "`\n .. cpp:function:: std::vector<Session_with_Handle> find_some(const Server_Information& info, size_t max_sessions_hint)\n\n      Try to find some saved sessions using information about the server. TLS\n      1.3 clients may offer more than one session for resumption to the server.\n      It is okay to ignore the *max_sessions_hint* and just return exactly one\n      or no sessions at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 40,
                  "endLine": 577,
                  "endColumn": 46,
                  "snippet": {
                    "text": "      storage. Typical implementations will use ``TLS::Session::decrypt`` or the\n      ``TLS::Session`` constructors that deserialize a session from DER or PEM.\n      If no session was found for the given *handle*, return std::nullopt. This\n      method is called in TLS servers to find a specific session for a given\n      handle.\n\n .. cpp:function:: std::vector<Session_with_Handle> find_some(const Server_Information& info, size_t max_sessions_hint)\n",
                    "rendered": {
                      "text": "      storage. Typical implementations will use ``TLS::Session::decrypt`` or the\n      ``TLS::Session`` constructors that deserialize a session from DER or PEM.\n      If no session was found for the given *handle*, return std::nullopt. This\n      method is called in TLS servers to find a specific session for a given\n      handle.\n\n .. cpp:function:: std::vector<Session_with_Handle> find_some(const Server_Information& info, size_t max_sessions_hint)\n",
                      "markdown": "`      storage. Typical implementations will use ``TLS::Session::decrypt`` or the\n      ``TLS::Session`` constructors that deserialize a session from DER or PEM.\n      If no session was found for the given *handle*, return std::nullopt. This\n      method is called in TLS servers to find a specific session for a given\n      handle.\n\n .. cpp:function:: std::vector<Session_with_Handle> find_some(const Server_Information& info, size_t max_sessions_hint)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 475,
                  "startColumn": 5,
                  "endLine": 475,
                  "endColumn": 11,
                  "snippet": {
                    "text": "and then reuse that information to bootstrap a new session in way that\nis much cheaper computationally than a full handshake.\n\nEvery time the handshake callback (``TLS::Callbacks::tls_session_established``)\nis called, a new session has been established, and a ``TLS::Session_Summary`` is\nincluded that provides information about that session:\n\n",
                    "rendered": {
                      "text": "and then reuse that information to bootstrap a new session in way that\nis much cheaper computationally than a full handshake.\n\nEvery time the handshake callback (``TLS::Callbacks::tls_session_established``)\nis called, a new session has been established, and a ``TLS::Session_Summary`` is\nincluded that provides information about that session:\n\n",
                      "markdown": "`and then reuse that information to bootstrap a new session in way that\nis much cheaper computationally than a full handshake.\n\nEvery time the handshake callback (``TLS::Callbacks::tls_session_established``)\nis called, a new session has been established, and a ``TLS::Session_Summary`` is\nincluded that provides information about that session:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 2,
                  "endLine": 387,
                  "endColumn": 8,
                  "snippet": {
                    "text": "   problems.\n\n   Use the optional *offer_version* to control the version of TLS you\n   wish the client to offer. Normally, you'll want to offer the most\n   recent version of (D)TLS that is available, however some broken\n   servers are intolerant of certain versions being offered, and for\n   classes of applications that have to deal with such servers\n",
                    "rendered": {
                      "text": "   problems.\n\n   Use the optional *offer_version* to control the version of TLS you\n   wish the client to offer. Normally, you'll want to offer the most\n   recent version of (D)TLS that is available, however some broken\n   servers are intolerant of certain versions being offered, and for\n   classes of applications that have to deal with such servers\n",
                      "markdown": "`   problems.\n\n   Use the optional *offer_version* to control the version of TLS you\n   wish the client to offer. Normally, you'll want to offer the most\n   recent version of (D)TLS that is available, however some broken\n   servers are intolerant of certain versions being offered, and for\n   classes of applications that have to deal with such servers\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 60,
                  "endLine": 383,
                  "snippet": {
                    "text": "   the server select what certificate to use and helps the client\n   validate the connection.\n\n   Note that the server name indicator name must be a FQDN.  IP\n   addresses are not allowed by RFC 6066 and may lead to interoperability\n   problems.\n\n   Use the optional *offer_version* to control the version of TLS you\n",
                    "rendered": {
                      "text": "   the server select what certificate to use and helps the client\n   validate the connection.\n\n   Note that the server name indicator name must be a FQDN.  IP\n   addresses are not allowed by RFC 6066 and may lead to interoperability\n   problems.\n\n   Use the optional *offer_version* to control the version of TLS you\n",
                      "markdown": "`   the server select what certificate to use and helps the client\n   validate the connection.\n\n   Note that the server name indicator name must be a FQDN.  IP\n   addresses are not allowed by RFC 6066 and may lead to interoperability\n   problems.\n\n   Use the optional *offer_version* to control the version of TLS you\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 60,
                  "endLine": 281,
                  "snippet": {
                    "text": "      This function does nothing unless the channel represents a DTLS\n      connection and a handshake is actively in progress. In this case\n      it will check the current timeout state and potentially initiate\n      retransmission of handshake packets. Returns true if a timeout\n      condition occurred.\n\n   .. cpp:function:: void renegotiate(bool force_full_renegotiation = false)\n\n",
                    "rendered": {
                      "text": "      This function does nothing unless the channel represents a DTLS\n      connection and a handshake is actively in progress. In this case\n      it will check the current timeout state and potentially initiate\n      retransmission of handshake packets. Returns true if a timeout\n      condition occurred.\n\n   .. cpp:function:: void renegotiate(bool force_full_renegotiation = false)\n\n",
                      "markdown": "`      This function does nothing unless the channel represents a DTLS\n      connection and a handshake is actively in progress. In this case\n      it will check the current timeout state and potentially initiate\n      retransmission of handshake packets. Returns true if a timeout\n      condition occurred.\n\n   .. cpp:function:: void renegotiate(bool force_full_renegotiation = false)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 31,
                  "endLine": 279,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n      This function does nothing unless the channel represents a DTLS\n      connection and a handshake is actively in progress. In this case\n      it will check the current timeout state and potentially initiate\n      retransmission of handshake packets. Returns true if a timeout\n      condition occurred.\n\n",
                    "rendered": {
                      "text": "\n      This function does nothing unless the channel represents a DTLS\n      connection and a handshake is actively in progress. In this case\n      it will check the current timeout state and potentially initiate\n      retransmission of handshake packets. Returns true if a timeout\n      condition occurred.\n\n",
                      "markdown": "`\n      This function does nothing unless the channel represents a DTLS\n      connection and a handshake is actively in progress. In this case\n      it will check the current timeout state and potentially initiate\n      retransmission of handshake packets. Returns true if a timeout\n      condition occurred.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 43,
                  "endLine": 174,
                  "endColumn": 47,
                  "snippet": {
                    "text": " .. cpp:function:: std::string tls_peer_network_identity()\n\n     Optional. Return a string that identifies the peer in some unique way\n     (for example, by formatting the remote IP and port into a string).\n     This is currently used to bind DTLS cookies to the network identity.\n\n .. cpp:function:: void tls_inspect_handshake_msg(const Handshake_Message&)\n",
                    "rendered": {
                      "text": " .. cpp:function:: std::string tls_peer_network_identity()\n\n     Optional. Return a string that identifies the peer in some unique way\n     (for example, by formatting the remote IP and port into a string).\n     This is currently used to bind DTLS cookies to the network identity.\n\n .. cpp:function:: void tls_inspect_handshake_msg(const Handshake_Message&)\n",
                      "markdown": "` .. cpp:function:: std::string tls_peer_network_identity()\n\n     Optional. Return a string that identifies the peer in some unique way\n     (for example, by formatting the remote IP and port into a string).\n     This is currently used to bind DTLS cookies to the network identity.\n\n .. cpp:function:: void tls_inspect_handshake_msg(const Handshake_Message&)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/tls.rst"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 53,
                  "endLine": 124,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n .. cpp:function:: std::chrono::milliseconds tls_verify_cert_chain_ocsp_timeout() const\n\n     Called by default `tls_verify_cert_chain` to set timeout for online OCSP requests\n     on the certificate chain. Return 0 to disable OCSP. Current default is 0.\n\n .. cpp:function:: std::string tls_server_choose_app_protocol(const std::vector<std::string>& client_protos)\n",
                    "rendered": {
                      "text": "\n .. cpp:function:: std::chrono::milliseconds tls_verify_cert_chain_ocsp_timeout() const\n\n     Called by default `tls_verify_cert_chain` to set timeout for online OCSP requests\n     on the certificate chain. Return 0 to disable OCSP. Current default is 0.\n\n .. cpp:function:: std::string tls_server_choose_app_protocol(const std::vector<std::string>& client_protos)\n",
                      "markdown": "`\n .. cpp:function:: std::chrono::milliseconds tls_verify_cert_chain_ocsp_timeout() const\n\n     Called by default `tls_verify_cert_chain` to set timeout for online OCSP requests\n     on the certificate chain. Return 0 to disable OCSP. Current default is 0.\n\n .. cpp:function:: std::string tls_server_choose_app_protocol(const std::vector<std::string>& client_protos)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/providers.rst"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 6,
                  "endLine": 163,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    auto key = Botan::create_private_key(\"RSA\", rng, \"3072\", \"CommonCrypto\");\n\nAnother way to implement a provider for public key algorithms is to implement\nthe ``Private_Key`` and ``Public_Key`` interfaces. This allows for different\nuse cases, e.g., to use a key stored in a hardware security module, handled\nby a different operating system process (to avoid leaking the key material),\nor even implement an algorithm not supported by Botan. The resulting key class\n",
                    "rendered": {
                      "text": "    auto key = Botan::create_private_key(\"RSA\", rng, \"3072\", \"CommonCrypto\");\n\nAnother way to implement a provider for public key algorithms is to implement\nthe ``Private_Key`` and ``Public_Key`` interfaces. This allows for different\nuse cases, e.g., to use a key stored in a hardware security module, handled\nby a different operating system process (to avoid leaking the key material),\nor even implement an algorithm not supported by Botan. The resulting key class\n",
                      "markdown": "`    auto key = Botan::create_private_key(\"RSA\", rng, \"3072\", \"CommonCrypto\");\n\nAnother way to implement a provider for public key algorithms is to implement\nthe ``Private_Key`` and ``Public_Key`` interfaces. This allows for different\nuse cases, e.g., to use a key stored in a hardware security module, handled\nby a different operating system process (to avoid leaking the key material),\nor even implement an algorithm not supported by Botan. The resulting key class\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/providers.rst"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 29,
                  "endLine": 160,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n    Botan::AutoSeeded_RNG rng;\n\n    auto key = Botan::create_private_key(\"RSA\", rng, \"3072\", \"CommonCrypto\");\n\nAnother way to implement a provider for public key algorithms is to implement\nthe ``Private_Key`` and ``Public_Key`` interfaces. This allows for different\n",
                    "rendered": {
                      "text": "\n    Botan::AutoSeeded_RNG rng;\n\n    auto key = Botan::create_private_key(\"RSA\", rng, \"3072\", \"CommonCrypto\");\n\nAnother way to implement a provider for public key algorithms is to implement\nthe ``Private_Key`` and ``Public_Key`` interfaces. This allows for different\n",
                      "markdown": "`\n    Botan::AutoSeeded_RNG rng;\n\n    auto key = Botan::create_private_key(\"RSA\", rng, \"3072\", \"CommonCrypto\");\n\nAnother way to implement a provider for public key algorithms is to implement\nthe ``Private_Key`` and ``Public_Key`` interfaces. This allows for different\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/providers.rst"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 44,
                  "endLine": 146,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    signer.update(\"World\");\n    auto signature = signer.signature(rng);\n\nTo create a key object, use ``Botan::create_private_key()``, which takes\na string specifying the algorithm and the provider to be used. For example, to\ncreate a 3072 bit RSA key with the *CommonCrypto* provider:\n\n",
                    "rendered": {
                      "text": "    signer.update(\"World\");\n    auto signature = signer.signature(rng);\n\nTo create a key object, use ``Botan::create_private_key()``, which takes\na string specifying the algorithm and the provider to be used. For example, to\ncreate a 3072 bit RSA key with the *CommonCrypto* provider:\n\n",
                      "markdown": "`    signer.update(\"World\");\n    auto signature = signer.signature(rng);\n\nTo create a key object, use ``Botan::create_private_key()``, which takes\na string specifying the algorithm and the provider to be used. For example, to\ncreate a 3072 bit RSA key with the *CommonCrypto* provider:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/providers.rst"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 29,
                  "endLine": 137,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    #include <botan/pubkey.h>\n\n    Botan::AutoSeeded_RNG rng;\n    auto key = Botan::create_private_key(\"RSA\", rng, \"3072\");\n\n    Botan::PK_Signer signer(key, rng, \"EMSA3(SHA-256)\", Botan::Signature_Format::Standard, \"CommonCrypto\");\n\n",
                    "rendered": {
                      "text": "    #include <botan/pubkey.h>\n\n    Botan::AutoSeeded_RNG rng;\n    auto key = Botan::create_private_key(\"RSA\", rng, \"3072\");\n\n    Botan::PK_Signer signer(key, rng, \"EMSA3(SHA-256)\", Botan::Signature_Format::Standard, \"CommonCrypto\");\n\n",
                      "markdown": "`    #include <botan/pubkey.h>\n\n    Botan::AutoSeeded_RNG rng;\n    auto key = Botan::create_private_key(\"RSA\", rng, \"3072\");\n\n    Botan::PK_Signer signer(key, rng, \"EMSA3(SHA-256)\", Botan::Signature_Format::Standard, \"CommonCrypto\");\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/providers.rst"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 4,
                  "endLine": 54,
                  "endColumn": 12,
                  "snippet": {
                    "text": "* ``Hash``\n* ``KDF``\n* ``MAC``\n* ``PasswordHashFamily``\n* ``PBKDF``\n* ``StreamCipher``\n* ``XOF``\n",
                    "rendered": {
                      "text": "* ``Hash``\n* ``KDF``\n* ``MAC``\n* ``PasswordHashFamily``\n* ``PBKDF``\n* ``StreamCipher``\n* ``XOF``\n",
                      "markdown": "`* ``Hash``\n* ``KDF``\n* ``MAC``\n* ``PasswordHashFamily``\n* ``PBKDF``\n* ``StreamCipher``\n* ``XOF``\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/providers.rst"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 57,
                  "endLine": 103,
                  "endColumn": 61,
                  "snippet": {
                    "text": "Regardless of the default provider, a specific provider can always be requested\nby passing the provider name as the second argument to ``T::create()``/``T::create_or_throw()``.\nSpecifically, the special provider name ``\"base\"`` can always be used to\nrequest the hardware accelerated (preferred, if available at runtime)\nor pure software implementation (last fallback).\n\nPublic Key Algorithms\n",
                    "rendered": {
                      "text": "Regardless of the default provider, a specific provider can always be requested\nby passing the provider name as the second argument to ``T::create()``/``T::create_or_throw()``.\nSpecifically, the special provider name ``\"base\"`` can always be used to\nrequest the hardware accelerated (preferred, if available at runtime)\nor pure software implementation (last fallback).\n\nPublic Key Algorithms\n",
                      "markdown": "`Regardless of the default provider, a specific provider can always be requested\nby passing the provider name as the second argument to ``T::create()``/``T::create_or_throw()``.\nSpecifically, the special provider name ``\"base\"`` can always be used to\nrequest the hardware accelerated (preferred, if available at runtime)\nor pure software implementation (last fallback).\n\nPublic Key Algorithms\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/providers.rst"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 15,
                  "endLine": 94,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n2. If Botan was not built with an integrated provider as in (1), but\n   with hardware acceleration support, e.g., AES-NI, and the hardware acceleration\n   is available at runtime, the default provider is the hardware accelerated provider.\n\n3. If Botan was not built with an integrated provider as in (1) and not built\n   with hardware acceleration support, the default provider is the pure software\n",
                    "rendered": {
                      "text": "\n2. If Botan was not built with an integrated provider as in (1), but\n   with hardware acceleration support, e.g., AES-NI, and the hardware acceleration\n   is available at runtime, the default provider is the hardware accelerated provider.\n\n3. If Botan was not built with an integrated provider as in (1) and not built\n   with hardware acceleration support, the default provider is the pure software\n",
                      "markdown": "`\n2. If Botan was not built with an integrated provider as in (1), but\n   with hardware acceleration support, e.g., AES-NI, and the hardware acceleration\n   is available at runtime, the default provider is the hardware accelerated provider.\n\n3. If Botan was not built with an integrated provider as in (1) and not built\n   with hardware acceleration support, the default provider is the pure software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/providers.rst"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 58,
                  "endLine": 81,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\nOmitting the provider string or leaving it empty means the default provider\nis used. The default provider is the first provider which supports the\nrequested algorithm. Depending on how Botan was configured at build time,\nthe default provider may be a pure software implementation, a hardware\naccelerated implementation or an implementation using an integrated provider,\ne.g., CommonCrypto.\n",
                    "rendered": {
                      "text": "\nOmitting the provider string or leaving it empty means the default provider\nis used. The default provider is the first provider which supports the\nrequested algorithm. Depending on how Botan was configured at build time,\nthe default provider may be a pure software implementation, a hardware\naccelerated implementation or an implementation using an integrated provider,\ne.g., CommonCrypto.\n",
                      "markdown": "`\nOmitting the provider string or leaving it empty means the default provider\nis used. The default provider is the first provider which supports the\nrequested algorithm. Depending on how Botan was configured at build time,\nthe default provider may be a pure software implementation, a hardware\naccelerated implementation or an implementation using an integrated provider,\ne.g., CommonCrypto.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/kdf.rst"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 50,
                  "endLine": 125,
                  "endColumn": 54,
                  "snippet": {
                    "text": "KDF1\n~~~~~~\n\nKDF1 from IEEE 1363. It can only produce an output at most the length\nof the hash function used.\n\nAvailable if ``BOTAN_HAS_KDF1`` is defined.\n",
                    "rendered": {
                      "text": "KDF1\n~~~~~~\n\nKDF1 from IEEE 1363. It can only produce an output at most the length\nof the hash function used.\n\nAvailable if ``BOTAN_HAS_KDF1`` is defined.\n",
                      "markdown": "`KDF1\n~~~~~~\n\nKDF1 from IEEE 1363. It can only produce an output at most the length\nof the hash function used.\n\nAvailable if ``BOTAN_HAS_KDF1`` is defined.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 15,
                  "endLine": 129,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                                           const std::string& context, \\\n                                           const std::string& identifier)\n\n   Returns the password for *identifier* (used by client)\n\n.. cpp:function:: bool srp_verifier(const std::string& type, \\\n                                    const std::string& context, \\\n",
                    "rendered": {
                      "text": "                                           const std::string& context, \\\n                                           const std::string& identifier)\n\n   Returns the password for *identifier* (used by client)\n\n.. cpp:function:: bool srp_verifier(const std::string& type, \\\n                                    const std::string& context, \\\n",
                      "markdown": "`                                           const std::string& context, \\\n                                           const std::string& identifier)\n\n   Returns the password for *identifier* (used by client)\n\n.. cpp:function:: bool srp_verifier(const std::string& type, \\\n                                    const std::string& context, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 34,
                  "endLine": 125,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n   Returns the SRP identifier we'd like to use (used by client)\n\n.. cpp:function:: std::string srp_password(const std::string& type, \\\n                                           const std::string& context, \\\n                                           const std::string& identifier)\n\n",
                    "rendered": {
                      "text": "\n   Returns the SRP identifier we'd like to use (used by client)\n\n.. cpp:function:: std::string srp_password(const std::string& type, \\\n                                           const std::string& context, \\\n                                           const std::string& identifier)\n\n",
                      "markdown": "`\n   Returns the SRP identifier we'd like to use (used by client)\n\n.. cpp:function:: std::string srp_password(const std::string& type, \\\n                                           const std::string& context, \\\n                                           const std::string& identifier)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 50,
                  "endLine": 84,
                  "endColumn": 61,
                  "snippet": {
                    "text": "         the connection with an alert. This can be done by throwing an exception\n         from the implementation of this function.\n\n   .. cpp:function:: std::shared_ptr<Private_Key> private_key_for(const X509_Certificate& cert, \\\n                                                  const std::string& type, \\\n                                                  const std::string& context)\n\n",
                    "rendered": {
                      "text": "         the connection with an alert. This can be done by throwing an exception\n         from the implementation of this function.\n\n   .. cpp:function:: std::shared_ptr<Private_Key> private_key_for(const X509_Certificate& cert, \\\n                                                  const std::string& type, \\\n                                                  const std::string& context)\n\n",
                      "markdown": "`         the connection with an alert. This can be done by throwing an exception\n         from the implementation of this function.\n\n   .. cpp:function:: std::shared_ptr<Private_Key> private_key_for(const X509_Certificate& cert, \\\n                                                  const std::string& type, \\\n                                                  const std::string& context)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 37,
                  "endLine": 84,
                  "endColumn": 48,
                  "snippet": {
                    "text": "         the connection with an alert. This can be done by throwing an exception\n         from the implementation of this function.\n\n   .. cpp:function:: std::shared_ptr<Private_Key> private_key_for(const X509_Certificate& cert, \\\n                                                  const std::string& type, \\\n                                                  const std::string& context)\n\n",
                    "rendered": {
                      "text": "         the connection with an alert. This can be done by throwing an exception\n         from the implementation of this function.\n\n   .. cpp:function:: std::shared_ptr<Private_Key> private_key_for(const X509_Certificate& cert, \\\n                                                  const std::string& type, \\\n                                                  const std::string& context)\n\n",
                      "markdown": "`         the connection with an alert. This can be done by throwing an exception\n         from the implementation of this function.\n\n   .. cpp:function:: std::shared_ptr<Private_Key> private_key_for(const X509_Certificate& cert, \\\n                                                  const std::string& type, \\\n                                                  const std::string& context)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 28,
                  "endLine": 96,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n   .. cpp::function:: void verify_certificate_chain( \\\n         const std::string& type, \\\n         const std::string& hostname, \\\n         const std::vector<X509_Certificate>& cert_chain)\n\nThis function has been replaced by `TLS::Callbacks::tls_verify_cert_chain`.\n",
                    "rendered": {
                      "text": "\n   .. cpp::function:: void verify_certificate_chain( \\\n         const std::string& type, \\\n         const std::string& hostname, \\\n         const std::vector<X509_Certificate>& cert_chain)\n\nThis function has been replaced by `TLS::Callbacks::tls_verify_cert_chain`.\n",
                      "markdown": "`\n   .. cpp::function:: void verify_certificate_chain( \\\n         const std::string& type, \\\n         const std::string& hostname, \\\n         const std::vector<X509_Certificate>& cert_chain)\n\nThis function has been replaced by `TLS::Callbacks::tls_verify_cert_chain`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 6,
                  "endLine": 32,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      one particular server which uses a cert issued by an internal CA.\n\n      When *type* is \"tls-server\", the *context* will again be the\n      hostname of the server, or empty if the client did not send a\n      server name indicator. For TLS servers, these CAs are the ones\n      trusted for signing of client certificates. If you do not want\n      the TLS server to ask for a client cert,\n",
                    "rendered": {
                      "text": "      one particular server which uses a cert issued by an internal CA.\n\n      When *type* is \"tls-server\", the *context* will again be the\n      hostname of the server, or empty if the client did not send a\n      server name indicator. For TLS servers, these CAs are the ones\n      trusted for signing of client certificates. If you do not want\n      the TLS server to ask for a client cert,\n",
                      "markdown": "`      one particular server which uses a cert issued by an internal CA.\n\n      When *type* is \"tls-server\", the *context* will again be the\n      hostname of the server, or empty if the client did not send a\n      server name indicator. For TLS servers, these CAs are the ones\n      trusted for signing of client certificates. If you do not want\n      the TLS server to ask for a client cert,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 34,
                  "endLine": 26,
                  "endColumn": 42,
                  "snippet": {
                    "text": "         ``shared_ptr`` here.  This may change in a future major release.\n\n      When *type* is \"tls-client\", *context* will be the hostname of\n      the server, or empty if the hostname is not known. This allows\n      using a different set of certificate stores in different contexts,\n      for example using the system certificate store unless contacting\n      one particular server which uses a cert issued by an internal CA.\n",
                    "rendered": {
                      "text": "         ``shared_ptr`` here.  This may change in a future major release.\n\n      When *type* is \"tls-client\", *context* will be the hostname of\n      the server, or empty if the hostname is not known. This allows\n      using a different set of certificate stores in different contexts,\n      for example using the system certificate store unless contacting\n      one particular server which uses a cert issued by an internal CA.\n",
                      "markdown": "`         ``shared_ptr`` here.  This may change in a future major release.\n\n      When *type* is \"tls-client\", *context* will be the hostname of\n      the server, or empty if the hostname is not known. This allows\n      using a different set of certificate stores in different contexts,\n      for example using the system certificate store unless contacting\n      one particular server which uses a cert issued by an internal CA.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 57,
                  "endLine": 25,
                  "endColumn": 65,
                  "snippet": {
                    "text": "         It would have been a better API to return a vector of\n         ``shared_ptr`` here.  This may change in a future major release.\n\n      When *type* is \"tls-client\", *context* will be the hostname of\n      the server, or empty if the hostname is not known. This allows\n      using a different set of certificate stores in different contexts,\n      for example using the system certificate store unless contacting\n",
                    "rendered": {
                      "text": "         It would have been a better API to return a vector of\n         ``shared_ptr`` here.  This may change in a future major release.\n\n      When *type* is \"tls-client\", *context* will be the hostname of\n      the server, or empty if the hostname is not known. This allows\n      using a different set of certificate stores in different contexts,\n      for example using the system certificate store unless contacting\n",
                      "markdown": "`         It would have been a better API to return a vector of\n         ``shared_ptr`` here.  This may change in a future major release.\n\n      When *type* is \"tls-client\", *context* will be the hostname of\n      the server, or empty if the hostname is not known. This allows\n      using a different set of certificate stores in different contexts,\n      for example using the system certificate store unless contacting\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 58,
                  "endLine": 171,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    this case *type* will be \"tls-server\" and *context* is\n    \"dtls-cookie-secret\". If no key is returned, then DTLS cookies are\n    not used. Similar to the session ticket key, the DTLS cookie\n    secret can be chosen during server startup and rotated at any time\n    with no ill effect.\n\n    .. warning::\n",
                    "rendered": {
                      "text": "    this case *type* will be \"tls-server\" and *context* is\n    \"dtls-cookie-secret\". If no key is returned, then DTLS cookies are\n    not used. Similar to the session ticket key, the DTLS cookie\n    secret can be chosen during server startup and rotated at any time\n    with no ill effect.\n\n    .. warning::\n",
                      "markdown": "`    this case *type* will be \"tls-server\" and *context* is\n    \"dtls-cookie-secret\". If no key is returned, then DTLS cookies are\n    not used. Similar to the session ticket key, the DTLS cookie\n    secret can be chosen during server startup and rotated at any time\n    with no ill effect.\n\n    .. warning::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 29,
                  "endLine": 157,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    empty string. If a key is returned for this case, a TLS server\n    will offer session tickets to clients who can use them, and the\n    returned key will be used to encrypt the ticket. The server is\n    allowed to change the key at any time (though changing the key\n    means old session tickets can no longer be used for resumption,\n    forcing a full re-handshake when the client next connects). One\n    simple approach to add support for session tickets in your server\n",
                    "rendered": {
                      "text": "    empty string. If a key is returned for this case, a TLS server\n    will offer session tickets to clients who can use them, and the\n    returned key will be used to encrypt the ticket. The server is\n    allowed to change the key at any time (though changing the key\n    means old session tickets can no longer be used for resumption,\n    forcing a full re-handshake when the client next connects). One\n    simple approach to add support for session tickets in your server\n",
                      "markdown": "`    empty string. If a key is returned for this case, a TLS server\n    will offer session tickets to clients who can use them, and the\n    returned key will be used to encrypt the ticket. The server is\n    allowed to change the key at any time (though changing the key\n    means old session tickets can no longer be used for resumption,\n    forcing a full re-handshake when the client next connects). One\n    simple approach to add support for session tickets in your server\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 65,
                  "endLine": 172,
                  "snippet": {
                    "text": "    this case *type* will be \"tls-server\" and *context* is\n    \"dtls-cookie-secret\". If no key is returned, then DTLS cookies are\n    not used. Similar to the session ticket key, the DTLS cookie\n    secret can be chosen during server startup and rotated at any time\n    with no ill effect.\n\n    .. warning::\n\n",
                    "rendered": {
                      "text": "    this case *type* will be \"tls-server\" and *context* is\n    \"dtls-cookie-secret\". If no key is returned, then DTLS cookies are\n    not used. Similar to the session ticket key, the DTLS cookie\n    secret can be chosen during server startup and rotated at any time\n    with no ill effect.\n\n    .. warning::\n\n",
                      "markdown": "`    this case *type* will be \"tls-server\" and *context* is\n    \"dtls-cookie-secret\". If no key is returned, then DTLS cookies are\n    not used. Similar to the session ticket key, the DTLS cookie\n    secret can be chosen during server startup and rotated at any time\n    with no ill effect.\n\n    .. warning::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 41,
                  "endLine": 161,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    means old session tickets can no longer be used for resumption,\n    forcing a full re-handshake when the client next connects). One\n    simple approach to add support for session tickets in your server\n    is to generate a random key the first time ``psk`` is called to\n    retrieve the session ticket key, cache it for later use in the\n    ``Credentials_Manager``, and simply let it be thrown away when the\n    process terminates. See :rfc:`4507` for more information about TLS\n",
                    "rendered": {
                      "text": "    means old session tickets can no longer be used for resumption,\n    forcing a full re-handshake when the client next connects). One\n    simple approach to add support for session tickets in your server\n    is to generate a random key the first time ``psk`` is called to\n    retrieve the session ticket key, cache it for later use in the\n    ``Credentials_Manager``, and simply let it be thrown away when the\n    process terminates. See :rfc:`4507` for more information about TLS\n",
                      "markdown": "`    means old session tickets can no longer be used for resumption,\n    forcing a full re-handshake when the client next connects). One\n    simple approach to add support for session tickets in your server\n    is to generate a random key the first time ``psk`` is called to\n    retrieve the session ticket key, cache it for later use in the\n    ``Credentials_Manager``, and simply let it be thrown away when the\n    process terminates. See :rfc:`4507` for more information about TLS\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/credentials_manager.rst"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 36,
                  "endLine": 157,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    empty string. If a key is returned for this case, a TLS server\n    will offer session tickets to clients who can use them, and the\n    returned key will be used to encrypt the ticket. The server is\n    allowed to change the key at any time (though changing the key\n    means old session tickets can no longer be used for resumption,\n    forcing a full re-handshake when the client next connects). One\n    simple approach to add support for session tickets in your server\n",
                    "rendered": {
                      "text": "    empty string. If a key is returned for this case, a TLS server\n    will offer session tickets to clients who can use them, and the\n    returned key will be used to encrypt the ticket. The server is\n    allowed to change the key at any time (though changing the key\n    means old session tickets can no longer be used for resumption,\n    forcing a full re-handshake when the client next connects). One\n    simple approach to add support for session tickets in your server\n",
                      "markdown": "`    empty string. If a key is returned for this case, a TLS server\n    will offer session tickets to clients who can use them, and the\n    returned key will be used to encrypt the ticket. The server is\n    allowed to change the key at any time (though changing the key\n    means old session tickets can no longer be used for resumption,\n    forcing a full re-handshake when the client next connects). One\n    simple approach to add support for session tickets in your server\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/todo.rst"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 2,
                  "endLine": 142,
                  "endColumn": 10,
                  "snippet": {
                    "text": "* `encrypt` / `decrypt` tools providing password based file encryption\n* Add ECM factoring\n* Clone of `minisign` signature utility\n* Password store utility\n* TOTP calculator\n* Clone of magic wormhole\n* ACVP client (https://github.com/usnistgov/ACVP)\n",
                    "rendered": {
                      "text": "* `encrypt` / `decrypt` tools providing password based file encryption\n* Add ECM factoring\n* Clone of `minisign` signature utility\n* Password store utility\n* TOTP calculator\n* Clone of magic wormhole\n* ACVP client (https://github.com/usnistgov/ACVP)\n",
                      "markdown": "`* `encrypt` / `decrypt` tools providing password based file encryption\n* Add ECM factoring\n* Clone of `minisign` signature utility\n* Password store utility\n* TOTP calculator\n* Clone of magic wormhole\n* ACVP client (https://github.com/usnistgov/ACVP)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/todo.rst"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 40,
                  "endLine": 139,
                  "endColumn": 48,
                  "snippet": {
                    "text": "* Refactor ``speed``\n* Change `tls_server` to be a tty<->socket app, like `tls_client` is,\n  instead of a bogus echo server.\n* `encrypt` / `decrypt` tools providing password based file encryption\n* Add ECM factoring\n* Clone of `minisign` signature utility\n* Password store utility\n",
                    "rendered": {
                      "text": "* Refactor ``speed``\n* Change `tls_server` to be a tty<->socket app, like `tls_client` is,\n  instead of a bogus echo server.\n* `encrypt` / `decrypt` tools providing password based file encryption\n* Add ECM factoring\n* Clone of `minisign` signature utility\n* Password store utility\n",
                      "markdown": "`* Refactor ``speed``\n* Change `tls_server` to be a tty<->socket app, like `tls_client` is,\n  instead of a bogus echo server.\n* `encrypt` / `decrypt` tools providing password based file encryption\n* Add ECM factoring\n* Clone of `minisign` signature utility\n* Password store utility\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/todo.rst"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "endLine": 47,
                  "endColumn": 17,
                  "snippet": {
                    "text": "* Identity based encryption\n* Paillier homomorphic cryptosystem\n* New PAKEs (pending CFRG bakeoff results)\n* SPHINX password store (https://eprint.iacr.org/2018/695)\n\nUtility Functions\n------------------\n",
                    "rendered": {
                      "text": "* Identity based encryption\n* Paillier homomorphic cryptosystem\n* New PAKEs (pending CFRG bakeoff results)\n* SPHINX password store (https://eprint.iacr.org/2018/695)\n\nUtility Functions\n------------------\n",
                      "markdown": "`* Identity based encryption\n* Paillier homomorphic cryptosystem\n* New PAKEs (pending CFRG bakeoff results)\n* SPHINX password store (https://eprint.iacr.org/2018/695)\n\nUtility Functions\n------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/todo.rst"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 31,
                  "endLine": 73,
                  "endColumn": 35,
                  "snippet": {
                    "text": "* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n* TLS supplemental authorization data (RFC 4680, RFC 5878)\n* DTLS-SCTP (RFC 6083)\n",
                    "rendered": {
                      "text": "* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n* TLS supplemental authorization data (RFC 4680, RFC 5878)\n* DTLS-SCTP (RFC 6083)\n",
                      "markdown": "`* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n* TLS supplemental authorization data (RFC 4680, RFC 5878)\n* DTLS-SCTP (RFC 6083)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/todo.rst"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 19,
                  "endLine": 72,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n* TLS supplemental authorization data (RFC 4680, RFC 5878)\n",
                    "rendered": {
                      "text": "\n* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n* TLS supplemental authorization data (RFC 4680, RFC 5878)\n",
                      "markdown": "`\n* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n* TLS supplemental authorization data (RFC 4680, RFC 5878)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/todo.rst"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 28,
                  "endLine": 70,
                  "endColumn": 32,
                  "snippet": {
                    "text": "TLS\n----------------------------------------\n\n* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n",
                    "rendered": {
                      "text": "TLS\n----------------------------------------\n\n* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n",
                      "markdown": "`TLS\n----------------------------------------\n\n* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/todo.rst"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 50,
                  "endLine": 8,
                  "endColumn": 58,
                  "snippet": {
                    "text": "out on something, send an email to the dev list or open a discussion\nticket on GitHub to make sure you're on the right track.\n\nRequest a new feature by opening a pull request to update this file.\n\nNew Ciphers/Hashes/MACs\n----------------------------------------\n",
                    "rendered": {
                      "text": "out on something, send an email to the dev list or open a discussion\nticket on GitHub to make sure you're on the right track.\n\nRequest a new feature by opening a pull request to update this file.\n\nNew Ciphers/Hashes/MACs\n----------------------------------------\n",
                      "markdown": "`out on something, send an email to the dev list or open a discussion\nticket on GitHub to make sure you're on the right track.\n\nRequest a new feature by opening a pull request to update this file.\n\nNew Ciphers/Hashes/MACs\n----------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/todo.rst"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 40,
                  "endLine": 74,
                  "snippet": {
                    "text": "* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n* TLS supplemental authorization data (RFC 4680, RFC 5878)\n* DTLS-SCTP (RFC 6083)\n\n",
                    "rendered": {
                      "text": "* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n* TLS supplemental authorization data (RFC 4680, RFC 5878)\n* DTLS-SCTP (RFC 6083)\n\n",
                      "markdown": "`* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n* TLS supplemental authorization data (RFC 4680, RFC 5878)\n* DTLS-SCTP (RFC 6083)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/todo.rst"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 28,
                  "endLine": 73,
                  "snippet": {
                    "text": "\n* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n* TLS supplemental authorization data (RFC 4680, RFC 5878)\n* DTLS-SCTP (RFC 6083)\n",
                    "rendered": {
                      "text": "\n* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n* TLS supplemental authorization data (RFC 4680, RFC 5878)\n* DTLS-SCTP (RFC 6083)\n",
                      "markdown": "`\n* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n* TLS supplemental authorization data (RFC 4680, RFC 5878)\n* DTLS-SCTP (RFC 6083)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/todo.rst"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 37,
                  "endLine": 71,
                  "snippet": {
                    "text": "TLS\n----------------------------------------\n\n* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n",
                    "rendered": {
                      "text": "TLS\n----------------------------------------\n\n* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n",
                      "markdown": "`TLS\n----------------------------------------\n\n* Make DTLS support optional at build time\n* Improve/optimize DTLS defragmentation and retransmission\n* Make RSA optional at build time\n* Make finite field DH optional at build time\n* Certificate Transparency extensions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/todo.rst"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 10,
                  "endLine": 34,
                  "endColumn": 16,
                  "snippet": {
                    "text": "* SM4 using AES-NI (https://github.com/mjosaarinen/sm4ni) or vector permute\n* Poly1305 using AVX2\n* SHA-512 using BMI2+AVX2\n* Constant time bitsliced DES\n* SIMD evaluation of SHA-2 and SHA-3 compression functions\n* Improved Salsa implementations (SIMD_4x32 and/or AVX2)\n* Add CLMUL/PMULL implementations for CRC24/CRC32\n",
                    "rendered": {
                      "text": "* SM4 using AES-NI (https://github.com/mjosaarinen/sm4ni) or vector permute\n* Poly1305 using AVX2\n* SHA-512 using BMI2+AVX2\n* Constant time bitsliced DES\n* SIMD evaluation of SHA-2 and SHA-3 compression functions\n* Improved Salsa implementations (SIMD_4x32 and/or AVX2)\n* Add CLMUL/PMULL implementations for CRC24/CRC32\n",
                      "markdown": "`* SM4 using AES-NI (https://github.com/mjosaarinen/sm4ni) or vector permute\n* Poly1305 using AVX2\n* SHA-512 using BMI2+AVX2\n* Constant time bitsliced DES\n* SIMD evaluation of SHA-2 and SHA-3 compression functions\n* Improved Salsa implementations (SIMD_4x32 and/or AVX2)\n* Add CLMUL/PMULL implementations for CRC24/CRC32\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/test_framework.rst"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 40,
                  "endLine": 306,
                  "endColumn": 44,
                  "snippet": {
                    "text": "option.\n\n.. note::\n   Currently the RNG is seeded just once at the start of execution. So you\n   must run the exact same sequence of tests as the original test run in\n   order to get reproducible results.\n\n",
                    "rendered": {
                      "text": "option.\n\n.. note::\n   Currently the RNG is seeded just once at the start of execution. So you\n   must run the exact same sequence of tests as the original test run in\n   order to get reproducible results.\n\n",
                      "markdown": "`option.\n\n.. note::\n   Currently the RNG is seeded just once at the start of execution. So you\n   must run the exact same sequence of tests as the original test run in\n   order to get reproducible results.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/test_framework.rst"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 2,
                  "endLine": 298,
                  "endColumn": 6,
                  "snippet": {
                    "text": "threaded execution is used, but you can use ``--test-threads`` option to\nspecify the number of threads to use. If you use ``--test-threads=0`` then\nthe runner will probe the number of active CPUs and use that (but limited\nto at most 16). If you want to run across many cores on a large machine,\nexplicitly specify a thread count. The speedup is close to linear.\n\nThe RNG used in the tests is deterministic, and the seed is logged for each\n",
                    "rendered": {
                      "text": "threaded execution is used, but you can use ``--test-threads`` option to\nspecify the number of threads to use. If you use ``--test-threads=0`` then\nthe runner will probe the number of active CPUs and use that (but limited\nto at most 16). If you want to run across many cores on a large machine,\nexplicitly specify a thread count. The speedup is close to linear.\n\nThe RNG used in the tests is deterministic, and the seed is logged for each\n",
                      "markdown": "`threaded execution is used, but you can use ``--test-threads`` option to\nspecify the number of threads to use. If you use ``--test-threads=0`` then\nthe runner will probe the number of active CPUs and use that (but limited\nto at most 16). If you want to run across many cores on a large machine,\nexplicitly specify a thread count. The speedup is close to linear.\n\nThe RNG used in the tests is deterministic, and the seed is logged for each\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 2,
                  "endLine": 164,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n``pk_decrypt rsa_privkey datafile``\n  Decrypts a file encrypted with ``pk_encrypt``. If the key is encrypted using a\n  password, it will be prompted for on the terminal.\n\n``fingerprint --no-fsname --algo=SHA-256 *keys``\n  Calculate the public key fingerprint of the *keys*.\n",
                    "rendered": {
                      "text": "\n``pk_decrypt rsa_privkey datafile``\n  Decrypts a file encrypted with ``pk_encrypt``. If the key is encrypted using a\n  password, it will be prompted for on the terminal.\n\n``fingerprint --no-fsname --algo=SHA-256 *keys``\n  Calculate the public key fingerprint of the *keys*.\n",
                      "markdown": "`\n``pk_decrypt rsa_privkey datafile``\n  Decrypts a file encrypted with ``pk_encrypt``. If the key is encrypted using a\n  password, it will be prompted for on the terminal.\n\n``fingerprint --no-fsname --algo=SHA-256 *keys``\n  Calculate the public key fingerprint of the *keys*.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 72,
                  "endLine": 95,
                  "endColumn": 80,
                  "snippet": {
                    "text": "  modes are supported. However most other implementations support only AES or\n  3DES in CBC mode.\n\n  If encryption is used, the parameter *pbkdf-ms* controls how long the password\n  hashing function will run to derive the encryption key from the passed\n  *passphrase*.\n\n",
                    "rendered": {
                      "text": "  modes are supported. However most other implementations support only AES or\n  3DES in CBC mode.\n\n  If encryption is used, the parameter *pbkdf-ms* controls how long the password\n  hashing function will run to derive the encryption key from the passed\n  *passphrase*.\n\n",
                      "markdown": "`  modes are supported. However most other implementations support only AES or\n  3DES in CBC mode.\n\n  If encryption is used, the parameter *pbkdf-ms* controls how long the password\n  hashing function will run to derive the encryption key from the passed\n  *passphrase*.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 37,
                  "endLine": 87,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n  If a passphrase is used, *cipher* specifies the name of the desired encryption\n  algorithm (such as \"AES-256/CBC\", or leave empty to use a default), and\n  *pbkdf* can be used to specify the password hashing mechanism (either a hash\n  such as \"SHA-256\" to select PBKDF2, or \"Scrypt\").\n\n  The cipher mode must have an object identifier defined, this allows use of\n",
                    "rendered": {
                      "text": "\n  If a passphrase is used, *cipher* specifies the name of the desired encryption\n  algorithm (such as \"AES-256/CBC\", or leave empty to use a default), and\n  *pbkdf* can be used to specify the password hashing mechanism (either a hash\n  such as \"SHA-256\" to select PBKDF2, or \"Scrypt\").\n\n  The cipher mode must have an object identifier defined, this allows use of\n",
                      "markdown": "`\n  If a passphrase is used, *cipher* specifies the name of the desired encryption\n  algorithm (such as \"AES-256/CBC\", or leave empty to use a default), and\n  *pbkdf* can be used to specify the password hashing mechanism (either a hash\n  such as \"SHA-256\" to select PBKDF2, or \"Scrypt\").\n\n  The cipher mode must have an object identifier defined, this allows use of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 43,
                  "endLine": 58,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  more expensive hash calculation.\n\n``check_bcrypt password hash``\n  Checks if the bcrypt hash of the passed *password* equals the passed *hash* value.\n\n``pbkdf_tune --algo=Scrypt --max-mem=256 --output-len=32 --check *times``\n  Tunes the PBKDF algorithm specified with ``--algo=`` for the given *times*.\n",
                    "rendered": {
                      "text": "  more expensive hash calculation.\n\n``check_bcrypt password hash``\n  Checks if the bcrypt hash of the passed *password* equals the passed *hash* value.\n\n``pbkdf_tune --algo=Scrypt --max-mem=256 --output-len=32 --check *times``\n  Tunes the PBKDF algorithm specified with ``--algo=`` for the given *times*.\n",
                      "markdown": "`  more expensive hash calculation.\n\n``check_bcrypt password hash``\n  Checks if the bcrypt hash of the passed *password* equals the passed *hash* value.\n\n``pbkdf_tune --algo=Scrypt --max-mem=256 --output-len=32 --check *times``\n  Tunes the PBKDF algorithm specified with ``--algo=`` for the given *times*.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 15,
                  "endLine": 57,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  integer between 4 and 18.  A higher *work-factor* value results in a\n  more expensive hash calculation.\n\n``check_bcrypt password hash``\n  Checks if the bcrypt hash of the passed *password* equals the passed *hash* value.\n\n``pbkdf_tune --algo=Scrypt --max-mem=256 --output-len=32 --check *times``\n",
                    "rendered": {
                      "text": "  integer between 4 and 18.  A higher *work-factor* value results in a\n  more expensive hash calculation.\n\n``check_bcrypt password hash``\n  Checks if the bcrypt hash of the passed *password* equals the passed *hash* value.\n\n``pbkdf_tune --algo=Scrypt --max-mem=256 --output-len=32 --check *times``\n",
                      "markdown": "`  integer between 4 and 18.  A higher *work-factor* value results in a\n  more expensive hash calculation.\n\n``check_bcrypt password hash``\n  Checks if the bcrypt hash of the passed *password* equals the passed *hash* value.\n\n``pbkdf_tune --algo=Scrypt --max-mem=256 --output-len=32 --check *times``\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 43,
                  "endLine": 53,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n  Calculate the bcrypt password digest of *password*. *work-factor* is an\n  integer between 4 and 18.  A higher *work-factor* value results in a\n  more expensive hash calculation.\n\n",
                    "rendered": {
                      "text": "  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n  Calculate the bcrypt password digest of *password*. *work-factor* is an\n  integer between 4 and 18.  A higher *work-factor* value results in a\n  more expensive hash calculation.\n\n",
                      "markdown": "`  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n  Calculate the bcrypt password digest of *password*. *work-factor* is an\n  integer between 4 and 18.  A higher *work-factor* value results in a\n  more expensive hash calculation.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 23,
                  "endLine": 53,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n  Calculate the bcrypt password digest of *password*. *work-factor* is an\n  integer between 4 and 18.  A higher *work-factor* value results in a\n  more expensive hash calculation.\n\n",
                    "rendered": {
                      "text": "  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n  Calculate the bcrypt password digest of *password*. *work-factor* is an\n  integer between 4 and 18.  A higher *work-factor* value results in a\n  more expensive hash calculation.\n\n",
                      "markdown": "`  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n  Calculate the bcrypt password digest of *password*. *work-factor* is an\n  integer between 4 and 18.  A higher *work-factor* value results in a\n  more expensive hash calculation.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 30,
                  "endLine": 52,
                  "endColumn": 38,
                  "snippet": {
                    "text": "``check_argon2 password hash``\n  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n  Calculate the bcrypt password digest of *password*. *work-factor* is an\n  integer between 4 and 18.  A higher *work-factor* value results in a\n  more expensive hash calculation.\n",
                    "rendered": {
                      "text": "``check_argon2 password hash``\n  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n  Calculate the bcrypt password digest of *password*. *work-factor* is an\n  integer between 4 and 18.  A higher *work-factor* value results in a\n  more expensive hash calculation.\n",
                      "markdown": "```check_argon2 password hash``\n  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n  Calculate the bcrypt password digest of *password*. *work-factor* is an\n  integer between 4 and 18.  A higher *work-factor* value results in a\n  more expensive hash calculation.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 43,
                  "endLine": 50,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  iterations to use.\n\n``check_argon2 password hash``\n  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n  Calculate the bcrypt password digest of *password*. *work-factor* is an\n",
                    "rendered": {
                      "text": "  iterations to use.\n\n``check_argon2 password hash``\n  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n  Calculate the bcrypt password digest of *password*. *work-factor* is an\n",
                      "markdown": "`  iterations to use.\n\n``check_argon2 password hash``\n  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n  Calculate the bcrypt password digest of *password*. *work-factor* is an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 15,
                  "endLine": 49,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  memory to use in Kb, *p* the parallelization parameter and *t* the number of\n  iterations to use.\n\n``check_argon2 password hash``\n  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n",
                    "rendered": {
                      "text": "  memory to use in Kb, *p* the parallelization parameter and *t* the number of\n  iterations to use.\n\n``check_argon2 password hash``\n  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n",
                      "markdown": "`  memory to use in Kb, *p* the parallelization parameter and *t* the number of\n  iterations to use.\n\n``check_argon2 password hash``\n  Checks if the Argon2 hash of the passed *password* equals the passed *hash* value.\n\n``gen_bcrypt --work-factor=12 password``\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 43,
                  "endLine": 45,
                  "endColumn": 51,
                  "snippet": {
                    "text": "Password Hash\n----------------\n``gen_argon2 --mem=65536 --p=1 --t=1 password``\n  Calculate the Argon2 password digest of *password*. *mem* is the amount of\n  memory to use in Kb, *p* the parallelization parameter and *t* the number of\n  iterations to use.\n\n",
                    "rendered": {
                      "text": "Password Hash\n----------------\n``gen_argon2 --mem=65536 --p=1 --t=1 password``\n  Calculate the Argon2 password digest of *password*. *mem* is the amount of\n  memory to use in Kb, *p* the parallelization parameter and *t* the number of\n  iterations to use.\n\n",
                      "markdown": "`Password Hash\n----------------\n``gen_argon2 --mem=65536 --p=1 --t=1 password``\n  Calculate the Argon2 password digest of *password*. *mem* is the amount of\n  memory to use in Kb, *p* the parallelization parameter and *t* the number of\n  iterations to use.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 23,
                  "endLine": 45,
                  "endColumn": 31,
                  "snippet": {
                    "text": "Password Hash\n----------------\n``gen_argon2 --mem=65536 --p=1 --t=1 password``\n  Calculate the Argon2 password digest of *password*. *mem* is the amount of\n  memory to use in Kb, *p* the parallelization parameter and *t* the number of\n  iterations to use.\n\n",
                    "rendered": {
                      "text": "Password Hash\n----------------\n``gen_argon2 --mem=65536 --p=1 --t=1 password``\n  Calculate the Argon2 password digest of *password*. *mem* is the amount of\n  memory to use in Kb, *p* the parallelization parameter and *t* the number of\n  iterations to use.\n\n",
                      "markdown": "`Password Hash\n----------------\n``gen_argon2 --mem=65536 --p=1 --t=1 password``\n  Calculate the Argon2 password digest of *password*. *mem* is the amount of\n  memory to use in Kb, *p* the parallelization parameter and *t* the number of\n  iterations to use.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 37,
                  "endLine": 44,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\nPassword Hash\n----------------\n``gen_argon2 --mem=65536 --p=1 --t=1 password``\n  Calculate the Argon2 password digest of *password*. *mem* is the amount of\n  memory to use in Kb, *p* the parallelization parameter and *t* the number of\n  iterations to use.\n",
                    "rendered": {
                      "text": "\nPassword Hash\n----------------\n``gen_argon2 --mem=65536 --p=1 --t=1 password``\n  Calculate the Argon2 password digest of *password*. *mem* is the amount of\n  memory to use in Kb, *p* the parallelization parameter and *t* the number of\n  iterations to use.\n",
                      "markdown": "`\nPassword Hash\n----------------\n``gen_argon2 --mem=65536 --p=1 --t=1 password``\n  Calculate the Argon2 password digest of *password*. *mem* is the amount of\n  memory to use in Kb, *p* the parallelization parameter and *t* the number of\n  iterations to use.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  filename is printed alongside the hash, in the style of tools such\n  as ``sha256sum``.\n\nPassword Hash\n----------------\n``gen_argon2 --mem=65536 --p=1 --t=1 password``\n  Calculate the Argon2 password digest of *password*. *mem* is the amount of\n",
                    "rendered": {
                      "text": "  filename is printed alongside the hash, in the style of tools such\n  as ``sha256sum``.\n\nPassword Hash\n----------------\n``gen_argon2 --mem=65536 --p=1 --t=1 password``\n  Calculate the Argon2 password digest of *password*. *mem* is the amount of\n",
                      "markdown": "`  filename is printed alongside the hash, in the style of tools such\n  as ``sha256sum``.\n\nPassword Hash\n----------------\n``gen_argon2 --mem=65536 --p=1 --t=1 password``\n  Calculate the Argon2 password digest of *password*. *mem* is the amount of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 9,
                  "endLine": 339,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  Decode *file* to Base64.\n\n``base64_enc file``\n  Encode Base64 encoded *file*.\n\n``hex_dec file``\n  Decode *file* to Hex.\n",
                    "rendered": {
                      "text": "  Decode *file* to Base64.\n\n``base64_enc file``\n  Encode Base64 encoded *file*.\n\n``hex_dec file``\n  Decode *file* to Hex.\n",
                      "markdown": "`  Decode *file* to Base64.\n\n``base64_enc file``\n  Encode Base64 encoded *file*.\n\n``hex_dec file``\n  Decode *file* to Hex.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 19,
                  "endLine": 336,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  Decode Base58 encoded *file*. If ``--check`` is provided Base58Check is used.\n\n``base64_dec file``\n  Decode *file* to Base64.\n\n``base64_enc file``\n  Encode Base64 encoded *file*.\n",
                    "rendered": {
                      "text": "  Decode Base58 encoded *file*. If ``--check`` is provided Base58Check is used.\n\n``base64_dec file``\n  Decode *file* to Base64.\n\n``base64_enc file``\n  Encode Base64 encoded *file*.\n",
                      "markdown": "`  Decode Base58 encoded *file*. If ``--check`` is provided Base58Check is used.\n\n``base64_dec file``\n  Decode *file* to Base64.\n\n``base64_enc file``\n  Encode Base64 encoded *file*.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 51,
                  "endLine": 129,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  ASN.1 encoded blob. Some other tools (including ``openssl``) default to this\n  format. This option does not make sense for other algorithms such as RSA.\n\n  The signature is formatted for your screen using base64.\n\n``verify --der-format --hash=SHA-256 --padding= pubkey file signature``\n  Verify the authenticity of the data in *file* with the provided signature\n",
                    "rendered": {
                      "text": "  ASN.1 encoded blob. Some other tools (including ``openssl``) default to this\n  format. This option does not make sense for other algorithms such as RSA.\n\n  The signature is formatted for your screen using base64.\n\n``verify --der-format --hash=SHA-256 --padding= pubkey file signature``\n  Verify the authenticity of the data in *file* with the provided signature\n",
                      "markdown": "`  ASN.1 encoded blob. Some other tools (including ``openssl``) default to this\n  format. This option does not make sense for other algorithms such as RSA.\n\n  The signature is formatted for your screen using base64.\n\n``verify --der-format --hash=SHA-256 --padding= pubkey file signature``\n  Verify the authenticity of the data in *file* with the provided signature\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 56,
                  "endLine": 30,
                  "endColumn": 62,
                  "snippet": {
                    "text": "and in the help output. All options are, as the name suggests,\noptional, and the default values are shown. For example ``hash file``\nprints the SHA-256 of the file encoded as hex, while\n``hash --format=base64 --algo=SHA-384 file`` prints the base64 encoded\nSHA-384 hash of the same file.\n\nHash Function\n",
                    "rendered": {
                      "text": "and in the help output. All options are, as the name suggests,\noptional, and the default values are shown. For example ``hash file``\nprints the SHA-256 of the file encoded as hex, while\n``hash --format=base64 --algo=SHA-384 file`` prints the base64 encoded\nSHA-384 hash of the same file.\n\nHash Function\n",
                      "markdown": "`and in the help output. All options are, as the name suggests,\noptional, and the default values are shown. For example ``hash file``\nprints the SHA-256 of the file encoded as hex, while\n``hash --format=base64 --algo=SHA-384 file`` prints the base64 encoded\nSHA-384 hash of the same file.\n\nHash Function\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 16,
                  "endLine": 30,
                  "endColumn": 22,
                  "snippet": {
                    "text": "and in the help output. All options are, as the name suggests,\noptional, and the default values are shown. For example ``hash file``\nprints the SHA-256 of the file encoded as hex, while\n``hash --format=base64 --algo=SHA-384 file`` prints the base64 encoded\nSHA-384 hash of the same file.\n\nHash Function\n",
                    "rendered": {
                      "text": "and in the help output. All options are, as the name suggests,\noptional, and the default values are shown. For example ``hash file``\nprints the SHA-256 of the file encoded as hex, while\n``hash --format=base64 --algo=SHA-384 file`` prints the base64 encoded\nSHA-384 hash of the same file.\n\nHash Function\n",
                      "markdown": "`and in the help output. All options are, as the name suggests,\noptional, and the default values are shown. For example ``hash file``\nprints the SHA-256 of the file encoded as hex, while\n``hash --format=base64 --algo=SHA-384 file`` prints the base64 encoded\nSHA-384 hash of the same file.\n\nHash Function\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 52,
                  "endLine": 260,
                  "snippet": {
                    "text": "\n``tls_proxy listen_port target_host target_port server_cert server_key--policy=default --threads=0 --max-clients=0 --session-db= --session-db-pass=``\n  Only available if Boost.Asio support was enabled. Listens on a port and\n  forwards all connects to a target server specified at\n  ``target_host`` and ``target_port``.\n\n``tls_client_hello --hex input``\n  Parse and print a TLS client hello message.\n",
                    "rendered": {
                      "text": "\n``tls_proxy listen_port target_host target_port server_cert server_key--policy=default --threads=0 --max-clients=0 --session-db= --session-db-pass=``\n  Only available if Boost.Asio support was enabled. Listens on a port and\n  forwards all connects to a target server specified at\n  ``target_host`` and ``target_port``.\n\n``tls_client_hello --hex input``\n  Parse and print a TLS client hello message.\n",
                      "markdown": "`\n``tls_proxy listen_port target_host target_port server_cert server_key--policy=default --threads=0 --max-clients=0 --session-db= --session-db-pass=``\n  Only available if Boost.Asio support was enabled. Listens on a port and\n  forwards all connects to a target server specified at\n  ``target_host`` and ``target_port``.\n\n``tls_client_hello --hex input``\n  Parse and print a TLS client hello message.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 37,
                  "endLine": 120,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  hash *hash*. If *key* is encrypted, the used passphrase must be passed as\n  *pass-in*.\n\n  The *padding* option can be used to control padding for algorithms that have\n  divergent methods; this mostly applies to RSA. For RSA, if the option is not\n  specified PSS signatures are used. You can select generating a PKCS #1 v1.5\n  formatted signature instead by providing ``--padding=PKCS1v15``.\n",
                    "rendered": {
                      "text": "  hash *hash*. If *key* is encrypted, the used passphrase must be passed as\n  *pass-in*.\n\n  The *padding* option can be used to control padding for algorithms that have\n  divergent methods; this mostly applies to RSA. For RSA, if the option is not\n  specified PSS signatures are used. You can select generating a PKCS #1 v1.5\n  formatted signature instead by providing ``--padding=PKCS1v15``.\n",
                      "markdown": "`  hash *hash*. If *key* is encrypted, the used passphrase must be passed as\n  *pass-in*.\n\n  The *padding* option can be used to control padding for algorithms that have\n  divergent methods; this mostly applies to RSA. For RSA, if the option is not\n  specified PSS signatures are used. You can select generating a PKCS #1 v1.5\n  formatted signature instead by providing ``--padding=PKCS1v15``.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 30,
                  "endLine": 109,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n``pkcs8 --pass-in= --pub-out --der-out --pass-out= --cipher= --pbkdf= --pbkdf-ms=300 key``\n\n  Open a PKCS #8 formatted key at *key*. If *key* is encrypted, the passphrase\n  must be passed as *pass-in*. It is possible to (re)encrypt the read key with\n  the passphrase passed as *pass-out*. The parameters *cipher*, *pbkdf*, and\n  *pbkdf-ms* work similarly to ``keygen``.\n",
                    "rendered": {
                      "text": "\n``pkcs8 --pass-in= --pub-out --der-out --pass-out= --cipher= --pbkdf= --pbkdf-ms=300 key``\n\n  Open a PKCS #8 formatted key at *key*. If *key* is encrypted, the passphrase\n  must be passed as *pass-in*. It is possible to (re)encrypt the read key with\n  the passphrase passed as *pass-out*. The parameters *cipher*, *pbkdf*, and\n  *pbkdf-ms* work similarly to ``keygen``.\n",
                      "markdown": "`\n``pkcs8 --pass-in= --pub-out --der-out --pass-out= --cipher= --pbkdf= --pbkdf-ms=300 key``\n\n  Open a PKCS #8 formatted key at *key*. If *key* is encrypted, the passphrase\n  must be passed as *pass-in*. It is possible to (re)encrypt the read key with\n  the passphrase passed as *pass-out*. The parameters *cipher*, *pbkdf*, and\n  *pbkdf-ms* work similarly to ``keygen``.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 10,
                  "endLine": 432,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  Parse and validate a Roughtime chain file.\n\n``roughtime --raw-time --chain-file=roughtime-chain --max-chain-size=128 --check-local-clock=60 --host= --pubkey= --servers-file=``\n  Retrieve time from a Roughtime server and store it in a chain file.\n\n``uuid``\n  Generate and print a random UUID.\n",
                    "rendered": {
                      "text": "  Parse and validate a Roughtime chain file.\n\n``roughtime --raw-time --chain-file=roughtime-chain --max-chain-size=128 --check-local-clock=60 --host= --pubkey= --servers-file=``\n  Retrieve time from a Roughtime server and store it in a chain file.\n\n``uuid``\n  Generate and print a random UUID.\n",
                      "markdown": "`  Parse and validate a Roughtime chain file.\n\n``roughtime --raw-time --chain-file=roughtime-chain --max-chain-size=128 --check-local-clock=60 --host= --pubkey= --servers-file=``\n  Retrieve time from a Roughtime server and store it in a chain file.\n\n``uuid``\n  Generate and print a random UUID.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 8,
                  "endLine": 339,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  Decode *file* to Base64.\n\n``base64_enc file``\n  Encode Base64 encoded *file*.\n\n``hex_dec file``\n  Decode *file* to Hex.\n",
                    "rendered": {
                      "text": "  Decode *file* to Base64.\n\n``base64_enc file``\n  Encode Base64 encoded *file*.\n\n``hex_dec file``\n  Decode *file* to Hex.\n",
                      "markdown": "`  Decode *file* to Base64.\n\n``base64_enc file``\n  Encode Base64 encoded *file*.\n\n``hex_dec file``\n  Decode *file* to Hex.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 47,
                  "endLine": 283,
                  "endColumn": 56,
                  "snippet": {
                    "text": "PSK Database\n--------------------\n\nThe PSK database commands are only available if sqlite3 support was compiled in.\n\n``psk_set db db_key name psk``\n  Using the PSK database named db and encrypting under the (hex) key ``db_key``,\n",
                    "rendered": {
                      "text": "PSK Database\n--------------------\n\nThe PSK database commands are only available if sqlite3 support was compiled in.\n\n``psk_set db db_key name psk``\n  Using the PSK database named db and encrypting under the (hex) key ``db_key``,\n",
                      "markdown": "`PSK Database\n--------------------\n\nThe PSK database commands are only available if sqlite3 support was compiled in.\n\n``psk_set db db_key name psk``\n  Using the PSK database named db and encrypting under the (hex) key ``db_key``,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 22,
                  "endLine": 272,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n``factor n``\n  Factor the integer *n* using a combination of trial division by small primes, and Pollard's Rho algorithm.\n  It can in reasonable time factor integers up to 110 bits or so.\n\n``gen_prime --count=1 bits``\n  Samples *count* primes with a length of *bits* bits.\n",
                    "rendered": {
                      "text": "\n``factor n``\n  Factor the integer *n* using a combination of trial division by small primes, and Pollard's Rho algorithm.\n  It can in reasonable time factor integers up to 110 bits or so.\n\n``gen_prime --count=1 bits``\n  Samples *count* primes with a length of *bits* bits.\n",
                      "markdown": "`\n``factor n``\n  Factor the integer *n* using a combination of trial division by small primes, and Pollard's Rho algorithm.\n  It can in reasonable time factor integers up to 110 bits or so.\n\n``gen_prime --count=1 bits``\n  Samples *count* primes with a length of *bits* bits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 37,
                  "endLine": 129,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  ASN.1 encoded blob. Some other tools (including ``openssl``) default to this\n  format. This option does not make sense for other algorithms such as RSA.\n\n  The signature is formatted for your screen using base64.\n\n``verify --der-format --hash=SHA-256 --padding= pubkey file signature``\n  Verify the authenticity of the data in *file* with the provided signature\n",
                    "rendered": {
                      "text": "  ASN.1 encoded blob. Some other tools (including ``openssl``) default to this\n  format. This option does not make sense for other algorithms such as RSA.\n\n  The signature is formatted for your screen using base64.\n\n``verify --der-format --hash=SHA-256 --padding= pubkey file signature``\n  Verify the authenticity of the data in *file* with the provided signature\n",
                      "markdown": "`  ASN.1 encoded blob. Some other tools (including ``openssl``) default to this\n  format. This option does not make sense for other algorithms such as RSA.\n\n  The signature is formatted for your screen using base64.\n\n``verify --der-format --hash=SHA-256 --padding= pubkey file signature``\n  Verify the authenticity of the data in *file* with the provided signature\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/cli.rst"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 55,
                  "endLine": 30,
                  "endColumn": 63,
                  "snippet": {
                    "text": "and in the help output. All options are, as the name suggests,\noptional, and the default values are shown. For example ``hash file``\nprints the SHA-256 of the file encoded as hex, while\n``hash --format=base64 --algo=SHA-384 file`` prints the base64 encoded\nSHA-384 hash of the same file.\n\nHash Function\n",
                    "rendered": {
                      "text": "and in the help output. All options are, as the name suggests,\noptional, and the default values are shown. For example ``hash file``\nprints the SHA-256 of the file encoded as hex, while\n``hash --format=base64 --algo=SHA-384 file`` prints the base64 encoded\nSHA-384 hash of the same file.\n\nHash Function\n",
                      "markdown": "`and in the help output. All options are, as the name suggests,\noptional, and the default values are shown. For example ``hash file``\nprints the SHA-256 of the file encoded as hex, while\n``hash --format=base64 --algo=SHA-384 file`` prints the base64 encoded\nSHA-384 hash of the same file.\n\nHash Function\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 916,
                  "startColumn": 16,
                  "endLine": 916,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n - object_copy [20]_\n\n - rsa_generate_private_key [7]_\n - rsa_encrypt_decrypt [8]_\n - rsa_sign_verify [2]_\n\n",
                    "rendered": {
                      "text": "\n - object_copy [20]_\n\n - rsa_generate_private_key [7]_\n - rsa_encrypt_decrypt [8]_\n - rsa_sign_verify [2]_\n\n",
                      "markdown": "`\n - object_copy [20]_\n\n - rsa_generate_private_key [7]_\n - rsa_encrypt_decrypt [8]_\n - rsa_sign_verify [2]_\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 904,
                  "startColumn": 16,
                  "endLine": 904,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n - rsa_sign_verify [3]_\n - rsa_privkey_export [2]_\n - rsa_generate_private_key [9]_\n\n.. [54] Failing operations for Gemalto IDPrime MD 3840\n\n",
                    "rendered": {
                      "text": "\n - rsa_sign_verify [3]_\n - rsa_privkey_export [2]_\n - rsa_generate_private_key [9]_\n\n.. [54] Failing operations for Gemalto IDPrime MD 3840\n\n",
                      "markdown": "`\n - rsa_sign_verify [3]_\n - rsa_privkey_export [2]_\n - rsa_generate_private_key [9]_\n\n.. [54] Failing operations for Gemalto IDPrime MD 3840\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 895,
                  "startColumn": 18,
                  "endLine": 895,
                  "endColumn": 29,
                  "snippet": {
                    "text": " - ecdh_privkey_export [2]_\n - ecdh_generate_private_key [35]_\n - ecdsa_privkey_export [2]_\n - ecdsa_generate_private_key [36]_\n - c_copy_object [4]_\n\n - object_copy [4]_\n",
                    "rendered": {
                      "text": " - ecdh_privkey_export [2]_\n - ecdh_generate_private_key [35]_\n - ecdsa_privkey_export [2]_\n - ecdsa_generate_private_key [36]_\n - c_copy_object [4]_\n\n - object_copy [4]_\n",
                      "markdown": "` - ecdh_privkey_export [2]_\n - ecdh_generate_private_key [35]_\n - ecdsa_privkey_export [2]_\n - ecdsa_generate_private_key [36]_\n - c_copy_object [4]_\n\n - object_copy [4]_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 17,
                  "endLine": 893,
                  "endColumn": 28,
                  "snippet": {
                    "text": ".. [53] Failing operations for CardOS 5.3 (middelware 5.5.1)\n\n - ecdh_privkey_export [2]_\n - ecdh_generate_private_key [35]_\n - ecdsa_privkey_export [2]_\n - ecdsa_generate_private_key [36]_\n - c_copy_object [4]_\n",
                    "rendered": {
                      "text": ".. [53] Failing operations for CardOS 5.3 (middelware 5.5.1)\n\n - ecdh_privkey_export [2]_\n - ecdh_generate_private_key [35]_\n - ecdsa_privkey_export [2]_\n - ecdsa_generate_private_key [36]_\n - c_copy_object [4]_\n",
                      "markdown": "`.. [53] Failing operations for CardOS 5.3 (middelware 5.5.1)\n\n - ecdh_privkey_export [2]_\n - ecdh_generate_private_key [35]_\n - ecdsa_privkey_export [2]_\n - ecdsa_generate_private_key [36]_\n - c_copy_object [4]_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 18,
                  "endLine": 884,
                  "endColumn": 29,
                  "snippet": {
                    "text": " - ecdsa_privkey_export [2]_\n - ecdsa_pubkey_import [6]_\n - ecdsa_pubkey_export [6]_\n - ecdsa_generate_private_key  [31]_\n - ecdsa_generate_keypair  [31]_\n - ecdsa_sign_verify  [34]_\n\n",
                    "rendered": {
                      "text": " - ecdsa_privkey_export [2]_\n - ecdsa_pubkey_import [6]_\n - ecdsa_pubkey_export [6]_\n - ecdsa_generate_private_key  [31]_\n - ecdsa_generate_keypair  [31]_\n - ecdsa_sign_verify  [34]_\n\n",
                      "markdown": "` - ecdsa_privkey_export [2]_\n - ecdsa_pubkey_import [6]_\n - ecdsa_pubkey_export [6]_\n - ecdsa_generate_private_key  [31]_\n - ecdsa_generate_keypair  [31]_\n - ecdsa_sign_verify  [34]_\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 877,
                  "startColumn": 17,
                  "endLine": 877,
                  "endColumn": 28,
                  "snippet": {
                    "text": " - ecdh_privkey_export [2]_\n - ecdh_pubkey_import [6]_\n - ecdh_pubkey_export [6]_\n - ecdh_generate_private_key [30]_\n - ecdh_generate_keypair [31]_\n - ecdh_derive [30]_\n\n",
                    "rendered": {
                      "text": " - ecdh_privkey_export [2]_\n - ecdh_pubkey_import [6]_\n - ecdh_pubkey_export [6]_\n - ecdh_generate_private_key [30]_\n - ecdh_generate_keypair [31]_\n - ecdh_derive [30]_\n\n",
                      "markdown": "` - ecdh_privkey_export [2]_\n - ecdh_pubkey_import [6]_\n - ecdh_pubkey_export [6]_\n - ecdh_generate_private_key [30]_\n - ecdh_generate_keypair [31]_\n - ecdh_derive [30]_\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 871,
                  "startColumn": 16,
                  "endLine": 871,
                  "endColumn": 27,
                  "snippet": {
                    "text": " - object_copy [20]_\n\n - rsa_privkey_export [21]_\n - rsa_generate_private_key [22]_\n - rsa_sign_verify [23]_\n\n - ecdh_privkey_export [2]_\n",
                    "rendered": {
                      "text": " - object_copy [20]_\n\n - rsa_privkey_export [21]_\n - rsa_generate_private_key [22]_\n - rsa_sign_verify [23]_\n\n - ecdh_privkey_export [2]_\n",
                      "markdown": "` - object_copy [20]_\n\n - rsa_privkey_export [21]_\n - rsa_generate_private_key [22]_\n - rsa_sign_verify [23]_\n\n - ecdh_privkey_export [2]_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 860,
                  "startColumn": 18,
                  "endLine": 860,
                  "endColumn": 29,
                  "snippet": {
                    "text": " - ecdh_derive [33]_\n\n - ecdsa_privkey_export [2]_\n - ecdsa_generate_private_key  [30]_\n - ecdsa_generate_keypair  [30]_\n - ecdsa_sign_verify  [30]_\n\n",
                    "rendered": {
                      "text": " - ecdh_derive [33]_\n\n - ecdsa_privkey_export [2]_\n - ecdsa_generate_private_key  [30]_\n - ecdsa_generate_keypair  [30]_\n - ecdsa_sign_verify  [30]_\n\n",
                      "markdown": "` - ecdh_derive [33]_\n\n - ecdsa_privkey_export [2]_\n - ecdsa_generate_private_key  [30]_\n - ecdsa_generate_keypair  [30]_\n - ecdsa_sign_verify  [30]_\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 855,
                  "startColumn": 17,
                  "endLine": 855,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n - ecdh_privkey_export [2]_\n - ecdh_pubkey_import [4]_\n - ecdh_generate_private_key [32]_\n - ecdh_generate_keypair [3]_\n - ecdh_derive [33]_\n\n",
                    "rendered": {
                      "text": "\n - ecdh_privkey_export [2]_\n - ecdh_pubkey_import [4]_\n - ecdh_generate_private_key [32]_\n - ecdh_generate_keypair [3]_\n - ecdh_derive [33]_\n\n",
                      "markdown": "`\n - ecdh_privkey_export [2]_\n - ecdh_pubkey_import [4]_\n - ecdh_generate_private_key [32]_\n - ecdh_generate_keypair [3]_\n - ecdh_derive [33]_\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 850,
                  "startColumn": 16,
                  "endLine": 850,
                  "endColumn": 27,
                  "snippet": {
                    "text": " - object_copy [20]_\n\n - rsa_privkey_export [21]_\n - rsa_generate_private_key [22]_\n - rsa_sign_verify [23]_\n\n - ecdh_privkey_export [2]_\n",
                    "rendered": {
                      "text": " - object_copy [20]_\n\n - rsa_privkey_export [21]_\n - rsa_generate_private_key [22]_\n - rsa_sign_verify [23]_\n\n - ecdh_privkey_export [2]_\n",
                      "markdown": "` - object_copy [20]_\n\n - rsa_privkey_export [21]_\n - rsa_generate_private_key [22]_\n - rsa_sign_verify [23]_\n\n - ecdh_privkey_export [2]_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 838,
                  "startColumn": 18,
                  "endLine": 838,
                  "endColumn": 29,
                  "snippet": {
                    "text": " - ecdsa_privkey_export [2]_\n - ecdsa_pubkey_import [4]_\n - ecdsa_pubkey_export [4]_\n - ecdsa_generate_private_key  [3]_\n - ecdsa_generate_keypair  [3]_\n - ecdsa_sign_verify  [3]_\n\n",
                    "rendered": {
                      "text": " - ecdsa_privkey_export [2]_\n - ecdsa_pubkey_import [4]_\n - ecdsa_pubkey_export [4]_\n - ecdsa_generate_private_key  [3]_\n - ecdsa_generate_keypair  [3]_\n - ecdsa_sign_verify  [3]_\n\n",
                      "markdown": "` - ecdsa_privkey_export [2]_\n - ecdsa_pubkey_import [4]_\n - ecdsa_pubkey_export [4]_\n - ecdsa_generate_private_key  [3]_\n - ecdsa_generate_keypair  [3]_\n - ecdsa_sign_verify  [3]_\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 830,
                  "startColumn": 17,
                  "endLine": 830,
                  "endColumn": 28,
                  "snippet": {
                    "text": " - ecdh_privkey_export [2]_\n - ecdh_pubkey_import [4]_\n - ecdh_pubkey_export [4]_\n - ecdh_generate_private_key [3]_\n - ecdh_generate_keypair [3]_\n - ecdh_derive [3]_\n\n",
                    "rendered": {
                      "text": " - ecdh_privkey_export [2]_\n - ecdh_pubkey_import [4]_\n - ecdh_pubkey_export [4]_\n - ecdh_generate_private_key [3]_\n - ecdh_generate_keypair [3]_\n - ecdh_derive [3]_\n\n",
                      "markdown": "` - ecdh_privkey_export [2]_\n - ecdh_pubkey_import [4]_\n - ecdh_pubkey_export [4]_\n - ecdh_generate_private_key [3]_\n - ecdh_generate_keypair [3]_\n - ecdh_derive [3]_\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 823,
                  "startColumn": 16,
                  "endLine": 823,
                  "endColumn": 27,
                  "snippet": {
                    "text": " - object_copy [20]_\n\n - rsa_privkey_export [21]_\n - rsa_generate_private_key [22]_\n - rsa_sign_verify [23]_\n\n - ecdh_privkey_import [3]_\n",
                    "rendered": {
                      "text": " - object_copy [20]_\n\n - rsa_privkey_export [21]_\n - rsa_generate_private_key [22]_\n - rsa_sign_verify [23]_\n\n - ecdh_privkey_import [3]_\n",
                      "markdown": "` - object_copy [20]_\n\n - rsa_privkey_export [21]_\n - rsa_generate_private_key [22]_\n - rsa_sign_verify [23]_\n\n - ecdh_privkey_import [3]_\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 146,
                  "endLine": 661,
                  "endColumn": 156,
                  "snippet": {
                    "text": "\nPKCS#11 ECDH key pairs can be generated with the following free function:\n\n.. cpp:function:: PKCS11_ECDH_KeyPair PKCS11::generate_ecdh_keypair(Session& session, const EC_PublicKeyGenerationProperties& pub_props, const EC_PrivateKeyGenerationProperties& priv_props)\n\n----------\n\n",
                    "rendered": {
                      "text": "\nPKCS#11 ECDH key pairs can be generated with the following free function:\n\n.. cpp:function:: PKCS11_ECDH_KeyPair PKCS11::generate_ecdh_keypair(Session& session, const EC_PublicKeyGenerationProperties& pub_props, const EC_PrivateKeyGenerationProperties& priv_props)\n\n----------\n\n",
                      "markdown": "`\nPKCS#11 ECDH key pairs can be generated with the following free function:\n\n.. cpp:function:: PKCS11_ECDH_KeyPair PKCS11::generate_ecdh_keypair(Session& session, const EC_PublicKeyGenerationProperties& pub_props, const EC_PrivateKeyGenerationProperties& priv_props)\n\n----------\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 657,
                  "startColumn": 44,
                  "endLine": 657,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n   .. cpp:function:: ECDH_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`ECDH_PrivateKey`.\n\nPKCS#11 ECDH key pairs can be generated with the following free function:\n\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: ECDH_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`ECDH_PrivateKey`.\n\nPKCS#11 ECDH key pairs can be generated with the following free function:\n\n",
                      "markdown": "`\n   .. cpp:function:: ECDH_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`ECDH_PrivateKey`.\n\nPKCS#11 ECDH key pairs can be generated with the following free function:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 26,
                  "endLine": 655,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n      ANSI X9.62 Parameters value.\n\n   .. cpp:function:: ECDH_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`ECDH_PrivateKey`.\n\n",
                    "rendered": {
                      "text": "      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n      ANSI X9.62 Parameters value.\n\n   .. cpp:function:: ECDH_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`ECDH_PrivateKey`.\n\n",
                      "markdown": "`      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n      ANSI X9.62 Parameters value.\n\n   .. cpp:function:: ECDH_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`ECDH_PrivateKey`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 651,
                  "startColumn": 94,
                  "endLine": 651,
                  "endColumn": 104,
                  "snippet": {
                    "text": "\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDH private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n      ANSI X9.62 Parameters value.\n\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDH private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n      ANSI X9.62 Parameters value.\n\n",
                      "markdown": "`\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDH private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n      ANSI X9.62 Parameters value.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 110,
                  "endLine": 649,
                  "endColumn": 120,
                  "snippet": {
                    "text": "      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDH private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n",
                    "rendered": {
                      "text": "      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDH private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n",
                      "markdown": "`      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDH private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 33,
                  "endLine": 649,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDH private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n",
                    "rendered": {
                      "text": "      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDH private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n",
                      "markdown": "`      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDH private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 646,
                  "startColumn": 98,
                  "endLine": 646,
                  "endColumn": 108,
                  "snippet": {
                    "text": "\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n",
                      "markdown": "`\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 71,
                  "endLine": 644,
                  "endColumn": 81,
                  "snippet": {
                    "text": "      Existing PKCS#11 ECDH private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n",
                    "rendered": {
                      "text": "      Existing PKCS#11 ECDH private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n",
                      "markdown": "`      Existing PKCS#11 ECDH private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 33,
                  "endLine": 644,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      Existing PKCS#11 ECDH private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n",
                    "rendered": {
                      "text": "      Existing PKCS#11 ECDH private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n",
                      "markdown": "`      Existing PKCS#11 ECDH private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDH private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 639,
                  "startColumn": 33,
                  "endLine": 639,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, ObjectHandle handle)\n\n      Existing PKCS#11 ECDH private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n",
                    "rendered": {
                      "text": "\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, ObjectHandle handle)\n\n      Existing PKCS#11 ECDH private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n",
                      "markdown": "`\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, ObjectHandle handle)\n\n      Existing PKCS#11 ECDH private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 65,
                  "endLine": 637,
                  "endColumn": 75,
                  "snippet": {
                    "text": "property classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, ObjectHandle handle)\n\n",
                    "rendered": {
                      "text": "property classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, ObjectHandle handle)\n\n",
                      "markdown": "`property classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, ObjectHandle handle)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 27,
                  "endLine": 637,
                  "endColumn": 37,
                  "snippet": {
                    "text": "property classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, ObjectHandle handle)\n\n",
                    "rendered": {
                      "text": "property classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, ObjectHandle handle)\n\n",
                      "markdown": "`property classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n\n   .. cpp:function:: PKCS11_ECDH_PrivateKey(Session& session, ObjectHandle handle)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 635,
                  "startColumn": 15,
                  "endLine": 635,
                  "endColumn": 25,
                  "snippet": {
                    "text": "The class :cpp:class:`PKCS11_ECDH_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and :cpp:class:`PK_Key_Agreement_Key`\nand implements support for PKCS#11 ECDH private keys. There are two\nproperty classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n\n",
                    "rendered": {
                      "text": "The class :cpp:class:`PKCS11_ECDH_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and :cpp:class:`PK_Key_Agreement_Key`\nand implements support for PKCS#11 ECDH private keys. There are two\nproperty classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n\n",
                      "markdown": "`The class :cpp:class:`PKCS11_ECDH_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and :cpp:class:`PK_Key_Agreement_Key`\nand implements support for PKCS#11 ECDH private keys. There are two\nproperty classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 76,
                  "endLine": 634,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\nThe class :cpp:class:`PKCS11_ECDH_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and :cpp:class:`PK_Key_Agreement_Key`\nand implements support for PKCS#11 ECDH private keys. There are two\nproperty classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n",
                    "rendered": {
                      "text": "\nThe class :cpp:class:`PKCS11_ECDH_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and :cpp:class:`PK_Key_Agreement_Key`\nand implements support for PKCS#11 ECDH private keys. There are two\nproperty classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n",
                      "markdown": "`\nThe class :cpp:class:`PKCS11_ECDH_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and :cpp:class:`PK_Key_Agreement_Key`\nand implements support for PKCS#11 ECDH private keys. There are two\nproperty classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDH_PrivateKey : public virtual PKCS11_EC_PrivateKey, public virtual PK_Key_Agreement_Key\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 82,
                  "endLine": 632,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\n.. rubric:: ECDH Private Keys\n\nThe class :cpp:class:`PKCS11_ECDH_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and :cpp:class:`PK_Key_Agreement_Key`\nand implements support for PKCS#11 ECDH private keys. There are two\nproperty classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n",
                    "rendered": {
                      "text": "\n.. rubric:: ECDH Private Keys\n\nThe class :cpp:class:`PKCS11_ECDH_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and :cpp:class:`PK_Key_Agreement_Key`\nand implements support for PKCS#11 ECDH private keys. There are two\nproperty classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n",
                      "markdown": "`\n.. rubric:: ECDH Private Keys\n\nThe class :cpp:class:`PKCS11_ECDH_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and :cpp:class:`PK_Key_Agreement_Key`\nand implements support for PKCS#11 ECDH private keys. There are two\nproperty classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 34,
                  "endLine": 632,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n.. rubric:: ECDH Private Keys\n\nThe class :cpp:class:`PKCS11_ECDH_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and :cpp:class:`PK_Key_Agreement_Key`\nand implements support for PKCS#11 ECDH private keys. There are two\nproperty classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n",
                    "rendered": {
                      "text": "\n.. rubric:: ECDH Private Keys\n\nThe class :cpp:class:`PKCS11_ECDH_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and :cpp:class:`PK_Key_Agreement_Key`\nand implements support for PKCS#11 ECDH private keys. There are two\nproperty classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n",
                      "markdown": "`\n.. rubric:: ECDH Private Keys\n\nThe class :cpp:class:`PKCS11_ECDH_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and :cpp:class:`PK_Key_Agreement_Key`\nand implements support for PKCS#11 ECDH private keys. There are two\nproperty classes. One for key generation and one for import: :cpp:class:`EC_PrivateKeyGenerationProperties` and\n:cpp:class:`EC_PrivateKeyImportProperties`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 151,
                  "endLine": 593,
                  "endColumn": 161,
                  "snippet": {
                    "text": "\nPKCS#11 ECDSA key pairs can be generated with the following free function:\n\n   .. cpp:function:: PKCS11_ECDSA_KeyPair PKCS11::generate_ecdsa_keypair(Session& session, const EC_PublicKeyGenerationProperties& pub_props, const EC_PrivateKeyGenerationProperties& priv_props)\n\n----------\n\n",
                    "rendered": {
                      "text": "\nPKCS#11 ECDSA key pairs can be generated with the following free function:\n\n   .. cpp:function:: PKCS11_ECDSA_KeyPair PKCS11::generate_ecdsa_keypair(Session& session, const EC_PublicKeyGenerationProperties& pub_props, const EC_PrivateKeyGenerationProperties& priv_props)\n\n----------\n\n",
                      "markdown": "`\nPKCS#11 ECDSA key pairs can be generated with the following free function:\n\n   .. cpp:function:: PKCS11_ECDSA_KeyPair PKCS11::generate_ecdsa_keypair(Session& session, const EC_PublicKeyGenerationProperties& pub_props, const EC_PrivateKeyGenerationProperties& priv_props)\n\n----------\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 45,
                  "endLine": 589,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n   .. cpp:function:: ECDSA_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`ECDSA_PrivateKey`.\n\nPKCS#11 ECDSA key pairs can be generated with the following free function:\n\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: ECDSA_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`ECDSA_PrivateKey`.\n\nPKCS#11 ECDSA key pairs can be generated with the following free function:\n\n",
                      "markdown": "`\n   .. cpp:function:: ECDSA_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`ECDSA_PrivateKey`.\n\nPKCS#11 ECDSA key pairs can be generated with the following free function:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 27,
                  "endLine": 587,
                  "endColumn": 37,
                  "snippet": {
                    "text": "      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n      ANSI X9.62 Parameters value.\n\n   .. cpp:function:: ECDSA_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`ECDSA_PrivateKey`.\n\n",
                    "rendered": {
                      "text": "      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n      ANSI X9.62 Parameters value.\n\n   .. cpp:function:: ECDSA_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`ECDSA_PrivateKey`.\n\n",
                      "markdown": "`      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n      ANSI X9.62 Parameters value.\n\n   .. cpp:function:: ECDSA_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`ECDSA_PrivateKey`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 583,
                  "startColumn": 95,
                  "endLine": 583,
                  "endColumn": 105,
                  "snippet": {
                    "text": "\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDSA private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n      ANSI X9.62 Parameters value.\n\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDSA private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n      ANSI X9.62 Parameters value.\n\n",
                      "markdown": "`\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDSA private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n      ANSI X9.62 Parameters value.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 111,
                  "endLine": 581,
                  "endColumn": 121,
                  "snippet": {
                    "text": "      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDSA private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n",
                    "rendered": {
                      "text": "      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDSA private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n",
                      "markdown": "`      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDSA private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 34,
                  "endLine": 581,
                  "endColumn": 44,
                  "snippet": {
                    "text": "      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDSA private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n",
                    "rendered": {
                      "text": "      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDSA private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n",
                      "markdown": "`      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n\n      This constructor can be used to generate a new ECDSA private key with the :cpp:class:`EC_PrivateKeyGenerationProperties`\n      passed in ``props`` on the token. The ``ec_params`` parameter is the DER-encoding of an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 99,
                  "endLine": 578,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n",
                      "markdown": "`\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const std::vector<uint8_t>& ec_params, const EC_PrivateKeyGenerationProperties& props)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 72,
                  "endLine": 576,
                  "endColumn": 82,
                  "snippet": {
                    "text": "      Existing PKCS#11 ECDSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n",
                    "rendered": {
                      "text": "      Existing PKCS#11 ECDSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n",
                      "markdown": "`      Existing PKCS#11 ECDSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 34,
                  "endLine": 576,
                  "endColumn": 44,
                  "snippet": {
                    "text": "      Existing PKCS#11 ECDSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n",
                    "rendered": {
                      "text": "      Existing PKCS#11 ECDSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n",
                      "markdown": "`      Existing PKCS#11 ECDSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, const EC_PrivateKeyImportProperties& props)\n\n      This constructor can be used to import an existing ECDSA private key with the :cpp:class:`EC_PrivateKeyImportProperties`\n      passed in ``props`` to the token.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 34,
                  "endLine": 571,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, ObjectHandle handle)\n\n      Existing PKCS#11 ECDSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n",
                    "rendered": {
                      "text": "\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, ObjectHandle handle)\n\n      Existing PKCS#11 ECDSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n",
                      "markdown": "`\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, ObjectHandle handle)\n\n      Existing PKCS#11 ECDSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 58,
                  "endLine": 569,
                  "endColumn": 68,
                  "snippet": {
                    "text": "for PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, ObjectHandle handle)\n\n",
                    "rendered": {
                      "text": "for PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, ObjectHandle handle)\n\n",
                      "markdown": "`for PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, ObjectHandle handle)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 28,
                  "endLine": 569,
                  "endColumn": 38,
                  "snippet": {
                    "text": "for PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, ObjectHandle handle)\n\n",
                    "rendered": {
                      "text": "for PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, ObjectHandle handle)\n\n",
                      "markdown": "`for PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n   .. cpp:function:: PKCS11_ECDSA_PrivateKey(Session& session, ObjectHandle handle)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 78,
                  "endLine": 567,
                  "endColumn": 88,
                  "snippet": {
                    "text": "\nThe class :cpp:class:`PKCS11_ECDSA_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and implements support\nfor PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n",
                    "rendered": {
                      "text": "\nThe class :cpp:class:`PKCS11_ECDSA_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and implements support\nfor PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n",
                      "markdown": "`\nThe class :cpp:class:`PKCS11_ECDSA_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and implements support\nfor PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 27,
                  "endLine": 567,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nThe class :cpp:class:`PKCS11_ECDSA_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and implements support\nfor PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n",
                    "rendered": {
                      "text": "\nThe class :cpp:class:`PKCS11_ECDSA_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and implements support\nfor PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n",
                      "markdown": "`\nThe class :cpp:class:`PKCS11_ECDSA_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and implements support\nfor PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n.. cpp:class:: PKCS11_ECDSA_PrivateKey : public PKCS11_EC_PrivateKey\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 83,
                  "endLine": 565,
                  "endColumn": 93,
                  "snippet": {
                    "text": "\n.. rubric:: ECDSA Private Keys\n\nThe class :cpp:class:`PKCS11_ECDSA_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and implements support\nfor PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n",
                    "rendered": {
                      "text": "\n.. rubric:: ECDSA Private Keys\n\nThe class :cpp:class:`PKCS11_ECDSA_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and implements support\nfor PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n",
                      "markdown": "`\n.. rubric:: ECDSA Private Keys\n\nThe class :cpp:class:`PKCS11_ECDSA_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and implements support\nfor PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 35,
                  "endLine": 565,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n.. rubric:: ECDSA Private Keys\n\nThe class :cpp:class:`PKCS11_ECDSA_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and implements support\nfor PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n",
                    "rendered": {
                      "text": "\n.. rubric:: ECDSA Private Keys\n\nThe class :cpp:class:`PKCS11_ECDSA_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and implements support\nfor PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n",
                      "markdown": "`\n.. rubric:: ECDSA Private Keys\n\nThe class :cpp:class:`PKCS11_ECDSA_PrivateKey` inherits from :cpp:class:`PKCS11_EC_PrivateKey` and implements support\nfor PKCS#11 ECDSA private keys. There are two property classes for key generation\nand import: :cpp:class:`EC_PrivateKeyGenerationProperties` and :cpp:class:`EC_PrivateKeyImportProperties`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 149,
                  "endLine": 526,
                  "endColumn": 159,
                  "snippet": {
                    "text": "\nPKCS#11 RSA key pairs can be generated with the following free function:\n\n   .. cpp:function:: PKCS11_RSA_KeyPair PKCS11::generate_rsa_keypair(Session& session, const RSA_PublicKeyGenerationProperties& pub_props, const RSA_PrivateKeyGenerationProperties& priv_props)\n\n----------\n\n",
                    "rendered": {
                      "text": "\nPKCS#11 RSA key pairs can be generated with the following free function:\n\n   .. cpp:function:: PKCS11_RSA_KeyPair PKCS11::generate_rsa_keypair(Session& session, const RSA_PublicKeyGenerationProperties& pub_props, const RSA_PrivateKeyGenerationProperties& priv_props)\n\n----------\n\n",
                      "markdown": "`\nPKCS#11 RSA key pairs can be generated with the following free function:\n\n   .. cpp:function:: PKCS11_RSA_KeyPair PKCS11::generate_rsa_keypair(Session& session, const RSA_PublicKeyGenerationProperties& pub_props, const RSA_PrivateKeyGenerationProperties& priv_props)\n\n----------\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 43,
                  "endLine": 522,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n   .. cpp:function:: RSA_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`RSA_PrivateKey`.\n\nPKCS#11 RSA key pairs can be generated with the following free function:\n\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: RSA_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`RSA_PrivateKey`.\n\nPKCS#11 RSA key pairs can be generated with the following free function:\n\n",
                      "markdown": "`\n   .. cpp:function:: RSA_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`RSA_PrivateKey`.\n\nPKCS#11 RSA key pairs can be generated with the following free function:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 25,
                  "endLine": 520,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      Generates a new PKCS#11 RSA private key with bit length provided in ``bits`` and the :cpp:class:`RSA_PrivateKeyGenerationProperties`\n      passed in ``priv_key_props``.\n\n   .. cpp:function:: RSA_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`RSA_PrivateKey`.\n\n",
                    "rendered": {
                      "text": "      Generates a new PKCS#11 RSA private key with bit length provided in ``bits`` and the :cpp:class:`RSA_PrivateKeyGenerationProperties`\n      passed in ``priv_key_props``.\n\n   .. cpp:function:: RSA_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`RSA_PrivateKey`.\n\n",
                      "markdown": "`      Generates a new PKCS#11 RSA private key with bit length provided in ``bits`` and the :cpp:class:`RSA_PrivateKeyGenerationProperties`\n      passed in ``priv_key_props``.\n\n   .. cpp:function:: RSA_PrivateKey export_key() const\n\n      Returns the exported :cpp:class:`RSA_PrivateKey`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 107,
                  "endLine": 517,
                  "endColumn": 117,
                  "snippet": {
                    "text": "\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, uint32_t bits, const RSA_PrivateKeyGenerationProperties& priv_key_props)\n\n      Generates a new PKCS#11 RSA private key with bit length provided in ``bits`` and the :cpp:class:`RSA_PrivateKeyGenerationProperties`\n      passed in ``priv_key_props``.\n\n   .. cpp:function:: RSA_PrivateKey export_key() const\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, uint32_t bits, const RSA_PrivateKeyGenerationProperties& priv_key_props)\n\n      Generates a new PKCS#11 RSA private key with bit length provided in ``bits`` and the :cpp:class:`RSA_PrivateKeyGenerationProperties`\n      passed in ``priv_key_props``.\n\n   .. cpp:function:: RSA_PrivateKey export_key() const\n",
                      "markdown": "`\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, uint32_t bits, const RSA_PrivateKeyGenerationProperties& priv_key_props)\n\n      Generates a new PKCS#11 RSA private key with bit length provided in ``bits`` and the :cpp:class:`RSA_PrivateKeyGenerationProperties`\n      passed in ``priv_key_props``.\n\n   .. cpp:function:: RSA_PrivateKey export_key() const\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 86,
                  "endLine": 515,
                  "endColumn": 96,
                  "snippet": {
                    "text": "      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, uint32_t bits, const RSA_PrivateKeyGenerationProperties& priv_key_props)\n\n      Generates a new PKCS#11 RSA private key with bit length provided in ``bits`` and the :cpp:class:`RSA_PrivateKeyGenerationProperties`\n      passed in ``priv_key_props``.\n",
                    "rendered": {
                      "text": "      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, uint32_t bits, const RSA_PrivateKeyGenerationProperties& priv_key_props)\n\n      Generates a new PKCS#11 RSA private key with bit length provided in ``bits`` and the :cpp:class:`RSA_PrivateKeyGenerationProperties`\n      passed in ``priv_key_props``.\n",
                      "markdown": "`      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, uint32_t bits, const RSA_PrivateKeyGenerationProperties& priv_key_props)\n\n      Generates a new PKCS#11 RSA private key with bit length provided in ``bits`` and the :cpp:class:`RSA_PrivateKeyGenerationProperties`\n      passed in ``priv_key_props``.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 32,
                  "endLine": 515,
                  "endColumn": 42,
                  "snippet": {
                    "text": "      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, uint32_t bits, const RSA_PrivateKeyGenerationProperties& priv_key_props)\n\n      Generates a new PKCS#11 RSA private key with bit length provided in ``bits`` and the :cpp:class:`RSA_PrivateKeyGenerationProperties`\n      passed in ``priv_key_props``.\n",
                    "rendered": {
                      "text": "      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, uint32_t bits, const RSA_PrivateKeyGenerationProperties& priv_key_props)\n\n      Generates a new PKCS#11 RSA private key with bit length provided in ``bits`` and the :cpp:class:`RSA_PrivateKeyGenerationProperties`\n      passed in ``priv_key_props``.\n",
                      "markdown": "`      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, uint32_t bits, const RSA_PrivateKeyGenerationProperties& priv_key_props)\n\n      Generates a new PKCS#11 RSA private key with bit length provided in ``bits`` and the :cpp:class:`RSA_PrivateKeyGenerationProperties`\n      passed in ``priv_key_props``.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 98,
                  "endLine": 512,
                  "endColumn": 108,
                  "snippet": {
                    "text": "\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, const RSA_PrivateKeyImportProperties& priv_key_props)\n\n      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, uint32_t bits, const RSA_PrivateKeyGenerationProperties& priv_key_props)\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, const RSA_PrivateKeyImportProperties& priv_key_props)\n\n      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, uint32_t bits, const RSA_PrivateKeyGenerationProperties& priv_key_props)\n",
                      "markdown": "`\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, const RSA_PrivateKeyImportProperties& priv_key_props)\n\n      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, uint32_t bits, const RSA_PrivateKeyGenerationProperties& priv_key_props)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 71,
                  "endLine": 510,
                  "endColumn": 81,
                  "snippet": {
                    "text": "      Existing PKCS#11 RSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, const RSA_PrivateKeyImportProperties& priv_key_props)\n\n      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n",
                    "rendered": {
                      "text": "      Existing PKCS#11 RSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, const RSA_PrivateKeyImportProperties& priv_key_props)\n\n      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n",
                      "markdown": "`      Existing PKCS#11 RSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, const RSA_PrivateKeyImportProperties& priv_key_props)\n\n      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 32,
                  "endLine": 510,
                  "endColumn": 42,
                  "snippet": {
                    "text": "      Existing PKCS#11 RSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, const RSA_PrivateKeyImportProperties& priv_key_props)\n\n      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n",
                    "rendered": {
                      "text": "      Existing PKCS#11 RSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, const RSA_PrivateKeyImportProperties& priv_key_props)\n\n      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n",
                      "markdown": "`      Existing PKCS#11 RSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, const RSA_PrivateKeyImportProperties& priv_key_props)\n\n      This constructor can be used to import an existing RSA private key with the :cpp:class:`RSA_PrivateKeyImportProperties`\n      passed in ``priv_key_props`` to the token.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 32,
                  "endLine": 505,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n.. cpp:class:: PKCS11_RSA_PrivateKey : public Private_Key, public RSA_PublicKey, public Object\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, ObjectHandle handle)\n\n      Existing PKCS#11 RSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n",
                    "rendered": {
                      "text": "\n.. cpp:class:: PKCS11_RSA_PrivateKey : public Private_Key, public RSA_PublicKey, public Object\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, ObjectHandle handle)\n\n      Existing PKCS#11 RSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n",
                      "markdown": "`\n.. cpp:class:: PKCS11_RSA_PrivateKey : public Private_Key, public RSA_PublicKey, public Object\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, ObjectHandle handle)\n\n      Existing PKCS#11 RSA private keys can be used by providing an :cpp:type:`ObjectHandle` to the\n      constructor.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 46,
                  "endLine": 503,
                  "endColumn": 57,
                  "snippet": {
                    "text": ":cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n\n.. cpp:class:: PKCS11_RSA_PrivateKey : public Private_Key, public RSA_PublicKey, public Object\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, ObjectHandle handle)\n\n",
                    "rendered": {
                      "text": ":cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n\n.. cpp:class:: PKCS11_RSA_PrivateKey : public Private_Key, public RSA_PublicKey, public Object\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, ObjectHandle handle)\n\n",
                      "markdown": "`:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n\n.. cpp:class:: PKCS11_RSA_PrivateKey : public Private_Key, public RSA_PublicKey, public Object\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, ObjectHandle handle)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 26,
                  "endLine": 503,
                  "endColumn": 36,
                  "snippet": {
                    "text": ":cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n\n.. cpp:class:: PKCS11_RSA_PrivateKey : public Private_Key, public RSA_PublicKey, public Object\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, ObjectHandle handle)\n\n",
                    "rendered": {
                      "text": ":cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n\n.. cpp:class:: PKCS11_RSA_PrivateKey : public Private_Key, public RSA_PublicKey, public Object\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, ObjectHandle handle)\n\n",
                      "markdown": "`:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n\n.. cpp:class:: PKCS11_RSA_PrivateKey : public Private_Key, public RSA_PublicKey, public Object\n\n   .. cpp:function:: PKCS11_RSA_PrivateKey(Session& session, ObjectHandle handle)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 103,
                  "endLine": 499,
                  "endColumn": 114,
                  "snippet": {
                    "text": "\nThe support for PKCS#11 RSA private keys is implemented in a similar way. There are two property\nclasses: :cpp:class:`RSA_PrivateKeyGenerationProperties` and :cpp:class:`RSA_PrivateKeyImportProperties`. The :cpp:class:`PKCS11_RSA_PrivateKey`\nclass implements the actual support for PKCS#11 RSA private keys. This class inherits from :cpp:class:`Private_Key`,\n:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n\n",
                    "rendered": {
                      "text": "\nThe support for PKCS#11 RSA private keys is implemented in a similar way. There are two property\nclasses: :cpp:class:`RSA_PrivateKeyGenerationProperties` and :cpp:class:`RSA_PrivateKeyImportProperties`. The :cpp:class:`PKCS11_RSA_PrivateKey`\nclass implements the actual support for PKCS#11 RSA private keys. This class inherits from :cpp:class:`Private_Key`,\n:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n\n",
                      "markdown": "`\nThe support for PKCS#11 RSA private keys is implemented in a similar way. There are two property\nclasses: :cpp:class:`RSA_PrivateKeyGenerationProperties` and :cpp:class:`RSA_PrivateKeyImportProperties`. The :cpp:class:`PKCS11_RSA_PrivateKey`\nclass implements the actual support for PKCS#11 RSA private keys. This class inherits from :cpp:class:`Private_Key`,\n:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 133,
                  "endLine": 498,
                  "endColumn": 143,
                  "snippet": {
                    "text": ".. rubric:: RSA Private Keys\n\nThe support for PKCS#11 RSA private keys is implemented in a similar way. There are two property\nclasses: :cpp:class:`RSA_PrivateKeyGenerationProperties` and :cpp:class:`RSA_PrivateKeyImportProperties`. The :cpp:class:`PKCS11_RSA_PrivateKey`\nclass implements the actual support for PKCS#11 RSA private keys. This class inherits from :cpp:class:`Private_Key`,\n:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n",
                    "rendered": {
                      "text": ".. rubric:: RSA Private Keys\n\nThe support for PKCS#11 RSA private keys is implemented in a similar way. There are two property\nclasses: :cpp:class:`RSA_PrivateKeyGenerationProperties` and :cpp:class:`RSA_PrivateKeyImportProperties`. The :cpp:class:`PKCS11_RSA_PrivateKey`\nclass implements the actual support for PKCS#11 RSA private keys. This class inherits from :cpp:class:`Private_Key`,\n:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n",
                      "markdown": "`.. rubric:: RSA Private Keys\n\nThe support for PKCS#11 RSA private keys is implemented in a similar way. There are two property\nclasses: :cpp:class:`RSA_PrivateKeyGenerationProperties` and :cpp:class:`RSA_PrivateKeyImportProperties`. The :cpp:class:`PKCS11_RSA_PrivateKey`\nclass implements the actual support for PKCS#11 RSA private keys. This class inherits from :cpp:class:`Private_Key`,\n:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 77,
                  "endLine": 498,
                  "endColumn": 87,
                  "snippet": {
                    "text": ".. rubric:: RSA Private Keys\n\nThe support for PKCS#11 RSA private keys is implemented in a similar way. There are two property\nclasses: :cpp:class:`RSA_PrivateKeyGenerationProperties` and :cpp:class:`RSA_PrivateKeyImportProperties`. The :cpp:class:`PKCS11_RSA_PrivateKey`\nclass implements the actual support for PKCS#11 RSA private keys. This class inherits from :cpp:class:`Private_Key`,\n:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n",
                    "rendered": {
                      "text": ".. rubric:: RSA Private Keys\n\nThe support for PKCS#11 RSA private keys is implemented in a similar way. There are two property\nclasses: :cpp:class:`RSA_PrivateKeyGenerationProperties` and :cpp:class:`RSA_PrivateKeyImportProperties`. The :cpp:class:`PKCS11_RSA_PrivateKey`\nclass implements the actual support for PKCS#11 RSA private keys. This class inherits from :cpp:class:`Private_Key`,\n:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n",
                      "markdown": "`.. rubric:: RSA Private Keys\n\nThe support for PKCS#11 RSA private keys is implemented in a similar way. There are two property\nclasses: :cpp:class:`RSA_PrivateKeyGenerationProperties` and :cpp:class:`RSA_PrivateKeyImportProperties`. The :cpp:class:`PKCS11_RSA_PrivateKey`\nclass implements the actual support for PKCS#11 RSA private keys. This class inherits from :cpp:class:`Private_Key`,\n:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 25,
                  "endLine": 498,
                  "endColumn": 35,
                  "snippet": {
                    "text": ".. rubric:: RSA Private Keys\n\nThe support for PKCS#11 RSA private keys is implemented in a similar way. There are two property\nclasses: :cpp:class:`RSA_PrivateKeyGenerationProperties` and :cpp:class:`RSA_PrivateKeyImportProperties`. The :cpp:class:`PKCS11_RSA_PrivateKey`\nclass implements the actual support for PKCS#11 RSA private keys. This class inherits from :cpp:class:`Private_Key`,\n:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n",
                    "rendered": {
                      "text": ".. rubric:: RSA Private Keys\n\nThe support for PKCS#11 RSA private keys is implemented in a similar way. There are two property\nclasses: :cpp:class:`RSA_PrivateKeyGenerationProperties` and :cpp:class:`RSA_PrivateKeyImportProperties`. The :cpp:class:`PKCS11_RSA_PrivateKey`\nclass implements the actual support for PKCS#11 RSA private keys. This class inherits from :cpp:class:`Private_Key`,\n:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n",
                      "markdown": "`.. rubric:: RSA Private Keys\n\nThe support for PKCS#11 RSA private keys is implemented in a similar way. There are two property\nclasses: :cpp:class:`RSA_PrivateKeyGenerationProperties` and :cpp:class:`RSA_PrivateKeyImportProperties`. The :cpp:class:`PKCS11_RSA_PrivateKey`\nclass implements the actual support for PKCS#11 RSA private keys. This class inherits from :cpp:class:`Private_Key`,\n:cpp:class:`RSA_PublicKey` and :cpp:class:`Object`. In contrast to the public key class there is a third constructor\nto generate private keys directly on the token or in the session and one method to export private keys.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 14,
                  "endLine": 382,
                  "endColumn": 23,
                  "snippet": {
                    "text": "* :cpp:class:`KeyProperties` inherits from :cpp:class:`StorageObjectProperties`\n* :cpp:class:`PublicKeyProperties` inherits from :cpp:class:`KeyProperties`\n* :cpp:class:`PrivateKeyProperties` inherits from :cpp:class:`KeyProperties`\n* :cpp:class:`SecretKeyProperties` inherits from :cpp:class:`KeyProperties`\n\nPKCS#11 objects themselves are represented by the :cpp:class:`Object` class.\n\n",
                    "rendered": {
                      "text": "* :cpp:class:`KeyProperties` inherits from :cpp:class:`StorageObjectProperties`\n* :cpp:class:`PublicKeyProperties` inherits from :cpp:class:`KeyProperties`\n* :cpp:class:`PrivateKeyProperties` inherits from :cpp:class:`KeyProperties`\n* :cpp:class:`SecretKeyProperties` inherits from :cpp:class:`KeyProperties`\n\nPKCS#11 objects themselves are represented by the :cpp:class:`Object` class.\n\n",
                      "markdown": "`* :cpp:class:`KeyProperties` inherits from :cpp:class:`StorageObjectProperties`\n* :cpp:class:`PublicKeyProperties` inherits from :cpp:class:`KeyProperties`\n* :cpp:class:`PrivateKeyProperties` inherits from :cpp:class:`KeyProperties`\n* :cpp:class:`SecretKeyProperties` inherits from :cpp:class:`KeyProperties`\n\nPKCS#11 objects themselves are represented by the :cpp:class:`Object` class.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 14,
                  "endLine": 381,
                  "endColumn": 24,
                  "snippet": {
                    "text": "* :cpp:class:`DomainParameterProperties` inherits from :cpp:class:`StorageObjectProperties`\n* :cpp:class:`KeyProperties` inherits from :cpp:class:`StorageObjectProperties`\n* :cpp:class:`PublicKeyProperties` inherits from :cpp:class:`KeyProperties`\n* :cpp:class:`PrivateKeyProperties` inherits from :cpp:class:`KeyProperties`\n* :cpp:class:`SecretKeyProperties` inherits from :cpp:class:`KeyProperties`\n\nPKCS#11 objects themselves are represented by the :cpp:class:`Object` class.\n",
                    "rendered": {
                      "text": "* :cpp:class:`DomainParameterProperties` inherits from :cpp:class:`StorageObjectProperties`\n* :cpp:class:`KeyProperties` inherits from :cpp:class:`StorageObjectProperties`\n* :cpp:class:`PublicKeyProperties` inherits from :cpp:class:`KeyProperties`\n* :cpp:class:`PrivateKeyProperties` inherits from :cpp:class:`KeyProperties`\n* :cpp:class:`SecretKeyProperties` inherits from :cpp:class:`KeyProperties`\n\nPKCS#11 objects themselves are represented by the :cpp:class:`Object` class.\n",
                      "markdown": "`* :cpp:class:`DomainParameterProperties` inherits from :cpp:class:`StorageObjectProperties`\n* :cpp:class:`KeyProperties` inherits from :cpp:class:`StorageObjectProperties`\n* :cpp:class:`PublicKeyProperties` inherits from :cpp:class:`KeyProperties`\n* :cpp:class:`PrivateKeyProperties` inherits from :cpp:class:`KeyProperties`\n* :cpp:class:`SecretKeyProperties` inherits from :cpp:class:`KeyProperties`\n\nPKCS#11 objects themselves are represented by the :cpp:class:`Object` class.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 8,
                  "endLine": 70,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n.. rubric:: C-API Wrapping\n\nThere is at least one method in the :cpp:class:`LowLevel` class that corresponds to a PKCS#11\nfunction. For example the :cpp:func:`C_GetSlotList` method in the :cpp:class:`LowLevel` class is defined as follows:\n\n.. cpp:class:: LowLevel\n",
                    "rendered": {
                      "text": "\n.. rubric:: C-API Wrapping\n\nThere is at least one method in the :cpp:class:`LowLevel` class that corresponds to a PKCS#11\nfunction. For example the :cpp:func:`C_GetSlotList` method in the :cpp:class:`LowLevel` class is defined as follows:\n\n.. cpp:class:: LowLevel\n",
                      "markdown": "`\n.. rubric:: C-API Wrapping\n\nThere is at least one method in the :cpp:class:`LowLevel` class that corresponds to a PKCS#11\nfunction. For example the :cpp:func:`C_GetSlotList` method in the :cpp:class:`LowLevel` class is defined as follows:\n\n.. cpp:class:: LowLevel\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/pkcs11.rst"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 6,
                  "endLine": 346,
                  "endColumn": 11,
                  "snippet": {
                    "text": "The mandatory and optional attribute requirements are mapped in so called property classes.\nMandatory attributes are set in the constructor, optional attributes can be set via ``set_`` methods.\n\nIn the top hierarchy is the :cpp:class:`ObjectProperties` class which inherits from the :cpp:class:`AttributeContainer`.\nThis class represents the common attributes of all PKCS#11 objects.\n\n.. cpp:class:: ObjectProperties : public AttributeContainer\n",
                    "rendered": {
                      "text": "The mandatory and optional attribute requirements are mapped in so called property classes.\nMandatory attributes are set in the constructor, optional attributes can be set via ``set_`` methods.\n\nIn the top hierarchy is the :cpp:class:`ObjectProperties` class which inherits from the :cpp:class:`AttributeContainer`.\nThis class represents the common attributes of all PKCS#11 objects.\n\n.. cpp:class:: ObjectProperties : public AttributeContainer\n",
                      "markdown": "`The mandatory and optional attribute requirements are mapped in so called property classes.\nMandatory attributes are set in the constructor, optional attributes can be set via ``set_`` methods.\n\nIn the top hierarchy is the :cpp:class:`ObjectProperties` class which inherits from the :cpp:class:`AttributeContainer`.\nThis class represents the common attributes of all PKCS#11 objects.\n\n.. cpp:class:: ObjectProperties : public AttributeContainer\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/hash.rst"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 20,
                  "endLine": 375,
                  "endColumn": 24,
                  "snippet": {
                    "text": "Available if ``BOTAN_HAS_COMB4P`` is defined.\n\nThis combines two cryptographic hashes in such a way that preimage and collision\nattacks are provably at least as hard as a preimage or collision attack on the\nstrongest hash.\n\nAlgorithm specification name:\n",
                    "rendered": {
                      "text": "Available if ``BOTAN_HAS_COMB4P`` is defined.\n\nThis combines two cryptographic hashes in such a way that preimage and collision\nattacks are provably at least as hard as a preimage or collision attack on the\nstrongest hash.\n\nAlgorithm specification name:\n",
                      "markdown": "`Available if ``BOTAN_HAS_COMB4P`` is defined.\n\nThis combines two cryptographic hashes in such a way that preimage and collision\nattacks are provably at least as hard as a preimage or collision attack on the\nstrongest hash.\n\nAlgorithm specification name:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/hash.rst"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 42,
                  "endLine": 327,
                  "endColumn": 46,
                  "snippet": {
                    "text": ".. warning::\n   The Streebog Sbox has recently been revealed to have a hidden structure which\n   interacts with its linear layer in a way which may provide a backdoor when\n   used in certain ways. Avoid Streebog if at all possible.\n\nAlgorithm specification names:\n\n",
                    "rendered": {
                      "text": ".. warning::\n   The Streebog Sbox has recently been revealed to have a hidden structure which\n   interacts with its linear layer in a way which may provide a backdoor when\n   used in certain ways. Avoid Streebog if at all possible.\n\nAlgorithm specification names:\n\n",
                      "markdown": "`.. warning::\n   The Streebog Sbox has recently been revealed to have a hidden structure which\n   interacts with its linear layer in a way which may provide a backdoor when\n   used in certain ways. Avoid Streebog if at all possible.\n\nAlgorithm specification names:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/hash.rst"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 71,
                  "endLine": 19,
                  "snippet": {
                    "text": "Using a hash function is typically split into three stages: initialization,\nupdate, and finalization (often referred to as a IUF interface). The\ninitialization stage is implicit: after creating a hash function object, it is\nready to process data. Then update is called one or more times. Calling update\nseveral times is equivalent to calling it once with all of the arguments\nconcatenated. After completing a hash computation (eg using ``final``), the\ninternal state is reset to begin hashing a new message.\n\n",
                    "rendered": {
                      "text": "Using a hash function is typically split into three stages: initialization,\nupdate, and finalization (often referred to as a IUF interface). The\ninitialization stage is implicit: after creating a hash function object, it is\nready to process data. Then update is called one or more times. Calling update\nseveral times is equivalent to calling it once with all of the arguments\nconcatenated. After completing a hash computation (eg using ``final``), the\ninternal state is reset to begin hashing a new message.\n\n",
                      "markdown": "`Using a hash function is typically split into three stages: initialization,\nupdate, and finalization (often referred to as a IUF interface). The\ninitialization stage is implicit: after creating a hash function object, it is\nready to process data. Then update is called one or more times. Calling update\nseveral times is equivalent to calling it once with all of the arguments\nconcatenated. After completing a hash computation (eg using ``final``), the\ninternal state is reset to begin hashing a new message.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/hash.rst"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 27,
                  "endLine": 18,
                  "endColumn": 35,
                  "snippet": {
                    "text": "Using a hash function is typically split into three stages: initialization,\nupdate, and finalization (often referred to as a IUF interface). The\ninitialization stage is implicit: after creating a hash function object, it is\nready to process data. Then update is called one or more times. Calling update\nseveral times is equivalent to calling it once with all of the arguments\nconcatenated. After completing a hash computation (eg using ``final``), the\ninternal state is reset to begin hashing a new message.\n",
                    "rendered": {
                      "text": "Using a hash function is typically split into three stages: initialization,\nupdate, and finalization (often referred to as a IUF interface). The\ninitialization stage is implicit: after creating a hash function object, it is\nready to process data. Then update is called one or more times. Calling update\nseveral times is equivalent to calling it once with all of the arguments\nconcatenated. After completing a hash computation (eg using ``final``), the\ninternal state is reset to begin hashing a new message.\n",
                      "markdown": "`Using a hash function is typically split into three stages: initialization,\nupdate, and finalization (often referred to as a IUF interface). The\ninitialization stage is implicit: after creating a hash function object, it is\nready to process data. Then update is called one or more times. Calling update\nseveral times is equivalent to calling it once with all of the arguments\nconcatenated. After completing a hash computation (eg using ``final``), the\ninternal state is reset to begin hashing a new message.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/bigint.rst"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 34,
                  "endLine": 259,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  Test *n* for primality using a probabilistic algorithm (Miller-Rabin).  With\n  this algorithm, there is some non-zero probability that true will be returned\n  even if *n* is actually composite. Modifying *prob* allows you to decrease the\n  chance of such a false positive, at the cost of increased runtime. Sufficient\n  tests will be run such that the chance *n* is composite is no more than 1 in\n  2\\ :sup:`prob`. Set *is_random* to true if (and only if) *n* was randomly\n  chosen (ie, there is no danger it was chosen maliciously) as far fewer tests\n",
                    "rendered": {
                      "text": "  Test *n* for primality using a probabilistic algorithm (Miller-Rabin).  With\n  this algorithm, there is some non-zero probability that true will be returned\n  even if *n* is actually composite. Modifying *prob* allows you to decrease the\n  chance of such a false positive, at the cost of increased runtime. Sufficient\n  tests will be run such that the chance *n* is composite is no more than 1 in\n  2\\ :sup:`prob`. Set *is_random* to true if (and only if) *n* was randomly\n  chosen (ie, there is no danger it was chosen maliciously) as far fewer tests\n",
                      "markdown": "`  Test *n* for primality using a probabilistic algorithm (Miller-Rabin).  With\n  this algorithm, there is some non-zero probability that true will be returned\n  even if *n* is actually composite. Modifying *prob* allows you to decrease the\n  chance of such a false positive, at the cost of increased runtime. Sufficient\n  tests will be run such that the chance *n* is composite is no more than 1 in\n  2\\ :sup:`prob`. Set *is_random* to true if (and only if) *n* was randomly\n  chosen (ie, there is no danger it was chosen maliciously) as far fewer tests\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/bigint.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 61,
                  "endLine": 7,
                  "endColumn": 67,
                  "snippet": {
                    "text": "``BigInt`` is Botan's implementation of a multiple-precision integer. Thanks to\nC++'s operator overloading features, using ``BigInt`` is often quite similar to\nusing a native integer type. The number of functions related to ``BigInt`` is\nquite large, and not all of them are documented here. You can find the complete\ndeclarations in ``botan/bigint.h`` and ``botan/numthry.h``.\n\n.. cpp:class:: BigInt\n",
                    "rendered": {
                      "text": "``BigInt`` is Botan's implementation of a multiple-precision integer. Thanks to\nC++'s operator overloading features, using ``BigInt`` is often quite similar to\nusing a native integer type. The number of functions related to ``BigInt`` is\nquite large, and not all of them are documented here. You can find the complete\ndeclarations in ``botan/bigint.h`` and ``botan/numthry.h``.\n\n.. cpp:class:: BigInt\n",
                      "markdown": "```BigInt`` is Botan's implementation of a multiple-precision integer. Thanks to\nC++'s operator overloading features, using ``BigInt`` is often quite similar to\nusing a native integer type. The number of functions related to ``BigInt`` is\nquite large, and not all of them are documented here. You can find the complete\ndeclarations in ``botan/bigint.h`` and ``botan/numthry.h``.\n\n.. cpp:class:: BigInt\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/support.rst"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 69,
                  "endLine": 71,
                  "endColumn": 73,
                  "snippet": {
                    "text": "Following table provides the support status for Botan branches, as of\nMay 2024.\n\n\"Active development\" refers to adding new features and optimizations. At the\nconclusion of the active development phase, only bugfixes are applied.\n\nEnd of life dates may be extended as circumstances warrant.\n",
                    "rendered": {
                      "text": "Following table provides the support status for Botan branches, as of\nMay 2024.\n\n\"Active development\" refers to adding new features and optimizations. At the\nconclusion of the active development phase, only bugfixes are applied.\n\nEnd of life dates may be extended as circumstances warrant.\n",
                      "markdown": "`Following table provides the support status for Botan branches, as of\nMay 2024.\n\n\"Active development\" refers to adding new features and optimizations. At the\nconclusion of the active development phase, only bugfixes are applied.\n\nEnd of life dates may be extended as circumstances warrant.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/support.rst"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 35,
                  "endLine": 40,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n.. note::\n\n   As of May 2024, it is known that at least XCode 15.0 is required, since\n   earlier versions did not support certain C++20 language features that the\n   library uses.\n\n",
                    "rendered": {
                      "text": "\n.. note::\n\n   As of May 2024, it is known that at least XCode 15.0 is required, since\n   earlier versions did not support certain C++20 language features that the\n   library uses.\n\n",
                      "markdown": "`\n.. note::\n\n   As of May 2024, it is known that at least XCode 15.0 is required, since\n   earlier versions did not support certain C++20 language features that the\n   library uses.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 256,
                  "endLine": 256,
                  "endColumn": 6,
                  "snippet": {
                    "text": "base64 decoding\n----------------------\n\nBase64 (and related encodings base32, base58 and hex) are sometimes used to\nencode or decode secret data. To avoid possible side channels which might leak\nkey material during the encoding or decoding process, these functions avoid any\ninput-dependent table lookups.\n",
                    "rendered": {
                      "text": "base64 decoding\n----------------------\n\nBase64 (and related encodings base32, base58 and hex) are sometimes used to\nencode or decode secret data. To avoid possible side channels which might leak\nkey material during the encoding or decoding process, these functions avoid any\ninput-dependent table lookups.\n",
                      "markdown": "`base64 decoding\n----------------------\n\nBase64 (and related encodings base32, base58 and hex) are sometimes used to\nencode or decode secret data. To avoid possible side channels which might leak\nkey material during the encoding or decoding process, these functions avoid any\ninput-dependent table lookups.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 253,
                  "endLine": 253,
                  "endColumn": 6,
                  "snippet": {
                    "text": "making a bad problem worse, the code to handle decoding CBC ciphertext padding\nbytes runs in constant time, depending only on the block size of the cipher.\n\nbase64 decoding\n----------------------\n\nBase64 (and related encodings base32, base58 and hex) are sometimes used to\n",
                    "rendered": {
                      "text": "making a bad problem worse, the code to handle decoding CBC ciphertext padding\nbytes runs in constant time, depending only on the block size of the cipher.\n\nbase64 decoding\n----------------------\n\nBase64 (and related encodings base32, base58 and hex) are sometimes used to\n",
                      "markdown": "`making a bad problem worse, the code to handle decoding CBC ciphertext padding\nbytes runs in constant time, depending only on the block size of the cipher.\n\nbase64 decoding\n----------------------\n\nBase64 (and related encodings base32, base58 and hex) are sometimes used to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 8,
                  "endLine": 388,
                  "endColumn": 12,
                  "snippet": {
                    "text": "---------------------\n\nCurrently the main tool used by the Botan developers for testing for side\nchannels at runtime is valgrind; valgrind's runtime API is used to taint memory\nvalues, and any jumps or indexes using data derived from these values will cause\na valgrind warning. This technique was first used by Adam Langley in ctgrind.\nSee header ct_utils.h.\n",
                    "rendered": {
                      "text": "---------------------\n\nCurrently the main tool used by the Botan developers for testing for side\nchannels at runtime is valgrind; valgrind's runtime API is used to taint memory\nvalues, and any jumps or indexes using data derived from these values will cause\na valgrind warning. This technique was first used by Adam Langley in ctgrind.\nSee header ct_utils.h.\n",
                      "markdown": "`---------------------\n\nCurrently the main tool used by the Botan developers for testing for side\nchannels at runtime is valgrind; valgrind's runtime API is used to taint memory\nvalues, and any jumps or indexes using data derived from these values will cause\na valgrind warning. This technique was first used by Adam Langley in ctgrind.\nSee header ct_utils.h.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 8,
                  "endLine": 382,
                  "endColumn": 12,
                  "snippet": {
                    "text": "If available, Botan uses such a region for storing key material. A page-aligned\nblock of memory is allocated and locked, then the memory is scrubbed before\nfreeing. This memory pool is used by secure_vector when available. It can be\ndisabled at runtime setting the environment variable BOTAN_MLOCK_POOL_SIZE to 0.\n\nAutomated Analysis\n---------------------\n",
                    "rendered": {
                      "text": "If available, Botan uses such a region for storing key material. A page-aligned\nblock of memory is allocated and locked, then the memory is scrubbed before\nfreeing. This memory pool is used by secure_vector when available. It can be\ndisabled at runtime setting the environment variable BOTAN_MLOCK_POOL_SIZE to 0.\n\nAutomated Analysis\n---------------------\n",
                      "markdown": "`If available, Botan uses such a region for storing key material. A page-aligned\nblock of memory is allocated and locked, then the memory is scrubbed before\nfreeing. This memory pool is used by secure_vector when available. It can be\ndisabled at runtime setting the environment variable BOTAN_MLOCK_POOL_SIZE to 0.\n\nAutomated Analysis\n---------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 4,
                  "endLine": 365,
                  "endColumn": 8,
                  "snippet": {
                    "text": "currently known and has been verified to work as expected on common platforms.\n\nIf BOTAN_USE_VOLATILE_MEMSET_FOR_ZERO is set to 0 in build.h (not the default) a\nbyte at a time loop through a volatile pointer is used to overwrite the array.\n\nMemory allocation\n----------------------\n",
                    "rendered": {
                      "text": "currently known and has been verified to work as expected on common platforms.\n\nIf BOTAN_USE_VOLATILE_MEMSET_FOR_ZERO is set to 0 in build.h (not the default) a\nbyte at a time loop through a volatile pointer is used to overwrite the array.\n\nMemory allocation\n----------------------\n",
                      "markdown": "`currently known and has been verified to work as expected on common platforms.\n\nIf BOTAN_USE_VOLATILE_MEMSET_FOR_ZERO is set to 0 in build.h (not the default) a\nbyte at a time loop through a volatile pointer is used to overwrite the array.\n\nMemory allocation\n----------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 69,
                  "endLine": 64,
                  "endColumn": 73,
                  "snippet": {
                    "text": "introduces only slight additional overhead and blocks most fault attacks; it is\npossible to use a second fault attack to bypass this verification, but such a\ndouble fault attack requires significantly more control on the part of an\nattacker than a BellCore style attack, which is possible if any error at all\noccurs during either modular exponentiation involved in the RSA signature\noperation.\n\n",
                    "rendered": {
                      "text": "introduces only slight additional overhead and blocks most fault attacks; it is\npossible to use a second fault attack to bypass this verification, but such a\ndouble fault attack requires significantly more control on the part of an\nattacker than a BellCore style attack, which is possible if any error at all\noccurs during either modular exponentiation involved in the RSA signature\noperation.\n\n",
                      "markdown": "`introduces only slight additional overhead and blocks most fault attacks; it is\npossible to use a second fault attack to bypass this verification, but such a\ndouble fault attack requires significantly more control on the part of an\nattacker than a BellCore style attack, which is possible if any error at all\noccurs during either modular exponentiation involved in the RSA signature\noperation.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 47,
                  "endLine": 63,
                  "endColumn": 56,
                  "snippet": {
                    "text": "key operation the result is checked for consistency with the public key. This\nintroduces only slight additional overhead and blocks most fault attacks; it is\npossible to use a second fault attack to bypass this verification, but such a\ndouble fault attack requires significantly more control on the part of an\nattacker than a BellCore style attack, which is possible if any error at all\noccurs during either modular exponentiation involved in the RSA signature\noperation.\n",
                    "rendered": {
                      "text": "key operation the result is checked for consistency with the public key. This\nintroduces only slight additional overhead and blocks most fault attacks; it is\npossible to use a second fault attack to bypass this verification, but such a\ndouble fault attack requires significantly more control on the part of an\nattacker than a BellCore style attack, which is possible if any error at all\noccurs during either modular exponentiation involved in the RSA signature\noperation.\n",
                      "markdown": "`key operation the result is checked for consistency with the public key. This\nintroduces only slight additional overhead and blocks most fault attacks; it is\npossible to use a second fault attack to bypass this verification, but such a\ndouble fault attack requires significantly more control on the part of an\nattacker than a BellCore style attack, which is possible if any error at all\noccurs during either modular exponentiation involved in the RSA signature\noperation.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 3,
                  "endLine": 411,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nBuild and run the Mona report as::\n\n  $ git clone https://github.com/seecurity/mona-timing-report.git\n  $ cd mona-timing-report\n  $ ant\n  $ java -jar ReportingTool.jar --lowerBound=0.4 --upperBound=0.5 --inputFile=pow_mod.raw --name=PowMod\n",
                    "rendered": {
                      "text": "\nBuild and run the Mona report as::\n\n  $ git clone https://github.com/seecurity/mona-timing-report.git\n  $ cd mona-timing-report\n  $ ant\n  $ java -jar ReportingTool.jar --lowerBound=0.4 --upperBound=0.5 --inputFile=pow_mod.raw --name=PowMod\n",
                      "markdown": "`\nBuild and run the Mona report as::\n\n  $ git clone https://github.com/seecurity/mona-timing-report.git\n  $ cd mona-timing-report\n  $ ant\n  $ java -jar ReportingTool.jar --lowerBound=0.4 --upperBound=0.5 --inputFile=pow_mod.raw --name=PowMod\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 9,
                  "endLine": 365,
                  "endColumn": 15,
                  "snippet": {
                    "text": "currently known and has been verified to work as expected on common platforms.\n\nIf BOTAN_USE_VOLATILE_MEMSET_FOR_ZERO is set to 0 in build.h (not the default) a\nbyte at a time loop through a volatile pointer is used to overwrite the array.\n\nMemory allocation\n----------------------\n",
                    "rendered": {
                      "text": "currently known and has been verified to work as expected on common platforms.\n\nIf BOTAN_USE_VOLATILE_MEMSET_FOR_ZERO is set to 0 in build.h (not the default) a\nbyte at a time loop through a volatile pointer is used to overwrite the array.\n\nMemory allocation\n----------------------\n",
                      "markdown": "`currently known and has been verified to work as expected on common platforms.\n\nIf BOTAN_USE_VOLATILE_MEMSET_FOR_ZERO is set to 0 in build.h (not the default) a\nbyte at a time loop through a volatile pointer is used to overwrite the array.\n\nMemory allocation\n----------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 78,
                  "endLine": 330,
                  "endColumn": 5,
                  "snippet": {
                    "text": "IDEA\n---------------\n\nIDEA encryption, decryption, and key schedule are implemented to take constant\ntime regardless of their inputs.\n\nHash Functions\n-------------------------\n",
                    "rendered": {
                      "text": "IDEA\n---------------\n\nIDEA encryption, decryption, and key schedule are implemented to take constant\ntime regardless of their inputs.\n\nHash Functions\n-------------------------\n",
                      "markdown": "`IDEA\n---------------\n\nIDEA encryption, decryption, and key schedule are implemented to take constant\ntime regardless of their inputs.\n\nHash Functions\n-------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 35,
                  "endLine": 273,
                  "endColumn": 41,
                  "snippet": {
                    "text": "version of AES is implemented which is side channel silent. This implementation\nis based on code by Mike Hamburg [VectorAes], see aes_vperm.cpp.\n\nOn all other processors, a constant time bitsliced implementation is used. This\nis typically slower than the vector permute implementation, and additionally for\nbest performance multiple blocks must be processed in parellel.  So modes such\nas CTR, GCM or XTS are relatively fast, but others such as CBC encryption\n",
                    "rendered": {
                      "text": "version of AES is implemented which is side channel silent. This implementation\nis based on code by Mike Hamburg [VectorAes], see aes_vperm.cpp.\n\nOn all other processors, a constant time bitsliced implementation is used. This\nis typically slower than the vector permute implementation, and additionally for\nbest performance multiple blocks must be processed in parellel.  So modes such\nas CTR, GCM or XTS are relatively fast, but others such as CBC encryption\n",
                      "markdown": "`version of AES is implemented which is side channel silent. This implementation\nis based on code by Mike Hamburg [VectorAes], see aes_vperm.cpp.\n\nOn all other processors, a constant time bitsliced implementation is used. This\nis typically slower than the vector permute implementation, and additionally for\nbest performance multiple blocks must be processed in parellel.  So modes such\nas CTR, GCM or XTS are relatively fast, but others such as CBC encryption\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 255,
                  "endLine": 256,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nbase64 decoding\n----------------------\n\nBase64 (and related encodings base32, base58 and hex) are sometimes used to\nencode or decode secret data. To avoid possible side channels which might leak\nkey material during the encoding or decoding process, these functions avoid any\ninput-dependent table lookups.\n",
                    "rendered": {
                      "text": "\nbase64 decoding\n----------------------\n\nBase64 (and related encodings base32, base58 and hex) are sometimes used to\nencode or decode secret data. To avoid possible side channels which might leak\nkey material during the encoding or decoding process, these functions avoid any\ninput-dependent table lookups.\n",
                      "markdown": "`\nbase64 decoding\n----------------------\n\nBase64 (and related encodings base32, base58 and hex) are sometimes used to\nencode or decode secret data. To avoid possible side channels which might leak\nkey material during the encoding or decoding process, these functions avoid any\ninput-dependent table lookups.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 252,
                  "endLine": 253,
                  "endColumn": 7,
                  "snippet": {
                    "text": "practice, some protocols are not good and cannot be fixed immediately. To avoid\nmaking a bad problem worse, the code to handle decoding CBC ciphertext padding\nbytes runs in constant time, depending only on the block size of the cipher.\n\nbase64 decoding\n----------------------\n\nBase64 (and related encodings base32, base58 and hex) are sometimes used to\n",
                    "rendered": {
                      "text": "practice, some protocols are not good and cannot be fixed immediately. To avoid\nmaking a bad problem worse, the code to handle decoding CBC ciphertext padding\nbytes runs in constant time, depending only on the block size of the cipher.\n\nbase64 decoding\n----------------------\n\nBase64 (and related encodings base32, base58 and hex) are sometimes used to\n",
                      "markdown": "`practice, some protocols are not good and cannot be fixed immediately. To avoid\nmaking a bad problem worse, the code to handle decoding CBC ciphertext padding\nbytes runs in constant time, depending only on the block size of the cipher.\n\nbase64 decoding\n----------------------\n\nBase64 (and related encodings base32, base58 and hex) are sometimes used to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 40,
                  "endLine": 226,
                  "endColumn": 46,
                  "snippet": {
                    "text": "The x25519 code is independent of the main Weierstrass form ECC code, instead\nbased on curve25519-donna-c64.c by Adam Langley. The code seems immune to cache\nbased side channels. It does make use of integer multiplications; on some old\nCPUs these multiplications take variable time and might allow a side channel\nattack. This is not considered a problem on modern processors.\n\nTLS CBC ciphersuites\n",
                    "rendered": {
                      "text": "The x25519 code is independent of the main Weierstrass form ECC code, instead\nbased on curve25519-donna-c64.c by Adam Langley. The code seems immune to cache\nbased side channels. It does make use of integer multiplications; on some old\nCPUs these multiplications take variable time and might allow a side channel\nattack. This is not considered a problem on modern processors.\n\nTLS CBC ciphersuites\n",
                      "markdown": "`The x25519 code is independent of the main Weierstrass form ECC code, instead\nbased on curve25519-donna-c64.c by Adam Langley. The code seems immune to cache\nbased side channels. It does make use of integer multiplications; on some old\nCPUs these multiplications take variable time and might allow a side channel\nattack. This is not considered a problem on modern processors.\n\nTLS CBC ciphersuites\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 78,
                  "endLine": 218,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nInversion of the ECDSA nonce k must be done in constant time, as any leak of\neven a single bit of the nonce can be sufficient to allow recovering the private\nkey. In Botan all inverses modulo an odd number are performed using a constant\ntime algorithm due to Niels Möller.\n\nx25519\n----------------------\n",
                    "rendered": {
                      "text": "\nInversion of the ECDSA nonce k must be done in constant time, as any leak of\neven a single bit of the nonce can be sufficient to allow recovering the private\nkey. In Botan all inverses modulo an odd number are performed using a constant\ntime algorithm due to Niels Möller.\n\nx25519\n----------------------\n",
                      "markdown": "`\nInversion of the ECDSA nonce k must be done in constant time, as any leak of\neven a single bit of the nonce can be sufficient to allow recovering the private\nkey. In Botan all inverses modulo an odd number are performed using a constant\ntime algorithm due to Niels Möller.\n\nx25519\n----------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 80,
                  "endLine": 201,
                  "endColumn": 6,
                  "snippet": {
                    "text": "this is normally invoked using untrusted points (eg during ECDH key exchange) it\nrandomizes all inputs to prevent attacks which are based on chosen input\npoints. The table of precomputed multiples is accessed using a masked lookup\nwhich should not leak information about the secret scalar to an attacker who can\nmount a cache-based side channel attack.\n\nSee ec_point.cpp and point_mul.cpp in src/lib/pubkey/ec_group\n\n",
                    "rendered": {
                      "text": "this is normally invoked using untrusted points (eg during ECDH key exchange) it\nrandomizes all inputs to prevent attacks which are based on chosen input\npoints. The table of precomputed multiples is accessed using a masked lookup\nwhich should not leak information about the secret scalar to an attacker who can\nmount a cache-based side channel attack.\n\nSee ec_point.cpp and point_mul.cpp in src/lib/pubkey/ec_group\n\n",
                      "markdown": "`this is normally invoked using untrusted points (eg during ECDH key exchange) it\nrandomizes all inputs to prevent attacks which are based on chosen input\npoints. The table of precomputed multiples is accessed using a masked lookup\nwhich should not leak information about the secret scalar to an attacker who can\nmount a cache-based side channel attack.\n\nSee ec_point.cpp and point_mul.cpp in src/lib/pubkey/ec_group\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 48,
                  "endLine": 132,
                  "endColumn": 54,
                  "snippet": {
                    "text": "actually invalid. It also needlessly exposes the BER parser to untrusted inputs.\n\nIt is safer and simpler to instead re-encode the hash value we are expecting\nusing the PKCS #1 v1.5 encoding rules, and const time compare our expected\nencoding with the output of the RSA operation. So that is what Botan does.\n\nSee emsa_pkcs.cpp.\n",
                    "rendered": {
                      "text": "actually invalid. It also needlessly exposes the BER parser to untrusted inputs.\n\nIt is safer and simpler to instead re-encode the hash value we are expecting\nusing the PKCS #1 v1.5 encoding rules, and const time compare our expected\nencoding with the output of the RSA operation. So that is what Botan does.\n\nSee emsa_pkcs.cpp.\n",
                      "markdown": "`actually invalid. It also needlessly exposes the BER parser to untrusted inputs.\n\nIt is safer and simpler to instead re-encode the hash value we are expecting\nusing the PKCS #1 v1.5 encoding rules, and const time compare our expected\nencoding with the output of the RSA operation. So that is what Botan does.\n\nSee emsa_pkcs.cpp.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 103,
                  "endColumn": 67,
                  "snippet": {
                    "text": "Preventing the attack in full requires some application level changes. In\nprotocols which know the expected length of the encrypted key, PK_Decryptor\nprovides the function `decrypt_or_random` which first generates a random fake\nkey, then decrypts the presented ciphertext, then in constant time either copies\nout the random key or the decrypted plaintext depending on if the ciphertext was\nvalid or not (valid padding and expected plaintext length). Then in the case of\nan attack, the protocol will carry on with a randomly chosen key, which will\n",
                    "rendered": {
                      "text": "Preventing the attack in full requires some application level changes. In\nprotocols which know the expected length of the encrypted key, PK_Decryptor\nprovides the function `decrypt_or_random` which first generates a random fake\nkey, then decrypts the presented ciphertext, then in constant time either copies\nout the random key or the decrypted plaintext depending on if the ciphertext was\nvalid or not (valid padding and expected plaintext length). Then in the case of\nan attack, the protocol will carry on with a randomly chosen key, which will\n",
                      "markdown": "`Preventing the attack in full requires some application level changes. In\nprotocols which know the expected length of the encrypted key, PK_Decryptor\nprovides the function `decrypt_or_random` which first generates a random fake\nkey, then decrypts the presented ciphertext, then in constant time either copies\nout the random key or the decrypted plaintext depending on if the ciphertext was\nvalid or not (valid padding and expected plaintext length). Then in the case of\nan attack, the protocol will carry on with a randomly chosen key, which will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 24,
                  "endLine": 94,
                  "endColumn": 31,
                  "snippet": {
                    "text": "oracle to perform iterative decryption of arbitrary RSA ciphertexts encrypted\nunder that key. This is the famous million message attack [MillionMsg].  A side\nchannel such as a difference in time taken to handle valid and invalid RSA\nciphertexts is enough to mount the attack [MillionMsgTiming].\n\nAs a first step, the PKCS v1.5 decoding operation runs without any\nconditional jumps or indexes, with the only variance in runtime being\n",
                    "rendered": {
                      "text": "oracle to perform iterative decryption of arbitrary RSA ciphertexts encrypted\nunder that key. This is the famous million message attack [MillionMsg].  A side\nchannel such as a difference in time taken to handle valid and invalid RSA\nciphertexts is enough to mount the attack [MillionMsgTiming].\n\nAs a first step, the PKCS v1.5 decoding operation runs without any\nconditional jumps or indexes, with the only variance in runtime being\n",
                      "markdown": "`oracle to perform iterative decryption of arbitrary RSA ciphertexts encrypted\nunder that key. This is the famous million message attack [MillionMsg].  A side\nchannel such as a difference in time taken to handle valid and invalid RSA\nciphertexts is enough to mount the attack [MillionMsgTiming].\n\nAs a first step, the PKCS v1.5 decoding operation runs without any\nconditional jumps or indexes, with the only variance in runtime being\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 31,
                  "endLine": 93,
                  "endColumn": 37,
                  "snippet": {
                    "text": "revealing any additional information), the attacker can use this behavior as an\noracle to perform iterative decryption of arbitrary RSA ciphertexts encrypted\nunder that key. This is the famous million message attack [MillionMsg].  A side\nchannel such as a difference in time taken to handle valid and invalid RSA\nciphertexts is enough to mount the attack [MillionMsgTiming].\n\nAs a first step, the PKCS v1.5 decoding operation runs without any\n",
                    "rendered": {
                      "text": "revealing any additional information), the attacker can use this behavior as an\noracle to perform iterative decryption of arbitrary RSA ciphertexts encrypted\nunder that key. This is the famous million message attack [MillionMsg].  A side\nchannel such as a difference in time taken to handle valid and invalid RSA\nciphertexts is enough to mount the attack [MillionMsgTiming].\n\nAs a first step, the PKCS v1.5 decoding operation runs without any\n",
                      "markdown": "`revealing any additional information), the attacker can use this behavior as an\noracle to perform iterative decryption of arbitrary RSA ciphertexts encrypted\nunder that key. This is the famous million message attack [MillionMsg].  A side\nchannel such as a difference in time taken to handle valid and invalid RSA\nciphertexts is enough to mount the attack [MillionMsgTiming].\n\nAs a first step, the PKCS v1.5 decoding operation runs without any\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 80,
                  "endLine": 73,
                  "endColumn": 5,
                  "snippet": {
                    "text": "T parameters. The GCD computation, LCM computations, modulo,\nand inversion of ``q`` modulo ``p`` are all done via constant time algorithms.\nAn additional inversion, of ``e`` modulo ``phi(n)``, is also required. This one\nis somewhat more complicated because ``phi(n)`` is even and the primary constant\ntime algorithm for inversions only works for odd moduli. This is worked around\nby a technique based on the CRT - ``phi(n)`` is factored to ``2**e * z`` for\nsome ``e`` > 1 and some odd ``z``. Then ``e`` is inverted modulo ``2**e`` and\nalso modulo ``z``. The inversion modulo ``2**e`` is done via a speciali",
                    "rendered": {
                      "text": "T parameters. The GCD computation, LCM computations, modulo,\nand inversion of ``q`` modulo ``p`` are all done via constant time algorithms.\nAn additional inversion, of ``e`` modulo ``phi(n)``, is also required. This one\nis somewhat more complicated because ``phi(n)`` is even and the primary constant\ntime algorithm for inversions only works for odd moduli. This is worked around\nby a technique based on the CRT - ``phi(n)`` is factored to ``2**e * z`` for\nsome ``e`` > 1 and some odd ``z``. Then ``e`` is inverted modulo ``2**e`` and\nalso modulo ``z``. The inversion modulo ``2**e`` is done via a speciali",
                      "markdown": "`T parameters. The GCD computation, LCM computations, modulo,\nand inversion of ``q`` modulo ``p`` are all done via constant time algorithms.\nAn additional inversion, of ``e`` modulo ``phi(n)``, is also required. This one\nis somewhat more complicated because ``phi(n)`` is even and the primary constant\ntime algorithm for inversions only works for odd moduli. This is worked around\nby a technique based on the CRT - ``phi(n)`` is factored to ``2**e * z`` for\nsome ``e`` > 1 and some odd ``z``. Then ``e`` is inverted modulo ``2**e`` and\nalso modulo ``z``. The inversion modulo ``2**e`` is done via a speciali`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/side_channels.rst"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 61,
                  "endLine": 70,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\nRSA key generation is also prone to side channel vulnerabilities due to the need\nto calculate the CRT parameters. The GCD computation, LCM computations, modulo,\nand inversion of ``q`` modulo ``p`` are all done via constant time algorithms.\nAn additional inversion, of ``e`` modulo ``phi(n)``, is also required. This one\nis somewhat more complicated because ``phi(n)`` is even and the primary constant\ntime algorithm for inversions only works for odd moduli. This is worked around\n",
                    "rendered": {
                      "text": "\nRSA key generation is also prone to side channel vulnerabilities due to the need\nto calculate the CRT parameters. The GCD computation, LCM computations, modulo,\nand inversion of ``q`` modulo ``p`` are all done via constant time algorithms.\nAn additional inversion, of ``e`` modulo ``phi(n)``, is also required. This one\nis somewhat more complicated because ``phi(n)`` is even and the primary constant\ntime algorithm for inversions only works for odd moduli. This is worked around\n",
                      "markdown": "`\nRSA key generation is also prone to side channel vulnerabilities due to the need\nto calculate the CRT parameters. The GCD computation, LCM computations, modulo,\nand inversion of ``q`` modulo ``p`` are all done via constant time algorithms.\nAn additional inversion, of ``e`` modulo ``phi(n)``, is also required. This one\nis somewhat more complicated because ``phi(n)`` is even and the primary constant\ntime algorithm for inversions only works for odd moduli. This is worked around\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 65,
                  "endLine": 519,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBotan usually links in several different system libraries (such as\n``librt`` or ``libz``), depending on which modules are configured at\ncompile time. In many environments, particularly ones using static\nlibraries, an application has to link against the same libraries as\nBotan for the linking step to succeed. But how does it figure out what\nlibraries it *is* linked against?\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBotan usually links in several different system libraries (such as\n``librt`` or ``libz``), depending on which modules are configured at\ncompile time. In many environments, particularly ones using static\nlibraries, an application has to link against the same libraries as\nBotan for the linking step to succeed. But how does it figure out what\nlibraries it *is* linked against?\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBotan usually links in several different system libraries (such as\n``librt`` or ``libz``), depending on which modules are configured at\ncompile time. In many environments, particularly ones using static\nlibraries, an application has to link against the same libraries as\nBotan for the linking step to succeed. But how does it figure out what\nlibraries it *is* linked against?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 47,
                  "endLine": 465,
                  "endColumn": 51,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBotan uses compile-time flags to enable or disable use of certain operating\nspecific functions. You can also override these at build time if desired.\n\nThe default feature flags are given in the files in ``src/build-data/os`` in the\n``target_features`` block. For example Linux defines flags like ``getrandom``,\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBotan uses compile-time flags to enable or disable use of certain operating\nspecific functions. You can also override these at build time if desired.\n\nThe default feature flags are given in the files in ``src/build-data/os`` in the\n``target_features`` block. For example Linux defines flags like ``getrandom``,\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBotan uses compile-time flags to enable or disable use of certain operating\nspecific functions. You can also override these at build time if desired.\n\nThe default feature flags are given in the files in ``src/build-data/os`` in the\n``target_features`` block. For example Linux defines flags like ``getrandom``,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 49,
                  "endLine": 408,
                  "endColumn": 53,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCurrently ``configure.py`` cannot detect if external libraries are\navailable, so using them is controlled explicitly at build time\nby the user using\n\n - ``--with-bzip2`` enables the filters providing bzip2 compression and\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCurrently ``configure.py`` cannot detect if external libraries are\navailable, so using them is controlled explicitly at build time\nby the user using\n\n - ``--with-bzip2`` enables the filters providing bzip2 compression and\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCurrently ``configure.py`` cannot detect if external libraries are\navailable, so using them is controlled explicitly at build time\nby the user using\n\n - ``--with-bzip2`` enables the filters providing bzip2 compression and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 25,
                  "endLine": 362,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\nThere are two documentation options available, Sphinx and Doxygen.\nSphinx will be used if ``sphinx-build`` is detected in the PATH, or if\n``--with-sphinx`` is used at configure time. Doxygen is only enabled\nif ``--with-doxygen`` is used. Both are generated by the makefile\ntarget ``docs``.\n\n",
                    "rendered": {
                      "text": "\nThere are two documentation options available, Sphinx and Doxygen.\nSphinx will be used if ``sphinx-build`` is detected in the PATH, or if\n``--with-sphinx`` is used at configure time. Doxygen is only enabled\nif ``--with-doxygen`` is used. Both are generated by the makefile\ntarget ``docs``.\n\n",
                      "markdown": "`\nThere are two documentation options available, Sphinx and Doxygen.\nSphinx will be used if ``sphinx-build`` is detected in the PATH, or if\n``--with-sphinx`` is used at configure time. Doxygen is only enabled\nif ``--with-doxygen`` is used. Both are generated by the makefile\ntarget ``docs``.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 7,
                  "endLine": 87,
                  "endColumn": 16,
                  "snippet": {
                    "text": "still enable and use such modules using ``--enable-modules=MODS`` or using\n``--enable-experimental-features`` to enable all experimental features.\n\nYou can control which algorithms and modules are built using the\noptions ``--enable-modules=MODS`` and ``--disable-modules=MODS``, for\ninstance ``--enable-modules=zlib`` and ``--disable-modules=xtea,idea``.\nModules not listed on the command line will simply be loaded if needed\n",
                    "rendered": {
                      "text": "still enable and use such modules using ``--enable-modules=MODS`` or using\n``--enable-experimental-features`` to enable all experimental features.\n\nYou can control which algorithms and modules are built using the\noptions ``--enable-modules=MODS`` and ``--disable-modules=MODS``, for\ninstance ``--enable-modules=zlib`` and ``--disable-modules=xtea,idea``.\nModules not listed on the command line will simply be loaded if needed\n",
                      "markdown": "`still enable and use such modules using ``--enable-modules=MODS`` or using\n``--enable-experimental-features`` to enable all experimental features.\n\nYou can control which algorithms and modules are built using the\noptions ``--enable-modules=MODS`` and ``--disable-modules=MODS``, for\ninstance ``--enable-modules=zlib`` and ``--disable-modules=xtea,idea``.\nModules not listed on the command line will simply be loaded if needed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 45,
                  "endLine": 60,
                  "endColumn": 49,
                  "snippet": {
                    "text": "kernel on a 64-bit CPU will generally not like 64-bit code.\n\nBy default the script tries to figure out what will work on your\nsystem, and use that. It will print a display at the end showing which\nmodules have and have not been enabled. For instance on one system\nwe might see lines like::\n\n",
                    "rendered": {
                      "text": "kernel on a 64-bit CPU will generally not like 64-bit code.\n\nBy default the script tries to figure out what will work on your\nsystem, and use that. It will print a display at the end showing which\nmodules have and have not been enabled. For instance on one system\nwe might see lines like::\n\n",
                      "markdown": "`kernel on a 64-bit CPU will generally not like 64-bit code.\n\nBy default the script tries to figure out what will work on your\nsystem, and use that. It will print a display at the end showing which\nmodules have and have not been enabled. For instance on one system\nwe might see lines like::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 1068,
                  "startColumn": 12,
                  "endLine": 1068,
                  "endColumn": 21,
                  "snippet": {
                    "text": "``--with-sqlite3``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nEnable using sqlite3 for data storage\n\n``--with-tpm``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "``--with-sqlite3``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nEnable using sqlite3 for data storage\n\n``--with-tpm``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "```--with-sqlite3``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nEnable using sqlite3 for data storage\n\n``--with-tpm``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 9,
                  "endLine": 616,
                  "endColumn": 17,
                  "snippet": {
                    "text": "ChaCha20Poly1305 ciphersuites. To enable these, add ``chacha20poly1305``.\n\n\nConfigure Script Options\n---------------------------\n\n``--cpu=CPU``\n",
                    "rendered": {
                      "text": "ChaCha20Poly1305 ciphersuites. To enable these, add ``chacha20poly1305``.\n\n\nConfigure Script Options\n---------------------------\n\n``--cpu=CPU``\n",
                      "markdown": "`ChaCha20Poly1305 ciphersuites. To enable these, add ``chacha20poly1305``.\n\n\nConfigure Script Options\n---------------------------\n\n``--cpu=CPU``\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 3,
                  "endLine": 587,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Many developers wish to configure a minimized build which contains only the\nspecific features their application will use. In general this is straighforward:\nuse ``--minimized-build`` plus ``--enable-modules=`` to enable the specific modules\nyou wish to use. Any such configurations should build and pass the tests; if you\nencounter a case where it doesn't please file an issue.\n\nThe only trick is knowing which features you want to enable. The most common\n",
                    "rendered": {
                      "text": "Many developers wish to configure a minimized build which contains only the\nspecific features their application will use. In general this is straighforward:\nuse ``--minimized-build`` plus ``--enable-modules=`` to enable the specific modules\nyou wish to use. Any such configurations should build and pass the tests; if you\nencounter a case where it doesn't please file an issue.\n\nThe only trick is knowing which features you want to enable. The most common\n",
                      "markdown": "`Many developers wish to configure a minimized build which contains only the\nspecific features their application will use. In general this is straighforward:\nuse ``--minimized-build`` plus ``--enable-modules=`` to enable the specific modules\nyou wish to use. Any such configurations should build and pass the tests; if you\nencounter a case where it doesn't please file an issue.\n\nThe only trick is knowing which features you want to enable. The most common\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 15,
                  "endLine": 584,
                  "endColumn": 21,
                  "snippet": {
                    "text": "Minimized Builds\n--------------------\n\nMany developers wish to configure a minimized build which contains only the\nspecific features their application will use. In general this is straighforward:\nuse ``--minimized-build`` plus ``--enable-modules=`` to enable the specific modules\nyou wish to use. Any such configurations should build and pass the tests; if you\n",
                    "rendered": {
                      "text": "Minimized Builds\n--------------------\n\nMany developers wish to configure a minimized build which contains only the\nspecific features their application will use. In general this is straighforward:\nuse ``--minimized-build`` plus ``--enable-modules=`` to enable the specific modules\nyou wish to use. Any such configurations should build and pass the tests; if you\n",
                      "markdown": "`Minimized Builds\n--------------------\n\nMany developers wish to configure a minimized build which contains only the\nspecific features their application will use. In general this is straighforward:\nuse ``--minimized-build`` plus ``--enable-modules=`` to enable the specific modules\nyou wish to use. Any such configurations should build and pass the tests; if you\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 494,
                  "startColumn": 33,
                  "endLine": 494,
                  "endColumn": 41,
                  "snippet": {
                    "text": "There are some configuration parameters which you may want to tweak\nbefore building the library. These can be found in ``build.h``. This\nfile is overwritten every time the configure script is run (and does\nnot exist until after you run the script for the first time).\n\nAlso included in ``build/build.h`` are macros which let applications\ncheck which features are included in the current version of the\n",
                    "rendered": {
                      "text": "There are some configuration parameters which you may want to tweak\nbefore building the library. These can be found in ``build.h``. This\nfile is overwritten every time the configure script is run (and does\nnot exist until after you run the script for the first time).\n\nAlso included in ``build/build.h`` are macros which let applications\ncheck which features are included in the current version of the\n",
                      "markdown": "`There are some configuration parameters which you may want to tweak\nbefore building the library. These can be found in ``build.h``. This\nfile is overwritten every time the configure script is run (and does\nnot exist until after you run the script for the first time).\n\nAlso included in ``build/build.h`` are macros which let applications\ncheck which features are included in the current version of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 44,
                  "endLine": 493,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\nThere are some configuration parameters which you may want to tweak\nbefore building the library. These can be found in ``build.h``. This\nfile is overwritten every time the configure script is run (and does\nnot exist until after you run the script for the first time).\n\nAlso included in ``build/build.h`` are macros which let applications\n",
                    "rendered": {
                      "text": "\nThere are some configuration parameters which you may want to tweak\nbefore building the library. These can be found in ``build.h``. This\nfile is overwritten every time the configure script is run (and does\nnot exist until after you run the script for the first time).\n\nAlso included in ``build/build.h`` are macros which let applications\n",
                      "markdown": "`\nThere are some configuration parameters which you may want to tweak\nbefore building the library. These can be found in ``build.h``. This\nfile is overwritten every time the configure script is run (and does\nnot exist until after you run the script for the first time).\n\nAlso included in ``build/build.h`` are macros which let applications\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 25,
                  "endLine": 493,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nThere are some configuration parameters which you may want to tweak\nbefore building the library. These can be found in ``build.h``. This\nfile is overwritten every time the configure script is run (and does\nnot exist until after you run the script for the first time).\n\nAlso included in ``build/build.h`` are macros which let applications\n",
                    "rendered": {
                      "text": "\nThere are some configuration parameters which you may want to tweak\nbefore building the library. These can be found in ``build.h``. This\nfile is overwritten every time the configure script is run (and does\nnot exist until after you run the script for the first time).\n\nAlso included in ``build/build.h`` are macros which let applications\n",
                      "markdown": "`\nThere are some configuration parameters which you may want to tweak\nbefore building the library. These can be found in ``build.h``. This\nfile is overwritten every time the configure script is run (and does\nnot exist until after you run the script for the first time).\n\nAlso included in ``build/build.h`` are macros which let applications\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 56,
                  "endLine": 465,
                  "endColumn": 62,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBotan uses compile-time flags to enable or disable use of certain operating\nspecific functions. You can also override these at build time if desired.\n\nThe default feature flags are given in the files in ``src/build-data/os`` in the\n``target_features`` block. For example Linux defines flags like ``getrandom``,\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBotan uses compile-time flags to enable or disable use of certain operating\nspecific functions. You can also override these at build time if desired.\n\nThe default feature flags are given in the files in ``src/build-data/os`` in the\n``target_features`` block. For example Linux defines flags like ``getrandom``,\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBotan uses compile-time flags to enable or disable use of certain operating\nspecific functions. You can also override these at build time if desired.\n\nThe default feature flags are given in the files in ``src/build-data/os`` in the\n``target_features`` block. For example Linux defines flags like ``getrandom``,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 35,
                  "endLine": 420,
                  "endColumn": 44,
                  "snippet": {
                    "text": " - ``--with-lzma`` enables the filters providing lzma compression and\n   decompression. Requires the lzma development libraries to be installed.\n\n - ``--with-sqlite3`` enables using sqlite3 databases in various contexts\n   (TLS session cache, PSK database, etc).\n\n - ``--with-tpm`` adds support for using TPM hardware via the TrouSerS library.\n",
                    "rendered": {
                      "text": " - ``--with-lzma`` enables the filters providing lzma compression and\n   decompression. Requires the lzma development libraries to be installed.\n\n - ``--with-sqlite3`` enables using sqlite3 databases in various contexts\n   (TLS session cache, PSK database, etc).\n\n - ``--with-tpm`` adds support for using TPM hardware via the TrouSerS library.\n",
                      "markdown": "` - ``--with-lzma`` enables the filters providing lzma compression and\n   decompression. Requires the lzma development libraries to be installed.\n\n - ``--with-sqlite3`` enables using sqlite3 databases in various contexts\n   (TLS session cache, PSK database, etc).\n\n - ``--with-tpm`` adds support for using TPM hardware via the TrouSerS library.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 58,
                  "endLine": 409,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCurrently ``configure.py`` cannot detect if external libraries are\navailable, so using them is controlled explicitly at build time\nby the user using\n\n - ``--with-bzip2`` enables the filters providing bzip2 compression and\n   decompression. Requires the bzip2 development libraries to be installed.\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCurrently ``configure.py`` cannot detect if external libraries are\navailable, so using them is controlled explicitly at build time\nby the user using\n\n - ``--with-bzip2`` enables the filters providing bzip2 compression and\n   decompression. Requires the bzip2 development libraries to be installed.\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCurrently ``configure.py`` cannot detect if external libraries are\navailable, so using them is controlled explicitly at build time\nby the user using\n\n - ``--with-bzip2`` enables the filters providing bzip2 compression and\n   decompression. Requires the bzip2 development libraries to be installed.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 24,
                  "endLine": 398,
                  "endColumn": 30,
                  "snippet": {
                    "text": "You can also build the library using Botan's build system (as normal) but\nutilizing the amalgamation instead of the individual source files by running\nsomething like ``./configure.py --amalgamation && make``. This is essentially a\nvery simple form of link time optimization; because the entire library source is\nvisible to the compiler, it has more opportunities for interprocedural\noptimizations.  Additionally (assuming you are not making use of a compiler\ncache such as ``ccache`` or ``sccache``) amalgamation builds usually have\n",
                    "rendered": {
                      "text": "You can also build the library using Botan's build system (as normal) but\nutilizing the amalgamation instead of the individual source files by running\nsomething like ``./configure.py --amalgamation && make``. This is essentially a\nvery simple form of link time optimization; because the entire library source is\nvisible to the compiler, it has more opportunities for interprocedural\noptimizations.  Additionally (assuming you are not making use of a compiler\ncache such as ``ccache`` or ``sccache``) amalgamation builds usually have\n",
                      "markdown": "`You can also build the library using Botan's build system (as normal) but\nutilizing the amalgamation instead of the individual source files by running\nsomething like ``./configure.py --amalgamation && make``. This is essentially a\nvery simple form of link time optimization; because the entire library source is\nvisible to the compiler, it has more opportunities for interprocedural\noptimizations.  Additionally (assuming you are not making use of a compiler\ncache such as ``ccache`` or ``sccache``) amalgamation builds usually have\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 3,
                  "endLine": 319,
                  "endColumn": 11,
                  "snippet": {
                    "text": "^^^^^^^^^^^\n\nTo build android version, there is the possibility to use\nthe docker way::\n\n  sudo ANDROID_SDK_VER=29 ANDROID_ARCH=aarch64 src/scripts/docker-android.sh\n\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^\n\nTo build android version, there is the possibility to use\nthe docker way::\n\n  sudo ANDROID_SDK_VER=29 ANDROID_ARCH=aarch64 src/scripts/docker-android.sh\n\n",
                      "markdown": "`^^^^^^^^^^^\n\nTo build android version, there is the possibility to use\nthe docker way::\n\n  sudo ANDROID_SDK_VER=29 ANDROID_ARCH=aarch64 src/scripts/docker-android.sh\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 314,
                  "endLine": 316,
                  "snippet": {
                    "text": "\nIf you are building for mobile development consider restricting the build\nto only what you need (see :ref:`minimized_builds`)\n\nDocker\n^^^^^^^^^^^\n\nTo build android version, there is the possibility to use\nthe docker way::\n",
                    "rendered": {
                      "text": "\nIf you are building for mobile development consider restricting the build\nto only what you need (see :ref:`minimized_builds`)\n\nDocker\n^^^^^^^^^^^\n\nTo build android version, there is the possibility to use\nthe docker way::\n",
                      "markdown": "`\nIf you are building for mobile development consider restricting the build\nto only what you need (see :ref:`minimized_builds`)\n\nDocker\n^^^^^^^^^^^\n\nTo build android version, there is the possibility to use\nthe docker way::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 25,
                  "endLine": 243,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nWhen building your applications, all you have to do is tell the\ncompiler to look for both include files and library files in\n``C:\\botan``, and it will find both. Or you can move them to a\nplace where they will be in the default compiler search paths (consult\nyour documentation and/or local expert for details).\n\n",
                    "rendered": {
                      "text": "\nWhen building your applications, all you have to do is tell the\ncompiler to look for both include files and library files in\n``C:\\botan``, and it will find both. Or you can move them to a\nplace where they will be in the default compiler search paths (consult\nyour documentation and/or local expert for details).\n\n",
                      "markdown": "`\nWhen building your applications, all you have to do is tell the\ncompiler to look for both include files and library files in\n``C:\\botan``, and it will find both. Or you can move them to a\nplace where they will be in the default compiler search paths (consult\nyour documentation and/or local expert for details).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 19,
                  "endLine": 172,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n   $ make install\n\nOn Unix systems the script will default to using GCC; use ``--cc`` if\nyou want something else. For instance use ``--cc=clang`` for Clang.\n\nThe ``make install`` target has a default directory in which it will\n",
                    "rendered": {
                      "text": "\n   $ make install\n\nOn Unix systems the script will default to using GCC; use ``--cc`` if\nyou want something else. For instance use ``--cc=clang`` for Clang.\n\nThe ``make install`` target has a default directory in which it will\n",
                      "markdown": "`\n   $ make install\n\nOn Unix systems the script will default to using GCC; use ``--cc`` if\nyou want something else. For instance use ``--cc=clang`` for Clang.\n\nThe ``make install`` target has a default directory in which it will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 66,
                  "endLine": 69,
                  "endColumn": 75,
                  "snippet": {
                    "text": "   INFO: Skipping (incompatible OS): darwin_secrandom getentropy win32_stats\n   INFO: Skipping (incompatible compiler): aes_armv8 pmull sha1_armv8 sha2_32_armv8\n   INFO: Skipping (no enabled compression schemes): compression\n   INFO: Skipping (requires external dependency): boost bzip2 lzma sqlite3 tpm zlib\n\nThe ones that are skipped because they are require an external\ndependency have to be explicitly asked for, because they rely on third\n",
                    "rendered": {
                      "text": "   INFO: Skipping (incompatible OS): darwin_secrandom getentropy win32_stats\n   INFO: Skipping (incompatible compiler): aes_armv8 pmull sha1_armv8 sha2_32_armv8\n   INFO: Skipping (no enabled compression schemes): compression\n   INFO: Skipping (requires external dependency): boost bzip2 lzma sqlite3 tpm zlib\n\nThe ones that are skipped because they are require an external\ndependency have to be explicitly asked for, because they rely on third\n",
                      "markdown": "`   INFO: Skipping (incompatible OS): darwin_secrandom getentropy win32_stats\n   INFO: Skipping (incompatible compiler): aes_armv8 pmull sha1_armv8 sha2_32_armv8\n   INFO: Skipping (no enabled compression schemes): compression\n   INFO: Skipping (requires external dependency): boost bzip2 lzma sqlite3 tpm zlib\n\nThe ones that are skipped because they are require an external\ndependency have to be explicitly asked for, because they rely on third\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 14,
                  "endLine": 59,
                  "endColumn": 22,
                  "snippet": {
                    "text": "operating system knows how to handle 64-bit object code - a 32-bit\nkernel on a 64-bit CPU will generally not like 64-bit code.\n\nBy default the script tries to figure out what will work on your\nsystem, and use that. It will print a display at the end showing which\nmodules have and have not been enabled. For instance on one system\nwe might see lines like::\n",
                    "rendered": {
                      "text": "operating system knows how to handle 64-bit object code - a 32-bit\nkernel on a 64-bit CPU will generally not like 64-bit code.\n\nBy default the script tries to figure out what will work on your\nsystem, and use that. It will print a display at the end showing which\nmodules have and have not been enabled. For instance on one system\nwe might see lines like::\n",
                      "markdown": "`operating system knows how to handle 64-bit object code - a 32-bit\nkernel on a 64-bit CPU will generally not like 64-bit code.\n\nBy default the script tries to figure out what will work on your\nsystem, and use that. It will print a display at the end showing which\nmodules have and have not been enabled. For instance on one system\nwe might see lines like::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 62,
                  "endLine": 53,
                  "snippet": {
                    "text": "You can override this process by passing the options ``--cc``,\n``--os``, and ``--cpu``.\n\nYou can pass basically anything reasonable with ``--cpu``: the script\nknows about a large number of different architectures, their\nsub-models, and common aliases for them. You should only select the\n64-bit version of a CPU (such as \"sparc64\" or \"mips64\") if your\noperating system knows how to handle 64-bit object code - a 32-bit\n",
                    "rendered": {
                      "text": "You can override this process by passing the options ``--cc``,\n``--os``, and ``--cpu``.\n\nYou can pass basically anything reasonable with ``--cpu``: the script\nknows about a large number of different architectures, their\nsub-models, and common aliases for them. You should only select the\n64-bit version of a CPU (such as \"sparc64\" or \"mips64\") if your\noperating system knows how to handle 64-bit object code - a 32-bit\n",
                      "markdown": "`You can override this process by passing the options ``--cc``,\n``--os``, and ``--cpu``.\n\nYou can pass basically anything reasonable with ``--cpu``: the script\nknows about a large number of different architectures, their\nsub-models, and common aliases for them. You should only select the\n64-bit version of a CPU (such as \"sparc64\" or \"mips64\") if your\noperating system knows how to handle 64-bit object code - a 32-bit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 3,
                  "endLine": 47,
                  "endColumn": 11,
                  "snippet": {
                    "text": "building everything. This script should run under a vanilla install of\nPython 3.x.\n\nThe script will attempt to guess what kind of system you are trying to\ncompile for (and will print messages telling you what it guessed).\nYou can override this process by passing the options ``--cc``,\n``--os``, and ``--cpu``.\n",
                    "rendered": {
                      "text": "building everything. This script should run under a vanilla install of\nPython 3.x.\n\nThe script will attempt to guess what kind of system you are trying to\ncompile for (and will print messages telling you what it guessed).\nYou can override this process by passing the options ``--cc``,\n``--os``, and ``--cpu``.\n",
                      "markdown": "`building everything. This script should run under a vanilla install of\nPython 3.x.\n\nThe script will attempt to guess what kind of system you are trying to\ncompile for (and will print messages telling you what it guessed).\nYou can override this process by passing the options ``--cc``,\n``--os``, and ``--cpu``.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 25,
                  "endLine": 44,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nThe first step is to run ``configure.py``, which is a Python script\nthat creates various directories, config files, and a Makefile for\nbuilding everything. This script should run under a vanilla install of\nPython 3.x.\n\nThe script will attempt to guess what kind of system you are trying to\n",
                    "rendered": {
                      "text": "\nThe first step is to run ``configure.py``, which is a Python script\nthat creates various directories, config files, and a Makefile for\nbuilding everything. This script should run under a vanilla install of\nPython 3.x.\n\nThe script will attempt to guess what kind of system you are trying to\n",
                      "markdown": "`\nThe first step is to run ``configure.py``, which is a Python script\nthat creates various directories, config files, and a Makefile for\nbuilding everything. This script should run under a vanilla install of\nPython 3.x.\n\nThe script will attempt to guess what kind of system you are trying to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 60,
                  "endLine": 43,
                  "snippet": {
                    "text": "Configuring the Build\n---------------------------------\n\nThe first step is to run ``configure.py``, which is a Python script\nthat creates various directories, config files, and a Makefile for\nbuilding everything. This script should run under a vanilla install of\nPython 3.x.\n\n",
                    "rendered": {
                      "text": "Configuring the Build\n---------------------------------\n\nThe first step is to run ``configure.py``, which is a Python script\nthat creates various directories, config files, and a Makefile for\nbuilding everything. This script should run under a vanilla install of\nPython 3.x.\n\n",
                      "markdown": "`Configuring the Build\n---------------------------------\n\nThe first step is to run ``configure.py``, which is a Python script\nthat creates various directories, config files, and a Makefile for\nbuilding everything. This script should run under a vanilla install of\nPython 3.x.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/building.rst"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 66,
                  "endLine": 33,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  $ make install\n\nOr using ``nmake``, if you're compiling on Windows with Visual C++. On\nplatforms that do not understand the '#!' convention for beginning\nscript files, or that have Python installed in an unusual spot, you\nmight need to prefix the ``configure.py`` command with ``python3`` or\n``/path/to/python3``::\n\n",
                    "rendered": {
                      "text": "  $ make install\n\nOr using ``nmake``, if you're compiling on Windows with Visual C++. On\nplatforms that do not understand the '#!' convention for beginning\nscript files, or that have Python installed in an unusual spot, you\nmight need to prefix the ``configure.py`` command with ``python3`` or\n``/path/to/python3``::\n\n",
                      "markdown": "`  $ make install\n\nOr using ``nmake``, if you're compiling on Windows with Visual C++. On\nplatforms that do not understand the '#!' convention for beginning\nscript files, or that have Python installed in an unusual spot, you\nmight need to prefix the ``configure.py`` command with ``python3`` or\n``/path/to/python3``::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/srp.rst"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 21,
                  "endLine": 72,
                  "endColumn": 29,
                  "snippet": {
                    "text": "               RandomNumberGenerator& rng)\n\n    The client receives these parameters from the server, except for\n    the username and password which are provided by the user. The\n    parameter B is the output of `step1`.\n\n    The client agreement step outputs a shared symmetric key along\n",
                    "rendered": {
                      "text": "               RandomNumberGenerator& rng)\n\n    The client receives these parameters from the server, except for\n    the username and password which are provided by the user. The\n    parameter B is the output of `step1`.\n\n    The client agreement step outputs a shared symmetric key along\n",
                      "markdown": "`               RandomNumberGenerator& rng)\n\n    The client receives these parameters from the server, except for\n    the username and password which are provided by the user. The\n    parameter B is the output of `step1`.\n\n    The client agreement step outputs a shared symmetric key along\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/srp.rst"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 34,
                  "endLine": 64,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n.. cpp:function:: std::pair<BigInt,SymmetricKey> srp6_client_agree( \\\n               const std::string& username, \\\n               const std::string& password, \\\n               const std::string& group_id, \\\n               const std::string& hash_id, \\\n               const std::vector<uint8_t>& salt, \\\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: std::pair<BigInt,SymmetricKey> srp6_client_agree( \\\n               const std::string& username, \\\n               const std::string& password, \\\n               const std::string& group_id, \\\n               const std::string& hash_id, \\\n               const std::vector<uint8_t>& salt, \\\n",
                      "markdown": "`\n.. cpp:function:: std::pair<BigInt,SymmetricKey> srp6_client_agree( \\\n               const std::string& username, \\\n               const std::string& password, \\\n               const std::string& group_id, \\\n               const std::string& hash_id, \\\n               const std::vector<uint8_t>& salt, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/srp.rst"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 65,
                  "endLine": 57,
                  "endColumn": 73,
                  "snippet": {
                    "text": "      Takes the parameter A generated by srp6_client_agree,\n      and return the shared secret key.\n\n      In the event of an impersonation attack (or wrong username/password, etc)\n      no error occurs, but the key returned will be different on the two sides.\n      The two sides must verify each other, for example by using the shared\n      secret to key an HMAC and then exchanging authenticated messages.\n",
                    "rendered": {
                      "text": "      Takes the parameter A generated by srp6_client_agree,\n      and return the shared secret key.\n\n      In the event of an impersonation attack (or wrong username/password, etc)\n      no error occurs, but the key returned will be different on the two sides.\n      The two sides must verify each other, for example by using the shared\n      secret to key an HMAC and then exchanging authenticated messages.\n",
                      "markdown": "`      Takes the parameter A generated by srp6_client_agree,\n      and return the shared secret key.\n\n      In the event of an impersonation attack (or wrong username/password, etc)\n      no error occurs, but the key returned will be different on the two sides.\n      The two sides must verify each other, for example by using the shared\n      secret to key an HMAC and then exchanging authenticated messages.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/srp.rst"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 27,
                  "endLine": 35,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    Generates a new verifier using the specified password and salt.\n    This is stored by the server. The salt must also be stored. Later,\n    the given username and password are used to by the client during\n    the key agreement step.\n\n.. cpp:function:: std::string srp6_group_identifier( \\\n",
                    "rendered": {
                      "text": "\n    Generates a new verifier using the specified password and salt.\n    This is stored by the server. The salt must also be stored. Later,\n    the given username and password are used to by the client during\n    the key agreement step.\n\n.. cpp:function:: std::string srp6_group_identifier( \\\n",
                      "markdown": "`\n    Generates a new verifier using the specified password and salt.\n    This is stored by the server. The salt must also be stored. Later,\n    the given username and password are used to by the client during\n    the key agreement step.\n\n.. cpp:function:: std::string srp6_group_identifier( \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/srp.rst"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 49,
                  "endLine": 33,
                  "endColumn": 57,
                  "snippet": {
                    "text": "          const std::string& group_id, \\\n          const std::string& hash_id)\n\n    Generates a new verifier using the specified password and salt.\n    This is stored by the server. The salt must also be stored. Later,\n    the given username and password are used to by the client during\n    the key agreement step.\n",
                    "rendered": {
                      "text": "          const std::string& group_id, \\\n          const std::string& hash_id)\n\n    Generates a new verifier using the specified password and salt.\n    This is stored by the server. The salt must also be stored. Later,\n    the given username and password are used to by the client during\n    the key agreement step.\n",
                      "markdown": "`          const std::string& group_id, \\\n          const std::string& hash_id)\n\n    Generates a new verifier using the specified password and salt.\n    This is stored by the server. The salt must also be stored. Later,\n    the given username and password are used to by the client during\n    the key agreement step.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/srp.rst"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 29,
                  "endLine": 28,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n.. cpp:function:: BigInt generate_srp6_verifier( \\\n          const std::string& username, \\\n          const std::string& password, \\\n          const std::vector<uint8_t>& salt, \\\n          const std::string& group_id, \\\n          const std::string& hash_id)\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: BigInt generate_srp6_verifier( \\\n          const std::string& username, \\\n          const std::string& password, \\\n          const std::vector<uint8_t>& salt, \\\n          const std::string& group_id, \\\n          const std::string& hash_id)\n",
                      "markdown": "`\n.. cpp:function:: BigInt generate_srp6_verifier( \\\n          const std::string& username, \\\n          const std::string& password, \\\n          const std::vector<uint8_t>& salt, \\\n          const std::string& group_id, \\\n          const std::string& hash_id)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/srp.rst"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 43,
                  "endLine": 24,
                  "endColumn": 51,
                  "snippet": {
                    "text": "     While knowledge of the verifier does not easily allow an attacker\n     to get the raw password, they could still use the verifier to\n     impersonate the server to the client, so verifiers should be\n     protected as carefully as a plaintext password would be.\n\n.. cpp:function:: BigInt generate_srp6_verifier( \\\n          const std::string& username, \\\n",
                    "rendered": {
                      "text": "     While knowledge of the verifier does not easily allow an attacker\n     to get the raw password, they could still use the verifier to\n     impersonate the server to the client, so verifiers should be\n     protected as carefully as a plaintext password would be.\n\n.. cpp:function:: BigInt generate_srp6_verifier( \\\n          const std::string& username, \\\n",
                      "markdown": "`     While knowledge of the verifier does not easily allow an attacker\n     to get the raw password, they could still use the verifier to\n     impersonate the server to the client, so verifiers should be\n     protected as carefully as a plaintext password would be.\n\n.. cpp:function:: BigInt generate_srp6_verifier( \\\n          const std::string& username, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/srp.rst"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 20,
                  "endLine": 22,
                  "endColumn": 28,
                  "snippet": {
                    "text": ".. warning::\n\n     While knowledge of the verifier does not easily allow an attacker\n     to get the raw password, they could still use the verifier to\n     impersonate the server to the client, so verifiers should be\n     protected as carefully as a plaintext password would be.\n\n",
                    "rendered": {
                      "text": ".. warning::\n\n     While knowledge of the verifier does not easily allow an attacker\n     to get the raw password, they could still use the verifier to\n     impersonate the server to the client, so verifiers should be\n     protected as carefully as a plaintext password would be.\n\n",
                      "markdown": "`.. warning::\n\n     While knowledge of the verifier does not easily allow an attacker\n     to get the raw password, they could still use the verifier to\n     impersonate the server to the client, so verifiers should be\n     protected as carefully as a plaintext password would be.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/srp.rst"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 46,
                  "endLine": 9,
                  "endColumn": 54,
                  "snippet": {
                    "text": "key exchange protocol in ``srp6.h``.\n\nA SRP client provides what is called a SRP *verifier* to the server.\nThis verifier is based on a password, but the password cannot be\neasily derived from the verifier (however brute force attacks are\npossible). Later, the client and server can perform an SRP exchange,\nwhich results in a shared secret key. This key can be used for mutual\n",
                    "rendered": {
                      "text": "key exchange protocol in ``srp6.h``.\n\nA SRP client provides what is called a SRP *verifier* to the server.\nThis verifier is based on a password, but the password cannot be\neasily derived from the verifier (however brute force attacks are\npossible). Later, the client and server can perform an SRP exchange,\nwhich results in a shared secret key. This key can be used for mutual\n",
                      "markdown": "`key exchange protocol in ``srp6.h``.\n\nA SRP client provides what is called a SRP *verifier* to the server.\nThis verifier is based on a password, but the password cannot be\neasily derived from the verifier (however brute force attacks are\npossible). Later, the client and server can perform an SRP exchange,\nwhich results in a shared secret key. This key can be used for mutual\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/srp.rst"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 28,
                  "endLine": 9,
                  "endColumn": 36,
                  "snippet": {
                    "text": "key exchange protocol in ``srp6.h``.\n\nA SRP client provides what is called a SRP *verifier* to the server.\nThis verifier is based on a password, but the password cannot be\neasily derived from the verifier (however brute force attacks are\npossible). Later, the client and server can perform an SRP exchange,\nwhich results in a shared secret key. This key can be used for mutual\n",
                    "rendered": {
                      "text": "key exchange protocol in ``srp6.h``.\n\nA SRP client provides what is called a SRP *verifier* to the server.\nThis verifier is based on a password, but the password cannot be\neasily derived from the verifier (however brute force attacks are\npossible). Later, the client and server can perform an SRP exchange,\nwhich results in a shared secret key. This key can be used for mutual\n",
                      "markdown": "`key exchange protocol in ``srp6.h``.\n\nA SRP client provides what is called a SRP *verifier* to the server.\nThis verifier is based on a password, but the password cannot be\neasily derived from the verifier (however brute force attacks are\npossible). Later, the client and server can perform an SRP exchange,\nwhich results in a shared secret key. This key can be used for mutual\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/srp.rst"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 48,
                  "endLine": 5,
                  "endColumn": 56,
                  "snippet": {
                    "text": "========================================\n\nThe library contains an implementation of the\n`SRP6-a <http://srp.stanford.edu/design.html>`_ password authenticated\nkey exchange protocol in ``srp6.h``.\n\nA SRP client provides what is called a SRP *verifier* to the server.\n",
                    "rendered": {
                      "text": "========================================\n\nThe library contains an implementation of the\n`SRP6-a <http://srp.stanford.edu/design.html>`_ password authenticated\nkey exchange protocol in ``srp6.h``.\n\nA SRP client provides what is called a SRP *verifier* to the server.\n",
                      "markdown": "`========================================\n\nThe library contains an implementation of the\n`SRP6-a <http://srp.stanford.edu/design.html>`_ password authenticated\nkey exchange protocol in ``srp6.h``.\n\nA SRP client provides what is called a SRP *verifier* to the server.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/srp.rst"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 1,
                  "endColumn": 22,
                  "snippet": {
                    "text": "Secure Remote Password\n========================================\n\nThe library contains an implementation of the\n",
                    "rendered": {
                      "text": "Secure Remote Password\n========================================\n\nThe library contains an implementation of the\n",
                      "markdown": "`Secure Remote Password\n========================================\n\nThe library contains an implementation of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 674,
                  "startColumn": 64,
                  "endLine": 674,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\nLastly, ``Hex_Encoder`` takes an argument of type ``Case``, which can\nbe ``Uppercase`` or ``Lowercase`` (default is ``Uppercase``). This\nspecifies what case the characters A-F should be output as. The base64\nencoder has no such option, because it uses both upper and lower case\nletters for its output.\n\n",
                    "rendered": {
                      "text": "\nLastly, ``Hex_Encoder`` takes an argument of type ``Case``, which can\nbe ``Uppercase`` or ``Lowercase`` (default is ``Uppercase``). This\nspecifies what case the characters A-F should be output as. The base64\nencoder has no such option, because it uses both upper and lower case\nletters for its output.\n\n",
                      "markdown": "`\nLastly, ``Hex_Encoder`` takes an argument of type ``Case``, which can\nbe ``Uppercase`` or ``Lowercase`` (default is ``Uppercase``). This\nspecifies what case the characters A-F should be output as. The base64\nencoder has no such option, because it uses both upper and lower case\nletters for its output.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 17,
                  "endLine": 654,
                  "endColumn": 23,
                  "snippet": {
                    "text": "Often you want your data to be in some form of text (for sending over\nchannels that aren't 8-bit clean, printing it, etc). The filters\n``Hex_Encoder`` and ``Base64_Encoder`` will convert arbitrary binary\ndata into hex or base64 formats. Not surprisingly, you can use\n``Hex_Decoder`` and ``Base64_Decoder`` to convert it back into its\noriginal form.\n\n",
                    "rendered": {
                      "text": "Often you want your data to be in some form of text (for sending over\nchannels that aren't 8-bit clean, printing it, etc). The filters\n``Hex_Encoder`` and ``Base64_Encoder`` will convert arbitrary binary\ndata into hex or base64 formats. Not surprisingly, you can use\n``Hex_Decoder`` and ``Base64_Decoder`` to convert it back into its\noriginal form.\n\n",
                      "markdown": "`Often you want your data to be in some form of text (for sending over\nchannels that aren't 8-bit clean, printing it, etc). The filters\n``Hex_Encoder`` and ``Base64_Encoder`` will convert arbitrary binary\ndata into hex or base64 formats. Not surprisingly, you can use\n``Hex_Decoder`` and ``Base64_Decoder`` to convert it back into its\noriginal form.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 39,
                  "endLine": 30,
                  "endColumn": 45,
                  "snippet": {
                    "text": "familiar with the Unix shell environment, this design will sound quite\nfamiliar.\n\nHere is an example that uses a pipe to base64 encode some strings::\n\n  Pipe pipe(new Base64_Encoder); // pipe owns the pointer\n  pipe.start_msg();\n",
                    "rendered": {
                      "text": "familiar with the Unix shell environment, this design will sound quite\nfamiliar.\n\nHere is an example that uses a pipe to base64 encode some strings::\n\n  Pipe pipe(new Base64_Encoder); // pipe owns the pointer\n  pipe.start_msg();\n",
                      "markdown": "`familiar with the Unix shell environment, this design will sound quite\nfamiliar.\n\nHere is an example that uses a pipe to base64 encode some strings::\n\n  Pipe pipe(new Base64_Encoder); // pipe owns the pointer\n  pipe.start_msg();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "endColumn": 6,
                  "snippet": {
                    "text": "Many common uses of cryptography involve processing one or more\nstreams of data. Botan provides services that make setting up data\nflows through various operations, such as compression, encryption, and\nbase64 encoding. Each of these operations is implemented in what are\ncalled *filters* in Botan. A set of filters are created and placed into\na *pipe*, and information \"flows\" through the pipe until it reaches\nthe end, where the output is collected for retrieval. If you're\n",
                    "rendered": {
                      "text": "Many common uses of cryptography involve processing one or more\nstreams of data. Botan provides services that make setting up data\nflows through various operations, such as compression, encryption, and\nbase64 encoding. Each of these operations is implemented in what are\ncalled *filters* in Botan. A set of filters are created and placed into\na *pipe*, and information \"flows\" through the pipe until it reaches\nthe end, where the output is collected for retrieval. If you're\n",
                      "markdown": "`Many common uses of cryptography involve processing one or more\nstreams of data. Botan provides services that make setting up data\nflows through various operations, such as compression, encryption, and\nbase64 encoding. Each of these operations is implemented in what are\ncalled *filters* in Botan. A set of filters are created and placed into\na *pipe*, and information \"flows\" through the pipe until it reaches\nthe end, where the output is collected for retrieval. If you're\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 718,
                  "startColumn": 43,
                  "endLine": 718,
                  "endColumn": 47,
                  "snippet": {
                    "text": ".. cpp:function:: void Filter::start_msg()\n\n  Implementing this function is optional. Implement it if your filter\n  would like to do some processing or setup at the start of each\n  message, such as allocating a data structure.\n\n.. cpp:function:: void Filter::end_msg()\n",
                    "rendered": {
                      "text": ".. cpp:function:: void Filter::start_msg()\n\n  Implementing this function is optional. Implement it if your filter\n  would like to do some processing or setup at the start of each\n  message, such as allocating a data structure.\n\n.. cpp:function:: void Filter::end_msg()\n",
                      "markdown": "`.. cpp:function:: void Filter::start_msg()\n\n  Implementing this function is optional. Implement it if your filter\n  would like to do some processing or setup at the start of each\n  message, such as allocating a data structure.\n\n.. cpp:function:: void Filter::end_msg()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 625,
                  "startColumn": 22,
                  "endLine": 625,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nHash functions and MACs don't need anything special when it comes to\nfilters. Both just take their input and produce no output until\n``end_msg`` is called, at which time they complete the hash or MAC and\nsend that as output.\n\nThese filters take a string naming the type to be used. If for some\n",
                    "rendered": {
                      "text": "\nHash functions and MACs don't need anything special when it comes to\nfilters. Both just take their input and produce no output until\n``end_msg`` is called, at which time they complete the hash or MAC and\nsend that as output.\n\nThese filters take a string naming the type to be used. If for some\n",
                      "markdown": "`\nHash functions and MACs don't need anything special when it comes to\nfilters. Both just take their input and produce no output until\n``end_msg`` is called, at which time they complete the hash or MAC and\nsend that as output.\n\nThese filters take a string naming the type to be used. If for some\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 41,
                  "endLine": 370,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n.. cpp:function:: void Pipe::append(Filter* filter)\n\n  Like ``prepend``, but places the filter at the end of the message\n  flow. This doesn't always do what you expect if there is a fork.\n\n.. cpp:function:: void Pipe::pop()\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: void Pipe::append(Filter* filter)\n\n  Like ``prepend``, but places the filter at the end of the message\n  flow. This doesn't always do what you expect if there is a fork.\n\n.. cpp:function:: void Pipe::pop()\n",
                      "markdown": "`\n.. cpp:function:: void Pipe::append(Filter* filter)\n\n  Like ``prepend``, but places the filter at the end of the message\n  flow. This doesn't always do what you expect if there is a fork.\n\n.. cpp:function:: void Pipe::pop()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 36,
                  "endLine": 336,
                  "endColumn": 40,
                  "snippet": {
                    "text": "Initializing Pipe\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBy default, ``Pipe`` will do nothing at all; any input placed into the\n``Pipe`` will be read back unchanged. Obviously, this has limited\nutility, and presumably you want to use one or more filters to somehow\nprocess the data. First, you can choose a set of filters to initialize\n",
                    "rendered": {
                      "text": "Initializing Pipe\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBy default, ``Pipe`` will do nothing at all; any input placed into the\n``Pipe`` will be read back unchanged. Obviously, this has limited\nutility, and presumably you want to use one or more filters to somehow\nprocess the data. First, you can choose a set of filters to initialize\n",
                      "markdown": "`Initializing Pipe\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBy default, ``Pipe`` will do nothing at all; any input placed into the\n``Pipe`` will be read back unchanged. Obviously, this has limited\nutility, and presumably you want to use one or more filters to somehow\nprocess the data. First, you can choose a set of filters to initialize\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 39,
                  "endLine": 209,
                  "endColumn": 43,
                  "snippet": {
                    "text": "for how fork interprets NULL pointers), message 2 will be the output\nof the second ``Base64_Encoder``, and message 3 will be the output of\nthe ``Hex_Encoder``. This results in message numbers being allocated\nin a top to bottom fashion, when looked at on the screen. However,\nnote that there could be potential for bugs if this is not\nanticipated. For example, if your code is passed a filter, and you\nassume it is a \"normal\" one that only uses one message, your message\n",
                    "rendered": {
                      "text": "for how fork interprets NULL pointers), message 2 will be the output\nof the second ``Base64_Encoder``, and message 3 will be the output of\nthe ``Hex_Encoder``. This results in message numbers being allocated\nin a top to bottom fashion, when looked at on the screen. However,\nnote that there could be potential for bugs if this is not\nanticipated. For example, if your code is passed a filter, and you\nassume it is a \"normal\" one that only uses one message, your message\n",
                      "markdown": "`for how fork interprets NULL pointers), message 2 will be the output\nof the second ``Base64_Encoder``, and message 3 will be the output of\nthe ``Hex_Encoder``. This results in message numbers being allocated\nin a top to bottom fashion, when looked at on the screen. However,\nnote that there could be potential for bugs if this is not\nanticipated. For example, if your code is passed a filter, and you\nassume it is a \"normal\" one that only uses one message, your message\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 33,
                  "endLine": 174,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nIt is common that you might receive some data and want to perform more\nthan one operation on it (ie, encrypt it with Serpent and calculate\nthe SHA-256 hash of the plaintext at the same time). That's where\n``Fork`` comes in. ``Fork`` is a filter that takes input and passes it\non to *one or more* filters that are attached to it. ``Fork`` changes\nthe nature of the pipe system completely: instead of being a linked\n",
                    "rendered": {
                      "text": "\nIt is common that you might receive some data and want to perform more\nthan one operation on it (ie, encrypt it with Serpent and calculate\nthe SHA-256 hash of the plaintext at the same time). That's where\n``Fork`` comes in. ``Fork`` is a filter that takes input and passes it\non to *one or more* filters that are attached to it. ``Fork`` changes\nthe nature of the pipe system completely: instead of being a linked\n",
                      "markdown": "`\nIt is common that you might receive some data and want to perform more\nthan one operation on it (ie, encrypt it with Serpent and calculate\nthe SHA-256 hash of the plaintext at the same time). That's where\n``Fork`` comes in. ``Fork`` is a filter that takes input and passes it\non to *one or more* filters that are attached to it. ``Fork`` changes\nthe nature of the pipe system completely: instead of being a linked\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 55,
                  "endLine": 146,
                  "endColumn": 59,
                  "snippet": {
                    "text": "   std::cout << encryptor;\n\nYou can read from a pipe while you are still writing to it, which\nallows you to bound the amount of memory that is in use at any one\ntime. A common idiom for this is::\n\n   pipe.start_msg();\n",
                    "rendered": {
                      "text": "   std::cout << encryptor;\n\nYou can read from a pipe while you are still writing to it, which\nallows you to bound the amount of memory that is in use at any one\ntime. A common idiom for this is::\n\n   pipe.start_msg();\n",
                      "markdown": "`   std::cout << encryptor;\n\nYou can read from a pipe while you are still writing to it, which\nallows you to bound the amount of memory that is in use at any one\ntime. A common idiom for this is::\n\n   pipe.start_msg();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 65,
                  "endLine": 129,
                  "snippet": {
                    "text": "stream; if you were to call ``pipe.read_all()`` after\n``pipe.end_msg()``, you'd get an empty vector out. This is\nparticularly useful for cases where you are processing a large amount\nof data, as it means you don't have to store everything in memory at\nonce.\n\nHere's an example using two computational filters::\n\n",
                    "rendered": {
                      "text": "stream; if you were to call ``pipe.read_all()`` after\n``pipe.end_msg()``, you'd get an empty vector out. This is\nparticularly useful for cases where you are processing a large amount\nof data, as it means you don't have to store everything in memory at\nonce.\n\nHere's an example using two computational filters::\n\n",
                      "markdown": "`stream; if you were to call ``pipe.read_all()`` after\n``pipe.end_msg()``, you'd get an empty vector out. This is\nparticularly useful for cases where you are processing a large amount\nof data, as it means you don't have to store everything in memory at\nonce.\n\nHere's an example using two computational filters::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 20,
                  "endLine": 103,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nHowever there is a hitch to the code above; the complete contents of\nthe compressed data will be held in memory until the entire message\nhas been compressed, at which time the statement ``out << pipe`` is\nexecuted, and the data is freed as it is read from the pipe and\nwritten to the file. But if the file is very large, we might not have\nenough physical memory (or even enough virtual memory!) for that to be\n",
                    "rendered": {
                      "text": "\nHowever there is a hitch to the code above; the complete contents of\nthe compressed data will be held in memory until the entire message\nhas been compressed, at which time the statement ``out << pipe`` is\nexecuted, and the data is freed as it is read from the pipe and\nwritten to the file. But if the file is very large, we might not have\nenough physical memory (or even enough virtual memory!) for that to be\n",
                      "markdown": "`\nHowever there is a hitch to the code above; the complete contents of\nthe compressed data will be held in memory until the entire message\nhas been compressed, at which time the statement ``out << pipe`` is\nexecuted, and the data is freed as it is read from the pipe and\nwritten to the file. But if the file is very large, we might not have\nenough physical memory (or even enough virtual memory!) for that to be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 678,
                  "startColumn": 7,
                  "endLine": 678,
                  "endColumn": 13,
                  "snippet": {
                    "text": "encoder has no such option, because it uses both upper and lower case\nletters for its output.\n\nYou can find the declarations for these types in ``hex_filt.h`` and\n``b64_filt.h``.\n\nWriting New Filters\n",
                    "rendered": {
                      "text": "encoder has no such option, because it uses both upper and lower case\nletters for its output.\n\nYou can find the declarations for these types in ``hex_filt.h`` and\n``b64_filt.h``.\n\nWriting New Filters\n",
                      "markdown": "`encoder has no such option, because it uses both upper and lower case\nletters for its output.\n\nYou can find the declarations for these types in ``hex_filt.h`` and\n``b64_filt.h``.\n\nWriting New Filters\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 674,
                  "startColumn": 63,
                  "endLine": 675,
                  "snippet": {
                    "text": "\nLastly, ``Hex_Encoder`` takes an argument of type ``Case``, which can\nbe ``Uppercase`` or ``Lowercase`` (default is ``Uppercase``). This\nspecifies what case the characters A-F should be output as. The base64\nencoder has no such option, because it uses both upper and lower case\nletters for its output.\n\nYou can find the declarations for these types in ``hex_filt.h`` and\n",
                    "rendered": {
                      "text": "\nLastly, ``Hex_Encoder`` takes an argument of type ``Case``, which can\nbe ``Uppercase`` or ``Lowercase`` (default is ``Uppercase``). This\nspecifies what case the characters A-F should be output as. The base64\nencoder has no such option, because it uses both upper and lower case\nletters for its output.\n\nYou can find the declarations for these types in ``hex_filt.h`` and\n",
                      "markdown": "`\nLastly, ``Hex_Encoder`` takes an argument of type ``Case``, which can\nbe ``Uppercase`` or ``Lowercase`` (default is ``Uppercase``). This\nspecifies what case the characters A-F should be output as. The base64\nencoder has no such option, because it uses both upper and lower case\nletters for its output.\n\nYou can find the declarations for these types in ``hex_filt.h`` and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 16,
                  "endLine": 654,
                  "endColumn": 24,
                  "snippet": {
                    "text": "Often you want your data to be in some form of text (for sending over\nchannels that aren't 8-bit clean, printing it, etc). The filters\n``Hex_Encoder`` and ``Base64_Encoder`` will convert arbitrary binary\ndata into hex or base64 formats. Not surprisingly, you can use\n``Hex_Decoder`` and ``Base64_Decoder`` to convert it back into its\noriginal form.\n\n",
                    "rendered": {
                      "text": "Often you want your data to be in some form of text (for sending over\nchannels that aren't 8-bit clean, printing it, etc). The filters\n``Hex_Encoder`` and ``Base64_Encoder`` will convert arbitrary binary\ndata into hex or base64 formats. Not surprisingly, you can use\n``Hex_Decoder`` and ``Base64_Decoder`` to convert it back into its\noriginal form.\n\n",
                      "markdown": "`Often you want your data to be in some form of text (for sending over\nchannels that aren't 8-bit clean, printing it, etc). The filters\n``Hex_Encoder`` and ``Base64_Encoder`` will convert arbitrary binary\ndata into hex or base64 formats. Not surprisingly, you can use\n``Hex_Decoder`` and ``Base64_Decoder`` to convert it back into its\noriginal form.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 625,
                  "startColumn": 31,
                  "endLine": 625,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nHash functions and MACs don't need anything special when it comes to\nfilters. Both just take their input and produce no output until\n``end_msg`` is called, at which time they complete the hash or MAC and\nsend that as output.\n\nThese filters take a string naming the type to be used. If for some\n",
                    "rendered": {
                      "text": "\nHash functions and MACs don't need anything special when it comes to\nfilters. Both just take their input and produce no output until\n``end_msg`` is called, at which time they complete the hash or MAC and\nsend that as output.\n\nThese filters take a string naming the type to be used. If for some\n",
                      "markdown": "`\nHash functions and MACs don't need anything special when it comes to\nfilters. Both just take their input and produce no output until\n``end_msg`` is called, at which time they complete the hash or MAC and\nsend that as output.\n\nThese filters take a string naming the type to be used. If for some\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 39,
                  "endLine": 371,
                  "endColumn": 47,
                  "snippet": {
                    "text": ".. cpp:function:: void Pipe::append(Filter* filter)\n\n  Like ``prepend``, but places the filter at the end of the message\n  flow. This doesn't always do what you expect if there is a fork.\n\n.. cpp:function:: void Pipe::pop()\n\n",
                    "rendered": {
                      "text": ".. cpp:function:: void Pipe::append(Filter* filter)\n\n  Like ``prepend``, but places the filter at the end of the message\n  flow. This doesn't always do what you expect if there is a fork.\n\n.. cpp:function:: void Pipe::pop()\n\n",
                      "markdown": "`.. cpp:function:: void Pipe::append(Filter* filter)\n\n  Like ``prepend``, but places the filter at the end of the message\n  flow. This doesn't always do what you expect if there is a fork.\n\n.. cpp:function:: void Pipe::pop()\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 4,
                  "endLine": 209,
                  "endColumn": 9,
                  "snippet": {
                    "text": "for how fork interprets NULL pointers), message 2 will be the output\nof the second ``Base64_Encoder``, and message 3 will be the output of\nthe ``Hex_Encoder``. This results in message numbers being allocated\nin a top to bottom fashion, when looked at on the screen. However,\nnote that there could be potential for bugs if this is not\nanticipated. For example, if your code is passed a filter, and you\nassume it is a \"normal\" one that only uses one message, your message\n",
                    "rendered": {
                      "text": "for how fork interprets NULL pointers), message 2 will be the output\nof the second ``Base64_Encoder``, and message 3 will be the output of\nthe ``Hex_Encoder``. This results in message numbers being allocated\nin a top to bottom fashion, when looked at on the screen. However,\nnote that there could be potential for bugs if this is not\nanticipated. For example, if your code is passed a filter, and you\nassume it is a \"normal\" one that only uses one message, your message\n",
                      "markdown": "`for how fork interprets NULL pointers), message 2 will be the output\nof the second ``Base64_Encoder``, and message 3 will be the output of\nthe ``Hex_Encoder``. This results in message numbers being allocated\nin a top to bottom fashion, when looked at on the screen. However,\nnote that there could be potential for bugs if this is not\nanticipated. For example, if your code is passed a filter, and you\nassume it is a \"normal\" one that only uses one message, your message\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 29,
                  "endLine": 103,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\nHowever there is a hitch to the code above; the complete contents of\nthe compressed data will be held in memory until the entire message\nhas been compressed, at which time the statement ``out << pipe`` is\nexecuted, and the data is freed as it is read from the pipe and\nwritten to the file. But if the file is very large, we might not have\nenough physical memory (or even enough virtual memory!) for that to be\n",
                    "rendered": {
                      "text": "\nHowever there is a hitch to the code above; the complete contents of\nthe compressed data will be held in memory until the entire message\nhas been compressed, at which time the statement ``out << pipe`` is\nexecuted, and the data is freed as it is read from the pipe and\nwritten to the file. But if the file is very large, we might not have\nenough physical memory (or even enough virtual memory!) for that to be\n",
                      "markdown": "`\nHowever there is a hitch to the code above; the complete contents of\nthe compressed data will be held in memory until the entire message\nhas been compressed, at which time the statement ``out << pipe`` is\nexecuted, and the data is freed as it is read from the pipe and\nwritten to the file. But if the file is very large, we might not have\nenough physical memory (or even enough virtual memory!) for that to be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 38,
                  "endLine": 30,
                  "endColumn": 46,
                  "snippet": {
                    "text": "familiar with the Unix shell environment, this design will sound quite\nfamiliar.\n\nHere is an example that uses a pipe to base64 encode some strings::\n\n  Pipe pipe(new Base64_Encoder); // pipe owns the pointer\n  pipe.start_msg();\n",
                    "rendered": {
                      "text": "familiar with the Unix shell environment, this design will sound quite\nfamiliar.\n\nHere is an example that uses a pipe to base64 encode some strings::\n\n  Pipe pipe(new Base64_Encoder); // pipe owns the pointer\n  pipe.start_msg();\n",
                      "markdown": "`familiar with the Unix shell environment, this design will sound quite\nfamiliar.\n\nHere is an example that uses a pipe to base64 encode some strings::\n\n  Pipe pipe(new Base64_Encoder); // pipe owns the pointer\n  pipe.start_msg();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/filters.rst"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 70,
                  "endLine": 23,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nMany common uses of cryptography involve processing one or more\nstreams of data. Botan provides services that make setting up data\nflows through various operations, such as compression, encryption, and\nbase64 encoding. Each of these operations is implemented in what are\ncalled *filters* in Botan. A set of filters are created and placed into\na *pipe*, and information \"flows\" through the pipe until it reaches\nthe end, where the output is collected for retrieval. If you're\n",
                    "rendered": {
                      "text": "\nMany common uses of cryptography involve processing one or more\nstreams of data. Botan provides services that make setting up data\nflows through various operations, such as compression, encryption, and\nbase64 encoding. Each of these operations is implemented in what are\ncalled *filters* in Botan. A set of filters are created and placed into\na *pipe*, and information \"flows\" through the pipe until it reaches\nthe end, where the output is collected for retrieval. If you're\n",
                      "markdown": "`\nMany common uses of cryptography involve processing one or more\nstreams of data. Botan provides services that make setting up data\nflows through various operations, such as compression, encryption, and\nbase64 encoding. Each of these operations is implemented in what are\ncalled *filters* in Botan. A set of filters are created and placed into\na *pipe*, and information \"flows\" through the pipe until it reaches\nthe end, where the output is collected for retrieval. If you're\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 977,
                  "startColumn": 38,
                  "endLine": 977,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\ndef pbkdf_timed(algo, password, out_len, ms_to_run=300, salt=None):\n    if salt is None:\n        salt = RandomNumberGenerator().get(12)\n\n    out_buf = create_string_buffer(out_len)\n    iterations = c_size_t(0)\n",
                    "rendered": {
                      "text": "\ndef pbkdf_timed(algo, password, out_len, ms_to_run=300, salt=None):\n    if salt is None:\n        salt = RandomNumberGenerator().get(12)\n\n    out_buf = create_string_buffer(out_len)\n    iterations = c_size_t(0)\n",
                      "markdown": "`\ndef pbkdf_timed(algo, password, out_len, ms_to_run=300, salt=None):\n    if salt is None:\n        salt = RandomNumberGenerator().get(12)\n\n    out_buf = create_string_buffer(out_len)\n    iterations = c_size_t(0)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 965,
                  "startColumn": 38,
                  "endLine": 965,
                  "endColumn": 43,
                  "snippet": {
                    "text": "#\ndef pbkdf(algo, password, out_len, iterations=100000, salt=None):\n    if salt is None:\n        salt = RandomNumberGenerator().get(12)\n\n    out_buf = create_string_buffer(out_len)\n\n",
                    "rendered": {
                      "text": "#\ndef pbkdf(algo, password, out_len, iterations=100000, salt=None):\n    if salt is None:\n        salt = RandomNumberGenerator().get(12)\n\n    out_buf = create_string_buffer(out_len)\n\n",
                      "markdown": "`#\ndef pbkdf(algo, password, out_len, iterations=100000, salt=None):\n    if salt is None:\n        salt = RandomNumberGenerator().get(12)\n\n    out_buf = create_string_buffer(out_len)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 2053,
                  "startColumn": 79,
                  "endLine": 2053,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\n    return _call_fn_returning_vec_pair(sz, sz, lambda a, al, k, kl:\n                                       _DLL.botan_srp6_client_agree(_ctype_str(username),\n                                                                    _ctype_str(password),\n                                                                    _ctype_str(group),\n                                                                    _ctype_str(hsh),\n                                                                    salt, len(salt),\n",
                    "rendered": {
                      "text": "\n    return _call_fn_returning_vec_pair(sz, sz, lambda a, al, k, kl:\n                                       _DLL.botan_srp6_client_agree(_ctype_str(username),\n                                                                    _ctype_str(password),\n                                                                    _ctype_str(group),\n                                                                    _ctype_str(hsh),\n                                                                    salt, len(salt),\n",
                      "markdown": "`\n    return _call_fn_returning_vec_pair(sz, sz, lambda a, al, k, kl:\n                                       _DLL.botan_srp6_client_agree(_ctype_str(username),\n                                                                    _ctype_str(password),\n                                                                    _ctype_str(group),\n                                                                    _ctype_str(hsh),\n                                                                    salt, len(salt),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 2048,
                  "startColumn": 32,
                  "endLine": 2048,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                                                                    _ctype_str(hsh),\n                                                                    v, vl))\n\ndef srp6_client_agree(username, password, group, hsh, salt, b, rng):\n    sz = _call_fn_returning_sz(lambda l: _DLL.botan_srp6_group_size(_ctype_str(group), l))\n\n    return _call_fn_returning_vec_pair(sz, sz, lambda a, al, k, kl:\n",
                    "rendered": {
                      "text": "                                                                    _ctype_str(hsh),\n                                                                    v, vl))\n\ndef srp6_client_agree(username, password, group, hsh, salt, b, rng):\n    sz = _call_fn_returning_sz(lambda l: _DLL.botan_srp6_group_size(_ctype_str(group), l))\n\n    return _call_fn_returning_vec_pair(sz, sz, lambda a, al, k, kl:\n",
                      "markdown": "`                                                                    _ctype_str(hsh),\n                                                                    v, vl))\n\ndef srp6_client_agree(username, password, group, hsh, salt, b, rng):\n    sz = _call_fn_returning_sz(lambda l: _DLL.botan_srp6_group_size(_ctype_str(group), l))\n\n    return _call_fn_returning_vec_pair(sz, sz, lambda a, al, k, kl:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 2042,
                  "startColumn": 79,
                  "endLine": 2042,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\n    return _call_fn_returning_vec(sz, lambda v, vl:\n                                  _DLL.botan_srp6_generate_verifier(_ctype_str(identifier),\n                                                                    _ctype_str(password),\n                                                                    salt, len(salt),\n                                                                    _ctype_str(group),\n                                                                    _ctype_str(hsh),\n",
                    "rendered": {
                      "text": "\n    return _call_fn_returning_vec(sz, lambda v, vl:\n                                  _DLL.botan_srp6_generate_verifier(_ctype_str(identifier),\n                                                                    _ctype_str(password),\n                                                                    salt, len(salt),\n                                                                    _ctype_str(group),\n                                                                    _ctype_str(hsh),\n",
                      "markdown": "`\n    return _call_fn_returning_vec(sz, lambda v, vl:\n                                  _DLL.botan_srp6_generate_verifier(_ctype_str(identifier),\n                                                                    _ctype_str(password),\n                                                                    salt, len(salt),\n                                                                    _ctype_str(group),\n                                                                    _ctype_str(hsh),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 2037,
                  "startColumn": 39,
                  "endLine": 2037,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                                                                           a, len(a),\n                                                                           k, kl))\n\ndef srp6_generate_verifier(identifier, password, salt, group, hsh):\n    sz = _call_fn_returning_sz(lambda l: _DLL.botan_srp6_group_size(_ctype_str(group), l))\n\n    return _call_fn_returning_vec(sz, lambda v, vl:\n",
                    "rendered": {
                      "text": "                                                                           a, len(a),\n                                                                           k, kl))\n\ndef srp6_generate_verifier(identifier, password, salt, group, hsh):\n    sz = _call_fn_returning_sz(lambda l: _DLL.botan_srp6_group_size(_ctype_str(group), l))\n\n    return _call_fn_returning_vec(sz, lambda v, vl:\n",
                      "markdown": "`                                                                           a, len(a),\n                                                                           k, kl))\n\ndef srp6_generate_verifier(identifier, password, salt, group, hsh):\n    sz = _call_fn_returning_sz(lambda l: _DLL.botan_srp6_group_size(_ctype_str(group), l))\n\n    return _call_fn_returning_vec(sz, lambda v, vl:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1272,
                  "startColumn": 15,
                  "endLine": 1272,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    def load_kyber(cls, key):\n        obj = c_void_p(0)\n        _DLL.botan_privkey_load_kyber(byref(obj), key, len(key))\n        return PrivateKey(obj)\n\n    def __del__(self):\n        _DLL.botan_privkey_destroy(self.__obj)\n",
                    "rendered": {
                      "text": "    def load_kyber(cls, key):\n        obj = c_void_p(0)\n        _DLL.botan_privkey_load_kyber(byref(obj), key, len(key))\n        return PrivateKey(obj)\n\n    def __del__(self):\n        _DLL.botan_privkey_destroy(self.__obj)\n",
                      "markdown": "`    def load_kyber(cls, key):\n        obj = c_void_p(0)\n        _DLL.botan_privkey_load_kyber(byref(obj), key, len(key))\n        return PrivateKey(obj)\n\n    def __del__(self):\n        _DLL.botan_privkey_destroy(self.__obj)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1266,
                  "startColumn": 15,
                  "endLine": 1266,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        obj = c_void_p(0)\n        x = MPI(x)\n        _DLL.botan_privkey_load_sm2(byref(obj), x.handle_(), _ctype_str(curve))\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_kyber(cls, key):\n",
                    "rendered": {
                      "text": "        obj = c_void_p(0)\n        x = MPI(x)\n        _DLL.botan_privkey_load_sm2(byref(obj), x.handle_(), _ctype_str(curve))\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_kyber(cls, key):\n",
                      "markdown": "`        obj = c_void_p(0)\n        x = MPI(x)\n        _DLL.botan_privkey_load_sm2(byref(obj), x.handle_(), _ctype_str(curve))\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_kyber(cls, key):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1259,
                  "startColumn": 15,
                  "endLine": 1259,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        obj = c_void_p(0)\n        x = MPI(x)\n        _DLL.botan_privkey_load_ecdh(byref(obj), x.handle_(), _ctype_str(curve))\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_sm2(cls, curve, x):\n",
                    "rendered": {
                      "text": "        obj = c_void_p(0)\n        x = MPI(x)\n        _DLL.botan_privkey_load_ecdh(byref(obj), x.handle_(), _ctype_str(curve))\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_sm2(cls, curve, x):\n",
                      "markdown": "`        obj = c_void_p(0)\n        x = MPI(x)\n        _DLL.botan_privkey_load_ecdh(byref(obj), x.handle_(), _ctype_str(curve))\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_sm2(cls, curve, x):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1252,
                  "startColumn": 15,
                  "endLine": 1252,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        obj = c_void_p(0)\n        x = MPI(x)\n        _DLL.botan_privkey_load_ecdsa(byref(obj), x.handle_(), _ctype_str(curve))\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_ecdh(cls, curve, x):\n",
                    "rendered": {
                      "text": "        obj = c_void_p(0)\n        x = MPI(x)\n        _DLL.botan_privkey_load_ecdsa(byref(obj), x.handle_(), _ctype_str(curve))\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_ecdh(cls, curve, x):\n",
                      "markdown": "`        obj = c_void_p(0)\n        x = MPI(x)\n        _DLL.botan_privkey_load_ecdsa(byref(obj), x.handle_(), _ctype_str(curve))\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_ecdh(cls, curve, x):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1245,
                  "startColumn": 15,
                  "endLine": 1245,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        g = MPI(g)\n        x = MPI(x)\n        _DLL.botan_privkey_load_elgamal(byref(obj), p.handle_(), q.handle_(), g.handle_(), x.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_ecdsa(cls, curve, x):\n",
                    "rendered": {
                      "text": "        g = MPI(g)\n        x = MPI(x)\n        _DLL.botan_privkey_load_elgamal(byref(obj), p.handle_(), q.handle_(), g.handle_(), x.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_ecdsa(cls, curve, x):\n",
                      "markdown": "`        g = MPI(g)\n        x = MPI(x)\n        _DLL.botan_privkey_load_elgamal(byref(obj), p.handle_(), q.handle_(), g.handle_(), x.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_ecdsa(cls, curve, x):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1235,
                  "startColumn": 15,
                  "endLine": 1235,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        g = MPI(g)\n        x = MPI(x)\n        _DLL.botan_privkey_load_dh(byref(obj), p.handle_(), g.handle_(), x.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_elgamal(cls, p, q, g, x):\n",
                    "rendered": {
                      "text": "        g = MPI(g)\n        x = MPI(x)\n        _DLL.botan_privkey_load_dh(byref(obj), p.handle_(), g.handle_(), x.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_elgamal(cls, p, q, g, x):\n",
                      "markdown": "`        g = MPI(g)\n        x = MPI(x)\n        _DLL.botan_privkey_load_dh(byref(obj), p.handle_(), g.handle_(), x.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_elgamal(cls, p, q, g, x):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1226,
                  "startColumn": 15,
                  "endLine": 1226,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        g = MPI(g)\n        x = MPI(x)\n        _DLL.botan_privkey_load_dsa(byref(obj), p.handle_(), q.handle_(), g.handle_(), x.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_dh(cls, p, g, x):\n",
                    "rendered": {
                      "text": "        g = MPI(g)\n        x = MPI(x)\n        _DLL.botan_privkey_load_dsa(byref(obj), p.handle_(), q.handle_(), g.handle_(), x.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_dh(cls, p, g, x):\n",
                      "markdown": "`        g = MPI(g)\n        x = MPI(x)\n        _DLL.botan_privkey_load_dsa(byref(obj), p.handle_(), q.handle_(), g.handle_(), x.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_dh(cls, p, g, x):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1216,
                  "startColumn": 15,
                  "endLine": 1216,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        q = MPI(q)\n        e = MPI(e)\n        _DLL.botan_privkey_load_rsa(byref(obj), p.handle_(), q.handle_(), e.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_dsa(cls, p, q, g, x):\n",
                    "rendered": {
                      "text": "        q = MPI(q)\n        e = MPI(e)\n        _DLL.botan_privkey_load_rsa(byref(obj), p.handle_(), q.handle_(), e.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_dsa(cls, p, q, g, x):\n",
                      "markdown": "`        q = MPI(q)\n        e = MPI(e)\n        _DLL.botan_privkey_load_rsa(byref(obj), p.handle_(), q.handle_(), e.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_dsa(cls, p, q, g, x):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1207,
                  "startColumn": 15,
                  "endLine": 1207,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n        obj = c_void_p(0)\n        _DLL.botan_privkey_create(byref(obj), _ctype_str(algo), _ctype_str(params), rng_obj.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_rsa(cls, p, q, e):\n",
                    "rendered": {
                      "text": "\n        obj = c_void_p(0)\n        _DLL.botan_privkey_create(byref(obj), _ctype_str(algo), _ctype_str(params), rng_obj.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_rsa(cls, p, q, e):\n",
                      "markdown": "`\n        obj = c_void_p(0)\n        _DLL.botan_privkey_create(byref(obj), _ctype_str(algo), _ctype_str(params), rng_obj.handle_())\n        return PrivateKey(obj)\n\n    @classmethod\n    def load_rsa(cls, p, q, e):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1183,
                  "startColumn": 15,
                  "endLine": 1183,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        rng_obj = c_void_p(0) # unused in recent versions\n        bits = _ctype_bits(val)\n        _DLL.botan_privkey_load(byref(obj), rng_obj, bits, len(bits), _ctype_str(passphrase))\n        return PrivateKey(obj)\n\n    @classmethod\n    def create(cls, algo, params, rng_obj):\n",
                    "rendered": {
                      "text": "        rng_obj = c_void_p(0) # unused in recent versions\n        bits = _ctype_bits(val)\n        _DLL.botan_privkey_load(byref(obj), rng_obj, bits, len(bits), _ctype_str(passphrase))\n        return PrivateKey(obj)\n\n    @classmethod\n    def create(cls, algo, params, rng_obj):\n",
                      "markdown": "`        rng_obj = c_void_p(0) # unused in recent versions\n        bits = _ctype_bits(val)\n        _DLL.botan_privkey_load(byref(obj), rng_obj, bits, len(bits), _ctype_str(passphrase))\n        return PrivateKey(obj)\n\n    @classmethod\n    def create(cls, algo, params, rng_obj):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1172,
                  "startColumn": 6,
                  "endLine": 1172,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#\n# Private Key\n#\nclass PrivateKey:\n\n    def __init__(self, obj=c_void_p(0)):\n        self.__obj = obj\n",
                    "rendered": {
                      "text": "#\n# Private Key\n#\nclass PrivateKey:\n\n    def __init__(self, obj=c_void_p(0)):\n        self.__obj = obj\n",
                      "markdown": "`#\n# Private Key\n#\nclass PrivateKey:\n\n    def __init__(self, obj=c_void_p(0)):\n        self.__obj = obj\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1015,
                  "startColumn": 26,
                  "endLine": 1015,
                  "endColumn": 34,
                  "snippet": {
                    "text": "# returns an output of out_len bytes\ndef argon2(variant, out_len, password, salt, m=256, t=1, p=1):\n    out_buf = create_string_buffer(out_len)\n    passbits = _ctype_str(password)\n    saltbits = _ctype_bits(salt)\n\n    _DLL.botan_pwdhash(_ctype_str(variant), m, t, p,\n",
                    "rendered": {
                      "text": "# returns an output of out_len bytes\ndef argon2(variant, out_len, password, salt, m=256, t=1, p=1):\n    out_buf = create_string_buffer(out_len)\n    passbits = _ctype_str(password)\n    saltbits = _ctype_bits(salt)\n\n    _DLL.botan_pwdhash(_ctype_str(variant), m, t, p,\n",
                      "markdown": "`# returns an output of out_len bytes\ndef argon2(variant, out_len, password, salt, m=256, t=1, p=1):\n    out_buf = create_string_buffer(out_len)\n    passbits = _ctype_str(password)\n    saltbits = _ctype_bits(salt)\n\n    _DLL.botan_pwdhash(_ctype_str(variant), m, t, p,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1013,
                  "startColumn": 29,
                  "endLine": 1013,
                  "endColumn": 37,
                  "snippet": {
                    "text": "# p specifies the parallelism\n#\n# returns an output of out_len bytes\ndef argon2(variant, out_len, password, salt, m=256, t=1, p=1):\n    out_buf = create_string_buffer(out_len)\n    passbits = _ctype_str(password)\n    saltbits = _ctype_bits(salt)\n",
                    "rendered": {
                      "text": "# p specifies the parallelism\n#\n# returns an output of out_len bytes\ndef argon2(variant, out_len, password, salt, m=256, t=1, p=1):\n    out_buf = create_string_buffer(out_len)\n    passbits = _ctype_str(password)\n    saltbits = _ctype_bits(salt)\n",
                      "markdown": "`# p specifies the parallelism\n#\n# returns an output of out_len bytes\ndef argon2(variant, out_len, password, salt, m=256, t=1, p=1):\n    out_buf = create_string_buffer(out_len)\n    passbits = _ctype_str(password)\n    saltbits = _ctype_bits(salt)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 994,
                  "startColumn": 26,
                  "endLine": 994,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\ndef scrypt(out_len, password, salt, n=1024, r=8, p=8):\n    out_buf = create_string_buffer(out_len)\n    passbits = _ctype_str(password)\n    saltbits = _ctype_bits(salt)\n\n    _DLL.botan_pwdhash(_ctype_str(\"Scrypt\"), n, r, p,\n",
                    "rendered": {
                      "text": "#\ndef scrypt(out_len, password, salt, n=1024, r=8, p=8):\n    out_buf = create_string_buffer(out_len)\n    passbits = _ctype_str(password)\n    saltbits = _ctype_bits(salt)\n\n    _DLL.botan_pwdhash(_ctype_str(\"Scrypt\"), n, r, p,\n",
                      "markdown": "`#\ndef scrypt(out_len, password, salt, n=1024, r=8, p=8):\n    out_buf = create_string_buffer(out_len)\n    passbits = _ctype_str(password)\n    saltbits = _ctype_bits(salt)\n\n    _DLL.botan_pwdhash(_ctype_str(\"Scrypt\"), n, r, p,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 992,
                  "startColumn": 20,
                  "endLine": 992,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#\n# Scrypt\n#\ndef scrypt(out_len, password, salt, n=1024, r=8, p=8):\n    out_buf = create_string_buffer(out_len)\n    passbits = _ctype_str(password)\n    saltbits = _ctype_bits(salt)\n",
                    "rendered": {
                      "text": "#\n# Scrypt\n#\ndef scrypt(out_len, password, salt, n=1024, r=8, p=8):\n    out_buf = create_string_buffer(out_len)\n    passbits = _ctype_str(password)\n    saltbits = _ctype_bits(salt)\n",
                      "markdown": "`#\n# Scrypt\n#\ndef scrypt(out_len, password, salt, n=1024, r=8, p=8):\n    out_buf = create_string_buffer(out_len)\n    passbits = _ctype_str(password)\n    saltbits = _ctype_bits(salt)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 985,
                  "startColumn": 55,
                  "endLine": 985,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    _DLL.botan_pwdhash_timed(_ctype_str(algo), c_uint32(ms_to_run),\n                             byref(iterations), None, None,\n                             out_buf, out_len,\n                             _ctype_str(password), len(password),\n                             salt, len(salt))\n    return (salt, iterations.value, out_buf.raw)\n\n",
                    "rendered": {
                      "text": "    _DLL.botan_pwdhash_timed(_ctype_str(algo), c_uint32(ms_to_run),\n                             byref(iterations), None, None,\n                             out_buf, out_len,\n                             _ctype_str(password), len(password),\n                             salt, len(salt))\n    return (salt, iterations.value, out_buf.raw)\n\n",
                      "markdown": "`    _DLL.botan_pwdhash_timed(_ctype_str(algo), c_uint32(ms_to_run),\n                             byref(iterations), None, None,\n                             out_buf, out_len,\n                             _ctype_str(password), len(password),\n                             salt, len(salt))\n    return (salt, iterations.value, out_buf.raw)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 985,
                  "startColumn": 40,
                  "endLine": 985,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    _DLL.botan_pwdhash_timed(_ctype_str(algo), c_uint32(ms_to_run),\n                             byref(iterations), None, None,\n                             out_buf, out_len,\n                             _ctype_str(password), len(password),\n                             salt, len(salt))\n    return (salt, iterations.value, out_buf.raw)\n\n",
                    "rendered": {
                      "text": "    _DLL.botan_pwdhash_timed(_ctype_str(algo), c_uint32(ms_to_run),\n                             byref(iterations), None, None,\n                             out_buf, out_len,\n                             _ctype_str(password), len(password),\n                             salt, len(salt))\n    return (salt, iterations.value, out_buf.raw)\n\n",
                      "markdown": "`    _DLL.botan_pwdhash_timed(_ctype_str(algo), c_uint32(ms_to_run),\n                             byref(iterations), None, None,\n                             out_buf, out_len,\n                             _ctype_str(password), len(password),\n                             salt, len(salt))\n    return (salt, iterations.value, out_buf.raw)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 975,
                  "startColumn": 22,
                  "endLine": 975,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                       salt, len(salt))\n    return (salt, iterations, out_buf.raw)\n\ndef pbkdf_timed(algo, password, out_len, ms_to_run=300, salt=None):\n    if salt is None:\n        salt = RandomNumberGenerator().get(12)\n\n",
                    "rendered": {
                      "text": "                       salt, len(salt))\n    return (salt, iterations, out_buf.raw)\n\ndef pbkdf_timed(algo, password, out_len, ms_to_run=300, salt=None):\n    if salt is None:\n        salt = RandomNumberGenerator().get(12)\n\n",
                      "markdown": "`                       salt, len(salt))\n    return (salt, iterations, out_buf.raw)\n\ndef pbkdf_timed(algo, password, out_len, ms_to_run=300, salt=None):\n    if salt is None:\n        salt = RandomNumberGenerator().get(12)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 971,
                  "startColumn": 49,
                  "endLine": 971,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n    _DLL.botan_pwdhash(_ctype_str(algo), iterations, 0, 0,\n                       out_buf, out_len,\n                       _ctype_str(password), len(password),\n                       salt, len(salt))\n    return (salt, iterations, out_buf.raw)\n\n",
                    "rendered": {
                      "text": "\n    _DLL.botan_pwdhash(_ctype_str(algo), iterations, 0, 0,\n                       out_buf, out_len,\n                       _ctype_str(password), len(password),\n                       salt, len(salt))\n    return (salt, iterations, out_buf.raw)\n\n",
                      "markdown": "`\n    _DLL.botan_pwdhash(_ctype_str(algo), iterations, 0, 0,\n                       out_buf, out_len,\n                       _ctype_str(password), len(password),\n                       salt, len(salt))\n    return (salt, iterations, out_buf.raw)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 971,
                  "startColumn": 34,
                  "endLine": 971,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n    _DLL.botan_pwdhash(_ctype_str(algo), iterations, 0, 0,\n                       out_buf, out_len,\n                       _ctype_str(password), len(password),\n                       salt, len(salt))\n    return (salt, iterations, out_buf.raw)\n\n",
                    "rendered": {
                      "text": "\n    _DLL.botan_pwdhash(_ctype_str(algo), iterations, 0, 0,\n                       out_buf, out_len,\n                       _ctype_str(password), len(password),\n                       salt, len(salt))\n    return (salt, iterations, out_buf.raw)\n\n",
                      "markdown": "`\n    _DLL.botan_pwdhash(_ctype_str(algo), iterations, 0, 0,\n                       out_buf, out_len,\n                       _ctype_str(password), len(password),\n                       salt, len(salt))\n    return (salt, iterations, out_buf.raw)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 963,
                  "startColumn": 16,
                  "endLine": 963,
                  "endColumn": 24,
                  "snippet": {
                    "text": "#\n# PBKDF\n#\ndef pbkdf(algo, password, out_len, iterations=100000, salt=None):\n    if salt is None:\n        salt = RandomNumberGenerator().get(12)\n\n",
                    "rendered": {
                      "text": "#\n# PBKDF\n#\ndef pbkdf(algo, password, out_len, iterations=100000, salt=None):\n    if salt is None:\n        salt = RandomNumberGenerator().get(12)\n\n",
                      "markdown": "`#\n# PBKDF\n#\ndef pbkdf(algo, password, out_len, iterations=100000, salt=None):\n    if salt is None:\n        salt = RandomNumberGenerator().get(12)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 944,
                  "startColumn": 11,
                  "endLine": 944,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\ndef bcrypt(passwd, rng_obj, work_factor=10):\n    \"\"\"\n    Bcrypt password hashing\n    \"\"\"\n    out_len = c_size_t(64)\n    out = create_string_buffer(out_len.value)\n",
                    "rendered": {
                      "text": "\ndef bcrypt(passwd, rng_obj, work_factor=10):\n    \"\"\"\n    Bcrypt password hashing\n    \"\"\"\n    out_len = c_size_t(64)\n    out = create_string_buffer(out_len.value)\n",
                      "markdown": "`\ndef bcrypt(passwd, rng_obj, work_factor=10):\n    \"\"\"\n    Bcrypt password hashing\n    \"\"\"\n    out_len = c_size_t(64)\n    out = create_string_buffer(out_len.value)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1676,
                  "startColumn": 56,
                  "endLine": 1676,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                                             len_crls,\n                                             _ctype_str(trusted_path),\n                                             c_size_t(required_strength),\n                                             _ctype_str(hostname),\n                                             c_uint64(reference_time))\n\n        return error_code.value\n",
                    "rendered": {
                      "text": "                                             len_crls,\n                                             _ctype_str(trusted_path),\n                                             c_size_t(required_strength),\n                                             _ctype_str(hostname),\n                                             c_uint64(reference_time))\n\n        return error_code.value\n",
                      "markdown": "`                                             len_crls,\n                                             _ctype_str(trusted_path),\n                                             c_size_t(required_strength),\n                                             _ctype_str(hostname),\n                                             c_uint64(reference_time))\n\n        return error_code.value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1630,
                  "startColumn": 15,
                  "endLine": 1630,
                  "endColumn": 23,
                  "snippet": {
                    "text": "               trusted=None,\n               trusted_path=None,\n               required_strength=0,\n               hostname=None,\n               reference_time=0,\n               crls=None):\n\n",
                    "rendered": {
                      "text": "               trusted=None,\n               trusted_path=None,\n               required_strength=0,\n               hostname=None,\n               reference_time=0,\n               crls=None):\n\n",
                      "markdown": "`               trusted=None,\n               trusted_path=None,\n               required_strength=0,\n               hostname=None,\n               reference_time=0,\n               crls=None):\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1589,
                  "startColumn": 72,
                  "endLine": 1589,
                  "endColumn": 80,
                  "snippet": {
                    "text": "            0, lambda b, bl: _DLL.botan_x509_cert_get_issuer_dn(self.__obj, _ctype_str(key), index, b, bl))\n\n    def hostname_match(self, hostname):\n        rc = _DLL.botan_x509_cert_hostname_match(self.__obj, _ctype_str(hostname))\n        return rc == 0\n\n    def not_before(self):\n",
                    "rendered": {
                      "text": "            0, lambda b, bl: _DLL.botan_x509_cert_get_issuer_dn(self.__obj, _ctype_str(key), index, b, bl))\n\n    def hostname_match(self, hostname):\n        rc = _DLL.botan_x509_cert_hostname_match(self.__obj, _ctype_str(hostname))\n        return rc == 0\n\n    def not_before(self):\n",
                      "markdown": "`            0, lambda b, bl: _DLL.botan_x509_cert_get_issuer_dn(self.__obj, _ctype_str(key), index, b, bl))\n\n    def hostname_match(self, hostname):\n        rc = _DLL.botan_x509_cert_hostname_match(self.__obj, _ctype_str(hostname))\n        return rc == 0\n\n    def not_before(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1589,
                  "startColumn": 34,
                  "endLine": 1589,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            0, lambda b, bl: _DLL.botan_x509_cert_get_issuer_dn(self.__obj, _ctype_str(key), index, b, bl))\n\n    def hostname_match(self, hostname):\n        rc = _DLL.botan_x509_cert_hostname_match(self.__obj, _ctype_str(hostname))\n        return rc == 0\n\n    def not_before(self):\n",
                    "rendered": {
                      "text": "            0, lambda b, bl: _DLL.botan_x509_cert_get_issuer_dn(self.__obj, _ctype_str(key), index, b, bl))\n\n    def hostname_match(self, hostname):\n        rc = _DLL.botan_x509_cert_hostname_match(self.__obj, _ctype_str(hostname))\n        return rc == 0\n\n    def not_before(self):\n",
                      "markdown": "`            0, lambda b, bl: _DLL.botan_x509_cert_get_issuer_dn(self.__obj, _ctype_str(key), index, b, bl))\n\n    def hostname_match(self, hostname):\n        rc = _DLL.botan_x509_cert_hostname_match(self.__obj, _ctype_str(hostname))\n        return rc == 0\n\n    def not_before(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1588,
                  "startColumn": 29,
                  "endLine": 1588,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        return _call_fn_returning_str(\n            0, lambda b, bl: _DLL.botan_x509_cert_get_issuer_dn(self.__obj, _ctype_str(key), index, b, bl))\n\n    def hostname_match(self, hostname):\n        rc = _DLL.botan_x509_cert_hostname_match(self.__obj, _ctype_str(hostname))\n        return rc == 0\n\n",
                    "rendered": {
                      "text": "        return _call_fn_returning_str(\n            0, lambda b, bl: _DLL.botan_x509_cert_get_issuer_dn(self.__obj, _ctype_str(key), index, b, bl))\n\n    def hostname_match(self, hostname):\n        rc = _DLL.botan_x509_cert_hostname_match(self.__obj, _ctype_str(hostname))\n        return rc == 0\n\n",
                      "markdown": "`        return _call_fn_returning_str(\n            0, lambda b, bl: _DLL.botan_x509_cert_get_issuer_dn(self.__obj, _ctype_str(key), index, b, bl))\n\n    def hostname_match(self, hostname):\n        rc = _DLL.botan_x509_cert_hostname_match(self.__obj, _ctype_str(hostname))\n        return rc == 0\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1588,
                  "startColumn": 8,
                  "endLine": 1588,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        return _call_fn_returning_str(\n            0, lambda b, bl: _DLL.botan_x509_cert_get_issuer_dn(self.__obj, _ctype_str(key), index, b, bl))\n\n    def hostname_match(self, hostname):\n        rc = _DLL.botan_x509_cert_hostname_match(self.__obj, _ctype_str(hostname))\n        return rc == 0\n\n",
                    "rendered": {
                      "text": "        return _call_fn_returning_str(\n            0, lambda b, bl: _DLL.botan_x509_cert_get_issuer_dn(self.__obj, _ctype_str(key), index, b, bl))\n\n    def hostname_match(self, hostname):\n        rc = _DLL.botan_x509_cert_hostname_match(self.__obj, _ctype_str(hostname))\n        return rc == 0\n\n",
                      "markdown": "`        return _call_fn_returning_str(\n            0, lambda b, bl: _DLL.botan_x509_cert_get_issuer_dn(self.__obj, _ctype_str(key), index, b, bl))\n\n    def hostname_match(self, hostname):\n        rc = _DLL.botan_x509_cert_hostname_match(self.__obj, _ctype_str(hostname))\n        return rc == 0\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 32,
                  "endLine": 443,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            [c_void_p, c_char_p, c_size_t, c_char_p, POINTER(c_size_t)])\n    ffi_api(dll.botan_x509_cert_view_as_string, [c_void_p, c_void_p, VIEW_STR_CALLBACK])\n    ffi_api(dll.botan_x509_cert_allowed_usage, [c_void_p, c_uint])\n    ffi_api(dll.botan_x509_cert_hostname_match, [c_void_p, c_char_p], [-1])\n    ffi_api(dll.botan_x509_cert_verify,\n            [POINTER(c_int), c_void_p, c_void_p, c_size_t, c_void_p, c_size_t, c_char_p, c_size_t, c_char_p, c_uint64])\n\n",
                    "rendered": {
                      "text": "            [c_void_p, c_char_p, c_size_t, c_char_p, POINTER(c_size_t)])\n    ffi_api(dll.botan_x509_cert_view_as_string, [c_void_p, c_void_p, VIEW_STR_CALLBACK])\n    ffi_api(dll.botan_x509_cert_allowed_usage, [c_void_p, c_uint])\n    ffi_api(dll.botan_x509_cert_hostname_match, [c_void_p, c_char_p], [-1])\n    ffi_api(dll.botan_x509_cert_verify,\n            [POINTER(c_int), c_void_p, c_void_p, c_size_t, c_void_p, c_size_t, c_char_p, c_size_t, c_char_p, c_uint64])\n\n",
                      "markdown": "`            [c_void_p, c_char_p, c_size_t, c_char_p, POINTER(c_size_t)])\n    ffi_api(dll.botan_x509_cert_view_as_string, [c_void_p, c_void_p, VIEW_STR_CALLBACK])\n    ffi_api(dll.botan_x509_cert_allowed_usage, [c_void_p, c_uint])\n    ffi_api(dll.botan_x509_cert_hostname_match, [c_void_p, c_char_p], [-1])\n    ffi_api(dll.botan_x509_cert_verify,\n            [POINTER(c_int), c_void_p, c_void_p, c_size_t, c_void_p, c_size_t, c_char_p, c_size_t, c_char_p, c_uint64])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 7,
                  "endLine": 554,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\ndef _call_fn_returning_str(guess, fn):\n    # Assumes that anything called with this is returning plain ASCII strings\n    # (base64 data, algorithm names, etc)\n    v = _call_fn_returning_vec(guess, fn)\n    return v.decode('ascii')[:-1]\n\n",
                    "rendered": {
                      "text": "\ndef _call_fn_returning_str(guess, fn):\n    # Assumes that anything called with this is returning plain ASCII strings\n    # (base64 data, algorithm names, etc)\n    v = _call_fn_returning_vec(guess, fn)\n    return v.decode('ascii')[:-1]\n\n",
                      "markdown": "`\ndef _call_fn_returning_str(guess, fn):\n    # Assumes that anything called with this is returning plain ASCII strings\n    # (base64 data, algorithm names, etc)\n    v = _call_fn_returning_vec(guess, fn)\n    return v.decode('ascii')[:-1]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 918,
                  "startColumn": 29,
                  "endLine": 918,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        if final and self._is_encrypt:\n            tag_len = self.tag_length()\n            if tag_len > 0:\n                # AEADs don't expand beyond the tag\n                extra_bytes = tag_len\n            elif self._is_cbc:\n                # Hack: the largest block size currently supported\n",
                    "rendered": {
                      "text": "        if final and self._is_encrypt:\n            tag_len = self.tag_length()\n            if tag_len > 0:\n                # AEADs don't expand beyond the tag\n                extra_bytes = tag_len\n            elif self._is_cbc:\n                # Hack: the largest block size currently supported\n",
                      "markdown": "`        if final and self._is_encrypt:\n            tag_len = self.tag_length()\n            if tag_len > 0:\n                # AEADs don't expand beyond the tag\n                extra_bytes = tag_len\n            elif self._is_cbc:\n                # Hack: the largest block size currently supported\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 5,
                  "endLine": 13,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Botan is released under the Simplified BSD License (see license.txt)\n\nThis module uses the ctypes module and is usable by programs running\nunder at least CPython 3.x, and PyPy\n\nIt uses botan's ffi module, which exposes a C API. This version\nof the Python wrapper requires FFI version 20230403, which was\n",
                    "rendered": {
                      "text": "Botan is released under the Simplified BSD License (see license.txt)\n\nThis module uses the ctypes module and is usable by programs running\nunder at least CPython 3.x, and PyPy\n\nIt uses botan's ffi module, which exposes a C API. This version\nof the Python wrapper requires FFI version 20230403, which was\n",
                      "markdown": "`Botan is released under the Simplified BSD License (see license.txt)\n\nThis module uses the ctypes module and is usable by programs running\nunder at least CPython 3.x, and PyPy\n\nIt uses botan's ffi module, which exposes a C API. This version\nof the Python wrapper requires FFI version 20230403, which was\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1598,
                  "startColumn": 7,
                  "endLine": 1598,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        return time.value\n\n    def not_after(self):\n        time = c_uint64(0)\n        _DLL.botan_x509_cert_not_after(self.__obj, byref(time))\n        return time.value\n\n",
                    "rendered": {
                      "text": "        return time.value\n\n    def not_after(self):\n        time = c_uint64(0)\n        _DLL.botan_x509_cert_not_after(self.__obj, byref(time))\n        return time.value\n\n",
                      "markdown": "`        return time.value\n\n    def not_after(self):\n        time = c_uint64(0)\n        _DLL.botan_x509_cert_not_after(self.__obj, byref(time))\n        return time.value\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1593,
                  "startColumn": 7,
                  "endLine": 1593,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        return rc == 0\n\n    def not_before(self):\n        time = c_uint64(0)\n        _DLL.botan_x509_cert_not_before(self.__obj, byref(time))\n        return time.value\n\n",
                    "rendered": {
                      "text": "        return rc == 0\n\n    def not_before(self):\n        time = c_uint64(0)\n        _DLL.botan_x509_cert_not_before(self.__obj, byref(time))\n        return time.value\n\n",
                      "markdown": "`        return rc == 0\n\n    def not_before(self):\n        time = c_uint64(0)\n        _DLL.botan_x509_cert_not_before(self.__obj, byref(time))\n        return time.value\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1543,
                  "startColumn": 25,
                  "endLine": 1544,
                  "snippet": {
                    "text": "            # UTC time\n            struct_time = strptime(expires, \"%y%m%d%H%M%SZ\")\n        elif len(expires) == 15:\n            # Generalized time\n            struct_time = strptime(expires, \"%Y%m%d%H%M%SZ\")\n        else:\n            raise BotanException(\"Unexpected date/time format for x509 expire time\")\n\n",
                    "rendered": {
                      "text": "            # UTC time\n            struct_time = strptime(expires, \"%y%m%d%H%M%SZ\")\n        elif len(expires) == 15:\n            # Generalized time\n            struct_time = strptime(expires, \"%Y%m%d%H%M%SZ\")\n        else:\n            raise BotanException(\"Unexpected date/time format for x509 expire time\")\n\n",
                      "markdown": "`            # UTC time\n            struct_time = strptime(expires, \"%y%m%d%H%M%SZ\")\n        elif len(expires) == 15:\n            # Generalized time\n            struct_time = strptime(expires, \"%Y%m%d%H%M%SZ\")\n        else:\n            raise BotanException(\"Unexpected date/time format for x509 expire time\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1540,
                  "startColumn": 17,
                  "endLine": 1541,
                  "snippet": {
                    "text": "        expires = _call_fn_returning_str(\n            16, lambda b, bl: _DLL.botan_x509_cert_get_time_expires(self.__obj, b, bl))\n        if len(expires) == 13:\n            # UTC time\n            struct_time = strptime(expires, \"%y%m%d%H%M%SZ\")\n        elif len(expires) == 15:\n            # Generalized time\n            struct_time = strptime(expires, \"%Y%m%d%H%M%SZ\")\n",
                    "rendered": {
                      "text": "        expires = _call_fn_returning_str(\n            16, lambda b, bl: _DLL.botan_x509_cert_get_time_expires(self.__obj, b, bl))\n        if len(expires) == 13:\n            # UTC time\n            struct_time = strptime(expires, \"%y%m%d%H%M%SZ\")\n        elif len(expires) == 15:\n            # Generalized time\n            struct_time = strptime(expires, \"%Y%m%d%H%M%SZ\")\n",
                      "markdown": "`        expires = _call_fn_returning_str(\n            16, lambda b, bl: _DLL.botan_x509_cert_get_time_expires(self.__obj, b, bl))\n        if len(expires) == 13:\n            # UTC time\n            struct_time = strptime(expires, \"%y%m%d%H%M%SZ\")\n        elif len(expires) == 15:\n            # Generalized time\n            struct_time = strptime(expires, \"%Y%m%d%H%M%SZ\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1529,
                  "startColumn": 25,
                  "endLine": 1530,
                  "snippet": {
                    "text": "            # UTC time\n            struct_time = strptime(starts, \"%y%m%d%H%M%SZ\")\n        elif len(starts) == 15:\n            # Generalized time\n            struct_time = strptime(starts, \"%Y%m%d%H%M%SZ\")\n        else:\n            raise BotanException(\"Unexpected date/time format for x509 start time\")\n\n",
                    "rendered": {
                      "text": "            # UTC time\n            struct_time = strptime(starts, \"%y%m%d%H%M%SZ\")\n        elif len(starts) == 15:\n            # Generalized time\n            struct_time = strptime(starts, \"%Y%m%d%H%M%SZ\")\n        else:\n            raise BotanException(\"Unexpected date/time format for x509 start time\")\n\n",
                      "markdown": "`            # UTC time\n            struct_time = strptime(starts, \"%y%m%d%H%M%SZ\")\n        elif len(starts) == 15:\n            # Generalized time\n            struct_time = strptime(starts, \"%Y%m%d%H%M%SZ\")\n        else:\n            raise BotanException(\"Unexpected date/time format for x509 start time\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 1526,
                  "startColumn": 17,
                  "endLine": 1527,
                  "snippet": {
                    "text": "        starts = _call_fn_returning_str(\n            16, lambda b, bl: _DLL.botan_x509_cert_get_time_starts(self.__obj, b, bl))\n        if len(starts) == 13:\n            # UTC time\n            struct_time = strptime(starts, \"%y%m%d%H%M%SZ\")\n        elif len(starts) == 15:\n            # Generalized time\n            struct_time = strptime(starts, \"%Y%m%d%H%M%SZ\")\n",
                    "rendered": {
                      "text": "        starts = _call_fn_returning_str(\n            16, lambda b, bl: _DLL.botan_x509_cert_get_time_starts(self.__obj, b, bl))\n        if len(starts) == 13:\n            # UTC time\n            struct_time = strptime(starts, \"%y%m%d%H%M%SZ\")\n        elif len(starts) == 15:\n            # Generalized time\n            struct_time = strptime(starts, \"%Y%m%d%H%M%SZ\")\n",
                      "markdown": "`        starts = _call_fn_returning_str(\n            16, lambda b, bl: _DLL.botan_x509_cert_get_time_starts(self.__obj, b, bl))\n        if len(starts) == 13:\n            # UTC time\n            struct_time = strptime(starts, \"%y%m%d%H%M%SZ\")\n        elif len(starts) == 15:\n            # Generalized time\n            struct_time = strptime(starts, \"%Y%m%d%H%M%SZ\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 918,
                  "startColumn": 29,
                  "endLine": 918,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        if final and self._is_encrypt:\n            tag_len = self.tag_length()\n            if tag_len > 0:\n                # AEADs don't expand beyond the tag\n                extra_bytes = tag_len\n            elif self._is_cbc:\n                # Hack: the largest block size currently supported\n",
                    "rendered": {
                      "text": "        if final and self._is_encrypt:\n            tag_len = self.tag_length()\n            if tag_len > 0:\n                # AEADs don't expand beyond the tag\n                extra_bytes = tag_len\n            elif self._is_cbc:\n                # Hack: the largest block size currently supported\n",
                      "markdown": "`        if final and self._is_encrypt:\n            tag_len = self.tag_length()\n            if tag_len > 0:\n                # AEADs don't expand beyond the tag\n                extra_bytes = tag_len\n            elif self._is_cbc:\n                # Hack: the largest block size currently supported\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 35,
                  "endLine": 85,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        except OSError:\n            pass\n\n    raise BotanException(\"Could not find a usable Botan shared object library\")\n\nVIEW_BIN_CALLBACK = CFUNCTYPE(c_int, c_void_p, POINTER(c_char), c_size_t)\nVIEW_STR_CALLBACK = CFUNCTYPE(c_int, c_void_p, c_char_p, c_size_t)\n",
                    "rendered": {
                      "text": "        except OSError:\n            pass\n\n    raise BotanException(\"Could not find a usable Botan shared object library\")\n\nVIEW_BIN_CALLBACK = CFUNCTYPE(c_int, c_void_p, POINTER(c_char), c_size_t)\nVIEW_STR_CALLBACK = CFUNCTYPE(c_int, c_void_p, c_char_p, c_size_t)\n",
                      "markdown": "`        except OSError:\n            pass\n\n    raise BotanException(\"Could not find a usable Botan shared object library\")\n\nVIEW_BIN_CALLBACK = CFUNCTYPE(c_int, c_void_p, POINTER(c_char), c_size_t)\nVIEW_STR_CALLBACK = CFUNCTYPE(c_int, c_void_p, c_char_p, c_size_t)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 34,
                  "endLine": 25,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    c_void_p, c_size_t, c_uint8, c_uint32, c_uint64, c_int, c_uint, c_char, c_char_p, addressof\n\nfrom sys import platform\nfrom time import strptime, mktime, time as system_time\nfrom binascii import hexlify\nfrom datetime import datetime\n\n",
                    "rendered": {
                      "text": "    c_void_p, c_size_t, c_uint8, c_uint32, c_uint64, c_int, c_uint, c_char, c_char_p, addressof\n\nfrom sys import platform\nfrom time import strptime, mktime, time as system_time\nfrom binascii import hexlify\nfrom datetime import datetime\n\n",
                      "markdown": "`    c_void_p, c_size_t, c_uint8, c_uint32, c_uint64, c_int, c_uint, c_char, c_char_p, addressof\n\nfrom sys import platform\nfrom time import strptime, mktime, time as system_time\nfrom binascii import hexlify\nfrom datetime import datetime\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/lib/python3.12/site-packages/botan3.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 4,
                  "endLine": 25,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    c_void_p, c_size_t, c_uint8, c_uint32, c_uint64, c_int, c_uint, c_char, c_char_p, addressof\n\nfrom sys import platform\nfrom time import strptime, mktime, time as system_time\nfrom binascii import hexlify\nfrom datetime import datetime\n\n",
                    "rendered": {
                      "text": "    c_void_p, c_size_t, c_uint8, c_uint32, c_uint64, c_int, c_uint, c_char, c_char_p, addressof\n\nfrom sys import platform\nfrom time import strptime, mktime, time as system_time\nfrom binascii import hexlify\nfrom datetime import datetime\n\n",
                      "markdown": "`    c_void_p, c_size_t, c_uint8, c_uint32, c_uint64, c_int, c_uint, c_char, c_char_p, addressof\n\nfrom sys import platform\nfrom time import strptime, mktime, time as system_time\nfrom binascii import hexlify\nfrom datetime import datetime\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/roadmap.rst"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "endLine": 42,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nOne major change already planned for Botan 4 is that in this release, Public_Key\nwill no longer derive from Private_Key. And similarly, specific private keys\n(for example RSA_PrivateKey) will no longer derive from their corresponding\npublic key type.\n",
                    "rendered": {
                      "text": "\nOne major change already planned for Botan 4 is that in this release, Public_Key\nwill no longer derive from Private_Key. And similarly, specific private keys\n(for example RSA_PrivateKey) will no longer derive from their corresponding\npublic key type.\n",
                      "markdown": "`\nOne major change already planned for Botan 4 is that in this release, Public_Key\nwill no longer derive from Private_Key. And similarly, specific private keys\n(for example RSA_PrivateKey) will no longer derive from their corresponding\npublic key type.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/roadmap.rst"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 27,
                  "endLine": 41,
                  "endColumn": 38,
                  "snippet": {
                    "text": "version. This is unlikely to occur before 2027, at the earliest.\n\nOne major change already planned for Botan 4 is that in this release, Public_Key\nwill no longer derive from Private_Key. And similarly, specific private keys\n(for example RSA_PrivateKey) will no longer derive from their corresponding\npublic key type.\n",
                    "rendered": {
                      "text": "version. This is unlikely to occur before 2027, at the earliest.\n\nOne major change already planned for Botan 4 is that in this release, Public_Key\nwill no longer derive from Private_Key. And similarly, specific private keys\n(for example RSA_PrivateKey) will no longer derive from their corresponding\npublic key type.\n",
                      "markdown": "`version. This is unlikely to occur before 2027, at the earliest.\n\nOne major change already planned for Botan 4 is that in this release, Public_Key\nwill no longer derive from Private_Key. And similarly, specific private keys\n(for example RSA_PrivateKey) will no longer derive from their corresponding\npublic key type.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/roadmap.rst"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 16,
                  "endLine": 26,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  will add several new post-quantum algorithms including LMS signatures\n  and Classic McEliece.\n\n* New ECC based password authenticated key exchanges, to replace SRP.\n  The most likely candidate algorithms are CPace and OPAQUE.\n\n* Adding an implementation of BLS12-381 elliptic curve pairing.\n",
                    "rendered": {
                      "text": "  will add several new post-quantum algorithms including LMS signatures\n  and Classic McEliece.\n\n* New ECC based password authenticated key exchanges, to replace SRP.\n  The most likely candidate algorithms are CPace and OPAQUE.\n\n* Adding an implementation of BLS12-381 elliptic curve pairing.\n",
                      "markdown": "`  will add several new post-quantum algorithms including LMS signatures\n  and Classic McEliece.\n\n* New ECC based password authenticated key exchanges, to replace SRP.\n  The most likely candidate algorithms are CPace and OPAQUE.\n\n* Adding an implementation of BLS12-381 elliptic curve pairing.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/roadmap.rst"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 47,
                  "endLine": 38,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\nAt this time there is no immediate plan for a new major version. When it occurs,\nit will remove functionality currently marked as deprecated, and adopt a new C++\nversion. This is unlikely to occur before 2027, at the earliest.\n\nOne major change already planned for Botan 4 is that in this release, Public_Key\nwill no longer derive from Private_Key. And similarly, specific private keys\n",
                    "rendered": {
                      "text": "\nAt this time there is no immediate plan for a new major version. When it occurs,\nit will remove functionality currently marked as deprecated, and adopt a new C++\nversion. This is unlikely to occur before 2027, at the earliest.\n\nOne major change already planned for Botan 4 is that in this release, Public_Key\nwill no longer derive from Private_Key. And similarly, specific private keys\n",
                      "markdown": "`\nAt this time there is no immediate plan for a new major version. When it occurs,\nit will remove functionality currently marked as deprecated, and adopt a new C++\nversion. This is unlikely to occur before 2027, at the earliest.\n\nOne major change already planned for Botan 4 is that in this release, Public_Key\nwill no longer derive from Private_Key. And similarly, specific private keys\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/roadmap.rst"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 36,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\nBotan 4\n---------------\n\nAt this time there is no immediate plan for a new major version. When it occurs,\nit will remove functionality currently marked as deprecated, and adopt a new C++\nversion. This is unlikely to occur before 2027, at the earliest.\n\n",
                    "rendered": {
                      "text": "\nBotan 4\n---------------\n\nAt this time there is no immediate plan for a new major version. When it occurs,\nit will remove functionality currently marked as deprecated, and adopt a new C++\nversion. This is unlikely to occur before 2027, at the earliest.\n\n",
                      "markdown": "`\nBotan 4\n---------------\n\nAt this time there is no immediate plan for a new major version. When it occurs,\nit will remove functionality currently marked as deprecated, and adopt a new C++\nversion. This is unlikely to occur before 2027, at the earliest.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/roadmap.rst"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 7,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "Botan 4\n---------------\n\nAt this time there is no immediate plan for a new major version. When it occurs,\nit will remove functionality currently marked as deprecated, and adopt a new C++\nversion. This is unlikely to occur before 2027, at the earliest.\n\n",
                    "rendered": {
                      "text": "Botan 4\n---------------\n\nAt this time there is no immediate plan for a new major version. When it occurs,\nit will remove functionality currently marked as deprecated, and adopt a new C++\nversion. This is unlikely to occur before 2027, at the earliest.\n\n",
                      "markdown": "`Botan 4\n---------------\n\nAt this time there is no immediate plan for a new major version. When it occurs,\nit will remove functionality currently marked as deprecated, and adopt a new C++\nversion. This is unlikely to occur before 2027, at the earliest.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/packaging.rst"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 18,
                  "endLine": 55,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\nWe (Botan upstream) *strongly* prefer that downstream distributions maintain no\nlong-term patches against Botan. Even if it is a build problem which probably\nonly affects your environment, please open an issue on github and include the\npatch you are using. Perhaps the issue does affect other users, and even if not\nit would be better for everyone if the library were improved so it were not\nnecessary for the patch to be created in the first place. For example, having to\n",
                    "rendered": {
                      "text": "\nWe (Botan upstream) *strongly* prefer that downstream distributions maintain no\nlong-term patches against Botan. Even if it is a build problem which probably\nonly affects your environment, please open an issue on github and include the\npatch you are using. Perhaps the issue does affect other users, and even if not\nit would be better for everyone if the library were improved so it were not\nnecessary for the patch to be created in the first place. For example, having to\n",
                      "markdown": "`\nWe (Botan upstream) *strongly* prefer that downstream distributions maintain no\nlong-term patches against Botan. Even if it is a build problem which probably\nonly affects your environment, please open an issue on github and include the\npatch you are using. Perhaps the issue does affect other users, and even if not\nit would be better for everyone if the library were improved so it were not\nnecessary for the patch to be created in the first place. For example, having to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/packaging.rst"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 66,
                  "endLine": 18,
                  "endColumn": 70,
                  "snippet": {
                    "text": "Set Path to the System CA bundle\n---------------------------------\n\nMost Unix/Linux systems maintain a list of trusted CA certificates at some well\nknown path like ``/etc/ssl/certs/ca-certificates.crt`` or\n``/etc/ssl/cert.pem``. Unfortunately the exact path varies between systems. Use\n``--system-cert-bundle=PATH`` to set this path. If the option is not used,\n",
                    "rendered": {
                      "text": "Set Path to the System CA bundle\n---------------------------------\n\nMost Unix/Linux systems maintain a list of trusted CA certificates at some well\nknown path like ``/etc/ssl/certs/ca-certificates.crt`` or\n``/etc/ssl/cert.pem``. Unfortunately the exact path varies between systems. Use\n``--system-cert-bundle=PATH`` to set this path. If the option is not used,\n",
                      "markdown": "`Set Path to the System CA bundle\n---------------------------------\n\nMost Unix/Linux systems maintain a list of trusted CA certificates at some well\nknown path like ``/etc/ssl/certs/ca-certificates.crt`` or\n``/etc/ssl/cert.pem``. Unfortunately the exact path varies between systems. Use\n``--system-cert-bundle=PATH`` to set this path. If the option is not used,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/packaging.rst"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 40,
                  "endLine": 65,
                  "endColumn": 49,
                  "snippet": {
                    "text": "Obviously nothing in the BSD-2 license prevents you from distributing patches or\nmodified versions of Botan however you please. But long term patches by\ndownstream distributors have a tendency to bitrot and sometimes even result in\nsecurity problems (such as in the Debian OpenSSL RNG fiasco) because the patches\nare never reviewed by the library developers. So we try to discourage them, and\nwork to ensure they are never necessary.\n",
                    "rendered": {
                      "text": "Obviously nothing in the BSD-2 license prevents you from distributing patches or\nmodified versions of Botan however you please. But long term patches by\ndownstream distributors have a tendency to bitrot and sometimes even result in\nsecurity problems (such as in the Debian OpenSSL RNG fiasco) because the patches\nare never reviewed by the library developers. So we try to discourage them, and\nwork to ensure they are never necessary.\n",
                      "markdown": "`Obviously nothing in the BSD-2 license prevents you from distributing patches or\nmodified versions of Botan however you please. But long term patches by\ndownstream distributors have a tendency to bitrot and sometimes even result in\nsecurity problems (such as in the Debian OpenSSL RNG fiasco) because the patches\nare never reviewed by the library developers. So we try to discourage them, and\nwork to ensure they are never necessary.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/openssl_migration_guide.rst"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 37,
                  "endLine": 327,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            fprintf(stderr, \"Error opening private key file.\\n\");\n            return 1;\n        }\n        EVP_PKEY* privKey = PEM_read_PrivateKey(privKeyFile, NULL, NULL, NULL);\n        fclose(privKeyFile);\n\n        // String to encrypt\n",
                    "rendered": {
                      "text": "            fprintf(stderr, \"Error opening private key file.\\n\");\n            return 1;\n        }\n        EVP_PKEY* privKey = PEM_read_PrivateKey(privKeyFile, NULL, NULL, NULL);\n        fclose(privKeyFile);\n\n        // String to encrypt\n",
                      "markdown": "`            fprintf(stderr, \"Error opening private key file.\\n\");\n            return 1;\n        }\n        EVP_PKEY* privKey = PEM_read_PrivateKey(privKeyFile, NULL, NULL, NULL);\n        fclose(privKeyFile);\n\n        // String to encrypt\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/openssl_migration_guide.rst"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 74,
                  "endLine": 105,
                  "endColumn": 82,
                  "snippet": {
                    "text": "from a directory or from an SQL database. It even provides an interface for implementing\nyour own certificate store.\nThen we add the end-entity certificate and the intermediate certificates to the ``end_certs`` chain.\nOptionally, we can set up path validation restrictions, specify usage and hostname for DNS,\nand then call ``x509_path_validate()`` to :ref:`verify the certificate chain <api_ref/x509:path validation>`.\n\n\n",
                    "rendered": {
                      "text": "from a directory or from an SQL database. It even provides an interface for implementing\nyour own certificate store.\nThen we add the end-entity certificate and the intermediate certificates to the ``end_certs`` chain.\nOptionally, we can set up path validation restrictions, specify usage and hostname for DNS,\nand then call ``x509_path_validate()`` to :ref:`verify the certificate chain <api_ref/x509:path validation>`.\n\n\n",
                      "markdown": "`from a directory or from an SQL database. It even provides an interface for implementing\nyour own certificate store.\nThen we add the end-entity certificate and the intermediate certificates to the ``end_certs`` chain.\nOptionally, we can set up path validation restrictions, specify usage and hostname for DNS,\nand then call ``x509_path_validate()`` to :ref:`verify the certificate chain <api_ref/x509:path validation>`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/openssl_migration_guide.rst"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 30,
                  "endLine": 250,
                  "endColumn": 96,
                  "snippet": {
                    "text": "\n    int main() {\n        // Hex-encoded key and plaintext block\n        const char* key_hex = \"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\";\n        const char* plaintext_hex = \"00112233445566778899AABBCCDDEEFF\";\n\n        // Convert hex-encoded key and plaintext block to binary\n",
                    "rendered": {
                      "text": "\n    int main() {\n        // Hex-encoded key and plaintext block\n        const char* key_hex = \"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\";\n        const char* plaintext_hex = \"00112233445566778899AABBCCDDEEFF\";\n\n        // Convert hex-encoded key and plaintext block to binary\n",
                      "markdown": "`\n    int main() {\n        // Hex-encoded key and plaintext block\n        const char* key_hex = \"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\";\n        const char* plaintext_hex = \"00112233445566778899AABBCCDDEEFF\";\n\n        // Convert hex-encoded key and plaintext block to binary\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/openssl_migration_guide.rst"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 68,
                  "endLine": 331,
                  "endColumn": 75,
                  "snippet": {
                    "text": "        fclose(privKeyFile);\n\n        // String to encrypt\n        unsigned char* plaintext = \"Your great-grandfather gave this watch to your granddad for good luck. Unfortunately, Dane's luck wasn't as good as his old man's.\";\n        size_t plaintext_len = strlen(plaintext);\n\n        // Encrypt\n",
                    "rendered": {
                      "text": "        fclose(privKeyFile);\n\n        // String to encrypt\n        unsigned char* plaintext = \"Your great-grandfather gave this watch to your granddad for good luck. Unfortunately, Dane's luck wasn't as good as his old man's.\";\n        size_t plaintext_len = strlen(plaintext);\n\n        // Encrypt\n",
                      "markdown": "`        fclose(privKeyFile);\n\n        // String to encrypt\n        unsigned char* plaintext = \"Your great-grandfather gave this watch to your granddad for good luck. Unfortunately, Dane's luck wasn't as good as his old man's.\";\n        size_t plaintext_len = strlen(plaintext);\n\n        // Encrypt\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/openssl_migration_guide.rst"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 49,
                  "endLine": 32,
                  "endColumn": 58,
                  "snippet": {
                    "text": "X.509\n------\n\nConsider the following application code that uses OpenSSL to verify a\ncertificate chain consisting of an end-entity certificate, two untrusted intermediate\ncertificates, and a trusted root certificate.\n\n",
                    "rendered": {
                      "text": "X.509\n------\n\nConsider the following application code that uses OpenSSL to verify a\ncertificate chain consisting of an end-entity certificate, two untrusted intermediate\ncertificates, and a trusted root certificate.\n\n",
                      "markdown": "`X.509\n------\n\nConsider the following application code that uses OpenSSL to verify a\ncertificate chain consisting of an end-entity certificate, two untrusted intermediate\ncertificates, and a trusted root certificate.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/openssl_migration_guide.rst"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 21,
                  "endLine": 25,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  whereas Botan's API is more consistent\n* OpenSSL's API is mostly underdocumented, whereas Botan targets 100% Doxygen\n  coverage for all public API\n* It is often hard to find example code for OpenSSL, whereas Botan provides\n  many :ref:`examples <index:examples>` and lots of\n  `test code <https://github.com/randombit/botan/tree/master/src/tests>`_.\n\n",
                    "rendered": {
                      "text": "  whereas Botan's API is more consistent\n* OpenSSL's API is mostly underdocumented, whereas Botan targets 100% Doxygen\n  coverage for all public API\n* It is often hard to find example code for OpenSSL, whereas Botan provides\n  many :ref:`examples <index:examples>` and lots of\n  `test code <https://github.com/randombit/botan/tree/master/src/tests>`_.\n\n",
                      "markdown": "`  whereas Botan's API is more consistent\n* OpenSSL's API is mostly underdocumented, whereas Botan targets 100% Doxygen\n  coverage for all public API\n* It is often hard to find example code for OpenSSL, whereas Botan provides\n  many :ref:`examples <index:examples>` and lots of\n  `test code <https://github.com/randombit/botan/tree/master/src/tests>`_.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/openssl_migration_guide.rst"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 33,
                  "endLine": 18,
                  "endColumn": 42,
                  "snippet": {
                    "text": "General Remarks\n----------------\n\n* Botan is a C++ library, whereas OpenSSL is a C library\n* Botan also provides a :doc:`C API <api_ref/ffi>` for most of its functionality,\n  but it is not a 1:1 mapping of the C++ API\n* With OpenSSL's API, there are sometimes multiple ways to achieve the same result,\n",
                    "rendered": {
                      "text": "General Remarks\n----------------\n\n* Botan is a C++ library, whereas OpenSSL is a C library\n* Botan also provides a :doc:`C API <api_ref/ffi>` for most of its functionality,\n  but it is not a 1:1 mapping of the C++ API\n* With OpenSSL's API, there are sometimes multiple ways to achieve the same result,\n",
                      "markdown": "`General Remarks\n----------------\n\n* Botan is a C++ library, whereas OpenSSL is a C library\n* Botan also provides a :doc:`C API <api_ref/ffi>` for most of its functionality,\n  but it is not a 1:1 mapping of the C++ API\n* With OpenSSL's API, there are sometimes multiple ways to achieve the same result,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/openssl_migration_guide.rst"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 6,
                  "endLine": 11,
                  "endColumn": 15,
                  "snippet": {
                    "text": "`GitHub <https://github.com/randombit/botan/issues>`_.\n\n.. note::\n   The OpenSSL code snippets in this guide may not be 100% correct. They are\n   intended to show the differences in using OpenSSL's and Botan's APIs\n   rather to be a complete and correct example.\n\n",
                    "rendered": {
                      "text": "`GitHub <https://github.com/randombit/botan/issues>`_.\n\n.. note::\n   The OpenSSL code snippets in this guide may not be 100% correct. They are\n   intended to show the differences in using OpenSSL's and Botan's APIs\n   rather to be a complete and correct example.\n\n",
                      "markdown": "``GitHub <https://github.com/randombit/botan/issues>`_.\n\n.. note::\n   The OpenSSL code snippets in this guide may not be 100% correct. They are\n   intended to show the differences in using OpenSSL's and Botan's APIs\n   rather to be a complete and correct example.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/openssl_migration_guide.rst"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 61,
                  "endLine": 4,
                  "endColumn": 70,
                  "snippet": {
                    "text": "OpenSSL 1.1 to Botan 3.x Migration\n==================================\n\nThis aims to be a rough guide for migrating applications from OpenSSL 1.1 to Botan 3.x.\n\nThis guide attempts to be, but is not, complete. If you run into a problem while\nmigrating code that does not seem to be described here, please open an issue on\n",
                    "rendered": {
                      "text": "OpenSSL 1.1 to Botan 3.x Migration\n==================================\n\nThis aims to be a rough guide for migrating applications from OpenSSL 1.1 to Botan 3.x.\n\nThis guide attempts to be, but is not, complete. If you run into a problem while\nmigrating code that does not seem to be described here, please open an issue on\n",
                      "markdown": "`OpenSSL 1.1 to Botan 3.x Migration\n==================================\n\nThis aims to be a rough guide for migrating applications from OpenSSL 1.1 to Botan 3.x.\n\nThis guide attempts to be, but is not, complete. If you run into a problem while\nmigrating code that does not seem to be described here, please open an issue on\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 778,
                  "startColumn": 60,
                  "endLine": 778,
                  "endColumn": 68,
                  "snippet": {
                    "text": "``more_org_units`` and ``more_dns``.\n\nThere is another value that is only useful when creating a PKCS #10\nrequest, which is called ``challenge``. This is a challenge password,\nwhich you can later use to request certificate revocation (*if* the CA\nsupports doing revocations in this manner).\n\n",
                    "rendered": {
                      "text": "``more_org_units`` and ``more_dns``.\n\nThere is another value that is only useful when creating a PKCS #10\nrequest, which is called ``challenge``. This is a challenge password,\nwhich you can later use to request certificate revocation (*if* the CA\nsupports doing revocations in this manner).\n\n",
                      "markdown": "```more_org_units`` and ``more_dns``.\n\nThere is another value that is only useful when creating a PKCS #10\nrequest, which is called ``challenge``. This is a challenge password,\nwhich you can later use to request certificate revocation (*if* the CA\nsupports doing revocations in this manner).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 62,
                  "endLine": 740,
                  "endColumn": 73,
                  "snippet": {
                    "text": "transmit it to a CA, who signs it and returns a freshly minted X.509\ncertificate.\n\n.. cpp:function:: PKCS10_Request PKCS10_Request::create(const Private_Key& key, \\\n                                   const X509_DN& subject_dn, \\\n                                   const Extensions& extensions, \\\n                                   const std::string& hash_fn, \\\n",
                    "rendered": {
                      "text": "transmit it to a CA, who signs it and returns a freshly minted X.509\ncertificate.\n\n.. cpp:function:: PKCS10_Request PKCS10_Request::create(const Private_Key& key, \\\n                                   const X509_DN& subject_dn, \\\n                                   const Extensions& extensions, \\\n                                   const std::string& hash_fn, \\\n",
                      "markdown": "`transmit it to a CA, who signs it and returns a freshly minted X.509\ncertificate.\n\n.. cpp:function:: PKCS10_Request PKCS10_Request::create(const Private_Key& key, \\\n                                   const X509_DN& subject_dn, \\\n                                   const Extensions& extensions, \\\n                                   const std::string& hash_fn, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 731,
                  "startColumn": 40,
                  "endLine": 731,
                  "endColumn": 51,
                  "snippet": {
                    "text": "certificate requests:\n\n.. cpp:function:: PKCS10_Request create_cert_req( \\\n   const X509_Cert_Options& opts, const Private_Key& key, \\\n   const std::string& hash_fn, RandomNumberGenerator& rng)\n\nThis function acts quite similarly to\n",
                    "rendered": {
                      "text": "certificate requests:\n\n.. cpp:function:: PKCS10_Request create_cert_req( \\\n   const X509_Cert_Options& opts, const Private_Key& key, \\\n   const std::string& hash_fn, RandomNumberGenerator& rng)\n\nThis function acts quite similarly to\n",
                      "markdown": "`certificate requests:\n\n.. cpp:function:: PKCS10_Request create_cert_req( \\\n   const X509_Cert_Options& opts, const Private_Key& key, \\\n   const std::string& hash_fn, RandomNumberGenerator& rng)\n\nThis function acts quite similarly to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 40,
                  "endLine": 715,
                  "endColumn": 51,
                  "snippet": {
                    "text": "protocols. The library provides a utility function for this:\n\n.. cpp:function:: X509_Certificate create_self_signed_cert( \\\n   const X509_Cert_Options& opts, const Private_Key& key, \\\n   const std::string& hash_fn, RandomNumberGenerator& rng)\n\n   Where ``key`` is the private key you wish to use (the public key,\n",
                    "rendered": {
                      "text": "protocols. The library provides a utility function for this:\n\n.. cpp:function:: X509_Certificate create_self_signed_cert( \\\n   const X509_Cert_Options& opts, const Private_Key& key, \\\n   const std::string& hash_fn, RandomNumberGenerator& rng)\n\n   Where ``key`` is the private key you wish to use (the public key,\n",
                      "markdown": "`protocols. The library provides a utility function for this:\n\n.. cpp:function:: X509_Certificate create_self_signed_cert( \\\n   const X509_Cert_Options& opts, const Private_Key& key, \\\n   const std::string& hash_fn, RandomNumberGenerator& rng)\n\n   Where ``key`` is the private key you wish to use (the public key,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 619,
                  "startColumn": 41,
                  "endLine": 619,
                  "endColumn": 52,
                  "snippet": {
                    "text": "for creating RSA-PSS certificates.\n\n.. cpp:function:: X509_CA::X509_CA(const X509_Certificate& cert, \\\n                                   const Private_Key& key, \\\n                                   const std::string& hash_fn, \\\n                                   const std::string& padding_fn, \\\n                                   RandomNumberGenerator& rng)\n",
                    "rendered": {
                      "text": "for creating RSA-PSS certificates.\n\n.. cpp:function:: X509_CA::X509_CA(const X509_Certificate& cert, \\\n                                   const Private_Key& key, \\\n                                   const std::string& hash_fn, \\\n                                   const std::string& padding_fn, \\\n                                   RandomNumberGenerator& rng)\n",
                      "markdown": "`for creating RSA-PSS certificates.\n\n.. cpp:function:: X509_CA::X509_CA(const X509_Certificate& cert, \\\n                                   const Private_Key& key, \\\n                                   const std::string& hash_fn, \\\n                                   const std::string& padding_fn, \\\n                                   RandomNumberGenerator& rng)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 41,
                  "endLine": 604,
                  "endColumn": 52,
                  "snippet": {
                    "text": "a CA object is done by the following constructor:\n\n.. cpp:function:: X509_CA::X509_CA(const X509_Certificate& cert, \\\n                                   const Private_Key& key, \\\n                                   const std::string& hash_fn, \\\n                                   RandomNumberGenerator& rng)\n\n",
                    "rendered": {
                      "text": "a CA object is done by the following constructor:\n\n.. cpp:function:: X509_CA::X509_CA(const X509_Certificate& cert, \\\n                                   const Private_Key& key, \\\n                                   const std::string& hash_fn, \\\n                                   RandomNumberGenerator& rng)\n\n",
                      "markdown": "`a CA object is done by the following constructor:\n\n.. cpp:function:: X509_CA::X509_CA(const X509_Certificate& cert, \\\n                                   const Private_Key& key, \\\n                                   const std::string& hash_fn, \\\n                                   RandomNumberGenerator& rng)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 9,
                  "endLine": 474,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    const std::string& passwd, RandomNumberGenerator& rng, const std::string& table_prefix = \"\")\n\n     Create or open an existing certificate store from an sqlite database file.\n     The password in ``passwd`` will be used to encrypt private keys.\n\nPath Validation\n----------------------------------------\n",
                    "rendered": {
                      "text": "    const std::string& passwd, RandomNumberGenerator& rng, const std::string& table_prefix = \"\")\n\n     Create or open an existing certificate store from an sqlite database file.\n     The password in ``passwd`` will be used to encrypt private keys.\n\nPath Validation\n----------------------------------------\n",
                      "markdown": "`    const std::string& passwd, RandomNumberGenerator& rng, const std::string& table_prefix = \"\")\n\n     Create or open an existing certificate store from an sqlite database file.\n     The password in ``passwd`` will be used to encrypt private keys.\n\nPath Validation\n----------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 41,
                  "endLine": 445,
                  "endColumn": 52,
                  "snippet": {
                    "text": "     Inserts ``key`` for ``cert`` into the store, returns `false` if the key is\n     already known and `true` if insertion was successful.\n\n .. cpp:function:: void remove_key(const Private_Key& key)\n\n     Removes ``key`` from the store\n\n",
                    "rendered": {
                      "text": "     Inserts ``key`` for ``cert`` into the store, returns `false` if the key is\n     already known and `true` if insertion was successful.\n\n .. cpp:function:: void remove_key(const Private_Key& key)\n\n     Removes ``key`` from the store\n\n",
                      "markdown": "`     Inserts ``key`` for ``cert`` into the store, returns `false` if the key is\n     already known and `true` if insertion was successful.\n\n .. cpp:function:: void remove_key(const Private_Key& key)\n\n     Removes ``key`` from the store\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 71,
                  "endLine": 440,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\n     Returns all certificates for private key ``key``\n\n .. cpp:function:: bool insert_key(const X509_Certificate& cert, const Private_Key& key)\n\n     Inserts ``key`` for ``cert`` into the store, returns `false` if the key is\n     already known and `true` if insertion was successful.\n",
                    "rendered": {
                      "text": "\n     Returns all certificates for private key ``key``\n\n .. cpp:function:: bool insert_key(const X509_Certificate& cert, const Private_Key& key)\n\n     Inserts ``key`` for ``cert`` into the store, returns `false` if the key is\n     already known and `true` if insertion was successful.\n",
                      "markdown": "`\n     Returns all certificates for private key ``key``\n\n .. cpp:function:: bool insert_key(const X509_Certificate& cert, const Private_Key& key)\n\n     Inserts ``key`` for ``cert`` into the store, returns `false` if the key is\n     already known and `true` if insertion was successful.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 74,
                  "endLine": 436,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\n     Returns the private key for \"cert\" or an empty shared_ptr if none was found\n\n .. cpp:function:: std::vector<X509_Certificate> find_certs_for_key(const Private_Key& key) const\n\n     Returns all certificates for private key ``key``\n\n",
                    "rendered": {
                      "text": "\n     Returns the private key for \"cert\" or an empty shared_ptr if none was found\n\n .. cpp:function:: std::vector<X509_Certificate> find_certs_for_key(const Private_Key& key) const\n\n     Returns all certificates for private key ``key``\n\n",
                      "markdown": "`\n     Returns the private key for \"cert\" or an empty shared_ptr if none was found\n\n .. cpp:function:: std::vector<X509_Certificate> find_certs_for_key(const Private_Key& key) const\n\n     Returns all certificates for private key ``key``\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 41,
                  "endLine": 432,
                  "endColumn": 52,
                  "snippet": {
                    "text": "     Removes ``cert`` from the store. Returns `false` if the certificate could not\n     be found and `true` if removal was successful.\n\n .. cpp:function:: std::shared_ptr<const Private_Key> find_key(const X509_Certificate&) const\n\n     Returns the private key for \"cert\" or an empty shared_ptr if none was found\n\n",
                    "rendered": {
                      "text": "     Removes ``cert`` from the store. Returns `false` if the certificate could not\n     be found and `true` if removal was successful.\n\n .. cpp:function:: std::shared_ptr<const Private_Key> find_key(const X509_Certificate&) const\n\n     Returns the private key for \"cert\" or an empty shared_ptr if none was found\n\n",
                      "markdown": "`     Removes ``cert`` from the store. Returns `false` if the certificate could not\n     be found and `true` if removal was successful.\n\n .. cpp:function:: std::shared_ptr<const Private_Key> find_key(const X509_Certificate&) const\n\n     Returns the private key for \"cert\" or an empty shared_ptr if none was found\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 9,
                  "endLine": 420,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    const std::string& passwd, RandomNumberGenerator& rng, const std::string& table_prefix = \"\")\n\n     Create or open an existing certificate store from an SQL database.\n     The password in ``passwd`` will be used to encrypt private keys.\n\n .. cpp:function:: bool insert_cert(const X509_Certificate& cert)\n\n",
                    "rendered": {
                      "text": "    const std::string& passwd, RandomNumberGenerator& rng, const std::string& table_prefix = \"\")\n\n     Create or open an existing certificate store from an SQL database.\n     The password in ``passwd`` will be used to encrypt private keys.\n\n .. cpp:function:: bool insert_cert(const X509_Certificate& cert)\n\n",
                      "markdown": "`    const std::string& passwd, RandomNumberGenerator& rng, const std::string& table_prefix = \"\")\n\n     Create or open an existing certificate store from an SQL database.\n     The password in ``passwd`` will be used to encrypt private keys.\n\n .. cpp:function:: bool insert_cert(const X509_Certificate& cert)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 494,
                  "startColumn": 30,
                  "endLine": 494,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n   The last five parameters are optional. ``hostname`` specifies a hostname which is\n   matched against the subject DN in ``end_cert`` according to RFC 6125.\n   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n",
                    "rendered": {
                      "text": "\n   The last five parameters are optional. ``hostname`` specifies a hostname which is\n   matched against the subject DN in ``end_cert`` according to RFC 6125.\n   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n",
                      "markdown": "`\n   The last five parameters are optional. ``hostname`` specifies a hostname which is\n   matched against the subject DN in ``end_cert`` according to RFC 6125.\n   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 494,
                  "startColumn": 12,
                  "endLine": 494,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n   The last five parameters are optional. ``hostname`` specifies a hostname which is\n   matched against the subject DN in ``end_cert`` according to RFC 6125.\n   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n",
                    "rendered": {
                      "text": "\n   The last five parameters are optional. ``hostname`` specifies a hostname which is\n   matched against the subject DN in ``end_cert`` according to RFC 6125.\n   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n",
                      "markdown": "`\n   The last five parameters are optional. ``hostname`` specifies a hostname which is\n   matched against the subject DN in ``end_cert`` according to RFC 6125.\n   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 67,
                  "endLine": 492,
                  "endColumn": 75,
                  "snippet": {
                    "text": "   std::chrono::milliseconds ocsp_timeout = std::chrono::milliseconds(0), \\\n   const std::vector<std::optional<OCSP::Response>>& ocsp_resp = std::vector<std::optional<OCSP::Response>>())\n\n   The last five parameters are optional. ``hostname`` specifies a hostname which is\n   matched against the subject DN in ``end_cert`` according to RFC 6125.\n   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n",
                    "rendered": {
                      "text": "   std::chrono::milliseconds ocsp_timeout = std::chrono::milliseconds(0), \\\n   const std::vector<std::optional<OCSP::Response>>& ocsp_resp = std::vector<std::optional<OCSP::Response>>())\n\n   The last five parameters are optional. ``hostname`` specifies a hostname which is\n   matched against the subject DN in ``end_cert`` according to RFC 6125.\n   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n",
                      "markdown": "`   std::chrono::milliseconds ocsp_timeout = std::chrono::milliseconds(0), \\\n   const std::vector<std::optional<OCSP::Response>>& ocsp_resp = std::vector<std::optional<OCSP::Response>>())\n\n   The last five parameters are optional. ``hostname`` specifies a hostname which is\n   matched against the subject DN in ``end_cert`` according to RFC 6125.\n   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 44,
                  "endLine": 492,
                  "endColumn": 52,
                  "snippet": {
                    "text": "   std::chrono::milliseconds ocsp_timeout = std::chrono::milliseconds(0), \\\n   const std::vector<std::optional<OCSP::Response>>& ocsp_resp = std::vector<std::optional<OCSP::Response>>())\n\n   The last five parameters are optional. ``hostname`` specifies a hostname which is\n   matched against the subject DN in ``end_cert`` according to RFC 6125.\n   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n",
                    "rendered": {
                      "text": "   std::chrono::milliseconds ocsp_timeout = std::chrono::milliseconds(0), \\\n   const std::vector<std::optional<OCSP::Response>>& ocsp_resp = std::vector<std::optional<OCSP::Response>>())\n\n   The last five parameters are optional. ``hostname`` specifies a hostname which is\n   matched against the subject DN in ``end_cert`` according to RFC 6125.\n   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n",
                      "markdown": "`   std::chrono::milliseconds ocsp_timeout = std::chrono::milliseconds(0), \\\n   const std::vector<std::optional<OCSP::Response>>& ocsp_resp = std::vector<std::optional<OCSP::Response>>())\n\n   The last five parameters are optional. ``hostname`` specifies a hostname which is\n   matched against the subject DN in ``end_cert`` according to RFC 6125.\n   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 54,
                  "endLine": 486,
                  "endColumn": 62,
                  "snippet": {
                    "text": ".. cpp:function:: Path_Validation_Result \\\n   x509_path_validate(const X509_Certificate& end_cert, \\\n   const Path_Validation_Restrictions& restrictions, \\\n   const Certificate_Store& store, const std::string& hostname = \"\", \\\n   Usage_Type usage = Usage_Type::UNSPECIFIED, \\\n   std::chrono::system_clock::time_point validation_time = std::chrono::system_clock::now(), \\\n   std::chrono::milliseconds ocsp_timeout = std::chrono::milliseconds(0), \\\n",
                    "rendered": {
                      "text": ".. cpp:function:: Path_Validation_Result \\\n   x509_path_validate(const X509_Certificate& end_cert, \\\n   const Path_Validation_Restrictions& restrictions, \\\n   const Certificate_Store& store, const std::string& hostname = \"\", \\\n   Usage_Type usage = Usage_Type::UNSPECIFIED, \\\n   std::chrono::system_clock::time_point validation_time = std::chrono::system_clock::now(), \\\n   std::chrono::milliseconds ocsp_timeout = std::chrono::milliseconds(0), \\\n",
                      "markdown": "`.. cpp:function:: Path_Validation_Result \\\n   x509_path_validate(const X509_Certificate& end_cert, \\\n   const Path_Validation_Restrictions& restrictions, \\\n   const Certificate_Store& store, const std::string& hostname = \"\", \\\n   Usage_Type usage = Usage_Type::UNSPECIFIED, \\\n   std::chrono::system_clock::time_point validation_time = std::chrono::system_clock::now(), \\\n   std::chrono::milliseconds ocsp_timeout = std::chrono::milliseconds(0), \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 876,
                  "startColumn": 43,
                  "endLine": 876,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n .. cpp:function:: std::string base64_encode() const\n\n      Encode the current OCSP request as a base64 string.\n\nThen the response is parsed and validated, and if valid, can be consulted\nfor certificate status information.\n",
                    "rendered": {
                      "text": "\n .. cpp:function:: std::string base64_encode() const\n\n      Encode the current OCSP request as a base64 string.\n\nThen the response is parsed and validated, and if valid, can be consulted\nfor certificate status information.\n",
                      "markdown": "`\n .. cpp:function:: std::string base64_encode() const\n\n      Encode the current OCSP request as a base64 string.\n\nThen the response is parsed and validated, and if valid, can be consulted\nfor certificate status information.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 956,
                  "startColumn": 18,
                  "endLine": 956,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                                              const Certificate_Store* trusted_roots)\n\n   Assemble a OCSP request for serial number ``subject_serial`` and attempt to request\n   it to responder at URI ``ocsp_responder`` over a new HTTP socket, parses and returns\n   the response. If trusted_roots is not null, then the response is additionally\n   validated using OCSP response API ``check_signature``. Otherwise, this call must be\n   performed later by the application.\n",
                    "rendered": {
                      "text": "                                              const Certificate_Store* trusted_roots)\n\n   Assemble a OCSP request for serial number ``subject_serial`` and attempt to request\n   it to responder at URI ``ocsp_responder`` over a new HTTP socket, parses and returns\n   the response. If trusted_roots is not null, then the response is additionally\n   validated using OCSP response API ``check_signature``. Otherwise, this call must be\n   performed later by the application.\n",
                      "markdown": "`                                              const Certificate_Store* trusted_roots)\n\n   Assemble a OCSP request for serial number ``subject_serial`` and attempt to request\n   it to responder at URI ``ocsp_responder`` over a new HTTP socket, parses and returns\n   the response. If trusted_roots is not null, then the response is additionally\n   validated using OCSP response API ``check_signature``. Otherwise, this call must be\n   performed later by the application.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 50,
                  "endLine": 802,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\nMoreover, you can specify the padding scheme to be used when digital signatures\nare computed by calling function ``set_padding_scheme`` with a string\nrepresenting the padding scheme. This way, you can control the padding scheme\nfor self-signed certificates and PKCS #10 requests. The padding scheme used by\na CA when building a certificate or a certificate revocation list can be set in\nthe ``X509_CA`` constructor. The supported padding schemes can be found in\n",
                    "rendered": {
                      "text": "\nMoreover, you can specify the padding scheme to be used when digital signatures\nare computed by calling function ``set_padding_scheme`` with a string\nrepresenting the padding scheme. This way, you can control the padding scheme\nfor self-signed certificates and PKCS #10 requests. The padding scheme used by\na CA when building a certificate or a certificate revocation list can be set in\nthe ``X509_CA`` constructor. The supported padding schemes can be found in\n",
                      "markdown": "`\nMoreover, you can specify the padding scheme to be used when digital signatures\nare computed by calling function ``set_padding_scheme`` with a string\nrepresenting the padding scheme. This way, you can control the padding scheme\nfor self-signed certificates and PKCS #10 requests. The padding scheme used by\na CA when building a certificate or a certificate revocation list can be set in\nthe ``X509_CA`` constructor. The supported padding schemes can be found in\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 52,
                  "endLine": 692,
                  "endColumn": 56,
                  "snippet": {
                    "text": "  function returns a new ``X509_CRL`` to make available for\n  clients.\n\nThe ``CRL_Entry`` type is a structure that contains, at a minimum, the serial\nnumber of the revoked certificate. As serial numbers are never repeated, the\npairing of an issuer and a serial number (should) distinctly identify any\ncertificate. In this case, we represent the serial number as a\n",
                    "rendered": {
                      "text": "  function returns a new ``X509_CRL`` to make available for\n  clients.\n\nThe ``CRL_Entry`` type is a structure that contains, at a minimum, the serial\nnumber of the revoked certificate. As serial numbers are never repeated, the\npairing of an issuer and a serial number (should) distinctly identify any\ncertificate. In this case, we represent the serial number as a\n",
                      "markdown": "`  function returns a new ``X509_CRL`` to make available for\n  clients.\n\nThe ``CRL_Entry`` type is a structure that contains, at a minimum, the serial\nnumber of the revoked certificate. As serial numbers are never repeated, the\npairing of an issuer and a serial number (should) distinctly identify any\ncertificate. In this case, we represent the serial number as a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 58,
                  "endLine": 669,
                  "endColumn": 62,
                  "snippet": {
                    "text": "case, a CA should have a valid CRL available at all times.\n\nOf course, you might be wondering what to do if no certificates have\nbeen revoked. Never fear; empty CRLs, which revoke nothing at all, can\nbe issued. To generate a new, empty CRL, just call\n\n.. cpp:function:: X509_CRL X509_CA::new_crl(RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": "case, a CA should have a valid CRL available at all times.\n\nOf course, you might be wondering what to do if no certificates have\nbeen revoked. Never fear; empty CRLs, which revoke nothing at all, can\nbe issued. To generate a new, empty CRL, just call\n\n.. cpp:function:: X509_CRL X509_CA::new_crl(RandomNumberGenerator& rng, \\\n",
                      "markdown": "`case, a CA should have a valid CRL available at all times.\n\nOf course, you might be wondering what to do if no certificates have\nbeen revoked. Never fear; empty CRLs, which revoke nothing at all, can\nbe issued. To generate a new, empty CRL, just call\n\n.. cpp:function:: X509_CRL X509_CA::new_crl(RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 666,
                  "startColumn": 44,
                  "endLine": 666,
                  "endColumn": 48,
                  "snippet": {
                    "text": "important in many PKI systems. In fact, according to strict X.509\nrules, you must not validate any certificate if the appropriate CRLs\nare not available (though hardly any systems are that strict). In any\ncase, a CA should have a valid CRL available at all times.\n\nOf course, you might be wondering what to do if no certificates have\nbeen revoked. Never fear; empty CRLs, which revoke nothing at all, can\n",
                    "rendered": {
                      "text": "important in many PKI systems. In fact, according to strict X.509\nrules, you must not validate any certificate if the appropriate CRLs\nare not available (though hardly any systems are that strict). In any\ncase, a CA should have a valid CRL available at all times.\n\nOf course, you might be wondering what to do if no certificates have\nbeen revoked. Never fear; empty CRLs, which revoke nothing at all, can\n",
                      "markdown": "`important in many PKI systems. In fact, according to strict X.509\nrules, you must not validate any certificate if the appropriate CRLs\nare not available (though hardly any systems are that strict). In any\ncase, a CA should have a valid CRL available at all times.\n\nOf course, you might be wondering what to do if no certificates have\nbeen revoked. Never fear; empty CRLs, which revoke nothing at all, can\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 16,
                  "endLine": 638,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                         const X509_Time& not_before, \\\n                         const X509_Time& not_after)\n\nIf you need more control over the signing process, you can use the methods\n\n.. cpp:function:: static X509_Certificate X509_CA::make_cert(PK_Signer& signer, \\\n                                        RandomNumberGenerator& rng, \\\n",
                    "rendered": {
                      "text": "                         const X509_Time& not_before, \\\n                         const X509_Time& not_after)\n\nIf you need more control over the signing process, you can use the methods\n\n.. cpp:function:: static X509_Certificate X509_CA::make_cert(PK_Signer& signer, \\\n                                        RandomNumberGenerator& rng, \\\n",
                      "markdown": "`                         const X509_Time& not_before, \\\n                         const X509_Time& not_after)\n\nIf you need more control over the signing process, you can use the methods\n\n.. cpp:function:: static X509_Certificate X509_CA::make_cert(PK_Signer& signer, \\\n                                        RandomNumberGenerator& rng, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 69,
                  "endLine": 497,
                  "endColumn": 73,
                  "snippet": {
                    "text": "   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n   are validated. This is really only useful for testing. The default is the\n   current system clock's current time. ``ocsp_timeout`` sets the timeout for\n   OCSP requests. The default of 0 disables OCSP checks completely.\n",
                    "rendered": {
                      "text": "   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n   are validated. This is really only useful for testing. The default is the\n   current system clock's current time. ``ocsp_timeout`` sets the timeout for\n   OCSP requests. The default of 0 disables OCSP checks completely.\n",
                      "markdown": "`   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n   are validated. This is really only useful for testing. The default is the\n   current system clock's current time. ``ocsp_timeout`` sets the timeout for\n   OCSP requests. The default of 0 disables OCSP checks completely.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 42,
                  "endLine": 464,
                  "endColumn": 46,
                  "snippet": {
                    "text": "     A CRL is returned for each unique issuer DN.\n\nThe ``Certificate_Store_In_SQL`` class operates on an abstract ``SQL_Database``\nobject. If support for sqlite3 was enabled at build time, Botan includes an\nimplementation of this interface for sqlite3, and a subclass of\n``Certificate_Store_In_SQL`` which creates or opens a sqlite3 database.\n\n",
                    "rendered": {
                      "text": "     A CRL is returned for each unique issuer DN.\n\nThe ``Certificate_Store_In_SQL`` class operates on an abstract ``SQL_Database``\nobject. If support for sqlite3 was enabled at build time, Botan includes an\nimplementation of this interface for sqlite3, and a subclass of\n``Certificate_Store_In_SQL`` which creates or opens a sqlite3 database.\n\n",
                      "markdown": "`     A CRL is returned for each unique issuer DN.\n\nThe ``Certificate_Store_In_SQL`` class operates on an abstract ``SQL_Database``\nobject. If support for sqlite3 was enabled at build time, Botan includes an\nimplementation of this interface for sqlite3, and a subclass of\n``Certificate_Store_In_SQL`` which creates or opens a sqlite3 database.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 19,
                  "endLine": 9,
                  "endColumn": 23,
                  "snippet": {
                    "text": "A certificate is a binding between some identifying information\n(called a *subject*) and a public key. This binding is asserted by a\nsignature on the certificate, which is placed there by some authority\n(the *issuer*) that at least claims that it knows the subject named in\nthe certificate really \"owns\" the private key corresponding to the\npublic key in the certificate.\n\n",
                    "rendered": {
                      "text": "A certificate is a binding between some identifying information\n(called a *subject*) and a public key. This binding is asserted by a\nsignature on the certificate, which is placed there by some authority\n(the *issuer*) that at least claims that it knows the subject named in\nthe certificate really \"owns\" the private key corresponding to the\npublic key in the certificate.\n\n",
                      "markdown": "`A certificate is a binding between some identifying information\n(called a *subject*) and a public key. This binding is asserted by a\nsignature on the certificate, which is placed there by some authority\n(the *issuer*) that at least claims that it knows the subject named in\nthe certificate really \"owns\" the private key corresponding to the\npublic key in the certificate.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 936,
                  "startColumn": 9,
                  "endLine": 936,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  .. cpp:function:: const std::vector<uint8_t>& signer_key_hash() const\n\n     Return the SHA-1 hash of the public key of the signer. This is used to\n     help find the issuing certificate. The ``Certificate_Store`` API\n     ``find_cert_by_pubkey_sha1`` can search on this value.\n\n     This field is optional in OCSP responses, and may not be set.\n",
                    "rendered": {
                      "text": "  .. cpp:function:: const std::vector<uint8_t>& signer_key_hash() const\n\n     Return the SHA-1 hash of the public key of the signer. This is used to\n     help find the issuing certificate. The ``Certificate_Store`` API\n     ``find_cert_by_pubkey_sha1`` can search on this value.\n\n     This field is optional in OCSP responses, and may not be set.\n",
                      "markdown": "`  .. cpp:function:: const std::vector<uint8_t>& signer_key_hash() const\n\n     Return the SHA-1 hash of the public key of the signer. This is used to\n     help find the issuing certificate. The ``Certificate_Store`` API\n     ``find_cert_by_pubkey_sha1`` can search on this value.\n\n     This field is optional in OCSP responses, and may not be set.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 929,
                  "startColumn": 4,
                  "endLine": 929,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  .. cpp:function::  const X509_DN& signer_name() const\n\n     Return the distinguished name of the signer. This is used to help\n     find the issuing certificate.\n\n     This field is optional in OCSP responses, and may not be set.\n\n",
                    "rendered": {
                      "text": "  .. cpp:function::  const X509_DN& signer_name() const\n\n     Return the distinguished name of the signer. This is used to help\n     find the issuing certificate.\n\n     This field is optional in OCSP responses, and may not be set.\n\n",
                      "markdown": "`  .. cpp:function::  const X509_DN& signer_name() const\n\n     Return the distinguished name of the signer. This is used to help\n     find the issuing certificate.\n\n     This field is optional in OCSP responses, and may not be set.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 15,
                  "endLine": 924,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n  .. cpp:function:: const X509_Time& produced_at() const\n\n     Return the time this OCSP response was (claimed to be) produced at.\n\n  .. cpp:function::  const X509_DN& signer_name() const\n\n",
                    "rendered": {
                      "text": "\n  .. cpp:function:: const X509_Time& produced_at() const\n\n     Return the time this OCSP response was (claimed to be) produced at.\n\n  .. cpp:function::  const X509_DN& signer_name() const\n\n",
                      "markdown": "`\n  .. cpp:function:: const X509_Time& produced_at() const\n\n     Return the time this OCSP response was (claimed to be) produced at.\n\n  .. cpp:function::  const X509_DN& signer_name() const\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 919,
                  "startColumn": 14,
                  "endLine": 919,
                  "endColumn": 20,
                  "snippet": {
                    "text": "     The ``ref_time`` is normally just the system clock, but can be used if\n     validation against some other reference time is desired (such as for\n     testing, to verify an old previously valid OCSP response, or to use an\n     alternate time source such as the Roughtime protocol instead of the local\n     client system clock).\n\n  .. cpp:function:: const X509_Time& produced_at() const\n",
                    "rendered": {
                      "text": "     The ``ref_time`` is normally just the system clock, but can be used if\n     validation against some other reference time is desired (such as for\n     testing, to verify an old previously valid OCSP response, or to use an\n     alternate time source such as the Roughtime protocol instead of the local\n     client system clock).\n\n  .. cpp:function:: const X509_Time& produced_at() const\n",
                      "markdown": "`     The ``ref_time`` is normally just the system clock, but can be used if\n     validation against some other reference time is desired (such as for\n     testing, to verify an old previously valid OCSP response, or to use an\n     alternate time source such as the Roughtime protocol instead of the local\n     client system clock).\n\n  .. cpp:function:: const X509_Time& produced_at() const\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 917,
                  "startColumn": 44,
                  "endLine": 917,
                  "endColumn": 50,
                  "snippet": {
                    "text": "     Make sure to get the ordering of the issuer and subject certificates correct.\n\n     The ``ref_time`` is normally just the system clock, but can be used if\n     validation against some other reference time is desired (such as for\n     testing, to verify an old previously valid OCSP response, or to use an\n     alternate time source such as the Roughtime protocol instead of the local\n     client system clock).\n",
                    "rendered": {
                      "text": "     Make sure to get the ordering of the issuer and subject certificates correct.\n\n     The ``ref_time`` is normally just the system clock, but can be used if\n     validation against some other reference time is desired (such as for\n     testing, to verify an old previously valid OCSP response, or to use an\n     alternate time source such as the Roughtime protocol instead of the local\n     client system clock).\n",
                      "markdown": "`     Make sure to get the ordering of the issuer and subject certificates correct.\n\n     The ``ref_time`` is normally just the system clock, but can be used if\n     validation against some other reference time is desired (such as for\n     testing, to verify an old previously valid OCSP response, or to use an\n     alternate time source such as the Roughtime protocol instead of the local\n     client system clock).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 4,
                  "endLine": 894,
                  "endColumn": 10,
                  "snippet": {
                    "text": "                    const std::vector<Certificate_Store*>& trust_roots, \\\n                    const std::vector<X509_Certificate>& cert_path = const std::vector<X509_Certificate>()) const\n\n     Find the issuing certificate of the OCSP response, and check the signature.\n\n     If possible, pass the full certificate path being validated in\n     the optional ``cert_path`` argument: this additional information\n",
                    "rendered": {
                      "text": "                    const std::vector<Certificate_Store*>& trust_roots, \\\n                    const std::vector<X509_Certificate>& cert_path = const std::vector<X509_Certificate>()) const\n\n     Find the issuing certificate of the OCSP response, and check the signature.\n\n     If possible, pass the full certificate path being validated in\n     the optional ``cert_path`` argument: this additional information\n",
                      "markdown": "`                    const std::vector<Certificate_Store*>& trust_roots, \\\n                    const std::vector<X509_Certificate>& cert_path = const std::vector<X509_Certificate>()) const\n\n     Find the issuing certificate of the OCSP response, and check the signature.\n\n     If possible, pass the full certificate path being validated in\n     the optional ``cert_path`` argument: this additional information\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 876,
                  "startColumn": 42,
                  "endLine": 876,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n .. cpp:function:: std::string base64_encode() const\n\n      Encode the current OCSP request as a base64 string.\n\nThen the response is parsed and validated, and if valid, can be consulted\nfor certificate status information.\n",
                    "rendered": {
                      "text": "\n .. cpp:function:: std::string base64_encode() const\n\n      Encode the current OCSP request as a base64 string.\n\nThen the response is parsed and validated, and if valid, can be consulted\nfor certificate status information.\n",
                      "markdown": "`\n .. cpp:function:: std::string base64_encode() const\n\n      Encode the current OCSP request as a base64 string.\n\nThen the response is parsed and validated, and if valid, can be consulted\nfor certificate status information.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 64,
                  "endLine": 792,
                  "snippet": {
                    "text": "time plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\nor trailing parts of it, for example \"2002/11/27 1:50\" or\n\"2002/11/27\".\n\nThird, you can set constraints on a key. The one you're mostly likely\n",
                    "rendered": {
                      "text": "time plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\nor trailing parts of it, for example \"2002/11/27 1:50\" or\n\"2002/11/27\".\n\nThird, you can set constraints on a key. The one you're mostly likely\n",
                      "markdown": "`time plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\nor trailing parts of it, for example \"2002/11/27 1:50\" or\n\"2002/11/27\".\n\nThird, you can set constraints on a key. The one you're mostly likely\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 67,
                  "endLine": 790,
                  "endColumn": 5,
                  "snippet": {
                    "text": "starting validity period, it will automatically choose the current\ntime. If you don't set the ending time, it will choose the starting\ntime plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\nor trailing parts of it, for example \"2002/11/27 1:50\" or\n\"2002/11/27\".\n",
                    "rendered": {
                      "text": "starting validity period, it will automatically choose the current\ntime. If you don't set the ending time, it will choose the starting\ntime plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\nor trailing parts of it, for example \"2002/11/27 1:50\" or\n\"2002/11/27\".\n",
                      "markdown": "`starting validity period, it will automatically choose the current\ntime. If you don't set the ending time, it will choose the starting\ntime plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\nor trailing parts of it, for example \"2002/11/27 1:50\" or\n\"2002/11/27\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 11,
                  "endLine": 789,
                  "endColumn": 17,
                  "snippet": {
                    "text": "starting validity period, it will automatically choose the current\ntime. If you don't set the ending time, it will choose the starting\ntime plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\nor trailing parts of it, for example \"2002/11/27 1:50\" or\n",
                    "rendered": {
                      "text": "starting validity period, it will automatically choose the current\ntime. If you don't set the ending time, it will choose the starting\ntime plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\nor trailing parts of it, for example \"2002/11/27 1:50\" or\n",
                      "markdown": "`starting validity period, it will automatically choose the current\ntime. If you don't set the ending time, it will choose the starting\ntime plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\nor trailing parts of it, for example \"2002/11/27 1:50\" or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 788,
                  "startColumn": 19,
                  "endLine": 788,
                  "endColumn": 25,
                  "snippet": {
                    "text": "being valid, and when it should stop being valid. If you don't set the\nstarting validity period, it will automatically choose the current\ntime. If you don't set the ending time, it will choose the starting\ntime plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\n",
                    "rendered": {
                      "text": "being valid, and when it should stop being valid. If you don't set the\nstarting validity period, it will automatically choose the current\ntime. If you don't set the ending time, it will choose the starting\ntime plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\n",
                      "markdown": "`being valid, and when it should stop being valid. If you don't set the\nstarting validity period, it will automatically choose the current\ntime. If you don't set the ending time, it will choose the starting\ntime plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 787,
                  "startColumn": 67,
                  "endLine": 788,
                  "endColumn": 5,
                  "snippet": {
                    "text": "``std::string``, which specifies when the certificate should start\nbeing valid, and when it should stop being valid. If you don't set the\nstarting validity period, it will automatically choose the current\ntime. If you don't set the ending time, it will choose the starting\ntime plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\n",
                    "rendered": {
                      "text": "``std::string``, which specifies when the certificate should start\nbeing valid, and when it should stop being valid. If you don't set the\nstarting validity period, it will automatically choose the current\ntime. If you don't set the ending time, it will choose the starting\ntime plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\n",
                      "markdown": "```std::string``, which specifies when the certificate should start\nbeing valid, and when it should stop being valid. If you don't set the\nstarting validity period, it will automatically choose the current\ntime. If you don't set the ending time, it will choose the starting\ntime plus a default time period. The arguments to these functions\nspecify the time in the following format: \"2002/11/27 1:50:14\". The\ntime is in 24-hour format, and the date is encoded as\nyear/month/day. The date must be specified, but you can omit the time\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 718,
                  "startColumn": 39,
                  "endLine": 718,
                  "endColumn": 45,
                  "snippet": {
                    "text": "   const X509_Cert_Options& opts, const Private_Key& key, \\\n   const std::string& hash_fn, RandomNumberGenerator& rng)\n\n   Where ``key`` is the private key you wish to use (the public key,\n   used in the certificate itself is extracted from the private key),\n   and ``opts`` is an structure that has various bits of information\n   that will be used in creating the certificate (this structure, and\n",
                    "rendered": {
                      "text": "   const X509_Cert_Options& opts, const Private_Key& key, \\\n   const std::string& hash_fn, RandomNumberGenerator& rng)\n\n   Where ``key`` is the private key you wish to use (the public key,\n   used in the certificate itself is extracted from the private key),\n   and ``opts`` is an structure that has various bits of information\n   that will be used in creating the certificate (this structure, and\n",
                      "markdown": "`   const X509_Cert_Options& opts, const Private_Key& key, \\\n   const std::string& hash_fn, RandomNumberGenerator& rng)\n\n   Where ``key`` is the private key you wish to use (the public key,\n   used in the certificate itself is extracted from the private key),\n   and ``opts`` is an structure that has various bits of information\n   that will be used in creating the certificate (this structure, and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 6,
                  "endLine": 701,
                  "endColumn": 12,
                  "snippet": {
                    "text": "revocation (``reason``), and an object that represents the time that the\ncertificate became invalid (if this information is known).\n\nIf you wish to remove an old entry from the CRL, insert a new entry for the\nsame cert, with a ``reason`` code of ``REMOVE_FROM_CRL``. For example, if a\nrevoked certificate has expired 'normally', there is no reason to continue to\nexplicitly revoke it, since clients will reject the cert as expired in any\n",
                    "rendered": {
                      "text": "revocation (``reason``), and an object that represents the time that the\ncertificate became invalid (if this information is known).\n\nIf you wish to remove an old entry from the CRL, insert a new entry for the\nsame cert, with a ``reason`` code of ``REMOVE_FROM_CRL``. For example, if a\nrevoked certificate has expired 'normally', there is no reason to continue to\nexplicitly revoke it, since clients will reject the cert as expired in any\n",
                      "markdown": "`revocation (``reason``), and an object that represents the time that the\ncertificate became invalid (if this information is known).\n\nIf you wish to remove an old entry from the CRL, insert a new entry for the\nsame cert, with a ``reason`` code of ``REMOVE_FROM_CRL``. For example, if a\nrevoked certificate has expired 'normally', there is no reason to continue to\nexplicitly revoke it, since clients will reject the cert as expired in any\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 58,
                  "endLine": 698,
                  "endColumn": 64,
                  "snippet": {
                    "text": "certificate. In this case, we represent the serial number as a\n``secure_vector<uint8_t>`` called ``serial``. There are two additional (optional)\nvalues, an enumeration called ``CRL_Code`` that specifies the reason for\nrevocation (``reason``), and an object that represents the time that the\ncertificate became invalid (if this information is known).\n\nIf you wish to remove an old entry from the CRL, insert a new entry for the\n",
                    "rendered": {
                      "text": "certificate. In this case, we represent the serial number as a\n``secure_vector<uint8_t>`` called ``serial``. There are two additional (optional)\nvalues, an enumeration called ``CRL_Code`` that specifies the reason for\nrevocation (``reason``), and an object that represents the time that the\ncertificate became invalid (if this information is known).\n\nIf you wish to remove an old entry from the CRL, insert a new entry for the\n",
                      "markdown": "`certificate. In this case, we represent the serial number as a\n``secure_vector<uint8_t>`` called ``serial``. There are two additional (optional)\nvalues, an enumeration called ``CRL_Code`` that specifies the reason for\nrevocation (``reason``), and an object that represents the time that the\ncertificate became invalid (if this information is known).\n\nIf you wish to remove an old entry from the CRL, insert a new entry for the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 615,
                  "startColumn": 31,
                  "endLine": 615,
                  "endColumn": 37,
                  "snippet": {
                    "text": "There is an alternative constructor that lets you set additional options, namely\nthe padding scheme that will be used by the X509_CA object to sign certificates\nand certificate revocation lists. If the padding is not set explicitly, the CA\nwill use some default. The only time you need this alternate interface is\nfor creating RSA-PSS certificates.\n\n.. cpp:function:: X509_CA::X509_CA(const X509_Certificate& cert, \\\n",
                    "rendered": {
                      "text": "There is an alternative constructor that lets you set additional options, namely\nthe padding scheme that will be used by the X509_CA object to sign certificates\nand certificate revocation lists. If the padding is not set explicitly, the CA\nwill use some default. The only time you need this alternate interface is\nfor creating RSA-PSS certificates.\n\n.. cpp:function:: X509_CA::X509_CA(const X509_Certificate& cert, \\\n",
                      "markdown": "`There is an alternative constructor that lets you set additional options, namely\nthe padding scheme that will be used by the X509_CA object to sign certificates\nand certificate revocation lists. If the padding is not set explicitly, the CA\nwill use some default. The only time you need this alternate interface is\nfor creating RSA-PSS certificates.\n\n.. cpp:function:: X509_CA::X509_CA(const X509_Certificate& cert, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 65,
                  "endLine": 499,
                  "endColumn": 74,
                  "snippet": {
                    "text": "   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n   are validated. This is really only useful for testing. The default is the\n   current system clock's current time. ``ocsp_timeout`` sets the timeout for\n   OCSP requests. The default of 0 disables OCSP checks completely.\n   ``ocsp_resp`` allows adding additional OCSP responses retrieved from outside\n   of the path validation. Note that OCSP online checks are done only\n",
                    "rendered": {
                      "text": "   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n   are validated. This is really only useful for testing. The default is the\n   current system clock's current time. ``ocsp_timeout`` sets the timeout for\n   OCSP requests. The default of 0 disables OCSP checks completely.\n   ``ocsp_resp`` allows adding additional OCSP responses retrieved from outside\n   of the path validation. Note that OCSP online checks are done only\n",
                      "markdown": "`   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n   are validated. This is really only useful for testing. The default is the\n   current system clock's current time. ``ocsp_timeout`` sets the timeout for\n   OCSP requests. The default of 0 disables OCSP checks completely.\n   ``ocsp_resp`` allows adding additional OCSP responses retrieved from outside\n   of the path validation. Note that OCSP online checks are done only\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 58,
                  "endLine": 497,
                  "endColumn": 64,
                  "snippet": {
                    "text": "   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n   are validated. This is really only useful for testing. The default is the\n   current system clock's current time. ``ocsp_timeout`` sets the timeout for\n   OCSP requests. The default of 0 disables OCSP checks completely.\n",
                    "rendered": {
                      "text": "   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n   are validated. This is really only useful for testing. The default is the\n   current system clock's current time. ``ocsp_timeout`` sets the timeout for\n   OCSP requests. The default of 0 disables OCSP checks completely.\n",
                      "markdown": "`   An empty hostname disables hostname validation.\n   ``usage`` specifies key usage restrictions that are compared\n   to the key usage fields in `end_cert` according to RFC 5280, if not set to\n   ``UNSPECIFIED``. ``validation_time`` allows setting the time point at which all certificates\n   are validated. This is really only useful for testing. The default is the\n   current system clock's current time. ``ocsp_timeout`` sets the timeout for\n   OCSP requests. The default of 0 disables OCSP checks completely.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 53,
                  "endLine": 466,
                  "endColumn": 62,
                  "snippet": {
                    "text": "The ``Certificate_Store_In_SQL`` class operates on an abstract ``SQL_Database``\nobject. If support for sqlite3 was enabled at build time, Botan includes an\nimplementation of this interface for sqlite3, and a subclass of\n``Certificate_Store_In_SQL`` which creates or opens a sqlite3 database.\n\n.. cpp:class:: Certificate_Store_In_SQLite\n\n",
                    "rendered": {
                      "text": "The ``Certificate_Store_In_SQL`` class operates on an abstract ``SQL_Database``\nobject. If support for sqlite3 was enabled at build time, Botan includes an\nimplementation of this interface for sqlite3, and a subclass of\n``Certificate_Store_In_SQL`` which creates or opens a sqlite3 database.\n\n.. cpp:class:: Certificate_Store_In_SQLite\n\n",
                      "markdown": "`The ``Certificate_Store_In_SQL`` class operates on an abstract ``SQL_Database``\nobject. If support for sqlite3 was enabled at build time, Botan includes an\nimplementation of this interface for sqlite3, and a subclass of\n``Certificate_Store_In_SQL`` which creates or opens a sqlite3 database.\n\n.. cpp:class:: Certificate_Store_In_SQLite\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 22,
                  "endLine": 464,
                  "endColumn": 31,
                  "snippet": {
                    "text": "     A CRL is returned for each unique issuer DN.\n\nThe ``Certificate_Store_In_SQL`` class operates on an abstract ``SQL_Database``\nobject. If support for sqlite3 was enabled at build time, Botan includes an\nimplementation of this interface for sqlite3, and a subclass of\n``Certificate_Store_In_SQL`` which creates or opens a sqlite3 database.\n\n",
                    "rendered": {
                      "text": "     A CRL is returned for each unique issuer DN.\n\nThe ``Certificate_Store_In_SQL`` class operates on an abstract ``SQL_Database``\nobject. If support for sqlite3 was enabled at build time, Botan includes an\nimplementation of this interface for sqlite3, and a subclass of\n``Certificate_Store_In_SQL`` which creates or opens a sqlite3 database.\n\n",
                      "markdown": "`     A CRL is returned for each unique issuer DN.\n\nThe ``Certificate_Store_In_SQL`` class operates on an abstract ``SQL_Database``\nobject. If support for sqlite3 was enabled at build time, Botan includes an\nimplementation of this interface for sqlite3, and a subclass of\n``Certificate_Store_In_SQL`` which creates or opens a sqlite3 database.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 450,
                  "startColumn": 20,
                  "endLine": 450,
                  "endColumn": 26,
                  "snippet": {
                    "text": "     Removes ``key`` from the store\n\n .. cpp:function:: void revoke_cert(const X509_Certificate&, CRL_Code, \\\n    const X509_Time& time = X509_Time())\n\n     Marks ``cert`` as revoked starting from ``time``\n\n",
                    "rendered": {
                      "text": "     Removes ``key`` from the store\n\n .. cpp:function:: void revoke_cert(const X509_Certificate&, CRL_Code, \\\n    const X509_Time& time = X509_Time())\n\n     Marks ``cert`` as revoked starting from ``time``\n\n",
                      "markdown": "`     Removes ``key`` from the store\n\n .. cpp:function:: void revoke_cert(const X509_Certificate&, CRL_Code, \\\n    const X509_Time& time = X509_Time())\n\n     Marks ``cert`` as revoked starting from ``time``\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 22,
                  "endLine": 323,
                  "endColumn": 30,
                  "snippet": {
                    "text": "An object of type ``Certificate_Store`` is a generalized interface to\nan external source for certificates (and CRLs). Examples of such a\nstore would be one that looked up the certificates in a SQL database,\nor by contacting a CGI script running on a HTTP server. There are\ncurrently three mechanisms for looking up a certificate, and one for\nretrieving CRLs. By default, most of these mechanisms will return an\nempty ``std::optional`` of ``X509_Certificate``. This storage mechanism\n",
                    "rendered": {
                      "text": "An object of type ``Certificate_Store`` is a generalized interface to\nan external source for certificates (and CRLs). Examples of such a\nstore would be one that looked up the certificates in a SQL database,\nor by contacting a CGI script running on a HTTP server. There are\ncurrently three mechanisms for looking up a certificate, and one for\nretrieving CRLs. By default, most of these mechanisms will return an\nempty ``std::optional`` of ``X509_Certificate``. This storage mechanism\n",
                      "markdown": "`An object of type ``Certificate_Store`` is a generalized interface to\nan external source for certificates (and CRLs). Examples of such a\nstore would be one that looked up the certificates in a SQL database,\nor by contacting a CGI script running on a HTTP server. There are\ncurrently three mechanisms for looking up a certificate, and one for\nretrieving CRLs. By default, most of these mechanisms will return an\nempty ``std::optional`` of ``X509_Certificate``. This storage mechanism\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 65,
                  "endLine": 295,
                  "snippet": {
                    "text": "this problem (though online certificate validation techniques are\nstarting to become somewhat more popular). Every once in a while the\nCA will release a new CRL, listing all certificates that have been\nrevoked. Also included is various pieces of information like what time\na particular certificate was revoked, and for what reason. In most\nsystems, it is wise to support some form of certificate revocation,\nand CRLs handle this easily.\n\n",
                    "rendered": {
                      "text": "this problem (though online certificate validation techniques are\nstarting to become somewhat more popular). Every once in a while the\nCA will release a new CRL, listing all certificates that have been\nrevoked. Also included is various pieces of information like what time\na particular certificate was revoked, and for what reason. In most\nsystems, it is wise to support some form of certificate revocation,\nand CRLs handle this easily.\n\n",
                      "markdown": "`this problem (though online certificate validation techniques are\nstarting to become somewhat more popular). Every once in a while the\nCA will release a new CRL, listing all certificates that have been\nrevoked. Also included is various pieces of information like what time\na particular certificate was revoked, and for what reason. In most\nsystems, it is wise to support some form of certificate revocation,\nand CRLs handle this easily.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 25,
                  "endLine": 96,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n  .. cpp:function:: X509_Time not_after() const\n\n     Returns the point in time the certificate expires\n\n  .. cpp:function:: const Extensions& v3_extensions() const\n\n",
                    "rendered": {
                      "text": "\n  .. cpp:function:: X509_Time not_after() const\n\n     Returns the point in time the certificate expires\n\n  .. cpp:function:: const Extensions& v3_extensions() const\n\n",
                      "markdown": "`\n  .. cpp:function:: X509_Time not_after() const\n\n     Returns the point in time the certificate expires\n\n  .. cpp:function:: const Extensions& v3_extensions() const\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 25,
                  "endLine": 92,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n  .. cpp:function:: X509_Time not_before() const\n\n     Returns the point in time the certificate becomes valid\n\n  .. cpp:function:: X509_Time not_after() const\n\n",
                    "rendered": {
                      "text": "\n  .. cpp:function:: X509_Time not_before() const\n\n     Returns the point in time the certificate becomes valid\n\n  .. cpp:function:: X509_Time not_after() const\n\n",
                      "markdown": "`\n  .. cpp:function:: X509_Time not_before() const\n\n     Returns the point in time the certificate becomes valid\n\n  .. cpp:function:: X509_Time not_after() const\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/x509.rst"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 40,
                  "endLine": 39,
                  "endColumn": 44,
                  "snippet": {
                    "text": "     Returns the distinguished name (DN) of the certificate's subject. This is\n     the primary place where information about the subject of the certificate is\n     stored. However \"modern\" information that doesn't fit in the X.500\n     framework, such as DNS name, email, IP address, or XMPP address, appears\n     instead in the subject alternative name.\n\n  .. cpp:function:: X509_DN issuer_dn() const\n",
                    "rendered": {
                      "text": "     Returns the distinguished name (DN) of the certificate's subject. This is\n     the primary place where information about the subject of the certificate is\n     stored. However \"modern\" information that doesn't fit in the X.500\n     framework, such as DNS name, email, IP address, or XMPP address, appears\n     instead in the subject alternative name.\n\n  .. cpp:function:: X509_DN issuer_dn() const\n",
                      "markdown": "`     Returns the distinguished name (DN) of the certificate's subject. This is\n     the primary place where information about the subject of the certificate is\n     stored. However \"modern\" information that doesn't fit in the X.500\n     framework, such as DNS name, email, IP address, or XMPP address, appears\n     instead in the subject alternative name.\n\n  .. cpp:function:: X509_DN issuer_dn() const\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/secmem.rst"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 12,
                  "endLine": 6,
                  "endColumn": 16,
                  "snippet": {
                    "text": "========================================\n\nA major concern with mixing modern multi-user OSes and cryptographic\ncode is that at any time the code (including secret keys) could be\nswapped to disk, where it can later be read by an attacker, or left\nfloating around in memory for later retrieval.\n\n",
                    "rendered": {
                      "text": "========================================\n\nA major concern with mixing modern multi-user OSes and cryptographic\ncode is that at any time the code (including secret keys) could be\nswapped to disk, where it can later be read by an attacker, or left\nfloating around in memory for later retrieval.\n\n",
                      "markdown": "`========================================\n\nA major concern with mixing modern multi-user OSes and cryptographic\ncode is that at any time the code (including secret keys) could be\nswapped to disk, where it can later be read by an attacker, or left\nfloating around in memory for later retrieval.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/secmem.rst"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 19,
                  "endLine": 6,
                  "endColumn": 25,
                  "snippet": {
                    "text": "========================================\n\nA major concern with mixing modern multi-user OSes and cryptographic\ncode is that at any time the code (including secret keys) could be\nswapped to disk, where it can later be read by an attacker, or left\nfloating around in memory for later retrieval.\n\n",
                    "rendered": {
                      "text": "========================================\n\nA major concern with mixing modern multi-user OSes and cryptographic\ncode is that at any time the code (including secret keys) could be\nswapped to disk, where it can later be read by an attacker, or left\nfloating around in memory for later retrieval.\n\n",
                      "markdown": "`========================================\n\nA major concern with mixing modern multi-user OSes and cryptographic\ncode is that at any time the code (including secret keys) could be\nswapped to disk, where it can later be read by an attacker, or left\nfloating around in memory for later retrieval.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/compression.rst"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 60,
                  "endLine": 6,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\nSome lossless data compression algorithms are available in botan, currently all\nvia third party libraries - these include zlib (including deflate and gzip\nformats), bzip2, and lzma. Support for these must be enabled at build time;\nyou can check for them using the macros ``BOTAN_HAS_ZLIB``, ``BOTAN_HAS_BZIP2``,\nand ``BOTAN_HAS_LZMA``.\n\n",
                    "rendered": {
                      "text": "\nSome lossless data compression algorithms are available in botan, currently all\nvia third party libraries - these include zlib (including deflate and gzip\nformats), bzip2, and lzma. Support for these must be enabled at build time;\nyou can check for them using the macros ``BOTAN_HAS_ZLIB``, ``BOTAN_HAS_BZIP2``,\nand ``BOTAN_HAS_LZMA``.\n\n",
                      "markdown": "`\nSome lossless data compression algorithms are available in botan, currently all\nvia third party libraries - these include zlib (including deflate and gzip\nformats), bzip2, and lzma. Support for these must be enabled at build time;\nyou can check for them using the macros ``BOTAN_HAS_ZLIB``, ``BOTAN_HAS_BZIP2``,\nand ``BOTAN_HAS_LZMA``.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/compression.rst"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 10,
                  "endLine": 29,
                  "endColumn": 16,
                  "snippet": {
                    "text": "       ``update`` or ``finish``. The meaning of the `level` parameter varies by\n       the algorithm but generally takes a value between 1 and 9, with higher\n       values implying typically better compression from and more memory and/or\n       CPU time consumed by the compression process. The decompressor can always\n       handle input from any compressor.\n\n  .. cpp:function::  void update(secure_vector<uint8_t>& buf, \\\n",
                    "rendered": {
                      "text": "       ``update`` or ``finish``. The meaning of the `level` parameter varies by\n       the algorithm but generally takes a value between 1 and 9, with higher\n       values implying typically better compression from and more memory and/or\n       CPU time consumed by the compression process. The decompressor can always\n       handle input from any compressor.\n\n  .. cpp:function::  void update(secure_vector<uint8_t>& buf, \\\n",
                      "markdown": "`       ``update`` or ``finish``. The meaning of the `level` parameter varies by\n       the algorithm but generally takes a value between 1 and 9, with higher\n       values implying typically better compression from and more memory and/or\n       CPU time consumed by the compression process. The decompressor can always\n       handle input from any compressor.\n\n  .. cpp:function::  void update(secure_vector<uint8_t>& buf, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/compression.rst"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 61,
                  "endLine": 12,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n.. note::\n   You should always compress *before* you encrypt, because encryption seeks to\n   hide the redundancy that compression is supposed to try to find and remove.\n\nCompression is done through the ``Compression_Algorithm`` and\n``Decompression_Algorithm`` classes, both defined in `compression.h`\n",
                    "rendered": {
                      "text": "\n.. note::\n   You should always compress *before* you encrypt, because encryption seeks to\n   hide the redundancy that compression is supposed to try to find and remove.\n\nCompression is done through the ``Compression_Algorithm`` and\n``Decompression_Algorithm`` classes, both defined in `compression.h`\n",
                      "markdown": "`\n.. note::\n   You should always compress *before* you encrypt, because encryption seeks to\n   hide the redundancy that compression is supposed to try to find and remove.\n\nCompression is done through the ``Compression_Algorithm`` and\n``Decompression_Algorithm`` classes, both defined in `compression.h`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/hardware_acceleration.rst"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 37,
                  "endLine": 140,
                  "endColumn": 41,
                  "snippet": {
                    "text": "Configuring Acceleration\n------------------------------\n\nHardware acceleration can be disabled at during configuring the build\nby passing certain ``--disable-*`` options to ``configure.py``.\nThis will cause the base software implementation to be used instead\nof the hardware accelerated one. The following options are currently supported:\n",
                    "rendered": {
                      "text": "Configuring Acceleration\n------------------------------\n\nHardware acceleration can be disabled at during configuring the build\nby passing certain ``--disable-*`` options to ``configure.py``.\nThis will cause the base software implementation to be used instead\nof the hardware accelerated one. The following options are currently supported:\n",
                      "markdown": "`Configuring Acceleration\n------------------------------\n\nHardware acceleration can be disabled at during configuring the build\nby passing certain ``--disable-*`` options to ``configure.py``.\nThis will cause the base software implementation to be used instead\nof the hardware accelerated one. The following options are currently supported:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/hardware_acceleration.rst"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 61,
                  "endLine": 19,
                  "endColumn": 65,
                  "snippet": {
                    "text": "* If no hardware or SIMD support, fall back to a constant time bitsliced implementation\n\nThe following sections list the platforms and algorithms for which hardware acceleration\nis available. If the CPU specific optimizations are available at runtime, they are\nautomatically used if enabled in the build. If not, the base implementation is used.\n\nx86\n",
                    "rendered": {
                      "text": "* If no hardware or SIMD support, fall back to a constant time bitsliced implementation\n\nThe following sections list the platforms and algorithms for which hardware acceleration\nis available. If the CPU specific optimizations are available at runtime, they are\nautomatically used if enabled in the build. If not, the base implementation is used.\n\nx86\n",
                      "markdown": "`* If no hardware or SIMD support, fall back to a constant time bitsliced implementation\n\nThe following sections list the platforms and algorithms for which hardware acceleration\nis available. If the CPU specific optimizations are available at runtime, they are\nautomatically used if enabled in the build. If not, the base implementation is used.\n\nx86\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/hardware_acceleration.rst"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 51,
                  "endLine": 15,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n* If AES hardware support is available (AES-NI, POWER8, Aarch64) use that\n* If 128-bit SIMD with byte shuffles are available (SSSE3, NEON, or Altivec),\n  use the vperm technique published by Mike Hamburg at CHES 2009\n* If no hardware or SIMD support, fall back to a constant time bitsliced implementation\n\nThe following sections list the platforms and algorithms for which hardware acceleration\n",
                    "rendered": {
                      "text": "\n* If AES hardware support is available (AES-NI, POWER8, Aarch64) use that\n* If 128-bit SIMD with byte shuffles are available (SSSE3, NEON, or Altivec),\n  use the vperm technique published by Mike Hamburg at CHES 2009\n* If no hardware or SIMD support, fall back to a constant time bitsliced implementation\n\nThe following sections list the platforms and algorithms for which hardware acceleration\n",
                      "markdown": "`\n* If AES hardware support is available (AES-NI, POWER8, Aarch64) use that\n* If 128-bit SIMD with byte shuffles are available (SSSE3, NEON, or Altivec),\n  use the vperm technique published by Mike Hamburg at CHES 2009\n* If no hardware or SIMD support, fall back to a constant time bitsliced implementation\n\nThe following sections list the platforms and algorithms for which hardware acceleration\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/hardware_acceleration.rst"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 57,
                  "endLine": 16,
                  "endColumn": 63,
                  "snippet": {
                    "text": "* If AES hardware support is available (AES-NI, POWER8, Aarch64) use that\n* If 128-bit SIMD with byte shuffles are available (SSSE3, NEON, or Altivec),\n  use the vperm technique published by Mike Hamburg at CHES 2009\n* If no hardware or SIMD support, fall back to a constant time bitsliced implementation\n\nThe following sections list the platforms and algorithms for which hardware acceleration\nis available. If the CPU specific optimizations are available at runtime, they are\n",
                    "rendered": {
                      "text": "* If AES hardware support is available (AES-NI, POWER8, Aarch64) use that\n* If 128-bit SIMD with byte shuffles are available (SSSE3, NEON, or Altivec),\n  use the vperm technique published by Mike Hamburg at CHES 2009\n* If no hardware or SIMD support, fall back to a constant time bitsliced implementation\n\nThe following sections list the platforms and algorithms for which hardware acceleration\nis available. If the CPU specific optimizations are available at runtime, they are\n",
                      "markdown": "`* If AES hardware support is available (AES-NI, POWER8, Aarch64) use that\n* If 128-bit SIMD with byte shuffles are available (SSSE3, NEON, or Altivec),\n  use the vperm technique published by Mike Hamburg at CHES 2009\n* If no hardware or SIMD support, fall back to a constant time bitsliced implementation\n\nThe following sections list the platforms and algorithms for which hardware acceleration\nis available. If the CPU specific optimizations are available at runtime, they are\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/goals.rst"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 77,
                  "endLine": 81,
                  "snippet": {
                    "text": "There are goals some crypto libraries have, but which Botan actively does not\nseek to address.\n\n* Deep embedded support. Botan requires a heap, C++ exceptions, and RTTI, and at\n  least in terms of performance optimizations effectively assumes a 32 or 64 bit\n  processor. It is not suitable for deploying on, say FreeRTOS running on a\n  MSP430, or smartcard with an 8 bit CPU and 256 bytes RAM. A larger SoC, such\n  as a Cortex-A7 running Linux, is entirely within scope.\n",
                    "rendered": {
                      "text": "There are goals some crypto libraries have, but which Botan actively does not\nseek to address.\n\n* Deep embedded support. Botan requires a heap, C++ exceptions, and RTTI, and at\n  least in terms of performance optimizations effectively assumes a 32 or 64 bit\n  processor. It is not suitable for deploying on, say FreeRTOS running on a\n  MSP430, or smartcard with an 8 bit CPU and 256 bytes RAM. A larger SoC, such\n  as a Cortex-A7 running Linux, is entirely within scope.\n",
                      "markdown": "`There are goals some crypto libraries have, but which Botan actively does not\nseek to address.\n\n* Deep embedded support. Botan requires a heap, C++ exceptions, and RTTI, and at\n  least in terms of performance optimizations effectively assumes a 32 or 64 bit\n  processor. It is not suitable for deploying on, say FreeRTOS running on a\n  MSP430, or smartcard with an 8 bit CPU and 256 bytes RAM. A larger SoC, such\n  as a Cortex-A7 running Linux, is entirely within scope.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/goals.rst"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  new optimizations are identified and applied.\n\n* Support whatever I/O mechanism the application wants. Allow the application to\n  control all aspects of how the network is contacted, and ensure the API makes\n  asynchronous operations easy to handle. This both insulates Botan from\n  system-specific details and allows the application to use whatever networking\n  style they please.\n",
                    "rendered": {
                      "text": "  new optimizations are identified and applied.\n\n* Support whatever I/O mechanism the application wants. Allow the application to\n  control all aspects of how the network is contacted, and ensure the API makes\n  asynchronous operations easy to handle. This both insulates Botan from\n  system-specific details and allows the application to use whatever networking\n  style they please.\n",
                      "markdown": "`  new optimizations are identified and applied.\n\n* Support whatever I/O mechanism the application wants. Allow the application to\n  control all aspects of how the network is contacted, and ensure the API makes\n  asynchronous operations easy to handle. This both insulates Botan from\n  system-specific details and allows the application to use whatever networking\n  style they please.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/goals.rst"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 74,
                  "endLine": 48,
                  "snippet": {
                    "text": "\n* Post quantum security. Possibly a practical quantum computer that can break\n  RSA and ECC will never be built, but the future is notoriously hard to predict.\n  It seems prudent to begin designing and deploying systems now which have at\n  least the option of using a post-quantum scheme. Botan provides a conservative\n  selection of algorithms thought to be post-quantum secure.\n\n* Performance. Botan does not in every case strive to be faster than every other\n",
                    "rendered": {
                      "text": "\n* Post quantum security. Possibly a practical quantum computer that can break\n  RSA and ECC will never be built, but the future is notoriously hard to predict.\n  It seems prudent to begin designing and deploying systems now which have at\n  least the option of using a post-quantum scheme. Botan provides a conservative\n  selection of algorithms thought to be post-quantum secure.\n\n* Performance. Botan does not in every case strive to be faster than every other\n",
                      "markdown": "`\n* Post quantum security. Possibly a practical quantum computer that can break\n  RSA and ECC will never be built, but the future is notoriously hard to predict.\n  It seems prudent to begin designing and deploying systems now which have at\n  least the option of using a post-quantum scheme. Botan provides a conservative\n  selection of algorithms thought to be post-quantum secure.\n\n* Performance. Botan does not in every case strive to be faster than every other\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/goals.rst"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 7,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n* Well tested. The code should be correct against the spec, with as close to\n  100% test coverage as possible. All available static and dynamic analysis\n  tools at our disposal should be used, including fuzzers, symbolic execution,\n  and protocol specific tools. Within reason, all warnings from compilers and\n  static analyzers should be addressed, even if they seem like false positives,\n  because that maximizes the signal value of new warnings from the tool.\n",
                    "rendered": {
                      "text": "\n* Well tested. The code should be correct against the spec, with as close to\n  100% test coverage as possible. All available static and dynamic analysis\n  tools at our disposal should be used, including fuzzers, symbolic execution,\n  and protocol specific tools. Within reason, all warnings from compilers and\n  static analyzers should be addressed, even if they seem like false positives,\n  because that maximizes the signal value of new warnings from the tool.\n",
                      "markdown": "`\n* Well tested. The code should be correct against the spec, with as close to\n  100% test coverage as possible. All available static and dynamic analysis\n  tools at our disposal should be used, including fuzzers, symbolic execution,\n  and protocol specific tools. Within reason, all warnings from compilers and\n  static analyzers should be addressed, even if they seem like false positives,\n  because that maximizes the signal value of new warnings from the tool.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/goals.rst"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 72,
                  "endLine": 20,
                  "snippet": {
                    "text": "\n* Implement schemes important in practice. It should be practical to implement\n  any real-world crypto protocol using just what the library provides. It is\n  worth some (limited) additional complexity in the library, in order to expand\n  the set of applications which can easily adopt Botan.\n\n* Ease of use. It should be straightforward for an application programmer to do\n  whatever it is they need to do. There should be one obvious way to perform any\n",
                    "rendered": {
                      "text": "\n* Implement schemes important in practice. It should be practical to implement\n  any real-world crypto protocol using just what the library provides. It is\n  worth some (limited) additional complexity in the library, in order to expand\n  the set of applications which can easily adopt Botan.\n\n* Ease of use. It should be straightforward for an application programmer to do\n  whatever it is they need to do. There should be one obvious way to perform any\n",
                      "markdown": "`\n* Implement schemes important in practice. It should be practical to implement\n  any real-world crypto protocol using just what the library provides. It is\n  worth some (limited) additional complexity in the library, in order to expand\n  the set of applications which can easily adopt Botan.\n\n* Ease of use. It should be straightforward for an application programmer to do\n  whatever it is they need to do. There should be one obvious way to perform any\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/goals.rst"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 36,
                  "endLine": 129,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n* User proof. Some libraries provide a very high level API in an attempt to save\n  the user from themselves. Occasionally they succeed. It would be appropriate\n  and useful to build such an API on top of Botan, but Botan itself wants to\n  cover a broad set of uses cases and some of these involve having pointy things\n  within reach.\n",
                    "rendered": {
                      "text": "\n* User proof. Some libraries provide a very high level API in an attempt to save\n  the user from themselves. Occasionally they succeed. It would be appropriate\n  and useful to build such an API on top of Botan, but Botan itself wants to\n  cover a broad set of uses cases and some of these involve having pointy things\n  within reach.\n",
                      "markdown": "`\n* User proof. Some libraries provide a very high level API in an attempt to save\n  the user from themselves. Occasionally they succeed. It would be appropriate\n  and useful to build such an API on top of Botan, but Botan itself wants to\n  cover a broad set of uses cases and some of these involve having pointy things\n  within reach.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/goals.rst"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 70,
                  "endLine": 119,
                  "snippet": {
                    "text": "  for actual flaws.\n\n  That said it would be easy to add a \"FIPS 140\" build mode to Botan, which just\n  disabled all the builtin crypto and wrapped whatever the most recent OpenSSL\n  FIPS module exports.\n\n* Educational purposes. The library code is intended to be easy to read and\n  review, and so might be useful in an educational context. However it does not\n",
                    "rendered": {
                      "text": "  for actual flaws.\n\n  That said it would be easy to add a \"FIPS 140\" build mode to Botan, which just\n  disabled all the builtin crypto and wrapped whatever the most recent OpenSSL\n  FIPS module exports.\n\n* Educational purposes. The library code is intended to be easy to read and\n  review, and so might be useful in an educational context. However it does not\n",
                      "markdown": "`  for actual flaws.\n\n  That said it would be easy to add a \"FIPS 140\" build mode to Botan, which just\n  disabled all the builtin crypto and wrapped whatever the most recent OpenSSL\n  FIPS module exports.\n\n* Educational purposes. The library code is intended to be easy to read and\n  review, and so might be useful in an educational context. However it does not\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/goals.rst"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 44,
                  "endLine": 108,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  NIST approved testing lab. He does not have a positive view of the process or\n  results, particularly when it comes to Level 1 software validations. The only\n  benefit of a Level 1 validation is to allow for government sales, and the cost\n  of validation includes enormous amounts of time and money, adding 'checks'\n  that are useless or actively harmful, then freezing the software so security\n  updates cannot be applied in the future. It does force a certain minimum\n  standard (ie, FIPS Level 1 does assure AES and RSA are probably implemented\n",
                    "rendered": {
                      "text": "  NIST approved testing lab. He does not have a positive view of the process or\n  results, particularly when it comes to Level 1 software validations. The only\n  benefit of a Level 1 validation is to allow for government sales, and the cost\n  of validation includes enormous amounts of time and money, adding 'checks'\n  that are useless or actively harmful, then freezing the software so security\n  updates cannot be applied in the future. It does force a certain minimum\n  standard (ie, FIPS Level 1 does assure AES and RSA are probably implemented\n",
                      "markdown": "`  NIST approved testing lab. He does not have a positive view of the process or\n  results, particularly when it comes to Level 1 software validations. The only\n  benefit of a Level 1 validation is to allow for government sales, and the cost\n  of validation includes enormous amounts of time and money, adding 'checks'\n  that are useless or actively harmful, then freezing the software so security\n  updates cannot be applied in the future. It does force a certain minimum\n  standard (ie, FIPS Level 1 does assure AES and RSA are probably implemented\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/goals.rst"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 48,
                  "endLine": 97,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  systems are completely unsafe anyway. The additional complexity supporting\n  such platforms just creates more room for bugs.\n\n* Portable to every C++ compiler ever made. Over time Botan moves forward to\n  both take advantage of new language/compiler features, and to shed workarounds\n  for dealing with bugs in ancient compilers, allowing further simplifications\n  in the codebase. The set of supported compilers is fixed for each new release\n",
                    "rendered": {
                      "text": "  systems are completely unsafe anyway. The additional complexity supporting\n  such platforms just creates more room for bugs.\n\n* Portable to every C++ compiler ever made. Over time Botan moves forward to\n  both take advantage of new language/compiler features, and to shed workarounds\n  for dealing with bugs in ancient compilers, allowing further simplifications\n  in the codebase. The set of supported compilers is fixed for each new release\n",
                      "markdown": "`  systems are completely unsafe anyway. The additional complexity supporting\n  such platforms just creates more room for bugs.\n\n* Portable to every C++ compiler ever made. Over time Botan moves forward to\n  both take advantage of new language/compiler features, and to shed workarounds\n  for dealing with bugs in ancient compilers, allowing further simplifications\n  in the codebase. The set of supported compilers is fixed for each new release\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/goals.rst"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 73,
                  "endLine": 53,
                  "snippet": {
                    "text": "  selection of algorithms thought to be post-quantum secure.\n\n* Performance. Botan does not in every case strive to be faster than every other\n  software implementation, but performance should be competitive and over time\n  new optimizations are identified and applied.\n\n* Support whatever I/O mechanism the application wants. Allow the application to\n  control all aspects of how the network is contacted, and ensure the API makes\n",
                    "rendered": {
                      "text": "  selection of algorithms thought to be post-quantum secure.\n\n* Performance. Botan does not in every case strive to be faster than every other\n  software implementation, but performance should be competitive and over time\n  new optimizations are identified and applied.\n\n* Support whatever I/O mechanism the application wants. Allow the application to\n  control all aspects of how the network is contacted, and ensure the API makes\n",
                      "markdown": "`  selection of algorithms thought to be post-quantum secure.\n\n* Performance. Botan does not in every case strive to be faster than every other\n  software implementation, but performance should be competitive and over time\n  new optimizations are identified and applied.\n\n* Support whatever I/O mechanism the application wants. Allow the application to\n  control all aspects of how the network is contacted, and ensure the API makes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/goals.rst"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 72,
                  "endLine": 20,
                  "snippet": {
                    "text": "\n* Implement schemes important in practice. It should be practical to implement\n  any real-world crypto protocol using just what the library provides. It is\n  worth some (limited) additional complexity in the library, in order to expand\n  the set of applications which can easily adopt Botan.\n\n* Ease of use. It should be straightforward for an application programmer to do\n  whatever it is they need to do. There should be one obvious way to perform any\n",
                    "rendered": {
                      "text": "\n* Implement schemes important in practice. It should be practical to implement\n  any real-world crypto protocol using just what the library provides. It is\n  worth some (limited) additional complexity in the library, in order to expand\n  the set of applications which can easily adopt Botan.\n\n* Ease of use. It should be straightforward for an application programmer to do\n  whatever it is they need to do. There should be one obvious way to perform any\n",
                      "markdown": "`\n* Implement schemes important in practice. It should be practical to implement\n  any real-world crypto protocol using just what the library provides. It is\n  worth some (limited) additional complexity in the library, in order to expand\n  the set of applications which can easily adopt Botan.\n\n* Ease of use. It should be straightforward for an application programmer to do\n  whatever it is they need to do. There should be one obvious way to perform any\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/goals.rst"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 28,
                  "endLine": 10,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nThe library has the following project goals guiding changes. It does not succeed\nin all of these areas in every way just yet, but it describes the system that is\nthe desired end result. Over time further progress is made in each.\n\n* Secure and reliable. The implementations must of course be correct and well\n  tested, and attacks such as side channels and fault attacks should be\n",
                    "rendered": {
                      "text": "\nThe library has the following project goals guiding changes. It does not succeed\nin all of these areas in every way just yet, but it describes the system that is\nthe desired end result. Over time further progress is made in each.\n\n* Secure and reliable. The implementations must of course be correct and well\n  tested, and attacks such as side channels and fault attacks should be\n",
                      "markdown": "`\nThe library has the following project goals guiding changes. It does not succeed\nin all of these areas in every way just yet, but it describes the system that is\nthe desired end result. Over time further progress is made in each.\n\n* Secure and reliable. The implementations must of course be correct and well\n  tested, and attacks such as side channels and fault attacks should be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/deprecated.rst"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 30,
                  "endLine": 186,
                  "endColumn": 38,
                  "snippet": {
                    "text": "internal to the library in the future.\n\n  PBKDF headers: ``bcrypt_pbkdf.h``, ``pbkdf2.h``, ``pgp_s2k.h``, ``scrypt.h``,\n  and ``argon2.h``: Use the ``PasswordHash`` interface instead.\n\n  Internal implementation headers - seemingly no reason for applications to use:\n  ``curve_gfp.h``,\n",
                    "rendered": {
                      "text": "internal to the library in the future.\n\n  PBKDF headers: ``bcrypt_pbkdf.h``, ``pbkdf2.h``, ``pgp_s2k.h``, ``scrypt.h``,\n  and ``argon2.h``: Use the ``PasswordHash`` interface instead.\n\n  Internal implementation headers - seemingly no reason for applications to use:\n  ``curve_gfp.h``,\n",
                      "markdown": "`internal to the library in the future.\n\n  PBKDF headers: ``bcrypt_pbkdf.h``, ``pbkdf2.h``, ``pgp_s2k.h``, ``scrypt.h``,\n  and ``argon2.h``: Use the ``PasswordHash`` interface instead.\n\n  Internal implementation headers - seemingly no reason for applications to use:\n  ``curve_gfp.h``,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/deprecated.rst"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 4,
                  "endLine": 152,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  algorithm specfic classes, eg ``RSA_PrivateKey`` derives from\n  ``RSA_PublicKey``). In a future release these derivations will not exist. To\n  correctly extract the public key from a private key, use the function\n  ``Private_Key::public_key()``\n\n- Prior to 2.8.0, SM2 algorithms were implemented as two distinct key\n  types, one used for encryption and the other for signatures. In 2.8,\n",
                    "rendered": {
                      "text": "  algorithm specfic classes, eg ``RSA_PrivateKey`` derives from\n  ``RSA_PublicKey``). In a future release these derivations will not exist. To\n  correctly extract the public key from a private key, use the function\n  ``Private_Key::public_key()``\n\n- Prior to 2.8.0, SM2 algorithms were implemented as two distinct key\n  types, one used for encryption and the other for signatures. In 2.8,\n",
                      "markdown": "`  algorithm specfic classes, eg ``RSA_PrivateKey`` derives from\n  ``RSA_PublicKey``). In a future release these derivations will not exist. To\n  correctly extract the public key from a private key, use the function\n  ``Private_Key::public_key()``\n\n- Prior to 2.8.0, SM2 algorithms were implemented as two distinct key\n  types, one used for encryption and the other for signatures. In 2.8,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/deprecated.rst"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 38,
                  "endLine": 149,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n- Implicit conversion of a private key into a public key. Currently\n  ``Private_Key`` derives from ``Public_Key`` (and likewise for each of the\n  algorithm specfic classes, eg ``RSA_PrivateKey`` derives from\n  ``RSA_PublicKey``). In a future release these derivations will not exist. To\n  correctly extract the public key from a private key, use the function\n  ``Private_Key::public_key()``\n",
                    "rendered": {
                      "text": "\n- Implicit conversion of a private key into a public key. Currently\n  ``Private_Key`` derives from ``Public_Key`` (and likewise for each of the\n  algorithm specfic classes, eg ``RSA_PrivateKey`` derives from\n  ``RSA_PublicKey``). In a future release these derivations will not exist. To\n  correctly extract the public key from a private key, use the function\n  ``Private_Key::public_key()``\n",
                      "markdown": "`\n- Implicit conversion of a private key into a public key. Currently\n  ``Private_Key`` derives from ``Public_Key`` (and likewise for each of the\n  algorithm specfic classes, eg ``RSA_PrivateKey`` derives from\n  ``RSA_PublicKey``). In a future release these derivations will not exist. To\n  correctly extract the public key from a private key, use the function\n  ``Private_Key::public_key()``\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/deprecated.rst"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 4,
                  "endLine": 148,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  ``PasswordHashFamily``.\n\n- Implicit conversion of a private key into a public key. Currently\n  ``Private_Key`` derives from ``Public_Key`` (and likewise for each of the\n  algorithm specfic classes, eg ``RSA_PrivateKey`` derives from\n  ``RSA_PublicKey``). In a future release these derivations will not exist. To\n  correctly extract the public key from a private key, use the function\n",
                    "rendered": {
                      "text": "  ``PasswordHashFamily``.\n\n- Implicit conversion of a private key into a public key. Currently\n  ``Private_Key`` derives from ``Public_Key`` (and likewise for each of the\n  algorithm specfic classes, eg ``RSA_PrivateKey`` derives from\n  ``RSA_PublicKey``). In a future release these derivations will not exist. To\n  correctly extract the public key from a private key, use the function\n",
                      "markdown": "`  ``PasswordHashFamily``.\n\n- Implicit conversion of a private key into a public key. Currently\n  ``Private_Key`` derives from ``Public_Key`` (and likewise for each of the\n  algorithm specfic classes, eg ``RSA_PrivateKey`` derives from\n  ``RSA_PublicKey``). In a future release these derivations will not exist. To\n  correctly extract the public key from a private key, use the function\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/deprecated.rst"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 4,
                  "endLine": 145,
                  "endColumn": 12,
                  "snippet": {
                    "text": "- Support for OtherNames in X.509 certificates is deprecated\n\n- The ``PBKDF`` class is deprecated in favor of ``PasswordHash`` and\n  ``PasswordHashFamily``.\n\n- Implicit conversion of a private key into a public key. Currently\n  ``Private_Key`` derives from ``Public_Key`` (and likewise for each of the\n",
                    "rendered": {
                      "text": "- Support for OtherNames in X.509 certificates is deprecated\n\n- The ``PBKDF`` class is deprecated in favor of ``PasswordHash`` and\n  ``PasswordHashFamily``.\n\n- Implicit conversion of a private key into a public key. Currently\n  ``Private_Key`` derives from ``Public_Key`` (and likewise for each of the\n",
                      "markdown": "`- Support for OtherNames in X.509 certificates is deprecated\n\n- The ``PBKDF`` class is deprecated in favor of ``PasswordHash`` and\n  ``PasswordHashFamily``.\n\n- Implicit conversion of a private key into a public key. Currently\n  ``Private_Key`` derives from ``Public_Key`` (and likewise for each of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/deprecated.rst"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 50,
                  "endLine": 144,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n- Support for OtherNames in X.509 certificates is deprecated\n\n- The ``PBKDF`` class is deprecated in favor of ``PasswordHash`` and\n  ``PasswordHashFamily``.\n\n- Implicit conversion of a private key into a public key. Currently\n",
                    "rendered": {
                      "text": "\n- Support for OtherNames in X.509 certificates is deprecated\n\n- The ``PBKDF`` class is deprecated in favor of ``PasswordHash`` and\n  ``PasswordHashFamily``.\n\n- Implicit conversion of a private key into a public key. Currently\n",
                      "markdown": "`\n- Support for OtherNames in X.509 certificates is deprecated\n\n- The ``PBKDF`` class is deprecated in favor of ``PasswordHash`` and\n  ``PasswordHashFamily``.\n\n- Implicit conversion of a private key into a public key. Currently\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/deprecated.rst"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 34,
                  "endLine": 129,
                  "endColumn": 42,
                  "snippet": {
                    "text": "- Stream cipher ``shake_cipher``. Note this deprecation affects only\n  using SHAKE as a ``StreamCipher`` not as a hash or XOF\n\n- `cryptobox`: A not unreasonable password based encryption utility\n  but neither modern (these days) nor widely implemented.\n\n- ``dlies``: DLIES is considered quite obsolete\n",
                    "rendered": {
                      "text": "- Stream cipher ``shake_cipher``. Note this deprecation affects only\n  using SHAKE as a ``StreamCipher`` not as a hash or XOF\n\n- `cryptobox`: A not unreasonable password based encryption utility\n  but neither modern (these days) nor widely implemented.\n\n- ``dlies``: DLIES is considered quite obsolete\n",
                      "markdown": "`- Stream cipher ``shake_cipher``. Note this deprecation affects only\n  using SHAKE as a ``StreamCipher`` not as a hash or XOF\n\n- `cryptobox`: A not unreasonable password based encryption utility\n  but neither modern (these days) nor widely implemented.\n\n- ``dlies``: DLIES is considered quite obsolete\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/deprecated.rst"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 29,
                  "endLine": 119,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n- Hash function ``streebog``: Incredibly sketchy situation with the sbox\n\n- Hash function ``md4``: It's time to let go\n\n- Signature scheme ``gost_3410``\n\n",
                    "rendered": {
                      "text": "\n- Hash function ``streebog``: Incredibly sketchy situation with the sbox\n\n- Hash function ``md4``: It's time to let go\n\n- Signature scheme ``gost_3410``\n\n",
                      "markdown": "`\n- Hash function ``streebog``: Incredibly sketchy situation with the sbox\n\n- Hash function ``md4``: It's time to let go\n\n- Signature scheme ``gost_3410``\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/credits.rst"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 13,
                  "endLine": 150,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  S: Bochum, Germany\n\n  N: Erwan Chaussy\n  D: Base32, Base64 matching Base32 implementation\n  S: France\n\n  N: Daniel Wyatt (on behalf of Ribose Inc)\n",
                    "rendered": {
                      "text": "  S: Bochum, Germany\n\n  N: Erwan Chaussy\n  D: Base32, Base64 matching Base32 implementation\n  S: France\n\n  N: Daniel Wyatt (on behalf of Ribose Inc)\n",
                      "markdown": "`  S: Bochum, Germany\n\n  N: Erwan Chaussy\n  D: Base32, Base64 matching Base32 implementation\n  S: France\n\n  N: Daniel Wyatt (on behalf of Ribose Inc)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/credits.rst"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 7,
                  "endLine": 5,
                  "endColumn": 11,
                  "snippet": {
                    "text": "Credits\n========================================\n\nThis is at least a partial credits-file of people that have contributed\nto botan. It is sorted by name and formatted to allow easy grepping\nand beautification by scripts. The fields are name (N), email (E),\nweb-address (W), PGP key ID and fingerprint (P), description (D),\n",
                    "rendered": {
                      "text": "Credits\n========================================\n\nThis is at least a partial credits-file of people that have contributed\nto botan. It is sorted by name and formatted to allow easy grepping\nand beautification by scripts. The fields are name (N), email (E),\nweb-address (W), PGP key ID and fingerprint (P), description (D),\n",
                      "markdown": "`Credits\n========================================\n\nThis is at least a partial credits-file of people that have contributed\nto botan. It is sorted by name and formatted to allow easy grepping\nand beautification by scripts. The fields are name (N), email (E),\nweb-address (W), PGP key ID and fingerprint (P), description (D),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/credits.rst"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 12,
                  "endLine": 150,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  S: Bochum, Germany\n\n  N: Erwan Chaussy\n  D: Base32, Base64 matching Base32 implementation\n  S: France\n\n  N: Daniel Wyatt (on behalf of Ribose Inc)\n",
                    "rendered": {
                      "text": "  S: Bochum, Germany\n\n  N: Erwan Chaussy\n  D: Base32, Base64 matching Base32 implementation\n  S: France\n\n  N: Daniel Wyatt (on behalf of Ribose Inc)\n",
                      "markdown": "`  S: Bochum, Germany\n\n  N: Erwan Chaussy\n  D: Base32, Base64 matching Base32 implementation\n  S: France\n\n  N: Daniel Wyatt (on behalf of Ribose Inc)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/credits.rst"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 4,
                  "endLine": 114,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n  N: Vaclav Ovsik\n  E: vaclav.ovsik@i.cz\n  D: Perl XS module (src/contrib/perl-xs)\n\n  N: Luca Piccarreta\n  E: luca.piccarreta@gmail.com\n",
                    "rendered": {
                      "text": "\n  N: Vaclav Ovsik\n  E: vaclav.ovsik@i.cz\n  D: Perl XS module (src/contrib/perl-xs)\n\n  N: Luca Piccarreta\n  E: luca.piccarreta@gmail.com\n",
                      "markdown": "`\n  N: Vaclav Ovsik\n  E: vaclav.ovsik@i.cz\n  D: Perl XS module (src/contrib/perl-xs)\n\n  N: Luca Piccarreta\n  E: luca.piccarreta@gmail.com\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/versions.rst"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 2,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "   A macro expanding to a string that is set at build time using the\n   ``--distribution-info`` option. It allows a packager of the library\n   to specify any distribution-specific patches. If no value is given\n   at build time, the value is the string \"unspecified\".\n\n.. c:macro:: BOTAN_VERSION_VC_REVISION\n\n",
                    "rendered": {
                      "text": "   A macro expanding to a string that is set at build time using the\n   ``--distribution-info`` option. It allows a packager of the library\n   to specify any distribution-specific patches. If no value is given\n   at build time, the value is the string \"unspecified\".\n\n.. c:macro:: BOTAN_VERSION_VC_REVISION\n\n",
                      "markdown": "`   A macro expanding to a string that is set at build time using the\n   ``--distribution-info`` option. It allows a packager of the library\n   to specify any distribution-specific patches. If no value is given\n   at build time, the value is the string \"unspecified\".\n\n.. c:macro:: BOTAN_VERSION_VC_REVISION\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/versions.rst"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 44,
                  "endLine": 40,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n   .. versionadded:: 1.9.3\n\n   A macro expanding to a string that is set at build time using the\n   ``--distribution-info`` option. It allows a packager of the library\n   to specify any distribution-specific patches. If no value is given\n   at build time, the value is the string \"unspecified\".\n",
                    "rendered": {
                      "text": "\n   .. versionadded:: 1.9.3\n\n   A macro expanding to a string that is set at build time using the\n   ``--distribution-info`` option. It allows a packager of the library\n   to specify any distribution-specific patches. If no value is given\n   at build time, the value is the string \"unspecified\".\n",
                      "markdown": "`\n   .. versionadded:: 1.9.3\n\n   A macro expanding to a string that is set at build time using the\n   ``--distribution-info`` option. It allows a packager of the library\n   to specify any distribution-specific patches. If no value is given\n   at build time, the value is the string \"unspecified\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/versions.rst"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 61,
                  "endLine": 55,
                  "snippet": {
                    "text": "   determined. It is set for all official releases, and for builds that\n   originated from within a git checkout.\n\nThe runtime version information, and some helpers for compile time\nversion checks, are included in `botan/version.h`\n\n.. cpp:function:: std::string version_string()\n\n",
                    "rendered": {
                      "text": "   determined. It is set for all official releases, and for builds that\n   originated from within a git checkout.\n\nThe runtime version information, and some helpers for compile time\nversion checks, are included in `botan/version.h`\n\n.. cpp:function:: std::string version_string()\n\n",
                      "markdown": "`   determined. It is set for all official releases, and for builds that\n   originated from within a git checkout.\n\nThe runtime version information, and some helpers for compile time\nversion checks, are included in `botan/version.h`\n\n.. cpp:function:: std::string version_string()\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/versions.rst"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 27,
                  "endLine": 52,
                  "endColumn": 32,
                  "snippet": {
                    "text": "   A macro expanding to a string that is set to a revision identifier\n   corresponding to the source, or \"unknown\" if this could not be\n   determined. It is set for all official releases, and for builds that\n   originated from within a git checkout.\n\nThe runtime version information, and some helpers for compile time\nversion checks, are included in `botan/version.h`\n",
                    "rendered": {
                      "text": "   A macro expanding to a string that is set to a revision identifier\n   corresponding to the source, or \"unknown\" if this could not be\n   determined. It is set for all official releases, and for builds that\n   originated from within a git checkout.\n\nThe runtime version information, and some helpers for compile time\nversion checks, are included in `botan/version.h`\n",
                      "markdown": "`   A macro expanding to a string that is set to a revision identifier\n   corresponding to the source, or \"unknown\" if this could not be\n   determined. It is set for all official releases, and for builds that\n   originated from within a git checkout.\n\nThe runtime version information, and some helpers for compile time\nversion checks, are included in `botan/version.h`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/versions.rst"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 53,
                  "endLine": 40,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n   .. versionadded:: 1.9.3\n\n   A macro expanding to a string that is set at build time using the\n   ``--distribution-info`` option. It allows a packager of the library\n   to specify any distribution-specific patches. If no value is given\n   at build time, the value is the string \"unspecified\".\n",
                    "rendered": {
                      "text": "\n   .. versionadded:: 1.9.3\n\n   A macro expanding to a string that is set at build time using the\n   ``--distribution-info`` option. It allows a packager of the library\n   to specify any distribution-specific patches. If no value is given\n   at build time, the value is the string \"unspecified\".\n",
                      "markdown": "`\n   .. versionadded:: 1.9.3\n\n   A macro expanding to a string that is set at build time using the\n   ``--distribution-info`` option. It allows a packager of the library\n   to specify any distribution-specific patches. If no value is given\n   at build time, the value is the string \"unspecified\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/psk_db.rst"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 61,
                  "endLine": 44,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n   .. cpp:function:: void set_str(const std::string& name, const std::string& psk)\n\n      Like ``set`` but accepts the psk as a string (eg for a password).\n\n   .. cpp:function:: template<typename Alloc> void set_vec(const std::string& name, \\\n                                              const std::vector<uint8_t, Alloc>& psk)\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: void set_str(const std::string& name, const std::string& psk)\n\n      Like ``set`` but accepts the psk as a string (eg for a password).\n\n   .. cpp:function:: template<typename Alloc> void set_vec(const std::string& name, \\\n                                              const std::vector<uint8_t, Alloc>& psk)\n",
                      "markdown": "`\n   .. cpp:function:: void set_str(const std::string& name, const std::string& psk)\n\n      Like ``set`` but accepts the psk as a string (eg for a password).\n\n   .. cpp:function:: template<typename Alloc> void set_vec(const std::string& name, \\\n                                              const std::vector<uint8_t, Alloc>& psk)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/psk_db.rst"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 6,
                  "endLine": 85,
                  "endColumn": 12,
                  "snippet": {
                    "text": "   .. cpp:function:: virtual void kv_set(const std::string& index, const std::string& value) = 0\n\n      Save an encrypted value. Both ``index`` and ``value`` will be non-empty\n      base64 encoded strings.\n\n   .. cpp:function:: virtual std::string kv_get(const std::string& index) const = 0\n\n",
                    "rendered": {
                      "text": "   .. cpp:function:: virtual void kv_set(const std::string& index, const std::string& value) = 0\n\n      Save an encrypted value. Both ``index`` and ``value`` will be non-empty\n      base64 encoded strings.\n\n   .. cpp:function:: virtual std::string kv_get(const std::string& index) const = 0\n\n",
                      "markdown": "`   .. cpp:function:: virtual void kv_set(const std::string& index, const std::string& value) = 0\n\n      Save an encrypted value. Both ``index`` and ``value`` will be non-empty\n      base64 encoded strings.\n\n   .. cpp:function:: virtual std::string kv_get(const std::string& index) const = 0\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/psk_db.rst"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 5,
                  "endLine": 85,
                  "endColumn": 13,
                  "snippet": {
                    "text": "   .. cpp:function:: virtual void kv_set(const std::string& index, const std::string& value) = 0\n\n      Save an encrypted value. Both ``index`` and ``value`` will be non-empty\n      base64 encoded strings.\n\n   .. cpp:function:: virtual std::string kv_get(const std::string& index) const = 0\n\n",
                    "rendered": {
                      "text": "   .. cpp:function:: virtual void kv_set(const std::string& index, const std::string& value) = 0\n\n      Save an encrypted value. Both ``index`` and ``value`` will be non-empty\n      base64 encoded strings.\n\n   .. cpp:function:: virtual std::string kv_get(const std::string& index) const = 0\n\n",
                      "markdown": "`   .. cpp:function:: virtual void kv_set(const std::string& index, const std::string& value) = 0\n\n      Save an encrypted value. Both ``index`` and ``value`` will be non-empty\n      base64 encoded strings.\n\n   .. cpp:function:: virtual std::string kv_get(const std::string& index) const = 0\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/otp.rst"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 46,
                  "endLine": 31,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nAnyone with access to the client-specific secret key can authenticate as that\nclient, so it should be treated with the same security consideration as would be\ngiven to any other symmetric key or plaintext password.\n\n.. cpp:class:: HOTP\n\n",
                    "rendered": {
                      "text": "\nAnyone with access to the client-specific secret key can authenticate as that\nclient, so it should be treated with the same security consideration as would be\ngiven to any other symmetric key or plaintext password.\n\n.. cpp:class:: HOTP\n\n",
                      "markdown": "`\nAnyone with access to the client-specific secret key can authenticate as that\nclient, so it should be treated with the same security consideration as would be\ngiven to any other symmetric key or plaintext password.\n\n.. cpp:class:: HOTP\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/otp.rst"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "endColumn": 8,
                  "snippet": {
                    "text": "fixed secret key which is used to derive a sequence of short passwords, each of\nwhich is accepted only once. Commonly this is used to implement two-factor\nauthentication (2FA), where the user authenticates using both a conventional\npassword (or a public key signature) and an OTP generated by a small device such\nas a mobile phone.\n\nBotan implements the HOTP and TOTP schemes from RFC 4226 and 6238.\n",
                    "rendered": {
                      "text": "fixed secret key which is used to derive a sequence of short passwords, each of\nwhich is accepted only once. Commonly this is used to implement two-factor\nauthentication (2FA), where the user authenticates using both a conventional\npassword (or a public key signature) and an OTP generated by a small device such\nas a mobile phone.\n\nBotan implements the HOTP and TOTP schemes from RFC 4226 and 6238.\n",
                      "markdown": "`fixed secret key which is used to derive a sequence of short passwords, each of\nwhich is accepted only once. Commonly this is used to implement two-factor\nauthentication (2FA), where the user authenticates using both a conventional\npassword (or a public key signature) and an OTP generated by a small device such\nas a mobile phone.\n\nBotan implements the HOTP and TOTP schemes from RFC 4226 and 6238.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/otp.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 61,
                  "endLine": 7,
                  "endColumn": 69,
                  "snippet": {
                    "text": ".. versionadded:: 2.2.0\n\nOne time password schemes are a user authentication method that relies on a\nfixed secret key which is used to derive a sequence of short passwords, each of\nwhich is accepted only once. Commonly this is used to implement two-factor\nauthentication (2FA), where the user authenticates using both a conventional\npassword (or a public key signature) and an OTP generated by a small device such\n",
                    "rendered": {
                      "text": ".. versionadded:: 2.2.0\n\nOne time password schemes are a user authentication method that relies on a\nfixed secret key which is used to derive a sequence of short passwords, each of\nwhich is accepted only once. Commonly this is used to implement two-factor\nauthentication (2FA), where the user authenticates using both a conventional\npassword (or a public key signature) and an OTP generated by a small device such\n",
                      "markdown": "`.. versionadded:: 2.2.0\n\nOne time password schemes are a user authentication method that relies on a\nfixed secret key which is used to derive a sequence of short passwords, each of\nwhich is accepted only once. Commonly this is used to implement two-factor\nauthentication (2FA), where the user authenticates using both a conventional\npassword (or a public key signature) and an OTP generated by a small device such\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/otp.rst"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "endLine": 6,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n.. versionadded:: 2.2.0\n\nOne time password schemes are a user authentication method that relies on a\nfixed secret key which is used to derive a sequence of short passwords, each of\nwhich is accepted only once. Commonly this is used to implement two-factor\nauthentication (2FA), where the user authenticates using both a conventional\n",
                    "rendered": {
                      "text": "\n.. versionadded:: 2.2.0\n\nOne time password schemes are a user authentication method that relies on a\nfixed secret key which is used to derive a sequence of short passwords, each of\nwhich is accepted only once. Commonly this is used to implement two-factor\nauthentication (2FA), where the user authenticates using both a conventional\n",
                      "markdown": "`\n.. versionadded:: 2.2.0\n\nOne time password schemes are a user authentication method that relies on a\nfixed secret key which is used to derive a sequence of short passwords, each of\nwhich is accepted only once. Commonly this is used to implement two-factor\nauthentication (2FA), where the user authenticates using both a conventional\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/otp.rst"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 9,
                  "endLine": 1,
                  "endColumn": 17,
                  "snippet": {
                    "text": "One Time Passwords\n========================\n\n.. versionadded:: 2.2.0\n",
                    "rendered": {
                      "text": "One Time Passwords\n========================\n\n.. versionadded:: 2.2.0\n",
                      "markdown": "`One Time Passwords\n========================\n\n.. versionadded:: 2.2.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/otp.rst"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 38,
                  "endLine": 63,
                  "endColumn": 59,
                  "snippet": {
                    "text": "       necessary. This is useful for instance when a client mistypes an OTP on\n       entry; the authentication will fail so the server will not update its\n       counter, but the client device will subsequently show the OTP for the\n       next counter. Depending on the environment a *resync_range* of 3 to 10\n       might be appropriate.\n\n       Returns a pair of (is_valid,next_counter_to_use). If the OTP is invalid\n",
                    "rendered": {
                      "text": "       necessary. This is useful for instance when a client mistypes an OTP on\n       entry; the authentication will fail so the server will not update its\n       counter, but the client device will subsequently show the OTP for the\n       next counter. Depending on the environment a *resync_range* of 3 to 10\n       might be appropriate.\n\n       Returns a pair of (is_valid,next_counter_to_use). If the OTP is invalid\n",
                      "markdown": "`       necessary. This is useful for instance when a client mistypes an OTP on\n       entry; the authentication will fail so the server will not update its\n       counter, but the client device will subsequently show the OTP for the\n       next counter. Depending on the environment a *resync_range* of 3 to 10\n       might be appropriate.\n\n       Returns a pair of (is_valid,next_counter_to_use). If the OTP is invalid\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/otp.rst"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 65,
                  "endLine": 61,
                  "endColumn": 73,
                  "snippet": {
                    "text": "       authentication plus 1. If *resync_resync* is greater than 0, some number\n       of counter values above *starting_counter* will also be checked if\n       necessary. This is useful for instance when a client mistypes an OTP on\n       entry; the authentication will fail so the server will not update its\n       counter, but the client device will subsequently show the OTP for the\n       next counter. Depending on the environment a *resync_range* of 3 to 10\n       might be appropriate.\n",
                    "rendered": {
                      "text": "       authentication plus 1. If *resync_resync* is greater than 0, some number\n       of counter values above *starting_counter* will also be checked if\n       necessary. This is useful for instance when a client mistypes an OTP on\n       entry; the authentication will fail so the server will not update its\n       counter, but the client device will subsequently show the OTP for the\n       next counter. Depending on the environment a *resync_range* of 3 to 10\n       might be appropriate.\n",
                      "markdown": "`       authentication plus 1. If *resync_resync* is greater than 0, some number\n       of counter values above *starting_counter* will also be checked if\n       necessary. This is useful for instance when a client mistypes an OTP on\n       entry; the authentication will fail so the server will not update its\n       counter, but the client device will subsequently show the OTP for the\n       next counter. Depending on the environment a *resync_range* of 3 to 10\n       might be appropriate.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/otp.rst"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 3,
                  "endLine": 6,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n.. versionadded:: 2.2.0\n\nOne time password schemes are a user authentication method that relies on a\nfixed secret key which is used to derive a sequence of short passwords, each of\nwhich is accepted only once. Commonly this is used to implement two-factor\nauthentication (2FA), where the user authenticates using both a conventional\n",
                    "rendered": {
                      "text": "\n.. versionadded:: 2.2.0\n\nOne time password schemes are a user authentication method that relies on a\nfixed secret key which is used to derive a sequence of short passwords, each of\nwhich is accepted only once. Commonly this is used to implement two-factor\nauthentication (2FA), where the user authenticates using both a conventional\n",
                      "markdown": "`\n.. versionadded:: 2.2.0\n\nOne time password schemes are a user authentication method that relies on a\nfixed secret key which is used to derive a sequence of short passwords, each of\nwhich is accepted only once. Commonly this is used to implement two-factor\nauthentication (2FA), where the user authenticates using both a conventional\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/otp.rst"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 3,
                  "endLine": 1,
                  "endColumn": 9,
                  "snippet": {
                    "text": "One Time Passwords\n========================\n\n.. versionadded:: 2.2.0\n",
                    "rendered": {
                      "text": "One Time Passwords\n========================\n\n.. versionadded:: 2.2.0\n",
                      "markdown": "`One Time Passwords\n========================\n\n.. versionadded:: 2.2.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ecc.rst"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 48,
                  "endLine": 82,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n      .. cpp:function:: std::string PEM_encode() const\n\n         Return the PEM encoding of this group (base64 of DER encoding plus\n         header/trailer).\n\n      .. cpp:function:: size_t get_p_bits() const\n",
                    "rendered": {
                      "text": "\n      .. cpp:function:: std::string PEM_encode() const\n\n         Return the PEM encoding of this group (base64 of DER encoding plus\n         header/trailer).\n\n      .. cpp:function:: size_t get_p_bits() const\n",
                      "markdown": "`\n      .. cpp:function:: std::string PEM_encode() const\n\n         Return the PEM encoding of this group (base64 of DER encoding plus\n         header/trailer).\n\n      .. cpp:function:: size_t get_p_bits() const\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ecc.rst"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 50,
                  "endLine": 263,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n   .. cpp:function:: bool is_zero() const\n\n      Return true if this point is zero (aka point at infinity).\n\n   .. cpp:function:: bool on_the_curve() const\n\n",
                    "rendered": {
                      "text": "\n   .. cpp:function:: bool is_zero() const\n\n      Return true if this point is zero (aka point at infinity).\n\n   .. cpp:function:: bool on_the_curve() const\n\n",
                      "markdown": "`\n   .. cpp:function:: bool is_zero() const\n\n      Return true if this point is zero (aka point at infinity).\n\n   .. cpp:function:: bool on_the_curve() const\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ecc.rst"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 39,
                  "endLine": 253,
                  "endColumn": 43,
                  "snippet": {
                    "text": "   .. cpp:function:: static void force_all_affine(std::vector<EC_Point>& points, \\\n                                                  secure_vector<word>& ws)\n\n      Force several points to be affine at once. Uses Montgomery's\n      trick to reduce number of inversions required, so this is much\n      faster than calling ``force_affine`` on each point in sequence.\n\n",
                    "rendered": {
                      "text": "   .. cpp:function:: static void force_all_affine(std::vector<EC_Point>& points, \\\n                                                  secure_vector<word>& ws)\n\n      Force several points to be affine at once. Uses Montgomery's\n      trick to reduce number of inversions required, so this is much\n      faster than calling ``force_affine`` on each point in sequence.\n\n",
                      "markdown": "`   .. cpp:function:: static void force_all_affine(std::vector<EC_Point>& points, \\\n                                                  secure_vector<word>& ws)\n\n      Force several points to be affine at once. Uses Montgomery's\n      trick to reduce number of inversions required, so this is much\n      faster than calling ``force_affine`` on each point in sequence.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ecc.rst"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 26,
                  "endLine": 248,
                  "endColumn": 30,
                  "snippet": {
                    "text": "   .. cpp:function:: void force_affine()\n\n      Convert the point to its equivalent affine coordinates. Throws\n      if this is the point at infinity.\n\n   .. cpp:function:: static void force_all_affine(std::vector<EC_Point>& points, \\\n                                                  secure_vector<word>& ws)\n",
                    "rendered": {
                      "text": "   .. cpp:function:: void force_affine()\n\n      Convert the point to its equivalent affine coordinates. Throws\n      if this is the point at infinity.\n\n   .. cpp:function:: static void force_all_affine(std::vector<EC_Point>& points, \\\n                                                  secure_vector<word>& ws)\n",
                      "markdown": "`   .. cpp:function:: void force_affine()\n\n      Convert the point to its equivalent affine coordinates. Throws\n      if this is the point at infinity.\n\n   .. cpp:function:: static void force_all_affine(std::vector<EC_Point>& points, \\\n                                                  secure_vector<word>& ws)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ecc.rst"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 45,
                  "endLine": 194,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n      .. cpp:function:: EC_Point zero_point() const\n\n         Return the zero point (aka the point at infinity).\n\n      .. cpp:function:: EC_Point OS2ECP(const uint8_t bits[], size_t len) const\n\n",
                    "rendered": {
                      "text": "\n      .. cpp:function:: EC_Point zero_point() const\n\n         Return the zero point (aka the point at infinity).\n\n      .. cpp:function:: EC_Point OS2ECP(const uint8_t bits[], size_t len) const\n\n",
                      "markdown": "`\n      .. cpp:function:: EC_Point zero_point() const\n\n         Return the zero point (aka the point at infinity).\n\n      .. cpp:function:: EC_Point OS2ECP(const uint8_t bits[], size_t len) const\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/block_cipher.rst"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 12,
                  "endLine": 188,
                  "endColumn": 20,
                  "snippet": {
                    "text": "~~~~~~~~~\n\nA 64-bit cipher popular in the pre-AES era. Very slow key setup. Also used (with\nbcrypt) for password hashing.\n\nAvailable if ``BOTAN_HAS_BLOWFISH`` is defined.\n\n",
                    "rendered": {
                      "text": "~~~~~~~~~\n\nA 64-bit cipher popular in the pre-AES era. Very slow key setup. Also used (with\nbcrypt) for password hashing.\n\nAvailable if ``BOTAN_HAS_BLOWFISH`` is defined.\n\n",
                      "markdown": "`~~~~~~~~~\n\nA 64-bit cipher popular in the pre-AES era. Very slow key setup. Also used (with\nbcrypt) for password hashing.\n\nAvailable if ``BOTAN_HAS_BLOWFISH`` is defined.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/migration_guide.rst"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 30,
                  "endLine": 439,
                  "endColumn": 40,
                  "snippet": {
                    "text": "NIST SP 800-208. While signatures created with old private keys are still valid using\nthe old public key, new valid signatures cannot be created. To still support legacy\nprivate XMSS keys, they can be used by passing ``WOTS_Derivation_Method::Botan2x`` to\nthe constructor of the ``XMSS_PrivateKey``.\n\nPrivate XMSS keys created this way use the old derivation logic and can therefore\ngenerate new valid signatures. It is recommended to use\n",
                    "rendered": {
                      "text": "NIST SP 800-208. While signatures created with old private keys are still valid using\nthe old public key, new valid signatures cannot be created. To still support legacy\nprivate XMSS keys, they can be used by passing ``WOTS_Derivation_Method::Botan2x`` to\nthe constructor of the ``XMSS_PrivateKey``.\n\nPrivate XMSS keys created this way use the old derivation logic and can therefore\ngenerate new valid signatures. It is recommended to use\n",
                      "markdown": "`NIST SP 800-208. While signatures created with old private keys are still valid using\nthe old public key, new valid signatures cannot be created. To still support legacy\nprivate XMSS keys, they can be used by passing ``WOTS_Derivation_Method::Botan2x`` to\nthe constructor of the ``XMSS_PrivateKey``.\n\nPrivate XMSS keys created this way use the old derivation logic and can therefore\ngenerate new valid signatures. It is recommended to use\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/migration_guide.rst"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 10,
                  "endLine": 415,
                  "endColumn": 20,
                  "snippet": {
                    "text": "--------------------------------\n\nKeys based on the discrete logarithm problem no longer derive from the\nDL_Scheme_PrivateKey and DL_Scheme_PublicKey classes; these classes\nhave been removed.\n\nFunctions to access DL algorithm internal fields (such as the integer value of\n",
                    "rendered": {
                      "text": "--------------------------------\n\nKeys based on the discrete logarithm problem no longer derive from the\nDL_Scheme_PrivateKey and DL_Scheme_PublicKey classes; these classes\nhave been removed.\n\nFunctions to access DL algorithm internal fields (such as the integer value of\n",
                      "markdown": "`--------------------------------\n\nKeys based on the discrete logarithm problem no longer derive from the\nDL_Scheme_PrivateKey and DL_Scheme_PublicKey classes; these classes\nhave been removed.\n\nFunctions to access DL algorithm internal fields (such as the integer value of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/migration_guide.rst"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 42,
                  "endLine": 355,
                  "endColumn": 53,
                  "snippet": {
                    "text": "implementation had to keep alive \"forever\", since there was no way for it to\nknow when or if the TLS layer had completed using the returned key.\n\nNow this function returns std::shared_ptr<Private_Key>\n\nOID operator+\n------------------------\n",
                    "rendered": {
                      "text": "implementation had to keep alive \"forever\", since there was no way for it to\nknow when or if the TLS layer had completed using the returned key.\n\nNow this function returns std::shared_ptr<Private_Key>\n\nOID operator+\n------------------------\n",
                      "markdown": "`implementation had to keep alive \"forever\", since there was no way for it to\nknow when or if the TLS layer had completed using the returned key.\n\nNow this function returns std::shared_ptr<Private_Key>\n\nOID operator+\n------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/migration_guide.rst"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 21,
                  "endLine": 348,
                  "endColumn": 32,
                  "snippet": {
                    "text": "Previously the constructors to the DLIES classes took raw pointers,\nand retained ownership of them. They now consume std::unique_ptrs\n\nCredentials_Manager::private_key_for\n-------------------------------------\n\nPreviously this function returned a raw pointer, which the Credentials_Manager\n",
                    "rendered": {
                      "text": "Previously the constructors to the DLIES classes took raw pointers,\nand retained ownership of them. They now consume std::unique_ptrs\n\nCredentials_Manager::private_key_for\n-------------------------------------\n\nPreviously this function returned a raw pointer, which the Credentials_Manager\n",
                      "markdown": "`Previously the constructors to the DLIES classes took raw pointers,\nand retained ownership of them. They now consume std::unique_ptrs\n\nCredentials_Manager::private_key_for\n-------------------------------------\n\nPreviously this function returned a raw pointer, which the Credentials_Manager\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/migration_guide.rst"
                },
                "region": {
                  "startLine": 162,
                  "endLine": 162,
                  "endColumn": 11,
                  "snippet": {
                    "text": "Notably, this *does not necessarily* mean that the leaf certificate must feature\na public key type able to generate one of those schemes.\n\nprivate_key_for()\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nApplications must now provide a `std::shared_ptr<>` to the requested private key\n",
                    "rendered": {
                      "text": "Notably, this *does not necessarily* mean that the leaf certificate must feature\na public key type able to generate one of those schemes.\n\nprivate_key_for()\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nApplications must now provide a `std::shared_ptr<>` to the requested private key\n",
                      "markdown": "`Notably, this *does not necessarily* mean that the leaf certificate must feature\na public key type able to generate one of those schemes.\n\nprivate_key_for()\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nApplications must now provide a `std::shared_ptr<>` to the requested private key\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/migration_guide.rst"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 13,
                  "endLine": 395,
                  "endColumn": 17,
                  "snippet": {
                    "text": "In line with the previous entries, previously Botan used a string like\n\"ECDSA/EMSA1(SHA-256)\" to identify the OID 1.2.840.10045.4.3.2. Now it\nuses the string \"ECDSA/SHA-256\" instead, and does not recognize the\nEMSA1 variant at all (for example in ``OID::from_string``).\n\nPublic Key Signature Padding\n-----------------------------\n",
                    "rendered": {
                      "text": "In line with the previous entries, previously Botan used a string like\n\"ECDSA/EMSA1(SHA-256)\" to identify the OID 1.2.840.10045.4.3.2. Now it\nuses the string \"ECDSA/SHA-256\" instead, and does not recognize the\nEMSA1 variant at all (for example in ``OID::from_string``).\n\nPublic Key Signature Padding\n-----------------------------\n",
                      "markdown": "`In line with the previous entries, previously Botan used a string like\n\"ECDSA/EMSA1(SHA-256)\" to identify the OID 1.2.840.10045.4.3.2. Now it\nuses the string \"ECDSA/SHA-256\" instead, and does not recognize the\nEMSA1 variant at all (for example in ``OID::from_string``).\n\nPublic Key Signature Padding\n-----------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/migration_guide.rst"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 12,
                  "endLine": 361,
                  "endColumn": 16,
                  "snippet": {
                    "text": "------------------------\n\nOID operator+ allowed concatenating new fields onto an object identifier. This\nwas not used at all within the library or the tests, and seems of marginal\nvalue, so it was removed.\n\nIf necessary in your application, this can be done by retrieving the\n",
                    "rendered": {
                      "text": "------------------------\n\nOID operator+ allowed concatenating new fields onto an object identifier. This\nwas not used at all within the library or the tests, and seems of marginal\nvalue, so it was removed.\n\nIf necessary in your application, this can be done by retrieving the\n",
                      "markdown": "`------------------------\n\nOID operator+ allowed concatenating new fields onto an object identifier. This\nwas not used at all within the library or the tests, and seems of marginal\nvalue, so it was removed.\n\nIf necessary in your application, this can be done by retrieving the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/migration_guide.rst"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 31,
                  "endLine": 207,
                  "endColumn": 40,
                  "snippet": {
                    "text": "To accomodates this flexibility the `Session_Manager` base class API has changed\ndrastically and is now responsible for creation, storage and management of both\nstateful sessions and stateless session tickets.\nSub-classes therefore gain full control over the session ticket's structure and\ncontent.\n\nAPI details are documented in the class' doxygen comments.\n",
                    "rendered": {
                      "text": "To accomodates this flexibility the `Session_Manager` base class API has changed\ndrastically and is now responsible for creation, storage and management of both\nstateful sessions and stateless session tickets.\nSub-classes therefore gain full control over the session ticket's structure and\ncontent.\n\nAPI details are documented in the class' doxygen comments.\n",
                      "markdown": "`To accomodates this flexibility the `Session_Manager` base class API has changed\ndrastically and is now responsible for creation, storage and management of both\nstateful sessions and stateless session tickets.\nSub-classes therefore gain full control over the session ticket's structure and\ncontent.\n\nAPI details are documented in the class' doxygen comments.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/migration_guide.rst"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 11,
                  "endLine": 187,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Therefore, TLS server applications that relied on Botan's default session\nmanagement implementations (most notably `Session_Manager_SQLite` or\n`Session_Manager_In_Memory`) are advised to re-evaluate their choice.\nHave a look at `Session_Manager_Hybrid` to retain support for both stateful and\nstateless TLS sessions.\nTLS client applications may safely keep relying on the above-mentioned default\nimplementations.\n",
                    "rendered": {
                      "text": "Therefore, TLS server applications that relied on Botan's default session\nmanagement implementations (most notably `Session_Manager_SQLite` or\n`Session_Manager_In_Memory`) are advised to re-evaluate their choice.\nHave a look at `Session_Manager_Hybrid` to retain support for both stateful and\nstateless TLS sessions.\nTLS client applications may safely keep relying on the above-mentioned default\nimplementations.\n",
                      "markdown": "`Therefore, TLS server applications that relied on Botan's default session\nmanagement implementations (most notably `Session_Manager_SQLite` or\n`Session_Manager_In_Memory`) are advised to re-evaluate their choice.\nHave a look at `Session_Manager_Hybrid` to retain support for both stateful and\nstateless TLS sessions.\nTLS client applications may safely keep relying on the above-mentioned default\nimplementations.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/migration_guide.rst"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 51,
                  "endLine": 55,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\nThe build module ``tls`` is now internal and contains common TLS helpers. Users\nhave to explicitly enable ``tls12`` and/or ``tls13``. Note that for Botan 3.0 it\nis not (yet) possible to exclusively enable TLS 1.3 at build time.\n\nRemoved Functionality\n^^^^^^^^^^^^^^^^^^^^^\n",
                    "rendered": {
                      "text": "\nThe build module ``tls`` is now internal and contains common TLS helpers. Users\nhave to explicitly enable ``tls12`` and/or ``tls13``. Note that for Botan 3.0 it\nis not (yet) possible to exclusively enable TLS 1.3 at build time.\n\nRemoved Functionality\n^^^^^^^^^^^^^^^^^^^^^\n",
                      "markdown": "`\nThe build module ``tls`` is now internal and contains common TLS helpers. Users\nhave to explicitly enable ``tls12`` and/or ``tls13``. Note that for Botan 3.0 it\nis not (yet) possible to exclusively enable TLS 1.3 at build time.\n\nRemoved Functionality\n^^^^^^^^^^^^^^^^^^^^^\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/index.rst"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 35,
                  "endLine": 70,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  by Alfred J. Menezes, Paul C. Van Oorschot, and Scott A. Vanstone\n\nIf you're doing something non-trivial or unique, you might want to at\nthe very least ask for review/input at a place such as the\n`cryptography stack exchange <https://crypto.stackexchange.com/>`_.\nAnd (if possible) pay a professional cryptographer or security company\nto review your design and code.\n",
                    "rendered": {
                      "text": "  by Alfred J. Menezes, Paul C. Van Oorschot, and Scott A. Vanstone\n\nIf you're doing something non-trivial or unique, you might want to at\nthe very least ask for review/input at a place such as the\n`cryptography stack exchange <https://crypto.stackexchange.com/>`_.\nAnd (if possible) pay a professional cryptographer or security company\nto review your design and code.\n",
                      "markdown": "`  by Alfred J. Menezes, Paul C. Van Oorschot, and Scott A. Vanstone\n\nIf you're doing something non-trivial or unique, you might want to at\nthe very least ask for review/input at a place such as the\n`cryptography stack exchange <https://crypto.stackexchange.com/>`_.\nAnd (if possible) pay a professional cryptographer or security company\nto review your design and code.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/index.rst"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 66,
                  "endLine": 70,
                  "snippet": {
                    "text": "- `Handbook of Applied Cryptography <http://www.cacr.math.uwaterloo.ca/hac/>`_\n  by Alfred J. Menezes, Paul C. Van Oorschot, and Scott A. Vanstone\n\nIf you're doing something non-trivial or unique, you might want to at\nthe very least ask for review/input at a place such as the\n`cryptography stack exchange <https://crypto.stackexchange.com/>`_.\nAnd (if possible) pay a professional cryptographer or security company\nto review your design and code.\n",
                    "rendered": {
                      "text": "- `Handbook of Applied Cryptography <http://www.cacr.math.uwaterloo.ca/hac/>`_\n  by Alfred J. Menezes, Paul C. Van Oorschot, and Scott A. Vanstone\n\nIf you're doing something non-trivial or unique, you might want to at\nthe very least ask for review/input at a place such as the\n`cryptography stack exchange <https://crypto.stackexchange.com/>`_.\nAnd (if possible) pay a professional cryptographer or security company\nto review your design and code.\n",
                      "markdown": "`- `Handbook of Applied Cryptography <http://www.cacr.math.uwaterloo.ca/hac/>`_\n  by Alfred J. Menezes, Paul C. Van Oorschot, and Scott A. Vanstone\n\nIf you're doing something non-trivial or unique, you might want to at\nthe very least ask for review/input at a place such as the\n`cryptography stack exchange <https://crypto.stackexchange.com/>`_.\nAnd (if possible) pay a professional cryptographer or security company\nto review your design and code.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/index.rst"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 35,
                  "endLine": 54,
                  "endColumn": 39,
                  "snippet": {
                    "text": "You should have some knowledge of cryptography *before* trying to use\nthe library. This is an area where it is very easy to make mistakes,\nand where things are often subtle and/or counterintuitive. Obviously\nthe library tries to provide things at a high level precisely to\nminimize the number of ways things can go wrong, but naive use will\nalmost certainly not result in a secure system.\n\n",
                    "rendered": {
                      "text": "You should have some knowledge of cryptography *before* trying to use\nthe library. This is an area where it is very easy to make mistakes,\nand where things are often subtle and/or counterintuitive. Obviously\nthe library tries to provide things at a high level precisely to\nminimize the number of ways things can go wrong, but naive use will\nalmost certainly not result in a secure system.\n\n",
                      "markdown": "`You should have some knowledge of cryptography *before* trying to use\nthe library. This is an area where it is very easy to make mistakes,\nand where things are often subtle and/or counterintuitive. Obviously\nthe library tries to provide things at a high level precisely to\nminimize the number of ways things can go wrong, but naive use will\nalmost certainly not result in a secure system.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/index.rst"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 6,
                  "endLine": 41,
                  "endColumn": 12,
                  "snippet": {
                    "text": "* :ref:`TLS Server <tls_server_example>`\n* :ref:`X.509 <x509_certificates_example>`\n\nYou'll find additional examples of usage in the\n`src/examples <https://github.com/randombit/botan/tree/master/src/examples>`_ directory.\n\nAn additional source for example code is in the implementation of the\n",
                    "rendered": {
                      "text": "* :ref:`TLS Server <tls_server_example>`\n* :ref:`X.509 <x509_certificates_example>`\n\nYou'll find additional examples of usage in the\n`src/examples <https://github.com/randombit/botan/tree/master/src/examples>`_ directory.\n\nAn additional source for example code is in the implementation of the\n",
                      "markdown": "`* :ref:`TLS Server <tls_server_example>`\n* :ref:`X.509 <x509_certificates_example>`\n\nYou'll find additional examples of usage in the\n`src/examples <https://github.com/randombit/botan/tree/master/src/examples>`_ directory.\n\nAn additional source for example code is in the implementation of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 51,
                  "endLine": 423,
                  "endColumn": 55,
                  "snippet": {
                    "text": "  * ``target_features`` is a list of target specific OS features. Some of these\n    are supported by many OSes (for example \"posix1\") others are specific to\n    just one or two OSes (such as \"getauxval\"). Adding a value here causes a new\n    macro ``BOTAN_TARGET_OS_HAS_XXX`` to be defined at build time. Use\n    ``configure.py --list-os-features`` to list the currently defined OS\n    features.\n  * ``feature_macros`` is a list of macros to define.\n",
                    "rendered": {
                      "text": "  * ``target_features`` is a list of target specific OS features. Some of these\n    are supported by many OSes (for example \"posix1\") others are specific to\n    just one or two OSes (such as \"getauxval\"). Adding a value here causes a new\n    macro ``BOTAN_TARGET_OS_HAS_XXX`` to be defined at build time. Use\n    ``configure.py --list-os-features`` to list the currently defined OS\n    features.\n  * ``feature_macros`` is a list of macros to define.\n",
                      "markdown": "`  * ``target_features`` is a list of target specific OS features. Some of these\n    are supported by many OSes (for example \"posix1\") others are specific to\n    just one or two OSes (such as \"getauxval\"). Adding a value here causes a new\n    macro ``BOTAN_TARGET_OS_HAS_XXX`` to be defined at build time. Use\n    ``configure.py --list-os-features`` to list the currently defined OS\n    features.\n  * ``feature_macros`` is a list of macros to define.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 54,
                  "endLine": 397,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  * ``warning_flags`` gives warning flags to enable.\n  * ``maintainer_warning_flags`` gives extra warning flags to enable during maintainer\n    mode builds.\n  * ``visibility_build_flags`` gives compiler flags to control symbol visibility\n    when generation shared libraries.\n  * ``visibility_attribute`` gives the attribute to use in the ``BOTAN_DLL`` macro\n    to specify visibility when generation shared libraries.\n",
                    "rendered": {
                      "text": "  * ``warning_flags`` gives warning flags to enable.\n  * ``maintainer_warning_flags`` gives extra warning flags to enable during maintainer\n    mode builds.\n  * ``visibility_build_flags`` gives compiler flags to control symbol visibility\n    when generation shared libraries.\n  * ``visibility_attribute`` gives the attribute to use in the ``BOTAN_DLL`` macro\n    to specify visibility when generation shared libraries.\n",
                      "markdown": "`  * ``warning_flags`` gives warning flags to enable.\n  * ``maintainer_warning_flags`` gives extra warning flags to enable during maintainer\n    mode builds.\n  * ``visibility_build_flags`` gives compiler flags to control symbol visibility\n    when generation shared libraries.\n  * ``visibility_attribute`` gives the attribute to use in the ``BOTAN_DLL`` macro\n    to specify visibility when generation shared libraries.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 28,
                  "endLine": 317,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nVariables:\n  * ``endian`` if defined should be \"little\" or \"big\". This can also be\n    controlled or overridden at build time.\n  * ``family`` can specify a family group for several related architecture.\n    For example both x86_32 and x86_64 use ``family`` of \"x86\".\n  * ``wordsize`` is the default wordsize, which controls the size of limbs\n",
                    "rendered": {
                      "text": "\nVariables:\n  * ``endian`` if defined should be \"little\" or \"big\". This can also be\n    controlled or overridden at build time.\n  * ``family`` can specify a family group for several related architecture.\n    For example both x86_32 and x86_64 use ``family`` of \"x86\".\n  * ``wordsize`` is the default wordsize, which controls the size of limbs\n",
                      "markdown": "`\nVariables:\n  * ``endian`` if defined should be \"little\" or \"big\". This can also be\n    controlled or overridden at build time.\n  * ``family`` can specify a family group for several related architecture.\n    For example both x86_32 and x86_64 use ``family`` of \"x86\".\n  * ``wordsize`` is the default wordsize, which controls the size of limbs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 44,
                  "endLine": 210,
                  "endColumn": 48,
                  "snippet": {
                    "text": "   * ``type`` specifies the type of the module (defaults to ``Public``)\n\n     * ``Public`` Library users can directly interact with this module. E.g.\n       they may enable or disable the module at will during build.\n     * ``Internal`` Library users must not directly interact with this module.\n       It is enabled and used as required by other modules.\n     * ``Virtual`` This module does not contain any implementation but acts as\n",
                    "rendered": {
                      "text": "   * ``type`` specifies the type of the module (defaults to ``Public``)\n\n     * ``Public`` Library users can directly interact with this module. E.g.\n       they may enable or disable the module at will during build.\n     * ``Internal`` Library users must not directly interact with this module.\n       It is enabled and used as required by other modules.\n     * ``Virtual`` This module does not contain any implementation but acts as\n",
                      "markdown": "`   * ``type`` specifies the type of the module (defaults to ``Public``)\n\n     * ``Public`` Library users can directly interact with this module. E.g.\n       they may enable or disable the module at will during build.\n     * ``Internal`` Library users must not directly interact with this module.\n       It is enabled and used as required by other modules.\n     * ``Virtual`` This module does not contain any implementation but acts as\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 28,
                  "endLine": 169,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nLists:\n * ``comment`` and ``warning`` provides block-comments which\n   are displayed to the user at build time.\n * ``requires`` is a list of module dependencies. An ``os_features`` can be\n   specified as a condition for needing the dependency by writing it before\n   the module name and separated by a ``?``, e.g. ``rtlgenrandom?dyn_load``.\n",
                    "rendered": {
                      "text": "\nLists:\n * ``comment`` and ``warning`` provides block-comments which\n   are displayed to the user at build time.\n * ``requires`` is a list of module dependencies. An ``os_features`` can be\n   specified as a condition for needing the dependency by writing it before\n   the module name and separated by a ``?``, e.g. ``rtlgenrandom?dyn_load``.\n",
                      "markdown": "`\nLists:\n * ``comment`` and ``warning`` provides block-comments which\n   are displayed to the user at build time.\n * ``requires`` is a list of module dependencies. An ``os_features`` can be\n   specified as a condition for needing the dependency by writing it before\n   the module name and separated by a ``?``, e.g. ``rtlgenrandom?dyn_load``.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 2,
                  "endLine": 123,
                  "endColumn": 6,
                  "snippet": {
                    "text": "   The syntax described here is documented to make it easier to use\n   and understand, but it is not considered part of the public API\n   contract. That is, the developers are allowed to change the syntax\n   at any time on the assumption that all users are contained within\n   the library itself. If that happens this document will be updated.\n\nModules and files describing information about the system use the same\n",
                    "rendered": {
                      "text": "   The syntax described here is documented to make it easier to use\n   and understand, but it is not considered part of the public API\n   contract. That is, the developers are allowed to change the syntax\n   at any time on the assumption that all users are contained within\n   the library itself. If that happens this document will be updated.\n\nModules and files describing information about the system use the same\n",
                      "markdown": "`   The syntax described here is documented to make it easier to use\n   and understand, but it is not considered part of the public API\n   contract. That is, the developers are allowed to change the syntax\n   at any time on the assumption that all users are contained within\n   the library itself. If that happens this document will be updated.\n\nModules and files describing information about the system use the same\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 32,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "--------------------\n\nModules are a group of related source and header files, which can be\nindividually enabled or disabled at build time. Modules can depend on\nother modules; if a dependency is not available then the module itself\nis also removed from the list.  Examples of modules in the existing\ncodebase are ``asn1`` and ``x509``, Since ``x509`` depends on (among\n",
                    "rendered": {
                      "text": "--------------------\n\nModules are a group of related source and header files, which can be\nindividually enabled or disabled at build time. Modules can depend on\nother modules; if a dependency is not available then the module itself\nis also removed from the list.  Examples of modules in the existing\ncodebase are ``asn1`` and ``x509``, Since ``x509`` depends on (among\n",
                      "markdown": "`--------------------\n\nModules are a group of related source and header files, which can be\nindividually enabled or disabled at build time. Modules can depend on\nother modules; if a dependency is not available then the module itself\nis also removed from the list.  Examples of modules in the existing\ncodebase are ``asn1`` and ``x509``, Since ``x509`` depends on (among\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 59,
                  "endLine": 331,
                  "endColumn": 67,
                  "snippet": {
                    "text": "GCC and Clang which are most complete.\n\nIn addition to the info file, for compilers there is a file\n``src/build-data/detect_version.cpp``. The ``configure.py`` script runs the\npreprocessor over this file to attempt to detect the compiler\nversion. Supporting this is not strictly necessary.\n\n",
                    "rendered": {
                      "text": "GCC and Clang which are most complete.\n\nIn addition to the info file, for compilers there is a file\n``src/build-data/detect_version.cpp``. The ``configure.py`` script runs the\npreprocessor over this file to attempt to detect the compiler\nversion. Supporting this is not strictly necessary.\n\n",
                      "markdown": "`GCC and Clang which are most complete.\n\nIn addition to the info file, for compilers there is a file\n``src/build-data/detect_version.cpp``. The ``configure.py`` script runs the\npreprocessor over this file to attempt to detect the compiler\nversion. Supporting this is not strictly necessary.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 9,
                  "endLine": 123,
                  "endColumn": 15,
                  "snippet": {
                    "text": "   The syntax described here is documented to make it easier to use\n   and understand, but it is not considered part of the public API\n   contract. That is, the developers are allowed to change the syntax\n   at any time on the assumption that all users are contained within\n   the library itself. If that happens this document will be updated.\n\nModules and files describing information about the system use the same\n",
                    "rendered": {
                      "text": "   The syntax described here is documented to make it easier to use\n   and understand, but it is not considered part of the public API\n   contract. That is, the developers are allowed to change the syntax\n   at any time on the assumption that all users are contained within\n   the library itself. If that happens this document will be updated.\n\nModules and files describing information about the system use the same\n",
                      "markdown": "`   The syntax described here is documented to make it easier to use\n   and understand, but it is not considered part of the public API\n   contract. That is, the developers are allowed to change the syntax\n   at any time on the assumption that all users are contained within\n   the library itself. If that happens this document will be updated.\n\nModules and files describing information about the system use the same\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 16,
                  "endLine": 101,
                  "endColumn": 24,
                  "snippet": {
                    "text": "-------\n\nThe ``build.h`` header file is generated and overwritten each time the\n``configure.py`` script is executed. This header can be included in any header\nor source file and provides plenty of compile-time information in the form of\npreprocessor ``#define``\\ s.\n\n",
                    "rendered": {
                      "text": "-------\n\nThe ``build.h`` header file is generated and overwritten each time the\n``configure.py`` script is executed. This header can be included in any header\nor source file and provides plenty of compile-time information in the form of\npreprocessor ``#define``\\ s.\n\n",
                      "markdown": "`-------\n\nThe ``build.h`` header file is generated and overwritten each time the\n``configure.py`` script is executed. This header can be included in any header\nor source file and provides plenty of compile-time information in the form of\npreprocessor ``#define``\\ s.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 61,
                  "endLine": 100,
                  "endColumn": 67,
                  "snippet": {
                    "text": "Build.h\n-------\n\nThe ``build.h`` header file is generated and overwritten each time the\n``configure.py`` script is executed. This header can be included in any header\nor source file and provides plenty of compile-time information in the form of\npreprocessor ``#define``\\ s.\n",
                    "rendered": {
                      "text": "Build.h\n-------\n\nThe ``build.h`` header file is generated and overwritten each time the\n``configure.py`` script is executed. This header can be included in any header\nor source file and provides plenty of compile-time information in the form of\npreprocessor ``#define``\\ s.\n",
                      "markdown": "`Build.h\n-------\n\nThe ``build.h`` header file is generated and overwritten each time the\n``configure.py`` script is executed. This header can be included in any header\nor source file and provides plenty of compile-time information in the form of\npreprocessor ``#define``\\ s.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 61,
                  "endLine": 73,
                  "endColumn": 69,
                  "snippet": {
                    "text": "suffix ``.in``. Anything not recognized as a template command is passed through\nto the output unmodified. The template elements are:\n\n * Variable substitution, ``%{variable_name}``. The configure script creates\n   many variables for various purposes, this allows getting their value within\n   the output. If a variable is not defined, an error occurs.\n\n",
                    "rendered": {
                      "text": "suffix ``.in``. Anything not recognized as a template command is passed through\nto the output unmodified. The template elements are:\n\n * Variable substitution, ``%{variable_name}``. The configure script creates\n   many variables for various purposes, this allows getting their value within\n   the output. If a variable is not defined, an error occurs.\n\n",
                      "markdown": "`suffix ``.in``. Anything not recognized as a template command is passed through\nto the output unmodified. The template elements are:\n\n * Variable substitution, ``%{variable_name}``. The configure script creates\n   many variables for various purposes, this allows getting their value within\n   the output. If a variable is not defined, an error occurs.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/dev_ref/configure.rst"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 58,
                  "endLine": 28,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\nMost modules define one or more macros, which application code can use\nto detect the modules presence or absence. The value of each macro is\na datestamp, in the form YYYYMMDD which indicates the last time this\nmodule changed in a way that would be visible to an application. For\nexample if a class gains a new function, the datestamp should be\nincremented. That allows applications to detect if the new feature is\n",
                    "rendered": {
                      "text": "\nMost modules define one or more macros, which application code can use\nto detect the modules presence or absence. The value of each macro is\na datestamp, in the form YYYYMMDD which indicates the last time this\nmodule changed in a way that would be visible to an application. For\nexample if a class gains a new function, the datestamp should be\nincremented. That allows applications to detect if the new feature is\n",
                      "markdown": "`\nMost modules define one or more macros, which application code can use\nto detect the modules presence or absence. The value of each macro is\na datestamp, in the form YYYYMMDD which indicates the last time this\nmodule changed in a way that would be visible to an application. For\nexample if a class gains a new function, the datestamp should be\nincremented. That allows applications to detect if the new feature is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 871,
                  "startColumn": 50,
                  "endLine": 871,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                                 const uint8_t bits[], size_t len, \\\n                                 const char* password)\n\n   Load a private key. If the key is encrypted, ``password`` will be\n   used to attempt decryption.\n\n.. cpp:function:: int botan_privkey_export(botan_privkey_t key, \\\n",
                    "rendered": {
                      "text": "                                 const uint8_t bits[], size_t len, \\\n                                 const char* password)\n\n   Load a private key. If the key is encrypted, ``password`` will be\n   used to attempt decryption.\n\n.. cpp:function:: int botan_privkey_export(botan_privkey_t key, \\\n",
                      "markdown": "`                                 const uint8_t bits[], size_t len, \\\n                                 const char* password)\n\n   Load a private key. If the key is encrypted, ``password`` will be\n   used to attempt decryption.\n\n.. cpp:function:: int botan_privkey_export(botan_privkey_t key, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 869,
                  "startColumn": 45,
                  "endLine": 869,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n.. cpp:function:: int botan_privkey_load(botan_privkey_t* key, botan_rng_t rng, \\\n                                 const uint8_t bits[], size_t len, \\\n                                 const char* password)\n\n   Load a private key. If the key is encrypted, ``password`` will be\n   used to attempt decryption.\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: int botan_privkey_load(botan_privkey_t* key, botan_rng_t rng, \\\n                                 const uint8_t bits[], size_t len, \\\n                                 const char* password)\n\n   Load a private key. If the key is encrypted, ``password`` will be\n   used to attempt decryption.\n",
                      "markdown": "`\n.. cpp:function:: int botan_privkey_load(botan_privkey_t* key, botan_rng_t rng, \\\n                                 const uint8_t bits[], size_t len, \\\n                                 const char* password)\n\n   Load a private key. If the key is encrypted, ``password`` will be\n   used to attempt decryption.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 824,
                  "startColumn": 46,
                  "endLine": 824,
                  "endColumn": 54,
                  "snippet": {
                    "text": ".. cpp:function:: int botan_bcrypt_is_valid(const char* pass, const char* hash)\n\n   Check a previously created password hash.  Returns\n   :cpp:enumerator:`BOTAN_SUCCESS` if if this password/hash\n   combination is valid, :cpp:enumerator:`BOTAN_FFI_INVALID_VERIFIER`\n   if the combination is not valid (but otherwise well formed),\n   negative on error.\n",
                    "rendered": {
                      "text": ".. cpp:function:: int botan_bcrypt_is_valid(const char* pass, const char* hash)\n\n   Check a previously created password hash.  Returns\n   :cpp:enumerator:`BOTAN_SUCCESS` if if this password/hash\n   combination is valid, :cpp:enumerator:`BOTAN_FFI_INVALID_VERIFIER`\n   if the combination is not valid (but otherwise well formed),\n   negative on error.\n",
                      "markdown": "`.. cpp:function:: int botan_bcrypt_is_valid(const char* pass, const char* hash)\n\n   Check a previously created password hash.  Returns\n   :cpp:enumerator:`BOTAN_SUCCESS` if if this password/hash\n   combination is valid, :cpp:enumerator:`BOTAN_FFI_INVALID_VERIFIER`\n   if the combination is not valid (but otherwise well formed),\n   negative on error.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 823,
                  "startColumn": 30,
                  "endLine": 823,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n.. cpp:function:: int botan_bcrypt_is_valid(const char* pass, const char* hash)\n\n   Check a previously created password hash.  Returns\n   :cpp:enumerator:`BOTAN_SUCCESS` if if this password/hash\n   combination is valid, :cpp:enumerator:`BOTAN_FFI_INVALID_VERIFIER`\n   if the combination is not valid (but otherwise well formed),\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: int botan_bcrypt_is_valid(const char* pass, const char* hash)\n\n   Check a previously created password hash.  Returns\n   :cpp:enumerator:`BOTAN_SUCCESS` if if this password/hash\n   combination is valid, :cpp:enumerator:`BOTAN_FFI_INVALID_VERIFIER`\n   if the combination is not valid (but otherwise well formed),\n",
                      "markdown": "`\n.. cpp:function:: int botan_bcrypt_is_valid(const char* pass, const char* hash)\n\n   Check a previously created password hash.  Returns\n   :cpp:enumerator:`BOTAN_SUCCESS` if if this password/hash\n   combination is valid, :cpp:enumerator:`BOTAN_FFI_INVALID_VERIFIER`\n   if the combination is not valid (but otherwise well formed),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 817,
                  "startColumn": 12,
                  "endLine": 817,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                                    size_t work_factor, \\\n                                    uint32_t flags)\n\n   Create a password hash using Bcrypt.\n   The output buffer *out* should be of length 64 bytes.\n   The output is formatted bcrypt $2a$...\n\n",
                    "rendered": {
                      "text": "                                    size_t work_factor, \\\n                                    uint32_t flags)\n\n   Create a password hash using Bcrypt.\n   The output buffer *out* should be of length 64 bytes.\n   The output is formatted bcrypt $2a$...\n\n",
                      "markdown": "`                                    size_t work_factor, \\\n                                    uint32_t flags)\n\n   Create a password hash using Bcrypt.\n   The output buffer *out* should be of length 64 bytes.\n   The output is formatted bcrypt $2a$...\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 812,
                  "startColumn": 48,
                  "endLine": 812,
                  "endColumn": 56,
                  "snippet": {
                    "text": "----------------------------------------\n\n.. cpp:function:: int botan_bcrypt_generate(uint8_t* out, size_t* out_len, \\\n                                    const char* password, \\\n                                    botan_rng_t rng, \\\n                                    size_t work_factor, \\\n                                    uint32_t flags)\n",
                    "rendered": {
                      "text": "----------------------------------------\n\n.. cpp:function:: int botan_bcrypt_generate(uint8_t* out, size_t* out_len, \\\n                                    const char* password, \\\n                                    botan_rng_t rng, \\\n                                    size_t work_factor, \\\n                                    uint32_t flags)\n",
                      "markdown": "`----------------------------------------\n\n.. cpp:function:: int botan_bcrypt_generate(uint8_t* out, size_t* out_len, \\\n                                    const char* password, \\\n                                    botan_rng_t rng, \\\n                                    size_t work_factor, \\\n                                    uint32_t flags)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 808,
                  "endLine": 808,
                  "endColumn": 8,
                  "snippet": {
                    "text": "   Clears the specified bit of ``n``\n\n\nPassword Hashing\n----------------------------------------\n\n.. cpp:function:: int botan_bcrypt_generate(uint8_t* out, size_t* out_len, \\\n",
                    "rendered": {
                      "text": "   Clears the specified bit of ``n``\n\n\nPassword Hashing\n----------------------------------------\n\n.. cpp:function:: int botan_bcrypt_generate(uint8_t* out, size_t* out_len, \\\n",
                      "markdown": "`   Clears the specified bit of ``n``\n\n\nPassword Hashing\n----------------------------------------\n\n.. cpp:function:: int botan_bcrypt_generate(uint8_t* out, size_t* out_len, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 16,
                  "endLine": 96,
                  "endColumn": 24,
                  "snippet": {
                    "text": "   Note this value is positive, but still represents an error condition.  In\n   indicates that the function completed successfully, but the value provided\n   was not correct. For example :cpp:func:`botan_bcrypt_is_valid` returns this\n   value if the password did not match the hash.\n\n.. cpp:enumerator:: BOTAN_FFI_ERROR_INVALID_INPUT = -1\n\n",
                    "rendered": {
                      "text": "   Note this value is positive, but still represents an error condition.  In\n   indicates that the function completed successfully, but the value provided\n   was not correct. For example :cpp:func:`botan_bcrypt_is_valid` returns this\n   value if the password did not match the hash.\n\n.. cpp:enumerator:: BOTAN_FFI_ERROR_INVALID_INPUT = -1\n\n",
                      "markdown": "`   Note this value is positive, but still represents an error condition.  In\n   indicates that the function completed successfully, but the value provided\n   was not correct. For example :cpp:func:`botan_bcrypt_is_valid` returns this\n   value if the password did not match the hash.\n\n.. cpp:enumerator:: BOTAN_FFI_ERROR_INVALID_INPUT = -1\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 1490,
                  "startColumn": 30,
                  "endLine": 1490,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                  size_t crls_len, \\\n                  const char* trusted_path, \\\n                  size_t required_strength, \\\n                  const char* hostname, \\\n                  uint64_t reference_time)\n\n   Certificate path validation supporting Certificate Revocation Lists.\n",
                    "rendered": {
                      "text": "                  size_t crls_len, \\\n                  const char* trusted_path, \\\n                  size_t required_strength, \\\n                  const char* hostname, \\\n                  uint64_t reference_time)\n\n   Certificate path validation supporting Certificate Revocation Lists.\n",
                      "markdown": "`                  size_t crls_len, \\\n                  const char* trusted_path, \\\n                  size_t required_strength, \\\n                  const char* hostname, \\\n                  uint64_t reference_time)\n\n   Certificate path validation supporting Certificate Revocation Lists.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 1456,
                  "startColumn": 30,
                  "endLine": 1456,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                  size_t trusted_len, \\\n                  const char* trusted_path, \\\n                  size_t required_strength, \\\n                  const char* hostname, \\\n                  uint64_t reference_time)\n\n    Verify a certificate. Returns 0 if validation was successful, 1 if\n",
                    "rendered": {
                      "text": "                  size_t trusted_len, \\\n                  const char* trusted_path, \\\n                  size_t required_strength, \\\n                  const char* hostname, \\\n                  uint64_t reference_time)\n\n    Verify a certificate. Returns 0 if validation was successful, 1 if\n",
                      "markdown": "`                  size_t trusted_len, \\\n                  const char* trusted_path, \\\n                  size_t required_strength, \\\n                  const char* hostname, \\\n                  uint64_t reference_time)\n\n    Verify a certificate. Returns 0 if validation was successful, 1 if\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 981,
                  "startColumn": 2,
                  "endLine": 981,
                  "endColumn": 6,
                  "snippet": {
                    "text": "                                                        uint32_t flags);\n\n   Encrypt a private key. The PBKDF function runs for the specified number of iterations.\n   At least 100,000 is recommended.\n\n.. cpp:function:: int botan_privkey_export_pubkey(botan_pubkey_t* out, botan_privkey_t in)\n\n",
                    "rendered": {
                      "text": "                                                        uint32_t flags);\n\n   Encrypt a private key. The PBKDF function runs for the specified number of iterations.\n   At least 100,000 is recommended.\n\n.. cpp:function:: int botan_privkey_export_pubkey(botan_pubkey_t* out, botan_privkey_t in)\n\n",
                      "markdown": "`                                                        uint32_t flags);\n\n   Encrypt a private key. The PBKDF function runs for the specified number of iterations.\n   At least 100,000 is recommended.\n\n.. cpp:function:: int botan_privkey_export_pubkey(botan_pubkey_t* out, botan_privkey_t in)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 18,
                  "endLine": 793,
                  "endColumn": 22,
                  "snippet": {
                    "text": "   Test if ``n`` is prime. The algorithm used (Miller-Rabin) is probabilistic,\n   set ``test_prob`` to the desired assurance level. For example if\n   ``test_prob`` is 64, then sufficient Miller-Rabin iterations will run to\n   assure there is at most a ``1/2**64`` chance that ``n`` is composite.\n\n.. cpp:function:: int botan_mp_get_bit(botan_mp_t n, size_t bit)\n\n",
                    "rendered": {
                      "text": "   Test if ``n`` is prime. The algorithm used (Miller-Rabin) is probabilistic,\n   set ``test_prob`` to the desired assurance level. For example if\n   ``test_prob`` is 64, then sufficient Miller-Rabin iterations will run to\n   assure there is at most a ``1/2**64`` chance that ``n`` is composite.\n\n.. cpp:function:: int botan_mp_get_bit(botan_mp_t n, size_t bit)\n\n",
                      "markdown": "`   Test if ``n`` is prime. The algorithm used (Miller-Rabin) is probabilistic,\n   set ``test_prob`` to the desired assurance level. For example if\n   ``test_prob`` is 64, then sufficient Miller-Rabin iterations will run to\n   assure there is at most a ``1/2**64`` chance that ``n`` is composite.\n\n.. cpp:function:: int botan_mp_get_bit(botan_mp_t n, size_t bit)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 19,
                  "endLine": 570,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n.. cpp:function:: int botan_cipher_get_ideal_update_granularity(botan_cipher_t cipher, size_t* ug)\n\n   Return the ideal update granularity, ie the size of a buffer that must be\n   passed to :cpp:func:`botan_cipher_update` that maximizes performance.\n\n   .. note::\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: int botan_cipher_get_ideal_update_granularity(botan_cipher_t cipher, size_t* ug)\n\n   Return the ideal update granularity, ie the size of a buffer that must be\n   passed to :cpp:func:`botan_cipher_update` that maximizes performance.\n\n   .. note::\n",
                      "markdown": "`\n.. cpp:function:: int botan_cipher_get_ideal_update_granularity(botan_cipher_t cipher, size_t* ug)\n\n   Return the ideal update granularity, ie the size of a buffer that must be\n   passed to :cpp:func:`botan_cipher_update` that maximizes performance.\n\n   .. note::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 21,
                  "endLine": 565,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n.. cpp:function:: int botan_cipher_get_update_granularity(botan_cipher_t cipher, size_t* ug)\n\n   Return the minimum update granularity, ie the size of a buffer that must be\n   passed to :cpp:func:`botan_cipher_update`\n\n.. cpp:function:: int botan_cipher_get_ideal_update_granularity(botan_cipher_t cipher, size_t* ug)\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: int botan_cipher_get_update_granularity(botan_cipher_t cipher, size_t* ug)\n\n   Return the minimum update granularity, ie the size of a buffer that must be\n   passed to :cpp:func:`botan_cipher_update`\n\n.. cpp:function:: int botan_cipher_get_ideal_update_granularity(botan_cipher_t cipher, size_t* ug)\n",
                      "markdown": "`\n.. cpp:function:: int botan_cipher_get_update_granularity(botan_cipher_t cipher, size_t* ug)\n\n   Return the minimum update granularity, ie the size of a buffer that must be\n   passed to :cpp:func:`botan_cipher_update`\n\n.. cpp:function:: int botan_cipher_get_ideal_update_granularity(botan_cipher_t cipher, size_t* ug)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 37,
                  "endLine": 316,
                  "endColumn": 41,
                  "snippet": {
                    "text": ".. cpp:function:: int botan_hex_encode(const uint8_t* x, size_t len, char* out, uint32_t flags)\n\n   Performs hex encoding of binary data in *x* of size *len* bytes.\n   The output buffer *out* must be of at least *x*2* bytes in size.\n   If *flags* contains ``BOTAN_FFI_HEX_LOWER_CASE``, hex encoding\n   will only contain lower-case letters, upper-case letters otherwise.\n   Returns 0 on success, 1 otherwise.\n",
                    "rendered": {
                      "text": ".. cpp:function:: int botan_hex_encode(const uint8_t* x, size_t len, char* out, uint32_t flags)\n\n   Performs hex encoding of binary data in *x* of size *len* bytes.\n   The output buffer *out* must be of at least *x*2* bytes in size.\n   If *flags* contains ``BOTAN_FFI_HEX_LOWER_CASE``, hex encoding\n   will only contain lower-case letters, upper-case letters otherwise.\n   Returns 0 on success, 1 otherwise.\n",
                      "markdown": "`.. cpp:function:: int botan_hex_encode(const uint8_t* x, size_t len, char* out, uint32_t flags)\n\n   Performs hex encoding of binary data in *x* of size *len* bytes.\n   The output buffer *out* must be of at least *x*2* bytes in size.\n   If *flags* contains ``BOTAN_FFI_HEX_LOWER_CASE``, hex encoding\n   will only contain lower-case letters, upper-case letters otherwise.\n   Returns 0 on success, 1 otherwise.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "endLine": 23,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nWriting language bindings for C or C++ libraries is typically a tedious and\nbug-prone experience. This FFI layer was designed to make the experience, if not\npleasant, at least straighforward.\n\n* All objects manipulated by the API are opaque structs. Each struct is tagged\n  with a 32-bit magic number which is unique to its type; accidentally passing\n",
                    "rendered": {
                      "text": "\nWriting language bindings for C or C++ libraries is typically a tedious and\nbug-prone experience. This FFI layer was designed to make the experience, if not\npleasant, at least straighforward.\n\n* All objects manipulated by the API are opaque structs. Each struct is tagged\n  with a 32-bit magic number which is unique to its type; accidentally passing\n",
                      "markdown": "`\nWriting language bindings for C or C++ libraries is typically a tedious and\nbug-prone experience. This FFI layer was designed to make the experience, if not\npleasant, at least straighforward.\n\n* All objects manipulated by the API are opaque structs. Each struct is tagged\n  with a 32-bit magic number which is unique to its type; accidentally passing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 62,
                  "endLine": 15,
                  "endColumn": 66,
                  "snippet": {
                    "text": "Code examples can be found in `the tests\n<https://github.com/randombit/botan/blob/master/src/tests/test_ffi.cpp>`_ as\nwell as the implementations of the various `language bindings\n<https://github.com/randombit/botan/wiki/Language-Bindings>`_. At the time of\nthis writing, the Python and Rust bindings are probably the most comprehensive.\n\nRules of Engagement\n",
                    "rendered": {
                      "text": "Code examples can be found in `the tests\n<https://github.com/randombit/botan/blob/master/src/tests/test_ffi.cpp>`_ as\nwell as the implementations of the various `language bindings\n<https://github.com/randombit/botan/wiki/Language-Bindings>`_. At the time of\nthis writing, the Python and Rust bindings are probably the most comprehensive.\n\nRules of Engagement\n",
                      "markdown": "`Code examples can be found in `the tests\n<https://github.com/randombit/botan/blob/master/src/tests/test_ffi.cpp>`_ as\nwell as the implementations of the various `language bindings\n<https://github.com/randombit/botan/wiki/Language-Bindings>`_. At the time of\nthis writing, the Python and Rust bindings are probably the most comprehensive.\n\nRules of Engagement\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 1477,
                  "startColumn": 36,
                  "endLine": 1477,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    Setting to 110 requires 2048-bit RSA and SHA-256 or higher. Set to zero\n    to accept a default.\n\n    Set ``reference_time`` to be the time which the certificate chain is\n    validated against. Use zero to use the current system clock.\n\n.. cpp:function:: int botan_x509_cert_verify_with_crl(int* validation_result, \\\n",
                    "rendered": {
                      "text": "    Setting to 110 requires 2048-bit RSA and SHA-256 or higher. Set to zero\n    to accept a default.\n\n    Set ``reference_time`` to be the time which the certificate chain is\n    validated against. Use zero to use the current system clock.\n\n.. cpp:function:: int botan_x509_cert_verify_with_crl(int* validation_result, \\\n",
                      "markdown": "`    Setting to 110 requires 2048-bit RSA and SHA-256 or higher. Set to zero\n    to accept a default.\n\n    Set ``reference_time`` to be the time which the certificate chain is\n    validated against. Use zero to use the current system clock.\n\n.. cpp:function:: int botan_x509_cert_verify_with_crl(int* validation_result, \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 1388,
                  "startColumn": 13,
                  "endLine": 1388,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n.. cpp:function:: int botan_x509_cert_not_after(botan_x509_cert_t cert, uint64_t* time_since_epoch)\n\n   Return the time the certificate expires, as seconds since epoch.\n\n.. cpp:function:: int botan_x509_cert_get_fingerprint(botan_x509_cert_t cert, const char* hash, uint8_t out[], size_t* out_len)\n\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: int botan_x509_cert_not_after(botan_x509_cert_t cert, uint64_t* time_since_epoch)\n\n   Return the time the certificate expires, as seconds since epoch.\n\n.. cpp:function:: int botan_x509_cert_get_fingerprint(botan_x509_cert_t cert, const char* hash, uint8_t out[], size_t* out_len)\n\n",
                      "markdown": "`\n.. cpp:function:: int botan_x509_cert_not_after(botan_x509_cert_t cert, uint64_t* time_since_epoch)\n\n   Return the time the certificate expires, as seconds since epoch.\n\n.. cpp:function:: int botan_x509_cert_get_fingerprint(botan_x509_cert_t cert, const char* hash, uint8_t out[], size_t* out_len)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 1384,
                  "startColumn": 13,
                  "endLine": 1384,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n.. cpp:function:: int botan_x509_cert_not_before(botan_x509_cert_t cert, uint64_t* time_since_epoch)\n\n   Return the time the certificate becomes valid, as seconds since epoch.\n\n.. cpp:function:: int botan_x509_cert_not_after(botan_x509_cert_t cert, uint64_t* time_since_epoch)\n\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: int botan_x509_cert_not_before(botan_x509_cert_t cert, uint64_t* time_since_epoch)\n\n   Return the time the certificate becomes valid, as seconds since epoch.\n\n.. cpp:function:: int botan_x509_cert_not_after(botan_x509_cert_t cert, uint64_t* time_since_epoch)\n\n",
                      "markdown": "`\n.. cpp:function:: int botan_x509_cert_not_before(botan_x509_cert_t cert, uint64_t* time_since_epoch)\n\n   Return the time the certificate becomes valid, as seconds since epoch.\n\n.. cpp:function:: int botan_x509_cert_not_after(botan_x509_cert_t cert, uint64_t* time_since_epoch)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 1379,
                  "startColumn": 72,
                  "endLine": 1379,
                  "endColumn": 78,
                  "snippet": {
                    "text": ".. cpp:function:: int botan_x509_cert_get_time_expires(botan_x509_cert_t cert, char out[], size_t* out_len)\n\n   Return the time the certificate expires, as a string in form\n   \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n   relative to UTC. Prefer :cpp:func:`botan_x509_cert_not_after`.\n\n.. cpp:function:: int botan_x509_cert_not_before(botan_x509_cert_t cert, uint64_t* time_since_epoch)\n",
                    "rendered": {
                      "text": ".. cpp:function:: int botan_x509_cert_get_time_expires(botan_x509_cert_t cert, char out[], size_t* out_len)\n\n   Return the time the certificate expires, as a string in form\n   \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n   relative to UTC. Prefer :cpp:func:`botan_x509_cert_not_after`.\n\n.. cpp:function:: int botan_x509_cert_not_before(botan_x509_cert_t cert, uint64_t* time_since_epoch)\n",
                      "markdown": "`.. cpp:function:: int botan_x509_cert_get_time_expires(botan_x509_cert_t cert, char out[], size_t* out_len)\n\n   Return the time the certificate expires, as a string in form\n   \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n   relative to UTC. Prefer :cpp:func:`botan_x509_cert_not_after`.\n\n.. cpp:function:: int botan_x509_cert_not_before(botan_x509_cert_t cert, uint64_t* time_since_epoch)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 1378,
                  "startColumn": 13,
                  "endLine": 1378,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n.. cpp:function:: int botan_x509_cert_get_time_expires(botan_x509_cert_t cert, char out[], size_t* out_len)\n\n   Return the time the certificate expires, as a string in form\n   \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n   relative to UTC. Prefer :cpp:func:`botan_x509_cert_not_after`.\n\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: int botan_x509_cert_get_time_expires(botan_x509_cert_t cert, char out[], size_t* out_len)\n\n   Return the time the certificate expires, as a string in form\n   \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n   relative to UTC. Prefer :cpp:func:`botan_x509_cert_not_after`.\n\n",
                      "markdown": "`\n.. cpp:function:: int botan_x509_cert_get_time_expires(botan_x509_cert_t cert, char out[], size_t* out_len)\n\n   Return the time the certificate expires, as a string in form\n   \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n   relative to UTC. Prefer :cpp:func:`botan_x509_cert_not_after`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 1373,
                  "startColumn": 72,
                  "endLine": 1373,
                  "endColumn": 78,
                  "snippet": {
                    "text": ".. cpp:function:: int botan_x509_cert_get_time_starts(botan_x509_cert_t cert, char out[], size_t* out_len)\n\n   Return the time the certificate becomes valid, as a string in form\n   \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n   relative to UTC. Prefer :cpp:func:`botan_x509_cert_not_before`.\n\n.. cpp:function:: int botan_x509_cert_get_time_expires(botan_x509_cert_t cert, char out[], size_t* out_len)\n",
                    "rendered": {
                      "text": ".. cpp:function:: int botan_x509_cert_get_time_starts(botan_x509_cert_t cert, char out[], size_t* out_len)\n\n   Return the time the certificate becomes valid, as a string in form\n   \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n   relative to UTC. Prefer :cpp:func:`botan_x509_cert_not_before`.\n\n.. cpp:function:: int botan_x509_cert_get_time_expires(botan_x509_cert_t cert, char out[], size_t* out_len)\n",
                      "markdown": "`.. cpp:function:: int botan_x509_cert_get_time_starts(botan_x509_cert_t cert, char out[], size_t* out_len)\n\n   Return the time the certificate becomes valid, as a string in form\n   \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n   relative to UTC. Prefer :cpp:func:`botan_x509_cert_not_before`.\n\n.. cpp:function:: int botan_x509_cert_get_time_expires(botan_x509_cert_t cert, char out[], size_t* out_len)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 1372,
                  "startColumn": 13,
                  "endLine": 1372,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n.. cpp:function:: int botan_x509_cert_get_time_starts(botan_x509_cert_t cert, char out[], size_t* out_len)\n\n   Return the time the certificate becomes valid, as a string in form\n   \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n   relative to UTC. Prefer :cpp:func:`botan_x509_cert_not_before`.\n\n",
                    "rendered": {
                      "text": "\n.. cpp:function:: int botan_x509_cert_get_time_starts(botan_x509_cert_t cert, char out[], size_t* out_len)\n\n   Return the time the certificate becomes valid, as a string in form\n   \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n   relative to UTC. Prefer :cpp:func:`botan_x509_cert_not_before`.\n\n",
                      "markdown": "`\n.. cpp:function:: int botan_x509_cert_get_time_starts(botan_x509_cert_t cert, char out[], size_t* out_len)\n\n   Return the time the certificate becomes valid, as a string in form\n   \"YYYYMMDDHHMMSSZ\" where Z is a literal character reflecting that this time is\n   relative to UTC. Prefer :cpp:func:`botan_x509_cert_not_before`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/api_ref/ffi.rst"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 69,
                  "endLine": 15,
                  "endColumn": 75,
                  "snippet": {
                    "text": "Code examples can be found in `the tests\n<https://github.com/randombit/botan/blob/master/src/tests/test_ffi.cpp>`_ as\nwell as the implementations of the various `language bindings\n<https://github.com/randombit/botan/wiki/Language-Bindings>`_. At the time of\nthis writing, the Python and Rust bindings are probably the most comprehensive.\n\nRules of Engagement\n",
                    "rendered": {
                      "text": "Code examples can be found in `the tests\n<https://github.com/randombit/botan/blob/master/src/tests/test_ffi.cpp>`_ as\nwell as the implementations of the various `language bindings\n<https://github.com/randombit/botan/wiki/Language-Bindings>`_. At the time of\nthis writing, the Python and Rust bindings are probably the most comprehensive.\n\nRules of Engagement\n",
                      "markdown": "`Code examples can be found in `the tests\n<https://github.com/randombit/botan/blob/master/src/tests/test_ffi.cpp>`_ as\nwell as the implementations of the various `language bindings\n<https://github.com/randombit/botan/wiki/Language-Bindings>`_. At the time of\nthis writing, the Python and Rust bindings are probably the most comprehensive.\n\nRules of Engagement\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/abi.rst"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 47,
                  "endLine": 21,
                  "snippet": {
                    "text": "If you are concerned about long-term ABI issues, considering using the C API\ninstead; this subset *is* ABI stable.\n\nYou can review a report on ABI changes to Botan at\nhttps://abi-laboratory.pro/tracker/timeline/botan/\n",
                    "rendered": {
                      "text": "If you are concerned about long-term ABI issues, considering using the C API\ninstead; this subset *is* ABI stable.\n\nYou can review a report on ABI changes to Botan at\nhttps://abi-laboratory.pro/tracker/timeline/botan/\n",
                      "markdown": "`If you are concerned about long-term ABI issues, considering using the C API\ninstead; this subset *is* ABI stable.\n\nYou can review a report on ABI changes to Botan at\nhttps://abi-laboratory.pro/tracker/timeline/botan/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/botan-3.5.0-r0.apk/botan-3.5.0-r0/usr/share/doc/botan-3.5.0/handbook/abi.rst"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 50,
                  "endLine": 15,
                  "endColumn": 54,
                  "snippet": {
                    "text": "cause ABI issues.\n\nIf ABI changes, the soname revision will increase to prevent applications from\nlinking against a potentially incompatible version at runtime.\n\nIf you are concerned about long-term ABI issues, considering using the C API\ninstead; this subset *is* ABI stable.\n",
                    "rendered": {
                      "text": "cause ABI issues.\n\nIf ABI changes, the soname revision will increase to prevent applications from\nlinking against a potentially incompatible version at runtime.\n\nIf you are concerned about long-term ABI issues, considering using the C API\ninstead; this subset *is* ABI stable.\n",
                      "markdown": "`cause ABI issues.\n\nIf ABI changes, the soname revision will increase to prevent applications from\nlinking against a potentially incompatible version at runtime.\n\nIf you are concerned about long-term ABI issues, considering using the C API\ninstead; this subset *is* ABI stable.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}