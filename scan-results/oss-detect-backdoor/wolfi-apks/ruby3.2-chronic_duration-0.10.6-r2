{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-chronic_duration-0.10.6-r2.apk/ruby3.2-chronic_duration-0.10.6-r2/usr/lib/ruby/gems/3.2.0/gems/chronic_duration-0.10.6/spec/lib/chronic_duration_spec.rb"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 71,
                  "endLine": 241,
                  "endColumn": 77,
                  "snippet": {
                    "text": "      ChronicDuration.instance_eval(\"filter_by_type('3:14')\").should == '3 minutes 14 seconds'\n    end\n\n    it \"receives chrono-formatted time like 12:10:14 and return a human time like 12 hours 10 minutes 14 seconds\" do\n      ChronicDuration.instance_eval(\"filter_by_type('12:10:14')\").should == '12 hours 10 minutes 14 seconds'\n    end\n\n",
                    "rendered": {
                      "text": "      ChronicDuration.instance_eval(\"filter_by_type('3:14')\").should == '3 minutes 14 seconds'\n    end\n\n    it \"receives chrono-formatted time like 12:10:14 and return a human time like 12 hours 10 minutes 14 seconds\" do\n      ChronicDuration.instance_eval(\"filter_by_type('12:10:14')\").should == '12 hours 10 minutes 14 seconds'\n    end\n\n",
                      "markdown": "`      ChronicDuration.instance_eval(\"filter_by_type('3:14')\").should == '3 minutes 14 seconds'\n    end\n\n    it \"receives chrono-formatted time like 12:10:14 and return a human time like 12 hours 10 minutes 14 seconds\" do\n      ChronicDuration.instance_eval(\"filter_by_type('12:10:14')\").should == '12 hours 10 minutes 14 seconds'\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-chronic_duration-0.10.6-r2.apk/ruby3.2-chronic_duration-0.10.6-r2/usr/lib/ruby/gems/3.2.0/gems/chronic_duration-0.10.6/spec/lib/chronic_duration_spec.rb"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 33,
                  "endLine": 241,
                  "endColumn": 39,
                  "snippet": {
                    "text": "      ChronicDuration.instance_eval(\"filter_by_type('3:14')\").should == '3 minutes 14 seconds'\n    end\n\n    it \"receives chrono-formatted time like 12:10:14 and return a human time like 12 hours 10 minutes 14 seconds\" do\n      ChronicDuration.instance_eval(\"filter_by_type('12:10:14')\").should == '12 hours 10 minutes 14 seconds'\n    end\n\n",
                    "rendered": {
                      "text": "      ChronicDuration.instance_eval(\"filter_by_type('3:14')\").should == '3 minutes 14 seconds'\n    end\n\n    it \"receives chrono-formatted time like 12:10:14 and return a human time like 12 hours 10 minutes 14 seconds\" do\n      ChronicDuration.instance_eval(\"filter_by_type('12:10:14')\").should == '12 hours 10 minutes 14 seconds'\n    end\n\n",
                      "markdown": "`      ChronicDuration.instance_eval(\"filter_by_type('3:14')\").should == '3 minutes 14 seconds'\n    end\n\n    it \"receives chrono-formatted time like 12:10:14 and return a human time like 12 hours 10 minutes 14 seconds\" do\n      ChronicDuration.instance_eval(\"filter_by_type('12:10:14')\").should == '12 hours 10 minutes 14 seconds'\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-chronic_duration-0.10.6-r2.apk/ruby3.2-chronic_duration-0.10.6-r2/usr/lib/ruby/gems/3.2.0/gems/chronic_duration-0.10.6/spec/lib/chronic_duration_spec.rb"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 69,
                  "endLine": 237,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n  describe \".filter_by_type\" do\n\n    it \"receives a chrono-formatted time like 3:14 and return a human time like 3 minutes 14 seconds\" do\n      ChronicDuration.instance_eval(\"filter_by_type('3:14')\").should == '3 minutes 14 seconds'\n    end\n\n",
                    "rendered": {
                      "text": "\n  describe \".filter_by_type\" do\n\n    it \"receives a chrono-formatted time like 3:14 and return a human time like 3 minutes 14 seconds\" do\n      ChronicDuration.instance_eval(\"filter_by_type('3:14')\").should == '3 minutes 14 seconds'\n    end\n\n",
                      "markdown": "`\n  describe \".filter_by_type\" do\n\n    it \"receives a chrono-formatted time like 3:14 and return a human time like 3 minutes 14 seconds\" do\n      ChronicDuration.instance_eval(\"filter_by_type('3:14')\").should == '3 minutes 14 seconds'\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-chronic_duration-0.10.6-r2.apk/ruby3.2-chronic_duration-0.10.6-r2/usr/lib/ruby/gems/3.2.0/gems/chronic_duration-0.10.6/spec/lib/chronic_duration_spec.rb"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 35,
                  "endLine": 237,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n  describe \".filter_by_type\" do\n\n    it \"receives a chrono-formatted time like 3:14 and return a human time like 3 minutes 14 seconds\" do\n      ChronicDuration.instance_eval(\"filter_by_type('3:14')\").should == '3 minutes 14 seconds'\n    end\n\n",
                    "rendered": {
                      "text": "\n  describe \".filter_by_type\" do\n\n    it \"receives a chrono-formatted time like 3:14 and return a human time like 3 minutes 14 seconds\" do\n      ChronicDuration.instance_eval(\"filter_by_type('3:14')\").should == '3 minutes 14 seconds'\n    end\n\n",
                      "markdown": "`\n  describe \".filter_by_type\" do\n\n    it \"receives a chrono-formatted time like 3:14 and return a human time like 3 minutes 14 seconds\" do\n      ChronicDuration.instance_eval(\"filter_by_type('3:14')\").should == '3 minutes 14 seconds'\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-chronic_duration-0.10.6-r2.apk/ruby3.2-chronic_duration-0.10.6-r2/usr/lib/ruby/gems/3.2.0/gems/chronic_duration-0.10.6/spec/lib/chronic_duration_spec.rb"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 9,
                  "endLine": 48,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n        it \"raises with ChronicDuration::DurationParseError\" do\n          ChronicDuration.raise_exceptions = true\n          expect { ChronicDuration.parse('23 gobblygoos') }.to raise_error(ChronicDuration::DurationParseError)\n          ChronicDuration.raise_exceptions = false\n        end\n\n",
                    "rendered": {
                      "text": "\n        it \"raises with ChronicDuration::DurationParseError\" do\n          ChronicDuration.raise_exceptions = true\n          expect { ChronicDuration.parse('23 gobblygoos') }.to raise_error(ChronicDuration::DurationParseError)\n          ChronicDuration.raise_exceptions = false\n        end\n\n",
                      "markdown": "`\n        it \"raises with ChronicDuration::DurationParseError\" do\n          ChronicDuration.raise_exceptions = true\n          expect { ChronicDuration.parse('23 gobblygoos') }.to raise_error(ChronicDuration::DurationParseError)\n          ChronicDuration.raise_exceptions = false\n        end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-chronic_duration-0.10.6-r2.apk/ruby3.2-chronic_duration-0.10.6-r2/usr/lib/ruby/gems/3.2.0/gems/chronic_duration-0.10.6/README.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 8,
                  "endLine": 5,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n# Chronic Duration\n\nA simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.)\n\nThe reverse can also be accomplished with the output method. So pass in seconds and you can get strings like 4 mins 31.51 secs (default  format), 4h 3m 30s, or 4:01:29.\n\n",
                    "rendered": {
                      "text": "\n# Chronic Duration\n\nA simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.)\n\nThe reverse can also be accomplished with the output method. So pass in seconds and you can get strings like 4 mins 31.51 secs (default  format), 4h 3m 30s, or 4:01:29.\n\n",
                      "markdown": "`\n# Chronic Duration\n\nA simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.)\n\nThe reverse can also be accomplished with the output method. So pass in seconds and you can get strings like 4 mins 31.51 secs (default  format), 4h 3m 30s, or 4:01:29.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-chronic_duration-0.10.6-r2.apk/ruby3.2-chronic_duration-0.10.6-r2/usr/lib/ruby/gems/3.2.0/specifications/chronic_duration-0.10.6.gemspec"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 23,
                  "endLine": 17,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  s.homepage = \"https://github.com/hpoydar/chronic_duration\".freeze\n  s.licenses = [\"MIT\".freeze]\n  s.rubygems_version = \"3.4.19\".freeze\n  s.summary = \"A simple Ruby natural language parser for elapsed time\".freeze\n\n  s.installed_by_version = \"3.4.19\" if s.respond_to? :installed_by_version\n\n",
                    "rendered": {
                      "text": "  s.homepage = \"https://github.com/hpoydar/chronic_duration\".freeze\n  s.licenses = [\"MIT\".freeze]\n  s.rubygems_version = \"3.4.19\".freeze\n  s.summary = \"A simple Ruby natural language parser for elapsed time\".freeze\n\n  s.installed_by_version = \"3.4.19\" if s.respond_to? :installed_by_version\n\n",
                      "markdown": "`  s.homepage = \"https://github.com/hpoydar/chronic_duration\".freeze\n  s.licenses = [\"MIT\".freeze]\n  s.rubygems_version = \"3.4.19\".freeze\n  s.summary = \"A simple Ruby natural language parser for elapsed time\".freeze\n\n  s.installed_by_version = \"3.4.19\" if s.respond_to? :installed_by_version\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-chronic_duration-0.10.6-r2.apk/ruby3.2-chronic_duration-0.10.6-r2/usr/lib/ruby/gems/3.2.0/specifications/chronic_duration-0.10.6.gemspec"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 27,
                  "endLine": 12,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  s.require_paths = [\"lib\".freeze]\n  s.authors = [\"hpoydar\".freeze]\n  s.date = \"2024-07-19\"\n  s.description = \"A simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.) The reverse can also be performed via the output method.\".freeze\n  s.email = [\"henry@poydar.com\".freeze]\n  s.homepage = \"https://github.com/hpoydar/chronic_duration\".freeze\n  s.licenses = [\"MIT\".freeze]\n",
                    "rendered": {
                      "text": "  s.require_paths = [\"lib\".freeze]\n  s.authors = [\"hpoydar\".freeze]\n  s.date = \"2024-07-19\"\n  s.description = \"A simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.) The reverse can also be performed via the output method.\".freeze\n  s.email = [\"henry@poydar.com\".freeze]\n  s.homepage = \"https://github.com/hpoydar/chronic_duration\".freeze\n  s.licenses = [\"MIT\".freeze]\n",
                      "markdown": "`  s.require_paths = [\"lib\".freeze]\n  s.authors = [\"hpoydar\".freeze]\n  s.date = \"2024-07-19\"\n  s.description = \"A simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.) The reverse can also be performed via the output method.\".freeze\n  s.email = [\"henry@poydar.com\".freeze]\n  s.homepage = \"https://github.com/hpoydar/chronic_duration\".freeze\n  s.licenses = [\"MIT\".freeze]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-chronic_duration-0.10.6-r2.apk/ruby3.2-chronic_duration-0.10.6-r2/usr/lib/ruby/gems/3.2.0/specifications/chronic_duration-0.10.6.gemspec"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 31,
                  "endLine": 2,
                  "endColumn": 37,
                  "snippet": {
                    "text": "# -*- encoding: utf-8 -*-\n# stub: chronic_duration 0.10.6 ruby lib\n\nGem::Specification.new do |s|\n  s.name = \"chronic_duration\".freeze\n",
                    "rendered": {
                      "text": "# -*- encoding: utf-8 -*-\n# stub: chronic_duration 0.10.6 ruby lib\n\nGem::Specification.new do |s|\n  s.name = \"chronic_duration\".freeze\n",
                      "markdown": "`# -*- encoding: utf-8 -*-\n# stub: chronic_duration 0.10.6 ruby lib\n\nGem::Specification.new do |s|\n  s.name = \"chronic_duration\".freeze\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-chronic_duration-0.10.6-r2.apk/ruby3.2-chronic_duration-0.10.6-r2/usr/lib/ruby/gems/3.2.0/gems/chronic_duration-0.10.6/chronic_duration.gemspec"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 33,
                  "endLine": 13,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  gem.authors       = [\"hpoydar\"]\n  gem.email         = [\"henry@poydar.com\"]\n  gem.description   = %q{A simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.) The reverse can also be performed via the output method.}\n  gem.summary       = %q{A simple Ruby natural language parser for elapsed time}\n  gem.homepage      = \"https://github.com/hpoydar/chronic_duration\"\n  gem.license       = \"MIT\"\n\n",
                    "rendered": {
                      "text": "  gem.authors       = [\"hpoydar\"]\n  gem.email         = [\"henry@poydar.com\"]\n  gem.description   = %q{A simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.) The reverse can also be performed via the output method.}\n  gem.summary       = %q{A simple Ruby natural language parser for elapsed time}\n  gem.homepage      = \"https://github.com/hpoydar/chronic_duration\"\n  gem.license       = \"MIT\"\n\n",
                      "markdown": "`  gem.authors       = [\"hpoydar\"]\n  gem.email         = [\"henry@poydar.com\"]\n  gem.description   = %q{A simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.) The reverse can also be performed via the output method.}\n  gem.summary       = %q{A simple Ruby natural language parser for elapsed time}\n  gem.homepage      = \"https://github.com/hpoydar/chronic_duration\"\n  gem.license       = \"MIT\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-chronic_duration-0.10.6-r2.apk/ruby3.2-chronic_duration-0.10.6-r2/usr/lib/ruby/gems/3.2.0/gems/chronic_duration-0.10.6/chronic_duration.gemspec"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 33,
                  "endLine": 12,
                  "endColumn": 39,
                  "snippet": {
                    "text": " unless $LOAD_PATH.include?(lib)\nrequire 'chronic_duration/version'\n\nGem::Specification.new do |gem|\n\n  gem.name          = \"chronic_duration\"\n  gem.version       = ChronicDuration::VERSION\n  gem.authors       = [\"hpoydar\"]\n  gem.email         = [\"henry@poydar.com\"]\n  gem.description   = %q{A simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.) The reverse can also be performed via the outp",
                    "rendered": {
                      "text": " unless $LOAD_PATH.include?(lib)\nrequire 'chronic_duration/version'\n\nGem::Specification.new do |gem|\n\n  gem.name          = \"chronic_duration\"\n  gem.version       = ChronicDuration::VERSION\n  gem.authors       = [\"hpoydar\"]\n  gem.email         = [\"henry@poydar.com\"]\n  gem.description   = %q{A simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.) The reverse can also be performed via the outp",
                      "markdown": "` unless $LOAD_PATH.include?(lib)\nrequire 'chronic_duration/version'\n\nGem::Specification.new do |gem|\n\n  gem.name          = \"chronic_duration\"\n  gem.version       = ChronicDuration::VERSION\n  gem.authors       = [\"hpoydar\"]\n  gem.email         = [\"henry@poydar.com\"]\n  gem.description   = %q{A simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.) The reverse can also be performed via the outp`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-chronic_duration-0.10.6-r2.apk/ruby3.2-chronic_duration-0.10.6-r2/.PKGINFO"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 18,
                  "endLine": 7,
                  "endColumn": 24,
                  "snippet": {
                    "text": "arch = x86_64\nsize = 112458\norigin = ruby3.2-chronic_duration\npkgdesc = A simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.) The reverse can also be performed via the output method.\nurl = \ncommit = 6c3e34c97c3fc70a86207abd16afe6de997cd7c6\nbuilddate = 1721404986\n",
                    "rendered": {
                      "text": "arch = x86_64\nsize = 112458\norigin = ruby3.2-chronic_duration\npkgdesc = A simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.) The reverse can also be performed via the output method.\nurl = \ncommit = 6c3e34c97c3fc70a86207abd16afe6de997cd7c6\nbuilddate = 1721404986\n",
                      "markdown": "`arch = x86_64\nsize = 112458\norigin = ruby3.2-chronic_duration\npkgdesc = A simple Ruby natural language parser for elapsed time. (For example, 4 hours and 30 minutes, 6 minutes 4 seconds, 3 days, etc.) Returns all results in seconds. Will return an integer unless you get tricky and need a float. (4 minutes and 13.47 seconds, for example.) The reverse can also be performed via the output method.\nurl = \ncommit = 6c3e34c97c3fc70a86207abd16afe6de997cd7c6\nbuilddate = 1721404986\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}