{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_process.py"
                },
                "region": {
                  "startLine": 1619,
                  "startColumn": 24,
                  "endLine": 1620,
                  "snippet": {
                    "text": "        process.state = ProcessStates.BACKOFF\n\n        # This iteration of transition() should reset process.delay\n        # to the current time\n        process.transition()\n\n        # Process state should still be BACKOFF\n        self.assertEqual(process.state, ProcessStates.BACKOFF)\n",
                    "rendered": {
                      "text": "        process.state = ProcessStates.BACKOFF\n\n        # This iteration of transition() should reset process.delay\n        # to the current time\n        process.transition()\n\n        # Process state should still be BACKOFF\n        self.assertEqual(process.state, ProcessStates.BACKOFF)\n",
                      "markdown": "`        process.state = ProcessStates.BACKOFF\n\n        # This iteration of transition() should reset process.delay\n        # to the current time\n        process.transition()\n\n        # Process state should still be BACKOFF\n        self.assertEqual(process.state, ProcessStates.BACKOFF)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_process.py"
                },
                "region": {
                  "startLine": 1570,
                  "startColumn": 24,
                  "endLine": 1571,
                  "snippet": {
                    "text": "        process.state = ProcessStates.STARTING\n\n        # This iteration of transition() should reset process.laststart\n        # to the current time\n        process.transition()\n\n        # Process state should still be STARTING\n        self.assertEqual(process.state, ProcessStates.STARTING)\n",
                    "rendered": {
                      "text": "        process.state = ProcessStates.STARTING\n\n        # This iteration of transition() should reset process.laststart\n        # to the current time\n        process.transition()\n\n        # Process state should still be STARTING\n        self.assertEqual(process.state, ProcessStates.STARTING)\n",
                      "markdown": "`        process.state = ProcessStates.STARTING\n\n        # This iteration of transition() should reset process.laststart\n        # to the current time\n        process.transition()\n\n        # Process state should still be STARTING\n        self.assertEqual(process.state, ProcessStates.STARTING)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_process.py"
                },
                "region": {
                  "startLine": 1249,
                  "startColumn": 60,
                  "endLine": 1249,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        self.assertEqual(instance.pipes, {})\n        self.assertEqual(instance.dispatchers, {})\n        self.assertEqual(options.logger.data[0],\n                         \"process 'notthere' (123) laststart time is in the \"\n                         \"future, don't know how long process was running so \"\n                         \"assuming it did not exit too quickly\")\n        self.assertEqual(options.logger.data[1],\n",
                    "rendered": {
                      "text": "        self.assertEqual(instance.pipes, {})\n        self.assertEqual(instance.dispatchers, {})\n        self.assertEqual(options.logger.data[0],\n                         \"process 'notthere' (123) laststart time is in the \"\n                         \"future, don't know how long process was running so \"\n                         \"assuming it did not exit too quickly\")\n        self.assertEqual(options.logger.data[1],\n",
                      "markdown": "`        self.assertEqual(instance.pipes, {})\n        self.assertEqual(instance.dispatchers, {})\n        self.assertEqual(options.logger.data[0],\n                         \"process 'notthere' (123) laststart time is in the \"\n                         \"future, don't know how long process was running so \"\n                         \"assuming it did not exit too quickly\")\n        self.assertEqual(options.logger.data[1],\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_process.py"
                },
                "region": {
                  "startLine": 1191,
                  "startColumn": 66,
                  "endLine": 1191,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    # This tests the case where the process has stayed alive longer than\n    # startsecs (i.e., long enough to enter the RUNNING state), however the\n    # system clock has since rolled backward such that the current time is\n    # greater than laststart but less than startsecs.\n    def test_finish_running_state_exited_too_quickly_due_to_clock_rollback(self):\n        options = DummyOptions()\n",
                    "rendered": {
                      "text": "\n    # This tests the case where the process has stayed alive longer than\n    # startsecs (i.e., long enough to enter the RUNNING state), however the\n    # system clock has since rolled backward such that the current time is\n    # greater than laststart but less than startsecs.\n    def test_finish_running_state_exited_too_quickly_due_to_clock_rollback(self):\n        options = DummyOptions()\n",
                      "markdown": "`\n    # This tests the case where the process has stayed alive longer than\n    # startsecs (i.e., long enough to enter the RUNNING state), however the\n    # system clock has since rolled backward such that the current time is\n    # greater than laststart but less than startsecs.\n    def test_finish_running_state_exited_too_quickly_due_to_clock_rollback(self):\n        options = DummyOptions()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_process.py"
                },
                "region": {
                  "startLine": 1141,
                  "startColumn": 60,
                  "endLine": 1141,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        self.assertEqual(instance.pipes, {})\n        self.assertEqual(instance.dispatchers, {})\n        self.assertEqual(options.logger.data[0],\n                         \"process 'notthere' (123) laststart time is in the \"\n                         \"future, don't know how long process was running so \"\n                         \"assuming it did not exit too quickly\")\n        self.assertEqual(options.logger.data[1],\n",
                    "rendered": {
                      "text": "        self.assertEqual(instance.pipes, {})\n        self.assertEqual(instance.dispatchers, {})\n        self.assertEqual(options.logger.data[0],\n                         \"process 'notthere' (123) laststart time is in the \"\n                         \"future, don't know how long process was running so \"\n                         \"assuming it did not exit too quickly\")\n        self.assertEqual(options.logger.data[1],\n",
                      "markdown": "`        self.assertEqual(instance.pipes, {})\n        self.assertEqual(instance.dispatchers, {})\n        self.assertEqual(options.logger.data[0],\n                         \"process 'notthere' (123) laststart time is in the \"\n                         \"future, don't know how long process was running so \"\n                         \"assuming it did not exit too quickly\")\n        self.assertEqual(options.logger.data[1],\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_process.py"
                },
                "region": {
                  "startLine": 774,
                  "startColumn": 24,
                  "endLine": 775,
                  "snippet": {
                    "text": "        instance.laststopreport = future_time\n\n        # This iteration of stop_report() should reset instance.laststopreport\n        # to the current time\n        instance.stop_report()\n\n        # No logging should have taken place\n        self.assertEqual(len(options.logger.data), 0)\n",
                    "rendered": {
                      "text": "        instance.laststopreport = future_time\n\n        # This iteration of stop_report() should reset instance.laststopreport\n        # to the current time\n        instance.stop_report()\n\n        # No logging should have taken place\n        self.assertEqual(len(options.logger.data), 0)\n",
                      "markdown": "`        instance.laststopreport = future_time\n\n        # This iteration of stop_report() should reset instance.laststopreport\n        # to the current time\n        instance.stop_report()\n\n        # No logging should have taken place\n        self.assertEqual(len(options.logger.data), 0)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_process.py"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 7,
                  "endLine": 497,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        self.assertEqual(len(options.duped), 3)\n        self.assertEqual(len(options.fds_closed), options.minfds - 3)\n        msg = options.written[2] # dict, 2 is fd #\n        head = \"supervisor: couldn't exec /good/filename:\"\n        self.assertTrue(msg.startswith(head))\n        self.assertTrue(\"RuntimeError\" in msg)\n        self.assertEqual(options.privsdropped, None)\n",
                    "rendered": {
                      "text": "        self.assertEqual(len(options.duped), 3)\n        self.assertEqual(len(options.fds_closed), options.minfds - 3)\n        msg = options.written[2] # dict, 2 is fd #\n        head = \"supervisor: couldn't exec /good/filename:\"\n        self.assertTrue(msg.startswith(head))\n        self.assertTrue(\"RuntimeError\" in msg)\n        self.assertEqual(options.privsdropped, None)\n",
                      "markdown": "`        self.assertEqual(len(options.duped), 3)\n        self.assertEqual(len(options.fds_closed), options.minfds - 3)\n        msg = options.written[2] # dict, 2 is fd #\n        head = \"supervisor: couldn't exec /good/filename:\"\n        self.assertTrue(msg.startswith(head))\n        self.assertTrue(\"RuntimeError\" in msg)\n        self.assertEqual(options.privsdropped, None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_process.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 45,
                  "endLine": 71,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        instance = self._makeOne(config)\n        s = repr(instance)\n        self.assertTrue(s.startswith('<Subprocess at'))\n        self.assertTrue(s.endswith('with name cat in state STOPPED>'))\n\n    def test_reopenlogs(self):\n        options = DummyOptions()\n",
                    "rendered": {
                      "text": "        instance = self._makeOne(config)\n        s = repr(instance)\n        self.assertTrue(s.startswith('<Subprocess at'))\n        self.assertTrue(s.endswith('with name cat in state STOPPED>'))\n\n    def test_reopenlogs(self):\n        options = DummyOptions()\n",
                      "markdown": "`        instance = self._makeOne(config)\n        s = repr(instance)\n        self.assertTrue(s.startswith('<Subprocess at'))\n        self.assertTrue(s.endswith('with name cat in state STOPPED>'))\n\n    def test_reopenlogs(self):\n        options = DummyOptions()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_process.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 6,
                  "endLine": 6,
                  "snippet": {
                    "text": "import os\nimport signal\nimport tempfile\nimport time\nimport unittest\n\nfrom supervisor.compat import as_bytes\nfrom supervisor.compat import maxint\n",
                    "rendered": {
                      "text": "import os\nimport signal\nimport tempfile\nimport time\nimport unittest\n\nfrom supervisor.compat import as_bytes\nfrom supervisor.compat import maxint\n",
                      "markdown": "`import os\nimport signal\nimport tempfile\nimport time\nimport unittest\n\nfrom supervisor.compat import as_bytes\nfrom supervisor.compat import maxint\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 47,
                  "endLine": 528,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        @return array\n        \"\"\"\n\n        group = self.supervisord.process_groups.get(name)\n        self._update('signalProcessGroup')\n\n        if group is None:\n",
                    "rendered": {
                      "text": "        @return array\n        \"\"\"\n\n        group = self.supervisord.process_groups.get(name)\n        self._update('signalProcessGroup')\n\n        if group is None:\n",
                      "markdown": "`        @return array\n        \"\"\"\n\n        group = self.supervisord.process_groups.get(name)\n        self._update('signalProcessGroup')\n\n        if group is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 47,
                  "endLine": 456,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        \"\"\"\n        self._update('stopProcessGroup')\n\n        group = self.supervisord.process_groups.get(name)\n\n        if group is None:\n            raise RPCError(Faults.BAD_NAME, name)\n",
                    "rendered": {
                      "text": "        \"\"\"\n        self._update('stopProcessGroup')\n\n        group = self.supervisord.process_groups.get(name)\n\n        if group is None:\n            raise RPCError(Faults.BAD_NAME, name)\n",
                      "markdown": "`        \"\"\"\n        self._update('stopProcessGroup')\n\n        group = self.supervisord.process_groups.get(name)\n\n        if group is None:\n            raise RPCError(Faults.BAD_NAME, name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 47,
                  "endLine": 364,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        \"\"\"\n        self._update('startProcessGroup')\n\n        group = self.supervisord.process_groups.get(name)\n\n        if group is None:\n            raise RPCError(Faults.BAD_NAME, name)\n",
                    "rendered": {
                      "text": "        \"\"\"\n        self._update('startProcessGroup')\n\n        group = self.supervisord.process_groups.get(name)\n\n        if group is None:\n            raise RPCError(Faults.BAD_NAME, name)\n",
                      "markdown": "`        \"\"\"\n        self._update('startProcessGroup')\n\n        group = self.supervisord.process_groups.get(name)\n\n        if group is None:\n            raise RPCError(Faults.BAD_NAME, name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 33,
                  "endLine": 271,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        if process_name is None:\n            return group, None\n\n        process = group.processes.get(process_name)\n        if process is None:\n            raise RPCError(Faults.BAD_NAME, name)\n\n",
                    "rendered": {
                      "text": "        if process_name is None:\n            return group, None\n\n        process = group.processes.get(process_name)\n        if process is None:\n            raise RPCError(Faults.BAD_NAME, name)\n\n",
                      "markdown": "`        if process_name is None:\n            return group, None\n\n        process = group.processes.get(process_name)\n        if process is None:\n            raise RPCError(Faults.BAD_NAME, name)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 47,
                  "endLine": 264,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        # get process to start from name\n        group_name, process_name = split_namespec(name)\n\n        group = self.supervisord.process_groups.get(group_name)\n        if group is None:\n            raise RPCError(Faults.BAD_NAME, name)\n\n",
                    "rendered": {
                      "text": "        # get process to start from name\n        group_name, process_name = split_namespec(name)\n\n        group = self.supervisord.process_groups.get(group_name)\n        if group is None:\n            raise RPCError(Faults.BAD_NAME, name)\n\n",
                      "markdown": "`        # get process to start from name\n        group_name, process_name = split_namespec(name)\n\n        group = self.supervisord.process_groups.get(group_name)\n        if group is None:\n            raise RPCError(Faults.BAD_NAME, name)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 1018,
                  "startColumn": 32,
                  "endLine": 1018,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    # attempted to make this better, but the only way to make it\n    # better assumes totally synchronous reaping of child\n    # processes, which requires infrastructure changes to\n    # supervisord that are scary at the moment as it could take a\n    # while to pin down all of the platform differences and might\n    # require a C extension to the Python signal module to allow\n    # the setting of ignore flags to signals.\n",
                    "rendered": {
                      "text": "    # attempted to make this better, but the only way to make it\n    # better assumes totally synchronous reaping of child\n    # processes, which requires infrastructure changes to\n    # supervisord that are scary at the moment as it could take a\n    # while to pin down all of the platform differences and might\n    # require a C extension to the Python signal module to allow\n    # the setting of ignore flags to signals.\n",
                      "markdown": "`    # attempted to make this better, but the only way to make it\n    # better assumes totally synchronous reaping of child\n    # processes, which requires infrastructure changes to\n    # supervisord that are scary at the moment as it could take a\n    # while to pin down all of the platform differences and might\n    # require a C extension to the Python signal module to allow\n    # the setting of ignore flags to signals.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 54,
                  "endLine": 1011,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    # client to block for much longer than it actually requires to\n    # kill all of the running processes.  After the first call to\n    # the killit callback, the process is actually dead, but the\n    # above killall method processes the callbacks one at a time\n    # during the select loop, which, because there is no output\n    # from child processes after e.g. stopAllProcesses is called,\n    # is not busy, so hits the timeout for each callback.  I\n",
                    "rendered": {
                      "text": "    # client to block for much longer than it actually requires to\n    # kill all of the running processes.  After the first call to\n    # the killit callback, the process is actually dead, but the\n    # above killall method processes the callbacks one at a time\n    # during the select loop, which, because there is no output\n    # from child processes after e.g. stopAllProcesses is called,\n    # is not busy, so hits the timeout for each callback.  I\n",
                      "markdown": "`    # client to block for much longer than it actually requires to\n    # kill all of the running processes.  After the first call to\n    # the killit callback, the process is actually dead, but the\n    # above killall method processes the callbacks one at a time\n    # during the select loop, which, because there is no output\n    # from child processes after e.g. stopAllProcesses is called,\n    # is not busy, so hits the timeout for each callback.  I\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 54,
                  "endLine": 791,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        Requests (length) bytes from the (name)'s log, starting at\n        (offset).  If the total log size is greater than (offset +\n        length), the overflow flag is set and the (offset) is\n        automatically increased to position the buffer at the end of\n        the log.  If less than (length) bytes are available, the\n        maximum number of available bytes will be returned.  (offset)\n        returned is always the last offset in the log +1.\n",
                    "rendered": {
                      "text": "        Requests (length) bytes from the (name)'s log, starting at\n        (offset).  If the total log size is greater than (offset +\n        length), the overflow flag is set and the (offset) is\n        automatically increased to position the buffer at the end of\n        the log.  If less than (length) bytes are available, the\n        maximum number of available bytes will be returned.  (offset)\n        returned is always the last offset in the log +1.\n",
                      "markdown": "`        Requests (length) bytes from the (name)'s log, starting at\n        (offset).  If the total log size is greater than (offset +\n        length), the overflow flag is set and the (offset) is\n        automatically increased to position the buffer at the end of\n        the log.  If less than (length) bytes are available, the\n        maximum number of available bytes will be returned.  (offset)\n        returned is always the last offset in the log +1.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 788,
                  "startColumn": 63,
                  "endLine": 789,
                  "snippet": {
                    "text": "        readProcessStderrLog().  Use readProcessStderrLog() to read\n        chunks and tailProcessStderrLog() to tail.\n\n        Requests (length) bytes from the (name)'s log, starting at\n        (offset).  If the total log size is greater than (offset +\n        length), the overflow flag is set and the (offset) is\n        automatically increased to position the buffer at the end of\n        the log.  If less than (length) bytes are available, the\n",
                    "rendered": {
                      "text": "        readProcessStderrLog().  Use readProcessStderrLog() to read\n        chunks and tailProcessStderrLog() to tail.\n\n        Requests (length) bytes from the (name)'s log, starting at\n        (offset).  If the total log size is greater than (offset +\n        length), the overflow flag is set and the (offset) is\n        automatically increased to position the buffer at the end of\n        the log.  If less than (length) bytes are available, the\n",
                      "markdown": "`        readProcessStderrLog().  Use readProcessStderrLog() to read\n        chunks and tailProcessStderrLog() to tail.\n\n        Requests (length) bytes from the (name)'s log, starting at\n        (offset).  If the total log size is greater than (offset +\n        length), the overflow flag is set and the (offset) is\n        automatically increased to position the buffer at the end of\n        the log.  If less than (length) bytes are available, the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 767,
                  "startColumn": 54,
                  "endLine": 767,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        Requests (length) bytes from the (name)'s log, starting at\n        (offset).  If the total log size is greater than (offset +\n        length), the overflow flag is set and the (offset) is\n        automatically increased to position the buffer at the end of\n        the log.  If less than (length) bytes are available, the\n        maximum number of available bytes will be returned.  (offset)\n        returned is always the last offset in the log +1.\n",
                    "rendered": {
                      "text": "        Requests (length) bytes from the (name)'s log, starting at\n        (offset).  If the total log size is greater than (offset +\n        length), the overflow flag is set and the (offset) is\n        automatically increased to position the buffer at the end of\n        the log.  If less than (length) bytes are available, the\n        maximum number of available bytes will be returned.  (offset)\n        returned is always the last offset in the log +1.\n",
                      "markdown": "`        Requests (length) bytes from the (name)'s log, starting at\n        (offset).  If the total log size is greater than (offset +\n        length), the overflow flag is set and the (offset) is\n        automatically increased to position the buffer at the end of\n        the log.  If less than (length) bytes are available, the\n        maximum number of available bytes will be returned.  (offset)\n        returned is always the last offset in the log +1.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 764,
                  "startColumn": 63,
                  "endLine": 765,
                  "snippet": {
                    "text": "        readProcessStdoutLog().  Use readProcessStdoutLog() to read\n        chunks and tailProcessStdoutLog() to tail.\n\n        Requests (length) bytes from the (name)'s log, starting at\n        (offset).  If the total log size is greater than (offset +\n        length), the overflow flag is set and the (offset) is\n        automatically increased to position the buffer at the end of\n        the log.  If less than (length) bytes are available, the\n",
                    "rendered": {
                      "text": "        readProcessStdoutLog().  Use readProcessStdoutLog() to read\n        chunks and tailProcessStdoutLog() to tail.\n\n        Requests (length) bytes from the (name)'s log, starting at\n        (offset).  If the total log size is greater than (offset +\n        length), the overflow flag is set and the (offset) is\n        automatically increased to position the buffer at the end of\n        the log.  If less than (length) bytes are available, the\n",
                      "markdown": "`        readProcessStdoutLog().  Use readProcessStdoutLog() to read\n        chunks and tailProcessStdoutLog() to tail.\n\n        Requests (length) bytes from the (name)'s log, starting at\n        (offset).  If the total log size is greater than (offset +\n        length), the overflow flag is set and the (offset) is\n        automatically increased to position the buffer at the end of\n        the log.  If less than (length) bytes are available, the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 735,
                  "startColumn": 61,
                  "endLine": 735,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    readProcessLog = readProcessStdoutLog # b/c alias\n\n    def readProcessStderrLog(self, name, offset, length):\n        \"\"\" Read length bytes from name's stderr log starting at offset\n\n        @param string name        the name of the process (or 'group:name')\n        @param int offset         offset to start reading from.\n",
                    "rendered": {
                      "text": "    readProcessLog = readProcessStdoutLog # b/c alias\n\n    def readProcessStderrLog(self, name, offset, length):\n        \"\"\" Read length bytes from name's stderr log starting at offset\n\n        @param string name        the name of the process (or 'group:name')\n        @param int offset         offset to start reading from.\n",
                      "markdown": "`    readProcessLog = readProcessStdoutLog # b/c alias\n\n    def readProcessStderrLog(self, name, offset, length):\n        \"\"\" Read length bytes from name's stderr log starting at offset\n\n        @param string name        the name of the process (or 'group:name')\n        @param int offset         offset to start reading from.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 722,
                  "startColumn": 61,
                  "endLine": 722,
                  "endColumn": 65,
                  "snippet": {
                    "text": "            raise RPCError(getattr(Faults, why))\n\n    def readProcessStdoutLog(self, name, offset, length):\n        \"\"\" Read length bytes from name's stdout log starting at offset\n\n        @param string name        the name of the process (or 'group:name')\n        @param int offset         offset to start reading from.\n",
                    "rendered": {
                      "text": "            raise RPCError(getattr(Faults, why))\n\n    def readProcessStdoutLog(self, name, offset, length):\n        \"\"\" Read length bytes from name's stdout log starting at offset\n\n        @param string name        the name of the process (or 'group:name')\n        @param int offset         offset to start reading from.\n",
                      "markdown": "`            raise RPCError(getattr(Faults, why))\n\n    def readProcessStdoutLog(self, name, offset, length):\n        \"\"\" Read length bytes from name's stdout log starting at offset\n\n        @param string name        the name of the process (or 'group:name')\n        @param int offset         offset to start reading from.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 11,
                  "endLine": 203,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        return [[added, changed, removed]] # cannot return len > 1, apparently\n\n    def addProcessGroup(self, name):\n        \"\"\" Update the config for a running process from config file.\n\n        @param string name         name of process group to add\n        @return boolean result     true if successful\n",
                    "rendered": {
                      "text": "        return [[added, changed, removed]] # cannot return len > 1, apparently\n\n    def addProcessGroup(self, name):\n        \"\"\" Update the config for a running process from config file.\n\n        @param string name         name of process group to add\n        @return boolean result     true if successful\n",
                      "markdown": "`        return [[added, changed, removed]] # cannot return len > 1, apparently\n\n    def addProcessGroup(self, name):\n        \"\"\" Update the config for a running process from config file.\n\n        @param string name         name of process group to add\n        @return boolean result     true if successful\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 56,
                  "endLine": 110,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        return self.supervisord.options.get_pid()\n\n    def readLog(self, offset, length):\n        \"\"\" Read length bytes from the main log starting at offset\n\n        @param int offset         offset to start reading from.\n        @param int length         number of bytes to read from the log.\n",
                    "rendered": {
                      "text": "        return self.supervisord.options.get_pid()\n\n    def readLog(self, offset, length):\n        \"\"\" Read length bytes from the main log starting at offset\n\n        @param int offset         offset to start reading from.\n        @param int length         number of bytes to read from the log.\n",
                      "markdown": "`        return self.supervisord.options.get_pid()\n\n    def readLog(self, offset, length):\n        \"\"\" Read length bytes from the main log starting at offset\n\n        @param int offset         offset to start reading from.\n        @param int length         number of bytes to read from the log.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 1014,
                  "startColumn": 30,
                  "endLine": 1014,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    # above killall method processes the callbacks one at a time\n    # during the select loop, which, because there is no output\n    # from child processes after e.g. stopAllProcesses is called,\n    # is not busy, so hits the timeout for each callback.  I\n    # attempted to make this better, but the only way to make it\n    # better assumes totally synchronous reaping of child\n    # processes, which requires infrastructure changes to\n",
                    "rendered": {
                      "text": "    # above killall method processes the callbacks one at a time\n    # during the select loop, which, because there is no output\n    # from child processes after e.g. stopAllProcesses is called,\n    # is not busy, so hits the timeout for each callback.  I\n    # attempted to make this better, but the only way to make it\n    # better assumes totally synchronous reaping of child\n    # processes, which requires infrastructure changes to\n",
                      "markdown": "`    # above killall method processes the callbacks one at a time\n    # during the select loop, which, because there is no output\n    # from child processes after e.g. stopAllProcesses is called,\n    # is not busy, so hits the timeout for each callback.  I\n    # attempted to make this better, but the only way to make it\n    # better assumes totally synchronous reaping of child\n    # processes, which requires infrastructure changes to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 59,
                  "endLine": 1012,
                  "snippet": {
                    "text": "    # client to block for much longer than it actually requires to\n    # kill all of the running processes.  After the first call to\n    # the killit callback, the process is actually dead, but the\n    # above killall method processes the callbacks one at a time\n    # during the select loop, which, because there is no output\n    # from child processes after e.g. stopAllProcesses is called,\n    # is not busy, so hits the timeout for each callback.  I\n    # attempted to make this better, but the only way to make it\n",
                    "rendered": {
                      "text": "    # client to block for much longer than it actually requires to\n    # kill all of the running processes.  After the first call to\n    # the killit callback, the process is actually dead, but the\n    # above killall method processes the callbacks one at a time\n    # during the select loop, which, because there is no output\n    # from child processes after e.g. stopAllProcesses is called,\n    # is not busy, so hits the timeout for each callback.  I\n    # attempted to make this better, but the only way to make it\n",
                      "markdown": "`    # client to block for much longer than it actually requires to\n    # kill all of the running processes.  After the first call to\n    # the killit callback, the process is actually dead, but the\n    # above killall method processes the callbacks one at a time\n    # during the select loop, which, because there is no output\n    # from child processes after e.g. stopAllProcesses is called,\n    # is not busy, so hits the timeout for each callback.  I\n    # attempted to make this better, but the only way to make it\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 784,
                  "startColumn": 40,
                  "endLine": 784,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    def tailProcessStderrLog(self, name, offset, length):\n        \"\"\"\n        Provides a more efficient way to tail the (stderr) log than\n        readProcessStderrLog().  Use readProcessStderrLog() to read\n        chunks and tailProcessStderrLog() to tail.\n\n",
                    "rendered": {
                      "text": "\n    def tailProcessStderrLog(self, name, offset, length):\n        \"\"\"\n        Provides a more efficient way to tail the (stderr) log than\n        readProcessStderrLog().  Use readProcessStderrLog() to read\n        chunks and tailProcessStderrLog() to tail.\n\n",
                      "markdown": "`\n    def tailProcessStderrLog(self, name, offset, length):\n        \"\"\"\n        Provides a more efficient way to tail the (stderr) log than\n        readProcessStderrLog().  Use readProcessStderrLog() to read\n        chunks and tailProcessStderrLog() to tail.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 40,
                  "endLine": 760,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    def tailProcessStdoutLog(self, name, offset, length):\n        \"\"\"\n        Provides a more efficient way to tail the (stdout) log than\n        readProcessStdoutLog().  Use readProcessStdoutLog() to read\n        chunks and tailProcessStdoutLog() to tail.\n\n",
                    "rendered": {
                      "text": "\n    def tailProcessStdoutLog(self, name, offset, length):\n        \"\"\"\n        Provides a more efficient way to tail the (stdout) log than\n        readProcessStdoutLog().  Use readProcessStdoutLog() to read\n        chunks and tailProcessStdoutLog() to tail.\n\n",
                      "markdown": "`\n    def tailProcessStdoutLog(self, name, offset, length):\n        \"\"\"\n        Provides a more efficient way to tail the (stdout) log than\n        readProcessStdoutLog().  Use readProcessStdoutLog() to read\n        chunks and tailProcessStdoutLog() to tail.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 25,
                  "endLine": 686,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        return info\n\n    def _now(self): # pragma: no cover\n        # this is here to service stubbing in unit tests\n        return time.time()\n\n    def getAllProcessInfo(self):\n",
                    "rendered": {
                      "text": "        return info\n\n    def _now(self): # pragma: no cover\n        # this is here to service stubbing in unit tests\n        return time.time()\n\n    def getAllProcessInfo(self):\n",
                      "markdown": "`        return info\n\n    def _now(self): # pragma: no cover\n        # this is here to service stubbing in unit tests\n        return time.time()\n\n    def getAllProcessInfo(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 617,
                  "startColumn": 51,
                  "endLine": 617,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            start_dt = datetime.datetime(*time.gmtime(start)[:6])\n            now_dt = datetime.datetime(*time.gmtime(now)[:6])\n            uptime = now_dt - start_dt\n            if _total_seconds(uptime) < 0: # system time set back\n                uptime = datetime.timedelta(0)\n            desc = 'pid %s, uptime %s' % (info['pid'], uptime)\n\n",
                    "rendered": {
                      "text": "            start_dt = datetime.datetime(*time.gmtime(start)[:6])\n            now_dt = datetime.datetime(*time.gmtime(now)[:6])\n            uptime = now_dt - start_dt\n            if _total_seconds(uptime) < 0: # system time set back\n                uptime = datetime.timedelta(0)\n            desc = 'pid %s, uptime %s' % (info['pid'], uptime)\n\n",
                      "markdown": "`            start_dt = datetime.datetime(*time.gmtime(start)[:6])\n            now_dt = datetime.datetime(*time.gmtime(now)[:6])\n            uptime = now_dt - start_dt\n            if _total_seconds(uptime) < 0: # system time set back\n                uptime = datetime.timedelta(0)\n            desc = 'pid %s, uptime %s' % (info['pid'], uptime)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 20,
                  "endLine": 235,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n    def _getAllProcesses(self, lexical=False):\n        # if lexical is true, return processes sorted in lexical order,\n        # otherwise, sort in priority order\n        all_processes = []\n\n        if lexical:\n",
                    "rendered": {
                      "text": "\n    def _getAllProcesses(self, lexical=False):\n        # if lexical is true, return processes sorted in lexical order,\n        # otherwise, sort in priority order\n        all_processes = []\n\n        if lexical:\n",
                      "markdown": "`\n    def _getAllProcesses(self, lexical=False):\n        # if lexical is true, return processes sorted in lexical order,\n        # otherwise, sort in priority order\n        all_processes = []\n\n        if lexical:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/rpcinterface.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 6,
                  "endLine": 3,
                  "snippet": {
                    "text": "import os\nimport time\nimport datetime\nimport errno\nimport types\n\n",
                    "rendered": {
                      "text": "import os\nimport time\nimport datetime\nimport errno\nimport types\n\n",
                      "markdown": "`import os\nimport time\nimport datetime\nimport errno\nimport types\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/fixtures/spew.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 6,
                  "endLine": 4,
                  "snippet": {
                    "text": "#!<<PYTHON>>\nimport sys\nimport time\n\ncounter = 0\n\nwhile counter < 30000:\n",
                    "rendered": {
                      "text": "#!<<PYTHON>>\nimport sys\nimport time\n\ncounter = 0\n\nwhile counter < 30000:\n",
                      "markdown": "`#!<<PYTHON>>\nimport sys\nimport time\n\ncounter = 0\n\nwhile counter < 30000:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 853,
                  "startColumn": 33,
                  "endLine": 853,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    def __init__(self, config, **kwargs):\n        ProcessGroup.__init__(self, config)\n        sockManagerKlass = kwargs.get('socketManager', SocketManager)\n        self.socket_manager = sockManagerKlass(config.socket_config,\n                                               logger=config.options.logger)\n        # It's not required to call get_socket() here but we want\n",
                    "rendered": {
                      "text": "\n    def __init__(self, config, **kwargs):\n        ProcessGroup.__init__(self, config)\n        sockManagerKlass = kwargs.get('socketManager', SocketManager)\n        self.socket_manager = sockManagerKlass(config.socket_config,\n                                               logger=config.options.logger)\n        # It's not required to call get_socket() here but we want\n",
                      "markdown": "`\n    def __init__(self, config, **kwargs):\n        ProcessGroup.__init__(self, config)\n        sockManagerKlass = kwargs.get('socketManager', SocketManager)\n        self.socket_manager = sockManagerKlass(config.socket_config,\n                                               logger=config.options.logger)\n        # It's not required to call get_socket() here but we want\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 38,
                  "endLine": 341,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                    options.setumask(self.config.umask)\n                options.execve(filename, argv, env)\n            except OSError as why:\n                code = errno.errorcode.get(why.args[0], why.args[0])\n                msg = \"couldn't exec %s: %s\\n\" % (argv[0], code)\n                options.write(2, \"supervisor: \" + msg)\n            except:\n",
                    "rendered": {
                      "text": "                    options.setumask(self.config.umask)\n                options.execve(filename, argv, env)\n            except OSError as why:\n                code = errno.errorcode.get(why.args[0], why.args[0])\n                msg = \"couldn't exec %s: %s\\n\" % (argv[0], code)\n                options.write(2, \"supervisor: \" + msg)\n            except:\n",
                      "markdown": "`                    options.setumask(self.config.umask)\n                options.execve(filename, argv, env)\n            except OSError as why:\n                code = errno.errorcode.get(why.args[0], why.args[0])\n                msg = \"couldn't exec %s: %s\\n\" % (argv[0], code)\n                options.write(2, \"supervisor: \" + msg)\n            except:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 38,
                  "endLine": 330,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                if cwd is not None:\n                    options.chdir(cwd)\n            except OSError as why:\n                code = errno.errorcode.get(why.args[0], why.args[0])\n                msg = \"couldn't chdir to %s: %s\\n\" % (cwd, code)\n                options.write(2, \"supervisor: \" + msg)\n                return # finally clause will exit the child process\n",
                    "rendered": {
                      "text": "                if cwd is not None:\n                    options.chdir(cwd)\n            except OSError as why:\n                code = errno.errorcode.get(why.args[0], why.args[0])\n                msg = \"couldn't chdir to %s: %s\\n\" % (cwd, code)\n                options.write(2, \"supervisor: \" + msg)\n                return # finally clause will exit the child process\n",
                      "markdown": "`                if cwd is not None:\n                    options.chdir(cwd)\n            except OSError as why:\n                code = errno.errorcode.get(why.args[0], why.args[0])\n                msg = \"couldn't chdir to %s: %s\\n\" % (cwd, code)\n                options.write(2, \"supervisor: \" + msg)\n                return # finally clause will exit the child process\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 50,
                  "endLine": 250,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                        processname)\n            else:\n                msg = 'unknown error during fork for \\'%s\\': %s' % (\n                      processname, errno.errorcode.get(code, code))\n            self.record_spawnerr(msg)\n            self._assertInState(ProcessStates.STARTING)\n            self.change_state(ProcessStates.BACKOFF)\n",
                    "rendered": {
                      "text": "                        processname)\n            else:\n                msg = 'unknown error during fork for \\'%s\\': %s' % (\n                      processname, errno.errorcode.get(code, code))\n            self.record_spawnerr(msg)\n            self._assertInState(ProcessStates.STARTING)\n            self.change_state(ProcessStates.BACKOFF)\n",
                      "markdown": "`                        processname)\n            else:\n                msg = 'unknown error during fork for \\'%s\\': %s' % (\n                      processname, errno.errorcode.get(code, code))\n            self.record_spawnerr(msg)\n            self._assertInState(ProcessStates.STARTING)\n            self.change_state(ProcessStates.BACKOFF)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 50,
                  "endLine": 234,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                msg = 'too many open files to spawn \\'%s\\'' % processname\n            else:\n                msg = 'unknown error making dispatchers for \\'%s\\': %s' % (\n                      processname, errno.errorcode.get(code, code))\n            self.record_spawnerr(msg)\n            self._assertInState(ProcessStates.STARTING)\n            self.change_state(ProcessStates.BACKOFF)\n",
                    "rendered": {
                      "text": "                msg = 'too many open files to spawn \\'%s\\'' % processname\n            else:\n                msg = 'unknown error making dispatchers for \\'%s\\': %s' % (\n                      processname, errno.errorcode.get(code, code))\n            self.record_spawnerr(msg)\n            self._assertInState(ProcessStates.STARTING)\n            self.change_state(ProcessStates.BACKOFF)\n",
                      "markdown": "`                msg = 'too many open files to spawn \\'%s\\'' % processname\n            else:\n                msg = 'unknown error making dispatchers for \\'%s\\': %s' % (\n                      processname, errno.errorcode.get(code, code))\n            self.record_spawnerr(msg)\n            self._assertInState(ProcessStates.STARTING)\n            self.change_state(ProcessStates.BACKOFF)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 36,
                  "endLine": 174,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            self.backoff += 1\n            self.delay = now + self.backoff\n\n        event_class = self.event_map.get(new_state)\n        if event_class is not None:\n            event = event_class(self, old_state, expected)\n            events.notify(event)\n",
                    "rendered": {
                      "text": "            self.backoff += 1\n            self.delay = now + self.backoff\n\n        event_class = self.event_map.get(new_state)\n        if event_class is not None:\n            event = event_class(self, old_state, expected)\n            events.notify(event)\n",
                      "markdown": "`            self.backoff += 1\n            self.delay = now + self.backoff\n\n        event_class = self.event_map.get(new_state)\n        if event_class is not None:\n            event = event_class(self, old_state, expected)\n            events.notify(event)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 28,
                  "endLine": 802,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        name = self.config.name\n        if PY2:\n            name = as_string(name).encode('unicode-escape')\n        return '<%s instance at %s named %s>' % (self.__class__, id(self),\n                                                 name)\n\n    def removelogs(self):\n",
                    "rendered": {
                      "text": "        name = self.config.name\n        if PY2:\n            name = as_string(name).encode('unicode-escape')\n        return '<%s instance at %s named %s>' % (self.__class__, id(self),\n                                                 name)\n\n    def removelogs(self):\n",
                      "markdown": "`        name = self.config.name\n        if PY2:\n            name = as_string(name).encode('unicode-escape')\n        return '<%s instance at %s named %s>' % (self.__class__, id(self),\n                                                 name)\n\n    def removelogs(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 55,
                  "endLine": 689,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        if state == ProcessStates.STARTING:\n            if now - self.laststart > self.config.startsecs:\n                # STARTING -> RUNNING if the proc has started\n                # successfully and it has stayed up for at least\n                # proc.config.startsecs,\n                self.delay = 0\n                self.backoff = 0\n",
                    "rendered": {
                      "text": "        if state == ProcessStates.STARTING:\n            if now - self.laststart > self.config.startsecs:\n                # STARTING -> RUNNING if the proc has started\n                # successfully and it has stayed up for at least\n                # proc.config.startsecs,\n                self.delay = 0\n                self.backoff = 0\n",
                      "markdown": "`        if state == ProcessStates.STARTING:\n            if now - self.laststart > self.config.startsecs:\n                # STARTING -> RUNNING if the proc has started\n                # successfully and it has stayed up for at least\n                # proc.config.startsecs,\n                self.delay = 0\n                self.backoff = 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 648,
                  "startColumn": 27,
                  "endLine": 648,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        name = self.config.name\n        if PY2:\n            name = as_string(name).encode('unicode-escape')\n        return '<Subprocess at %s with name %s in state %s>' % (\n            id(self),\n            name,\n            getProcessStateDescription(self.get_state()))\n",
                    "rendered": {
                      "text": "        name = self.config.name\n        if PY2:\n            name = as_string(name).encode('unicode-escape')\n        return '<Subprocess at %s with name %s in state %s>' % (\n            id(self),\n            name,\n            getProcessStateDescription(self.get_state()))\n",
                      "markdown": "`        name = self.config.name\n        if PY2:\n            name = as_string(name).encode('unicode-escape')\n        return '<Subprocess at %s with name %s in state %s>' % (\n            id(self),\n            name,\n            getProcessStateDescription(self.get_state()))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 639,
                  "startColumn": 9,
                  "endLine": 639,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        return self.config.priority < other.config.priority\n\n    def __eq__(self, other):\n        # sort by priority\n        return self.config.priority == other.config.priority\n\n    def __repr__(self):\n",
                    "rendered": {
                      "text": "        return self.config.priority < other.config.priority\n\n    def __eq__(self, other):\n        # sort by priority\n        return self.config.priority == other.config.priority\n\n    def __repr__(self):\n",
                      "markdown": "`        return self.config.priority < other.config.priority\n\n    def __eq__(self, other):\n        # sort by priority\n        return self.config.priority == other.config.priority\n\n    def __repr__(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 54,
                  "endLine": 595,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            self.backoff = 0\n            self.exitstatus = es\n\n            # if the process was STARTING but a system time change causes\n            # self.laststart to be in the future, the normal STARTING->RUNNING\n            # transition can be subverted so we perform the transition here.\n            if self.state == ProcessStates.STARTING:\n",
                    "rendered": {
                      "text": "            self.backoff = 0\n            self.exitstatus = es\n\n            # if the process was STARTING but a system time change causes\n            # self.laststart to be in the future, the normal STARTING->RUNNING\n            # transition can be subverted so we perform the transition here.\n            if self.state == ProcessStates.STARTING:\n",
                      "markdown": "`            self.backoff = 0\n            self.exitstatus = es\n\n            # if the process was STARTING but a system time change causes\n            # self.laststart to be in the future, the normal STARTING->RUNNING\n            # transition can be subverted so we perform the transition here.\n            if self.state == ProcessStates.STARTING:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 46,
                  "endLine": 555,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        else:\n            too_quickly = False\n            self.config.options.logger.warn(\n                \"process \\'%s\\' (%s) laststart time is in the future, don't \"\n                \"know how long process was running so assuming it did \"\n                \"not exit too quickly\" % (processname, self.pid))\n\n",
                    "rendered": {
                      "text": "        else:\n            too_quickly = False\n            self.config.options.logger.warn(\n                \"process \\'%s\\' (%s) laststart time is in the future, don't \"\n                \"know how long process was running so assuming it did \"\n                \"not exit too quickly\" % (processname, self.pid))\n\n",
                      "markdown": "`        else:\n            too_quickly = False\n            self.config.options.logger.warn(\n                \"process \\'%s\\' (%s) laststart time is in the future, don't \"\n                \"know how long process was running so assuming it did \"\n                \"not exit too quickly\" % (processname, self.pid))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 45,
                  "endLine": 418,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        # If the process is in BACKOFF and we want to stop or kill it, then\n        # BACKOFF -> STOPPED.  This is needed because if startretries is a\n        # large number and the process isn't starting successfully, the stop\n        # request would be blocked for a long time waiting for the retries.\n        if self.state == ProcessStates.BACKOFF:\n            msg = (\"Attempted to kill %s, which is in BACKOFF state.\" %\n                   processname)\n",
                    "rendered": {
                      "text": "        # If the process is in BACKOFF and we want to stop or kill it, then\n        # BACKOFF -> STOPPED.  This is needed because if startretries is a\n        # large number and the process isn't starting successfully, the stop\n        # request would be blocked for a long time waiting for the retries.\n        if self.state == ProcessStates.BACKOFF:\n            msg = (\"Attempted to kill %s, which is in BACKOFF state.\" %\n                   processname)\n",
                      "markdown": "`        # If the process is in BACKOFF and we want to stop or kill it, then\n        # BACKOFF -> STOPPED.  This is needed because if startretries is a\n        # large number and the process isn't starting successfully, the stop\n        # request would be blocked for a long time waiting for the retries.\n        if self.state == ProcessStates.BACKOFF:\n            msg = (\"Attempted to kill %s, which is in BACKOFF state.\" %\n                   processname)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 11,
                  "endLine": 311,
                  "endColumn": 16,
                  "snippet": {
                    "text": "                return # finally clause will exit the child process\n\n            # set environment\n            env = os.environ.copy()\n            env['SUPERVISOR_ENABLED'] = '1'\n            serverurl = self.config.serverurl\n            if serverurl is None: # unset\n",
                    "rendered": {
                      "text": "                return # finally clause will exit the child process\n\n            # set environment\n            env = os.environ.copy()\n            env['SUPERVISOR_ENABLED'] = '1'\n            serverurl = self.config.serverurl\n            if serverurl is None: # unset\n",
                      "markdown": "`                return # finally clause will exit the child process\n\n            # set environment\n            env = os.environ.copy()\n            env['SUPERVISOR_ENABLED'] = '1'\n            serverurl = self.config.serverurl\n            if serverurl is None: # unset\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 34,
                  "endLine": 146,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n        # check_execv_args will raise a ProcessException if the execv\n        # args are bogus, we break it out into a separate options\n        # method call here only to service unit tests\n        self.config.options.check_execv_args(filename, commandargs, st)\n\n        return filename, commandargs\n",
                    "rendered": {
                      "text": "\n        # check_execv_args will raise a ProcessException if the execv\n        # args are bogus, we break it out into a separate options\n        # method call here only to service unit tests\n        self.config.options.check_execv_args(filename, commandargs, st)\n\n        return filename, commandargs\n",
                      "markdown": "`\n        # check_execv_args will raise a ProcessException if the execv\n        # args are bogus, we break it out into a separate options\n        # method call here only to service unit tests\n        self.config.options.check_execv_args(filename, commandargs, st)\n\n        return filename, commandargs\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 64,
                  "endLine": 49,
                  "snippet": {
                    "text": "    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    laststopreport = 0 # Last time \"waiting for x to stop\" logged, to throttle\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if process has been stopped by an admin\n    system_stop = False # true if process has been stopped by the system\n    killing = False # true if we are trying to kill this process\n    backoff = 0 # backoff counter (to startretries)\n",
                    "rendered": {
                      "text": "    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    laststopreport = 0 # Last time \"waiting for x to stop\" logged, to throttle\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if process has been stopped by an admin\n    system_stop = False # true if process has been stopped by the system\n    killing = False # true if we are trying to kill this process\n    backoff = 0 # backoff counter (to startretries)\n",
                      "markdown": "`    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    laststopreport = 0 # Last time \"waiting for x to stop\" logged, to throttle\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if process has been stopped by an admin\n    system_stop = False # true if process has been stopped by the system\n    killing = False # true if we are trying to kill this process\n    backoff = 0 # backoff counter (to startretries)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 29,
                  "endLine": 47,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    event = None # event currently being processed (if we're an event listener)\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    laststopreport = 0 # Last time \"waiting for x to stop\" logged, to throttle\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if process has been stopped by an admin\n    system_stop = False # true if process has been stopped by the system\n",
                    "rendered": {
                      "text": "    event = None # event currently being processed (if we're an event listener)\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    laststopreport = 0 # Last time \"waiting for x to stop\" logged, to throttle\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if process has been stopped by an admin\n    system_stop = False # true if process has been stopped by the system\n",
                      "markdown": "`    event = None # event currently being processed (if we're an event listener)\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    laststopreport = 0 # Last time \"waiting for x to stop\" logged, to throttle\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if process has been stopped by an admin\n    system_stop = False # true if process has been stopped by the system\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 24,
                  "endLine": 46,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    listener_state = None # listener state code (if we're an event listener)\n    event = None # event currently being processed (if we're an event listener)\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    laststopreport = 0 # Last time \"waiting for x to stop\" logged, to throttle\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if process has been stopped by an admin\n",
                    "rendered": {
                      "text": "    listener_state = None # listener state code (if we're an event listener)\n    event = None # event currently being processed (if we're an event listener)\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    laststopreport = 0 # Last time \"waiting for x to stop\" logged, to throttle\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if process has been stopped by an admin\n",
                      "markdown": "`    listener_state = None # listener state code (if we're an event listener)\n    event = None # event currently being processed (if we're an event listener)\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    laststopreport = 0 # Last time \"waiting for x to stop\" logged, to throttle\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if process has been stopped by an admin\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 24,
                  "endLine": 45,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    state = None # process state code\n    listener_state = None # listener state code (if we're an event listener)\n    event = None # event currently being processed (if we're an event listener)\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    laststopreport = 0 # Last time \"waiting for x to stop\" logged, to throttle\n    delay = 0 # If nonzero, delay starting or killing until this time\n",
                    "rendered": {
                      "text": "    state = None # process state code\n    listener_state = None # listener state code (if we're an event listener)\n    event = None # event currently being processed (if we're an event listener)\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    laststopreport = 0 # Last time \"waiting for x to stop\" logged, to throttle\n    delay = 0 # If nonzero, delay starting or killing until this time\n",
                      "markdown": "`    state = None # process state code\n    listener_state = None # listener state code (if we're an event listener)\n    event = None # event currently being processed (if we're an event listener)\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    laststopreport = 0 # Last time \"waiting for x to stop\" logged, to throttle\n    delay = 0 # If nonzero, delay starting or killing until this time\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/process.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 6,
                  "endLine": 7,
                  "snippet": {
                    "text": "import os\nimport signal\nimport shlex\nimport time\nimport traceback\n\nfrom supervisor.compat import maxint\nfrom supervisor.compat import as_bytes\n",
                    "rendered": {
                      "text": "import os\nimport signal\nimport shlex\nimport time\nimport traceback\n\nfrom supervisor.compat import maxint\nfrom supervisor.compat import as_bytes\n",
                      "markdown": "`import os\nimport signal\nimport shlex\nimport time\nimport traceback\n\nfrom supervisor.compat import maxint\nfrom supervisor.compat import as_bytes\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 48,
                  "endLine": 429,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        self.assertEqual(clone.findmeld('honorific').text, None)\n        favoritecolor = clone.findmeld('favorite_color:inputgroup')\n        self.assertEqual(favoritecolor[2].attrib['checked'], 'checked')\n        self.assertEqual(favoritecolor[1].attrib.get('checked'), None)\n\n    def test_replace_removes_all_elements(self):\n        from supervisor.templating import Replace\n",
                    "rendered": {
                      "text": "        self.assertEqual(clone.findmeld('honorific').text, None)\n        favoritecolor = clone.findmeld('favorite_color:inputgroup')\n        self.assertEqual(favoritecolor[2].attrib['checked'], 'checked')\n        self.assertEqual(favoritecolor[1].attrib.get('checked'), None)\n\n    def test_replace_removes_all_elements(self):\n        from supervisor.templating import Replace\n",
                      "markdown": "`        self.assertEqual(clone.findmeld('honorific').text, None)\n        favoritecolor = clone.findmeld('favorite_color:inputgroup')\n        self.assertEqual(favoritecolor[2].attrib['checked'], 'checked')\n        self.assertEqual(favoritecolor[1].attrib.get('checked'), None)\n\n    def test_replace_removes_all_elements(self):\n        from supervisor.templating import Replace\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 41,
                  "endLine": 421,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        self.assertEqual(clone.findmeld('over18').attrib.get('checked'), None)\n        mailok = clone.findmeld('mailok:inputgroup')\n        self.assertEqual(mailok[2].attrib['checked'], 'checked')\n        self.assertEqual(mailok[1].attrib.get('checked'), None)\n\n        clone = root.clone()\n        unfilled = clone.fillmeldhtmlform(**data[2])\n",
                    "rendered": {
                      "text": "        self.assertEqual(clone.findmeld('over18').attrib.get('checked'), None)\n        mailok = clone.findmeld('mailok:inputgroup')\n        self.assertEqual(mailok[2].attrib['checked'], 'checked')\n        self.assertEqual(mailok[1].attrib.get('checked'), None)\n\n        clone = root.clone()\n        unfilled = clone.fillmeldhtmlform(**data[2])\n",
                      "markdown": "`        self.assertEqual(clone.findmeld('over18').attrib.get('checked'), None)\n        mailok = clone.findmeld('mailok:inputgroup')\n        self.assertEqual(mailok[2].attrib['checked'], 'checked')\n        self.assertEqual(mailok[1].attrib.get('checked'), None)\n\n        clone = root.clone()\n        unfilled = clone.fillmeldhtmlform(**data[2])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 56,
                  "endLine": 418,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        clone = root.clone()\n        unfilled = clone.fillmeldhtmlform(**data[1])\n        self.assertEqual(unfilled, ['favorite_color:inputgroup'])\n        self.assertEqual(clone.findmeld('over18').attrib.get('checked'), None)\n        mailok = clone.findmeld('mailok:inputgroup')\n        self.assertEqual(mailok[2].attrib['checked'], 'checked')\n        self.assertEqual(mailok[1].attrib.get('checked'), None)\n",
                    "rendered": {
                      "text": "        clone = root.clone()\n        unfilled = clone.fillmeldhtmlform(**data[1])\n        self.assertEqual(unfilled, ['favorite_color:inputgroup'])\n        self.assertEqual(clone.findmeld('over18').attrib.get('checked'), None)\n        mailok = clone.findmeld('mailok:inputgroup')\n        self.assertEqual(mailok[2].attrib['checked'], 'checked')\n        self.assertEqual(mailok[1].attrib.get('checked'), None)\n",
                      "markdown": "`        clone = root.clone()\n        unfilled = clone.fillmeldhtmlform(**data[1])\n        self.assertEqual(unfilled, ['favorite_color:inputgroup'])\n        self.assertEqual(clone.findmeld('over18').attrib.get('checked'), None)\n        mailok = clone.findmeld('mailok:inputgroup')\n        self.assertEqual(mailok[2].attrib['checked'], 'checked')\n        self.assertEqual(mailok[1].attrib.get('checked'), None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 1444,
                  "startColumn": 33,
                  "endLine": 1444,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        # that escaped entities are handled properly in script tags by\n        # XML-aware browsers at\n        # http://sourceforge.net/mailarchive/message.php?msg_id=10835582\n        # but I haven't tested it at all.  ZPT does not seem to do\n        # this; it outputs unescaped data.\n        root = self._parse(_COMPLEX_XHTML)\n        actual = self._write_xhtml(root)\n",
                    "rendered": {
                      "text": "        # that escaped entities are handled properly in script tags by\n        # XML-aware browsers at\n        # http://sourceforge.net/mailarchive/message.php?msg_id=10835582\n        # but I haven't tested it at all.  ZPT does not seem to do\n        # this; it outputs unescaped data.\n        root = self._parse(_COMPLEX_XHTML)\n        actual = self._write_xhtml(root)\n",
                      "markdown": "`        # that escaped entities are handled properly in script tags by\n        # XML-aware browsers at\n        # http://sourceforge.net/mailarchive/message.php?msg_id=10835582\n        # but I haven't tested it at all.  ZPT does not seem to do\n        # this; it outputs unescaped data.\n        root = self._parse(_COMPLEX_XHTML)\n        actual = self._write_xhtml(root)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 1442,
                  "startColumn": 28,
                  "endLine": 1443,
                  "snippet": {
                    "text": "        # I'm not entirely sure if the cdata \"script\" quoting in this\n        # test is entirely correct for XHTML.  Ryan Tomayko suggests\n        # that escaped entities are handled properly in script tags by\n        # XML-aware browsers at\n        # http://sourceforge.net/mailarchive/message.php?msg_id=10835582\n        # but I haven't tested it at all.  ZPT does not seem to do\n        # this; it outputs unescaped data.\n        root = self._parse(_COMPLEX_XHTML)\n",
                    "rendered": {
                      "text": "        # I'm not entirely sure if the cdata \"script\" quoting in this\n        # test is entirely correct for XHTML.  Ryan Tomayko suggests\n        # that escaped entities are handled properly in script tags by\n        # XML-aware browsers at\n        # http://sourceforge.net/mailarchive/message.php?msg_id=10835582\n        # but I haven't tested it at all.  ZPT does not seem to do\n        # this; it outputs unescaped data.\n        root = self._parse(_COMPLEX_XHTML)\n",
                      "markdown": "`        # I'm not entirely sure if the cdata \"script\" quoting in this\n        # test is entirely correct for XHTML.  Ryan Tomayko suggests\n        # that escaped entities are handled properly in script tags by\n        # XML-aware browsers at\n        # http://sourceforge.net/mailarchive/message.php?msg_id=10835582\n        # but I haven't tested it at all.  ZPT does not seem to do\n        # this; it outputs unescaped data.\n        root = self._parse(_COMPLEX_XHTML)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 33,
                  "endLine": 298,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t<tr>\n\t  <th></th>\n\t  <td>\n\t    <input type=\"submit\" value=\" Update \" name=\"edit:method\" />\n\t  </td>\n\t</tr>\n\n",
                    "rendered": {
                      "text": "\t<tr>\n\t  <th></th>\n\t  <td>\n\t    <input type=\"submit\" value=\" Update \" name=\"edit:method\" />\n\t  </td>\n\t</tr>\n\n",
                      "markdown": "`\t<tr>\n\t  <th></th>\n\t  <td>\n\t    <input type=\"submit\" value=\" Update \" name=\"edit:method\" />\n\t  </td>\n\t</tr>\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 12,
                  "endLine": 5,
                  "endColumn": 16,
                  "snippet": {
                    "text": "# (https://pypi.org/project/meld3/2.0.0/).  The meld3 package is not\n# called out separately in Supervisor's license or copyright files\n# because meld3 had the same authors, copyright, and license as\n# Supervisor at the time this file was bundled with Supervisor.\n\nimport unittest\nimport re\n",
                    "rendered": {
                      "text": "# (https://pypi.org/project/meld3/2.0.0/).  The meld3 package is not\n# called out separately in Supervisor's license or copyright files\n# because meld3 had the same authors, copyright, and license as\n# Supervisor at the time this file was bundled with Supervisor.\n\nimport unittest\nimport re\n",
                      "markdown": "`# (https://pypi.org/project/meld3/2.0.0/).  The meld3 package is not\n# called out separately in Supervisor's license or copyright files\n# because meld3 had the same authors, copyright, and license as\n# Supervisor at the time this file was bundled with Supervisor.\n\nimport unittest\nimport re\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 1441,
                  "startColumn": 55,
                  "endLine": 1441,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    def test_write_complex_xhtml_as_xhtml(self):\n        # I'm not entirely sure if the cdata \"script\" quoting in this\n        # test is entirely correct for XHTML.  Ryan Tomayko suggests\n        # that escaped entities are handled properly in script tags by\n        # XML-aware browsers at\n        # http://sourceforge.net/mailarchive/message.php?msg_id=10835582\n        # but I haven't tested it at all.  ZPT does not seem to do\n",
                    "rendered": {
                      "text": "    def test_write_complex_xhtml_as_xhtml(self):\n        # I'm not entirely sure if the cdata \"script\" quoting in this\n        # test is entirely correct for XHTML.  Ryan Tomayko suggests\n        # that escaped entities are handled properly in script tags by\n        # XML-aware browsers at\n        # http://sourceforge.net/mailarchive/message.php?msg_id=10835582\n        # but I haven't tested it at all.  ZPT does not seem to do\n",
                      "markdown": "`    def test_write_complex_xhtml_as_xhtml(self):\n        # I'm not entirely sure if the cdata \"script\" quoting in this\n        # test is entirely correct for XHTML.  Ryan Tomayko suggests\n        # that escaped entities are handled properly in script tags by\n        # XML-aware browsers at\n        # http://sourceforge.net/mailarchive/message.php?msg_id=10835582\n        # but I haven't tested it at all.  ZPT does not seem to do\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 1229,
                  "startColumn": 7,
                  "endLine": 1229,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        self.assertEqual(root.tag, 'html')\n        self.assertEqual(root.attrib, {})\n        self.assertEqual(root.parent, None)\n        head = root[0]\n        self.assertEqual(head.tag, 'head')\n        self.assertEqual(head.attrib, {})\n        self.assertEqual(head.parent, root)\n",
                    "rendered": {
                      "text": "        self.assertEqual(root.tag, 'html')\n        self.assertEqual(root.attrib, {})\n        self.assertEqual(root.parent, None)\n        head = root[0]\n        self.assertEqual(head.tag, 'head')\n        self.assertEqual(head.attrib, {})\n        self.assertEqual(head.parent, root)\n",
                      "markdown": "`        self.assertEqual(root.tag, 'html')\n        self.assertEqual(root.attrib, {})\n        self.assertEqual(root.parent, None)\n        head = root[0]\n        self.assertEqual(head.tag, 'head')\n        self.assertEqual(head.attrib, {})\n        self.assertEqual(head.parent, root)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 1155,
                  "startColumn": 7,
                  "endLine": 1155,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        self.assertEqual(root.tag, xhtml_ns % 'html')\n        self.assertEqual(root.attrib, {})\n        self.assertEqual(root.parent, None)\n        head = root[0]\n        self.assertEqual(head.tag, xhtml_ns % 'head')\n        self.assertEqual(head.attrib, {})\n        self.assertEqual(head.parent, root)\n",
                    "rendered": {
                      "text": "        self.assertEqual(root.tag, xhtml_ns % 'html')\n        self.assertEqual(root.attrib, {})\n        self.assertEqual(root.parent, None)\n        head = root[0]\n        self.assertEqual(head.tag, xhtml_ns % 'head')\n        self.assertEqual(head.attrib, {})\n        self.assertEqual(head.parent, root)\n",
                      "markdown": "`        self.assertEqual(root.tag, xhtml_ns % 'html')\n        self.assertEqual(root.attrib, {})\n        self.assertEqual(root.parent, None)\n        head = root[0]\n        self.assertEqual(head.tag, xhtml_ns % 'head')\n        self.assertEqual(head.attrib, {})\n        self.assertEqual(head.parent, root)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 852,
                  "startColumn": 7,
                  "endLine": 852,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        clone.append(title)\n\n        # unreduced\n        diff = root.diffmeld(clone)\n        changes = diff['unreduced']\n        addedtags = [ x.attrib[_MELD_ID] for x in changes['added'] ]\n        removedtags = [x.attrib[_MELD_ID] for x in changes['removed'] ]\n",
                    "rendered": {
                      "text": "        clone.append(title)\n\n        # unreduced\n        diff = root.diffmeld(clone)\n        changes = diff['unreduced']\n        addedtags = [ x.attrib[_MELD_ID] for x in changes['added'] ]\n        removedtags = [x.attrib[_MELD_ID] for x in changes['removed'] ]\n",
                      "markdown": "`        clone.append(title)\n\n        # unreduced\n        diff = root.diffmeld(clone)\n        changes = diff['unreduced']\n        addedtags = [ x.attrib[_MELD_ID] for x in changes['added'] ]\n        removedtags = [x.attrib[_MELD_ID] for x in changes['removed'] ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 11,
                  "endLine": 285,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n\t  <th>Favorite Color (Radio)</th>\n          <td style=\"width: 554px;\" meld:id=\"favorite_color:inputgroup\">\n            Red   <input type=\"radio\" name=\"favorite_color\"\n                         value=\"Red\"/>\n            Green <input type=\"radio\" name=\"favorite_color\"\n                         value=\"Green\"/>\n",
                    "rendered": {
                      "text": "\n\t  <th>Favorite Color (Radio)</th>\n          <td style=\"width: 554px;\" meld:id=\"favorite_color:inputgroup\">\n            Red   <input type=\"radio\" name=\"favorite_color\"\n                         value=\"Red\"/>\n            Green <input type=\"radio\" name=\"favorite_color\"\n                         value=\"Green\"/>\n",
                      "markdown": "`\n\t  <th>Favorite Color (Radio)</th>\n          <td style=\"width: 554px;\" meld:id=\"favorite_color:inputgroup\">\n            Red   <input type=\"radio\" name=\"favorite_color\"\n                         value=\"Red\"/>\n            Green <input type=\"radio\" name=\"favorite_color\"\n                         value=\"Green\"/>\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_templating.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 19,
                  "endLine": 5,
                  "endColumn": 25,
                  "snippet": {
                    "text": "# (https://pypi.org/project/meld3/2.0.0/).  The meld3 package is not\n# called out separately in Supervisor's license or copyright files\n# because meld3 had the same authors, copyright, and license as\n# Supervisor at the time this file was bundled with Supervisor.\n\nimport unittest\nimport re\n",
                    "rendered": {
                      "text": "# (https://pypi.org/project/meld3/2.0.0/).  The meld3 package is not\n# called out separately in Supervisor's license or copyright files\n# because meld3 had the same authors, copyright, and license as\n# Supervisor at the time this file was bundled with Supervisor.\n\nimport unittest\nimport re\n",
                      "markdown": "`# (https://pypi.org/project/meld3/2.0.0/).  The meld3 package is not\n# called out separately in Supervisor's license or copyright files\n# because meld3 had the same authors, copyright, and license as\n# Supervisor at the time this file was bundled with Supervisor.\n\nimport unittest\nimport re\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_supervisord.py"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 24,
                  "endLine": 362,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        supervisord.add_process_group(group1)\n        supervisord.add_process_group(group2)\n\n        # diffing should find that group2 has been removed\n        supervisord.options.process_group_configs = [group1]\n        added, changed, removed = supervisord.diff_to_active()\n        self.assertEqual(added, [])\n",
                    "rendered": {
                      "text": "        supervisord.add_process_group(group1)\n        supervisord.add_process_group(group2)\n\n        # diffing should find that group2 has been removed\n        supervisord.options.process_group_configs = [group1]\n        added, changed, removed = supervisord.diff_to_active()\n        self.assertEqual(added, [])\n",
                      "markdown": "`        supervisord.add_process_group(group1)\n        supervisord.add_process_group(group2)\n\n        # diffing should find that group2 has been removed\n        supervisord.options.process_group_configs = [group1]\n        added, changed, removed = supervisord.diff_to_active()\n        self.assertEqual(added, [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_supervisord.py"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 24,
                  "endLine": 340,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        group1 = DummyPGroupConfig(options, 'group1', pconfigs=[pconfig])\n\n        # the active configuration has no groups\n        # diffing should find that group1 has been added\n        supervisord.options.process_group_configs = [group1]\n        added, changed, removed = supervisord.diff_to_active()\n        self.assertEqual(added, [group1])\n",
                    "rendered": {
                      "text": "        group1 = DummyPGroupConfig(options, 'group1', pconfigs=[pconfig])\n\n        # the active configuration has no groups\n        # diffing should find that group1 has been added\n        supervisord.options.process_group_configs = [group1]\n        added, changed, removed = supervisord.diff_to_active()\n        self.assertEqual(added, [group1])\n",
                      "markdown": "`        group1 = DummyPGroupConfig(options, 'group1', pconfigs=[pconfig])\n\n        # the active configuration has no groups\n        # diffing should find that group1 has been added\n        supervisord.options.process_group_configs = [group1]\n        added, changed, removed = supervisord.diff_to_active()\n        self.assertEqual(added, [group1])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_supervisord.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 6,
                  "endLine": 3,
                  "snippet": {
                    "text": "import unittest\nimport time\nimport signal\nimport sys\nimport os\nimport tempfile\n",
                    "rendered": {
                      "text": "import unittest\nimport time\nimport signal\nimport sys\nimport os\nimport tempfile\n",
                      "markdown": "`import unittest\nimport time\nimport signal\nimport sys\nimport os\nimport tempfile\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/fixtures/unkillable_spew.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 6,
                  "endLine": 3,
                  "snippet": {
                    "text": "#!<<PYTHON>>\nimport time\nimport signal\nsignal.signal(signal.SIGTERM, signal.SIG_IGN)\n\ncounter = 0\n",
                    "rendered": {
                      "text": "#!<<PYTHON>>\nimport time\nimport signal\nsignal.signal(signal.SIGTERM, signal.SIG_IGN)\n\ncounter = 0\n",
                      "markdown": "`#!<<PYTHON>>\nimport time\nimport signal\nsignal.signal(signal.SIGTERM, signal.SIG_IGN)\n\ncounter = 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/fixtures/test_1231.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 6,
                  "endLine": 6,
                  "snippet": {
                    "text": "import logging\nimport random\nimport sys\nimport time\n\ndef main():\n    logging.basicConfig(level=logging.INFO, stream=sys.stdout,\n                        format='%(levelname)s [%(asctime)s] %(message)s',\n",
                    "rendered": {
                      "text": "import logging\nimport random\nimport sys\nimport time\n\ndef main():\n    logging.basicConfig(level=logging.INFO, stream=sys.stdout,\n                        format='%(levelname)s [%(asctime)s] %(message)s',\n",
                      "markdown": "`import logging\nimport random\nimport sys\nimport time\n\ndef main():\n    logging.basicConfig(level=logging.INFO, stream=sys.stdout,\n                        format='%(levelname)s [%(asctime)s] %(message)s',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 1299,
                  "startColumn": 31,
                  "endLine": 1299,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    namespace_uri, tag = tag[1:].split(\"}\", 1)\n    prefix = namespaces.get(namespace_uri)\n    if prefix is None:\n        prefix = _namespace_map.get(namespace_uri)\n        if prefix is None:\n            prefix = \"ns%d\" % len(namespaces)\n        namespaces[namespace_uri] = prefix\n",
                    "rendered": {
                      "text": "    namespace_uri, tag = tag[1:].split(\"}\", 1)\n    prefix = namespaces.get(namespace_uri)\n    if prefix is None:\n        prefix = _namespace_map.get(namespace_uri)\n        if prefix is None:\n            prefix = \"ns%d\" % len(namespaces)\n        namespaces[namespace_uri] = prefix\n",
                      "markdown": "`    namespace_uri, tag = tag[1:].split(\"}\", 1)\n    prefix = namespaces.get(namespace_uri)\n    if prefix is None:\n        prefix = _namespace_map.get(namespace_uri)\n        if prefix is None:\n            prefix = \"ns%d\" % len(namespaces)\n        namespaces[namespace_uri] = prefix\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 1297,
                  "startColumn": 23,
                  "endLine": 1297,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    if isinstance(tag, QName):\n        tag = tag.text\n    namespace_uri, tag = tag[1:].split(\"}\", 1)\n    prefix = namespaces.get(namespace_uri)\n    if prefix is None:\n        prefix = _namespace_map.get(namespace_uri)\n        if prefix is None:\n",
                    "rendered": {
                      "text": "    if isinstance(tag, QName):\n        tag = tag.text\n    namespace_uri, tag = tag[1:].split(\"}\", 1)\n    prefix = namespaces.get(namespace_uri)\n    if prefix is None:\n        prefix = _namespace_map.get(namespace_uri)\n        if prefix is None:\n",
                      "markdown": "`    if isinstance(tag, QName):\n        tag = tag.text\n    namespace_uri, tag = tag[1:].split(\"}\", 1)\n    prefix = namespaces.get(namespace_uri)\n    if prefix is None:\n        prefix = _namespace_map.get(namespace_uri)\n        if prefix is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 1281,
                  "startColumn": 30,
                  "endLine": 1281,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        out = []\n        append = out.append\n        for char in m.group():\n            text = _escape_map.get(char)\n            if text is None:\n                text = \"&#%d;\" % ord(char)\n            append(text)\n",
                    "rendered": {
                      "text": "        out = []\n        append = out.append\n        for char in m.group():\n            text = _escape_map.get(char)\n            if text is None:\n                text = \"&#%d;\" % ord(char)\n            append(text)\n",
                      "markdown": "`        out = []\n        append = out.append\n        for char in m.group():\n            text = _escape_map.get(char)\n            if text is None:\n                text = \"&#%d;\" % ord(char)\n            append(text)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 1226,
                  "startColumn": 31,
                  "endLine": 1226,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            yield element\n    for child in element._children:\n        for el2 in melditerator(child, meldid):\n            nodeid = el2.attrib.get(_MELD_ID)\n            if nodeid is not None:\n                if meldid is None or nodeid == meldid:\n                    yield el2\n",
                    "rendered": {
                      "text": "            yield element\n    for child in element._children:\n        for el2 in melditerator(child, meldid):\n            nodeid = el2.attrib.get(_MELD_ID)\n            if nodeid is not None:\n                if meldid is None or nodeid == meldid:\n                    yield el2\n",
                      "markdown": "`            yield element\n    for child in element._children:\n        for el2 in melditerator(child, meldid):\n            nodeid = el2.attrib.get(_MELD_ID)\n            if nodeid is not None:\n                if meldid is None or nodeid == meldid:\n                    yield el2\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 1220,
                  "startColumn": 27,
                  "endLine": 1220,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    return L\n\ndef melditerator(element, meldid=None, _MELD_ID=_MELD_ID):\n    nodeid = element.attrib.get(_MELD_ID)\n    if nodeid is not None:\n        if meldid is None or nodeid == meldid:\n            yield element\n",
                    "rendered": {
                      "text": "    return L\n\ndef melditerator(element, meldid=None, _MELD_ID=_MELD_ID):\n    nodeid = element.attrib.get(_MELD_ID)\n    if nodeid is not None:\n        if meldid is None or nodeid == meldid:\n            yield element\n",
                      "markdown": "`    return L\n\ndef melditerator(element, meldid=None, _MELD_ID=_MELD_ID):\n    nodeid = element.attrib.get(_MELD_ID)\n    if nodeid is not None:\n        if meldid is None or nodeid == meldid:\n            yield element\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 830,
                  "startColumn": 42,
                  "endLine": 830,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        self.builder.data(unichr(char))\n\n    def handle_entityref(self, name):\n        entity = htmlentitydefs.entitydefs.get(name)\n        if entity:\n            if len(entity) == 1:\n                entity = ord(entity)\n",
                    "rendered": {
                      "text": "        self.builder.data(unichr(char))\n\n    def handle_entityref(self, name):\n        entity = htmlentitydefs.entitydefs.get(name)\n        if entity:\n            if len(entity) == 1:\n                entity = ord(entity)\n",
                      "markdown": "`        self.builder.data(unichr(char))\n\n    def handle_entityref(self, name):\n        entity = htmlentitydefs.entitydefs.get(name)\n        if entity:\n            if len(entity) == 1:\n                entity = ord(entity)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 35,
                  "endLine": 802,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            for k, v in attrs:\n                if k == _MELD_SHORT_ID:\n                    k = _MELD_ID\n                    if self.meldids.get(v):\n                        raise ValueError('Repeated meld id \"%s\" in source' %\n                                         v)\n                    self.meldids[v] = 1\n",
                    "rendered": {
                      "text": "            for k, v in attrs:\n                if k == _MELD_SHORT_ID:\n                    k = _MELD_ID\n                    if self.meldids.get(v):\n                        raise ValueError('Repeated meld id \"%s\" in source' %\n                                         v)\n                    self.meldids[v] = 1\n",
                      "markdown": "`            for k, v in attrs:\n                if k == _MELD_SHORT_ID:\n                    k = _MELD_ID\n                    if self.meldids.get(v):\n                        raise ValueError('Repeated meld id \"%s\" in source' %\n                                         v)\n                    self.meldids[v] = 1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 717,
                  "startColumn": 26,
                  "endLine": 717,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                'reduced':reduced}\n\n    def meldid(self):\n        return self.attrib.get(_MELD_ID)\n\n    def lineage(self):\n        L = []\n",
                    "rendered": {
                      "text": "                'reduced':reduced}\n\n    def meldid(self):\n        return self.attrib.get(_MELD_ID)\n\n    def lineage(self):\n        L = []\n",
                      "markdown": "`                'reduced':reduced}\n\n    def meldid(self):\n        return self.attrib.get(_MELD_ID)\n\n    def lineage(self):\n        L = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 38,
                  "endLine": 463,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        iterator = helper.getiterator(self)\n        elements = []\n        for element in iterator:\n            attribval = element.attrib.get(attrib)\n            if attribval is not None:\n                if value is None:\n                    elements.append(element)\n",
                    "rendered": {
                      "text": "        iterator = helper.getiterator(self)\n        elements = []\n        for element in iterator:\n            attribval = element.attrib.get(attrib)\n            if attribval is not None:\n                if value is None:\n                    elements.append(element)\n",
                      "markdown": "`        iterator = helper.getiterator(self)\n        elements = []\n        for element in iterator:\n            attribval = element.attrib.get(attrib)\n            if attribval is not None:\n                if value is None:\n                    elements.append(element)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 40,
                  "endLine": 420,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                    unfound = []\n\n                    for option in node.findall('option'):\n                        if option.attrib.get('value', '') == val:\n                            found.append(option)\n                        else:\n                            unfound.append(option)\n",
                    "rendered": {
                      "text": "                    unfound = []\n\n                    for option in node.findall('option'):\n                        if option.attrib.get('value', '') == val:\n                            found.append(option)\n                        else:\n                            unfound.append(option)\n",
                      "markdown": "`                    unfound = []\n\n                    for option in node.findall('option'):\n                        if option.attrib.get('value', '') == val:\n                            found.append(option)\n                        else:\n                            unfound.append(option)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 44,
                  "endLine": 391,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n                if tag == 'input':\n\n                    input_type = node.attrib.get('type', 'text').lower()\n\n                    # fill in value attrib for most input types\n                    if input_type in ('hidden', 'submit', 'text',\n",
                    "rendered": {
                      "text": "\n                if tag == 'input':\n\n                    input_type = node.attrib.get('type', 'text').lower()\n\n                    # fill in value attrib for most input types\n                    if input_type in ('hidden', 'submit', 'text',\n",
                      "markdown": "`\n                if tag == 'input':\n\n                    input_type = node.attrib.get('type', 'text').lower()\n\n                    # fill in value attrib for most input types\n                    if input_type in ('hidden', 'submit', 'text',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 44,
                  "endLine": 367,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                    if input_type not in ('checkbox', 'radio'):\n                        continue\n\n                    input_val = child.attrib.get('value', '')\n\n                    if val == input_val:\n                        found.append(child)\n",
                    "rendered": {
                      "text": "                    if input_type not in ('checkbox', 'radio'):\n                        continue\n\n                    input_val = child.attrib.get('value', '')\n\n                    if val == input_val:\n                        found.append(child)\n",
                      "markdown": "`                    if input_type not in ('checkbox', 'radio'):\n                        continue\n\n                    input_val = child.attrib.get('value', '')\n\n                    if val == input_val:\n                        found.append(child)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 45,
                  "endLine": 363,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                unfound = []\n\n                for child in node.findall('input'):\n                    input_type = child.attrib.get('type', '').lower()\n                    if input_type not in ('checkbox', 'radio'):\n                        continue\n\n",
                    "rendered": {
                      "text": "                unfound = []\n\n                for child in node.findall('input'):\n                    input_type = child.attrib.get('type', '').lower()\n                    if input_type not in ('checkbox', 'radio'):\n                        continue\n\n",
                      "markdown": "`                unfound = []\n\n                for child in node.findall('input'):\n                    input_type = child.attrib.get('type', '').lower()\n                    if input_type not in ('checkbox', 'radio'):\n                        continue\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 26,
                  "endLine": 206,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        self.text = self.tail = None\n\n    def get(self, key, default=None):\n        return self.attrib.get(key, default)\n\n    def set(self, key, value):\n        self.attrib[key] = value\n",
                    "rendered": {
                      "text": "        self.text = self.tail = None\n\n    def get(self, key, default=None):\n        return self.attrib.get(key, default)\n\n    def set(self, key, value):\n        self.attrib[key] = value\n",
                      "markdown": "`        self.text = self.tail = None\n\n    def get(self, key, default=None):\n        return self.attrib.get(key, default)\n\n    def set(self, key, value):\n        self.attrib[key] = value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 32,
                  "endLine": 77,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    def findmeld(self, node, name, default=None):\n        iterator = self.getiterator(node)\n        for element in iterator:\n            val = element.attrib.get(_MELD_ID)\n            if val == name:\n                return element\n        return default\n",
                    "rendered": {
                      "text": "    def findmeld(self, node, name, default=None):\n        iterator = self.getiterator(node)\n        for element in iterator:\n            val = element.attrib.get(_MELD_ID)\n            if val == name:\n                return element\n        return default\n",
                      "markdown": "`    def findmeld(self, node, name, default=None):\n        iterator = self.getiterator(node)\n        for element in iterator:\n            val = element.attrib.get(_MELD_ID)\n            if val == name:\n                return element\n        return default\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 39,
                  "endLine": 395,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n                    # fill in value attrib for most input types\n                    if input_type in ('hidden', 'submit', 'text',\n                                      'password', 'reset', 'file'):\n                        node.attrib['value'] = val\n\n                    # unless it's a checkbox or radio attribute, then we\n",
                    "rendered": {
                      "text": "\n                    # fill in value attrib for most input types\n                    if input_type in ('hidden', 'submit', 'text',\n                                      'password', 'reset', 'file'):\n                        node.attrib['value'] = val\n\n                    # unless it's a checkbox or radio attribute, then we\n",
                      "markdown": "`\n                    # fill in value attrib for most input types\n                    if input_type in ('hidden', 'submit', 'text',\n                                      'password', 'reset', 'file'):\n                        node.attrib['value'] = val\n\n                    # unless it's a checkbox or radio attribute, then we\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 57,
                  "endLine": 314,
                  "endColumn": 65,
                  "snippet": {
                    "text": "          dictionary value, this key is treated as 'unfilled'.\n\n          If the found element is an 'input type=text', 'input\n          type=hidden', 'input type=submit', 'input type=password',\n          'input type=reset' or 'input type=file' element, replace its\n          'value' attribute with the value.\n\n",
                    "rendered": {
                      "text": "          dictionary value, this key is treated as 'unfilled'.\n\n          If the found element is an 'input type=text', 'input\n          type=hidden', 'input type=submit', 'input type=password',\n          'input type=reset' or 'input type=file' element, replace its\n          'value' attribute with the value.\n\n",
                      "markdown": "`          dictionary value, this key is treated as 'unfilled'.\n\n          If the found element is an 'input type=text', 'input\n          type=hidden', 'input type=submit', 'input type=password',\n          'input type=reset' or 'input type=file' element, replace its\n          'value' attribute with the value.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 56,
                  "endLine": 523,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    def content(self, text, structure=False):\n        \"\"\" Delete this node's children and append a Replace node that\n        contains text.  Always return None.  Pass the 'structure' flag\n        to the replace node so it can do the right thing at render\n        time.\"\"\"\n        helper.content(self, text, structure)\n\n",
                    "rendered": {
                      "text": "    def content(self, text, structure=False):\n        \"\"\" Delete this node's children and append a Replace node that\n        contains text.  Always return None.  Pass the 'structure' flag\n        to the replace node so it can do the right thing at render\n        time.\"\"\"\n        helper.content(self, text, structure)\n\n",
                      "markdown": "`    def content(self, text, structure=False):\n        \"\"\" Delete this node's children and append a Replace node that\n        contains text.  Always return None.  Pass the 'structure' flag\n        to the replace node so it can do the right thing at render\n        time.\"\"\"\n        helper.content(self, text, structure)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 13,
                  "endLine": 510,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        the text 'text' and return the index of our position in\n        our parent.  If we have no parent, do nothing, and return None.\n        Pass the 'structure' flag to the replace node so it can do the right\n        thing at render time. \"\"\"\n        parent = self.parent\n        i = self.deparent()\n        if i is not None:\n",
                    "rendered": {
                      "text": "        the text 'text' and return the index of our position in\n        our parent.  If we have no parent, do nothing, and return None.\n        Pass the 'structure' flag to the replace node so it can do the right\n        thing at render time. \"\"\"\n        parent = self.parent\n        i = self.deparent()\n        if i is not None:\n",
                      "markdown": "`        the text 'text' and return the index of our position in\n        our parent.  If we have no parent, do nothing, and return None.\n        Pass the 'structure' flag to the replace node so it can do the right\n        thing at render time. \"\"\"\n        parent = self.parent\n        i = self.deparent()\n        if i is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 31,
                  "endLine": 177,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        self._children = []\n\n    def __repr__(self):\n        return \"<MeldElement %s at %x>\" % (self.tag, id(self))\n\n    def __len__(self):\n        return len(self._children)\n",
                    "rendered": {
                      "text": "        self._children = []\n\n    def __repr__(self):\n        return \"<MeldElement %s at %x>\" % (self.tag, id(self))\n\n    def __len__(self):\n        return len(self._children)\n",
                      "markdown": "`        self._children = []\n\n    def __repr__(self):\n        return \"<MeldElement %s at %x>\" % (self.tag, id(self))\n\n    def __len__(self):\n        return len(self._children)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 12,
                  "endLine": 5,
                  "endColumn": 16,
                  "snippet": {
                    "text": "# (https://pypi.org/project/meld3/2.0.0/).  The meld3 package is not\n# called out separately in Supervisor's license or copyright files\n# because meld3 had the same authors, copyright, and license as\n# Supervisor at the time this file was bundled with Supervisor.\n\nimport email\nimport re\n",
                    "rendered": {
                      "text": "# (https://pypi.org/project/meld3/2.0.0/).  The meld3 package is not\n# called out separately in Supervisor's license or copyright files\n# because meld3 had the same authors, copyright, and license as\n# Supervisor at the time this file was bundled with Supervisor.\n\nimport email\nimport re\n",
                      "markdown": "`# (https://pypi.org/project/meld3/2.0.0/).  The meld3 package is not\n# called out separately in Supervisor's license or copyright files\n# because meld3 had the same authors, copyright, and license as\n# Supervisor at the time this file was bundled with Supervisor.\n\nimport email\nimport re\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 914,
                  "startColumn": 3,
                  "endLine": 914,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    tag  = node.tag\n    tail = node.tail\n    text = node.text\n    tail = node.tail\n\n    to_write = _BLANK\n\n",
                    "rendered": {
                      "text": "    tag  = node.tag\n    tail = node.tail\n    text = node.text\n    tail = node.tail\n\n    to_write = _BLANK\n\n",
                      "markdown": "`    tag  = node.tag\n    tail = node.tail\n    text = node.text\n    tail = node.tail\n\n    to_write = _BLANK\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 912,
                  "startColumn": 3,
                  "endLine": 912,
                  "endColumn": 9,
                  "snippet": {
                    "text": "        encoding = 'utf-8'\n\n    tag  = node.tag\n    tail = node.tail\n    text = node.text\n    tail = node.tail\n\n",
                    "rendered": {
                      "text": "        encoding = 'utf-8'\n\n    tag  = node.tag\n    tail = node.tail\n    text = node.text\n    tail = node.tail\n\n",
                      "markdown": "`        encoding = 'utf-8'\n\n    tag  = node.tag\n    tail = node.tail\n    text = node.text\n    tail = node.tail\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 58,
                  "endLine": 673,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        return _BLANK.join(data)\n\n    def diffmeld(self, other):\n        \"\"\" Compute the meld element differences from this node (the\n        source) to 'other' (the target).  Return a dictionary of\n        sequences in the form {'unreduced:\n               {'added':[], 'removed':[], 'moved':[]},\n",
                    "rendered": {
                      "text": "        return _BLANK.join(data)\n\n    def diffmeld(self, other):\n        \"\"\" Compute the meld element differences from this node (the\n        source) to 'other' (the target).  Return a dictionary of\n        sequences in the form {'unreduced:\n               {'added':[], 'removed':[], 'moved':[]},\n",
                      "markdown": "`        return _BLANK.join(data)\n\n    def diffmeld(self, other):\n        \"\"\" Compute the meld element differences from this node (the\n        source) to 'other' (the target).  Return a dictionary of\n        sequences in the form {'unreduced:\n               {'added':[], 'removed':[], 'moved':[]},\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 662,
                  "startColumn": 29,
                  "endLine": 662,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            return i\n\n    def parentindex(self):\n        \"\"\" Return the parent node index in which we live \"\"\"\n        parent = self.parent\n        if parent is not None:\n            return parent._children.index(self)\n",
                    "rendered": {
                      "text": "            return i\n\n    def parentindex(self):\n        \"\"\" Return the parent node index in which we live \"\"\"\n        parent = self.parent\n        if parent is not None:\n            return parent._children.index(self)\n",
                      "markdown": "`            return i\n\n    def parentindex(self):\n        \"\"\" Return the parent node index in which we live \"\"\"\n        parent = self.parent\n        if parent is not None:\n            return parent._children.index(self)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 44,
                  "endLine": 654,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        return helper.bfclone(self, parent)\n\n    def deparent(self):\n        \"\"\" Remove ourselves from our parent node (de-parent) and return\n        the index of the parent which was deleted. \"\"\"\n        i = self.parentindex()\n        if i is not None:\n",
                    "rendered": {
                      "text": "        return helper.bfclone(self, parent)\n\n    def deparent(self):\n        \"\"\" Remove ourselves from our parent node (de-parent) and return\n        the index of the parent which was deleted. \"\"\"\n        i = self.parentindex()\n        if i is not None:\n",
                      "markdown": "`        return helper.bfclone(self, parent)\n\n    def deparent(self):\n        \"\"\" Remove ourselves from our parent node (de-parent) and return\n        the index of the parent which was deleted. \"\"\"\n        i = self.parentindex()\n        if i is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 633,
                  "startColumn": 69,
                  "endLine": 633,
                  "endColumn": 75,
                  "snippet": {
                    "text": "        doctype     - 3-tuple indicating name, pubid, system of doctype.\n                      The default is the value of doctype.xhtml (XHTML\n                      'loose').\n        fragment    - True if a 'fragment' should be emitted for this node (no\n                      declaration, no doctype).  This causes both the\n                      'declaration' and 'doctype' parameters to be ignored.\n        declaration - emit an xml declaration header (including an encoding\n",
                    "rendered": {
                      "text": "        doctype     - 3-tuple indicating name, pubid, system of doctype.\n                      The default is the value of doctype.xhtml (XHTML\n                      'loose').\n        fragment    - True if a 'fragment' should be emitted for this node (no\n                      declaration, no doctype).  This causes both the\n                      'declaration' and 'doctype' parameters to be ignored.\n        declaration - emit an xml declaration header (including an encoding\n",
                      "markdown": "`        doctype     - 3-tuple indicating name, pubid, system of doctype.\n                      The default is the value of doctype.xhtml (XHTML\n                      'loose').\n        fragment    - True if a 'fragment' should be emitted for this node (no\n                      declaration, no doctype).  This causes both the\n                      'declaration' and 'doctype' parameters to be ignored.\n        declaration - emit an xml declaration header (including an encoding\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 69,
                  "endLine": 558,
                  "endColumn": 75,
                  "snippet": {
                    "text": "                      Must be a recognizable Python encoding type.\n        doctype     - 3-tuple indicating name, pubid, system of doctype.\n                      The default is to prevent a doctype from being emitted.\n        fragment    - True if a 'fragment' should be emitted for this node (no\n                      declaration, no doctype).  This causes both the\n                      'declaration' and 'doctype' parameters to become ignored\n                      if provided.\n",
                    "rendered": {
                      "text": "                      Must be a recognizable Python encoding type.\n        doctype     - 3-tuple indicating name, pubid, system of doctype.\n                      The default is to prevent a doctype from being emitted.\n        fragment    - True if a 'fragment' should be emitted for this node (no\n                      declaration, no doctype).  This causes both the\n                      'declaration' and 'doctype' parameters to become ignored\n                      if provided.\n",
                      "markdown": "`                      Must be a recognizable Python encoding type.\n        doctype     - 3-tuple indicating name, pubid, system of doctype.\n                      The default is to prevent a doctype from being emitted.\n        fragment    - True if a 'fragment' should be emitted for this node (no\n                      declaration, no doctype).  This causes both the\n                      'declaration' and 'doctype' parameters to become ignored\n                      if provided.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 22,
                  "endLine": 523,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    def content(self, text, structure=False):\n        \"\"\" Delete this node's children and append a Replace node that\n        contains text.  Always return None.  Pass the 'structure' flag\n        to the replace node so it can do the right thing at render\n        time.\"\"\"\n        helper.content(self, text, structure)\n\n",
                    "rendered": {
                      "text": "    def content(self, text, structure=False):\n        \"\"\" Delete this node's children and append a Replace node that\n        contains text.  Always return None.  Pass the 'structure' flag\n        to the replace node so it can do the right thing at render\n        time.\"\"\"\n        helper.content(self, text, structure)\n\n",
                      "markdown": "`    def content(self, text, structure=False):\n        \"\"\" Delete this node's children and append a Replace node that\n        contains text.  Always return None.  Pass the 'structure' flag\n        to the replace node so it can do the right thing at render\n        time.\"\"\"\n        helper.content(self, text, structure)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 60,
                  "endLine": 521,
                  "endColumn": 66,
                  "snippet": {
                    "text": "            return i\n\n    def content(self, text, structure=False):\n        \"\"\" Delete this node's children and append a Replace node that\n        contains text.  Always return None.  Pass the 'structure' flag\n        to the replace node so it can do the right thing at render\n        time.\"\"\"\n",
                    "rendered": {
                      "text": "            return i\n\n    def content(self, text, structure=False):\n        \"\"\" Delete this node's children and append a Replace node that\n        contains text.  Always return None.  Pass the 'structure' flag\n        to the replace node so it can do the right thing at render\n        time.\"\"\"\n",
                      "markdown": "`            return i\n\n    def content(self, text, structure=False):\n        \"\"\" Delete this node's children and append a Replace node that\n        contains text.  Always return None.  Pass the 'structure' flag\n        to the replace node so it can do the right thing at render\n        time.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 11,
                  "endLine": 515,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        i = self.deparent()\n        if i is not None:\n            # reduce function call overhead by not calling self.insert\n            node = Replace(text, structure)\n            parent._children.insert(i, node)\n            node.parent = parent\n            return i\n",
                    "rendered": {
                      "text": "        i = self.deparent()\n        if i is not None:\n            # reduce function call overhead by not calling self.insert\n            node = Replace(text, structure)\n            parent._children.insert(i, node)\n            node.parent = parent\n            return i\n",
                      "markdown": "`        i = self.deparent()\n        if i is not None:\n            # reduce function call overhead by not calling self.insert\n            node = Replace(text, structure)\n            parent._children.insert(i, node)\n            node.parent = parent\n            return i\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 48,
                  "endLine": 509,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        \"\"\" Replace this element with a Replace node in our parent with\n        the text 'text' and return the index of our position in\n        our parent.  If we have no parent, do nothing, and return None.\n        Pass the 'structure' flag to the replace node so it can do the right\n        thing at render time. \"\"\"\n        parent = self.parent\n        i = self.deparent()\n",
                    "rendered": {
                      "text": "        \"\"\" Replace this element with a Replace node in our parent with\n        the text 'text' and return the index of our position in\n        our parent.  If we have no parent, do nothing, and return None.\n        Pass the 'structure' flag to the replace node so it can do the right\n        thing at render time. \"\"\"\n        parent = self.parent\n        i = self.deparent()\n",
                      "markdown": "`        \"\"\" Replace this element with a Replace node in our parent with\n        the text 'text' and return the index of our position in\n        our parent.  If we have no parent, do nothing, and return None.\n        Pass the 'structure' flag to the replace node so it can do the right\n        thing at render time. \"\"\"\n        parent = self.parent\n        i = self.deparent()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 47,
                  "endLine": 506,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        return L\n\n    def replace(self, text, structure=False):\n        \"\"\" Replace this element with a Replace node in our parent with\n        the text 'text' and return the index of our position in\n        our parent.  If we have no parent, do nothing, and return None.\n        Pass the 'structure' flag to the replace node so it can do the right\n",
                    "rendered": {
                      "text": "        return L\n\n    def replace(self, text, structure=False):\n        \"\"\" Replace this element with a Replace node in our parent with\n        the text 'text' and return the index of our position in\n        our parent.  If we have no parent, do nothing, and return None.\n        Pass the 'structure' flag to the replace node so it can do the right\n",
                      "markdown": "`        return L\n\n    def replace(self, text, structure=False):\n        \"\"\" Replace this element with a Replace node in our parent with\n        the text 'text' and return the index of our position in\n        our parent.  If we have no parent, do nothing, and return None.\n        Pass the 'structure' flag to the replace node so it can do the right\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 35,
                  "endLine": 476,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    def repeat(self, iterable, childname=None):\n        \"\"\"repeats an element with values from an iterable.  If\n        'childname' is not None, repeat the element on which the\n        repeat is called, otherwise find the child element with a\n        'meld:id' matching 'childname' and repeat that.  The element\n        is repeated within its parent element (nodes that are created\n        as a result of a repeat share the same parent).  This method\n",
                    "rendered": {
                      "text": "    def repeat(self, iterable, childname=None):\n        \"\"\"repeats an element with values from an iterable.  If\n        'childname' is not None, repeat the element on which the\n        repeat is called, otherwise find the child element with a\n        'meld:id' matching 'childname' and repeat that.  The element\n        is repeated within its parent element (nodes that are created\n        as a result of a repeat share the same parent).  This method\n",
                      "markdown": "`    def repeat(self, iterable, childname=None):\n        \"\"\"repeats an element with values from an iterable.  If\n        'childname' is not None, repeat the element on which the\n        repeat is called, otherwise find the child element with a\n        'meld:id' matching 'childname' and repeat that.  The element\n        is repeated within its parent element (nodes that are created\n        as a result of a repeat share the same parent).  This method\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 11,
                  "endLine": 456,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        return self.findwithattrib(_MELD_ID)\n\n    def findwithattrib(self, attrib, value=None):\n        \"\"\" Find all nodes that have an attribute named 'attrib'.  If\n        'value' is not None, omit nodes on which the attribute value\n        does not compare equally to 'value'. Return the found nodes in\n        a list.\"\"\"\n",
                    "rendered": {
                      "text": "        return self.findwithattrib(_MELD_ID)\n\n    def findwithattrib(self, attrib, value=None):\n        \"\"\" Find all nodes that have an attribute named 'attrib'.  If\n        'value' is not None, omit nodes on which the attribute value\n        does not compare equally to 'value'. Return the found nodes in\n        a list.\"\"\"\n",
                      "markdown": "`        return self.findwithattrib(_MELD_ID)\n\n    def findwithattrib(self, attrib, value=None):\n        \"\"\" Find all nodes that have an attribute named 'attrib'.  If\n        'value' is not None, omit nodes on which the attribute value\n        does not compare equally to 'value'. Return the found nodes in\n        a list.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 11,
                  "endLine": 451,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        return result\n\n    def findmelds(self):\n        \"\"\" Find all nodes that have a meld id attribute and return\n        the found nodes in a list\"\"\"\n        return self.findwithattrib(_MELD_ID)\n\n",
                    "rendered": {
                      "text": "        return result\n\n    def findmelds(self):\n        \"\"\" Find all nodes that have a meld id attribute and return\n        the found nodes in a list\"\"\"\n        return self.findwithattrib(_MELD_ID)\n\n",
                      "markdown": "`        return result\n\n    def findmelds(self):\n        \"\"\" Find all nodes that have a meld id attribute and return\n        the found nodes in a list\"\"\"\n        return self.findwithattrib(_MELD_ID)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 40,
                  "endLine": 442,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    def findmeld(self, name, default=None):\n        \"\"\" Find a node in the tree that has a 'meld id' corresponding\n        to 'name'. Iterate over all subnodes recursively looking for a\n        node which matches.  If we can't find the node, return None.\"\"\"\n        # this could be faster if we indexed all the meld nodes in the\n        # tree; we just walk the whole hierarchy now.\n        result = helper.findmeld(self, name)\n",
                    "rendered": {
                      "text": "    def findmeld(self, name, default=None):\n        \"\"\" Find a node in the tree that has a 'meld id' corresponding\n        to 'name'. Iterate over all subnodes recursively looking for a\n        node which matches.  If we can't find the node, return None.\"\"\"\n        # this could be faster if we indexed all the meld nodes in the\n        # tree; we just walk the whole hierarchy now.\n        result = helper.findmeld(self, name)\n",
                      "markdown": "`    def findmeld(self, name, default=None):\n        \"\"\" Find a node in the tree that has a 'meld id' corresponding\n        to 'name'. Iterate over all subnodes recursively looking for a\n        node which matches.  If we can't find the node, return None.\"\"\"\n        # this could be faster if we indexed all the meld nodes in the\n        # tree; we just walk the whole hierarchy now.\n        result = helper.findmeld(self, name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 7,
                  "endLine": 442,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    def findmeld(self, name, default=None):\n        \"\"\" Find a node in the tree that has a 'meld id' corresponding\n        to 'name'. Iterate over all subnodes recursively looking for a\n        node which matches.  If we can't find the node, return None.\"\"\"\n        # this could be faster if we indexed all the meld nodes in the\n        # tree; we just walk the whole hierarchy now.\n        result = helper.findmeld(self, name)\n",
                    "rendered": {
                      "text": "    def findmeld(self, name, default=None):\n        \"\"\" Find a node in the tree that has a 'meld id' corresponding\n        to 'name'. Iterate over all subnodes recursively looking for a\n        node which matches.  If we can't find the node, return None.\"\"\"\n        # this could be faster if we indexed all the meld nodes in the\n        # tree; we just walk the whole hierarchy now.\n        result = helper.findmeld(self, name)\n",
                      "markdown": "`    def findmeld(self, name, default=None):\n        \"\"\" Find a node in the tree that has a 'meld id' corresponding\n        to 'name'. Iterate over all subnodes recursively looking for a\n        node which matches.  If we can't find the node, return None.\"\"\"\n        # this could be faster if we indexed all the meld nodes in the\n        # tree; we just walk the whole hierarchy now.\n        result = helper.findmeld(self, name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 18,
                  "endLine": 440,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        return unfilled\n\n    def findmeld(self, name, default=None):\n        \"\"\" Find a node in the tree that has a 'meld id' corresponding\n        to 'name'. Iterate over all subnodes recursively looking for a\n        node which matches.  If we can't find the node, return None.\"\"\"\n        # this could be faster if we indexed all the meld nodes in the\n",
                    "rendered": {
                      "text": "        return unfilled\n\n    def findmeld(self, name, default=None):\n        \"\"\" Find a node in the tree that has a 'meld id' corresponding\n        to 'name'. Iterate over all subnodes recursively looking for a\n        node which matches.  If we can't find the node, return None.\"\"\"\n        # this could be faster if we indexed all the meld nodes in the\n",
                      "markdown": "`        return unfilled\n\n    def findmeld(self, name, default=None):\n        \"\"\" Find a node in the tree that has a 'meld id' corresponding\n        to 'name'. Iterate over all subnodes recursively looking for a\n        node which matches.  If we can't find the node, return None.\"\"\"\n        # this could be faster if we indexed all the meld nodes in the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 11,
                  "endLine": 440,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        return unfilled\n\n    def findmeld(self, name, default=None):\n        \"\"\" Find a node in the tree that has a 'meld id' corresponding\n        to 'name'. Iterate over all subnodes recursively looking for a\n        node which matches.  If we can't find the node, return None.\"\"\"\n        # this could be faster if we indexed all the meld nodes in the\n",
                    "rendered": {
                      "text": "        return unfilled\n\n    def findmeld(self, name, default=None):\n        \"\"\" Find a node in the tree that has a 'meld id' corresponding\n        to 'name'. Iterate over all subnodes recursively looking for a\n        node which matches.  If we can't find the node, return None.\"\"\"\n        # this could be faster if we indexed all the meld nodes in the\n",
                      "markdown": "`        return unfilled\n\n    def findmeld(self, name, default=None):\n        \"\"\" Find a node in the tree that has a 'meld id' corresponding\n        to 'name'. Iterate over all subnodes recursively looking for a\n        node which matches.  If we can't find the node, return None.\"\"\"\n        # this could be faster if we indexed all the meld nodes in the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 28,
                  "endLine": 413,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                        unfilled.append(k)\n\n                elif tag == 'select':\n                    # if the node is a select node, we want to select\n                    # the value matching val, otherwise it's unfilled\n\n                    found = []\n",
                    "rendered": {
                      "text": "                        unfilled.append(k)\n\n                elif tag == 'select':\n                    # if the node is a select node, we want to select\n                    # the value matching val, otherwise it's unfilled\n\n                    found = []\n",
                      "markdown": "`                        unfilled.append(k)\n\n                elif tag == 'select':\n                    # if the node is a select node, we want to select\n                    # the value matching val, otherwise it's unfilled\n\n                    found = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 14,
                  "endLine": 348,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        for k in kw:\n            node = self.findmeld(k)\n\n            if node is None:\n                unfilled.append(k)\n                continue\n\n",
                    "rendered": {
                      "text": "        for k in kw:\n            node = self.findmeld(k)\n\n            if node is None:\n                unfilled.append(k)\n                continue\n\n",
                      "markdown": "`        for k in kw:\n            node = self.findmeld(k)\n\n            if node is None:\n                unfilled.append(k)\n                continue\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 11,
                  "endLine": 346,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        unfilled = []\n\n        for k in kw:\n            node = self.findmeld(k)\n\n            if node is None:\n                unfilled.append(k)\n",
                    "rendered": {
                      "text": "        unfilled = []\n\n        for k in kw:\n            node = self.findmeld(k)\n\n            if node is None:\n                unfilled.append(k)\n",
                      "markdown": "`        unfilled = []\n\n        for k in kw:\n            node = self.findmeld(k)\n\n            if node is None:\n                unfilled.append(k)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 14,
                  "endLine": 289,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        unfilled = []\n        for k in kw:\n            node = self.findmeld(k)\n            if node is None:\n                unfilled.append(k)\n            else:\n                node.text = kw[k]\n",
                    "rendered": {
                      "text": "        unfilled = []\n        for k in kw:\n            node = self.findmeld(k)\n            if node is None:\n                unfilled.append(k)\n            else:\n                node.text = kw[k]\n",
                      "markdown": "`        unfilled = []\n        for k in kw:\n            node = self.findmeld(k)\n            if node is None:\n                unfilled.append(k)\n            else:\n                node.text = kw[k]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 11,
                  "endLine": 288,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        Never raises an exception. \"\"\"\n        unfilled = []\n        for k in kw:\n            node = self.findmeld(k)\n            if node is None:\n                unfilled.append(k)\n            else:\n",
                    "rendered": {
                      "text": "        Never raises an exception. \"\"\"\n        unfilled = []\n        for k in kw:\n            node = self.findmeld(k)\n            if node is None:\n                unfilled.append(k)\n            else:\n",
                      "markdown": "`        Never raises an exception. \"\"\"\n        unfilled = []\n        for k in kw:\n            node = self.findmeld(k)\n            if node is None:\n                unfilled.append(k)\n            else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 62,
                  "endLine": 283,
                  "snippet": {
                    "text": "    def fillmelds(self, **kw):\n        \"\"\" Fill in the text values of meld nodes in tree using the\n        keyword arguments passed in; use the keyword keys as meld ids\n        and the keyword values as text that should fill in the node\n        text on which that meld id is found.  Return a list of keys\n        from **kw that were not able to be found anywhere in the tree.\n        Never raises an exception. \"\"\"\n        unfilled = []\n",
                    "rendered": {
                      "text": "    def fillmelds(self, **kw):\n        \"\"\" Fill in the text values of meld nodes in tree using the\n        keyword arguments passed in; use the keyword keys as meld ids\n        and the keyword values as text that should fill in the node\n        text on which that meld id is found.  Return a list of keys\n        from **kw that were not able to be found anywhere in the tree.\n        Never raises an exception. \"\"\"\n        unfilled = []\n",
                      "markdown": "`    def fillmelds(self, **kw):\n        \"\"\" Fill in the text values of meld nodes in tree using the\n        keyword arguments passed in; use the keyword keys as meld ids\n        and the keyword values as text that should fill in the node\n        text on which that meld id is found.  Return a list of keys\n        from **kw that were not able to be found anywhere in the tree.\n        Never raises an exception. \"\"\"\n        unfilled = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 3,
                  "endLine": 167,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    parent = None\n    attrib = None\n    text   = None\n    tail   = None\n    structure = None\n\n    # overrides to reduce MRU lookups\n",
                    "rendered": {
                      "text": "    parent = None\n    attrib = None\n    text   = None\n    tail   = None\n    structure = None\n\n    # overrides to reduce MRU lookups\n",
                      "markdown": "`    parent = None\n    attrib = None\n    text   = None\n    tail   = None\n    structure = None\n\n    # overrides to reduce MRU lookups\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 28,
                  "endLine": 134,
                  "snippet": {
                    "text": "    def content(self, node, text, structure=False):\n        node.text = None\n        replacenode = Replace(text, structure)\n        replacenode.parent = node\n        replacenode.text = text\n        replacenode.structure = structure\n        node._children = [replacenode]\n\n",
                    "rendered": {
                      "text": "    def content(self, node, text, structure=False):\n        node.text = None\n        replacenode = Replace(text, structure)\n        replacenode.parent = node\n        replacenode.text = text\n        replacenode.structure = structure\n        node._children = [replacenode]\n\n",
                      "markdown": "`    def content(self, node, text, structure=False):\n        node.text = None\n        replacenode = Replace(text, structure)\n        replacenode.parent = node\n        replacenode.text = text\n        replacenode.structure = structure\n        node._children = [replacenode]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 11,
                  "endLine": 97,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n    def _bfclone(self, nodes, parent):\n        L = []\n        for node in nodes:\n            element = _MeldElementInterface(node.tag, node.attrib.copy())\n            element.parent = parent\n            element.text = node.text\n",
                    "rendered": {
                      "text": "\n    def _bfclone(self, nodes, parent):\n        L = []\n        for node in nodes:\n            element = _MeldElementInterface(node.tag, node.attrib.copy())\n            element.parent = parent\n            element.text = node.text\n",
                      "markdown": "`\n    def _bfclone(self, nodes, parent):\n        L = []\n        for node in nodes:\n            element = _MeldElementInterface(node.tag, node.attrib.copy())\n            element.parent = parent\n            element.text = node.text\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/templating.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 19,
                  "endLine": 5,
                  "endColumn": 25,
                  "snippet": {
                    "text": "# (https://pypi.org/project/meld3/2.0.0/).  The meld3 package is not\n# called out separately in Supervisor's license or copyright files\n# because meld3 had the same authors, copyright, and license as\n# Supervisor at the time this file was bundled with Supervisor.\n\nimport email\nimport re\n",
                    "rendered": {
                      "text": "# (https://pypi.org/project/meld3/2.0.0/).  The meld3 package is not\n# called out separately in Supervisor's license or copyright files\n# because meld3 had the same authors, copyright, and license as\n# Supervisor at the time this file was bundled with Supervisor.\n\nimport email\nimport re\n",
                      "markdown": "`# (https://pypi.org/project/meld3/2.0.0/).  The meld3 package is not\n# called out separately in Supervisor's license or copyright files\n# because meld3 had the same authors, copyright, and license as\n# Supervisor at the time this file was bundled with Supervisor.\n\nimport email\nimport re\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/states.py"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 40,
                  "endLine": 48,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    UNKNOWN = 40 # the event listener is in an unknown state\n\ndef getEventListenerStateDescription(code):\n    return _eventlistener_states_by_code.get(code)\n\n\n# below is an optimization for internal use in this module only\n",
                    "rendered": {
                      "text": "    UNKNOWN = 40 # the event listener is in an unknown state\n\ndef getEventListenerStateDescription(code):\n    return _eventlistener_states_by_code.get(code)\n\n\n# below is an optimization for internal use in this module only\n",
                      "markdown": "`    UNKNOWN = 40 # the event listener is in an unknown state\n\ndef getEventListenerStateDescription(code):\n    return _eventlistener_states_by_code.get(code)\n\n\n# below is an optimization for internal use in this module only\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/states.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 37,
                  "endLine": 38,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    SHUTDOWN = -1\n\ndef getSupervisorStateDescription(code):\n    return _supervisor_states_by_code.get(code)\n\n\nclass EventListenerStates:\n",
                    "rendered": {
                      "text": "    SHUTDOWN = -1\n\ndef getSupervisorStateDescription(code):\n    return _supervisor_states_by_code.get(code)\n\n\nclass EventListenerStates:\n",
                      "markdown": "`    SHUTDOWN = -1\n\ndef getSupervisorStateDescription(code):\n    return _supervisor_states_by_code.get(code)\n\n\nclass EventListenerStates:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/states.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 34,
                  "endLine": 28,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                     ProcessStates.STOPPING)\n\ndef getProcessStateDescription(code):\n    return _process_states_by_code.get(code)\n\n\nclass SupervisorStates:\n",
                    "rendered": {
                      "text": "                     ProcessStates.STOPPING)\n\ndef getProcessStateDescription(code):\n    return _process_states_by_code.get(code)\n\n\nclass SupervisorStates:\n",
                      "markdown": "`                     ProcessStates.STOPPING)\n\ndef getProcessStateDescription(code):\n    return _process_states_by_code.get(code)\n\n\nclass SupervisorStates:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/poller.py"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 19,
                  "endLine": 65,
                  "snippet": {
                    "text": "            r, w, x = self._select.select(\n                self.readables,\n                self.writables,\n                [], timeout\n                )\n        except select.error as err:\n            if err.args[0] == errno.EINTR:\n                self.options.logger.blather('EINTR encountered in poll')\n",
                    "rendered": {
                      "text": "            r, w, x = self._select.select(\n                self.readables,\n                self.writables,\n                [], timeout\n                )\n        except select.error as err:\n            if err.args[0] == errno.EINTR:\n                self.options.logger.blather('EINTR encountered in poll')\n",
                      "markdown": "`            r, w, x = self._select.select(\n                self.readables,\n                self.writables,\n                [], timeout\n                )\n        except select.error as err:\n            if err.args[0] == errno.EINTR:\n                self.options.logger.blather('EINTR encountered in poll')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 732,
                  "startColumn": 33,
                  "endLine": 732,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            request.error(404) # not found\n            return\n\n        process = group.processes.get(process_name)\n        if process is None:\n            request.error(404) # not found\n            return\n",
                    "rendered": {
                      "text": "            request.error(404) # not found\n            return\n\n        process = group.processes.get(process_name)\n        if process is None:\n            request.error(404) # not found\n            return\n",
                      "markdown": "`            request.error(404) # not found\n            return\n\n        process = group.processes.get(process_name)\n        if process is None:\n            request.error(404) # not found\n            return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 727,
                  "startColumn": 47,
                  "endLine": 727,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        from supervisor.options import split_namespec\n        group_name, process_name = split_namespec(process_name)\n\n        group = self.supervisord.process_groups.get(group_name)\n        if group is None:\n            request.error(404) # not found\n            return\n",
                    "rendered": {
                      "text": "        from supervisor.options import split_namespec\n        group_name, process_name = split_namespec(process_name)\n\n        group = self.supervisord.process_groups.get(group_name)\n        if group is None:\n            request.error(404) # not found\n            return\n",
                      "markdown": "`        from supervisor.options import split_namespec\n        group_name, process_name = split_namespec(process_name)\n\n        group = self.supervisord.process_groups.get(group_name)\n        if group is None:\n            request.error(404) # not found\n            return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 19,
                  "endLine": 310,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        default_port={'http': '80', 'https': '443'}\n        environ = self.cgi_environment()\n        if (environ.get('HTTPS') in ('on', 'ON') or\n            environ.get('SERVER_PORT_SECURE') == \"1\"):\n            # XXX this will currently never be true\n            protocol = 'https'\n        else:\n",
                    "rendered": {
                      "text": "        default_port={'http': '80', 'https': '443'}\n        environ = self.cgi_environment()\n        if (environ.get('HTTPS') in ('on', 'ON') or\n            environ.get('SERVER_PORT_SECURE') == \"1\"):\n            # XXX this will currently never be true\n            protocol = 'https'\n        else:\n",
                      "markdown": "`        default_port={'http': '80', 'https': '443'}\n        environ = self.cgi_environment()\n        if (environ.get('HTTPS') in ('on', 'ON') or\n            environ.get('SERVER_PORT_SECURE') == \"1\"):\n            # XXX this will currently never be true\n            protocol = 'https'\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 19,
                  "endLine": 309,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        \"\"\"\n        default_port={'http': '80', 'https': '443'}\n        environ = self.cgi_environment()\n        if (environ.get('HTTPS') in ('on', 'ON') or\n            environ.get('SERVER_PORT_SECURE') == \"1\"):\n            # XXX this will currently never be true\n            protocol = 'https'\n",
                    "rendered": {
                      "text": "        \"\"\"\n        default_port={'http': '80', 'https': '443'}\n        environ = self.cgi_environment()\n        if (environ.get('HTTPS') in ('on', 'ON') or\n            environ.get('SERVER_PORT_SECURE') == \"1\"):\n            # XXX this will currently never be true\n            protocol = 'https'\n",
                      "markdown": "`        \"\"\"\n        default_port={'http': '80', 'https': '443'}\n        environ = self.cgi_environment()\n        if (environ.get('HTTPS') in ('on', 'ON') or\n            environ.get('SERVER_PORT_SECURE') == \"1\"):\n            # XXX this will currently never be true\n            protocol = 'https'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 30,
                  "endLine": 296,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            key=key.lower()\n            value=value.strip()\n            if key in header2env and value:\n                env[header2env.get(key)]=value\n            else:\n                key='HTTP_%s' % (\"_\".join(key.split( \"-\"))).upper()\n                if value and key not in env:\n",
                    "rendered": {
                      "text": "            key=key.lower()\n            value=value.strip()\n            if key in header2env and value:\n                env[header2env.get(key)]=value\n            else:\n                key='HTTP_%s' % (\"_\".join(key.split( \"-\"))).upper()\n                if value and key not in env:\n",
                      "markdown": "`            key=key.lower()\n            value=value.strip()\n            if key in header2env and value:\n                env[header2env.get(key)]=value\n            else:\n                key='HTTP_%s' % (\"_\".join(key.split( \"-\"))).upper()\n                if value and key not in env:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 42,
                  "endLine": 896,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n        else:\n            return False\n\n",
                    "rendered": {
                      "text": "                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n        else:\n            return False\n\n",
                      "markdown": "`                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n        else:\n            return False\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 30,
                  "endLine": 896,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n        else:\n            return False\n\n",
                    "rendered": {
                      "text": "                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n        else:\n            return False\n\n",
                      "markdown": "`                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n        else:\n            return False\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 46,
                  "endLine": 894,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n        else:\n",
                    "rendered": {
                      "text": "            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n        else:\n",
                      "markdown": "`            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 30,
                  "endLine": 894,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n        else:\n",
                    "rendered": {
                      "text": "            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n        else:\n",
                      "markdown": "`            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 46,
                  "endLine": 893,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n",
                    "rendered": {
                      "text": "        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n",
                      "markdown": "`        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 16,
                  "endLine": 893,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n",
                    "rendered": {
                      "text": "        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n",
                      "markdown": "`        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n                return stored_password == password\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 22,
                  "endLine": 892,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        username, password = auth_info\n        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n",
                    "rendered": {
                      "text": "        username, password = auth_info\n        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n",
                      "markdown": "`        username, password = auth_info\n        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n            else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 891,
                  "startColumn": 19,
                  "endLine": 891,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    def authorize(self, auth_info):\n        username, password = auth_info\n        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n",
                    "rendered": {
                      "text": "    def authorize(self, auth_info):\n        username, password = auth_info\n        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n",
                      "markdown": "`    def authorize(self, auth_info):\n        username, password = auth_info\n        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n                password_hash = sha1(as_bytes(password)).hexdigest()\n                return stored_password[5:] == password_hash\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 18,
                  "endLine": 889,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        self.dict = dict\n\n    def authorize(self, auth_info):\n        username, password = auth_info\n        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n",
                    "rendered": {
                      "text": "        self.dict = dict\n\n    def authorize(self, auth_info):\n        username, password = auth_info\n        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n",
                      "markdown": "`        self.dict = dict\n\n    def authorize(self, auth_info):\n        username, password = auth_info\n        if username in self.dict:\n            stored_password = self.dict[username]\n            if stored_password.startswith('{SHA}'):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 30,
                  "endLine": 846,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        if username:\n            # wrap the xmlrpc handler and tailhandler in an authentication\n            # handler\n            users = {username:password}\n            xmlrpchandler = supervisor_auth_handler(users, xmlrpchandler)\n            tailhandler = supervisor_auth_handler(users, tailhandler)\n            maintailhandler = supervisor_auth_handler(users, maintailhandler)\n",
                    "rendered": {
                      "text": "        if username:\n            # wrap the xmlrpc handler and tailhandler in an authentication\n            # handler\n            users = {username:password}\n            xmlrpchandler = supervisor_auth_handler(users, xmlrpchandler)\n            tailhandler = supervisor_auth_handler(users, tailhandler)\n            maintailhandler = supervisor_auth_handler(users, maintailhandler)\n",
                      "markdown": "`        if username:\n            # wrap the xmlrpc handler and tailhandler in an authentication\n            # handler\n            users = {username:password}\n            xmlrpchandler = supervisor_auth_handler(users, xmlrpchandler)\n            tailhandler = supervisor_auth_handler(users, tailhandler)\n            maintailhandler = supervisor_auth_handler(users, maintailhandler)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 841,
                  "startColumn": 27,
                  "endLine": 841,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        defaulthandler = default_handler.default_handler(filesystem)\n\n        username = config['username']\n        password = config['password']\n\n        if username:\n            # wrap the xmlrpc handler and tailhandler in an authentication\n",
                    "rendered": {
                      "text": "        defaulthandler = default_handler.default_handler(filesystem)\n\n        username = config['username']\n        password = config['password']\n\n        if username:\n            # wrap the xmlrpc handler and tailhandler in an authentication\n",
                      "markdown": "`        defaulthandler = default_handler.default_handler(filesystem)\n\n        username = config['username']\n        password = config['password']\n\n        if username:\n            # wrap the xmlrpc handler and tailhandler in an authentication\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 841,
                  "startColumn": 8,
                  "endLine": 841,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        defaulthandler = default_handler.default_handler(filesystem)\n\n        username = config['username']\n        password = config['password']\n\n        if username:\n            # wrap the xmlrpc handler and tailhandler in an authentication\n",
                    "rendered": {
                      "text": "        defaulthandler = default_handler.default_handler(filesystem)\n\n        username = config['username']\n        password = config['password']\n\n        if username:\n            # wrap the xmlrpc handler and tailhandler in an authentication\n",
                      "markdown": "`        defaulthandler = default_handler.default_handler(filesystem)\n\n        username = config['username']\n        password = config['password']\n\n        if username:\n            # wrap the xmlrpc handler and tailhandler in an authentication\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 12,
                  "endLine": 310,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        default_port={'http': '80', 'https': '443'}\n        environ = self.cgi_environment()\n        if (environ.get('HTTPS') in ('on', 'ON') or\n            environ.get('SERVER_PORT_SECURE') == \"1\"):\n            # XXX this will currently never be true\n            protocol = 'https'\n        else:\n",
                    "rendered": {
                      "text": "        default_port={'http': '80', 'https': '443'}\n        environ = self.cgi_environment()\n        if (environ.get('HTTPS') in ('on', 'ON') or\n            environ.get('SERVER_PORT_SECURE') == \"1\"):\n            # XXX this will currently never be true\n            protocol = 'https'\n        else:\n",
                      "markdown": "`        default_port={'http': '80', 'https': '443'}\n        environ = self.cgi_environment()\n        if (environ.get('HTTPS') in ('on', 'ON') or\n            environ.get('SERVER_PORT_SECURE') == \"1\"):\n            # XXX this will currently never be true\n            protocol = 'https'\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 12,
                  "endLine": 309,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        \"\"\"\n        default_port={'http': '80', 'https': '443'}\n        environ = self.cgi_environment()\n        if (environ.get('HTTPS') in ('on', 'ON') or\n            environ.get('SERVER_PORT_SECURE') == \"1\"):\n            # XXX this will currently never be true\n            protocol = 'https'\n",
                    "rendered": {
                      "text": "        \"\"\"\n        default_port={'http': '80', 'https': '443'}\n        environ = self.cgi_environment()\n        if (environ.get('HTTPS') in ('on', 'ON') or\n            environ.get('SERVER_PORT_SECURE') == \"1\"):\n            # XXX this will currently never be true\n            protocol = 'https'\n",
                      "markdown": "`        \"\"\"\n        default_port={'http': '80', 'https': '443'}\n        environ = self.cgi_environment()\n        if (environ.get('HTTPS') in ('on', 'ON') or\n            environ.get('SERVER_PORT_SECURE') == \"1\"):\n            # XXX this will currently never be true\n            protocol = 'https'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 16,
                  "endLine": 296,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            key=key.lower()\n            value=value.strip()\n            if key in header2env and value:\n                env[header2env.get(key)]=value\n            else:\n                key='HTTP_%s' % (\"_\".join(key.split( \"-\"))).upper()\n                if value and key not in env:\n",
                    "rendered": {
                      "text": "            key=key.lower()\n            value=value.strip()\n            if key in header2env and value:\n                env[header2env.get(key)]=value\n            else:\n                key='HTTP_%s' % (\"_\".join(key.split( \"-\"))).upper()\n                if value and key not in env:\n",
                      "markdown": "`            key=key.lower()\n            value=value.strip()\n            if key in header2env and value:\n                env[header2env.get(key)]=value\n            else:\n                key='HTTP_%s' % (\"_\".join(key.split( \"-\"))).upper()\n                if value and key not in env:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 69,
                  "endLine": 547,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.postbind()\n\n",
                    "rendered": {
                      "text": "            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.postbind()\n\n",
                      "markdown": "`            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.postbind()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 22,
                  "endLine": 542,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                    'please try setting an explicit IP address in the \"port\" '\n                    'setting of your [inet_http_server] section.  For example, '\n                    'instead of \"port = 9001\", try \"port = 127.0.0.1:9001.\"'\n                    % hostname)\n        try:\n            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n",
                    "rendered": {
                      "text": "                    'please try setting an explicit IP address in the \"port\" '\n                    'setting of your [inet_http_server] section.  For example, '\n                    'instead of \"port = 9001\", try \"port = 127.0.0.1:9001.\"'\n                    % hostname)\n        try:\n            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n",
                      "markdown": "`                    'please try setting an explicit IP address in the \"port\" '\n                    'setting of your [inet_http_server] section.  For example, '\n                    'instead of \"port = 9001\", try \"port = 127.0.0.1:9001.\"'\n                    % hostname)\n        try:\n            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 538,
                  "startColumn": 56,
                  "endLine": 538,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                ip = socket.gethostbyname(hostname)\n            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n                    'please try setting an explicit IP address in the \"port\" '\n                    'setting of your [inet_http_server] section.  For example, '\n                    'instead of \"port = 9001\", try \"port = 127.0.0.1:9001.\"'\n",
                    "rendered": {
                      "text": "                ip = socket.gethostbyname(hostname)\n            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n                    'please try setting an explicit IP address in the \"port\" '\n                    'setting of your [inet_http_server] section.  For example, '\n                    'instead of \"port = 9001\", try \"port = 127.0.0.1:9001.\"'\n",
                      "markdown": "`                ip = socket.gethostbyname(hostname)\n            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n                    'please try setting an explicit IP address in the \"port\" '\n                    'setting of your [inet_http_server] section.  For example, '\n                    'instead of \"port = 9001\", try \"port = 127.0.0.1:9001.\"'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 42,
                  "endLine": 535,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            self.log_info('Computing default hostname', 'warning')\n            hostname = socket.gethostname()\n            try:\n                ip = socket.gethostbyname(hostname)\n            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n",
                    "rendered": {
                      "text": "            self.log_info('Computing default hostname', 'warning')\n            hostname = socket.gethostname()\n            try:\n                ip = socket.gethostbyname(hostname)\n            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n",
                      "markdown": "`            self.log_info('Computing default hostname', 'warning')\n            hostname = socket.gethostname()\n            try:\n                ip = socket.gethostbyname(hostname)\n            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 12,
                  "endLine": 533,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n        if not ip:\n            self.log_info('Computing default hostname', 'warning')\n            hostname = socket.gethostname()\n            try:\n                ip = socket.gethostbyname(hostname)\n            except socket.error:\n",
                    "rendered": {
                      "text": "\n        if not ip:\n            self.log_info('Computing default hostname', 'warning')\n            hostname = socket.gethostname()\n            try:\n                ip = socket.gethostbyname(hostname)\n            except socket.error:\n",
                      "markdown": "`\n        if not ip:\n            self.log_info('Computing default hostname', 'warning')\n            hostname = socket.gethostname()\n            try:\n                ip = socket.gethostbyname(hostname)\n            except socket.error:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 45,
                  "endLine": 532,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        self.bind((ip, port))\n\n        if not ip:\n            self.log_info('Computing default hostname', 'warning')\n            hostname = socket.gethostname()\n            try:\n                ip = socket.gethostbyname(hostname)\n",
                    "rendered": {
                      "text": "        self.bind((ip, port))\n\n        if not ip:\n            self.log_info('Computing default hostname', 'warning')\n            hostname = socket.gethostname()\n            try:\n                ip = socket.gethostbyname(hostname)\n",
                      "markdown": "`        self.bind((ip, port))\n\n        if not ip:\n            self.log_info('Computing default hostname', 'warning')\n            hostname = socket.gethostname()\n            try:\n                ip = socket.gethostbyname(hostname)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 19,
                  "endLine": 326,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        if port is None or default_port[protocol] == port:\n            host = hostname\n        else:\n            host = hostname + ':' + port\n        server_url = '%s://%s' % (protocol, host)\n        if server_url[-1:]=='/':\n            server_url=server_url[:-1]\n",
                    "rendered": {
                      "text": "        if port is None or default_port[protocol] == port:\n            host = hostname\n        else:\n            host = hostname + ':' + port\n        server_url = '%s://%s' % (protocol, host)\n        if server_url[-1:]=='/':\n            server_url=server_url[:-1]\n",
                      "markdown": "`        if port is None or default_port[protocol] == port:\n            host = hostname\n        else:\n            host = hostname + ':' + port\n        server_url = '%s://%s' % (protocol, host)\n        if server_url[-1:]=='/':\n            server_url=server_url[:-1]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 19,
                  "endLine": 324,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            port = environ['SERVER_PORT']\n\n        if port is None or default_port[protocol] == port:\n            host = hostname\n        else:\n            host = hostname + ':' + port\n        server_url = '%s://%s' % (protocol, host)\n",
                    "rendered": {
                      "text": "            port = environ['SERVER_PORT']\n\n        if port is None or default_port[protocol] == port:\n            host = hostname\n        else:\n            host = hostname + ':' + port\n        server_url = '%s://%s' % (protocol, host)\n",
                      "markdown": "`            port = environ['SERVER_PORT']\n\n        if port is None or default_port[protocol] == port:\n            host = hostname\n        else:\n            host = hostname + ':' + port\n        server_url = '%s://%s' % (protocol, host)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 12,
                  "endLine": 320,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            host = environ['HTTP_HOST'].strip()\n            hostname, port = urllib.splitport(host)\n        else:\n            hostname = environ['SERVER_NAME'].strip()\n            port = environ['SERVER_PORT']\n\n        if port is None or default_port[protocol] == port:\n",
                    "rendered": {
                      "text": "            host = environ['HTTP_HOST'].strip()\n            hostname, port = urllib.splitport(host)\n        else:\n            hostname = environ['SERVER_NAME'].strip()\n            port = environ['SERVER_PORT']\n\n        if port is None or default_port[protocol] == port:\n",
                      "markdown": "`            host = environ['HTTP_HOST'].strip()\n            hostname, port = urllib.splitport(host)\n        else:\n            hostname = environ['SERVER_NAME'].strip()\n            port = environ['SERVER_PORT']\n\n        if port is None or default_port[protocol] == port:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 12,
                  "endLine": 318,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n        if 'HTTP_HOST' in environ:\n            host = environ['HTTP_HOST'].strip()\n            hostname, port = urllib.splitport(host)\n        else:\n            hostname = environ['SERVER_NAME'].strip()\n            port = environ['SERVER_PORT']\n",
                    "rendered": {
                      "text": "\n        if 'HTTP_HOST' in environ:\n            host = environ['HTTP_HOST'].strip()\n            hostname, port = urllib.splitport(host)\n        else:\n            hostname = environ['SERVER_NAME'].strip()\n            port = environ['SERVER_PORT']\n",
                      "markdown": "`\n        if 'HTTP_HOST' in environ:\n            host = environ['HTTP_HOST'].strip()\n            hostname, port = urllib.splitport(host)\n        else:\n            hostname = environ['SERVER_NAME'].strip()\n            port = environ['SERVER_PORT']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 876,
                  "startColumn": 48,
                  "endLine": 876,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    def log(self, msg):\n        '''Medusa servers call this method.  There is no log level so\n        we have to sniff the message.  We want \"Server Error\" messages\n        from medusa.http_server logged as errors at least.'''\n        if msg.endswith('\\n'):\n            msg = msg[:-1]\n        if 'error' in msg.lower():\n",
                    "rendered": {
                      "text": "    def log(self, msg):\n        '''Medusa servers call this method.  There is no log level so\n        we have to sniff the message.  We want \"Server Error\" messages\n        from medusa.http_server logged as errors at least.'''\n        if msg.endswith('\\n'):\n            msg = msg[:-1]\n        if 'error' in msg.lower():\n",
                      "markdown": "`    def log(self, msg):\n        '''Medusa servers call this method.  There is no log level so\n        we have to sniff the message.  We want \"Server Error\" messages\n        from medusa.http_server logged as errors at least.'''\n        if msg.endswith('\\n'):\n            msg = msg[:-1]\n        if 'error' in msg.lower():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 37,
                  "endLine": 504,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        self.bytes_in  = counter()\n\n        self.log_info (\n                'Medusa (V%s) started at %s'\n                '\\n\\tHostname: %s'\n                '\\n\\tPort:%s'\n                '\\n' % (\n",
                    "rendered": {
                      "text": "        self.bytes_in  = counter()\n\n        self.log_info (\n                'Medusa (V%s) started at %s'\n                '\\n\\tHostname: %s'\n                '\\n\\tPort:%s'\n                '\\n' % (\n",
                      "markdown": "`        self.bytes_in  = counter()\n\n        self.log_info (\n                'Medusa (V%s) started at %s'\n                '\\n\\tHostname: %s'\n                '\\n\\tPort:%s'\n                '\\n' % (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 646,
                  "startColumn": 26,
                  "endLine": 647,
                  "snippet": {
                    "text": "        self._open()\n        sz = self._fsize()\n        if sz >= head:\n            self.sz = sz - head\n\n    def __del__(self):\n        self._close()\n\n",
                    "rendered": {
                      "text": "        self._open()\n        sz = self._fsize()\n        if sz >= head:\n            self.sz = sz - head\n\n    def __del__(self):\n        self._close()\n\n",
                      "markdown": "`        self._open()\n        sz = self._fsize()\n        if sz >= head:\n            self.sz = sz - head\n\n    def __del__(self):\n        self._close()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 52,
                  "endLine": 601,
                  "endColumn": 59,
                  "snippet": {
                    "text": "                        os.chown(socketname, sockchown[0], sockchown[1])\n                    except OSError as why:\n                        if why.args[0] == errno.EPERM:\n                            msg = ('Not permitted to chown %s to uid/gid %s; '\n                                   'adjust \"sockchown\" value in config file or '\n                                   'on command line to values that the '\n                                   'current user (%s) can successfully chown')\n",
                    "rendered": {
                      "text": "                        os.chown(socketname, sockchown[0], sockchown[1])\n                    except OSError as why:\n                        if why.args[0] == errno.EPERM:\n                            msg = ('Not permitted to chown %s to uid/gid %s; '\n                                   'adjust \"sockchown\" value in config file or '\n                                   'on command line to values that the '\n                                   'current user (%s) can successfully chown')\n",
                      "markdown": "`                        os.chown(socketname, sockchown[0], sockchown[1])\n                    except OSError as why:\n                        if why.args[0] == errno.EPERM:\n                            msg = ('Not permitted to chown %s to uid/gid %s; '\n                                   'adjust \"sockchown\" value in config file or '\n                                   'on command line to values that the '\n                                   'current user (%s) can successfully chown')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 49,
                  "endLine": 547,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.postbind()\n\n",
                    "rendered": {
                      "text": "            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.postbind()\n\n",
                      "markdown": "`            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.postbind()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 30,
                  "endLine": 547,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.postbind()\n\n",
                    "rendered": {
                      "text": "            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.postbind()\n\n",
                      "markdown": "`            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.postbind()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 539,
                  "startColumn": 51,
                  "endLine": 539,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n                    'please try setting an explicit IP address in the \"port\" '\n                    'setting of your [inet_http_server] section.  For example, '\n                    'instead of \"port = 9001\", try \"port = 127.0.0.1:9001.\"'\n                    % hostname)\n",
                    "rendered": {
                      "text": "            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n                    'please try setting an explicit IP address in the \"port\" '\n                    'setting of your [inet_http_server] section.  For example, '\n                    'instead of \"port = 9001\", try \"port = 127.0.0.1:9001.\"'\n                    % hostname)\n",
                      "markdown": "`            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n                    'please try setting an explicit IP address in the \"port\" '\n                    'setting of your [inet_http_server] section.  For example, '\n                    'instead of \"port = 9001\", try \"port = 127.0.0.1:9001.\"'\n                    % hostname)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 538,
                  "startColumn": 40,
                  "endLine": 538,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                ip = socket.gethostbyname(hostname)\n            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n                    'please try setting an explicit IP address in the \"port\" '\n                    'setting of your [inet_http_server] section.  For example, '\n                    'instead of \"port = 9001\", try \"port = 127.0.0.1:9001.\"'\n",
                    "rendered": {
                      "text": "                ip = socket.gethostbyname(hostname)\n            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n                    'please try setting an explicit IP address in the \"port\" '\n                    'setting of your [inet_http_server] section.  For example, '\n                    'instead of \"port = 9001\", try \"port = 127.0.0.1:9001.\"'\n",
                      "markdown": "`                ip = socket.gethostbyname(hostname)\n            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n                    'please try setting an explicit IP address in the \"port\" '\n                    'setting of your [inet_http_server] section.  For example, '\n                    'instead of \"port = 9001\", try \"port = 127.0.0.1:9001.\"'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 15,
                  "endLine": 535,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            self.log_info('Computing default hostname', 'warning')\n            hostname = socket.gethostname()\n            try:\n                ip = socket.gethostbyname(hostname)\n            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n",
                    "rendered": {
                      "text": "            self.log_info('Computing default hostname', 'warning')\n            hostname = socket.gethostname()\n            try:\n                ip = socket.gethostbyname(hostname)\n            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n",
                      "markdown": "`            self.log_info('Computing default hostname', 'warning')\n            hostname = socket.gethostname()\n            try:\n                ip = socket.gethostbyname(hostname)\n            except socket.error:\n                raise ValueError(\n                    'Could not determine IP address for hostname %s, '\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 17,
                  "endLine": 526,
                  "snippet": {
                    "text": "    \"\"\" AF_INET version of supervisor HTTP server \"\"\"\n\n    def __init__(self, ip, port, logger_object):\n        self.ip = ip\n        self.port = port\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.prebind(sock, logger_object)\n        self.bind((ip, port))\n",
                    "rendered": {
                      "text": "    \"\"\" AF_INET version of supervisor HTTP server \"\"\"\n\n    def __init__(self, ip, port, logger_object):\n        self.ip = ip\n        self.port = port\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.prebind(sock, logger_object)\n        self.bind((ip, port))\n",
                      "markdown": "`    \"\"\" AF_INET version of supervisor HTTP server \"\"\"\n\n    def __init__(self, ip, port, logger_object):\n        self.ip = ip\n        self.port = port\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.prebind(sock, logger_object)\n        self.bind((ip, port))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 11,
                  "endLine": 518,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    def log_info(self, message, type='info'):\n        ip = ''\n        if getattr(self, 'ip', None) is not None:\n            ip = self.ip\n        self.logger.log(ip, message)\n\nclass supervisor_af_inet_http_server(supervisor_http_server):\n",
                    "rendered": {
                      "text": "    def log_info(self, message, type='info'):\n        ip = ''\n        if getattr(self, 'ip', None) is not None:\n            ip = self.ip\n        self.logger.log(ip, message)\n\nclass supervisor_af_inet_http_server(supervisor_http_server):\n",
                      "markdown": "`    def log_info(self, message, type='info'):\n        ip = ''\n        if getattr(self, 'ip', None) is not None:\n            ip = self.ip\n        self.logger.log(ip, message)\n\nclass supervisor_af_inet_http_server(supervisor_http_server):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 7,
                  "endLine": 516,
                  "endColumn": 11,
                  "snippet": {
                    "text": "                )\n\n    def log_info(self, message, type='info'):\n        ip = ''\n        if getattr(self, 'ip', None) is not None:\n            ip = self.ip\n        self.logger.log(ip, message)\n",
                    "rendered": {
                      "text": "                )\n\n    def log_info(self, message, type='info'):\n        ip = ''\n        if getattr(self, 'ip', None) is not None:\n            ip = self.ip\n        self.logger.log(ip, message)\n",
                      "markdown": "`                )\n\n    def log_info(self, message, type='info'):\n        ip = ''\n        if getattr(self, 'ip', None) is not None:\n            ip = self.ip\n        self.logger.log(ip, message)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 3,
                  "endLine": 470,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nclass supervisor_http_server(http_server.http_server):\n    channel_class = deferring_http_channel\n    ip = None\n\n    def prebind(self, sock, logger_object):\n        \"\"\" Override __init__ to do logger setup earlier so it can\n",
                    "rendered": {
                      "text": "\nclass supervisor_http_server(http_server.http_server):\n    channel_class = deferring_http_channel\n    ip = None\n\n    def prebind(self, sock, logger_object):\n        \"\"\" Override __init__ to do logger setup earlier so it can\n",
                      "markdown": "`\nclass supervisor_http_server(http_server.http_server):\n    channel_class = deferring_http_channel\n    ip = None\n\n    def prebind(self, sock, logger_object):\n        \"\"\" Override __init__ to do logger setup earlier so it can\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 13,
                  "endLine": 397,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        else:\n            # we convert the header to text to facilitate processing.\n            # some of the underlying APIs (such as splitquery)\n            # expect text rather than bytes.\n            header = as_string(self.in_buffer)\n            self.in_buffer = b''\n            lines = header.split('\\r\\n')\n",
                    "rendered": {
                      "text": "        else:\n            # we convert the header to text to facilitate processing.\n            # some of the underlying APIs (such as splitquery)\n            # expect text rather than bytes.\n            header = as_string(self.in_buffer)\n            self.in_buffer = b''\n            lines = header.split('\\r\\n')\n",
                      "markdown": "`        else:\n            # we convert the header to text to facilitate processing.\n            # some of the underlying APIs (such as splitquery)\n            # expect text rather than bytes.\n            header = as_string(self.in_buffer)\n            self.in_buffer = b''\n            lines = header.split('\\r\\n')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 19,
                  "endLine": 335,
                  "endColumn": 25,
                  "snippet": {
                    "text": "class deferring_http_channel(http_server.http_channel):\n\n    # use a 4096-byte buffer size instead of the default 65536-byte buffer in\n    # order to spew tail -f output faster (speculative)\n    ac_out_buffer_size = 4096\n\n    delay = 0 # seconds\n",
                    "rendered": {
                      "text": "class deferring_http_channel(http_server.http_channel):\n\n    # use a 4096-byte buffer size instead of the default 65536-byte buffer in\n    # order to spew tail -f output faster (speculative)\n    ac_out_buffer_size = 4096\n\n    delay = 0 # seconds\n",
                      "markdown": "`class deferring_http_channel(http_server.http_channel):\n\n    # use a 4096-byte buffer size instead of the default 65536-byte buffer in\n    # order to spew tail -f output faster (speculative)\n    ac_out_buffer_size = 4096\n\n    delay = 0 # seconds\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 14,
                  "endLine": 302,
                  "snippet": {
                    "text": "                key='HTTP_%s' % (\"_\".join(key.split( \"-\"))).upper()\n                if value and key not in env:\n                    env[key]=value\n        return env\n\n    def get_server_url(self):\n        \"\"\" Functionality that medusa's http request doesn't have; set an\n        attribute named 'server_url' on the request based on the Host: header\n",
                    "rendered": {
                      "text": "                key='HTTP_%s' % (\"_\".join(key.split( \"-\"))).upper()\n                if value and key not in env:\n                    env[key]=value\n        return env\n\n    def get_server_url(self):\n        \"\"\" Functionality that medusa's http request doesn't have; set an\n        attribute named 'server_url' on the request based on the Host: header\n",
                      "markdown": "`                key='HTTP_%s' % (\"_\".join(key.split( \"-\"))).upper()\n                if value and key not in env:\n                    env[key]=value\n        return env\n\n    def get_server_url(self):\n        \"\"\" Functionality that medusa's http request doesn't have; set an\n        attribute named 'server_url' on the request based on the Host: header\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 7,
                  "endLine": 251,
                  "endColumn": 12,
                  "snippet": {
                    "text": "                )\n\n    def cgi_environment(self):\n        env = {}\n\n        # maps request some headers to environment variables.\n        # (those that don't start with 'HTTP_')\n",
                    "rendered": {
                      "text": "                )\n\n    def cgi_environment(self):\n        env = {}\n\n        # maps request some headers to environment variables.\n        # (those that don't start with 'HTTP_')\n",
                      "markdown": "`                )\n\n    def cgi_environment(self):\n        env = {}\n\n        # maps request some headers to environment variables.\n        # (those that don't start with 'HTTP_')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 61,
                  "endLine": 195,
                  "snippet": {
                    "text": "            # Although we don't *really* support http/0.9 (because\n            # we'd have to use \\r\\n as a terminator, and it would just\n            # yuck up a lot of stuff) it's very common for developers\n            # to not want to type a version number when using telnet\n            # to debug a server.\n            close_it = 1\n\n        outgoing_header = producers.simple_producer(self.build_reply_header())\n",
                    "rendered": {
                      "text": "            # Although we don't *really* support http/0.9 (because\n            # we'd have to use \\r\\n as a terminator, and it would just\n            # yuck up a lot of stuff) it's very common for developers\n            # to not want to type a version number when using telnet\n            # to debug a server.\n            close_it = 1\n\n        outgoing_header = producers.simple_producer(self.build_reply_header())\n",
                      "markdown": "`            # Although we don't *really* support http/0.9 (because\n            # we'd have to use \\r\\n as a terminator, and it would just\n            # yuck up a lot of stuff) it's very common for developers\n            # to not want to type a version number when using telnet\n            # to debug a server.\n            close_it = 1\n\n        outgoing_header = producers.simple_producer(self.build_reply_header())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 41,
                  "endLine": 185,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                elif self.use_chunked:\n                    self['Transfer-Encoding'] = 'chunked'\n                    wrap_in_chunking = 1\n                    # globbing slows down tail -f output, so only use it if\n                    # we're not in chunked mode\n                    globbing = 0\n                else:\n",
                    "rendered": {
                      "text": "                elif self.use_chunked:\n                    self['Transfer-Encoding'] = 'chunked'\n                    wrap_in_chunking = 1\n                    # globbing slows down tail -f output, so only use it if\n                    # we're not in chunked mode\n                    globbing = 0\n                else:\n",
                      "markdown": "`                elif self.use_chunked:\n                    self['Transfer-Encoding'] = 'chunked'\n                    wrap_in_chunking = 1\n                    # globbing slows down tail -f output, so only use it if\n                    # we're not in chunked mode\n                    globbing = 0\n                else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 20,
                  "endLine": 145,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    \"\"\" The medusa http_request class uses the default set of producers in\n    medusa.producers.  We can't use these because they don't know anything\n    about deferred responses, so we override various methods here.  This was\n    added to support tail -f like behavior on the logtail handler \"\"\"\n\n    def done(self, *arg, **kw):\n\n",
                    "rendered": {
                      "text": "    \"\"\" The medusa http_request class uses the default set of producers in\n    medusa.producers.  We can't use these because they don't know anything\n    about deferred responses, so we override various methods here.  This was\n    added to support tail -f like behavior on the logtail handler \"\"\"\n\n    def done(self, *arg, **kw):\n\n",
                      "markdown": "`    \"\"\" The medusa http_request class uses the default set of producers in\n    medusa.producers.  We can't use these because they don't know anything\n    about deferred responses, so we override various methods here.  This was\n    added to support tail -f like behavior on the logtail handler \"\"\"\n\n    def done(self, *arg, **kw):\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 6,
                  "endLine": 4,
                  "snippet": {
                    "text": "import os\nimport stat\nimport time\nimport sys\nimport socket\nimport errno\nimport weakref\n",
                    "rendered": {
                      "text": "import os\nimport stat\nimport time\nimport sys\nimport socket\nimport errno\nimport weakref\n",
                      "markdown": "`import os\nimport stat\nimport time\nimport sys\nimport socket\nimport errno\nimport weakref\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_datatypes.py"
                },
                "region": {
                  "startLine": 639,
                  "startColumn": 13,
                  "endLine": 639,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        self.assertEqual(host, '')\n        self.assertEqual(port, 9001)\n\n    def test_hostname_and_port(self):\n        host, port = self._callFUT('localhost:9001')\n        self.assertEqual(host, 'localhost')\n        self.assertEqual(port, 9001)\n",
                    "rendered": {
                      "text": "        self.assertEqual(host, '')\n        self.assertEqual(port, 9001)\n\n    def test_hostname_and_port(self):\n        host, port = self._callFUT('localhost:9001')\n        self.assertEqual(host, 'localhost')\n        self.assertEqual(port, 9001)\n",
                      "markdown": "`        self.assertEqual(host, '')\n        self.assertEqual(port, 9001)\n\n    def test_hostname_and_port(self):\n        host, port = self._callFUT('localhost:9001')\n        self.assertEqual(host, 'localhost')\n        self.assertEqual(port, 9001)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_childutils.py"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 27,
                  "endLine": 29,
                  "endColumn": 35,
                  "snippet": {
                    "text": "               'SUPERVISOR_PASSWORD':'abc123'}\n        t = getRPCTransport(env)\n        self.assertEqual(t.username, 'chrism')\n        self.assertEqual(t.password, 'abc123')\n        self.assertEqual(t.serverurl, 'http://localhost:9001')\n\n    def test_get_headers(self):\n",
                    "rendered": {
                      "text": "               'SUPERVISOR_PASSWORD':'abc123'}\n        t = getRPCTransport(env)\n        self.assertEqual(t.username, 'chrism')\n        self.assertEqual(t.password, 'abc123')\n        self.assertEqual(t.serverurl, 'http://localhost:9001')\n\n    def test_get_headers(self):\n",
                      "markdown": "`               'SUPERVISOR_PASSWORD':'abc123'}\n        t = getRPCTransport(env)\n        self.assertEqual(t.username, 'chrism')\n        self.assertEqual(t.password, 'abc123')\n        self.assertEqual(t.serverurl, 'http://localhost:9001')\n\n    def test_get_headers(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_childutils.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 27,
                  "endLine": 26,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        from supervisor.childutils import getRPCTransport\n        env = {'SUPERVISOR_SERVER_URL':'http://localhost:9001',\n               'SUPERVISOR_USERNAME':'chrism',\n               'SUPERVISOR_PASSWORD':'abc123'}\n        t = getRPCTransport(env)\n        self.assertEqual(t.username, 'chrism')\n        self.assertEqual(t.password, 'abc123')\n",
                    "rendered": {
                      "text": "        from supervisor.childutils import getRPCTransport\n        env = {'SUPERVISOR_SERVER_URL':'http://localhost:9001',\n               'SUPERVISOR_USERNAME':'chrism',\n               'SUPERVISOR_PASSWORD':'abc123'}\n        t = getRPCTransport(env)\n        self.assertEqual(t.username, 'chrism')\n        self.assertEqual(t.password, 'abc123')\n",
                      "markdown": "`        from supervisor.childutils import getRPCTransport\n        env = {'SUPERVISOR_SERVER_URL':'http://localhost:9001',\n               'SUPERVISOR_USERNAME':'chrism',\n               'SUPERVISOR_PASSWORD':'abc123'}\n        t = getRPCTransport(env)\n        self.assertEqual(t.username, 'chrism')\n        self.assertEqual(t.password, 'abc123')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_childutils.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 27,
                  "endLine": 19,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        from supervisor.childutils import getRPCTransport\n        t = getRPCTransport({'SUPERVISOR_SERVER_URL':'http://localhost:9001'})\n        self.assertEqual(t.username, '')\n        self.assertEqual(t.password, '')\n        self.assertEqual(t.serverurl, 'http://localhost:9001')\n\n    def test_getRPCTransport_with_uname_pass(self):\n",
                    "rendered": {
                      "text": "        from supervisor.childutils import getRPCTransport\n        t = getRPCTransport({'SUPERVISOR_SERVER_URL':'http://localhost:9001'})\n        self.assertEqual(t.username, '')\n        self.assertEqual(t.password, '')\n        self.assertEqual(t.serverurl, 'http://localhost:9001')\n\n    def test_getRPCTransport_with_uname_pass(self):\n",
                      "markdown": "`        from supervisor.childutils import getRPCTransport\n        t = getRPCTransport({'SUPERVISOR_SERVER_URL':'http://localhost:9001'})\n        self.assertEqual(t.username, '')\n        self.assertEqual(t.password, '')\n        self.assertEqual(t.serverurl, 'http://localhost:9001')\n\n    def test_getRPCTransport_with_uname_pass(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_childutils.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 7,
                  "endLine": 24,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n    def test_getRPCTransport_with_uname_pass(self):\n        from supervisor.childutils import getRPCTransport\n        env = {'SUPERVISOR_SERVER_URL':'http://localhost:9001',\n               'SUPERVISOR_USERNAME':'chrism',\n               'SUPERVISOR_PASSWORD':'abc123'}\n        t = getRPCTransport(env)\n",
                    "rendered": {
                      "text": "\n    def test_getRPCTransport_with_uname_pass(self):\n        from supervisor.childutils import getRPCTransport\n        env = {'SUPERVISOR_SERVER_URL':'http://localhost:9001',\n               'SUPERVISOR_USERNAME':'chrism',\n               'SUPERVISOR_PASSWORD':'abc123'}\n        t = getRPCTransport(env)\n",
                      "markdown": "`\n    def test_getRPCTransport_with_uname_pass(self):\n        from supervisor.childutils import getRPCTransport\n        env = {'SUPERVISOR_SERVER_URL':'http://localhost:9001',\n               'SUPERVISOR_USERNAME':'chrism',\n               'SUPERVISOR_PASSWORD':'abc123'}\n        t = getRPCTransport(env)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_childutils.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 6,
                  "endLine": 4,
                  "snippet": {
                    "text": "from io import BytesIO\nimport sys\nimport time\nimport unittest\nfrom supervisor.compat import StringIO\nfrom supervisor.compat import as_string\n\n",
                    "rendered": {
                      "text": "from io import BytesIO\nimport sys\nimport time\nimport unittest\nfrom supervisor.compat import StringIO\nfrom supervisor.compat import as_string\n\n",
                      "markdown": "`from io import BytesIO\nimport sys\nimport time\nimport unittest\nfrom supervisor.compat import StringIO\nfrom supervisor.compat import as_string\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/socket_manager.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 28,
                  "endLine": 54,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    \"\"\"\n\n    def __init__(self, socket_config, **kwargs):\n        self.logger = kwargs.get('logger', None)\n        self.socket = None\n        self.prepared = False\n        self.socket_config = socket_config\n",
                    "rendered": {
                      "text": "    \"\"\"\n\n    def __init__(self, socket_config, **kwargs):\n        self.logger = kwargs.get('logger', None)\n        self.socket = None\n        self.prepared = False\n        self.socket_config = socket_config\n",
                      "markdown": "`    \"\"\"\n\n    def __init__(self, socket_config, **kwargs):\n        self.logger = kwargs.get('logger', None)\n        self.socket = None\n        self.prepared = False\n        self.socket_config = socket_config\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/socket_manager.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 31,
                  "endLine": 10,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    def __init__(self, object, **kwargs):\n        self.object = object\n        self.on_delete = kwargs.get('on_delete', None)\n\n    def __del__(self):\n        if self.on_delete:\n",
                    "rendered": {
                      "text": "\n    def __init__(self, object, **kwargs):\n        self.object = object\n        self.on_delete = kwargs.get('on_delete', None)\n\n    def __del__(self):\n        if self.on_delete:\n",
                      "markdown": "`\n    def __init__(self, object, **kwargs):\n        self.object = object\n        self.on_delete = kwargs.get('on_delete', None)\n\n    def __del__(self):\n        if self.on_delete:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/socket_manager.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 19,
                  "endLine": 63,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            )\n\n    def __repr__(self):\n        return '<%s at %s for %s>' % (self.__class__,\n                                      id(self),\n                                      self.socket_config.url)\n\n",
                    "rendered": {
                      "text": "            )\n\n    def __repr__(self):\n        return '<%s at %s for %s>' % (self.__class__,\n                                      id(self),\n                                      self.socket_config.url)\n\n",
                      "markdown": "`            )\n\n    def __repr__(self):\n        return '<%s at %s for %s>' % (self.__class__,\n                                      id(self),\n                                      self.socket_config.url)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/socket_manager.py"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 7,
                  "endLine": 50,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    \"\"\" Class for managing sockets in servers that create/bind/listen\n        before forking multiple child processes to accept()\n        Sockets are managed at the process group level and referenced counted\n        at the process level b/c that's really the only place to hook in\n    \"\"\"\n\n    def __init__(self, socket_config, **kwargs):\n",
                    "rendered": {
                      "text": "    \"\"\" Class for managing sockets in servers that create/bind/listen\n        before forking multiple child processes to accept()\n        Sockets are managed at the process group level and referenced counted\n        at the process level b/c that's really the only place to hook in\n    \"\"\"\n\n    def __init__(self, socket_config, **kwargs):\n",
                      "markdown": "`    \"\"\" Class for managing sockets in servers that create/bind/listen\n        before forking multiple child processes to accept()\n        Sockets are managed at the process group level and referenced counted\n        at the process level b/c that's really the only place to hook in\n    \"\"\"\n\n    def __init__(self, socket_config, **kwargs):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/socket_manager.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 27,
                  "endLine": 49,
                  "endColumn": 31,
                  "snippet": {
                    "text": "class SocketManager:\n    \"\"\" Class for managing sockets in servers that create/bind/listen\n        before forking multiple child processes to accept()\n        Sockets are managed at the process group level and referenced counted\n        at the process level b/c that's really the only place to hook in\n    \"\"\"\n\n",
                    "rendered": {
                      "text": "class SocketManager:\n    \"\"\" Class for managing sockets in servers that create/bind/listen\n        before forking multiple child processes to accept()\n        Sockets are managed at the process group level and referenced counted\n        at the process level b/c that's really the only place to hook in\n    \"\"\"\n\n",
                      "markdown": "`class SocketManager:\n    \"\"\" Class for managing sockets in servers that create/bind/listen\n        before forking multiple child processes to accept()\n        Sockets are managed at the process group level and referenced counted\n        at the process level b/c that's really the only place to hook in\n    \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/skel/sample.conf"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 1,
                  "endLine": 78,
                  "endColumn": 9,
                  "snippet": {
                    "text": "serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket\n;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket\n;username=chris              ; should be same as in [*_http_server] if set\n;password=123                ; should be same as in [*_http_server] if set\n;prompt=mysupervisor         ; cmd line prompt (default \"supervisor\")\n;history_file=~/.sc_history  ; use readline history if available\n\n",
                    "rendered": {
                      "text": "serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket\n;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket\n;username=chris              ; should be same as in [*_http_server] if set\n;password=123                ; should be same as in [*_http_server] if set\n;prompt=mysupervisor         ; cmd line prompt (default \"supervisor\")\n;history_file=~/.sc_history  ; use readline history if available\n\n",
                      "markdown": "`serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket\n;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket\n;username=chris              ; should be same as in [*_http_server] if set\n;password=123                ; should be same as in [*_http_server] if set\n;prompt=mysupervisor         ; cmd line prompt (default \"supervisor\")\n;history_file=~/.sc_history  ; use readline history if available\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/skel/sample.conf"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 44,
                  "endLine": 42,
                  "endColumn": 52,
                  "snippet": {
                    "text": ";[inet_http_server]         ; inet (TCP) server disabled by default\n;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n[supervisord]\nlogfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log\n",
                    "rendered": {
                      "text": ";[inet_http_server]         ; inet (TCP) server disabled by default\n;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n[supervisord]\nlogfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log\n",
                      "markdown": "`;[inet_http_server]         ; inet (TCP) server disabled by default\n;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n[supervisord]\nlogfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/skel/sample.conf"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 42,
                  "endColumn": 9,
                  "snippet": {
                    "text": ";[inet_http_server]         ; inet (TCP) server disabled by default\n;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n[supervisord]\nlogfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log\n",
                    "rendered": {
                      "text": ";[inet_http_server]         ; inet (TCP) server disabled by default\n;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n[supervisord]\nlogfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log\n",
                      "markdown": "`;[inet_http_server]         ; inet (TCP) server disabled by default\n;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n[supervisord]\nlogfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/skel/sample.conf"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 37,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": ";  should only be bound to localhost or only accessible from within an\n;  isolated, trusted network.  The inet HTTP server does not support any\n;  form of encryption.  The inet HTTP server does not use authentication\n;  by default (see the username= and password= options to add authentication).\n;  Never expose the inet HTTP server to the public internet.\n\n;[inet_http_server]         ; inet (TCP) server disabled by default\n",
                    "rendered": {
                      "text": ";  should only be bound to localhost or only accessible from within an\n;  isolated, trusted network.  The inet HTTP server does not support any\n;  form of encryption.  The inet HTTP server does not use authentication\n;  by default (see the username= and password= options to add authentication).\n;  Never expose the inet HTTP server to the public internet.\n\n;[inet_http_server]         ; inet (TCP) server disabled by default\n",
                      "markdown": "`;  should only be bound to localhost or only accessible from within an\n;  isolated, trusted network.  The inet HTTP server does not support any\n;  form of encryption.  The inet HTTP server does not use authentication\n;  by default (see the username= and password= options to add authentication).\n;  Never expose the inet HTTP server to the public internet.\n\n;[inet_http_server]         ; inet (TCP) server disabled by default\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/skel/sample.conf"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 44,
                  "endLine": 27,
                  "endColumn": 52,
                  "snippet": {
                    "text": ";chmod=0700                 ; socket file mode (default 0700)\n;chown=nobody:nogroup       ; socket file uid:gid owner\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n; Security Warning:\n;  The inet HTTP server is not enabled by default.  The inet HTTP server is\n",
                    "rendered": {
                      "text": ";chmod=0700                 ; socket file mode (default 0700)\n;chown=nobody:nogroup       ; socket file uid:gid owner\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n; Security Warning:\n;  The inet HTTP server is not enabled by default.  The inet HTTP server is\n",
                      "markdown": "`;chmod=0700                 ; socket file mode (default 0700)\n;chown=nobody:nogroup       ; socket file uid:gid owner\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n; Security Warning:\n;  The inet HTTP server is not enabled by default.  The inet HTTP server is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/skel/sample.conf"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 9,
                  "snippet": {
                    "text": ";chmod=0700                 ; socket file mode (default 0700)\n;chown=nobody:nogroup       ; socket file uid:gid owner\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n; Security Warning:\n;  The inet HTTP server is not enabled by default.  The inet HTTP server is\n",
                    "rendered": {
                      "text": ";chmod=0700                 ; socket file mode (default 0700)\n;chown=nobody:nogroup       ; socket file uid:gid owner\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n; Security Warning:\n;  The inet HTTP server is not enabled by default.  The inet HTTP server is\n",
                      "markdown": "`;chmod=0700                 ; socket file mode (default 0700)\n;chown=nobody:nogroup       ; socket file uid:gid owner\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n; Security Warning:\n;  The inet HTTP server is not enabled by default.  The inet HTTP server is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/skel/sample.conf"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 38,
                  "endLine": 132,
                  "endColumn": 42,
                  "snippet": {
                    "text": ";directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=-1                   ; the relative start priority (default -1)\n;autostart=true                ; start at supervisord start (default: true)\n;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)\n;startretries=3                ; max # of serial start failures when starting (default 3)\n;autorestart=unexpected        ; autorestart if exited after running (def: unexpected)\n",
                    "rendered": {
                      "text": ";directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=-1                   ; the relative start priority (default -1)\n;autostart=true                ; start at supervisord start (default: true)\n;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)\n;startretries=3                ; max # of serial start failures when starting (default 3)\n;autorestart=unexpected        ; autorestart if exited after running (def: unexpected)\n",
                      "markdown": "`;directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=-1                   ; the relative start priority (default -1)\n;autostart=true                ; start at supervisord start (default: true)\n;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)\n;startretries=3                ; max # of serial start failures when starting (default 3)\n;autorestart=unexpected        ; autorestart if exited after running (def: unexpected)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/skel/sample.conf"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 38,
                  "endLine": 93,
                  "endColumn": 42,
                  "snippet": {
                    "text": ";directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=999                  ; the relative start priority (default 999)\n;autostart=true                ; start at supervisord start (default: true)\n;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)\n;startretries=3                ; max # of serial start failures when starting (default 3)\n;autorestart=unexpected        ; when to restart if exited after running (def: unexpected)\n",
                    "rendered": {
                      "text": ";directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=999                  ; the relative start priority (default 999)\n;autostart=true                ; start at supervisord start (default: true)\n;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)\n;startretries=3                ; max # of serial start failures when starting (default 3)\n;autorestart=unexpected        ; when to restart if exited after running (def: unexpected)\n",
                      "markdown": "`;directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=999                  ; the relative start priority (default 999)\n;autostart=true                ; start at supervisord start (default: true)\n;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)\n;startretries=3                ; max # of serial start failures when starting (default 3)\n;autorestart=unexpected        ; when to restart if exited after running (def: unexpected)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/skel/sample.conf"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 59,
                  "endLine": 83,
                  "endColumn": 68,
                  "snippet": {
                    "text": ";history_file=~/.sc_history  ; use readline history if available\n\n; The sample program section below shows all possible program subsection values.\n; Create one or more 'real' program: sections to be able to control them under\n; supervisor.\n\n;[program:theprogramname]\n",
                    "rendered": {
                      "text": ";history_file=~/.sc_history  ; use readline history if available\n\n; The sample program section below shows all possible program subsection values.\n; Create one or more 'real' program: sections to be able to control them under\n; supervisor.\n\n;[program:theprogramname]\n",
                      "markdown": "`;history_file=~/.sc_history  ; use readline history if available\n\n; The sample program section below shows all possible program subsection values.\n; Create one or more 'real' program: sections to be able to control them under\n; supervisor.\n\n;[program:theprogramname]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/skel/sample.conf"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 30,
                  "endLine": 79,
                  "endColumn": 35,
                  "snippet": {
                    "text": ";serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket\n;username=chris              ; should be same as in [*_http_server] if set\n;password=123                ; should be same as in [*_http_server] if set\n;prompt=mysupervisor         ; cmd line prompt (default \"supervisor\")\n;history_file=~/.sc_history  ; use readline history if available\n\n; The sample program section below shows all possible program subsection values.\n",
                    "rendered": {
                      "text": ";serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket\n;username=chris              ; should be same as in [*_http_server] if set\n;password=123                ; should be same as in [*_http_server] if set\n;prompt=mysupervisor         ; cmd line prompt (default \"supervisor\")\n;history_file=~/.sc_history  ; use readline history if available\n\n; The sample program section below shows all possible program subsection values.\n",
                      "markdown": "`;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket\n;username=chris              ; should be same as in [*_http_server] if set\n;password=123                ; should be same as in [*_http_server] if set\n;prompt=mysupervisor         ; cmd line prompt (default \"supervisor\")\n;history_file=~/.sc_history  ; use readline history if available\n\n; The sample program section below shows all possible program subsection values.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/skel/sample.conf"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 55,
                  "endLine": 58,
                  "endColumn": 59,
                  "snippet": {
                    "text": ";user=supervisord            ; setuid to this UNIX account at startup; recommended if root\n;identifier=supervisor       ; supervisord identifier, default is 'supervisor'\n;directory=/tmp              ; default is not to cd during start\n;nocleanup=true              ; don't clean up tempfiles at start; default false\n;childlogdir=/tmp            ; 'AUTO' child log dir, default $TEMP\n;environment=KEY=\"value\"     ; key value pairs to add to environment\n;strip_ansi=false            ; strip ansi escape codes in logs; def. false\n",
                    "rendered": {
                      "text": ";user=supervisord            ; setuid to this UNIX account at startup; recommended if root\n;identifier=supervisor       ; supervisord identifier, default is 'supervisor'\n;directory=/tmp              ; default is not to cd during start\n;nocleanup=true              ; don't clean up tempfiles at start; default false\n;childlogdir=/tmp            ; 'AUTO' child log dir, default $TEMP\n;environment=KEY=\"value\"     ; key value pairs to add to environment\n;strip_ansi=false            ; strip ansi escape codes in logs; def. false\n",
                      "markdown": "`;user=supervisord            ; setuid to this UNIX account at startup; recommended if root\n;identifier=supervisor       ; supervisord identifier, default is 'supervisor'\n;directory=/tmp              ; default is not to cd during start\n;nocleanup=true              ; don't clean up tempfiles at start; default false\n;childlogdir=/tmp            ; 'AUTO' child log dir, default $TEMP\n;environment=KEY=\"value\"     ; key value pairs to add to environment\n;strip_ansi=false            ; strip ansi escape codes in logs; def. false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/skel/sample.conf"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 58,
                  "endLine": 55,
                  "endColumn": 62,
                  "snippet": {
                    "text": "minfds=1024                  ; min. avail startup file descriptors; default 1024\nminprocs=200                 ; min. avail process descriptors;default 200\n;umask=022                   ; process file creation umask; default 022\n;user=supervisord            ; setuid to this UNIX account at startup; recommended if root\n;identifier=supervisor       ; supervisord identifier, default is 'supervisor'\n;directory=/tmp              ; default is not to cd during start\n;nocleanup=true              ; don't clean up tempfiles at start; default false\n",
                    "rendered": {
                      "text": "minfds=1024                  ; min. avail startup file descriptors; default 1024\nminprocs=200                 ; min. avail process descriptors;default 200\n;umask=022                   ; process file creation umask; default 022\n;user=supervisord            ; setuid to this UNIX account at startup; recommended if root\n;identifier=supervisor       ; supervisord identifier, default is 'supervisor'\n;directory=/tmp              ; default is not to cd during start\n;nocleanup=true              ; don't clean up tempfiles at start; default false\n",
                      "markdown": "`minfds=1024                  ; min. avail startup file descriptors; default 1024\nminprocs=200                 ; min. avail process descriptors;default 200\n;umask=022                   ; process file creation umask; default 022\n;user=supervisord            ; setuid to this UNIX account at startup; recommended if root\n;identifier=supervisor       ; supervisord identifier, default is 'supervisor'\n;directory=/tmp              ; default is not to cd during start\n;nocleanup=true              ; don't clean up tempfiles at start; default false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/dispatchers.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 19,
                  "endLine": 27,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        self.closed = False     # True if close() has been called\n\n    def __repr__(self):\n        return '<%s at %s for %s (%s)>' % (self.__class__.__name__,\n                                           id(self),\n                                           self.process,\n                                           self.channel)\n",
                    "rendered": {
                      "text": "        self.closed = False     # True if close() has been called\n\n    def __repr__(self):\n        return '<%s at %s for %s (%s)>' % (self.__class__.__name__,\n                                           id(self),\n                                           self.process,\n                                           self.channel)\n",
                      "markdown": "`        self.closed = False     # True if close() has been called\n\n    def __repr__(self):\n        return '<%s at %s for %s (%s)>' % (self.__class__.__name__,\n                                           id(self),\n                                           self.process,\n                                           self.channel)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/dispatchers.py"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 32,
                  "endLine": 207,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    def record_output(self):\n        if self.capturelog is None:\n            # shortcut trying to find capture data\n            data = self.output_buffer\n            self.output_buffer = b''\n            self._log(data)\n",
                    "rendered": {
                      "text": "\n    def record_output(self):\n        if self.capturelog is None:\n            # shortcut trying to find capture data\n            data = self.output_buffer\n            self.output_buffer = b''\n            self._log(data)\n",
                      "markdown": "`\n    def record_output(self):\n        if self.capturelog is None:\n            # shortcut trying to find capture data\n            data = self.output_buffer\n            self.output_buffer = b''\n            self._log(data)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 23,
                  "endLine": 532,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        self.headers[\"Content-Length\"] = str(len(request_body))\n\n        self.connection.request('POST', handler, request_body, self.headers)\n\n        r = self.connection.getresponse()\n\n",
                    "rendered": {
                      "text": "\n        self.headers[\"Content-Length\"] = str(len(request_body))\n\n        self.connection.request('POST', handler, request_body, self.headers)\n\n        r = self.connection.getresponse()\n\n",
                      "markdown": "`\n        self.headers[\"Content-Length\"] = str(len(request_body))\n\n        self.connection.request('POST', handler, request_body, self.headers)\n\n        r = self.connection.getresponse()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 43,
                  "endLine": 353,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    def loads(self, data):\n        params = method = None\n        for action, elem in iterparse(StringIO(data)):\n            unmarshall = self.unmarshallers.get(elem.tag)\n            if unmarshall:\n                data = unmarshall(elem)\n                elem.clear()\n",
                    "rendered": {
                      "text": "    def loads(self, data):\n        params = method = None\n        for action, elem in iterparse(StringIO(data)):\n            unmarshall = self.unmarshallers.get(elem.tag)\n            if unmarshall:\n                data = unmarshall(elem)\n                elem.clear()\n",
                      "markdown": "`    def loads(self, data):\n        params = method = None\n        for action, elem in iterparse(StringIO(data)):\n            unmarshall = self.unmarshallers.get(elem.tag)\n            if unmarshall:\n                data = unmarshall(elem)\n                elem.clear()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 19,
                  "endLine": 308,
                  "endColumn": 24,
                  "snippet": {
                    "text": "class AttrDict(dict):\n    # hack to make a dict's getattr equivalent to its getitem\n    def __getattr__(self, name):\n        return self.get(name)\n\nclass RootRPCInterface:\n    def __init__(self, subinterfaces):\n",
                    "rendered": {
                      "text": "class AttrDict(dict):\n    # hack to make a dict's getattr equivalent to its getitem\n    def __getattr__(self, name):\n        return self.get(name)\n\nclass RootRPCInterface:\n    def __init__(self, subinterfaces):\n",
                      "markdown": "`class AttrDict(dict):\n    # hack to make a dict's getattr equivalent to its getitem\n    def __getattr__(self, name):\n        return self.get(name)\n\nclass RootRPCInterface:\n    def __init__(self, subinterfaces):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 29,
                  "endLine": 264,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            while (not callbacks) and remaining_calls:\n                call = remaining_calls.pop(0)\n                name = call.get('methodName', None)\n                params = call.get('params', [])\n\n                try:\n                    if name is None:\n",
                    "rendered": {
                      "text": "            while (not callbacks) and remaining_calls:\n                call = remaining_calls.pop(0)\n                name = call.get('methodName', None)\n                params = call.get('params', [])\n\n                try:\n                    if name is None:\n",
                      "markdown": "`            while (not callbacks) and remaining_calls:\n                call = remaining_calls.pop(0)\n                name = call.get('methodName', None)\n                params = call.get('params', [])\n\n                try:\n                    if name is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 27,
                  "endLine": 263,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            # order until one returns a callback.\n            while (not callbacks) and remaining_calls:\n                call = remaining_calls.pop(0)\n                name = call.get('methodName', None)\n                params = call.get('params', [])\n\n                try:\n",
                    "rendered": {
                      "text": "            # order until one returns a callback.\n            while (not callbacks) and remaining_calls:\n                call = remaining_calls.pop(0)\n                name = call.get('methodName', None)\n                params = call.get('params', [])\n\n                try:\n",
                      "markdown": "`            # order until one returns a callback.\n            while (not callbacks) and remaining_calls:\n                call = remaining_calls.pop(0)\n                name = call.get('methodName', None)\n                params = call.get('params', [])\n\n                try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 59,
                  "endLine": 524,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n            # basic auth\n            if self.username is not None and self.password is not None:\n                unencoded = \"%s:%s\" % (self.username, self.password)\n                encoded = as_string(encodestring(as_bytes(unencoded)))\n                encoded = encoded.replace('\\n', '')\n                encoded = encoded.replace('\\012', '')\n",
                    "rendered": {
                      "text": "\n            # basic auth\n            if self.username is not None and self.password is not None:\n                unencoded = \"%s:%s\" % (self.username, self.password)\n                encoded = as_string(encodestring(as_bytes(unencoded)))\n                encoded = encoded.replace('\\n', '')\n                encoded = encoded.replace('\\012', '')\n",
                      "markdown": "`\n            # basic auth\n            if self.username is not None and self.password is not None:\n                unencoded = \"%s:%s\" % (self.username, self.password)\n                encoded = as_string(encodestring(as_bytes(unencoded)))\n                encoded = encoded.replace('\\n', '')\n                encoded = encoded.replace('\\012', '')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 50,
                  "endLine": 523,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                }\n\n            # basic auth\n            if self.username is not None and self.password is not None:\n                unencoded = \"%s:%s\" % (self.username, self.password)\n                encoded = as_string(encodestring(as_bytes(unencoded)))\n                encoded = encoded.replace('\\n', '')\n",
                    "rendered": {
                      "text": "                }\n\n            # basic auth\n            if self.username is not None and self.password is not None:\n                unencoded = \"%s:%s\" % (self.username, self.password)\n                encoded = as_string(encodestring(as_bytes(unencoded)))\n                encoded = encoded.replace('\\n', '')\n",
                      "markdown": "`                }\n\n            # basic auth\n            if self.username is not None and self.password is not None:\n                unencoded = \"%s:%s\" % (self.username, self.password)\n                encoded = as_string(encodestring(as_bytes(unencoded)))\n                encoded = encoded.replace('\\n', '')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 24,
                  "endLine": 485,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    def __init__(self, username=None, password=None, serverurl=None):\n        xmlrpclib.Transport.__init__(self)\n        self.username = username\n        self.password = password\n        self.verbose = False\n        self.serverurl = serverurl\n        if serverurl.startswith('http://'):\n",
                    "rendered": {
                      "text": "    def __init__(self, username=None, password=None, serverurl=None):\n        xmlrpclib.Transport.__init__(self)\n        self.username = username\n        self.password = password\n        self.verbose = False\n        self.serverurl = serverurl\n        if serverurl.startswith('http://'):\n",
                      "markdown": "`    def __init__(self, username=None, password=None, serverurl=None):\n        xmlrpclib.Transport.__init__(self)\n        self.username = username\n        self.password = password\n        self.verbose = False\n        self.serverurl = serverurl\n        if serverurl.startswith('http://'):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 13,
                  "endLine": 485,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    def __init__(self, username=None, password=None, serverurl=None):\n        xmlrpclib.Transport.__init__(self)\n        self.username = username\n        self.password = password\n        self.verbose = False\n        self.serverurl = serverurl\n        if serverurl.startswith('http://'):\n",
                    "rendered": {
                      "text": "    def __init__(self, username=None, password=None, serverurl=None):\n        xmlrpclib.Transport.__init__(self)\n        self.username = username\n        self.password = password\n        self.verbose = False\n        self.serverurl = serverurl\n        if serverurl.startswith('http://'):\n",
                      "markdown": "`    def __init__(self, username=None, password=None, serverurl=None):\n        xmlrpclib.Transport.__init__(self)\n        self.username = username\n        self.password = password\n        self.verbose = False\n        self.serverurl = serverurl\n        if serverurl.startswith('http://'):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 482,
                  "startColumn": 38,
                  "endLine": 482,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    \"\"\"\n    connection = None\n\n    def __init__(self, username=None, password=None, serverurl=None):\n        xmlrpclib.Transport.__init__(self)\n        self.username = username\n        self.password = password\n",
                    "rendered": {
                      "text": "    \"\"\"\n    connection = None\n\n    def __init__(self, username=None, password=None, serverurl=None):\n        xmlrpclib.Transport.__init__(self)\n        self.username = username\n        self.password = password\n",
                      "markdown": "`    \"\"\"\n    connection = None\n\n    def __init__(self, username=None, password=None, serverurl=None):\n        xmlrpclib.Transport.__init__(self)\n        self.username = username\n        self.password = password\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 9,
                  "endLine": 342,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        \"array\": lambda x: x[0].text,\n        \"data\": lambda x: [v.text for v in x],\n        \"struct\": lambda x: dict([(k.text or \"\", v.text) for k, v in x]),\n        \"base64\": lambda x: as_string(decodestring(as_bytes(x.text or \"\"))),\n        \"param\": lambda x: x[0].text,\n        }\n\n",
                    "rendered": {
                      "text": "        \"array\": lambda x: x[0].text,\n        \"data\": lambda x: [v.text for v in x],\n        \"struct\": lambda x: dict([(k.text or \"\", v.text) for k, v in x]),\n        \"base64\": lambda x: as_string(decodestring(as_bytes(x.text or \"\"))),\n        \"param\": lambda x: x[0].text,\n        }\n\n",
                      "markdown": "`        \"array\": lambda x: x[0].text,\n        \"data\": lambda x: [v.text for v in x],\n        \"struct\": lambda x: dict([(k.text or \"\", v.text) for k, v in x]),\n        \"base64\": lambda x: as_string(decodestring(as_bytes(x.text or \"\"))),\n        \"param\": lambda x: x[0].text,\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 62,
                  "endLine": 428,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\n            else:\n                # if we get anything but a function, it implies that this\n                # response doesn't need to be deferred, we can service it\n                # right away.\n                body = as_bytes(xmlrpc_marshal(value))\n                request['Content-Type'] = 'text/xml'\n",
                    "rendered": {
                      "text": "\n            else:\n                # if we get anything but a function, it implies that this\n                # response doesn't need to be deferred, we can service it\n                # right away.\n                body = as_bytes(xmlrpc_marshal(value))\n                request['Content-Type'] = 'text/xml'\n",
                      "markdown": "`\n            else:\n                # if we get anything but a function, it implies that this\n                # response doesn't need to be deferred, we can service it\n                # right away.\n                body = as_bytes(xmlrpc_marshal(value))\n                request['Content-Type'] = 'text/xml'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 6,
                  "endLine": 6,
                  "snippet": {
                    "text": "import re\nimport socket\nimport sys\nimport time\nimport traceback\nimport types\nfrom xml.etree.ElementTree import iterparse\n\n",
                    "rendered": {
                      "text": "import re\nimport socket\nimport sys\nimport time\nimport traceback\nimport types\nfrom xml.etree.ElementTree import iterparse\n\n",
                      "markdown": "`import re\nimport socket\nimport sys\nimport time\nimport traceback\nimport types\nfrom xml.etree.ElementTree import iterparse\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/xmlrpc.py"
                },
                "region": {
                  "startLine": 490,
                  "startColumn": 32,
                  "endLine": 490,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        self.serverurl = serverurl\n        if serverurl.startswith('http://'):\n            parsed = urlparse.urlparse(serverurl)\n            host, port = parsed.hostname, parsed.port\n            if port is None:\n                port = 80\n            def get_connection(host=host, port=port):\n",
                    "rendered": {
                      "text": "        self.serverurl = serverurl\n        if serverurl.startswith('http://'):\n            parsed = urlparse.urlparse(serverurl)\n            host, port = parsed.hostname, parsed.port\n            if port is None:\n                port = 80\n            def get_connection(host=host, port=port):\n",
                      "markdown": "`        self.serverurl = serverurl\n        if serverurl.startswith('http://'):\n            parsed = urlparse.urlparse(serverurl)\n            host, port = parsed.hostname, parsed.port\n            if port is None:\n                port = 80\n            def get_connection(host=host, port=port):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 24,
                  "endLine": 647,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        if not path:\n            path = 'index.html'\n\n        viewinfo = VIEWS.get(path)\n        if viewinfo is None:\n            # this should never happen if our match method works\n            return\n",
                    "rendered": {
                      "text": "        if not path:\n            path = 'index.html'\n\n        viewinfo = VIEWS.get(path)\n        if viewinfo is None:\n            # this should never happen if our match method works\n            return\n",
                      "markdown": "`        if not path:\n            path = 'index.html'\n\n        viewinfo = VIEWS.get(path)\n        if viewinfo is None:\n            # this should never happen if our match method works\n            return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 22,
                  "endLine": 468,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        response = self.context.response\n        processname = form.get('processname')\n        action = form.get('action')\n        message = form.get('message')\n\n        if action:\n            if not self.callback:\n",
                    "rendered": {
                      "text": "        response = self.context.response\n        processname = form.get('processname')\n        action = form.get('action')\n        message = form.get('message')\n\n        if action:\n            if not self.callback:\n",
                      "markdown": "`        response = self.context.response\n        processname = form.get('processname')\n        action = form.get('action')\n        message = form.get('message')\n\n        if action:\n            if not self.callback:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 21,
                  "endLine": 467,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        form = self.context.form\n        response = self.context.response\n        processname = form.get('processname')\n        action = form.get('action')\n        message = form.get('message')\n\n        if action:\n",
                    "rendered": {
                      "text": "        form = self.context.form\n        response = self.context.response\n        processname = form.get('processname')\n        action = form.get('action')\n        message = form.get('message')\n\n        if action:\n",
                      "markdown": "`        form = self.context.form\n        response = self.context.response\n        processname = form.get('processname')\n        action = form.get('action')\n        message = form.get('message')\n\n        if action:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 26,
                  "endLine": 466,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    def render(self):\n        form = self.context.form\n        response = self.context.response\n        processname = form.get('processname')\n        action = form.get('action')\n        message = form.get('message')\n\n",
                    "rendered": {
                      "text": "    def render(self):\n        form = self.context.form\n        response = self.context.response\n        processname = form.get('processname')\n        action = form.get('action')\n        message = form.get('message')\n\n",
                      "markdown": "`    def render(self):\n        form = self.context.form\n        response = self.context.response\n        processname = form.get('processname')\n        action = form.get('action')\n        message = form.get('message')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 41,
                  "endLine": 339,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                group = supervisord.process_groups.get(group_name)\n                if group is None:\n                    return wrong\n                process = group.processes.get(process_name)\n                if process is None:\n                    return wrong\n\n",
                    "rendered": {
                      "text": "                group = supervisord.process_groups.get(group_name)\n                if group is None:\n                    return wrong\n                process = group.processes.get(process_name)\n                if process is None:\n                    return wrong\n\n",
                      "markdown": "`                group = supervisord.process_groups.get(group_name)\n                if group is None:\n                    return wrong\n                process = group.processes.get(process_name)\n                if process is None:\n                    return wrong\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 50,
                  "endLine": 336,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                    return 'No such process named %s' % namespec\n                wrong.delay = 0.05\n                group_name, process_name = split_namespec(namespec)\n                group = supervisord.process_groups.get(group_name)\n                if group is None:\n                    return wrong\n                process = group.processes.get(process_name)\n",
                    "rendered": {
                      "text": "                    return 'No such process named %s' % namespec\n                wrong.delay = 0.05\n                group_name, process_name = split_namespec(namespec)\n                group = supervisord.process_groups.get(group_name)\n                if group is None:\n                    return wrong\n                process = group.processes.get(process_name)\n",
                      "markdown": "`                    return 'No such process named %s' % namespec\n                wrong.delay = 0.05\n                group_name, process_name = split_namespec(namespec)\n                group = supervisord.process_groups.get(group_name)\n                if group is None:\n                    return wrong\n                process = group.processes.get(process_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 24,
                  "endLine": 203,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        else:\n            processname = form['processname']\n            offset = 0\n            limit = form.get('limit', '1024')\n            limit = min(-1024, int(limit)*-1 if limit.isdigit() else -1024)\n            if not processname:\n                tail = 'No process name found'\n",
                    "rendered": {
                      "text": "        else:\n            processname = form['processname']\n            offset = 0\n            limit = form.get('limit', '1024')\n            limit = min(-1024, int(limit)*-1 if limit.isdigit() else -1024)\n            if not processname:\n                tail = 'No process name found'\n",
                      "markdown": "`        else:\n            processname = form['processname']\n            offset = 0\n            limit = form.get('limit', '1024')\n            limit = min(-1024, int(limit)*-1 if limit.isdigit() else -1024)\n            if not processname:\n                tail = 'No process name found'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 23,
                  "endLine": 78,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            self.request.error(301)\n            return\n\n        body = response.get('body', '')\n        self.request['Content-Length'] = len(body)\n\n        self.request.push(body)\n",
                    "rendered": {
                      "text": "            self.request.error(301)\n            return\n\n        body = response.get('body', '')\n        self.request['Content-Length'] = len(body)\n\n        self.request.push(body)\n",
                      "markdown": "`            self.request.error(301)\n            return\n\n        body = response.get('body', '')\n        self.request['Content-Length'] = len(body)\n\n        self.request.push(body)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 18,
                  "endLine": 73,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        if 'Content-Type' not in self.request:\n            self.request['Content-Type'] = 'text/plain'\n\n        if headers.get('Location'):\n            self.request['Content-Length'] = 0\n            self.request.error(301)\n            return\n",
                    "rendered": {
                      "text": "        if 'Content-Type' not in self.request:\n            self.request['Content-Type'] = 'text/plain'\n\n        if headers.get('Location'):\n            self.request['Content-Length'] = 0\n            self.request.error(301)\n            return\n",
                      "markdown": "`        if 'Content-Type' not in self.request:\n            self.request['Content-Type'] = 'text/plain'\n\n        if headers.get('Location'):\n            self.request['Content-Length'] = 0\n            self.request.error(301)\n            return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 26,
                  "endLine": 66,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    def sendresponse(self, response):\n\n        headers = response.get('headers', {})\n        for header in headers:\n            self.request[header] = headers[header]\n\n",
                    "rendered": {
                      "text": "\n    def sendresponse(self, response):\n\n        headers = response.get('headers', {})\n        for header in headers:\n            self.request[header] = headers[header]\n\n",
                      "markdown": "`\n    def sendresponse(self, response):\n\n        headers = response.get('headers', {})\n        for header in headers:\n            self.request[header] = headers[header]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 41,
                  "endLine": 327,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                    result = callback()\n                    if result is NOT_DONE_YET:\n                        return NOT_DONE_YET\n                    return 'All restarted at %s' % time.ctime()\n                restartall.delay = 0.05\n                return restartall\n\n",
                    "rendered": {
                      "text": "                    result = callback()\n                    if result is NOT_DONE_YET:\n                        return NOT_DONE_YET\n                    return 'All restarted at %s' % time.ctime()\n                restartall.delay = 0.05\n                return restartall\n\n",
                      "markdown": "`                    result = callback()\n                    if result is NOT_DONE_YET:\n                        return NOT_DONE_YET\n                    return 'All restarted at %s' % time.ctime()\n                restartall.delay = 0.05\n                return restartall\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 43,
                  "endLine": 315,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                    if callback() is NOT_DONE_YET:\n                        return NOT_DONE_YET\n                    else:\n                        return 'All stopped at %s' % time.ctime()\n                stopall.delay = 0.05\n                return stopall\n\n",
                    "rendered": {
                      "text": "                    if callback() is NOT_DONE_YET:\n                        return NOT_DONE_YET\n                    else:\n                        return 'All stopped at %s' % time.ctime()\n                stopall.delay = 0.05\n                return stopall\n\n",
                      "markdown": "`                    if callback() is NOT_DONE_YET:\n                        return NOT_DONE_YET\n                    else:\n                        return 'All stopped at %s' % time.ctime()\n                stopall.delay = 0.05\n                return stopall\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 45,
                  "endLine": 304,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n            if action == 'refresh':\n                def donothing():\n                    message = 'Page refreshed at %s' % time.ctime()\n                    return message\n                donothing.delay = 0.05\n                return donothing\n",
                    "rendered": {
                      "text": "\n            if action == 'refresh':\n                def donothing():\n                    message = 'Page refreshed at %s' % time.ctime()\n                    return message\n                donothing.delay = 0.05\n                return donothing\n",
                      "markdown": "`\n            if action == 'refresh':\n                def donothing():\n                    message = 'Page refreshed at %s' % time.ctime()\n                    return message\n                donothing.delay = 0.05\n                return donothing\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 33,
                  "endLine": 222,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        root = self.clone()\n\n        title = root.findmeld('title')\n        title.content('Supervisor tail of process %s' % processname)\n        tailbody = root.findmeld('tailbody')\n        tailbody.content(tail)\n\n",
                    "rendered": {
                      "text": "        root = self.clone()\n\n        title = root.findmeld('title')\n        title.content('Supervisor tail of process %s' % processname)\n        tailbody = root.findmeld('tailbody')\n        tailbody.content(tail)\n\n",
                      "markdown": "`        root = self.clone()\n\n        title = root.findmeld('title')\n        title.content('Supervisor tail of process %s' % processname)\n        tailbody = root.findmeld('tailbody')\n        tailbody.content(tail)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 23,
                  "endLine": 216,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                    if e.code == Faults.NO_FILE:\n                        tail = 'No file for %s' % processname\n                    else:\n                        tail = 'ERROR: unexpected rpc fault [%d] %s' % (\n                            e.code, e.text)\n\n        root = self.clone()\n",
                    "rendered": {
                      "text": "                    if e.code == Faults.NO_FILE:\n                        tail = 'No file for %s' % processname\n                    else:\n                        tail = 'ERROR: unexpected rpc fault [%d] %s' % (\n                            e.code, e.text)\n\n        root = self.clone()\n",
                      "markdown": "`                    if e.code == Faults.NO_FILE:\n                        tail = 'No file for %s' % processname\n                    else:\n                        tail = 'ERROR: unexpected rpc fault [%d] %s' % (\n                            e.code, e.text)\n\n        root = self.clone()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 23,
                  "endLine": 214,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                                                             limit, offset)\n                except RPCError as e:\n                    if e.code == Faults.NO_FILE:\n                        tail = 'No file for %s' % processname\n                    else:\n                        tail = 'ERROR: unexpected rpc fault [%d] %s' % (\n                            e.code, e.text)\n",
                    "rendered": {
                      "text": "                                                             limit, offset)\n                except RPCError as e:\n                    if e.code == Faults.NO_FILE:\n                        tail = 'No file for %s' % processname\n                    else:\n                        tail = 'ERROR: unexpected rpc fault [%d] %s' % (\n                            e.code, e.text)\n",
                      "markdown": "`                                                             limit, offset)\n                except RPCError as e:\n                    if e.code == Faults.NO_FILE:\n                        tail = 'No file for %s' % processname\n                    else:\n                        tail = 'ERROR: unexpected rpc fault [%d] %s' % (\n                            e.code, e.text)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 19,
                  "endLine": 210,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            else:\n                rpcinterface = SupervisorNamespaceRPCInterface(supervisord)\n                try:\n                    tail = rpcinterface.readProcessStdoutLog(processname,\n                                                             limit, offset)\n                except RPCError as e:\n                    if e.code == Faults.NO_FILE:\n",
                    "rendered": {
                      "text": "            else:\n                rpcinterface = SupervisorNamespaceRPCInterface(supervisord)\n                try:\n                    tail = rpcinterface.readProcessStdoutLog(processname,\n                                                             limit, offset)\n                except RPCError as e:\n                    if e.code == Faults.NO_FILE:\n",
                      "markdown": "`            else:\n                rpcinterface = SupervisorNamespaceRPCInterface(supervisord)\n                try:\n                    tail = rpcinterface.readProcessStdoutLog(processname,\n                                                             limit, offset)\n                except RPCError as e:\n                    if e.code == Faults.NO_FILE:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 15,
                  "endLine": 206,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            limit = form.get('limit', '1024')\n            limit = min(-1024, int(limit)*-1 if limit.isdigit() else -1024)\n            if not processname:\n                tail = 'No process name found'\n            else:\n                rpcinterface = SupervisorNamespaceRPCInterface(supervisord)\n                try:\n",
                    "rendered": {
                      "text": "            limit = form.get('limit', '1024')\n            limit = min(-1024, int(limit)*-1 if limit.isdigit() else -1024)\n            if not processname:\n                tail = 'No process name found'\n            else:\n                rpcinterface = SupervisorNamespaceRPCInterface(supervisord)\n                try:\n",
                      "markdown": "`            limit = form.get('limit', '1024')\n            limit = min(-1024, int(limit)*-1 if limit.isdigit() else -1024)\n            if not processname:\n                tail = 'No process name found'\n            else:\n                rpcinterface = SupervisorNamespaceRPCInterface(supervisord)\n                try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 11,
                  "endLine": 198,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        form = self.context.form\n\n        if not 'processname' in form:\n            tail = 'No process name found'\n            processname = None\n        else:\n            processname = form['processname']\n",
                    "rendered": {
                      "text": "        form = self.context.form\n\n        if not 'processname' in form:\n            tail = 'No process name found'\n            processname = None\n        else:\n            processname = form['processname']\n",
                      "markdown": "`        form = self.context.form\n\n        if not 'processname' in form:\n            tail = 'No process name found'\n            processname = None\n        else:\n            processname = form['processname']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/web.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 6,
                  "endLine": 4,
                  "snippet": {
                    "text": "import os\nimport re\nimport time\nimport traceback\nimport datetime\n\nfrom supervisor import templating\n",
                    "rendered": {
                      "text": "import os\nimport re\nimport time\nimport traceback\nimport datetime\n\nfrom supervisor import templating\n",
                      "markdown": "`import os\nimport re\nimport time\nimport traceback\nimport datetime\n\nfrom supervisor import templating\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/base.py"
                },
                "region": {
                  "startLine": 1028,
                  "startColumn": 28,
                  "endLine": 1028,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        return DummyProcessGroup(self)\n\n    def __repr__(self):\n        return '<%s instance at %s named %s>' % (self.__class__, id(self),\n                                                 self.name)\n\nclass DummyFCGIGroupConfig(DummyPGroupConfig):\n",
                    "rendered": {
                      "text": "        return DummyProcessGroup(self)\n\n    def __repr__(self):\n        return '<%s instance at %s named %s>' % (self.__class__, id(self),\n                                                 self.name)\n\nclass DummyFCGIGroupConfig(DummyPGroupConfig):\n",
                      "markdown": "`        return DummyProcessGroup(self)\n\n    def __repr__(self):\n        return '<%s instance at %s named %s>' % (self.__class__, id(self),\n                                                 self.name)\n\nclass DummyFCGIGroupConfig(DummyPGroupConfig):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/base.py"
                },
                "region": {
                  "startLine": 648,
                  "startColumn": 22,
                  "endLine": 649,
                  "snippet": {
                    "text": "        if env is None:\n            self.env = {}\n        else:\n            self.env = env\n\n    def split_uri(self):\n        return self.args\n\n",
                    "rendered": {
                      "text": "        if env is None:\n            self.env = {}\n        else:\n            self.env = env\n\n    def split_uri(self):\n        return self.args\n\n",
                      "markdown": "`        if env is None:\n            self.env = {}\n        else:\n            self.env = env\n\n    def split_uri(self):\n        return self.args\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/base.py"
                },
                "region": {
                  "startLine": 645,
                  "startColumn": 10,
                  "endLine": 645,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        self.header = []\n        self.outgoing = []\n        self.channel = DummyMedusaChannel()\n        if env is None:\n            self.env = {}\n        else:\n            self.env = env\n",
                    "rendered": {
                      "text": "        self.header = []\n        self.outgoing = []\n        self.channel = DummyMedusaChannel()\n        if env is None:\n            self.env = {}\n        else:\n            self.env = env\n",
                      "markdown": "`        self.header = []\n        self.outgoing = []\n        self.channel = DummyMedusaChannel()\n        if env is None:\n            self.env = {}\n        else:\n            self.env = env\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/base.py"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 64,
                  "endLine": 378,
                  "snippet": {
                    "text": "    pid = 0 # Subprocess pid; 0 when not running\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if the process stopped by an admin\n    system_stop = False # true if the process has been stopped by the system\n    killing = False # flag determining whether we are trying to kill this proc\n    backoff = 0 # backoff counter (to backofflimit)\n",
                    "rendered": {
                      "text": "    pid = 0 # Subprocess pid; 0 when not running\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if the process stopped by an admin\n    system_stop = False # true if the process has been stopped by the system\n    killing = False # flag determining whether we are trying to kill this proc\n    backoff = 0 # backoff counter (to backofflimit)\n",
                      "markdown": "`    pid = 0 # Subprocess pid; 0 when not running\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if the process stopped by an admin\n    system_stop = False # true if the process has been stopped by the system\n    killing = False # flag determining whether we are trying to kill this proc\n    backoff = 0 # backoff counter (to backofflimit)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/base.py"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 24,
                  "endLine": 376,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    # Initial state; overridden by instance variables\n    pid = 0 # Subprocess pid; 0 when not running\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if the process stopped by an admin\n    system_stop = False # true if the process has been stopped by the system\n",
                    "rendered": {
                      "text": "    # Initial state; overridden by instance variables\n    pid = 0 # Subprocess pid; 0 when not running\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if the process stopped by an admin\n    system_stop = False # true if the process has been stopped by the system\n",
                      "markdown": "`    # Initial state; overridden by instance variables\n    pid = 0 # Subprocess pid; 0 when not running\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if the process stopped by an admin\n    system_stop = False # true if the process has been stopped by the system\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/base.py"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 24,
                  "endLine": 375,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n    # Initial state; overridden by instance variables\n    pid = 0 # Subprocess pid; 0 when not running\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if the process stopped by an admin\n",
                    "rendered": {
                      "text": "\n    # Initial state; overridden by instance variables\n    pid = 0 # Subprocess pid; 0 when not running\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if the process stopped by an admin\n",
                      "markdown": "`\n    # Initial state; overridden by instance variables\n    pid = 0 # Subprocess pid; 0 when not running\n    laststart = 0 # Last time the subprocess was started; 0 if never\n    laststop = 0  # Last time the subprocess was stopped; 0 if never\n    delay = 0 # If nonzero, delay starting or killing until this time\n    administrative_stop = False # true if the process stopped by an admin\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/scripts/sample_commevent.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 6,
                  "endLine": 8,
                  "snippet": {
                    "text": "# second (or every number of seconds specified as a single argument).\n\nimport sys\nimport time\n\ndef write_stdout(s):\n    sys.stdout.write(s)\n    sys.stdout.flush()\n",
                    "rendered": {
                      "text": "# second (or every number of seconds specified as a single argument).\n\nimport sys\nimport time\n\ndef write_stdout(s):\n    sys.stdout.write(s)\n    sys.stdout.flush()\n",
                      "markdown": "`# second (or every number of seconds specified as a single argument).\n\nimport sys\nimport time\n\ndef write_stdout(s):\n    sys.stdout.write(s)\n    sys.stdout.flush()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/auth_handler.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 60,
                  "endLine": 130,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\n    def authorize (self, auth_info):\n        [username, password] = auth_info\n        if username in self.dict and self.dict[username] == password:\n            return 1\n        else:\n            return 0\n",
                    "rendered": {
                      "text": "\n    def authorize (self, auth_info):\n        [username, password] = auth_info\n        if username in self.dict and self.dict[username] == password:\n            return 1\n        else:\n            return 0\n",
                      "markdown": "`\n    def authorize (self, auth_info):\n        [username, password] = auth_info\n        if username in self.dict and self.dict[username] == password:\n            return 1\n        else:\n            return 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/auth_handler.py"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 19,
                  "endLine": 129,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        self.dict = dict\n\n    def authorize (self, auth_info):\n        [username, password] = auth_info\n        if username in self.dict and self.dict[username] == password:\n            return 1\n        else:\n",
                    "rendered": {
                      "text": "        self.dict = dict\n\n    def authorize (self, auth_info):\n        [username, password] = auth_info\n        if username in self.dict and self.dict[username] == password:\n            return 1\n        else:\n",
                      "markdown": "`        self.dict = dict\n\n    def authorize (self, auth_info):\n        [username, password] = auth_info\n        if username in self.dict and self.dict[username] == password:\n            return 1\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/auth_handler.py"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 35,
                  "endLine": 98,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        if now[-1:] == 'L':\n            now = now[:-1]\n        private_key = str (id (self))\n        nonce = ':'.join([ip, now, private_key])\n        return self.apply_hash (nonce)\n\n    def apply_hash (self, s):\n",
                    "rendered": {
                      "text": "        if now[-1:] == 'L':\n            now = now[:-1]\n        private_key = str (id (self))\n        nonce = ':'.join([ip, now, private_key])\n        return self.apply_hash (nonce)\n\n    def apply_hash (self, s):\n",
                      "markdown": "`        if now[-1:] == 'L':\n            now = now[:-1]\n        private_key = str (id (self))\n        nonce = ':'.join([ip, now, private_key])\n        return self.apply_hash (nonce)\n\n    def apply_hash (self, s):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/auth_handler.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 8,
                  "endLine": 97,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        now = str(long(time.time()))\n        if now[-1:] == 'L':\n            now = now[:-1]\n        private_key = str (id (self))\n        nonce = ':'.join([ip, now, private_key])\n        return self.apply_hash (nonce)\n\n",
                    "rendered": {
                      "text": "        now = str(long(time.time()))\n        if now[-1:] == 'L':\n            now = now[:-1]\n        private_key = str (id (self))\n        nonce = ':'.join([ip, now, private_key])\n        return self.apply_hash (nonce)\n\n",
                      "markdown": "`        now = str(long(time.time()))\n        if now[-1:] == 'L':\n            now = now[:-1]\n        private_key = str (id (self))\n        nonce = ':'.join([ip, now, private_key])\n        return self.apply_hash (nonce)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/auth_handler.py"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 10,
                  "endLine": 106,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        m = md5()\n        m.update (s)\n        d = m.digest()\n        # base64.encodestring tacks on an extra linefeed.\n        return encodestring (d)[:-1]\n\n    def status (self):\n",
                    "rendered": {
                      "text": "        m = md5()\n        m.update (s)\n        d = m.digest()\n        # base64.encodestring tacks on an extra linefeed.\n        return encodestring (d)[:-1]\n\n    def status (self):\n",
                      "markdown": "`        m = md5()\n        m.update (s)\n        d = m.digest()\n        # base64.encodestring tacks on an extra linefeed.\n        return encodestring (d)[:-1]\n\n    def status (self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/auth_handler.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 54,
                  "endLine": 102,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        return self.apply_hash (nonce)\n\n    def apply_hash (self, s):\n        \"\"\"Apply MD5 to a string <s>, then wrap it in base64 encoding.\"\"\"\n        m = md5()\n        m.update (s)\n        d = m.digest()\n",
                    "rendered": {
                      "text": "        return self.apply_hash (nonce)\n\n    def apply_hash (self, s):\n        \"\"\"Apply MD5 to a string <s>, then wrap it in base64 encoding.\"\"\"\n        m = md5()\n        m.update (s)\n        d = m.digest()\n",
                      "markdown": "`        return self.apply_hash (nonce)\n\n    def apply_hash (self, s):\n        \"\"\"Apply MD5 to a string <s>, then wrap it in base64 encoding.\"\"\"\n        m = md5()\n        m.update (s)\n        d = m.digest()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/auth_handler.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 53,
                  "endLine": 102,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        return self.apply_hash (nonce)\n\n    def apply_hash (self, s):\n        \"\"\"Apply MD5 to a string <s>, then wrap it in base64 encoding.\"\"\"\n        m = md5()\n        m.update (s)\n        d = m.digest()\n",
                    "rendered": {
                      "text": "        return self.apply_hash (nonce)\n\n    def apply_hash (self, s):\n        \"\"\"Apply MD5 to a string <s>, then wrap it in base64 encoding.\"\"\"\n        m = md5()\n        m.update (s)\n        d = m.digest()\n",
                      "markdown": "`        return self.apply_hash (nonce)\n\n    def apply_hash (self, s):\n        \"\"\"Apply MD5 to a string <s>, then wrap it in base64 encoding.\"\"\"\n        m = md5()\n        m.update (s)\n        d = m.digest()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/auth_handler.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 7,
                  "endLine": 93,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n    def make_nonce (self, request):\n        \"\"\"A digest-authentication <nonce>, constructed as suggested in RFC 2069\"\"\"\n        ip = request.channel.server.ip\n        now = str(long(time.time()))\n        if now[-1:] == 'L':\n            now = now[:-1]\n",
                    "rendered": {
                      "text": "\n    def make_nonce (self, request):\n        \"\"\"A digest-authentication <nonce>, constructed as suggested in RFC 2069\"\"\"\n        ip = request.channel.server.ip\n        now = str(long(time.time()))\n        if now[-1:] == 'L':\n            now = now[:-1]\n",
                      "markdown": "`\n    def make_nonce (self, request):\n        \"\"\"A digest-authentication <nonce>, constructed as suggested in RFC 2069\"\"\"\n        ip = request.channel.server.ip\n        now = str(long(time.time()))\n        if now[-1:] == 'L':\n            now = now[:-1]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/auth_handler.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 6,
                  "endLine": 15,
                  "snippet": {
                    "text": "\nimport re\nimport sys\nimport time\n\nfrom supervisor.compat import as_string, as_bytes\nfrom supervisor.compat import encodestring, decodestring\nfrom supervisor.compat import long\n",
                    "rendered": {
                      "text": "\nimport re\nimport sys\nimport time\n\nfrom supervisor.compat import as_string, as_bytes\nfrom supervisor.compat import encodestring, decodestring\nfrom supervisor.compat import long\n",
                      "markdown": "`\nimport re\nimport sys\nimport time\n\nfrom supervisor.compat import as_string, as_bytes\nfrom supervisor.compat import encodestring, decodestring\nfrom supervisor.compat import long\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/datatypes.py"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 29,
                  "endLine": 236,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        self.url = 'unix://%s' % path\n        self.mode = kwargs.get('mode', None)\n        self.owner = kwargs.get('owner', None)\n        self.backlog = kwargs.get('backlog', None)\n\n    def addr(self):\n        return self.path\n",
                    "rendered": {
                      "text": "        self.url = 'unix://%s' % path\n        self.mode = kwargs.get('mode', None)\n        self.owner = kwargs.get('owner', None)\n        self.backlog = kwargs.get('backlog', None)\n\n    def addr(self):\n        return self.path\n",
                      "markdown": "`        self.url = 'unix://%s' % path\n        self.mode = kwargs.get('mode', None)\n        self.owner = kwargs.get('owner', None)\n        self.backlog = kwargs.get('backlog', None)\n\n    def addr(self):\n        return self.path\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/datatypes.py"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 27,
                  "endLine": 235,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        self.path = path\n        self.url = 'unix://%s' % path\n        self.mode = kwargs.get('mode', None)\n        self.owner = kwargs.get('owner', None)\n        self.backlog = kwargs.get('backlog', None)\n\n    def addr(self):\n",
                    "rendered": {
                      "text": "        self.path = path\n        self.url = 'unix://%s' % path\n        self.mode = kwargs.get('mode', None)\n        self.owner = kwargs.get('owner', None)\n        self.backlog = kwargs.get('backlog', None)\n\n    def addr(self):\n",
                      "markdown": "`        self.path = path\n        self.url = 'unix://%s' % path\n        self.mode = kwargs.get('mode', None)\n        self.owner = kwargs.get('owner', None)\n        self.backlog = kwargs.get('backlog', None)\n\n    def addr(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/datatypes.py"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 26,
                  "endLine": 234,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    def __init__(self, path, **kwargs):\n        self.path = path\n        self.url = 'unix://%s' % path\n        self.mode = kwargs.get('mode', None)\n        self.owner = kwargs.get('owner', None)\n        self.backlog = kwargs.get('backlog', None)\n\n",
                    "rendered": {
                      "text": "    def __init__(self, path, **kwargs):\n        self.path = path\n        self.url = 'unix://%s' % path\n        self.mode = kwargs.get('mode', None)\n        self.owner = kwargs.get('owner', None)\n        self.backlog = kwargs.get('backlog', None)\n\n",
                      "markdown": "`    def __init__(self, path, **kwargs):\n        self.path = path\n        self.url = 'unix://%s' % path\n        self.mode = kwargs.get('mode', None)\n        self.owner = kwargs.get('owner', None)\n        self.backlog = kwargs.get('backlog', None)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/datatypes.py"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 29,
                  "endLine": 208,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        self.host = host.lower()\n        self.port = port_number(port)\n        self.url = 'tcp://%s:%d' % (self.host, self.port)\n        self.backlog = kwargs.get('backlog', None)\n\n    def addr(self):\n        return self.host, self.port\n",
                    "rendered": {
                      "text": "        self.host = host.lower()\n        self.port = port_number(port)\n        self.url = 'tcp://%s:%d' % (self.host, self.port)\n        self.backlog = kwargs.get('backlog', None)\n\n    def addr(self):\n        return self.host, self.port\n",
                      "markdown": "`        self.host = host.lower()\n        self.port = port_number(port)\n        self.url = 'tcp://%s:%d' % (self.host, self.port)\n        self.backlog = kwargs.get('backlog', None)\n\n    def addr(self):\n        return self.host, self.port\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/datatypes.py"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 19,
                  "endLine": 170,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    backlog = None # socket listen backlog\n\n    def __repr__(self):\n        return '<%s at %s for %s>' % (self.__class__,\n                                      id(self),\n                                      self.url)\n\n",
                    "rendered": {
                      "text": "    backlog = None # socket listen backlog\n\n    def __repr__(self):\n        return '<%s at %s for %s>' % (self.__class__,\n                                      id(self),\n                                      self.url)\n\n",
                      "markdown": "`    backlog = None # socket listen backlog\n\n    def __repr__(self):\n        return '<%s at %s for %s>' % (self.__class__,\n                                      id(self),\n                                      self.url)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/datatypes.py"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 7,
                  "endLine": 315,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    return uid\n\ndef name_to_gid(name):\n    \"\"\" Find a group ID from a string containing a group name or ID.\n        Raises ValueError if the string can't be resolved to a valid\n        group ID on the system. \"\"\"\n    try:\n",
                    "rendered": {
                      "text": "    return uid\n\ndef name_to_gid(name):\n    \"\"\" Find a group ID from a string containing a group name or ID.\n        Raises ValueError if the string can't be resolved to a valid\n        group ID on the system. \"\"\"\n    try:\n",
                      "markdown": "`    return uid\n\ndef name_to_gid(name):\n    \"\"\" Find a group ID from a string containing a group name or ID.\n        Raises ValueError if the string can't be resolved to a valid\n        group ID on the system. \"\"\"\n    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/datatypes.py"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 7,
                  "endLine": 296,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        raise ValueError('Invalid user:group definition %s' % arg)\n\ndef name_to_uid(name):\n    \"\"\" Find a user ID from a string containing a user name or ID.\n        Raises ValueError if the string can't be resolved to a valid\n        user ID on the system. \"\"\"\n    try:\n",
                    "rendered": {
                      "text": "        raise ValueError('Invalid user:group definition %s' % arg)\n\ndef name_to_uid(name):\n    \"\"\" Find a user ID from a string containing a user name or ID.\n        Raises ValueError if the string can't be resolved to a valid\n        user ID on the system. \"\"\"\n    try:\n",
                      "markdown": "`        raise ValueError('Invalid user:group definition %s' % arg)\n\ndef name_to_uid(name):\n    \"\"\" Find a user ID from a string containing a user name or ID.\n        Raises ValueError if the string can't be resolved to a valid\n        user ID on the system. \"\"\"\n    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/datatypes.py"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 7,
                  "endLine": 279,
                  "endColumn": 13,
                  "snippet": {
                    "text": "                                    + \"%s\" % e)\n\ndef colon_separated_user_group(arg):\n    \"\"\" Find a user ID and group ID from a string like 'user:group'.  Returns\n        a tuple (uid, gid).  If the string only contains a user like 'user'\n        then (uid, -1) will be returned.  Raises ValueError if either\n        the user or group can't be resolved to valid IDs on the system. \"\"\"\n",
                    "rendered": {
                      "text": "                                    + \"%s\" % e)\n\ndef colon_separated_user_group(arg):\n    \"\"\" Find a user ID and group ID from a string like 'user:group'.  Returns\n        a tuple (uid, gid).  If the string only contains a user like 'user'\n        then (uid, -1) will be returned.  Raises ValueError if either\n        the user or group can't be resolved to valid IDs on the system. \"\"\"\n",
                      "markdown": "`                                    + \"%s\" % e)\n\ndef colon_separated_user_group(arg):\n    \"\"\" Find a user ID and group ID from a string like 'user:group'.  Returns\n        a tuple (uid, gid).  If the string only contains a user like 'user'\n        then (uid, -1) will be returned.  Raises ValueError if either\n        the user or group can't be resolved to valid IDs on the system. \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/datatypes.py"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 30,
                  "endLine": 201,
                  "endColumn": 34,
                  "snippet": {
                    "text": "class InetStreamSocketConfig(SocketConfig):\n    \"\"\" TCP socket config helper \"\"\"\n\n    host = None # host name or ip to bind to\n    port = None # integer port to bind to\n\n    def __init__(self, host, port, **kwargs):\n",
                    "rendered": {
                      "text": "class InetStreamSocketConfig(SocketConfig):\n    \"\"\" TCP socket config helper \"\"\"\n\n    host = None # host name or ip to bind to\n    port = None # integer port to bind to\n\n    def __init__(self, host, port, **kwargs):\n",
                      "markdown": "`class InetStreamSocketConfig(SocketConfig):\n    \"\"\" TCP socket config helper \"\"\"\n\n    host = None # host name or ip to bind to\n    port = None # integer port to bind to\n\n    def __init__(self, host, port, **kwargs):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_supervisorctl.py"
                },
                "region": {
                  "startLine": 2018,
                  "startColumn": 13,
                  "endLine": 2018,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        self.prompt = 'supervisor'\n        self.serverurl = 'http://localhost:65532'\n        self.username = 'chrism'\n        self.password = '123'\n        self.history_file = None\n        self.plugins = ()\n        self._server = DummyRPCServer()\n",
                    "rendered": {
                      "text": "        self.prompt = 'supervisor'\n        self.serverurl = 'http://localhost:65532'\n        self.username = 'chrism'\n        self.password = '123'\n        self.history_file = None\n        self.plugins = ()\n        self._server = DummyRPCServer()\n",
                      "markdown": "`        self.prompt = 'supervisor'\n        self.serverurl = 'http://localhost:65532'\n        self.username = 'chrism'\n        self.password = '123'\n        self.history_file = None\n        self.plugins = ()\n        self._server = DummyRPCServer()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_supervisorctl.py"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 48,
                  "endLine": 117,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        self.assertEqual(controller.stdout.getvalue(),\n                         'Sorry, supervisord responded but did not recognize'\n                         ' the supervisor namespace commands that'\n                         ' supervisorctl uses to control it.  Please check'\n                         ' that the [rpcinterface:supervisor] section is'\n                         ' enabled in the configuration file'\n                         ' (see sample.conf).\\n')\n",
                    "rendered": {
                      "text": "        self.assertEqual(controller.stdout.getvalue(),\n                         'Sorry, supervisord responded but did not recognize'\n                         ' the supervisor namespace commands that'\n                         ' supervisorctl uses to control it.  Please check'\n                         ' that the [rpcinterface:supervisor] section is'\n                         ' enabled in the configuration file'\n                         ' (see sample.conf).\\n')\n",
                      "markdown": "`        self.assertEqual(controller.stdout.getvalue(),\n                         'Sorry, supervisord responded but did not recognize'\n                         ' the supervisor namespace commands that'\n                         ' supervisorctl uses to control it.  Please check'\n                         ' that the [rpcinterface:supervisor] section is'\n                         ' enabled in the configuration file'\n                         ' (see sample.conf).\\n')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_supervisorctl.py"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 42,
                  "endLine": 508,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        result = plugin.do_tail('-f')\n        self.assertEqual(result, None)\n        lines = plugin.ctl.stdout.getvalue().split('\\n')\n        self.assertEqual(lines[0], 'Error: tail requires process name')\n        self.assertEqual(plugin.ctl.exitstatus, LSBInitExitStatuses.GENERIC)\n\n    def test_tail_bad_modifier(self):\n",
                    "rendered": {
                      "text": "        result = plugin.do_tail('-f')\n        self.assertEqual(result, None)\n        lines = plugin.ctl.stdout.getvalue().split('\\n')\n        self.assertEqual(lines[0], 'Error: tail requires process name')\n        self.assertEqual(plugin.ctl.exitstatus, LSBInitExitStatuses.GENERIC)\n\n    def test_tail_bad_modifier(self):\n",
                      "markdown": "`        result = plugin.do_tail('-f')\n        self.assertEqual(result, None)\n        lines = plugin.ctl.stdout.getvalue().split('\\n')\n        self.assertEqual(lines[0], 'Error: tail requires process name')\n        self.assertEqual(plugin.ctl.exitstatus, LSBInitExitStatuses.GENERIC)\n\n    def test_tail_bad_modifier(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_socket_manager.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 19,
                  "endLine": 119,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        sock_manager = self._makeOne(conf)\n        self.assertEqual(conf, sock_manager.config())\n\n    def test_tcp_w_hostname(self):\n        conf = InetStreamSocketConfig('localhost', 51041)\n        sock_manager = self._makeOne(conf)\n        self.assertEqual(sock_manager.socket_config, conf)\n",
                    "rendered": {
                      "text": "        sock_manager = self._makeOne(conf)\n        self.assertEqual(conf, sock_manager.config())\n\n    def test_tcp_w_hostname(self):\n        conf = InetStreamSocketConfig('localhost', 51041)\n        sock_manager = self._makeOne(conf)\n        self.assertEqual(sock_manager.socket_config, conf)\n",
                      "markdown": "`        sock_manager = self._makeOne(conf)\n        self.assertEqual(conf, sock_manager.config())\n\n    def test_tcp_w_hostname(self):\n        conf = InetStreamSocketConfig('localhost', 51041)\n        sock_manager = self._makeOne(conf)\n        self.assertEqual(sock_manager.socket_config, conf)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_socket_manager.py"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 23,
                  "endLine": 110,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    def test_repr(self):\n        conf = DummySocketConfig(2)\n        sock_manager = self._makeOne(conf)\n        expected = \"<%s at %s for %s>\" % (\n            sock_manager.__class__, id(sock_manager), conf.url)\n        self.assertEqual(repr(sock_manager), expected)\n\n",
                    "rendered": {
                      "text": "    def test_repr(self):\n        conf = DummySocketConfig(2)\n        sock_manager = self._makeOne(conf)\n        expected = \"<%s at %s for %s>\" % (\n            sock_manager.__class__, id(sock_manager), conf.url)\n        self.assertEqual(repr(sock_manager), expected)\n\n",
                      "markdown": "`    def test_repr(self):\n        conf = DummySocketConfig(2)\n        sock_manager = self._makeOne(conf)\n        expected = \"<%s at %s for %s>\" % (\n            sock_manager.__class__, id(sock_manager), conf.url)\n        self.assertEqual(repr(sock_manager), expected)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_rpcinterfaces.py"
                },
                "region": {
                  "startLine": 2168,
                  "startColumn": 22,
                  "endLine": 2168,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        # belt-and-suspenders test for docstring-as-typing parsing correctness\n        # and documentation validity vs. implementation\n        _RPCTYPES = ['int', 'double', 'string', 'boolean', 'dateTime.iso8601',\n                     'base64', 'binary', 'array', 'struct']\n        interface = self._makeOne()\n        methods = interface._listMethods()\n        for k in methods.keys():\n",
                    "rendered": {
                      "text": "        # belt-and-suspenders test for docstring-as-typing parsing correctness\n        # and documentation validity vs. implementation\n        _RPCTYPES = ['int', 'double', 'string', 'boolean', 'dateTime.iso8601',\n                     'base64', 'binary', 'array', 'struct']\n        interface = self._makeOne()\n        methods = interface._listMethods()\n        for k in methods.keys():\n",
                      "markdown": "`        # belt-and-suspenders test for docstring-as-typing parsing correctness\n        # and documentation validity vs. implementation\n        _RPCTYPES = ['int', 'double', 'string', 'boolean', 'dateTime.iso8601',\n                     'base64', 'binary', 'array', 'struct']\n        interface = self._makeOne()\n        methods = interface._listMethods()\n        for k in methods.keys():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_rpcinterfaces.py"
                },
                "region": {
                  "startLine": 1100,
                  "startColumn": 9,
                  "endLine": 1100,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        result = interface.signalAllProcesses(10)\n        self.assertEqual(interface.update_text, 'signalAllProcesses')\n\n        # Sort so we get deterministic results despite hash randomization\n        result = sorted(result, key=operator.itemgetter('name'))\n\n        from supervisor.xmlrpc import Faults\n",
                    "rendered": {
                      "text": "        result = interface.signalAllProcesses(10)\n        self.assertEqual(interface.update_text, 'signalAllProcesses')\n\n        # Sort so we get deterministic results despite hash randomization\n        result = sorted(result, key=operator.itemgetter('name'))\n\n        from supervisor.xmlrpc import Faults\n",
                      "markdown": "`        result = interface.signalAllProcesses(10)\n        self.assertEqual(interface.update_text, 'signalAllProcesses')\n\n        # Sort so we get deterministic results despite hash randomization\n        result = sorted(result, key=operator.itemgetter('name'))\n\n        from supervisor.xmlrpc import Faults\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_rpcinterfaces.py"
                },
                "region": {
                  "startLine": 1026,
                  "startColumn": 9,
                  "endLine": 1026,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        interface = self._makeOne(supervisord)\n        result = interface.signalProcessGroup('foo', 10)\n        self.assertEqual(interface.update_text, 'signalProcessGroup')\n        # Sort so we get deterministic results despite hash randomization\n        result = sorted(result, key=operator.itemgetter('name'))\n\n        from supervisor.xmlrpc import Faults\n",
                    "rendered": {
                      "text": "        interface = self._makeOne(supervisord)\n        result = interface.signalProcessGroup('foo', 10)\n        self.assertEqual(interface.update_text, 'signalProcessGroup')\n        # Sort so we get deterministic results despite hash randomization\n        result = sorted(result, key=operator.itemgetter('name'))\n\n        from supervisor.xmlrpc import Faults\n",
                      "markdown": "`        interface = self._makeOne(supervisord)\n        result = interface.signalProcessGroup('foo', 10)\n        self.assertEqual(interface.update_text, 'signalProcessGroup')\n        # Sort so we get deterministic results despite hash randomization\n        result = sorted(result, key=operator.itemgetter('name'))\n\n        from supervisor.xmlrpc import Faults\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_rpcinterfaces.py"
                },
                "region": {
                  "startLine": 993,
                  "startColumn": 9,
                  "endLine": 993,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        result = interface.signalProcess('foo:*', 10)\n        self.assertEqual(interface.update_text, 'signalProcessGroup')\n\n        # Sort so we get deterministic results despite hash randomization\n        result = sorted(result, key=operator.itemgetter('name'))\n\n        from supervisor.xmlrpc import Faults\n",
                    "rendered": {
                      "text": "        result = interface.signalProcess('foo:*', 10)\n        self.assertEqual(interface.update_text, 'signalProcessGroup')\n\n        # Sort so we get deterministic results despite hash randomization\n        result = sorted(result, key=operator.itemgetter('name'))\n\n        from supervisor.xmlrpc import Faults\n",
                      "markdown": "`        result = interface.signalProcess('foo:*', 10)\n        self.assertEqual(interface.update_text, 'signalProcessGroup')\n\n        # Sort so we get deterministic results despite hash randomization\n        result = sorted(result, key=operator.itemgetter('name'))\n\n        from supervisor.xmlrpc import Faults\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_rpcinterfaces.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 6,
                  "endLine": 7,
                  "snippet": {
                    "text": "import sys\nimport operator\nimport os\nimport time\nimport errno\n\nfrom supervisor.tests.base import DummyOptions\nfrom supervisor.tests.base import DummySupervisor\n",
                    "rendered": {
                      "text": "import sys\nimport operator\nimport os\nimport time\nimport errno\n\nfrom supervisor.tests.base import DummyOptions\nfrom supervisor.tests.base import DummySupervisor\n",
                      "markdown": "`import sys\nimport operator\nimport os\nimport time\nimport errno\n\nfrom supervisor.tests.base import DummyOptions\nfrom supervisor.tests.base import DummySupervisor\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 21,
                  "endLine": 175,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                raise\n            r = []\n        for fd, flags in r:\n            obj = map.get(fd)\n            if obj is None:\n                continue\n            readwrite(obj, flags)\n",
                    "rendered": {
                      "text": "                raise\n            r = []\n        for fd, flags in r:\n            obj = map.get(fd)\n            if obj is None:\n                continue\n            readwrite(obj, flags)\n",
                      "markdown": "`                raise\n            r = []\n        for fd, flags in r:\n            obj = map.get(fd)\n            if obj is None:\n                continue\n            readwrite(obj, flags)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 21,
                  "endLine": 143,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            write(obj)\n\n        for fd in e:\n            obj = map.get(fd)\n            if obj is None:\n                continue\n            _exception(obj)\n",
                    "rendered": {
                      "text": "            write(obj)\n\n        for fd in e:\n            obj = map.get(fd)\n            if obj is None:\n                continue\n            _exception(obj)\n",
                      "markdown": "`            write(obj)\n\n        for fd in e:\n            obj = map.get(fd)\n            if obj is None:\n                continue\n            _exception(obj)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 21,
                  "endLine": 137,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            read(obj)\n\n        for fd in w:\n            obj = map.get(fd)\n            if obj is None:\n                continue\n            write(obj)\n",
                    "rendered": {
                      "text": "            read(obj)\n\n        for fd in w:\n            obj = map.get(fd)\n            if obj is None:\n                continue\n            write(obj)\n",
                      "markdown": "`            read(obj)\n\n        for fd in w:\n            obj = map.get(fd)\n            if obj is None:\n                continue\n            write(obj)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 21,
                  "endLine": 131,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                    return\n\n        for fd in r:\n            obj = map.get(fd)\n            if obj is None:\n                continue\n            read(obj)\n",
                    "rendered": {
                      "text": "                    return\n\n        for fd in r:\n            obj = map.get(fd)\n            if obj is None:\n                continue\n            read(obj)\n",
                      "markdown": "`                    return\n\n        for fd in r:\n            obj = map.get(fd)\n            if obj is None:\n                continue\n            read(obj)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 58,
                  "endLine": 410,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        try:\n            self_repr = repr(self)\n        except:\n            self_repr = '<__repr__(self) failed for object at %0x>' % id(self)\n\n        self.log_info(\n            'uncaptured python exception, closing channel %s (%s:%s %s)' % (\n",
                    "rendered": {
                      "text": "        try:\n            self_repr = repr(self)\n        except:\n            self_repr = '<__repr__(self) failed for object at %0x>' % id(self)\n\n        self.log_info(\n            'uncaptured python exception, closing channel %s (%s:%s %s)' % (\n",
                      "markdown": "`        try:\n            self_repr = repr(self)\n        except:\n            self_repr = '<__repr__(self) failed for object at %0x>' % id(self)\n\n        self.log_info(\n            'uncaptured python exception, closing channel %s (%s:%s %s)' % (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 19,
                  "endLine": 240,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                status.append('%s:%d' % self.addr)\n            except TypeError:\n                status.append(repr(self.addr))\n        return '<%s at %#x>' % (' '.join(status), id(self))\n\n    def add_channel(self, map=None):\n        #self.log_info('adding channel %s' % self)\n",
                    "rendered": {
                      "text": "                status.append('%s:%d' % self.addr)\n            except TypeError:\n                status.append(repr(self.addr))\n        return '<%s at %#x>' % (' '.join(status), id(self))\n\n    def add_channel(self, map=None):\n        #self.log_info('adding channel %s' % self)\n",
                      "markdown": "`                status.append('%s:%d' % self.addr)\n            except TypeError:\n                status.append(repr(self.addr))\n        return '<%s at %#x>' % (' '.join(status), id(self))\n\n    def add_channel(self, map=None):\n        #self.log_info('adding channel %s' % self)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 73,
                  "endLine": 44,
                  "endColumn": 8,
                  "snippet": {
                    "text": "library (and nearly all do), then you can use it to juggle multiple\ncommunication channels at once; doing other work while your I/O is taking\nplace in the \"background.\"  Although this strategy can seem strange and\ncomplex, especially at first, it is in many ways easier to understand and\ncontrol than multi-threaded programming. The module documented here solves\nmany of the difficult problems for you, making the task of building\nsophisticated high-performance network servers and clients a snap.\n\"\"\"\n",
                    "rendered": {
                      "text": "library (and nearly all do), then you can use it to juggle multiple\ncommunication channels at once; doing other work while your I/O is taking\nplace in the \"background.\"  Although this strategy can seem strange and\ncomplex, especially at first, it is in many ways easier to understand and\ncontrol than multi-threaded programming. The module documented here solves\nmany of the difficult problems for you, making the task of building\nsophisticated high-performance network servers and clients a snap.\n\"\"\"\n",
                      "markdown": "`library (and nearly all do), then you can use it to juggle multiple\ncommunication channels at once; doing other work while your I/O is taking\nplace in the \"background.\"  Although this strategy can seem strange and\ncomplex, especially at first, it is in many ways easier to understand and\ncontrol than multi-threaded programming. The module documented here solves\nmany of the difficult problems for you, making the task of building\nsophisticated high-performance network servers and clients a snap.\n\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 19,
                  "endLine": 43,
                  "endColumn": 23,
                  "snippet": {
                    "text": "library (and nearly all do), then you can use it to juggle multiple\ncommunication channels at once; doing other work while your I/O is taking\nplace in the \"background.\"  Although this strategy can seem strange and\ncomplex, especially at first, it is in many ways easier to understand and\ncontrol than multi-threaded programming. The module documented here solves\nmany of the difficult problems for you, making the task of building\nsophisticated high-performance network servers and clients a snap.\n",
                    "rendered": {
                      "text": "library (and nearly all do), then you can use it to juggle multiple\ncommunication channels at once; doing other work while your I/O is taking\nplace in the \"background.\"  Although this strategy can seem strange and\ncomplex, especially at first, it is in many ways easier to understand and\ncontrol than multi-threaded programming. The module documented here solves\nmany of the difficult problems for you, making the task of building\nsophisticated high-performance network servers and clients a snap.\n",
                      "markdown": "`library (and nearly all do), then you can use it to juggle multiple\ncommunication channels at once; doing other work while your I/O is taking\nplace in the \"background.\"  Although this strategy can seem strange and\ncomplex, especially at first, it is in many ways easier to understand and\ncontrol than multi-threaded programming. The module documented here solves\nmany of the difficult problems for you, making the task of building\nsophisticated high-performance network servers and clients a snap.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 22,
                  "endLine": 41,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nIf your operating system supports the select() system call in its I/O\nlibrary (and nearly all do), then you can use it to juggle multiple\ncommunication channels at once; doing other work while your I/O is taking\nplace in the \"background.\"  Although this strategy can seem strange and\ncomplex, especially at first, it is in many ways easier to understand and\ncontrol than multi-threaded programming. The module documented here solves\n",
                    "rendered": {
                      "text": "\nIf your operating system supports the select() system call in its I/O\nlibrary (and nearly all do), then you can use it to juggle multiple\ncommunication channels at once; doing other work while your I/O is taking\nplace in the \"background.\"  Although this strategy can seem strange and\ncomplex, especially at first, it is in many ways easier to understand and\ncontrol than multi-threaded programming. The module documented here solves\n",
                      "markdown": "`\nIf your operating system supports the select() system call in its I/O\nlibrary (and nearly all do), then you can use it to juggle multiple\ncommunication channels at once; doing other work while your I/O is taking\nplace in the \"background.\"  Although this strategy can seem strange and\ncomplex, especially at first, it is in many ways easier to understand and\ncontrol than multi-threaded programming. The module documented here solves\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 14,
                  "endLine": 31,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\"\"\"Basic infrastructure for asynchronous socket service clients and servers.\n\nThere are only two ways to have a program on a single processor do \"more\nthan one thing at a time\".  Multi-threaded programming is the simplest and\nmost popular way to do it, but there is another very different technique,\nthat lets you have nearly all the advantages of multi-threading, without\nactually using multiple threads. it's really only practical if your program\n",
                    "rendered": {
                      "text": "\"\"\"Basic infrastructure for asynchronous socket service clients and servers.\n\nThere are only two ways to have a program on a single processor do \"more\nthan one thing at a time\".  Multi-threaded programming is the simplest and\nmost popular way to do it, but there is another very different technique,\nthat lets you have nearly all the advantages of multi-threading, without\nactually using multiple threads. it's really only practical if your program\n",
                      "markdown": "`\"\"\"Basic infrastructure for asynchronous socket service clients and servers.\n\nThere are only two ways to have a program on a single processor do \"more\nthan one thing at a time\".  Multi-threaded programming is the simplest and\nmost popular way to do it, but there is another very different technique,\nthat lets you have nearly all the advantages of multi-threading, without\nactually using multiple threads. it's really only practical if your program\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 7,
                  "endLine": 154,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        map = socket_map\n    if timeout is not None:\n        # timeout is in milliseconds\n        timeout = int(timeout*1000)\n    pollster = select.poll()\n    if map:\n        for fd, obj in map.items():\n",
                    "rendered": {
                      "text": "        map = socket_map\n    if timeout is not None:\n        # timeout is in milliseconds\n        timeout = int(timeout*1000)\n    pollster = select.poll()\n    if map:\n        for fd, obj in map.items():\n",
                      "markdown": "`        map = socket_map\n    if timeout is not None:\n        # timeout is in milliseconds\n        timeout = int(timeout*1000)\n    pollster = select.poll()\n    if map:\n        for fd, obj in map.items():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 9,
                  "endLine": 153,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    if map is None:\n        map = socket_map\n    if timeout is not None:\n        # timeout is in milliseconds\n        timeout = int(timeout*1000)\n    pollster = select.poll()\n    if map:\n",
                    "rendered": {
                      "text": "    if map is None:\n        map = socket_map\n    if timeout is not None:\n        # timeout is in milliseconds\n        timeout = int(timeout*1000)\n    pollster = select.poll()\n    if map:\n",
                      "markdown": "`    if map is None:\n        map = socket_map\n    if timeout is not None:\n        # timeout is in milliseconds\n        timeout = int(timeout*1000)\n    pollster = select.poll()\n    if map:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 6,
                  "endLine": 152,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    # Use the poll() support added to the select module in Python 2.0\n    if map is None:\n        map = socket_map\n    if timeout is not None:\n        # timeout is in milliseconds\n        timeout = int(timeout*1000)\n    pollster = select.poll()\n",
                    "rendered": {
                      "text": "    # Use the poll() support added to the select module in Python 2.0\n    if map is None:\n        map = socket_map\n    if timeout is not None:\n        # timeout is in milliseconds\n        timeout = int(timeout*1000)\n    pollster = select.poll()\n",
                      "markdown": "`    # Use the poll() support added to the select module in Python 2.0\n    if map is None:\n        map = socket_map\n    if timeout is not None:\n        # timeout is in milliseconds\n        timeout = int(timeout*1000)\n    pollster = select.poll()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 6,
                  "endLine": 53,
                  "snippet": {
                    "text": "import select\nimport socket\nimport sys\nimport time\n\nimport os\nfrom errno import EALREADY, EINPROGRESS, EWOULDBLOCK, ECONNRESET, \\\n     ENOTCONN, ESHUTDOWN, EINTR, EISCONN, errorcode\n",
                    "rendered": {
                      "text": "import select\nimport socket\nimport sys\nimport time\n\nimport os\nfrom errno import EALREADY, EINPROGRESS, EWOULDBLOCK, ECONNRESET, \\\n     ENOTCONN, ESHUTDOWN, EINTR, EISCONN, errorcode\n",
                      "markdown": "`import select\nimport socket\nimport sys\nimport time\n\nimport os\nfrom errno import EALREADY, EINPROGRESS, EWOULDBLOCK, ECONNRESET, \\\n     ENOTCONN, ESHUTDOWN, EINTR, EISCONN, errorcode\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asyncore_25.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 47,
                  "endLine": 28,
                  "endColumn": 56,
                  "snippet": {
                    "text": "# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n# ======================================================================\n\n\"\"\"Basic infrastructure for asynchronous socket service clients and servers.\n\nThere are only two ways to have a program on a single processor do \"more\nthan one thing at a time\".  Multi-threaded programming is the simplest and\n",
                    "rendered": {
                      "text": "# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n# ======================================================================\n\n\"\"\"Basic infrastructure for asynchronous socket service clients and servers.\n\nThere are only two ways to have a program on a single processor do \"more\nthan one thing at a time\".  Multi-threaded programming is the simplest and\n",
                      "markdown": "`# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n# ======================================================================\n\n\"\"\"Basic infrastructure for asynchronous socket service clients and servers.\n\nThere are only two ways to have a program on a single processor do \"more\nthan one thing at a time\".  Multi-threaded programming is the simplest and\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asynchat_25.py"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 52,
                  "endLine": 277,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        else:\n            return 0, None\n\n# Given 'haystack', see if any prefix of 'needle' is at its end.  This\n# assumes an exact match has already been checked.  Return the number of\n# characters matched.\n# for example:\n",
                    "rendered": {
                      "text": "        else:\n            return 0, None\n\n# Given 'haystack', see if any prefix of 'needle' is at its end.  This\n# assumes an exact match has already been checked.  Return the number of\n# characters matched.\n# for example:\n",
                      "markdown": "`        else:\n            return 0, None\n\n# Given 'haystack', see if any prefix of 'needle' is at its end.  This\n# assumes an exact match has already been checked.  Return the number of\n# characters matched.\n# for example:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asynchat_25.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 38,
                  "endLine": 45,
                  "endColumn": 47,
                  "snippet": {
                    "text": "order to process the single-line greeting.  Just before issuing a\n'LIST' command you'll set it to '\\r\\n.\\r\\n'.  The output of the LIST\ncommand will be accumulated (using your own 'collect_incoming_data'\nmethod) up to the terminator, and then control will be returned to\nyou - by calling your self.found_terminator() method.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "order to process the single-line greeting.  Just before issuing a\n'LIST' command you'll set it to '\\r\\n.\\r\\n'.  The output of the LIST\ncommand will be accumulated (using your own 'collect_incoming_data'\nmethod) up to the terminator, and then control will be returned to\nyou - by calling your self.found_terminator() method.\n\"\"\"\n\n",
                      "markdown": "`order to process the single-line greeting.  Just before issuing a\n'LIST' command you'll set it to '\\r\\n.\\r\\n'.  The output of the LIST\ncommand will be accumulated (using your own 'collect_incoming_data'\nmethod) up to the terminator, and then control will be returned to\nyou - by calling your self.found_terminator() method.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asynchat_25.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 53,
                  "endLine": 40,
                  "endColumn": 57,
                  "snippet": {
                    "text": "receipt.\n\nfor example:\nSay you build an async nntp client using this class.  At the start\nof the connection, you'll have self.terminator set to '\\r\\n', in\norder to process the single-line greeting.  Just before issuing a\n'LIST' command you'll set it to '\\r\\n.\\r\\n'.  The output of the LIST\n",
                    "rendered": {
                      "text": "receipt.\n\nfor example:\nSay you build an async nntp client using this class.  At the start\nof the connection, you'll have self.terminator set to '\\r\\n', in\norder to process the single-line greeting.  Just before issuing a\n'LIST' command you'll set it to '\\r\\n.\\r\\n'.  The output of the LIST\n",
                      "markdown": "`receipt.\n\nfor example:\nSay you build an async nntp client using this class.  At the start\nof the connection, you'll have self.terminator set to '\\r\\n', in\norder to process the single-line greeting.  Just before issuing a\n'LIST' command you'll set it to '\\r\\n.\\r\\n'.  The output of the LIST\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/asynchat_25.py"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 30,
                  "endLine": 34,
                  "endColumn": 34,
                  "snippet": {
                    "text": "sends a 'command', and the other sends a response (examples would be\nthe common internet protocols - smtp, nntp, ftp, etc..).\n\nThe handle_read() method looks at the input stream for the current\n'terminator' (usually '\\r\\n' for single-line responses, '\\r\\n.\\r\\n'\nfor multi-line output), calling self.found_terminator() on its\nreceipt.\n",
                    "rendered": {
                      "text": "sends a 'command', and the other sends a response (examples would be\nthe common internet protocols - smtp, nntp, ftp, etc..).\n\nThe handle_read() method looks at the input stream for the current\n'terminator' (usually '\\r\\n' for single-line responses, '\\r\\n.\\r\\n'\nfor multi-line output), calling self.found_terminator() on its\nreceipt.\n",
                      "markdown": "`sends a 'command', and the other sends a response (examples would be\nthe common internet protocols - smtp, nntp, ftp, etc..).\n\nThe handle_read() method looks at the input stream for the current\n'terminator' (usually '\\r\\n' for single-line responses, '\\r\\n.\\r\\n'\nfor multi-line output), calling self.found_terminator() on its\nreceipt.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/events.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 33,
                  "endLine": 119,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        self.from_state = from_state\n        self.expected = expected\n        # we eagerly render these so if the process pid, etc changes beneath\n        # us, we stash the values at the time the event was sent\n        self.extra_values = self.get_extra_values()\n\n    def payload(self):\n",
                    "rendered": {
                      "text": "        self.from_state = from_state\n        self.expected = expected\n        # we eagerly render these so if the process pid, etc changes beneath\n        # us, we stash the values at the time the event was sent\n        self.extra_values = self.get_extra_values()\n\n    def payload(self):\n",
                      "markdown": "`        self.from_state = from_state\n        self.expected = expected\n        # we eagerly render these so if the process pid, etc changes beneath\n        # us, we stash the values at the time the event was sent\n        self.extra_values = self.get_extra_values()\n\n    def payload(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/events.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 40,
                  "endLine": 119,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        self.from_state = from_state\n        self.expected = expected\n        # we eagerly render these so if the process pid, etc changes beneath\n        # us, we stash the values at the time the event was sent\n        self.extra_values = self.get_extra_values()\n\n    def payload(self):\n",
                    "rendered": {
                      "text": "        self.from_state = from_state\n        self.expected = expected\n        # we eagerly render these so if the process pid, etc changes beneath\n        # us, we stash the values at the time the event was sent\n        self.extra_values = self.get_extra_values()\n\n    def payload(self):\n",
                      "markdown": "`        self.from_state = from_state\n        self.expected = expected\n        # we eagerly render these so if the process pid, etc changes beneath\n        # us, we stash the values at the time the event was sent\n        self.extra_values = self.get_extra_values()\n\n    def payload(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/events.py"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 16,
                  "endLine": 44,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        # % operator, otherwise implicit encodings to ASCII can cause\n        # failures\n        fmt = as_string('processname:%s groupname:%s pid:%s channel:%s\\n%s')\n        result = fmt % (as_string(self.process.config.name),\n                        as_string(groupname), self.pid,\n                        as_string(self.channel), data)\n        return result\n",
                    "rendered": {
                      "text": "        # % operator, otherwise implicit encodings to ASCII can cause\n        # failures\n        fmt = as_string('processname:%s groupname:%s pid:%s channel:%s\\n%s')\n        result = fmt % (as_string(self.process.config.name),\n                        as_string(groupname), self.pid,\n                        as_string(self.channel), data)\n        return result\n",
                      "markdown": "`        # % operator, otherwise implicit encodings to ASCII can cause\n        # failures\n        fmt = as_string('processname:%s groupname:%s pid:%s channel:%s\\n%s')\n        result = fmt % (as_string(self.process.config.name),\n                        as_string(groupname), self.pid,\n                        as_string(self.channel), data)\n        return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/events.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 7,
                  "endLine": 43,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        # On Python 2, stuff needs to be in Unicode before invoking the\n        # % operator, otherwise implicit encodings to ASCII can cause\n        # failures\n        fmt = as_string('processname:%s groupname:%s pid:%s channel:%s\\n%s')\n        result = fmt % (as_string(self.process.config.name),\n                        as_string(groupname), self.pid,\n                        as_string(self.channel), data)\n",
                    "rendered": {
                      "text": "        # On Python 2, stuff needs to be in Unicode before invoking the\n        # % operator, otherwise implicit encodings to ASCII can cause\n        # failures\n        fmt = as_string('processname:%s groupname:%s pid:%s channel:%s\\n%s')\n        result = fmt % (as_string(self.process.config.name),\n                        as_string(groupname), self.pid,\n                        as_string(self.channel), data)\n",
                      "markdown": "`        # On Python 2, stuff needs to be in Unicode before invoking the\n        # % operator, otherwise implicit encodings to ASCII can cause\n        # failures\n        fmt = as_string('processname:%s groupname:%s pid:%s channel:%s\\n%s')\n        result = fmt % (as_string(self.process.config.name),\n                        as_string(groupname), self.pid,\n                        as_string(self.channel), data)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_poller.py"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 31,
                  "endLine": 361,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    def __init__(self, result=None, error=None):\n        result = result or {}\n        self.readables = result.get('readables', [])\n        self.writables = result.get('writables', [])\n        self.error = error\n\n    def select(self, r, w, x, timeout):\n",
                    "rendered": {
                      "text": "    def __init__(self, result=None, error=None):\n        result = result or {}\n        self.readables = result.get('readables', [])\n        self.writables = result.get('writables', [])\n        self.error = error\n\n    def select(self, r, w, x, timeout):\n",
                      "markdown": "`    def __init__(self, result=None, error=None):\n        result = result or {}\n        self.readables = result.get('readables', [])\n        self.writables = result.get('writables', [])\n        self.error = error\n\n    def select(self, r, w, x, timeout):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_poller.py"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 31,
                  "endLine": 360,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    '''\n    def __init__(self, result=None, error=None):\n        result = result or {}\n        self.readables = result.get('readables', [])\n        self.writables = result.get('writables', [])\n        self.error = error\n\n",
                    "rendered": {
                      "text": "    '''\n    def __init__(self, result=None, error=None):\n        result = result or {}\n        self.readables = result.get('readables', [])\n        self.writables = result.get('writables', [])\n        self.error = error\n\n",
                      "markdown": "`    '''\n    def __init__(self, result=None, error=None):\n        result = result or {}\n        self.readables = result.get('readables', [])\n        self.writables = result.get('writables', [])\n        self.error = error\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1965,
                  "startColumn": 65,
                  "endLine": 1965,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        self.assertEqual(options.server_configs[0]['host'], '')\n        self.assertEqual(options.server_configs[0]['port'], 9210)\n        self.assertEqual(options.server_configs[0]['username'], 'someuser')\n        self.assertEqual(options.server_configs[0]['password'], 'passwordhere')\n        # cat1\n        cat1 = options.process_group_configs[0]\n        self.assertEqual(cat1.name, 'cat1')\n",
                    "rendered": {
                      "text": "        self.assertEqual(options.server_configs[0]['host'], '')\n        self.assertEqual(options.server_configs[0]['port'], 9210)\n        self.assertEqual(options.server_configs[0]['username'], 'someuser')\n        self.assertEqual(options.server_configs[0]['password'], 'passwordhere')\n        # cat1\n        cat1 = options.process_group_configs[0]\n        self.assertEqual(cat1.name, 'cat1')\n",
                      "markdown": "`        self.assertEqual(options.server_configs[0]['host'], '')\n        self.assertEqual(options.server_configs[0]['port'], 9210)\n        self.assertEqual(options.server_configs[0]['username'], 'someuser')\n        self.assertEqual(options.server_configs[0]['password'], 'passwordhere')\n        # cat1\n        cat1 = options.process_group_configs[0]\n        self.assertEqual(cat1.name, 'cat1')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1965,
                  "startColumn": 52,
                  "endLine": 1965,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        self.assertEqual(options.server_configs[0]['host'], '')\n        self.assertEqual(options.server_configs[0]['port'], 9210)\n        self.assertEqual(options.server_configs[0]['username'], 'someuser')\n        self.assertEqual(options.server_configs[0]['password'], 'passwordhere')\n        # cat1\n        cat1 = options.process_group_configs[0]\n        self.assertEqual(cat1.name, 'cat1')\n",
                    "rendered": {
                      "text": "        self.assertEqual(options.server_configs[0]['host'], '')\n        self.assertEqual(options.server_configs[0]['port'], 9210)\n        self.assertEqual(options.server_configs[0]['username'], 'someuser')\n        self.assertEqual(options.server_configs[0]['password'], 'passwordhere')\n        # cat1\n        cat1 = options.process_group_configs[0]\n        self.assertEqual(cat1.name, 'cat1')\n",
                      "markdown": "`        self.assertEqual(options.server_configs[0]['host'], '')\n        self.assertEqual(options.server_configs[0]['port'], 9210)\n        self.assertEqual(options.server_configs[0]['username'], 'someuser')\n        self.assertEqual(options.server_configs[0]['password'], 'passwordhere')\n        # cat1\n        cat1 = options.process_group_configs[0]\n        self.assertEqual(cat1.name, 'cat1')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1912,
                  "startColumn": 31,
                  "endLine": 1912,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            'ENV_USER': 'johndoe',\n            'ENV_HTSRV_PORT': '9210',\n            'ENV_HTSRV_USER': 'someuser',\n            'ENV_HTSRV_PASS': 'passwordhere',\n            'ENV_SUPD_LOGFILE_MAXBYTES': '51MB',\n            'ENV_SUPD_LOGFILE_BACKUPS': '10',\n            'ENV_SUPD_LOGLEVEL': 'info',\n",
                    "rendered": {
                      "text": "            'ENV_USER': 'johndoe',\n            'ENV_HTSRV_PORT': '9210',\n            'ENV_HTSRV_USER': 'someuser',\n            'ENV_HTSRV_PASS': 'passwordhere',\n            'ENV_SUPD_LOGFILE_MAXBYTES': '51MB',\n            'ENV_SUPD_LOGFILE_BACKUPS': '10',\n            'ENV_SUPD_LOGLEVEL': 'info',\n",
                      "markdown": "`            'ENV_USER': 'johndoe',\n            'ENV_HTSRV_PORT': '9210',\n            'ENV_HTSRV_USER': 'someuser',\n            'ENV_HTSRV_PASS': 'passwordhere',\n            'ENV_SUPD_LOGFILE_MAXBYTES': '51MB',\n            'ENV_SUPD_LOGFILE_BACKUPS': '10',\n            'ENV_SUPD_LOGLEVEL': 'info',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1887,
                  "startColumn": 8,
                  "endLine": 1887,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        [inet_http_server]\n        port=*:%(ENV_HTSRV_PORT)s\n        username=%(ENV_HTSRV_USER)s\n        password=%(ENV_HTSRV_PASS)s\n\n        [program:cat1]\n        command=%(ENV_CAT1_COMMAND)s --logdir=%(ENV_CAT1_COMMAND_LOGDIR)s\n",
                    "rendered": {
                      "text": "        [inet_http_server]\n        port=*:%(ENV_HTSRV_PORT)s\n        username=%(ENV_HTSRV_USER)s\n        password=%(ENV_HTSRV_PASS)s\n\n        [program:cat1]\n        command=%(ENV_CAT1_COMMAND)s --logdir=%(ENV_CAT1_COMMAND_LOGDIR)s\n",
                      "markdown": "`        [inet_http_server]\n        port=*:%(ENV_HTSRV_PORT)s\n        username=%(ENV_HTSRV_USER)s\n        password=%(ENV_HTSRV_PASS)s\n\n        [program:cat1]\n        command=%(ENV_CAT1_COMMAND)s --logdir=%(ENV_CAT1_COMMAND_LOGDIR)s\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1371,
                  "startColumn": 50,
                  "endLine": 1371,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            self.assertEqual(exc.args[0],\n                'Section [inet_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afinet_no_port(self):\n",
                    "rendered": {
                      "text": "            self.assertEqual(exc.args[0],\n                'Section [inet_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afinet_no_port(self):\n",
                      "markdown": "`            self.assertEqual(exc.args[0],\n                'Section [inet_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afinet_no_port(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1370,
                  "startColumn": 52,
                  "endLine": 1370,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                'Section [inet_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n",
                    "rendered": {
                      "text": "        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                'Section [inet_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n",
                      "markdown": "`        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                'Section [inet_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1360,
                  "startColumn": 17,
                  "endLine": 1360,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        [supervisord]\n\n        [inet_http_server]\n        password=passwordhere\n        ;no username=\n        \"\"\")\n        instance.configfile = StringIO(text)\n",
                    "rendered": {
                      "text": "        [supervisord]\n\n        [inet_http_server]\n        password=passwordhere\n        ;no username=\n        \"\"\")\n        instance.configfile = StringIO(text)\n",
                      "markdown": "`        [supervisord]\n\n        [inet_http_server]\n        password=passwordhere\n        ;no username=\n        \"\"\")\n        instance.configfile = StringIO(text)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1360,
                  "startColumn": 8,
                  "endLine": 1360,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        [supervisord]\n\n        [inet_http_server]\n        password=passwordhere\n        ;no username=\n        \"\"\")\n        instance.configfile = StringIO(text)\n",
                    "rendered": {
                      "text": "        [supervisord]\n\n        [inet_http_server]\n        password=passwordhere\n        ;no username=\n        \"\"\")\n        instance.configfile = StringIO(text)\n",
                      "markdown": "`        [supervisord]\n\n        [inet_http_server]\n        password=passwordhere\n        ;no username=\n        \"\"\")\n        instance.configfile = StringIO(text)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1354,
                  "startColumn": 28,
                  "endLine": 1354,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afinet_password_without_username(self):\n        instance = self._makeOne()\n        text = lstrip(\"\"\"\\\n        [supervisord]\n",
                    "rendered": {
                      "text": "                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afinet_password_without_username(self):\n        instance = self._makeOne()\n        text = lstrip(\"\"\"\\\n        [supervisord]\n",
                      "markdown": "`                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afinet_password_without_username(self):\n        instance = self._makeOne()\n        text = lstrip(\"\"\"\\\n        [supervisord]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1351,
                  "startColumn": 50,
                  "endLine": 1351,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            self.assertEqual(exc.args[0],\n                'Section [inet_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afinet_password_without_username(self):\n",
                    "rendered": {
                      "text": "            self.assertEqual(exc.args[0],\n                'Section [inet_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afinet_password_without_username(self):\n",
                      "markdown": "`            self.assertEqual(exc.args[0],\n                'Section [inet_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afinet_password_without_username(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1350,
                  "startColumn": 52,
                  "endLine": 1350,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                'Section [inet_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n",
                    "rendered": {
                      "text": "        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                'Section [inet_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n",
                      "markdown": "`        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                'Section [inet_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1340,
                  "startColumn": 12,
                  "endLine": 1340,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        [inet_http_server]\n        file=/tmp/supvtest.sock\n        username=usernamehere\n        ;no password=\n        chmod=0755\n        \"\"\")\n        instance.configfile = StringIO(text)\n",
                    "rendered": {
                      "text": "        [inet_http_server]\n        file=/tmp/supvtest.sock\n        username=usernamehere\n        ;no password=\n        chmod=0755\n        \"\"\")\n        instance.configfile = StringIO(text)\n",
                      "markdown": "`        [inet_http_server]\n        file=/tmp/supvtest.sock\n        username=usernamehere\n        ;no password=\n        chmod=0755\n        \"\"\")\n        instance.configfile = StringIO(text)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1332,
                  "startColumn": 45,
                  "endLine": 1332,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        self.assertEqual(serverconf['file'],\n            os.path.join(here, 'supervisord.sock'))\n\n    def test_options_afinet_username_without_password(self):\n        instance = self._makeOne()\n        text = lstrip(\"\"\"\\\n        [supervisord]\n",
                    "rendered": {
                      "text": "        self.assertEqual(serverconf['file'],\n            os.path.join(here, 'supervisord.sock'))\n\n    def test_options_afinet_username_without_password(self):\n        instance = self._makeOne()\n        text = lstrip(\"\"\"\\\n        [supervisord]\n",
                      "markdown": "`        self.assertEqual(serverconf['file'],\n            os.path.join(here, 'supervisord.sock'))\n\n    def test_options_afinet_username_without_password(self):\n        instance = self._makeOne()\n        text = lstrip(\"\"\"\\\n        [supervisord]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1305,
                  "startColumn": 50,
                  "endLine": 1305,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            self.assertEqual(exc.args[0],\n                'Section [unix_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afunix_file_expands_here(self):\n",
                    "rendered": {
                      "text": "            self.assertEqual(exc.args[0],\n                'Section [unix_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afunix_file_expands_here(self):\n",
                      "markdown": "`            self.assertEqual(exc.args[0],\n                'Section [unix_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afunix_file_expands_here(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1304,
                  "startColumn": 52,
                  "endLine": 1304,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                'Section [unix_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n",
                    "rendered": {
                      "text": "        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                'Section [unix_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n",
                      "markdown": "`        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                'Section [unix_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1294,
                  "startColumn": 17,
                  "endLine": 1294,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        ;no username=\n        password=passwordhere\n        chmod=0755\n        \"\"\")\n        instance.configfile = StringIO(text)\n",
                    "rendered": {
                      "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        ;no username=\n        password=passwordhere\n        chmod=0755\n        \"\"\")\n        instance.configfile = StringIO(text)\n",
                      "markdown": "`        [unix_http_server]\n        file=/tmp/supvtest.sock\n        ;no username=\n        password=passwordhere\n        chmod=0755\n        \"\"\")\n        instance.configfile = StringIO(text)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1294,
                  "startColumn": 8,
                  "endLine": 1294,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        ;no username=\n        password=passwordhere\n        chmod=0755\n        \"\"\")\n        instance.configfile = StringIO(text)\n",
                    "rendered": {
                      "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        ;no username=\n        password=passwordhere\n        chmod=0755\n        \"\"\")\n        instance.configfile = StringIO(text)\n",
                      "markdown": "`        [unix_http_server]\n        file=/tmp/supvtest.sock\n        ;no username=\n        password=passwordhere\n        chmod=0755\n        \"\"\")\n        instance.configfile = StringIO(text)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1286,
                  "startColumn": 28,
                  "endLine": 1286,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afunix_password_without_username(self):\n        instance = self._makeOne()\n        text = lstrip(\"\"\"\\\n        [supervisord]\n",
                    "rendered": {
                      "text": "                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afunix_password_without_username(self):\n        instance = self._makeOne()\n        text = lstrip(\"\"\"\\\n        [supervisord]\n",
                      "markdown": "`                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afunix_password_without_username(self):\n        instance = self._makeOne()\n        text = lstrip(\"\"\"\\\n        [supervisord]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1283,
                  "startColumn": 50,
                  "endLine": 1283,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            self.assertEqual(exc.args[0],\n                'Section [unix_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afunix_password_without_username(self):\n",
                    "rendered": {
                      "text": "            self.assertEqual(exc.args[0],\n                'Section [unix_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afunix_password_without_username(self):\n",
                      "markdown": "`            self.assertEqual(exc.args[0],\n                'Section [unix_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n    def test_options_afunix_password_without_username(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1282,
                  "startColumn": 52,
                  "endLine": 1282,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                'Section [unix_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n",
                    "rendered": {
                      "text": "        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                'Section [unix_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n",
                      "markdown": "`        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                'Section [unix_http_server] contains incomplete '\n                'authentication: If a username or a password is '\n                'specified, both the username and password must '\n                'be specified')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1272,
                  "startColumn": 12,
                  "endLine": 1272,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=usernamehere\n        ;no password=\n        chmod=0755\n        \"\"\")\n        instance.configfile = StringIO(text)\n",
                    "rendered": {
                      "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=usernamehere\n        ;no password=\n        chmod=0755\n        \"\"\")\n        instance.configfile = StringIO(text)\n",
                      "markdown": "`        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=usernamehere\n        ;no password=\n        chmod=0755\n        \"\"\")\n        instance.configfile = StringIO(text)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1264,
                  "startColumn": 45,
                  "endLine": 1264,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            self.assertEqual(exc.args[0],\n                \"section [unix_http_server] has no file value\")\n\n    def test_options_afunix_username_without_password(self):\n        instance = self._makeOne()\n        text = lstrip(\"\"\"\\\n        [supervisord]\n",
                    "rendered": {
                      "text": "            self.assertEqual(exc.args[0],\n                \"section [unix_http_server] has no file value\")\n\n    def test_options_afunix_username_without_password(self):\n        instance = self._makeOne()\n        text = lstrip(\"\"\"\\\n        [supervisord]\n",
                      "markdown": "`            self.assertEqual(exc.args[0],\n                \"section [unix_http_server] has no file value\")\n\n    def test_options_afunix_username_without_password(self):\n        instance = self._makeOne()\n        text = lstrip(\"\"\"\\\n        [supervisord]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1196,
                  "startColumn": 17,
                  "endLine": 1196,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=johndoe\n        password=passwordhere\n        chmod=0755\n\n        [supervisord]\n",
                    "rendered": {
                      "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=johndoe\n        password=passwordhere\n        chmod=0755\n\n        [supervisord]\n",
                      "markdown": "`        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=johndoe\n        password=passwordhere\n        chmod=0755\n\n        [supervisord]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1196,
                  "startColumn": 8,
                  "endLine": 1196,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=johndoe\n        password=passwordhere\n        chmod=0755\n\n        [supervisord]\n",
                    "rendered": {
                      "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=johndoe\n        password=passwordhere\n        chmod=0755\n\n        [supervisord]\n",
                      "markdown": "`        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=johndoe\n        password=passwordhere\n        chmod=0755\n\n        [supervisord]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1172,
                  "startColumn": 17,
                  "endLine": 1172,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=johndoe\n        password=passwordhere\n\n        [supervisord]\n        ; ...\n",
                    "rendered": {
                      "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=johndoe\n        password=passwordhere\n\n        [supervisord]\n        ; ...\n",
                      "markdown": "`        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=johndoe\n        password=passwordhere\n\n        [supervisord]\n        ; ...\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1172,
                  "startColumn": 8,
                  "endLine": 1172,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=johndoe\n        password=passwordhere\n\n        [supervisord]\n        ; ...\n",
                    "rendered": {
                      "text": "        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=johndoe\n        password=passwordhere\n\n        [supervisord]\n        ; ...\n",
                      "markdown": "`        [unix_http_server]\n        file=/tmp/supvtest.sock\n        username=johndoe\n        password=passwordhere\n\n        [supervisord]\n        ; ...\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 53,
                  "endLine": 705,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        self.assertEqual(instance.server_configs[0]['host'], '127.0.0.1')\n        self.assertEqual(instance.server_configs[0]['port'], 8999)\n        self.assertEqual(instance.server_configs[0]['username'], 'chrism')\n        self.assertEqual(instance.server_configs[0]['password'], 'foo')\n\n        self.assertEqual(instance.nocleanup, True)\n        self.assertEqual(instance.minfds, 2048)\n",
                    "rendered": {
                      "text": "        self.assertEqual(instance.server_configs[0]['host'], '127.0.0.1')\n        self.assertEqual(instance.server_configs[0]['port'], 8999)\n        self.assertEqual(instance.server_configs[0]['username'], 'chrism')\n        self.assertEqual(instance.server_configs[0]['password'], 'foo')\n\n        self.assertEqual(instance.nocleanup, True)\n        self.assertEqual(instance.minfds, 2048)\n",
                      "markdown": "`        self.assertEqual(instance.server_configs[0]['host'], '127.0.0.1')\n        self.assertEqual(instance.server_configs[0]['port'], 8999)\n        self.assertEqual(instance.server_configs[0]['username'], 'chrism')\n        self.assertEqual(instance.server_configs[0]['password'], 'foo')\n\n        self.assertEqual(instance.nocleanup, True)\n        self.assertEqual(instance.minfds, 2048)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 553,
                  "startColumn": 52,
                  "endLine": 553,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        self.assertEqual(options.server_configs[0]['host'], '127.0.0.1')\n        self.assertEqual(options.server_configs[0]['port'], 8999)\n        self.assertEqual(options.server_configs[0]['username'], 'chrism')\n        self.assertEqual(options.server_configs[0]['password'], 'foo')\n        self.assertEqual(options.nocleanup, True)\n        self.assertEqual(options.minfds, 2048)\n        self.assertEqual(options.minprocs, 300)\n",
                    "rendered": {
                      "text": "        self.assertEqual(options.server_configs[0]['host'], '127.0.0.1')\n        self.assertEqual(options.server_configs[0]['port'], 8999)\n        self.assertEqual(options.server_configs[0]['username'], 'chrism')\n        self.assertEqual(options.server_configs[0]['password'], 'foo')\n        self.assertEqual(options.nocleanup, True)\n        self.assertEqual(options.minfds, 2048)\n        self.assertEqual(options.minprocs, 300)\n",
                      "markdown": "`        self.assertEqual(options.server_configs[0]['host'], '127.0.0.1')\n        self.assertEqual(options.server_configs[0]['port'], 8999)\n        self.assertEqual(options.server_configs[0]['username'], 'chrism')\n        self.assertEqual(options.server_configs[0]['password'], 'foo')\n        self.assertEqual(options.nocleanup, True)\n        self.assertEqual(options.minfds, 2048)\n        self.assertEqual(options.minprocs, 300)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 8,
                  "endLine": 481,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        [inet_http_server]\n        port=127.0.0.1:8999\n        username=chrism\n        password=foo\n\n        [program:cat1]\n        command=/bin/cat\n",
                    "rendered": {
                      "text": "        [inet_http_server]\n        port=127.0.0.1:8999\n        username=chrism\n        password=foo\n\n        [program:cat1]\n        command=/bin/cat\n",
                      "markdown": "`        [inet_http_server]\n        port=127.0.0.1:8999\n        username=chrism\n        password=foo\n\n        [program:cat1]\n        command=/bin/cat\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 44,
                  "endLine": 370,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        self.assertEqual(options.prompt, 'xsupervisor')\n        self.assertEqual(options.serverurl, 'http://localhost:9210')\n        self.assertEqual(options.username, 'someuser')\n        self.assertEqual(options.password, 'passwordhere')\n        self.assertEqual(options.history_file, '/path/to/histdir/.supervisorctl.hist')\n\n    def test_options_supervisorctl_section_expands_here(self):\n",
                    "rendered": {
                      "text": "        self.assertEqual(options.prompt, 'xsupervisor')\n        self.assertEqual(options.serverurl, 'http://localhost:9210')\n        self.assertEqual(options.username, 'someuser')\n        self.assertEqual(options.password, 'passwordhere')\n        self.assertEqual(options.history_file, '/path/to/histdir/.supervisorctl.hist')\n\n    def test_options_supervisorctl_section_expands_here(self):\n",
                      "markdown": "`        self.assertEqual(options.prompt, 'xsupervisor')\n        self.assertEqual(options.serverurl, 'http://localhost:9210')\n        self.assertEqual(options.username, 'someuser')\n        self.assertEqual(options.password, 'passwordhere')\n        self.assertEqual(options.history_file, '/path/to/histdir/.supervisorctl.hist')\n\n    def test_options_supervisorctl_section_expands_here(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 33,
                  "endLine": 370,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        self.assertEqual(options.prompt, 'xsupervisor')\n        self.assertEqual(options.serverurl, 'http://localhost:9210')\n        self.assertEqual(options.username, 'someuser')\n        self.assertEqual(options.password, 'passwordhere')\n        self.assertEqual(options.history_file, '/path/to/histdir/.supervisorctl.hist')\n\n    def test_options_supervisorctl_section_expands_here(self):\n",
                    "rendered": {
                      "text": "        self.assertEqual(options.prompt, 'xsupervisor')\n        self.assertEqual(options.serverurl, 'http://localhost:9210')\n        self.assertEqual(options.username, 'someuser')\n        self.assertEqual(options.password, 'passwordhere')\n        self.assertEqual(options.history_file, '/path/to/histdir/.supervisorctl.hist')\n\n    def test_options_supervisorctl_section_expands_here(self):\n",
                      "markdown": "`        self.assertEqual(options.prompt, 'xsupervisor')\n        self.assertEqual(options.serverurl, 'http://localhost:9210')\n        self.assertEqual(options.username, 'someuser')\n        self.assertEqual(options.password, 'passwordhere')\n        self.assertEqual(options.history_file, '/path/to/histdir/.supervisorctl.hist')\n\n    def test_options_supervisorctl_section_expands_here(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 59,
                  "endLine": 359,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                                       'ENV_USER': 'johndoe',\n                                       'ENV_SERVER_PORT': '9210',\n                                       'ENV_CLIENT_USER': 'someuser',\n                                       'ENV_CLIENT_PASS': 'passwordhere',\n                                       'ENV_CLIENT_PROMPT': 'xsupervisor',\n                                       'ENV_CLIENT_HIST_EXT': '.hist',\n                                      }\n",
                    "rendered": {
                      "text": "                                       'ENV_USER': 'johndoe',\n                                       'ENV_SERVER_PORT': '9210',\n                                       'ENV_CLIENT_USER': 'someuser',\n                                       'ENV_CLIENT_PASS': 'passwordhere',\n                                       'ENV_CLIENT_PROMPT': 'xsupervisor',\n                                       'ENV_CLIENT_HIST_EXT': '.hist',\n                                      }\n",
                      "markdown": "`                                       'ENV_USER': 'johndoe',\n                                       'ENV_SERVER_PORT': '9210',\n                                       'ENV_CLIENT_USER': 'someuser',\n                                       'ENV_CLIENT_PASS': 'passwordhere',\n                                       'ENV_CLIENT_PROMPT': 'xsupervisor',\n                                       'ENV_CLIENT_HIST_EXT': '.hist',\n                                      }\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 8,
                  "endLine": 348,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        [supervisorctl]\n        serverurl=http://localhost:%(ENV_SERVER_PORT)s\n        username=%(ENV_CLIENT_USER)s\n        password=%(ENV_CLIENT_PASS)s\n        prompt=%(ENV_CLIENT_PROMPT)s\n        history_file=/path/to/histdir/.supervisorctl%(ENV_CLIENT_HIST_EXT)s\n        \"\"\")\n",
                    "rendered": {
                      "text": "        [supervisorctl]\n        serverurl=http://localhost:%(ENV_SERVER_PORT)s\n        username=%(ENV_CLIENT_USER)s\n        password=%(ENV_CLIENT_PASS)s\n        prompt=%(ENV_CLIENT_PROMPT)s\n        history_file=/path/to/histdir/.supervisorctl%(ENV_CLIENT_HIST_EXT)s\n        \"\"\")\n",
                      "markdown": "`        [supervisorctl]\n        serverurl=http://localhost:%(ENV_SERVER_PORT)s\n        username=%(ENV_CLIENT_USER)s\n        password=%(ENV_CLIENT_PASS)s\n        prompt=%(ENV_CLIENT_PROMPT)s\n        history_file=/path/to/histdir/.supervisorctl%(ENV_CLIENT_HIST_EXT)s\n        \"\"\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 33,
                  "endLine": 305,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        self.assertEqual(options.prompt, 'mysupervisor')\n        self.assertEqual(options.serverurl, 'http://localhost:9001')\n        self.assertEqual(options.username, 'chris')\n        self.assertEqual(options.password, '123')\n        self.assertEqual(options.history_file, history_file)\n\n    def test_options_ignores_space_prefixed_inline_comments(self):\n",
                    "rendered": {
                      "text": "        self.assertEqual(options.prompt, 'mysupervisor')\n        self.assertEqual(options.serverurl, 'http://localhost:9001')\n        self.assertEqual(options.username, 'chris')\n        self.assertEqual(options.password, '123')\n        self.assertEqual(options.history_file, history_file)\n\n    def test_options_ignores_space_prefixed_inline_comments(self):\n",
                      "markdown": "`        self.assertEqual(options.prompt, 'mysupervisor')\n        self.assertEqual(options.serverurl, 'http://localhost:9001')\n        self.assertEqual(options.username, 'chris')\n        self.assertEqual(options.password, '123')\n        self.assertEqual(options.history_file, history_file)\n\n    def test_options_ignores_space_prefixed_inline_comments(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 8,
                  "endLine": 289,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        s = lstrip(\"\"\"[supervisorctl]\n        serverurl=http://localhost:9001\n        username=chris\n        password=123\n        prompt=mysupervisor\n        history_file=%s/sc_history\n        \"\"\" % tempdir)\n",
                    "rendered": {
                      "text": "        s = lstrip(\"\"\"[supervisorctl]\n        serverurl=http://localhost:9001\n        username=chris\n        password=123\n        prompt=mysupervisor\n        history_file=%s/sc_history\n        \"\"\" % tempdir)\n",
                      "markdown": "`        s = lstrip(\"\"\"[supervisorctl]\n        serverurl=http://localhost:9001\n        username=chris\n        password=123\n        prompt=mysupervisor\n        history_file=%s/sc_history\n        \"\"\" % tempdir)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 34,
                  "endLine": 282,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        self.assertEqual(instance.interactive, 1)\n        self.assertEqual(instance.serverurl, 'http://localhost:9001')\n        self.assertEqual(instance.username, 'chris')\n        self.assertEqual(instance.password, '123')\n\n    def test_options(self):\n        tempdir = tempfile.gettempdir()\n",
                    "rendered": {
                      "text": "        self.assertEqual(instance.interactive, 1)\n        self.assertEqual(instance.serverurl, 'http://localhost:9001')\n        self.assertEqual(instance.username, 'chris')\n        self.assertEqual(instance.password, '123')\n\n    def test_options(self):\n        tempdir = tempfile.gettempdir()\n",
                      "markdown": "`        self.assertEqual(instance.interactive, 1)\n        self.assertEqual(instance.serverurl, 'http://localhost:9001')\n        self.assertEqual(instance.username, 'chris')\n        self.assertEqual(instance.password, '123')\n\n    def test_options(self):\n        tempdir = tempfile.gettempdir()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 2521,
                  "startColumn": 17,
                  "endLine": 2521,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        from supervisor.options import UnhosedConfigParser\n        from supervisor.dispatchers import default_handler\n        instance = self._makeOne()\n        instance.environ_expansions = {'ENV_HOME': tempfile.gettempdir(),\n                                       'ENV_USER': 'johndoe',\n                                       'ENV_EL1_PROCNAME': 'myeventlistener',\n                                       'ENV_EL1_COMMAND': '/bin/dog',\n",
                    "rendered": {
                      "text": "        from supervisor.options import UnhosedConfigParser\n        from supervisor.dispatchers import default_handler\n        instance = self._makeOne()\n        instance.environ_expansions = {'ENV_HOME': tempfile.gettempdir(),\n                                       'ENV_USER': 'johndoe',\n                                       'ENV_EL1_PROCNAME': 'myeventlistener',\n                                       'ENV_EL1_COMMAND': '/bin/dog',\n",
                      "markdown": "`        from supervisor.options import UnhosedConfigParser\n        from supervisor.dispatchers import default_handler\n        instance = self._makeOne()\n        instance.environ_expansions = {'ENV_HOME': tempfile.gettempdir(),\n                                       'ENV_USER': 'johndoe',\n                                       'ENV_EL1_PROCNAME': 'myeventlistener',\n                                       'ENV_EL1_COMMAND': '/bin/dog',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1908,
                  "startColumn": 13,
                  "endLine": 1908,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        from supervisor.options import UnhosedConfigParser\n        instance = self._makeOne()\n        instance.environ_expansions = {\n            'ENV_HOME': tempfile.gettempdir(),\n            'ENV_USER': 'johndoe',\n            'ENV_HTSRV_PORT': '9210',\n            'ENV_HTSRV_USER': 'someuser',\n",
                    "rendered": {
                      "text": "        from supervisor.options import UnhosedConfigParser\n        instance = self._makeOne()\n        instance.environ_expansions = {\n            'ENV_HOME': tempfile.gettempdir(),\n            'ENV_USER': 'johndoe',\n            'ENV_HTSRV_PORT': '9210',\n            'ENV_HTSRV_USER': 'someuser',\n",
                      "markdown": "`        from supervisor.options import UnhosedConfigParser\n        instance = self._makeOne()\n        instance.environ_expansions = {\n            'ENV_HOME': tempfile.gettempdir(),\n            'ENV_USER': 'johndoe',\n            'ENV_HTSRV_PORT': '9210',\n            'ENV_HTSRV_USER': 'someuser',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 17,
                  "endLine": 355,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n        fp = StringIO(s)\n        instance = self._makeOne()\n        instance.environ_expansions = {'ENV_HOME': tempfile.gettempdir(),\n                                       'ENV_USER': 'johndoe',\n                                       'ENV_SERVER_PORT': '9210',\n                                       'ENV_CLIENT_USER': 'someuser',\n",
                    "rendered": {
                      "text": "\n        fp = StringIO(s)\n        instance = self._makeOne()\n        instance.environ_expansions = {'ENV_HOME': tempfile.gettempdir(),\n                                       'ENV_USER': 'johndoe',\n                                       'ENV_SERVER_PORT': '9210',\n                                       'ENV_CLIENT_USER': 'someuser',\n",
                      "markdown": "`\n        fp = StringIO(s)\n        instance = self._makeOne()\n        instance.environ_expansions = {'ENV_HOME': tempfile.gettempdir(),\n                                       'ENV_USER': 'johndoe',\n                                       'ENV_SERVER_PORT': '9210',\n                                       'ENV_CLIENT_USER': 'someuser',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 42,
                  "endLine": 238,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        options.stderr = StringIO()\n        options.default_configfile()\n        self.assertEqual(exitcodes, [2])\n        msg = \"Error: No config file found at default paths\"\n        self.assertTrue(options.stderr.getvalue().startswith(msg))\n\n    def test_default_config(self):\n",
                    "rendered": {
                      "text": "        options.stderr = StringIO()\n        options.default_configfile()\n        self.assertEqual(exitcodes, [2])\n        msg = \"Error: No config file found at default paths\"\n        self.assertTrue(options.stderr.getvalue().startswith(msg))\n\n    def test_default_config(self):\n",
                      "markdown": "`        options.stderr = StringIO()\n        options.default_configfile()\n        self.assertEqual(exitcodes, [2])\n        msg = \"Error: No config file found at default paths\"\n        self.assertTrue(options.stderr.getvalue().startswith(msg))\n\n    def test_default_config(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 1229,
                  "startColumn": 24,
                  "endLine": 1229,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            self.fail(\"nothing raised\")\n        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                \"Invalid chmod value NaN\")\n\n    def test_options_afunix_chown_bad(self):\n        instance = self._makeOne()\n",
                    "rendered": {
                      "text": "            self.fail(\"nothing raised\")\n        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                \"Invalid chmod value NaN\")\n\n    def test_options_afunix_chown_bad(self):\n        instance = self._makeOne()\n",
                      "markdown": "`            self.fail(\"nothing raised\")\n        except ValueError as exc:\n            self.assertEqual(exc.args[0],\n                \"Invalid chmod value NaN\")\n\n    def test_options_afunix_chown_bad(self):\n        instance = self._makeOne()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 862,
                  "startColumn": 38,
                  "endLine": 862,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            instance.read_config(nonexistent)\n            self.fail(\"nothing raised\")\n        except ValueError as exc:\n            self.assertTrue(\"could not find config file\" in exc.args[0])\n\n    def test_read_config_unreadable(self):\n        instance = self._makeOne()\n",
                    "rendered": {
                      "text": "            instance.read_config(nonexistent)\n            self.fail(\"nothing raised\")\n        except ValueError as exc:\n            self.assertTrue(\"could not find config file\" in exc.args[0])\n\n    def test_read_config_unreadable(self):\n        instance = self._makeOne()\n",
                      "markdown": "`            instance.read_config(nonexistent)\n            self.fail(\"nothing raised\")\n        except ValueError as exc:\n            self.assertTrue(\"could not find config file\" in exc.args[0])\n\n    def test_read_config_unreadable(self):\n        instance = self._makeOne()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 813,
                  "startColumn": 7,
                  "endLine": 813,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        self.assertTrue(section.process_group_configs is\n                        instance.process_group_configs)\n\n        cat = section.process_group_configs[1]\n        self.assertEqual(len(cat.process_configs), 1)\n        proc = cat.process_configs[0]\n        self.assertEqual(proc.name, 'three')\n",
                    "rendered": {
                      "text": "        self.assertTrue(section.process_group_configs is\n                        instance.process_group_configs)\n\n        cat = section.process_group_configs[1]\n        self.assertEqual(len(cat.process_configs), 1)\n        proc = cat.process_configs[0]\n        self.assertEqual(proc.name, 'three')\n",
                      "markdown": "`        self.assertTrue(section.process_group_configs is\n                        instance.process_group_configs)\n\n        cat = section.process_group_configs[1]\n        self.assertEqual(len(cat.process_configs), 1)\n        proc = cat.process_configs[0]\n        self.assertEqual(proc.name, 'three')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 7,
                  "endLine": 805,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n        self.assertEqual(len(section.process_group_configs), 2)\n\n        cat = section.process_group_configs[0]\n        self.assertEqual(len(cat.process_configs), 1)\n        proc = cat.process_configs[0]\n        self.assertEqual(proc.name, 'one')\n",
                    "rendered": {
                      "text": "\n        self.assertEqual(len(section.process_group_configs), 2)\n\n        cat = section.process_group_configs[0]\n        self.assertEqual(len(cat.process_configs), 1)\n        proc = cat.process_configs[0]\n        self.assertEqual(proc.name, 'one')\n",
                      "markdown": "`\n        self.assertEqual(len(section.process_group_configs), 2)\n\n        cat = section.process_group_configs[0]\n        self.assertEqual(len(cat.process_configs), 1)\n        proc = cat.process_configs[0]\n        self.assertEqual(proc.name, 'one')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 780,
                  "startColumn": 7,
                  "endLine": 780,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        cat = section.process_group_configs[0]\n        self.assertEqual(len(cat.process_configs), 1)\n\n        cat = section.process_group_configs[1]\n        self.assertEqual(len(cat.process_configs), 2)\n        self.assertTrue(section.process_group_configs is\n                        instance.process_group_configs)\n",
                    "rendered": {
                      "text": "        cat = section.process_group_configs[0]\n        self.assertEqual(len(cat.process_configs), 1)\n\n        cat = section.process_group_configs[1]\n        self.assertEqual(len(cat.process_configs), 2)\n        self.assertTrue(section.process_group_configs is\n                        instance.process_group_configs)\n",
                      "markdown": "`        cat = section.process_group_configs[0]\n        self.assertEqual(len(cat.process_configs), 1)\n\n        cat = section.process_group_configs[1]\n        self.assertEqual(len(cat.process_configs), 2)\n        self.assertTrue(section.process_group_configs is\n                        instance.process_group_configs)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 777,
                  "startColumn": 7,
                  "endLine": 777,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n        self.assertEqual(len(section.process_group_configs), 2)\n\n        cat = section.process_group_configs[0]\n        self.assertEqual(len(cat.process_configs), 1)\n\n        cat = section.process_group_configs[1]\n",
                    "rendered": {
                      "text": "\n        self.assertEqual(len(section.process_group_configs), 2)\n\n        cat = section.process_group_configs[0]\n        self.assertEqual(len(cat.process_configs), 1)\n\n        cat = section.process_group_configs[1]\n",
                      "markdown": "`\n        self.assertEqual(len(section.process_group_configs), 2)\n\n        cat = section.process_group_configs[0]\n        self.assertEqual(len(cat.process_configs), 1)\n\n        cat = section.process_group_configs[1]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 38,
                  "endLine": 402,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            instance.read_config(nonexistent)\n            self.fail(\"nothing raised\")\n        except ValueError as exc:\n            self.assertTrue(\"could not find config file\" in exc.args[0])\n\n    def test_read_config_unreadable(self):\n        instance = self._makeOne()\n",
                    "rendered": {
                      "text": "            instance.read_config(nonexistent)\n            self.fail(\"nothing raised\")\n        except ValueError as exc:\n            self.assertTrue(\"could not find config file\" in exc.args[0])\n\n    def test_read_config_unreadable(self):\n        instance = self._makeOne()\n",
                      "markdown": "`            instance.read_config(nonexistent)\n            self.fail(\"nothing raised\")\n        except ValueError as exc:\n            self.assertTrue(\"could not find config file\" in exc.args[0])\n\n    def test_read_config_unreadable(self):\n        instance = self._makeOne()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 31,
                  "endLine": 186,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        options.realize([])\n        self.assertEqual(options.other, 42)\n\n        # Opt should trump both env (still set) and config\n        options = self._makeOptions()\n        options.realize(['-p', '43'])\n        self.assertEqual(options.other, 43)\n",
                    "rendered": {
                      "text": "        options.realize([])\n        self.assertEqual(options.other, 42)\n\n        # Opt should trump both env (still set) and config\n        options = self._makeOptions()\n        options.realize(['-p', '43'])\n        self.assertEqual(options.other, 43)\n",
                      "markdown": "`        options.realize([])\n        self.assertEqual(options.other, 42)\n\n        # Opt should trump both env (still set) and config\n        options = self._makeOptions()\n        options.realize(['-p', '43'])\n        self.assertEqual(options.other, 43)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_options.py"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 9,
                  "endLine": 180,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        self.assertEqual(options.anoption, 'default')\n        self.assertEqual(options.other, 41)\n\n        # Env should trump config\n        options = self._makeOptions()\n        os.environ['OTHER'] = '42'\n        options.realize([])\n",
                    "rendered": {
                      "text": "        self.assertEqual(options.anoption, 'default')\n        self.assertEqual(options.other, 41)\n\n        # Env should trump config\n        options = self._makeOptions()\n        os.environ['OTHER'] = '42'\n        options.realize([])\n",
                      "markdown": "`        self.assertEqual(options.anoption, 'default')\n        self.assertEqual(options.other, 41)\n\n        # Env should trump config\n        options = self._makeOptions()\n        os.environ['OTHER'] = '42'\n        options.realize([])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http_client.py"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 12,
                  "endLine": 116,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        connects = []\n        inst.create_socket = lambda *arg: sockets.append(arg)\n        inst.connect = lambda tup: connects.append(tup)\n        inst.get('unix:///a/b/c', '')\n        self.assertEqual(sockets, [(socket.AF_UNIX, socket.SOCK_STREAM)])\n        self.assertEqual(connects, ['/a/b/c'])\n\n",
                    "rendered": {
                      "text": "        connects = []\n        inst.create_socket = lambda *arg: sockets.append(arg)\n        inst.connect = lambda tup: connects.append(tup)\n        inst.get('unix:///a/b/c', '')\n        self.assertEqual(sockets, [(socket.AF_UNIX, socket.SOCK_STREAM)])\n        self.assertEqual(connects, ['/a/b/c'])\n\n",
                      "markdown": "`        connects = []\n        inst.create_socket = lambda *arg: sockets.append(arg)\n        inst.connect = lambda tup: connects.append(tup)\n        inst.get('unix:///a/b/c', '')\n        self.assertEqual(sockets, [(socket.AF_UNIX, socket.SOCK_STREAM)])\n        self.assertEqual(connects, ['/a/b/c'])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http_client.py"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 12,
                  "endLine": 105,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        connects = []\n        inst.create_socket = lambda *arg: sockets.append(arg)\n        inst.connect = lambda tup: connects.append(tup)\n        inst.get('http://localhost:8080', '/abc/def')\n        self.assertEqual(inst.port, 8080)\n        self.assertEqual(sockets, [(socket.AF_INET, socket.SOCK_STREAM)])\n        self.assertEqual(connects, [('localhost', 8080)])\n",
                    "rendered": {
                      "text": "        connects = []\n        inst.create_socket = lambda *arg: sockets.append(arg)\n        inst.connect = lambda tup: connects.append(tup)\n        inst.get('http://localhost:8080', '/abc/def')\n        self.assertEqual(inst.port, 8080)\n        self.assertEqual(sockets, [(socket.AF_INET, socket.SOCK_STREAM)])\n        self.assertEqual(connects, [('localhost', 8080)])\n",
                      "markdown": "`        connects = []\n        inst.create_socket = lambda *arg: sockets.append(arg)\n        inst.connect = lambda tup: connects.append(tup)\n        inst.get('http://localhost:8080', '/abc/def')\n        self.assertEqual(inst.port, 8080)\n        self.assertEqual(sockets, [(socket.AF_INET, socket.SOCK_STREAM)])\n        self.assertEqual(connects, [('localhost', 8080)])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http_client.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 12,
                  "endLine": 94,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        connects = []\n        inst.create_socket = lambda *arg: sockets.append(arg)\n        inst.connect = lambda tup: connects.append(tup)\n        inst.get('http://localhost', '/abc/def')\n        self.assertEqual(inst.port, 80)\n        self.assertEqual(sockets, [(socket.AF_INET, socket.SOCK_STREAM)])\n        self.assertEqual(connects, [('localhost', 80)])\n",
                    "rendered": {
                      "text": "        connects = []\n        inst.create_socket = lambda *arg: sockets.append(arg)\n        inst.connect = lambda tup: connects.append(tup)\n        inst.get('http://localhost', '/abc/def')\n        self.assertEqual(inst.port, 80)\n        self.assertEqual(sockets, [(socket.AF_INET, socket.SOCK_STREAM)])\n        self.assertEqual(connects, [('localhost', 80)])\n",
                      "markdown": "`        connects = []\n        inst.create_socket = lambda *arg: sockets.append(arg)\n        inst.connect = lambda tup: connects.append(tup)\n        inst.get('http://localhost', '/abc/def')\n        self.assertEqual(inst.port, 80)\n        self.assertEqual(sockets, [(socket.AF_INET, socket.SOCK_STREAM)])\n        self.assertEqual(connects, [('localhost', 80)])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http_client.py"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 25,
                  "endLine": 189,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        inst.push = lambda val: pushed.append(as_bytes(val))\n        inst.path = '/'\n        inst.host = 'localhost'\n        inst.password = 'password'\n        inst.username = 'username'\n        inst.handle_connect()\n        self.assertTrue(inst.connected)\n",
                    "rendered": {
                      "text": "        inst.push = lambda val: pushed.append(as_bytes(val))\n        inst.path = '/'\n        inst.host = 'localhost'\n        inst.password = 'password'\n        inst.username = 'username'\n        inst.handle_connect()\n        self.assertTrue(inst.connected)\n",
                      "markdown": "`        inst.push = lambda val: pushed.append(as_bytes(val))\n        inst.path = '/'\n        inst.host = 'localhost'\n        inst.password = 'password'\n        inst.username = 'username'\n        inst.handle_connect()\n        self.assertTrue(inst.connected)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http_client.py"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 13,
                  "endLine": 189,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        inst.push = lambda val: pushed.append(as_bytes(val))\n        inst.path = '/'\n        inst.host = 'localhost'\n        inst.password = 'password'\n        inst.username = 'username'\n        inst.handle_connect()\n        self.assertTrue(inst.connected)\n",
                    "rendered": {
                      "text": "        inst.push = lambda val: pushed.append(as_bytes(val))\n        inst.path = '/'\n        inst.host = 'localhost'\n        inst.password = 'password'\n        inst.username = 'username'\n        inst.handle_connect()\n        self.assertTrue(inst.connected)\n",
                      "markdown": "`        inst.push = lambda val: pushed.append(as_bytes(val))\n        inst.path = '/'\n        inst.host = 'localhost'\n        inst.password = 'password'\n        inst.username = 'username'\n        inst.handle_connect()\n        self.assertTrue(inst.connected)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http_client.py"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 33,
                  "endLine": 183,
                  "endColumn": 41,
                  "snippet": {
                    "text": "             b'\\r\\n']\n            )\n\n    def test_handle_connect_with_password(self):\n        inst = self._makeOne()\n        pushed = []\n        inst.push = lambda val: pushed.append(as_bytes(val))\n",
                    "rendered": {
                      "text": "             b'\\r\\n']\n            )\n\n    def test_handle_connect_with_password(self):\n        inst = self._makeOne()\n        pushed = []\n        inst.push = lambda val: pushed.append(as_bytes(val))\n",
                      "markdown": "`             b'\\r\\n']\n            )\n\n    def test_handle_connect_with_password(self):\n        inst = self._makeOne()\n        pushed = []\n        inst.push = lambda val: pushed.append(as_bytes(val))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http_client.py"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 31,
                  "endLine": 159,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        self.assertEqual(closed, [True])\n        self.assertTrue(inst.error_handled)\n\n    def test_handle_connect_no_password(self):\n        inst = self._makeOne()\n        pushed = []\n        inst.push = lambda val: pushed.append(as_bytes(val))\n",
                    "rendered": {
                      "text": "        self.assertEqual(closed, [True])\n        self.assertTrue(inst.error_handled)\n\n    def test_handle_connect_no_password(self):\n        inst = self._makeOne()\n        pushed = []\n        inst.push = lambda val: pushed.append(as_bytes(val))\n",
                      "markdown": "`        self.assertEqual(closed, [True])\n        self.assertTrue(inst.error_handled)\n\n    def test_handle_connect_no_password(self):\n        inst = self._makeOne()\n        pushed = []\n        inst.push = lambda val: pushed.append(as_bytes(val))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http_client.py"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 12,
                  "endLine": 66,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        return self._getTargetClass()(\n            listener,\n            username,\n            password,\n            map=socket_map,\n            )\n\n",
                    "rendered": {
                      "text": "        return self._getTargetClass()(\n            listener,\n            username,\n            password,\n            map=socket_map,\n            )\n\n",
                      "markdown": "`        return self._getTargetClass()(\n            listener,\n            username,\n            password,\n            map=socket_map,\n            )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http_client.py"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 51,
                  "endLine": 59,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        from supervisor.http_client import HTTPHandler\n        return HTTPHandler\n\n    def _makeOne(self, listener=None, username='', password=None):\n        if listener is None:\n            listener = self._makeListener()\n        socket_map = {}\n",
                    "rendered": {
                      "text": "        from supervisor.http_client import HTTPHandler\n        return HTTPHandler\n\n    def _makeOne(self, listener=None, username='', password=None):\n        if listener is None:\n            listener = self._makeListener()\n        socket_map = {}\n",
                      "markdown": "`        from supervisor.http_client import HTTPHandler\n        return HTTPHandler\n\n    def _makeOne(self, listener=None, username='', password=None):\n        if listener is None:\n            listener = self._makeListener()\n        socket_map = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 35,
                  "endLine": 604,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        try:\n            for config, s in servers:\n                s.close()\n                socketfile = config.get('file')\n                if socketfile is not None:\n                    os.unlink(socketfile)\n        finally:\n",
                    "rendered": {
                      "text": "        try:\n            for config, s in servers:\n                s.close()\n                socketfile = config.get('file')\n                if socketfile is not None:\n                    os.unlink(socketfile)\n        finally:\n",
                      "markdown": "`        try:\n            for config, s in servers:\n                s.close()\n                socketfile = config.get('file')\n                if socketfile is not None:\n                    os.unlink(socketfile)\n        finally:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 69,
                  "endLine": 661,
                  "endColumn": 77,
                  "snippet": {
                    "text": "                'username':'username', 'password':'password',\n                'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':'username', 'password':'password',\n                'section':'unix_http_server'}\n        servers = self._make_http_servers([inet, unix])\n        self.assertEqual(len(servers), 2)\n",
                    "rendered": {
                      "text": "                'username':'username', 'password':'password',\n                'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':'username', 'password':'password',\n                'section':'unix_http_server'}\n        servers = self._make_http_servers([inet, unix])\n        self.assertEqual(len(servers), 2)\n",
                      "markdown": "`                'username':'username', 'password':'password',\n                'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':'username', 'password':'password',\n                'section':'unix_http_server'}\n        servers = self._make_http_servers([inet, unix])\n        self.assertEqual(len(servers), 2)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 58,
                  "endLine": 661,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                'username':'username', 'password':'password',\n                'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':'username', 'password':'password',\n                'section':'unix_http_server'}\n        servers = self._make_http_servers([inet, unix])\n        self.assertEqual(len(servers), 2)\n",
                    "rendered": {
                      "text": "                'username':'username', 'password':'password',\n                'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':'username', 'password':'password',\n                'section':'unix_http_server'}\n        servers = self._make_http_servers([inet, unix])\n        self.assertEqual(len(servers), 2)\n",
                      "markdown": "`                'username':'username', 'password':'password',\n                'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':'username', 'password':'password',\n                'section':'unix_http_server'}\n        servers = self._make_http_servers([inet, unix])\n        self.assertEqual(len(servers), 2)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 658,
                  "startColumn": 51,
                  "endLine": 658,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        self.assertFalse(os.path.exists(socketfile))\n\n        inet = {'family':socket.AF_INET, 'host':'localhost', 'port':17736,\n                'username':'username', 'password':'password',\n                'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':'username', 'password':'password',\n",
                    "rendered": {
                      "text": "        self.assertFalse(os.path.exists(socketfile))\n\n        inet = {'family':socket.AF_INET, 'host':'localhost', 'port':17736,\n                'username':'username', 'password':'password',\n                'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':'username', 'password':'password',\n",
                      "markdown": "`        self.assertFalse(os.path.exists(socketfile))\n\n        inet = {'family':socket.AF_INET, 'host':'localhost', 'port':17736,\n                'username':'username', 'password':'password',\n                'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':'username', 'password':'password',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 658,
                  "startColumn": 40,
                  "endLine": 658,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        self.assertFalse(os.path.exists(socketfile))\n\n        inet = {'family':socket.AF_INET, 'host':'localhost', 'port':17736,\n                'username':'username', 'password':'password',\n                'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':'username', 'password':'password',\n",
                    "rendered": {
                      "text": "        self.assertFalse(os.path.exists(socketfile))\n\n        inet = {'family':socket.AF_INET, 'host':'localhost', 'port':17736,\n                'username':'username', 'password':'password',\n                'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':'username', 'password':'password',\n",
                      "markdown": "`        self.assertFalse(os.path.exists(socketfile))\n\n        inet = {'family':socket.AF_INET, 'host':'localhost', 'port':17736,\n                'username':'username', 'password':'password',\n                'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':'username', 'password':'password',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 630,
                  "startColumn": 52,
                  "endLine": 630,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        inet = {'family':socket.AF_INET, 'host':'localhost', 'port':17735,\n                'username':None, 'password':None, 'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':None, 'password':None,\n                'section':'unix_http_server'}\n        servers = self._make_http_servers([inet, unix])\n        self.assertEqual(len(servers), 2)\n",
                    "rendered": {
                      "text": "        inet = {'family':socket.AF_INET, 'host':'localhost', 'port':17735,\n                'username':None, 'password':None, 'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':None, 'password':None,\n                'section':'unix_http_server'}\n        servers = self._make_http_servers([inet, unix])\n        self.assertEqual(len(servers), 2)\n",
                      "markdown": "`        inet = {'family':socket.AF_INET, 'host':'localhost', 'port':17735,\n                'username':None, 'password':None, 'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':None, 'password':None,\n                'section':'unix_http_server'}\n        servers = self._make_http_servers([inet, unix])\n        self.assertEqual(len(servers), 2)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 34,
                  "endLine": 628,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        self.assertFalse(os.path.exists(socketfile))\n\n        inet = {'family':socket.AF_INET, 'host':'localhost', 'port':17735,\n                'username':None, 'password':None, 'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':None, 'password':None,\n                'section':'unix_http_server'}\n",
                    "rendered": {
                      "text": "        self.assertFalse(os.path.exists(socketfile))\n\n        inet = {'family':socket.AF_INET, 'host':'localhost', 'port':17735,\n                'username':None, 'password':None, 'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':None, 'password':None,\n                'section':'unix_http_server'}\n",
                      "markdown": "`        self.assertFalse(os.path.exists(socketfile))\n\n        inet = {'family':socket.AF_INET, 'host':'localhost', 'port':17735,\n                'username':None, 'password':None, 'section':'inet_http_server'}\n        unix = {'family':socket.AF_UNIX, 'file':socketfile, 'chmod':0o700,\n                'chown':(-1, -1), 'username':None, 'password':None,\n                'section':'unix_http_server'}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 36,
                  "endLine": 614,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n    def test_make_http_servers_socket_type_error(self):\n        config = {'family':999, 'host':'localhost', 'port':17735,\n                  'username':None, 'password':None,\n                  'section':'inet_http_server'}\n        try:\n            self._make_http_servers([config])\n",
                    "rendered": {
                      "text": "\n    def test_make_http_servers_socket_type_error(self):\n        config = {'family':999, 'host':'localhost', 'port':17735,\n                  'username':None, 'password':None,\n                  'section':'inet_http_server'}\n        try:\n            self._make_http_servers([config])\n",
                      "markdown": "`\n    def test_make_http_servers_socket_type_error(self):\n        config = {'family':999, 'host':'localhost', 'port':17735,\n                  'username':None, 'password':None,\n                  'section':'inet_http_server'}\n        try:\n            self._make_http_servers([config])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 46,
                  "endLine": 555,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        encoded = base64.b64encode(as_bytes(\"wrong:wrong\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n        auth_handler.handle_request(request)\n        self.assertFalse(handler.handled_request)\n\n",
                    "rendered": {
                      "text": "        encoded = base64.b64encode(as_bytes(\"wrong:wrong\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n        auth_handler.handle_request(request)\n        self.assertFalse(handler.handled_request)\n\n",
                      "markdown": "`        encoded = base64.b64encode(as_bytes(\"wrong:wrong\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n        auth_handler.handle_request(request)\n        self.assertFalse(handler.handled_request)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 10,
                  "endLine": 542,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n    def test_handle_request_authorizes_good_password_with_colon(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        # password contains colon\n        encoded = base64.b64encode(as_bytes(\"user:pass:word\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n",
                    "rendered": {
                      "text": "\n    def test_handle_request_authorizes_good_password_with_colon(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        # password contains colon\n        encoded = base64.b64encode(as_bytes(\"user:pass:word\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n",
                      "markdown": "`\n    def test_handle_request_authorizes_good_password_with_colon(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        # password contains colon\n        encoded = base64.b64encode(as_bytes(\"user:pass:word\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 44,
                  "endLine": 540,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        auth_handler.handle_request(request)\n        self.assertTrue(handler.handled_request)\n\n    def test_handle_request_authorizes_good_password_with_colon(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        # password contains colon\n        encoded = base64.b64encode(as_bytes(\"user:pass:word\"))\n",
                    "rendered": {
                      "text": "        auth_handler.handle_request(request)\n        self.assertTrue(handler.handled_request)\n\n    def test_handle_request_authorizes_good_password_with_colon(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        # password contains colon\n        encoded = base64.b64encode(as_bytes(\"user:pass:word\"))\n",
                      "markdown": "`        auth_handler.handle_request(request)\n        self.assertTrue(handler.handled_request)\n\n    def test_handle_request_authorizes_good_password_with_colon(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        # password contains colon\n        encoded = base64.b64encode(as_bytes(\"user:pass:word\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 46,
                  "endLine": 536,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        encoded = base64.b64encode(as_bytes(\"user:password\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n        auth_handler.handle_request(request)\n        self.assertTrue(handler.handled_request)\n\n",
                    "rendered": {
                      "text": "        encoded = base64.b64encode(as_bytes(\"user:password\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n        auth_handler.handle_request(request)\n        self.assertTrue(handler.handled_request)\n\n",
                      "markdown": "`        encoded = base64.b64encode(as_bytes(\"user:password\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n        auth_handler.handle_request(request)\n        self.assertTrue(handler.handled_request)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 50,
                  "endLine": 533,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n    def test_handle_request_authorizes_good_credentials(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        encoded = base64.b64encode(as_bytes(\"user:password\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n",
                    "rendered": {
                      "text": "\n    def test_handle_request_authorizes_good_credentials(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        encoded = base64.b64encode(as_bytes(\"user:password\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n",
                      "markdown": "`\n    def test_handle_request_authorizes_good_credentials(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        encoded = base64.b64encode(as_bytes(\"user:password\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 54,
                  "endLine": 515,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\nclass SupervisorAuthHandlerTests(unittest.TestCase):\n    def _getTargetClass(self):\n",
                    "rendered": {
                      "text": "    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\nclass SupervisorAuthHandlerTests(unittest.TestCase):\n    def _getTargetClass(self):\n",
                      "markdown": "`    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\nclass SupervisorAuthHandlerTests(unittest.TestCase):\n    def _getTargetClass(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 42,
                  "endLine": 514,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\nclass SupervisorAuthHandlerTests(unittest.TestCase):\n",
                    "rendered": {
                      "text": "\n    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\nclass SupervisorAuthHandlerTests(unittest.TestCase):\n",
                      "markdown": "`\n    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\nclass SupervisorAuthHandlerTests(unittest.TestCase):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 44,
                  "endLine": 513,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n",
                    "rendered": {
                      "text": "        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n",
                      "markdown": "`        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 8,
                  "endLine": 513,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n",
                    "rendered": {
                      "text": "        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n",
                      "markdown": "`        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 36,
                  "endLine": 512,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n",
                    "rendered": {
                      "text": "        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n",
                      "markdown": "`        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 42,
                  "endLine": 509,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    def test_authorize_gooduser_badpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword_sha(self):\n",
                    "rendered": {
                      "text": "\n    def test_authorize_gooduser_badpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword_sha(self):\n",
                      "markdown": "`\n    def test_authorize_gooduser_badpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword_sha(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 44,
                  "endLine": 508,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        self.assertTrue(authorizer.authorize(('foo', 'pass:word')))\n\n    def test_authorize_gooduser_badpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n",
                    "rendered": {
                      "text": "        self.assertTrue(authorizer.authorize(('foo', 'pass:word')))\n\n    def test_authorize_gooduser_badpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n",
                      "markdown": "`        self.assertTrue(authorizer.authorize(('foo', 'pass:word')))\n\n    def test_authorize_gooduser_badpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 8,
                  "endLine": 508,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        self.assertTrue(authorizer.authorize(('foo', 'pass:word')))\n\n    def test_authorize_gooduser_badpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n",
                    "rendered": {
                      "text": "        self.assertTrue(authorizer.authorize(('foo', 'pass:word')))\n\n    def test_authorize_gooduser_badpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n",
                      "markdown": "`        self.assertTrue(authorizer.authorize(('foo', 'pass:word')))\n\n    def test_authorize_gooduser_badpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 35,
                  "endLine": 507,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        authorizer = self._makeOne({'foo':'pass:word'})\n        self.assertTrue(authorizer.authorize(('foo', 'pass:word')))\n\n    def test_authorize_gooduser_badpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n",
                    "rendered": {
                      "text": "        authorizer = self._makeOne({'foo':'pass:word'})\n        self.assertTrue(authorizer.authorize(('foo', 'pass:word')))\n\n    def test_authorize_gooduser_badpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n",
                      "markdown": "`        authorizer = self._makeOne({'foo':'pass:word'})\n        self.assertTrue(authorizer.authorize(('foo', 'pass:word')))\n\n    def test_authorize_gooduser_badpassword_sha(self):\n        password = '{SHA}' + sha1(as_bytes('password')).hexdigest()\n        authorizer = self._makeOne({'foo':password})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 36,
                  "endLine": 503,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        authorizer = self._makeOne({'foo':'password'})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n    def test_authorize_gooduser_goodpassword_with_colon(self):\n        authorizer = self._makeOne({'foo':'pass:word'})\n        self.assertTrue(authorizer.authorize(('foo', 'pass:word')))\n\n",
                    "rendered": {
                      "text": "        authorizer = self._makeOne({'foo':'password'})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n    def test_authorize_gooduser_goodpassword_with_colon(self):\n        authorizer = self._makeOne({'foo':'pass:word'})\n        self.assertTrue(authorizer.authorize(('foo', 'pass:word')))\n\n",
                      "markdown": "`        authorizer = self._makeOne({'foo':'password'})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n    def test_authorize_gooduser_goodpassword_with_colon(self):\n        authorizer = self._makeOne({'foo':'pass:word'})\n        self.assertTrue(authorizer.authorize(('foo', 'pass:word')))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 54,
                  "endLine": 501,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n    def test_authorize_gooduser_goodpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n    def test_authorize_gooduser_goodpassword_with_colon(self):\n        authorizer = self._makeOne({'foo':'pass:word'})\n",
                    "rendered": {
                      "text": "\n    def test_authorize_gooduser_goodpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n    def test_authorize_gooduser_goodpassword_with_colon(self):\n        authorizer = self._makeOne({'foo':'pass:word'})\n",
                      "markdown": "`\n    def test_authorize_gooduser_goodpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n    def test_authorize_gooduser_goodpassword_with_colon(self):\n        authorizer = self._makeOne({'foo':'pass:word'})\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 43,
                  "endLine": 500,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n    def test_authorize_gooduser_goodpassword_with_colon(self):\n",
                    "rendered": {
                      "text": "        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n    def test_authorize_gooduser_goodpassword_with_colon(self):\n",
                      "markdown": "`        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n    def test_authorize_gooduser_goodpassword_with_colon(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 36,
                  "endLine": 499,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        authorizer = self._makeOne({'foo':'password'})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n",
                    "rendered": {
                      "text": "        authorizer = self._makeOne({'foo':'password'})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n",
                      "markdown": "`        authorizer = self._makeOne({'foo':'password'})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertTrue(authorizer.authorize(('foo', 'password')))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 43,
                  "endLine": 496,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_badpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword(self):\n",
                    "rendered": {
                      "text": "        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_badpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword(self):\n",
                      "markdown": "`        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_badpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_goodpassword(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 35,
                  "endLine": 495,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        authorizer = self._makeOne({})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_badpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n",
                    "rendered": {
                      "text": "        authorizer = self._makeOne({})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_badpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n",
                      "markdown": "`        authorizer = self._makeOne({})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n    def test_authorize_gooduser_badpassword(self):\n        authorizer = self._makeOne({'foo':'password'})\n        self.assertFalse(authorizer.authorize(('foo', 'bar')))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 18,
                  "endLine": 552,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    def test_handle_request_does_not_authorize_bad_credentials(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        encoded = base64.b64encode(as_bytes(\"wrong:wrong\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n",
                    "rendered": {
                      "text": "\n    def test_handle_request_does_not_authorize_bad_credentials(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        encoded = base64.b64encode(as_bytes(\"wrong:wrong\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n",
                      "markdown": "`\n    def test_handle_request_does_not_authorize_bad_credentials(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        encoded = base64.b64encode(as_bytes(\"wrong:wrong\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 543,
                  "startColumn": 18,
                  "endLine": 543,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    def test_handle_request_authorizes_good_password_with_colon(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        # password contains colon\n        encoded = base64.b64encode(as_bytes(\"user:pass:word\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'pass:word'}, handler)\n",
                    "rendered": {
                      "text": "    def test_handle_request_authorizes_good_password_with_colon(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        # password contains colon\n        encoded = base64.b64encode(as_bytes(\"user:pass:word\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'pass:word'}, handler)\n",
                      "markdown": "`    def test_handle_request_authorizes_good_password_with_colon(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        # password contains colon\n        encoded = base64.b64encode(as_bytes(\"user:pass:word\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'pass:word'}, handler)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 18,
                  "endLine": 533,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    def test_handle_request_authorizes_good_credentials(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        encoded = base64.b64encode(as_bytes(\"user:password\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n",
                    "rendered": {
                      "text": "\n    def test_handle_request_authorizes_good_credentials(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        encoded = base64.b64encode(as_bytes(\"user:password\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n",
                      "markdown": "`\n    def test_handle_request_authorizes_good_credentials(self):\n        request = DummyRequest('/logtail/process1', None, None, None)\n        encoded = base64.b64encode(as_bytes(\"user:password\"))\n        request.header = [\"Authorization: Basic %s\" % as_string(encoded)]\n        handler = DummyHandler()\n        auth_handler = self._makeOne({'user':'password'}, handler)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 1,
                  "endColumn": 13,
                  "snippet": {
                    "text": "import base64\nimport os\nimport stat\nimport sys\n",
                    "rendered": {
                      "text": "import base64\nimport os\nimport stat\nimport sys\n",
                      "markdown": "`import base64\nimport os\nimport stat\nimport sys\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_http.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 6,
                  "endLine": 2,
                  "snippet": {
                    "text": "import base64\nimport os\nimport stat\nimport sys\nimport socket\n",
                    "rendered": {
                      "text": "import base64\nimport os\nimport stat\nimport sys\nimport socket\n",
                      "markdown": "`import base64\nimport os\nimport stat\nimport sys\nimport socket\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/scripts/sample_exiting_eventlistener.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 58,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# A sample long-running supervisor event listener which demonstrates\n# how to accept event notifications from supervisor and how to respond\n# properly.  It is the same as the sample_eventlistener.py script\n# except it exits after each request (presumably to be restarted by\n# supervisor).  This demonstration does *not* use the\n# supervisor.childutils module, which wraps the specifics of\n# communications in higher-level API functions.  If your listeners are\n",
                    "rendered": {
                      "text": "\n# A sample long-running supervisor event listener which demonstrates\n# how to accept event notifications from supervisor and how to respond\n# properly.  It is the same as the sample_eventlistener.py script\n# except it exits after each request (presumably to be restarted by\n# supervisor).  This demonstration does *not* use the\n# supervisor.childutils module, which wraps the specifics of\n# communications in higher-level API functions.  If your listeners are\n",
                      "markdown": "`\n# A sample long-running supervisor event listener which demonstrates\n# how to accept event notifications from supervisor and how to respond\n# properly.  It is the same as the sample_eventlistener.py script\n# except it exits after each request (presumably to be restarted by\n# supervisor).  This demonstration does *not* use the\n# supervisor.childutils module, which wraps the specifics of\n# communications in higher-level API functions.  If your listeners are\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/filesys.py"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 22,
                  "endLine": 393,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        if not self.list:\n            return ''\n        else:\n            # do a few at a time\n            bunch = self.list[:50]\n            if self.func is not None:\n                bunch = map (self.func, bunch)\n",
                    "rendered": {
                      "text": "        if not self.list:\n            return ''\n        else:\n            # do a few at a time\n            bunch = self.list[:50]\n            if self.func is not None:\n                bunch = map (self.func, bunch)\n",
                      "markdown": "`        if not self.list:\n            return ''\n        else:\n            # do a few at a time\n            bunch = self.list[:50]\n            if self.func is not None:\n                bunch = map (self.func, bunch)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/filesys.py"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 33,
                  "endLine": 279,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    def __init__ (self, *fsys):\n        pass\n\n# this matches the output of NT's ftp server (when in\n# MSDOS mode) exactly.\n\ndef msdos_longify (file, stat_info):\n",
                    "rendered": {
                      "text": "    def __init__ (self, *fsys):\n        pass\n\n# this matches the output of NT's ftp server (when in\n# MSDOS mode) exactly.\n\ndef msdos_longify (file, stat_info):\n",
                      "markdown": "`    def __init__ (self, *fsys):\n        pass\n\n# this matches the output of NT's ftp server (when in\n# MSDOS mode) exactly.\n\ndef msdos_longify (file, stat_info):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/filesys.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 44,
                  "endLine": 28,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        pass\n\n    def listdir (self, path, long=0):\n        \"\"\"Return a listing of the directory at 'path' The empty string\n        indicates the current directory.  If 'long' is set, instead\n        return a list of (name, stat_info) tuples\n        \"\"\"\n",
                    "rendered": {
                      "text": "        pass\n\n    def listdir (self, path, long=0):\n        \"\"\"Return a listing of the directory at 'path' The empty string\n        indicates the current directory.  If 'long' is set, instead\n        return a list of (name, stat_info) tuples\n        \"\"\"\n",
                      "markdown": "`        pass\n\n    def listdir (self, path, long=0):\n        \"\"\"Return a listing of the directory at 'path' The empty string\n        indicates the current directory.  If 'long' is set, instead\n        return a list of (name, stat_info) tuples\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/filesys.py"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 27,
                  "endLine": 394,
                  "snippet": {
                    "text": "        if not self.list:\n            return ''\n        else:\n            # do a few at a time\n            bunch = self.list[:50]\n            if self.func is not None:\n                bunch = map (self.func, bunch)\n            self.list = self.list[50:]\n",
                    "rendered": {
                      "text": "        if not self.list:\n            return ''\n        else:\n            # do a few at a time\n            bunch = self.list[:50]\n            if self.func is not None:\n                bunch = map (self.func, bunch)\n            self.list = self.list[50:]\n",
                      "markdown": "`        if not self.list:\n            return ''\n        else:\n            # do a few at a time\n            bunch = self.list[:50]\n            if self.func is not None:\n                bunch = map (self.func, bunch)\n            self.list = self.list[50:]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/filesys.py"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 6,
                  "endLine": 331,
                  "snippet": {
                    "text": "        '7':'rwx'\n        }\n\nimport time\n\ndef unix_longify (file, stat_info):\n    # for now, only pay attention to the lower bits\n    mode = ('%o' % stat_info[stat.ST_MODE])[-3:]\n",
                    "rendered": {
                      "text": "        '7':'rwx'\n        }\n\nimport time\n\ndef unix_longify (file, stat_info):\n    # for now, only pay attention to the lower bits\n    mode = ('%o' % stat_info[stat.ST_MODE])[-3:]\n",
                      "markdown": "`        '7':'rwx'\n        }\n\nimport time\n\ndef unix_longify (file, stat_info):\n    # for now, only pay attention to the lower bits\n    mode = ('%o' % stat_info[stat.ST_MODE])[-3:]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/filesys.py"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 33,
                  "endLine": 279,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    def __init__ (self, *fsys):\n        pass\n\n# this matches the output of NT's ftp server (when in\n# MSDOS mode) exactly.\n\ndef msdos_longify (file, stat_info):\n",
                    "rendered": {
                      "text": "    def __init__ (self, *fsys):\n        pass\n\n# this matches the output of NT's ftp server (when in\n# MSDOS mode) exactly.\n\ndef msdos_longify (file, stat_info):\n",
                      "markdown": "`    def __init__ (self, *fsys):\n        pass\n\n# this matches the output of NT's ftp server (when in\n# MSDOS mode) exactly.\n\ndef msdos_longify (file, stat_info):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/filesys.py"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 9,
                  "endLine": 174,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    # utility methods\n    def normalize (self, path):\n        # watch for the ever-sneaky '/+' path element\n        path = re.sub('/+', '/', path)\n        p = self.path_module.normpath (path)\n        # remove 'dangling' cdup's.\n",
                    "rendered": {
                      "text": "\n    # utility methods\n    def normalize (self, path):\n        # watch for the ever-sneaky '/+' path element\n        path = re.sub('/+', '/', path)\n        p = self.path_module.normpath (path)\n        # remove 'dangling' cdup's.\n",
                      "markdown": "`\n    # utility methods\n    def normalize (self, path):\n        # watch for the ever-sneaky '/+' path element\n        path = re.sub('/+', '/', path)\n        p = self.path_module.normpath (path)\n        # remove 'dangling' cdup's.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/default_handler.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 29,
                  "endLine": 65,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    hit_counter = 0\n\n    def __repr__ (self):\n        return '<%s (%s hits) at %x>' % (\n                self.IDENT,\n                self.hit_counter,\n                id (self)\n",
                    "rendered": {
                      "text": "    hit_counter = 0\n\n    def __repr__ (self):\n        return '<%s (%s hits) at %x>' % (\n                self.IDENT,\n                self.hit_counter,\n                id (self)\n",
                      "markdown": "`    hit_counter = 0\n\n    def __repr__ (self):\n        return '<%s (%s hits) at %x>' % (\n                self.IDENT,\n                self.hit_counter,\n                id (self)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/default_handler.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 17,
                  "endLine": 27,
                  "endColumn": 22,
                  "snippet": {
                    "text": "# This is the 'default' handler.  it implements the base set of\n# features expected of a simple file-delivering HTTP server.  file\n# services are provided through a 'filesystem' object, the very same\n# one used by the FTP server.\n#\n# You can replace or modify this handler if you want a non-standard\n# HTTP server.  You can also derive your own handler classes from\n",
                    "rendered": {
                      "text": "# This is the 'default' handler.  it implements the base set of\n# features expected of a simple file-delivering HTTP server.  file\n# services are provided through a 'filesystem' object, the very same\n# one used by the FTP server.\n#\n# You can replace or modify this handler if you want a non-standard\n# HTTP server.  You can also derive your own handler classes from\n",
                      "markdown": "`# This is the 'default' handler.  it implements the base set of\n# features expected of a simple file-delivering HTTP server.  file\n# services are provided through a 'filesystem' object, the very same\n# one used by the FTP server.\n#\n# You can replace or modify this handler if you want a non-standard\n# HTTP server.  You can also derive your own handler classes from\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/default_handler.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 17,
                  "endLine": 27,
                  "endColumn": 22,
                  "snippet": {
                    "text": "# This is the 'default' handler.  it implements the base set of\n# features expected of a simple file-delivering HTTP server.  file\n# services are provided through a 'filesystem' object, the very same\n# one used by the FTP server.\n#\n# You can replace or modify this handler if you want a non-standard\n# HTTP server.  You can also derive your own handler classes from\n",
                    "rendered": {
                      "text": "# This is the 'default' handler.  it implements the base set of\n# features expected of a simple file-delivering HTTP server.  file\n# services are provided through a 'filesystem' object, the very same\n# one used by the FTP server.\n#\n# You can replace or modify this handler if you want a non-standard\n# HTTP server.  You can also derive your own handler classes from\n",
                      "markdown": "`# This is the 'default' handler.  it implements the base set of\n# features expected of a simple file-delivering HTTP server.  file\n# services are provided through a 'filesystem' object, the very same\n# one used by the FTP server.\n#\n# You can replace or modify this handler if you want a non-standard\n# HTTP server.  You can also derive your own handler classes from\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/childutils.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 11,
                  "endLine": 14,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\ndef getRPCInterface(env):\n",
                    "rendered": {
                      "text": "\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\ndef getRPCInterface(env):\n",
                      "markdown": "`\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\ndef getRPCInterface(env):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/childutils.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 11,
                  "endLine": 13,
                  "endColumn": 16,
                  "snippet": {
                    "text": "from supervisor.dispatchers import PEventListenerDispatcher\n\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\n",
                    "rendered": {
                      "text": "from supervisor.dispatchers import PEventListenerDispatcher\n\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\n",
                      "markdown": "`from supervisor.dispatchers import PEventListenerDispatcher\n\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/childutils.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 28,
                  "endLine": 14,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\ndef getRPCInterface(env):\n",
                    "rendered": {
                      "text": "\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\ndef getRPCInterface(env):\n",
                      "markdown": "`\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\ndef getRPCInterface(env):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/childutils.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 8,
                  "endLine": 14,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\ndef getRPCInterface(env):\n",
                    "rendered": {
                      "text": "\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\ndef getRPCInterface(env):\n",
                      "markdown": "`\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\ndef getRPCInterface(env):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/childutils.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 8,
                  "endLine": 13,
                  "endColumn": 15,
                  "snippet": {
                    "text": "from supervisor.dispatchers import PEventListenerDispatcher\n\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\n",
                    "rendered": {
                      "text": "from supervisor.dispatchers import PEventListenerDispatcher\n\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\n",
                      "markdown": "`from supervisor.dispatchers import PEventListenerDispatcher\n\ndef getRPCTransport(env):\n    u = env.get('SUPERVISOR_USERNAME', '')\n    p = env.get('SUPERVISOR_PASSWORD', '')\n    return SupervisorTransport(u, p, env['SUPERVISOR_SERVER_URL'])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/childutils.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 6,
                  "endLine": 3,
                  "snippet": {
                    "text": "import sys\nimport time\n\nfrom supervisor.compat import xmlrpclib\nfrom supervisor.compat import long\nfrom supervisor.compat import as_string\n",
                    "rendered": {
                      "text": "import sys\nimport time\n\nfrom supervisor.compat import xmlrpclib\nfrom supervisor.compat import long\nfrom supervisor.compat import as_string\n",
                      "markdown": "`import sys\nimport time\n\nfrom supervisor.compat import xmlrpclib\nfrom supervisor.compat import long\nfrom supervisor.compat import as_string\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/logger.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 13,
                  "endLine": 177,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nclass resolving_logger:\n    \"\"\"Feed (ip, message) combinations into this logger to get a\n    resolved hostname in front of the message.  The message will not\n    be logged until the PTR request finishes (or fails).\"\"\"\n\n    def __init__ (self, resolver, logger):\n",
                    "rendered": {
                      "text": "\nclass resolving_logger:\n    \"\"\"Feed (ip, message) combinations into this logger to get a\n    resolved hostname in front of the message.  The message will not\n    be logged until the PTR request finishes (or fails).\"\"\"\n\n    def __init__ (self, resolver, logger):\n",
                      "markdown": "`\nclass resolving_logger:\n    \"\"\"Feed (ip, message) combinations into this logger to get a\n    resolved hostname in front of the message.  The message will not\n    be logged until the PTR request finishes (or fails).\"\"\"\n\n    def __init__ (self, resolver, logger):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/logger.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 16,
                  "endLine": 97,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    def __repr__ (self):\n        return '<rotating-file logger: %s>' % self.file\n\n    # We back up at midnight every 1) day, 2) monday, or 3) 1st of month\n    def next_backup (self, freq):\n        (yr, mo, day, hr, min, sec, wd, jday, dst) = time.localtime(time.time())\n        if freq == 'daily':\n",
                    "rendered": {
                      "text": "    def __repr__ (self):\n        return '<rotating-file logger: %s>' % self.file\n\n    # We back up at midnight every 1) day, 2) monday, or 3) 1st of month\n    def next_backup (self, freq):\n        (yr, mo, day, hr, min, sec, wd, jday, dst) = time.localtime(time.time())\n        if freq == 'daily':\n",
                      "markdown": "`    def __repr__ (self):\n        return '<rotating-file logger: %s>' % self.file\n\n    # We back up at midnight every 1) day, 2) monday, or 3) 1st of month\n    def next_backup (self, freq):\n        (yr, mo, day, hr, min, sec, wd, jday, dst) = time.localtime(time.time())\n        if freq == 'daily':\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/logger.py"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 42,
                  "endLine": 76,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            self.write (message)\n\n# like a file_logger, but it must be attached to a filename.\n# When the log gets too full, or a certain time has passed,\n# it backs up the log and starts a new one.  Note that backing\n# up the log is done via \"mv\" because anything else (cp, gzip)\n# would take time, during which medusa would do nothing else.\n",
                    "rendered": {
                      "text": "            self.write (message)\n\n# like a file_logger, but it must be attached to a filename.\n# When the log gets too full, or a certain time has passed,\n# it backs up the log and starts a new one.  Note that backing\n# up the log is done via \"mv\" because anything else (cp, gzip)\n# would take time, during which medusa would do nothing else.\n",
                      "markdown": "`            self.write (message)\n\n# like a file_logger, but it must be attached to a filename.\n# When the log gets too full, or a certain time has passed,\n# it backs up the log and starts a new one.  Note that backing\n# up the log is done via \"mv\" because anything else (cp, gzip)\n# would take time, during which medusa would do nothing else.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/logger.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 6,
                  "endLine": 5,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nimport supervisor.medusa.asynchat_25 as asynchat\nimport socket\nimport time         # these three are for the rotating logger\nimport os           # |\nimport stat         # v\n\n",
                    "rendered": {
                      "text": "\nimport supervisor.medusa.asynchat_25 as asynchat\nimport socket\nimport time         # these three are for the rotating logger\nimport os           # |\nimport stat         # v\n\n",
                      "markdown": "`\nimport supervisor.medusa.asynchat_25 as asynchat\nimport socket\nimport time         # these three are for the rotating logger\nimport os           # |\nimport stat         # v\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 685,
                  "startColumn": 69,
                  "endLine": 685,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.server_port = port\n        self.total_clients = counter()\n",
                    "rendered": {
                      "text": "            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.server_port = port\n        self.total_clients = counter()\n",
                      "markdown": "`            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.server_port = port\n        self.total_clients = counter()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 45,
                  "endLine": 679,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n        host, port = self.socket.getsockname()\n        if not ip:\n            self.log_info('Computing default hostname', 'warning')\n            ip = socket.gethostbyname (socket.gethostname())\n        try:\n            self.server_name = socket.gethostbyaddr (ip)[0]\n",
                    "rendered": {
                      "text": "\n        host, port = self.socket.getsockname()\n        if not ip:\n            self.log_info('Computing default hostname', 'warning')\n            ip = socket.gethostbyname (socket.gethostname())\n        try:\n            self.server_name = socket.gethostbyaddr (ip)[0]\n",
                      "markdown": "`\n        host, port = self.socket.getsockname()\n        if not ip:\n            self.log_info('Computing default hostname', 'warning')\n            ip = socket.gethostbyname (socket.gethostname())\n        try:\n            self.server_name = socket.gethostbyaddr (ip)[0]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 13,
                  "endLine": 638,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        # this version of writable supports the idea of a 'stalled' producer\n        # [i.e., it's not ready to produce any output yet] This is needed by\n        # the proxy, which will be waiting for the magic combination of\n        # 1) hostname resolved\n        # 2) connection made\n        # 3) data available.\n        if self.ac_out_buffer:\n",
                    "rendered": {
                      "text": "        # this version of writable supports the idea of a 'stalled' producer\n        # [i.e., it's not ready to produce any output yet] This is needed by\n        # the proxy, which will be waiting for the magic combination of\n        # 1) hostname resolved\n        # 2) connection made\n        # 3) data available.\n        if self.ac_out_buffer:\n",
                      "markdown": "`        # this version of writable supports the idea of a 'stalled' producer\n        # [i.e., it's not ready to produce any output yet] This is needed by\n        # the proxy, which will be waiting for the magic combination of\n        # 1) hostname resolved\n        # 2) connection made\n        # 3) data available.\n        if self.ac_out_buffer:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 848,
                  "startColumn": 7,
                  "endLine": 848,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        dh = default_handler.default_handler (fs)\n        hs = http_server('', int(sys.argv[2]), rs, lg)\n        hs.install_handler (dh)\n        ftp = ftp_server.ftp_server (\n                ftp_server.dummy_authorizer(sys.argv[1]),\n                port=8021,\n                resolver=rs,\n",
                    "rendered": {
                      "text": "        dh = default_handler.default_handler (fs)\n        hs = http_server('', int(sys.argv[2]), rs, lg)\n        hs.install_handler (dh)\n        ftp = ftp_server.ftp_server (\n                ftp_server.dummy_authorizer(sys.argv[1]),\n                port=8021,\n                resolver=rs,\n",
                      "markdown": "`        dh = default_handler.default_handler (fs)\n        hs = http_server('', int(sys.argv[2]), rs, lg)\n        hs.install_handler (dh)\n        ftp = ftp_server.ftp_server (\n                ftp_server.dummy_authorizer(sys.argv[1]),\n                port=8021,\n                resolver=rs,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 37,
                  "endLine": 703,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            self.logger = logger.unresolving_logger (logger_object)\n\n        self.log_info (\n                'Medusa (V%s) started at %s'\n                '\\n\\tHostname: %s'\n                '\\n\\tPort:%d'\n                '\\n' % (\n",
                    "rendered": {
                      "text": "            self.logger = logger.unresolving_logger (logger_object)\n\n        self.log_info (\n                'Medusa (V%s) started at %s'\n                '\\n\\tHostname: %s'\n                '\\n\\tPort:%d'\n                '\\n' % (\n",
                      "markdown": "`            self.logger = logger.unresolving_logger (logger_object)\n\n        self.log_info (\n                'Medusa (V%s) started at %s'\n                '\\n\\tHostname: %s'\n                '\\n\\tPort:%d'\n                '\\n' % (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 848,
                  "startColumn": 7,
                  "endLine": 848,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        dh = default_handler.default_handler (fs)\n        hs = http_server('', int(sys.argv[2]), rs, lg)\n        hs.install_handler (dh)\n        ftp = ftp_server.ftp_server (\n                ftp_server.dummy_authorizer(sys.argv[1]),\n                port=8021,\n                resolver=rs,\n",
                    "rendered": {
                      "text": "        dh = default_handler.default_handler (fs)\n        hs = http_server('', int(sys.argv[2]), rs, lg)\n        hs.install_handler (dh)\n        ftp = ftp_server.ftp_server (\n                ftp_server.dummy_authorizer(sys.argv[1]),\n                port=8021,\n                resolver=rs,\n",
                      "markdown": "`        dh = default_handler.default_handler (fs)\n        hs = http_server('', int(sys.argv[2]), rs, lg)\n        hs.install_handler (dh)\n        ftp = ftp_server.ftp_server (\n                ftp_server.dummy_authorizer(sys.argv[1]),\n                port=8021,\n                resolver=rs,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 685,
                  "startColumn": 49,
                  "endLine": 685,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.server_port = port\n        self.total_clients = counter()\n",
                    "rendered": {
                      "text": "            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.server_port = port\n        self.total_clients = counter()\n",
                      "markdown": "`            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.server_port = port\n        self.total_clients = counter()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 685,
                  "startColumn": 30,
                  "endLine": 685,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.server_port = port\n        self.total_clients = counter()\n",
                    "rendered": {
                      "text": "            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.server_port = port\n        self.total_clients = counter()\n",
                      "markdown": "`            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n            self.log_info('Cannot do reverse lookup', 'warning')\n            self.server_name = ip       # use the IP address as the \"hostname\"\n\n        self.server_port = port\n        self.total_clients = counter()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 680,
                  "startColumn": 11,
                  "endLine": 680,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        host, port = self.socket.getsockname()\n        if not ip:\n            self.log_info('Computing default hostname', 'warning')\n            ip = socket.gethostbyname (socket.gethostname())\n        try:\n            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n",
                    "rendered": {
                      "text": "        host, port = self.socket.getsockname()\n        if not ip:\n            self.log_info('Computing default hostname', 'warning')\n            ip = socket.gethostbyname (socket.gethostname())\n        try:\n            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n",
                      "markdown": "`        host, port = self.socket.getsockname()\n        if not ip:\n            self.log_info('Computing default hostname', 'warning')\n            ip = socket.gethostbyname (socket.gethostname())\n        try:\n            self.server_name = socket.gethostbyaddr (ip)[0]\n        except socket.error:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 17,
                  "endLine": 662,
                  "snippet": {
                    "text": "    channel_class = http_channel\n\n    def __init__ (self, ip, port, resolver=None, logger_object=None):\n        self.ip = ip\n        self.port = port\n        asyncore.dispatcher.__init__ (self)\n        self.create_socket (socket.AF_INET, socket.SOCK_STREAM)\n\n",
                    "rendered": {
                      "text": "    channel_class = http_channel\n\n    def __init__ (self, ip, port, resolver=None, logger_object=None):\n        self.ip = ip\n        self.port = port\n        asyncore.dispatcher.__init__ (self)\n        self.create_socket (socket.AF_INET, socket.SOCK_STREAM)\n\n",
                      "markdown": "`    channel_class = http_channel\n\n    def __init__ (self, ip, port, resolver=None, logger_object=None):\n        self.ip = ip\n        self.port = port\n        asyncore.dispatcher.__init__ (self)\n        self.create_socket (socket.AF_INET, socket.SOCK_STREAM)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 37,
                  "endLine": 533,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            self.last_used = int (time.time())\n            return result\n        except MemoryError:\n            # --- Save a Trip to Your Service Provider ---\n            # It's possible for a process to eat up all the memory of\n            # the machine, and put it in an extremely wedged state,\n            # where medusa keeps running and can't be shut down.  This\n",
                    "rendered": {
                      "text": "            self.last_used = int (time.time())\n            return result\n        except MemoryError:\n            # --- Save a Trip to Your Service Provider ---\n            # It's possible for a process to eat up all the memory of\n            # the machine, and put it in an extremely wedged state,\n            # where medusa keeps running and can't be shut down.  This\n",
                      "markdown": "`            self.last_used = int (time.time())\n            return result\n        except MemoryError:\n            # --- Save a Trip to Your Service Provider ---\n            # It's possible for a process to eat up all the memory of\n            # the machine, and put it in an extremely wedged state,\n            # where medusa keeps running and can't be shut down.  This\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 24,
                  "endLine": 334,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            # Although we don't *really* support http/0.9 (because we'd have to\n            # use \\r\\n as a terminator, and it would just yuck up a lot of stuff)\n            # it's very common for developers to not want to type a version number\n            # when using telnet to debug a server.\n            close_it = 1\n\n        outgoing_header = producers.simple_producer(self.get_reply_header_text())\n",
                    "rendered": {
                      "text": "            # Although we don't *really* support http/0.9 (because we'd have to\n            # use \\r\\n as a terminator, and it would just yuck up a lot of stuff)\n            # it's very common for developers to not want to type a version number\n            # when using telnet to debug a server.\n            close_it = 1\n\n        outgoing_header = producers.simple_producer(self.get_reply_header_text())\n",
                      "markdown": "`            # Although we don't *really* support http/0.9 (because we'd have to\n            # use \\r\\n as a terminator, and it would just yuck up a lot of stuff)\n            # it's very common for developers to not want to type a version number\n            # when using telnet to debug a server.\n            close_it = 1\n\n        outgoing_header = producers.simple_producer(self.get_reply_header_text())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_server.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 6,
                  "endLine": 14,
                  "snippet": {
                    "text": "import re\nimport socket\nimport sys\nimport time\n\nfrom supervisor.compat import as_bytes\n\n# async modules\n",
                    "rendered": {
                      "text": "import re\nimport socket\nimport sys\nimport time\n\nfrom supervisor.compat import as_bytes\n\n# async modules\n",
                      "markdown": "`import re\nimport socket\nimport sys\nimport time\n\nfrom supervisor.compat import as_bytes\n\n# async modules\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/compat.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 9,
                  "endLine": 111,
                  "endColumn": 15,
                  "snippet": {
                    "text": "try: # pragma: no cover\n    from base64 import decodebytes as decodestring, encodebytes as encodestring\nexcept ImportError: # pragma: no cover\n    from base64 import decodestring, encodestring\n\ntry: # pragma: no cover\n    from xmlrpc.client import Fault\n",
                    "rendered": {
                      "text": "try: # pragma: no cover\n    from base64 import decodebytes as decodestring, encodebytes as encodestring\nexcept ImportError: # pragma: no cover\n    from base64 import decodestring, encodestring\n\ntry: # pragma: no cover\n    from xmlrpc.client import Fault\n",
                      "markdown": "`try: # pragma: no cover\n    from base64 import decodebytes as decodestring, encodebytes as encodestring\nexcept ImportError: # pragma: no cover\n    from base64 import decodestring, encodestring\n\ntry: # pragma: no cover\n    from xmlrpc.client import Fault\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/compat.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 9,
                  "endLine": 109,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    import httplib\n\ntry: # pragma: no cover\n    from base64 import decodebytes as decodestring, encodebytes as encodestring\nexcept ImportError: # pragma: no cover\n    from base64 import decodestring, encodestring\n\n",
                    "rendered": {
                      "text": "    import httplib\n\ntry: # pragma: no cover\n    from base64 import decodebytes as decodestring, encodebytes as encodestring\nexcept ImportError: # pragma: no cover\n    from base64 import decodestring, encodestring\n\n",
                      "markdown": "`    import httplib\n\ntry: # pragma: no cover\n    from base64 import decodebytes as decodestring, encodebytes as encodestring\nexcept ImportError: # pragma: no cover\n    from base64 import decodestring, encodestring\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/compat.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 8,
                  "endLine": 111,
                  "endColumn": 16,
                  "snippet": {
                    "text": "try: # pragma: no cover\n    from base64 import decodebytes as decodestring, encodebytes as encodestring\nexcept ImportError: # pragma: no cover\n    from base64 import decodestring, encodestring\n\ntry: # pragma: no cover\n    from xmlrpc.client import Fault\n",
                    "rendered": {
                      "text": "try: # pragma: no cover\n    from base64 import decodebytes as decodestring, encodebytes as encodestring\nexcept ImportError: # pragma: no cover\n    from base64 import decodestring, encodestring\n\ntry: # pragma: no cover\n    from xmlrpc.client import Fault\n",
                      "markdown": "`try: # pragma: no cover\n    from base64 import decodebytes as decodestring, encodebytes as encodestring\nexcept ImportError: # pragma: no cover\n    from base64 import decodestring, encodestring\n\ntry: # pragma: no cover\n    from xmlrpc.client import Fault\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/compat.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 8,
                  "endLine": 109,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    import httplib\n\ntry: # pragma: no cover\n    from base64 import decodebytes as decodestring, encodebytes as encodestring\nexcept ImportError: # pragma: no cover\n    from base64 import decodestring, encodestring\n\n",
                    "rendered": {
                      "text": "    import httplib\n\ntry: # pragma: no cover\n    from base64 import decodebytes as decodestring, encodebytes as encodestring\nexcept ImportError: # pragma: no cover\n    from base64 import decodestring, encodestring\n\n",
                      "markdown": "`    import httplib\n\ntry: # pragma: no cover\n    from base64 import decodebytes as decodestring, encodebytes as encodestring\nexcept ImportError: # pragma: no cover\n    from base64 import decodestring, encodestring\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/ui/stylesheets/supervisor.css"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 7,
                  "endLine": 171,
                  "endColumn": 11,
                  "snippet": {
                    "text": "tr.shade td {\n  background-color: #F0F0F0;\n}\n.action ul {\n  list-style: none;\n  display: inline;\n}\n",
                    "rendered": {
                      "text": "tr.shade td {\n  background-color: #F0F0F0;\n}\n.action ul {\n  list-style: none;\n  display: inline;\n}\n",
                      "markdown": "`tr.shade td {\n  background-color: #F0F0F0;\n}\n.action ul {\n  list-style: none;\n  display: inline;\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 7,
                  "endLine": 344,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        cmd = \"'%s' -m supervisor.supervisorctl -c '%s' tail -f spew | /bin/cat -u\" % (\n            sys.executable, filename\n            )\n        bash = pexpect.spawn('/bin/sh', ['-c', cmd], encoding='utf-8')\n        self.addCleanup(bash.kill, signal.SIGINT)\n        bash.expect('spewage 2', timeout=30)\n\n",
                    "rendered": {
                      "text": "        cmd = \"'%s' -m supervisor.supervisorctl -c '%s' tail -f spew | /bin/cat -u\" % (\n            sys.executable, filename\n            )\n        bash = pexpect.spawn('/bin/sh', ['-c', cmd], encoding='utf-8')\n        self.addCleanup(bash.kill, signal.SIGINT)\n        bash.expect('spewage 2', timeout=30)\n\n",
                      "markdown": "`        cmd = \"'%s' -m supervisor.supervisorctl -c '%s' tail -f spew | /bin/cat -u\" % (\n            sys.executable, filename\n            )\n        bash = pexpect.spawn('/bin/sh', ['-c', cmd], encoding='utf-8')\n        self.addCleanup(bash.kill, signal.SIGINT)\n        bash.expect('spewage 2', timeout=30)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 7,
                  "endLine": 341,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        self.addCleanup(supervisord.kill, signal.SIGINT)\n        supervisord.expect_exact('success: spew entered RUNNING state')\n\n        cmd = \"'%s' -m supervisor.supervisorctl -c '%s' tail -f spew | /bin/cat -u\" % (\n            sys.executable, filename\n            )\n        bash = pexpect.spawn('/bin/sh', ['-c', cmd], encoding='utf-8')\n",
                    "rendered": {
                      "text": "        self.addCleanup(supervisord.kill, signal.SIGINT)\n        supervisord.expect_exact('success: spew entered RUNNING state')\n\n        cmd = \"'%s' -m supervisor.supervisorctl -c '%s' tail -f spew | /bin/cat -u\" % (\n            sys.executable, filename\n            )\n        bash = pexpect.spawn('/bin/sh', ['-c', cmd], encoding='utf-8')\n",
                      "markdown": "`        self.addCleanup(supervisord.kill, signal.SIGINT)\n        supervisord.expect_exact('success: spew entered RUNNING state')\n\n        cmd = \"'%s' -m supervisor.supervisorctl -c '%s' tail -f spew | /bin/cat -u\" % (\n            sys.executable, filename\n            )\n        bash = pexpect.spawn('/bin/sh', ['-c', cmd], encoding='utf-8')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 52,
                  "endLine": 327,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        args = ['-m', 'supervisor.supervisorctl', '-?']\n        supervisorctl = pexpect.spawn(sys.executable, args, encoding='utf-8')\n        self.addCleanup(supervisorctl.kill, signal.SIGINT)\n        supervisorctl.expect_exact(\"supervisorctl -- control applications\")\n        supervisorctl.expect_exact(\"-i/--interactive -- start an interactive\")\n        supervisorctl.expect(pexpect.EOF)\n\n",
                    "rendered": {
                      "text": "        args = ['-m', 'supervisor.supervisorctl', '-?']\n        supervisorctl = pexpect.spawn(sys.executable, args, encoding='utf-8')\n        self.addCleanup(supervisorctl.kill, signal.SIGINT)\n        supervisorctl.expect_exact(\"supervisorctl -- control applications\")\n        supervisorctl.expect_exact(\"-i/--interactive -- start an interactive\")\n        supervisorctl.expect(pexpect.EOF)\n\n",
                      "markdown": "`        args = ['-m', 'supervisor.supervisorctl', '-?']\n        supervisorctl = pexpect.spawn(sys.executable, args, encoding='utf-8')\n        self.addCleanup(supervisorctl.kill, signal.SIGINT)\n        supervisorctl.expect_exact(\"supervisorctl -- control applications\")\n        supervisorctl.expect_exact(\"-i/--interactive -- start an interactive\")\n        supervisorctl.expect(pexpect.EOF)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 7,
                  "endLine": 344,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        cmd = \"'%s' -m supervisor.supervisorctl -c '%s' tail -f spew | /bin/cat -u\" % (\n            sys.executable, filename\n            )\n        bash = pexpect.spawn('/bin/sh', ['-c', cmd], encoding='utf-8')\n        self.addCleanup(bash.kill, signal.SIGINT)\n        bash.expect('spewage 2', timeout=30)\n\n",
                    "rendered": {
                      "text": "        cmd = \"'%s' -m supervisor.supervisorctl -c '%s' tail -f spew | /bin/cat -u\" % (\n            sys.executable, filename\n            )\n        bash = pexpect.spawn('/bin/sh', ['-c', cmd], encoding='utf-8')\n        self.addCleanup(bash.kill, signal.SIGINT)\n        bash.expect('spewage 2', timeout=30)\n\n",
                      "markdown": "`        cmd = \"'%s' -m supervisor.supervisorctl -c '%s' tail -f spew | /bin/cat -u\" % (\n            sys.executable, filename\n            )\n        bash = pexpect.spawn('/bin/sh', ['-c', cmd], encoding='utf-8')\n        self.addCleanup(bash.kill, signal.SIGINT)\n        bash.expect('spewage 2', timeout=30)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 55,
                  "endLine": 341,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        self.addCleanup(supervisord.kill, signal.SIGINT)\n        supervisord.expect_exact('success: spew entered RUNNING state')\n\n        cmd = \"'%s' -m supervisor.supervisorctl -c '%s' tail -f spew | /bin/cat -u\" % (\n            sys.executable, filename\n            )\n        bash = pexpect.spawn('/bin/sh', ['-c', cmd], encoding='utf-8')\n",
                    "rendered": {
                      "text": "        self.addCleanup(supervisord.kill, signal.SIGINT)\n        supervisord.expect_exact('success: spew entered RUNNING state')\n\n        cmd = \"'%s' -m supervisor.supervisorctl -c '%s' tail -f spew | /bin/cat -u\" % (\n            sys.executable, filename\n            )\n        bash = pexpect.spawn('/bin/sh', ['-c', cmd], encoding='utf-8')\n",
                      "markdown": "`        self.addCleanup(supervisord.kill, signal.SIGINT)\n        supervisord.expect_exact('success: spew entered RUNNING state')\n\n        cmd = \"'%s' -m supervisor.supervisorctl -c '%s' tail -f spew | /bin/cat -u\" % (\n            sys.executable, filename\n            )\n        bash = pexpect.spawn('/bin/sh', ['-c', cmd], encoding='utf-8')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 36,
                  "endLine": 333,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n    def test_issue_1298(self):\n        \"\"\"When the output of 'supervisorctl tail -f worker' is piped such as\n        'supervisor tail -f worker | grep something', 'supervisorctl' should\n        not crash.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1298.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n",
                    "rendered": {
                      "text": "\n    def test_issue_1298(self):\n        \"\"\"When the output of 'supervisorctl tail -f worker' is piped such as\n        'supervisor tail -f worker | grep something', 'supervisorctl' should\n        not crash.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1298.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n",
                      "markdown": "`\n    def test_issue_1298(self):\n        \"\"\"When the output of 'supervisorctl tail -f worker' is piped such as\n        'supervisor tail -f worker | grep something', 'supervisorctl' should\n        not crash.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1298.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 19,
                  "endLine": 333,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n    def test_issue_1298(self):\n        \"\"\"When the output of 'supervisorctl tail -f worker' is piped such as\n        'supervisor tail -f worker | grep something', 'supervisorctl' should\n        not crash.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1298.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n",
                    "rendered": {
                      "text": "\n    def test_issue_1298(self):\n        \"\"\"When the output of 'supervisorctl tail -f worker' is piped such as\n        'supervisor tail -f worker | grep something', 'supervisorctl' should\n        not crash.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1298.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n",
                      "markdown": "`\n    def test_issue_1298(self):\n        \"\"\"When the output of 'supervisorctl tail -f worker' is piped such as\n        'supervisor tail -f worker | grep something', 'supervisorctl' should\n        not crash.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1298.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 44,
                  "endLine": 332,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        supervisorctl.expect(pexpect.EOF)\n\n    def test_issue_1298(self):\n        \"\"\"When the output of 'supervisorctl tail -f worker' is piped such as\n        'supervisor tail -f worker | grep something', 'supervisorctl' should\n        not crash.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1298.conf')\n",
                    "rendered": {
                      "text": "        supervisorctl.expect(pexpect.EOF)\n\n    def test_issue_1298(self):\n        \"\"\"When the output of 'supervisorctl tail -f worker' is piped such as\n        'supervisor tail -f worker | grep something', 'supervisorctl' should\n        not crash.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1298.conf')\n",
                      "markdown": "`        supervisorctl.expect(pexpect.EOF)\n\n    def test_issue_1298(self):\n        \"\"\"When the output of 'supervisorctl tail -f worker' is piped such as\n        'supervisor tail -f worker | grep something', 'supervisorctl' should\n        not crash.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1298.conf')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 7,
                  "endLine": 300,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        supervisord.expect_exact('success: hello entered RUNNING state')\n\n        args = ['-m', 'supervisor.supervisorctl', '-c', filename, 'tail', 'hello']\n        env = os.environ.copy()\n        env['LANG'] = 'oops'\n        supervisorctl = pexpect.spawn(sys.executable, args, encoding='utf-8',\n                                      env=env)\n",
                    "rendered": {
                      "text": "        supervisord.expect_exact('success: hello entered RUNNING state')\n\n        args = ['-m', 'supervisor.supervisorctl', '-c', filename, 'tail', 'hello']\n        env = os.environ.copy()\n        env['LANG'] = 'oops'\n        supervisorctl = pexpect.spawn(sys.executable, args, encoding='utf-8',\n                                      env=env)\n",
                      "markdown": "`        supervisord.expect_exact('success: hello entered RUNNING state')\n\n        args = ['-m', 'supervisor.supervisorctl', '-c', filename, 'tail', 'hello']\n        env = os.environ.copy()\n        env['LANG'] = 'oops'\n        supervisorctl = pexpect.spawn(sys.executable, args, encoding='utf-8',\n                                      env=env)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 30,
                  "endLine": 291,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                break\n\n    def test_issue_1231c(self):\n        \"\"\"When 'supervisorctl tail -f name' is run and the log contains\n        unicode, it should not fail.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1231c.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n",
                    "rendered": {
                      "text": "                break\n\n    def test_issue_1231c(self):\n        \"\"\"When 'supervisorctl tail -f name' is run and the log contains\n        unicode, it should not fail.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1231c.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n",
                      "markdown": "`                break\n\n    def test_issue_1231c(self):\n        \"\"\"When 'supervisorctl tail -f name' is run and the log contains\n        unicode, it should not fail.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1231c.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 7,
                  "endLine": 266,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        supervisord.expect_exact('success: hello entered RUNNING state')\n\n        args = ['-m', 'supervisor.supervisorctl', '-c', filename, 'tail', '-f', 'hello']\n        env = os.environ.copy()\n        env['LANG'] = 'oops'\n        supervisorctl = pexpect.spawn(sys.executable, args, encoding='utf-8',\n                                      env=env)\n",
                    "rendered": {
                      "text": "        supervisord.expect_exact('success: hello entered RUNNING state')\n\n        args = ['-m', 'supervisor.supervisorctl', '-c', filename, 'tail', '-f', 'hello']\n        env = os.environ.copy()\n        env['LANG'] = 'oops'\n        supervisorctl = pexpect.spawn(sys.executable, args, encoding='utf-8',\n                                      env=env)\n",
                      "markdown": "`        supervisord.expect_exact('success: hello entered RUNNING state')\n\n        args = ['-m', 'supervisor.supervisorctl', '-c', filename, 'tail', '-f', 'hello']\n        env = os.environ.copy()\n        env['LANG'] = 'oops'\n        supervisorctl = pexpect.spawn(sys.executable, args, encoding='utf-8',\n                                      env=env)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 30,
                  "endLine": 257,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            supervisorctl.expect_exact(line, timeout=30)\n\n    def test_issue_1231b(self):\n        \"\"\"When 'supervisorctl tail -f name' is run and the log contains\n        unicode, it should not fail.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1231b.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n",
                    "rendered": {
                      "text": "            supervisorctl.expect_exact(line, timeout=30)\n\n    def test_issue_1231b(self):\n        \"\"\"When 'supervisorctl tail -f name' is run and the log contains\n        unicode, it should not fail.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1231b.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n",
                      "markdown": "`            supervisorctl.expect_exact(line, timeout=30)\n\n    def test_issue_1231b(self):\n        \"\"\"When 'supervisorctl tail -f name' is run and the log contains\n        unicode, it should not fail.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1231b.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 30,
                  "endLine": 240,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        supervisord.expect_exact('cat entered RUNNING state', timeout=60)\n\n    def test_issue_1231a(self):\n        \"\"\"When 'supervisorctl tail -f name' is run and the log contains\n        unicode, it should not fail.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1231a.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n",
                    "rendered": {
                      "text": "        supervisord.expect_exact('cat entered RUNNING state', timeout=60)\n\n    def test_issue_1231a(self):\n        \"\"\"When 'supervisorctl tail -f name' is run and the log contains\n        unicode, it should not fail.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1231a.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n",
                      "markdown": "`        supervisord.expect_exact('cat entered RUNNING state', timeout=60)\n\n    def test_issue_1231a(self):\n        \"\"\"When 'supervisorctl tail -f name' is run and the log contains\n        unicode, it should not fail.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1231a.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_end_to_end.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 7,
                  "endLine": 57,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n    def test_issue_565(self):\n        \"\"\"When a log file has Unicode characters in it, 'supervisorctl\n        tail -f name' should still work.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-565.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n        supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')\n",
                    "rendered": {
                      "text": "\n    def test_issue_565(self):\n        \"\"\"When a log file has Unicode characters in it, 'supervisorctl\n        tail -f name' should still work.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-565.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n        supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')\n",
                      "markdown": "`\n    def test_issue_565(self):\n        \"\"\"When a log file has Unicode characters in it, 'supervisorctl\n        tail -f name' should still work.\"\"\"\n        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-565.conf')\n        args = ['-m', 'supervisor.supervisord', '-c', filename]\n        supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 2175,
                  "startColumn": 20,
                  "endLine": 2175,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n    if _signames is None:\n        _init_signames()\n    return _signames.get(sig) or \"signal %d\" % sig\n\ndef _init_signames():\n    global _signames\n",
                    "rendered": {
                      "text": "\n    if _signames is None:\n        _init_signames()\n    return _signames.get(sig) or \"signal %d\" % sig\n\ndef _init_signames():\n    global _signames\n",
                      "markdown": "`\n    if _signames is None:\n        _init_signames()\n    return _signames.get(sig) or \"signal %d\" % sig\n\ndef _init_signames():\n    global _signames\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1897,
                  "startColumn": 35,
                  "endLine": 1897,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        '''Return a list corresponding to $PATH that is configured to be set\n        in the process environment, or the system default.'''\n        if self.environment is not None:\n            path = self.environment.get('PATH')\n            if path is not None:\n                return path.split(os.pathsep)\n        return self.options.get_path()\n",
                    "rendered": {
                      "text": "        '''Return a list corresponding to $PATH that is configured to be set\n        in the process environment, or the system default.'''\n        if self.environment is not None:\n            path = self.environment.get('PATH')\n            if path is not None:\n                return path.split(os.pathsep)\n        return self.options.get_path()\n",
                      "markdown": "`        '''Return a list corresponding to $PATH that is configured to be set\n        in the process environment, or the system default.'''\n        if self.environment is not None:\n            path = self.environment.get('PATH')\n            if path is not None:\n                return path.split(os.pathsep)\n        return self.options.get_path()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1879,
                  "startColumn": 38,
                  "endLine": 1879,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        for name in self.req_param_names:\n            setattr(self, name, params[name])\n        for name in self.optional_param_names:\n            setattr(self, name, params.get(name, None))\n\n    def __eq__(self, other):\n        if not isinstance(other, ProcessConfig):\n",
                    "rendered": {
                      "text": "        for name in self.req_param_names:\n            setattr(self, name, params[name])\n        for name in self.optional_param_names:\n            setattr(self, name, params.get(name, None))\n\n    def __eq__(self, other):\n        if not isinstance(other, ProcessConfig):\n",
                      "markdown": "`        for name in self.req_param_names:\n            setattr(self, name, params[name])\n        for name in self.optional_param_names:\n            setattr(self, name, params.get(name, None))\n\n    def __eq__(self, other):\n        if not isinstance(other, ProcessConfig):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1798,
                  "startColumn": 25,
                  "endLine": 1798,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    def saneget(self, section, option, default=_marker, do_expand=True,\n                expansions={}):\n        try:\n            optval = self.get(section, option)\n        except ConfigParser.NoOptionError:\n            if default is _marker:\n                raise\n",
                    "rendered": {
                      "text": "    def saneget(self, section, option, default=_marker, do_expand=True,\n                expansions={}):\n        try:\n            optval = self.get(section, option)\n        except ConfigParser.NoOptionError:\n            if default is _marker:\n                raise\n",
                      "markdown": "`    def saneget(self, section, option, default=_marker, do_expand=True,\n                expansions={}):\n        try:\n            optval = self.get(section, option)\n        except ConfigParser.NoOptionError:\n            if default is _marker:\n                raise\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1631,
                  "startColumn": 22,
                  "endLine": 1631,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    def close_child_pipes(self, pipes):\n        for fdname in ('child_stdin', 'child_stdout', 'child_stderr'):\n            fd = pipes.get(fdname)\n            if fd is not None:\n                self.close_fd(fd)\n\n",
                    "rendered": {
                      "text": "\n    def close_child_pipes(self, pipes):\n        for fdname in ('child_stdin', 'child_stdout', 'child_stderr'):\n            fd = pipes.get(fdname)\n            if fd is not None:\n                self.close_fd(fd)\n\n",
                      "markdown": "`\n    def close_child_pipes(self, pipes):\n        for fdname in ('child_stdin', 'child_stdout', 'child_stderr'):\n            fd = pipes.get(fdname)\n            if fd is not None:\n                self.close_fd(fd)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1625,
                  "startColumn": 22,
                  "endLine": 1625,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    def close_parent_pipes(self, pipes):\n        for fdname in ('stdin', 'stdout', 'stderr'):\n            fd = pipes.get(fdname)\n            if fd is not None:\n                self.close_fd(fd)\n\n",
                    "rendered": {
                      "text": "\n    def close_parent_pipes(self, pipes):\n        for fdname in ('stdin', 'stdout', 'stderr'):\n            fd = pipes.get(fdname)\n            if fd is not None:\n                self.close_fd(fd)\n\n",
                      "markdown": "`\n    def close_parent_pipes(self, pipes):\n        for fdname in ('stdin', 'stdout', 'stderr'):\n            fd = pipes.get(fdname)\n            if fd is not None:\n                self.close_fd(fd)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1276,
                  "startColumn": 43,
                  "endLine": 1276,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                           'down first before starting supervisord.')\n            else:\n                help = 'Cannot open an HTTP server: socket.error reported'\n                errorname = errno.errorcode.get(why.args[0])\n                if errorname is None:\n                    self.usage('%s %s' % (help, why.args[0]))\n                else:\n",
                    "rendered": {
                      "text": "                           'down first before starting supervisord.')\n            else:\n                help = 'Cannot open an HTTP server: socket.error reported'\n                errorname = errno.errorcode.get(why.args[0])\n                if errorname is None:\n                    self.usage('%s %s' % (help, why.args[0]))\n                else:\n",
                      "markdown": "`                           'down first before starting supervisord.')\n            else:\n                help = 'Cannot open an HTTP server: socket.error reported'\n                errorname = errno.errorcode.get(why.args[0])\n                if errorname is None:\n                    self.usage('%s %s' % (help, why.args[0]))\n                else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 906,
                  "startColumn": 31,
                  "endLine": 906,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                      'host_node_name':host_node_name,\n                      'group_name':group_name}\n        def get(section, opt, *args, **kwargs):\n            expansions = kwargs.get('expansions', {})\n            expansions.update(common_expansions)\n            kwargs['expansions'] = expansions\n            return parser.saneget(section, opt, *args, **kwargs)\n",
                    "rendered": {
                      "text": "                      'host_node_name':host_node_name,\n                      'group_name':group_name}\n        def get(section, opt, *args, **kwargs):\n            expansions = kwargs.get('expansions', {})\n            expansions.update(common_expansions)\n            kwargs['expansions'] = expansions\n            return parser.saneget(section, opt, *args, **kwargs)\n",
                      "markdown": "`                      'host_node_name':host_node_name,\n                      'group_name':group_name}\n        def get(section, opt, *args, **kwargs):\n            expansions = kwargs.get('expansions', {})\n            expansions.update(common_expansions)\n            kwargs['expansions'] = expansions\n            return parser.saneget(section, opt, *args, **kwargs)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 45,
                  "endLine": 889,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            return self._processes_from_section(\n                parser, section, group_name, klass)\n        except ValueError as e:\n            filename = parser.section_to_file.get(section, self.configfile)\n            raise ValueError('%s in section %r (file: %r)'\n                             % (e, section, filename))\n\n",
                    "rendered": {
                      "text": "            return self._processes_from_section(\n                parser, section, group_name, klass)\n        except ValueError as e:\n            filename = parser.section_to_file.get(section, self.configfile)\n            raise ValueError('%s in section %r (file: %r)'\n                             % (e, section, filename))\n\n",
                      "markdown": "`            return self._processes_from_section(\n                parser, section, group_name, klass)\n        except ValueError as e:\n            filename = parser.section_to_file.get(section, self.configfile)\n            raise ValueError('%s in section %r (file: %r)'\n                             % (e, section, filename))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 31,
                  "endLine": 686,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        common_expansions = {'here':self.here}\n        def get(section, opt, default, **kwargs):\n            expansions = kwargs.get('expansions', {})\n            expansions.update(common_expansions)\n            kwargs['expansions'] = expansions\n            return parser.saneget(section, opt, default, **kwargs)\n",
                    "rendered": {
                      "text": "\n        common_expansions = {'here':self.here}\n        def get(section, opt, default, **kwargs):\n            expansions = kwargs.get('expansions', {})\n            expansions.update(common_expansions)\n            kwargs['expansions'] = expansions\n            return parser.saneget(section, opt, default, **kwargs)\n",
                      "markdown": "`\n        common_expansions = {'here':self.here}\n        def get(section, opt, default, **kwargs):\n            expansions = kwargs.get('expansions', {})\n            expansions.update(common_expansions)\n            kwargs['expansions'] = expansions\n            return parser.saneget(section, opt, default, **kwargs)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 31,
                  "endLine": 624,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        common_expansions = {'here':self.here}\n        def get(opt, default, **kwargs):\n            expansions = kwargs.get('expansions', {})\n            expansions.update(common_expansions)\n            kwargs['expansions'] = expansions\n            return parser.getdefault(opt, default, **kwargs)\n",
                    "rendered": {
                      "text": "\n        common_expansions = {'here':self.here}\n        def get(opt, default, **kwargs):\n            expansions = kwargs.get('expansions', {})\n            expansions.update(common_expansions)\n            kwargs['expansions'] = expansions\n            return parser.getdefault(opt, default, **kwargs)\n",
                      "markdown": "`\n        common_expansions = {'here':self.here}\n        def get(opt, default, **kwargs):\n            expansions = kwargs.get('expansions', {})\n            expansions.update(common_expansions)\n            kwargs['expansions'] = expansions\n            return parser.getdefault(opt, default, **kwargs)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 26,
                  "endLine": 592,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            if not parser.has_option('include', 'files'):\n                raise ValueError(\".ini file has [include] section, but no \"\n                \"files setting\")\n            files = parser.get('include', 'files')\n            files = expand(files, expansions, 'include.files')\n            files = files.split()\n            if hasattr(fp, 'name'):\n",
                    "rendered": {
                      "text": "            if not parser.has_option('include', 'files'):\n                raise ValueError(\".ini file has [include] section, but no \"\n                \"files setting\")\n            files = parser.get('include', 'files')\n            files = expand(files, expansions, 'include.files')\n            files = files.split()\n            if hasattr(fp, 'name'):\n",
                      "markdown": "`            if not parser.has_option('include', 'files'):\n                raise ValueError(\".ini file has [include] section, but no \"\n                \"files setting\")\n            files = parser.get('include', 'files')\n            files = expand(files, expansions, 'include.files')\n            files = files.split()\n            if hasattr(fp, 'name'):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 38,
                  "endLine": 237,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                self.required_map[name] = required\n\n    def _set(self, attr, value, prio):\n        current = self.attr_priorities.get(attr, -1)\n        if prio >= current:\n            setattr(self, attr, value)\n            self.attr_priorities[attr] = prio\n",
                    "rendered": {
                      "text": "                self.required_map[name] = required\n\n    def _set(self, attr, value, prio):\n        current = self.attr_priorities.get(attr, -1)\n        if prio >= current:\n            setattr(self, attr, value)\n            self.attr_priorities[attr] = prio\n",
                      "markdown": "`                self.required_map[name] = required\n\n    def _set(self, attr, value, prio):\n        current = self.attr_priorities.get(attr, -1)\n        if prio >= current:\n            setattr(self, attr, value)\n            self.attr_priorities[attr] = prio\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1740,
                  "startColumn": 56,
                  "endLine": 1740,
                  "endColumn": 64,
                  "snippet": {
                    "text": "            # 'serverurl' to figure out what to attach to\n            'http://127.0.0.1',\n            transport = xmlrpc.SupervisorTransport(self.username,\n                                                   self.password,\n                                                   self.serverurl)\n            )\n\n",
                    "rendered": {
                      "text": "            # 'serverurl' to figure out what to attach to\n            'http://127.0.0.1',\n            transport = xmlrpc.SupervisorTransport(self.username,\n                                                   self.password,\n                                                   self.serverurl)\n            )\n\n",
                      "markdown": "`            # 'serverurl' to figure out what to attach to\n            'http://127.0.0.1',\n            transport = xmlrpc.SupervisorTransport(self.username,\n                                                   self.password,\n                                                   self.serverurl)\n            )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1712,
                  "startColumn": 65,
                  "endLine": 1712,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        # section==self.configroot.supervisorctl)\n        section.prompt = parser.getdefault('prompt', section.prompt)\n        section.username = parser.getdefault('username', section.username)\n        section.password = parser.getdefault('password', section.password)\n        history_file = parser.getdefault('history_file', section.history_file,\n            expansions={'here': self.here})\n\n",
                    "rendered": {
                      "text": "        # section==self.configroot.supervisorctl)\n        section.prompt = parser.getdefault('prompt', section.prompt)\n        section.username = parser.getdefault('username', section.username)\n        section.password = parser.getdefault('password', section.password)\n        history_file = parser.getdefault('history_file', section.history_file,\n            expansions={'here': self.here})\n\n",
                      "markdown": "`        # section==self.configroot.supervisorctl)\n        section.prompt = parser.getdefault('prompt', section.prompt)\n        section.username = parser.getdefault('username', section.username)\n        section.password = parser.getdefault('password', section.password)\n        history_file = parser.getdefault('history_file', section.history_file,\n            expansions={'here': self.here})\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1712,
                  "startColumn": 46,
                  "endLine": 1712,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        # section==self.configroot.supervisorctl)\n        section.prompt = parser.getdefault('prompt', section.prompt)\n        section.username = parser.getdefault('username', section.username)\n        section.password = parser.getdefault('password', section.password)\n        history_file = parser.getdefault('history_file', section.history_file,\n            expansions={'here': self.here})\n\n",
                    "rendered": {
                      "text": "        # section==self.configroot.supervisorctl)\n        section.prompt = parser.getdefault('prompt', section.prompt)\n        section.username = parser.getdefault('username', section.username)\n        section.password = parser.getdefault('password', section.password)\n        history_file = parser.getdefault('history_file', section.history_file,\n            expansions={'here': self.here})\n\n",
                      "markdown": "`        # section==self.configroot.supervisorctl)\n        section.prompt = parser.getdefault('prompt', section.prompt)\n        section.username = parser.getdefault('username', section.username)\n        section.password = parser.getdefault('password', section.password)\n        history_file = parser.getdefault('history_file', section.history_file,\n            expansions={'here': self.here})\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1712,
                  "startColumn": 16,
                  "endLine": 1712,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        # section==self.configroot.supervisorctl)\n        section.prompt = parser.getdefault('prompt', section.prompt)\n        section.username = parser.getdefault('username', section.username)\n        section.password = parser.getdefault('password', section.password)\n        history_file = parser.getdefault('history_file', section.history_file,\n            expansions={'here': self.here})\n\n",
                    "rendered": {
                      "text": "        # section==self.configroot.supervisorctl)\n        section.prompt = parser.getdefault('prompt', section.prompt)\n        section.username = parser.getdefault('username', section.username)\n        section.password = parser.getdefault('password', section.password)\n        history_file = parser.getdefault('history_file', section.history_file,\n            expansions={'here': self.here})\n\n",
                      "markdown": "`        # section==self.configroot.supervisorctl)\n        section.prompt = parser.getdefault('prompt', section.prompt)\n        section.username = parser.getdefault('username', section.username)\n        section.password = parser.getdefault('password', section.password)\n        history_file = parser.getdefault('history_file', section.history_file,\n            expansions={'here': self.here})\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1668,
                  "startColumn": 62,
                  "endLine": 1668,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        self.add(\"serverurl\", \"supervisorctl.serverurl\", \"s:\", \"serverurl=\",\n                 url, default=\"http://localhost:9001\")\n        self.add(\"username\", \"supervisorctl.username\", \"u:\", \"username=\")\n        self.add(\"password\", \"supervisorctl.password\", \"p:\", \"password=\")\n        self.add(\"history\", \"supervisorctl.history_file\", \"r:\", \"history_file=\")\n\n    def realize(self, *arg, **kw):\n",
                    "rendered": {
                      "text": "        self.add(\"serverurl\", \"supervisorctl.serverurl\", \"s:\", \"serverurl=\",\n                 url, default=\"http://localhost:9001\")\n        self.add(\"username\", \"supervisorctl.username\", \"u:\", \"username=\")\n        self.add(\"password\", \"supervisorctl.password\", \"p:\", \"password=\")\n        self.add(\"history\", \"supervisorctl.history_file\", \"r:\", \"history_file=\")\n\n    def realize(self, *arg, **kw):\n",
                      "markdown": "`        self.add(\"serverurl\", \"supervisorctl.serverurl\", \"s:\", \"serverurl=\",\n                 url, default=\"http://localhost:9001\")\n        self.add(\"username\", \"supervisorctl.username\", \"u:\", \"username=\")\n        self.add(\"password\", \"supervisorctl.password\", \"p:\", \"password=\")\n        self.add(\"history\", \"supervisorctl.history_file\", \"r:\", \"history_file=\")\n\n    def realize(self, *arg, **kw):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1668,
                  "startColumn": 44,
                  "endLine": 1668,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        self.add(\"serverurl\", \"supervisorctl.serverurl\", \"s:\", \"serverurl=\",\n                 url, default=\"http://localhost:9001\")\n        self.add(\"username\", \"supervisorctl.username\", \"u:\", \"username=\")\n        self.add(\"password\", \"supervisorctl.password\", \"p:\", \"password=\")\n        self.add(\"history\", \"supervisorctl.history_file\", \"r:\", \"history_file=\")\n\n    def realize(self, *arg, **kw):\n",
                    "rendered": {
                      "text": "        self.add(\"serverurl\", \"supervisorctl.serverurl\", \"s:\", \"serverurl=\",\n                 url, default=\"http://localhost:9001\")\n        self.add(\"username\", \"supervisorctl.username\", \"u:\", \"username=\")\n        self.add(\"password\", \"supervisorctl.password\", \"p:\", \"password=\")\n        self.add(\"history\", \"supervisorctl.history_file\", \"r:\", \"history_file=\")\n\n    def realize(self, *arg, **kw):\n",
                      "markdown": "`        self.add(\"serverurl\", \"supervisorctl.serverurl\", \"s:\", \"serverurl=\",\n                 url, default=\"http://localhost:9001\")\n        self.add(\"username\", \"supervisorctl.username\", \"u:\", \"username=\")\n        self.add(\"password\", \"supervisorctl.password\", \"p:\", \"password=\")\n        self.add(\"history\", \"supervisorctl.history_file\", \"r:\", \"history_file=\")\n\n    def realize(self, *arg, **kw):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1668,
                  "startColumn": 18,
                  "endLine": 1668,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        self.add(\"serverurl\", \"supervisorctl.serverurl\", \"s:\", \"serverurl=\",\n                 url, default=\"http://localhost:9001\")\n        self.add(\"username\", \"supervisorctl.username\", \"u:\", \"username=\")\n        self.add(\"password\", \"supervisorctl.password\", \"p:\", \"password=\")\n        self.add(\"history\", \"supervisorctl.history_file\", \"r:\", \"history_file=\")\n\n    def realize(self, *arg, **kw):\n",
                    "rendered": {
                      "text": "        self.add(\"serverurl\", \"supervisorctl.serverurl\", \"s:\", \"serverurl=\",\n                 url, default=\"http://localhost:9001\")\n        self.add(\"username\", \"supervisorctl.username\", \"u:\", \"username=\")\n        self.add(\"password\", \"supervisorctl.password\", \"p:\", \"password=\")\n        self.add(\"history\", \"supervisorctl.history_file\", \"r:\", \"history_file=\")\n\n    def realize(self, *arg, **kw):\n",
                      "markdown": "`        self.add(\"serverurl\", \"supervisorctl.serverurl\", \"s:\", \"serverurl=\",\n                 url, default=\"http://localhost:9001\")\n        self.add(\"username\", \"supervisorctl.username\", \"u:\", \"username=\")\n        self.add(\"password\", \"supervisorctl.password\", \"p:\", \"password=\")\n        self.add(\"history\", \"supervisorctl.history_file\", \"r:\", \"history_file=\")\n\n    def realize(self, *arg, **kw):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1653,
                  "startColumn": 38,
                  "endLine": 1653,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        self.configroot.supervisorctl.prompt = 'supervisor'\n        self.configroot.supervisorctl.serverurl = None\n        self.configroot.supervisorctl.username = None\n        self.configroot.supervisorctl.password = None\n        self.configroot.supervisorctl.history_file = None\n\n        from supervisor.supervisorctl import DefaultControllerPlugin\n",
                    "rendered": {
                      "text": "        self.configroot.supervisorctl.prompt = 'supervisor'\n        self.configroot.supervisorctl.serverurl = None\n        self.configroot.supervisorctl.username = None\n        self.configroot.supervisorctl.password = None\n        self.configroot.supervisorctl.history_file = None\n\n        from supervisor.supervisorctl import DefaultControllerPlugin\n",
                      "markdown": "`        self.configroot.supervisorctl.prompt = 'supervisor'\n        self.configroot.supervisorctl.serverurl = None\n        self.configroot.supervisorctl.username = None\n        self.configroot.supervisorctl.password = None\n        self.configroot.supervisorctl.history_file = None\n\n        from supervisor.supervisorctl import DefaultControllerPlugin\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1642,
                  "startColumn": 4,
                  "endLine": 1642,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    prompt = None\n    serverurl = None\n    username = None\n    password = None\n    history_file = None\n\n    def __init__(self):\n",
                    "rendered": {
                      "text": "    prompt = None\n    serverurl = None\n    username = None\n    password = None\n    history_file = None\n\n    def __init__(self):\n",
                      "markdown": "`    prompt = None\n    serverurl = None\n    username = None\n    password = None\n    history_file = None\n\n    def __init__(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1118,
                  "startColumn": 51,
                  "endLine": 1118,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            config['name'] = name\n            config['family'] = socket.AF_UNIX\n            config['file'] = normalize_path(sfile)\n            config.update(self._parse_username_and_password(parser, section))\n            chown = get(section, 'chown', None)\n            if chown is not None:\n                try:\n",
                    "rendered": {
                      "text": "            config['name'] = name\n            config['family'] = socket.AF_UNIX\n            config['file'] = normalize_path(sfile)\n            config.update(self._parse_username_and_password(parser, section))\n            chown = get(section, 'chown', None)\n            if chown is not None:\n                try:\n",
                      "markdown": "`            config['name'] = name\n            config['family'] = socket.AF_UNIX\n            config['file'] = normalize_path(sfile)\n            config.update(self._parse_username_and_password(parser, section))\n            chown = get(section, 'chown', None)\n            if chown is not None:\n                try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1095,
                  "startColumn": 51,
                  "endLine": 1095,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        for name, section in inet_serverdefs:\n            config = {}\n            get = parser.saneget\n            config.update(self._parse_username_and_password(parser, section))\n            config['name'] = name\n            config['family'] = socket.AF_INET\n            port = get(section, 'port', None)\n",
                    "rendered": {
                      "text": "        for name, section in inet_serverdefs:\n            config = {}\n            get = parser.saneget\n            config.update(self._parse_username_and_password(parser, section))\n            config['name'] = name\n            config['family'] = socket.AF_INET\n            port = get(section, 'port', None)\n",
                      "markdown": "`        for name, section in inet_serverdefs:\n            config = {}\n            get = parser.saneget\n            config.update(self._parse_username_and_password(parser, section))\n            config['name'] = name\n            config['family'] = socket.AF_INET\n            port = get(section, 'port', None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1087,
                  "startColumn": 48,
                  "endLine": 1087,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n                    'username and password must be specified' % section)\n        return {'username':username, 'password':password}\n\n    def server_configs_from_parser(self, parser):\n        configs = []\n",
                    "rendered": {
                      "text": "                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n                    'username and password must be specified' % section)\n        return {'username':username, 'password':password}\n\n    def server_configs_from_parser(self, parser):\n        configs = []\n",
                      "markdown": "`                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n                    'username and password must be specified' % section)\n        return {'username':username, 'password':password}\n\n    def server_configs_from_parser(self, parser):\n        configs = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1087,
                  "startColumn": 38,
                  "endLine": 1087,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n                    'username and password must be specified' % section)\n        return {'username':username, 'password':password}\n\n    def server_configs_from_parser(self, parser):\n        configs = []\n",
                    "rendered": {
                      "text": "                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n                    'username and password must be specified' % section)\n        return {'username':username, 'password':password}\n\n    def server_configs_from_parser(self, parser):\n        configs = []\n",
                      "markdown": "`                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n                    'username and password must be specified' % section)\n        return {'username':username, 'password':password}\n\n    def server_configs_from_parser(self, parser):\n        configs = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1086,
                  "startColumn": 34,
                  "endLine": 1086,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                raise ValueError(\n                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n                    'username and password must be specified' % section)\n        return {'username':username, 'password':password}\n\n    def server_configs_from_parser(self, parser):\n",
                    "rendered": {
                      "text": "                raise ValueError(\n                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n                    'username and password must be specified' % section)\n        return {'username':username, 'password':password}\n\n    def server_configs_from_parser(self, parser):\n",
                      "markdown": "`                raise ValueError(\n                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n                    'username and password must be specified' % section)\n        return {'username':username, 'password':password}\n\n    def server_configs_from_parser(self, parser):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1085,
                  "startColumn": 40,
                  "endLine": 1085,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            if username is None or password is None:\n                raise ValueError(\n                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n                    'username and password must be specified' % section)\n        return {'username':username, 'password':password}\n\n",
                    "rendered": {
                      "text": "            if username is None or password is None:\n                raise ValueError(\n                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n                    'username and password must be specified' % section)\n        return {'username':username, 'password':password}\n\n",
                      "markdown": "`            if username is None or password is None:\n                raise ValueError(\n                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n                    'username and password must be specified' % section)\n        return {'username':username, 'password':password}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1082,
                  "startColumn": 35,
                  "endLine": 1082,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n        if username is not None or password is not None:\n            if username is None or password is None:\n                raise ValueError(\n                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n",
                    "rendered": {
                      "text": "        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n        if username is not None or password is not None:\n            if username is None or password is None:\n                raise ValueError(\n                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n",
                      "markdown": "`        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n        if username is not None or password is not None:\n            if username is None or password is None:\n                raise ValueError(\n                    'Section [%s] contains incomplete authentication: '\n                    'If a username or a password is specified, both the '\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1081,
                  "startColumn": 35,
                  "endLine": 1081,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        get = parser.saneget\n        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n        if username is not None or password is not None:\n            if username is None or password is None:\n                raise ValueError(\n                    'Section [%s] contains incomplete authentication: '\n",
                    "rendered": {
                      "text": "        get = parser.saneget\n        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n        if username is not None or password is not None:\n            if username is None or password is None:\n                raise ValueError(\n                    'Section [%s] contains incomplete authentication: '\n",
                      "markdown": "`        get = parser.saneget\n        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n        if username is not None or password is not None:\n            if username is None or password is None:\n                raise ValueError(\n                    'Section [%s] contains incomplete authentication: '\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1080,
                  "startColumn": 33,
                  "endLine": 1080,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    def _parse_username_and_password(self, parser, section):\n        get = parser.saneget\n        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n        if username is not None or password is not None:\n            if username is None or password is None:\n                raise ValueError(\n",
                    "rendered": {
                      "text": "    def _parse_username_and_password(self, parser, section):\n        get = parser.saneget\n        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n        if username is not None or password is not None:\n            if username is None or password is None:\n                raise ValueError(\n",
                      "markdown": "`    def _parse_username_and_password(self, parser, section):\n        get = parser.saneget\n        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n        if username is not None or password is not None:\n            if username is None or password is None:\n                raise ValueError(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1080,
                  "startColumn": 8,
                  "endLine": 1080,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    def _parse_username_and_password(self, parser, section):\n        get = parser.saneget\n        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n        if username is not None or password is not None:\n            if username is None or password is None:\n                raise ValueError(\n",
                    "rendered": {
                      "text": "    def _parse_username_and_password(self, parser, section):\n        get = parser.saneget\n        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n        if username is not None or password is not None:\n            if username is None or password is None:\n                raise ValueError(\n",
                      "markdown": "`    def _parse_username_and_password(self, parser, section):\n        get = parser.saneget\n        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n        if username is not None or password is not None:\n            if username is None or password is None:\n                raise ValueError(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1077,
                  "startColumn": 28,
                  "endLine": 1077,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                options.append((name, section))\n        return options\n\n    def _parse_username_and_password(self, parser, section):\n        get = parser.saneget\n        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n",
                    "rendered": {
                      "text": "                options.append((name, section))\n        return options\n\n    def _parse_username_and_password(self, parser, section):\n        get = parser.saneget\n        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n",
                      "markdown": "`                options.append((name, section))\n        return options\n\n    def _parse_username_and_password(self, parser, section):\n        get = parser.saneget\n        username = get(section, 'username', None)\n        password = get(section, 'password', None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1897,
                  "startColumn": 24,
                  "endLine": 1897,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        '''Return a list corresponding to $PATH that is configured to be set\n        in the process environment, or the system default.'''\n        if self.environment is not None:\n            path = self.environment.get('PATH')\n            if path is not None:\n                return path.split(os.pathsep)\n        return self.options.get_path()\n",
                    "rendered": {
                      "text": "        '''Return a list corresponding to $PATH that is configured to be set\n        in the process environment, or the system default.'''\n        if self.environment is not None:\n            path = self.environment.get('PATH')\n            if path is not None:\n                return path.split(os.pathsep)\n        return self.options.get_path()\n",
                      "markdown": "`        '''Return a list corresponding to $PATH that is configured to be set\n        in the process environment, or the system default.'''\n        if self.environment is not None:\n            path = self.environment.get('PATH')\n            if path is not None:\n                return path.split(os.pathsep)\n        return self.options.get_path()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 925,
                  "startColumn": 8,
                  "endLine": 925,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        redirect_stderr = boolean(get(section, 'redirect_stderr','false'))\n        numprocs = integer(get(section, 'numprocs', 1))\n        numprocs_start = integer(get(section, 'numprocs_start', 0))\n        environment_str = get(section, 'environment', '', do_expand=False)\n        stdout_cmaxbytes = byte_size(get(section,'stdout_capture_maxbytes','0'))\n        stdout_events = boolean(get(section, 'stdout_events_enabled','false'))\n        stderr_cmaxbytes = byte_size(get(section,'stderr_capture_maxbytes','0'))\n",
                    "rendered": {
                      "text": "        redirect_stderr = boolean(get(section, 'redirect_stderr','false'))\n        numprocs = integer(get(section, 'numprocs', 1))\n        numprocs_start = integer(get(section, 'numprocs_start', 0))\n        environment_str = get(section, 'environment', '', do_expand=False)\n        stdout_cmaxbytes = byte_size(get(section,'stdout_capture_maxbytes','0'))\n        stdout_events = boolean(get(section, 'stdout_events_enabled','false'))\n        stderr_cmaxbytes = byte_size(get(section,'stderr_capture_maxbytes','0'))\n",
                      "markdown": "`        redirect_stderr = boolean(get(section, 'redirect_stderr','false'))\n        numprocs = integer(get(section, 'numprocs', 1))\n        numprocs_start = integer(get(section, 'numprocs_start', 0))\n        environment_str = get(section, 'environment', '', do_expand=False)\n        stdout_cmaxbytes = byte_size(get(section,'stdout_capture_maxbytes','0'))\n        stdout_events = boolean(get(section, 'stdout_events_enabled','false'))\n        stderr_cmaxbytes = byte_size(get(section,'stderr_capture_maxbytes','0'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 8,
                  "endLine": 654,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        section.nocleanup = boolean(get('nocleanup', 'false'))\n        section.strip_ansi = boolean(get('strip_ansi', 'false'))\n\n        environ_str = get('environment', '')\n        environ_str = expand(environ_str, expansions, 'environment')\n        section.environment = dict_of_key_value_pairs(environ_str)\n\n",
                    "rendered": {
                      "text": "        section.nocleanup = boolean(get('nocleanup', 'false'))\n        section.strip_ansi = boolean(get('strip_ansi', 'false'))\n\n        environ_str = get('environment', '')\n        environ_str = expand(environ_str, expansions, 'environment')\n        section.environment = dict_of_key_value_pairs(environ_str)\n\n",
                      "markdown": "`        section.nocleanup = boolean(get('nocleanup', 'false'))\n        section.strip_ansi = boolean(get('strip_ansi', 'false'))\n\n        environ_str = get('environment', '')\n        environ_str = expand(environ_str, expansions, 'environment')\n        section.environment = dict_of_key_value_pairs(environ_str)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 2099,
                  "startColumn": 62,
                  "endLine": 2100,
                  "snippet": {
                    "text": "\ndef tailFile(filename, offset, length):\n    \"\"\"\n    Read length bytes from the file named by filename starting at\n    offset, automatically increasing offset and setting overflow\n    flag if log size has grown beyond (offset + length).  If length\n    bytes are not available, as many bytes as are available are returned.\n    \"\"\"\n",
                    "rendered": {
                      "text": "\ndef tailFile(filename, offset, length):\n    \"\"\"\n    Read length bytes from the file named by filename starting at\n    offset, automatically increasing offset and setting overflow\n    flag if log size has grown beyond (offset + length).  If length\n    bytes are not available, as many bytes as are available are returned.\n    \"\"\"\n",
                      "markdown": "`\ndef tailFile(filename, offset, length):\n    \"\"\"\n    Read length bytes from the file named by filename starting at\n    offset, automatically increasing offset and setting overflow\n    flag if log size has grown beyond (offset + length).  If length\n    bytes are not available, as many bytes as are available are returned.\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 2064,
                  "startColumn": 66,
                  "endLine": 2065,
                  "snippet": {
                    "text": "        return FastCGIProcessGroup(self)\n\ndef readFile(filename, offset, length):\n    \"\"\" Read length bytes from the file named by filename starting at\n    offset \"\"\"\n\n    absoffset = abs(offset)\n    abslength = abs(length)\n",
                    "rendered": {
                      "text": "        return FastCGIProcessGroup(self)\n\ndef readFile(filename, offset, length):\n    \"\"\" Read length bytes from the file named by filename starting at\n    offset \"\"\"\n\n    absoffset = abs(offset)\n    abslength = abs(length)\n",
                      "markdown": "`        return FastCGIProcessGroup(self)\n\ndef readFile(filename, offset, length):\n    \"\"\" Read length bytes from the file named by filename starting at\n    offset \"\"\"\n\n    absoffset = abs(offset)\n    abslength = abs(length)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1903,
                  "startColumn": 45,
                  "endLine": 1903,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        return self.options.get_path()\n\n    def create_autochildlogs(self):\n        # temporary logfiles which are erased at start time\n        get_autoname = self.options.get_autochildlog_name\n        sid = self.options.identifier\n        name = self.name\n",
                    "rendered": {
                      "text": "        return self.options.get_path()\n\n    def create_autochildlogs(self):\n        # temporary logfiles which are erased at start time\n        get_autoname = self.options.get_autochildlog_name\n        sid = self.options.identifier\n        name = self.name\n",
                      "markdown": "`        return self.options.get_path()\n\n    def create_autochildlogs(self):\n        # temporary logfiles which are erased at start time\n        get_autoname = self.options.get_autochildlog_name\n        sid = self.options.identifier\n        name = self.name\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1857,
                  "startColumn": 28,
                  "endLine": 1857,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        return self.priority >= other.priority\n\n    def __repr__(self):\n        return '<%s instance at %s named %s>' % (self.__class__, id(self),\n                                                 self.name)\n\nclass ProcessConfig(Config):\n",
                    "rendered": {
                      "text": "        return self.priority >= other.priority\n\n    def __repr__(self):\n        return '<%s instance at %s named %s>' % (self.__class__, id(self),\n                                                 self.name)\n\nclass ProcessConfig(Config):\n",
                      "markdown": "`        return self.priority >= other.priority\n\n    def __repr__(self):\n        return '<%s instance at %s named %s>' % (self.__class__, id(self),\n                                                 self.name)\n\nclass ProcessConfig(Config):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1569,
                  "startColumn": 40,
                  "endLine": 1569,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            raise NotExecutable(\"command at %r is a directory\" % filename)\n\n        elif not (stat.S_IMODE(st[stat.ST_MODE]) & 0o111):\n            raise NotExecutable(\"command at %r is not executable\" % filename)\n\n        elif not os.access(filename, os.X_OK):\n            raise NoPermission(\"no permission to run command %r\" % filename)\n",
                    "rendered": {
                      "text": "            raise NotExecutable(\"command at %r is a directory\" % filename)\n\n        elif not (stat.S_IMODE(st[stat.ST_MODE]) & 0o111):\n            raise NotExecutable(\"command at %r is not executable\" % filename)\n\n        elif not os.access(filename, os.X_OK):\n            raise NoPermission(\"no permission to run command %r\" % filename)\n",
                      "markdown": "`            raise NotExecutable(\"command at %r is a directory\" % filename)\n\n        elif not (stat.S_IMODE(st[stat.ST_MODE]) & 0o111):\n            raise NotExecutable(\"command at %r is not executable\" % filename)\n\n        elif not os.access(filename, os.X_OK):\n            raise NoPermission(\"no permission to run command %r\" % filename)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1566,
                  "startColumn": 40,
                  "endLine": 1566,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            raise NotFound(\"can't find command %r\" % filename)\n\n        elif stat.S_ISDIR(st[stat.ST_MODE]):\n            raise NotExecutable(\"command at %r is a directory\" % filename)\n\n        elif not (stat.S_IMODE(st[stat.ST_MODE]) & 0o111):\n            raise NotExecutable(\"command at %r is not executable\" % filename)\n",
                    "rendered": {
                      "text": "            raise NotFound(\"can't find command %r\" % filename)\n\n        elif stat.S_ISDIR(st[stat.ST_MODE]):\n            raise NotExecutable(\"command at %r is a directory\" % filename)\n\n        elif not (stat.S_IMODE(st[stat.ST_MODE]) & 0o111):\n            raise NotExecutable(\"command at %r is not executable\" % filename)\n",
                      "markdown": "`            raise NotFound(\"can't find command %r\" % filename)\n\n        elif stat.S_ISDIR(st[stat.ST_MODE]):\n            raise NotExecutable(\"command at %r is a directory\" % filename)\n\n        elif not (stat.S_IMODE(st[stat.ST_MODE]) & 0o111):\n            raise NotExecutable(\"command at %r is not executable\" % filename)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1330,
                  "startColumn": 63,
                  "endLine": 1330,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        # call waitpid again (which happens every so often during the normal\n        # course in the mainloop), we'll eventually reap the child that we\n        # tried to reap during the interrupted call. At least on Linux, this\n        # appears to be true, or at least stopping 50 processes at once never\n        # left zombies laying around.\n        try:\n            pid, sts = os.waitpid(-1, os.WNOHANG)\n",
                    "rendered": {
                      "text": "        # call waitpid again (which happens every so often during the normal\n        # course in the mainloop), we'll eventually reap the child that we\n        # tried to reap during the interrupted call. At least on Linux, this\n        # appears to be true, or at least stopping 50 processes at once never\n        # left zombies laying around.\n        try:\n            pid, sts = os.waitpid(-1, os.WNOHANG)\n",
                      "markdown": "`        # call waitpid again (which happens every so often during the normal\n        # course in the mainloop), we'll eventually reap the child that we\n        # tried to reap during the interrupted call. At least on Linux, this\n        # appears to be true, or at least stopping 50 processes at once never\n        # left zombies laying around.\n        try:\n            pid, sts = os.waitpid(-1, os.WNOHANG)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1330,
                  "startColumn": 32,
                  "endLine": 1330,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        # call waitpid again (which happens every so often during the normal\n        # course in the mainloop), we'll eventually reap the child that we\n        # tried to reap during the interrupted call. At least on Linux, this\n        # appears to be true, or at least stopping 50 processes at once never\n        # left zombies laying around.\n        try:\n            pid, sts = os.waitpid(-1, os.WNOHANG)\n",
                    "rendered": {
                      "text": "        # call waitpid again (which happens every so often during the normal\n        # course in the mainloop), we'll eventually reap the child that we\n        # tried to reap during the interrupted call. At least on Linux, this\n        # appears to be true, or at least stopping 50 processes at once never\n        # left zombies laying around.\n        try:\n            pid, sts = os.waitpid(-1, os.WNOHANG)\n",
                      "markdown": "`        # call waitpid again (which happens every so often during the normal\n        # course in the mainloop), we'll eventually reap the child that we\n        # tried to reap during the interrupted call. At least on Linux, this\n        # appears to be true, or at least stopping 50 processes at once never\n        # left zombies laying around.\n        try:\n            pid, sts = os.waitpid(-1, os.WNOHANG)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1329,
                  "startColumn": 52,
                  "endLine": 1329,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        # However, AFAICT, if waitpid is interrupted by SIGCHLD, as long as we\n        # call waitpid again (which happens every so often during the normal\n        # course in the mainloop), we'll eventually reap the child that we\n        # tried to reap during the interrupted call. At least on Linux, this\n        # appears to be true, or at least stopping 50 processes at once never\n        # left zombies laying around.\n        try:\n",
                    "rendered": {
                      "text": "        # However, AFAICT, if waitpid is interrupted by SIGCHLD, as long as we\n        # call waitpid again (which happens every so often during the normal\n        # course in the mainloop), we'll eventually reap the child that we\n        # tried to reap during the interrupted call. At least on Linux, this\n        # appears to be true, or at least stopping 50 processes at once never\n        # left zombies laying around.\n        try:\n",
                      "markdown": "`        # However, AFAICT, if waitpid is interrupted by SIGCHLD, as long as we\n        # call waitpid again (which happens every so often during the normal\n        # course in the mainloop), we'll eventually reap the child that we\n        # tried to reap during the interrupted call. At least on Linux, this\n        # appears to be true, or at least stopping 50 processes at once never\n        # left zombies laying around.\n        try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1240,
                  "startColumn": 20,
                  "endLine": 1240,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            # For unknown reasons, sometimes an http_channel\n            # dispatcher in the socket map related to servers\n            # remains open *during a reload*.  If one of these\n            # exists at this point, we need to close it by hand\n            # (thus removing it from the asyncore.socket_map).  If\n            # we don't do this, 'cleanup_fds' will cause its file\n            # descriptor to be closed, but it will still remain in\n",
                    "rendered": {
                      "text": "            # For unknown reasons, sometimes an http_channel\n            # dispatcher in the socket map related to servers\n            # remains open *during a reload*.  If one of these\n            # exists at this point, we need to close it by hand\n            # (thus removing it from the asyncore.socket_map).  If\n            # we don't do this, 'cleanup_fds' will cause its file\n            # descriptor to be closed, but it will still remain in\n",
                      "markdown": "`            # For unknown reasons, sometimes an http_channel\n            # dispatcher in the socket map related to servers\n            # remains open *during a reload*.  If one of these\n            # exists at this point, we need to close it by hand\n            # (thus removing it from the asyncore.socket_map).  If\n            # we don't do this, 'cleanup_fds' will cause its file\n            # descriptor to be closed, but it will still remain in\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 739,
                  "startColumn": 30,
                  "endLine": 739,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            pool_name = section.split(':', 1)[1]\n\n            # give listeners a \"high\" default priority so they are started first\n            # and stopped last at mainloop exit\n            priority = integer(get(section, 'priority', -1))\n\n            buffer_size = integer(get(section, 'buffer_size', 10))\n",
                    "rendered": {
                      "text": "            pool_name = section.split(':', 1)[1]\n\n            # give listeners a \"high\" default priority so they are started first\n            # and stopped last at mainloop exit\n            priority = integer(get(section, 'priority', -1))\n\n            buffer_size = integer(get(section, 'buffer_size', 10))\n",
                      "markdown": "`            pool_name = section.split(':', 1)[1]\n\n            # give listeners a \"high\" default priority so they are started first\n            # and stopped last at mainloop exit\n            priority = integer(get(section, 'priority', -1))\n\n            buffer_size = integer(get(section, 'buffer_size', 10))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 543,
                  "startColumn": 56,
                  "endLine": 543,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                    host = 'localhost'\n                self.serverurl = 'http://%s:%s' % (host, port)\n\n        # self.serverurl may still be None if no servers at all are\n        # configured in the config file\n\n    def process_config(self, do_usage=True):\n",
                    "rendered": {
                      "text": "                    host = 'localhost'\n                self.serverurl = 'http://%s:%s' % (host, port)\n\n        # self.serverurl may still be None if no servers at all are\n        # configured in the config file\n\n    def process_config(self, do_usage=True):\n",
                      "markdown": "`                    host = 'localhost'\n                self.serverurl = 'http://%s:%s' % (host, port)\n\n        # self.serverurl may still be None if no servers at all are\n        # configured in the config file\n\n    def process_config(self, do_usage=True):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 37,
                  "endLine": 186,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        \"\"\"\n        if flag is not None:\n            if handler is not None:\n                raise ValueError(\"use at most one of flag= and handler=\")\n            if not long and not short:\n                raise ValueError(\"flag= requires a command line flag\")\n            if short and short.endswith(\":\"):\n",
                    "rendered": {
                      "text": "        \"\"\"\n        if flag is not None:\n            if handler is not None:\n                raise ValueError(\"use at most one of flag= and handler=\")\n            if not long and not short:\n                raise ValueError(\"flag= requires a command line flag\")\n            if short and short.endswith(\":\"):\n",
                      "markdown": "`        \"\"\"\n        if flag is not None:\n            if handler is not None:\n                raise ValueError(\"use at most one of flag= and handler=\")\n            if not long and not short:\n                raise ValueError(\"flag= requires a command line flag\")\n            if short and short.endswith(\":\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 44,
                  "endLine": 130,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                config = path\n                break\n        if config is None and self.require_configfile:\n            self.usage('No config file found at default paths (%s); '\n                       'use the -c option to specify a config file '\n                       'at a different path' % ', '.join(self.searchpaths))\n        return config\n",
                    "rendered": {
                      "text": "                config = path\n                break\n        if config is None and self.require_configfile:\n            self.usage('No config file found at default paths (%s); '\n                       'use the -c option to specify a config file '\n                       'at a different path' % ', '.join(self.searchpaths))\n        return config\n",
                      "markdown": "`                config = path\n                break\n        if config is None and self.require_configfile:\n            self.usage('No config file found at default paths (%s); '\n                       'use the -c option to specify a config file '\n                       'at a different path' % ', '.join(self.searchpaths))\n        return config\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 2073,
                  "startColumn": 59,
                  "endLine": 2073,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    try:\n        with open(filename, 'rb') as f:\n            if absoffset != offset:\n                # negative offset returns offset bytes from tail of the file\n                if length:\n                    raise ValueError('BAD_ARGUMENTS')\n                f.seek(0, 2)\n",
                    "rendered": {
                      "text": "    try:\n        with open(filename, 'rb') as f:\n            if absoffset != offset:\n                # negative offset returns offset bytes from tail of the file\n                if length:\n                    raise ValueError('BAD_ARGUMENTS')\n                f.seek(0, 2)\n",
                      "markdown": "`    try:\n        with open(filename, 'rb') as f:\n            if absoffset != offset:\n                # negative offset returns offset bytes from tail of the file\n                if length:\n                    raise ValueError('BAD_ARGUMENTS')\n                f.seek(0, 2)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1970,
                  "startColumn": 32,
                  "endLine": 1970,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n    def make_dispatchers(self, proc):\n        dispatchers, p = ProcessConfig.make_dispatchers(self, proc)\n        #FastCGI child processes expect the FastCGI socket set to\n        #file descriptor 0, so supervisord cannot use stdin\n        #to communicate with the child process\n        stdin_fd = p['stdin']\n",
                    "rendered": {
                      "text": "\n    def make_dispatchers(self, proc):\n        dispatchers, p = ProcessConfig.make_dispatchers(self, proc)\n        #FastCGI child processes expect the FastCGI socket set to\n        #file descriptor 0, so supervisord cannot use stdin\n        #to communicate with the child process\n        stdin_fd = p['stdin']\n",
                      "markdown": "`\n    def make_dispatchers(self, proc):\n        dispatchers, p = ProcessConfig.make_dispatchers(self, proc)\n        #FastCGI child processes expect the FastCGI socket set to\n        #file descriptor 0, so supervisord cannot use stdin\n        #to communicate with the child process\n        stdin_fd = p['stdin']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1903,
                  "startColumn": 54,
                  "endLine": 1904,
                  "snippet": {
                    "text": "        return self.options.get_path()\n\n    def create_autochildlogs(self):\n        # temporary logfiles which are erased at start time\n        get_autoname = self.options.get_autochildlog_name\n        sid = self.options.identifier\n        name = self.name\n        if self.stdout_logfile is Automatic:\n",
                    "rendered": {
                      "text": "        return self.options.get_path()\n\n    def create_autochildlogs(self):\n        # temporary logfiles which are erased at start time\n        get_autoname = self.options.get_autochildlog_name\n        sid = self.options.identifier\n        name = self.name\n        if self.stdout_logfile is Automatic:\n",
                      "markdown": "`        return self.options.get_path()\n\n    def create_autochildlogs(self):\n        # temporary logfiles which are erased at start time\n        get_autoname = self.options.get_autochildlog_name\n        sid = self.options.identifier\n        name = self.name\n        if self.stdout_logfile is Automatic:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1790,
                  "startColumn": 11,
                  "endLine": 1790,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            ok_filenames.extend(\n                ConfigParser.RawConfigParser.read(self, [filename], **kwargs))\n\n            diff = frozenset(self._sections) - frozenset(sections_orig)\n            for section in diff:\n                self.section_to_file[section] = filename\n        return ok_filenames\n",
                    "rendered": {
                      "text": "            ok_filenames.extend(\n                ConfigParser.RawConfigParser.read(self, [filename], **kwargs))\n\n            diff = frozenset(self._sections) - frozenset(sections_orig)\n            for section in diff:\n                self.section_to_file[section] = filename\n        return ok_filenames\n",
                      "markdown": "`            ok_filenames.extend(\n                ConfigParser.RawConfigParser.read(self, [filename], **kwargs))\n\n            diff = frozenset(self._sections) - frozenset(sections_orig)\n            for section in diff:\n                self.section_to_file[section] = filename\n        return ok_filenames\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1682,
                  "startColumn": 43,
                  "endLine": 1682,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        if not hasattr(fp, 'read'):\n            self.here = os.path.dirname(normalize_path(fp))\n            if not self.exists(fp):\n                raise ValueError(\"could not find config file %s\" % fp)\n            try:\n                fp = self.open(fp, 'r')\n                need_close = True\n",
                    "rendered": {
                      "text": "        if not hasattr(fp, 'read'):\n            self.here = os.path.dirname(normalize_path(fp))\n            if not self.exists(fp):\n                raise ValueError(\"could not find config file %s\" % fp)\n            try:\n                fp = self.open(fp, 'r')\n                need_close = True\n",
                      "markdown": "`        if not hasattr(fp, 'read'):\n            self.here = os.path.dirname(normalize_path(fp))\n            if not self.exists(fp):\n                raise ValueError(\"could not find config file %s\" % fp)\n            try:\n                fp = self.open(fp, 'r')\n                need_close = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1563,
                  "startColumn": 33,
                  "endLine": 1563,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    def check_execv_args(self, filename, argv, st):\n        if st is None:\n            raise NotFound(\"can't find command %r\" % filename)\n\n        elif stat.S_ISDIR(st[stat.ST_MODE]):\n            raise NotExecutable(\"command at %r is a directory\" % filename)\n",
                    "rendered": {
                      "text": "\n    def check_execv_args(self, filename, argv, st):\n        if st is None:\n            raise NotFound(\"can't find command %r\" % filename)\n\n        elif stat.S_ISDIR(st[stat.ST_MODE]):\n            raise NotExecutable(\"command at %r is a directory\" % filename)\n",
                      "markdown": "`\n    def check_execv_args(self, filename, argv, st):\n        if st is None:\n            raise NotFound(\"can't find command %r\" % filename)\n\n        elif stat.S_ISDIR(st[stat.ST_MODE]):\n            raise NotExecutable(\"command at %r is a directory\" % filename)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1367,
                  "startColumn": 29,
                  "endLine": 1367,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            try:\n                pwrec = pwd.getpwuid(uid)\n            except KeyError:\n                return \"Can't find uid %r\" % uid\n\n        current_uid = os.getuid()\n\n",
                    "rendered": {
                      "text": "            try:\n                pwrec = pwd.getpwuid(uid)\n            except KeyError:\n                return \"Can't find uid %r\" % uid\n\n        current_uid = os.getuid()\n\n",
                      "markdown": "`            try:\n                pwrec = pwd.getpwuid(uid)\n            except KeyError:\n                return \"Can't find uid %r\" % uid\n\n        current_uid = os.getuid()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1361,
                  "startColumn": 29,
                  "endLine": 1361,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            try:\n                pwrec = pwd.getpwnam(user)\n            except KeyError:\n                return \"Can't find username %r\" % user\n            uid = pwrec[2]\n        else:\n            try:\n",
                    "rendered": {
                      "text": "            try:\n                pwrec = pwd.getpwnam(user)\n            except KeyError:\n                return \"Can't find username %r\" % user\n            uid = pwrec[2]\n        else:\n            try:\n",
                      "markdown": "`            try:\n                pwrec = pwd.getpwnam(user)\n            except KeyError:\n                return \"Can't find username %r\" % user\n            uid = pwrec[2]\n        else:\n            try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1136,
                  "startColumn": 29,
                  "endLine": 1137,
                  "snippet": {
                    "text": "                    raise ValueError('Invalid chmod value %s' % chmod)\n            else:\n                chmod = 0o700\n            config['chmod'] = chmod\n            config['section'] = section\n            configs.append(config)\n\n        return configs\n",
                    "rendered": {
                      "text": "                    raise ValueError('Invalid chmod value %s' % chmod)\n            else:\n                chmod = 0o700\n            config['chmod'] = chmod\n            config['section'] = section\n            configs.append(config)\n\n        return configs\n",
                      "markdown": "`                    raise ValueError('Invalid chmod value %s' % chmod)\n            else:\n                chmod = 0o700\n            config['chmod'] = chmod\n            config['section'] = section\n            configs.append(config)\n\n        return configs\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1135,
                  "startColumn": 15,
                  "endLine": 1135,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                except (TypeError, ValueError):\n                    raise ValueError('Invalid chmod value %s' % chmod)\n            else:\n                chmod = 0o700\n            config['chmod'] = chmod\n            config['section'] = section\n            configs.append(config)\n",
                    "rendered": {
                      "text": "                except (TypeError, ValueError):\n                    raise ValueError('Invalid chmod value %s' % chmod)\n            else:\n                chmod = 0o700\n            config['chmod'] = chmod\n            config['section'] = section\n            configs.append(config)\n",
                      "markdown": "`                except (TypeError, ValueError):\n                    raise ValueError('Invalid chmod value %s' % chmod)\n            else:\n                chmod = 0o700\n            config['chmod'] = chmod\n            config['section'] = section\n            configs.append(config)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1133,
                  "startColumn": 45,
                  "endLine": 1133,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                try:\n                    chmod = octal_type(chmod)\n                except (TypeError, ValueError):\n                    raise ValueError('Invalid chmod value %s' % chmod)\n            else:\n                chmod = 0o700\n            config['chmod'] = chmod\n",
                    "rendered": {
                      "text": "                try:\n                    chmod = octal_type(chmod)\n                except (TypeError, ValueError):\n                    raise ValueError('Invalid chmod value %s' % chmod)\n            else:\n                chmod = 0o700\n            config['chmod'] = chmod\n",
                      "markdown": "`                try:\n                    chmod = octal_type(chmod)\n                except (TypeError, ValueError):\n                    raise ValueError('Invalid chmod value %s' % chmod)\n            else:\n                chmod = 0o700\n            config['chmod'] = chmod\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1131,
                  "startColumn": 19,
                  "endLine": 1131,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n                try:\n                    chmod = octal_type(chmod)\n                except (TypeError, ValueError):\n                    raise ValueError('Invalid chmod value %s' % chmod)\n            else:\n",
                    "rendered": {
                      "text": "            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n                try:\n                    chmod = octal_type(chmod)\n                except (TypeError, ValueError):\n                    raise ValueError('Invalid chmod value %s' % chmod)\n            else:\n",
                      "markdown": "`            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n                try:\n                    chmod = octal_type(chmod)\n                except (TypeError, ValueError):\n                    raise ValueError('Invalid chmod value %s' % chmod)\n            else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1129,
                  "startColumn": 14,
                  "endLine": 1129,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                chown = (-1, -1)\n            config['chown'] = chown\n            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n                try:\n                    chmod = octal_type(chmod)\n                except (TypeError, ValueError):\n",
                    "rendered": {
                      "text": "                chown = (-1, -1)\n            config['chown'] = chown\n            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n                try:\n                    chmod = octal_type(chmod)\n                except (TypeError, ValueError):\n",
                      "markdown": "`                chown = (-1, -1)\n            config['chown'] = chown\n            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n                try:\n                    chmod = octal_type(chmod)\n                except (TypeError, ValueError):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1128,
                  "startColumn": 11,
                  "endLine": 1128,
                  "endColumn": 18,
                  "snippet": {
                    "text": "            else:\n                chown = (-1, -1)\n            config['chown'] = chown\n            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n                try:\n                    chmod = octal_type(chmod)\n",
                    "rendered": {
                      "text": "            else:\n                chown = (-1, -1)\n            config['chown'] = chown\n            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n                try:\n                    chmod = octal_type(chmod)\n",
                      "markdown": "`            else:\n                chown = (-1, -1)\n            config['chown'] = chown\n            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n                try:\n                    chmod = octal_type(chmod)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1127,
                  "startColumn": 29,
                  "endLine": 1128,
                  "snippet": {
                    "text": "                    raise ValueError('Invalid sockchown value %s' % chown)\n            else:\n                chown = (-1, -1)\n            config['chown'] = chown\n            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n                try:\n                    chmod = octal_type(chmod)\n",
                    "rendered": {
                      "text": "                    raise ValueError('Invalid sockchown value %s' % chown)\n            else:\n                chown = (-1, -1)\n            config['chown'] = chown\n            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n                try:\n                    chmod = octal_type(chmod)\n",
                      "markdown": "`                    raise ValueError('Invalid sockchown value %s' % chown)\n            else:\n                chown = (-1, -1)\n            config['chown'] = chown\n            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n                try:\n                    chmod = octal_type(chmod)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1126,
                  "startColumn": 15,
                  "endLine": 1126,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                except ValueError:\n                    raise ValueError('Invalid sockchown value %s' % chown)\n            else:\n                chown = (-1, -1)\n            config['chown'] = chown\n            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n",
                    "rendered": {
                      "text": "                except ValueError:\n                    raise ValueError('Invalid sockchown value %s' % chown)\n            else:\n                chown = (-1, -1)\n            config['chown'] = chown\n            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n",
                      "markdown": "`                except ValueError:\n                    raise ValueError('Invalid sockchown value %s' % chown)\n            else:\n                chown = (-1, -1)\n            config['chown'] = chown\n            chmod = get(section, 'chmod', None)\n            if chmod is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1122,
                  "startColumn": 19,
                  "endLine": 1122,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            chown = get(section, 'chown', None)\n            if chown is not None:\n                try:\n                    chown = colon_separated_user_group(chown)\n                except ValueError:\n                    raise ValueError('Invalid sockchown value %s' % chown)\n            else:\n",
                    "rendered": {
                      "text": "            chown = get(section, 'chown', None)\n            if chown is not None:\n                try:\n                    chown = colon_separated_user_group(chown)\n                except ValueError:\n                    raise ValueError('Invalid sockchown value %s' % chown)\n            else:\n",
                      "markdown": "`            chown = get(section, 'chown', None)\n            if chown is not None:\n                try:\n                    chown = colon_separated_user_group(chown)\n                except ValueError:\n                    raise ValueError('Invalid sockchown value %s' % chown)\n            else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1120,
                  "startColumn": 14,
                  "endLine": 1120,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            config['file'] = normalize_path(sfile)\n            config.update(self._parse_username_and_password(parser, section))\n            chown = get(section, 'chown', None)\n            if chown is not None:\n                try:\n                    chown = colon_separated_user_group(chown)\n                except ValueError:\n",
                    "rendered": {
                      "text": "            config['file'] = normalize_path(sfile)\n            config.update(self._parse_username_and_password(parser, section))\n            chown = get(section, 'chown', None)\n            if chown is not None:\n                try:\n                    chown = colon_separated_user_group(chown)\n                except ValueError:\n",
                      "markdown": "`            config['file'] = normalize_path(sfile)\n            config.update(self._parse_username_and_password(parser, section))\n            chown = get(section, 'chown', None)\n            if chown is not None:\n                try:\n                    chown = colon_separated_user_group(chown)\n                except ValueError:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 1119,
                  "startColumn": 11,
                  "endLine": 1119,
                  "endColumn": 18,
                  "snippet": {
                    "text": "            config['family'] = socket.AF_UNIX\n            config['file'] = normalize_path(sfile)\n            config.update(self._parse_username_and_password(parser, section))\n            chown = get(section, 'chown', None)\n            if chown is not None:\n                try:\n                    chown = colon_separated_user_group(chown)\n",
                    "rendered": {
                      "text": "            config['family'] = socket.AF_UNIX\n            config['file'] = normalize_path(sfile)\n            config.update(self._parse_username_and_password(parser, section))\n            chown = get(section, 'chown', None)\n            if chown is not None:\n                try:\n                    chown = colon_separated_user_group(chown)\n",
                      "markdown": "`            config['family'] = socket.AF_UNIX\n            config['file'] = normalize_path(sfile)\n            config.update(self._parse_username_and_password(parser, section))\n            chown = get(section, 'chown', None)\n            if chown is not None:\n                try:\n                    chown = colon_separated_user_group(chown)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 934,
                  "startColumn": 9,
                  "endLine": 934,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        if serverurl and serverurl.strip().upper() == 'AUTO':\n            serverurl = None\n\n        # find uid from \"user\" option\n        user = get(section, 'user', None)\n        if user is None:\n            uid = None\n",
                    "rendered": {
                      "text": "        if serverurl and serverurl.strip().upper() == 'AUTO':\n            serverurl = None\n\n        # find uid from \"user\" option\n        user = get(section, 'user', None)\n        if user is None:\n            uid = None\n",
                      "markdown": "`        if serverurl and serverurl.strip().upper() == 'AUTO':\n            serverurl = None\n\n        # find uid from \"user\" option\n        user = get(section, 'user', None)\n        if user is None:\n            uid = None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 13,
                  "endLine": 795,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            priority = integer(get(section, 'priority', 999))\n            fcgi_expansions = {'program_name': program_name}\n\n            # find proc_uid from \"user\" option\n            proc_user = get(section, 'user', None)\n            if proc_user is None:\n                proc_uid = None\n",
                    "rendered": {
                      "text": "            priority = integer(get(section, 'priority', 999))\n            fcgi_expansions = {'program_name': program_name}\n\n            # find proc_uid from \"user\" option\n            proc_user = get(section, 'user', None)\n            if proc_user is None:\n                proc_uid = None\n",
                      "markdown": "`            priority = integer(get(section, 'priority', 999))\n            fcgi_expansions = {'program_name': program_name}\n\n            # find proc_uid from \"user\" option\n            proc_user = get(section, 'user', None)\n            if proc_user is None:\n                proc_uid = None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 674,
                  "startColumn": 34,
                  "endLine": 675,
                  "snippet": {
                    "text": "            for proc in group.process_configs:\n                env = section.environment.copy()\n                env.update(proc.environment)\n                proc.environment = env\n        section.server_configs = self.server_configs_from_parser(parser)\n        section.profile_options = None\n        return section\n\n",
                    "rendered": {
                      "text": "            for proc in group.process_configs:\n                env = section.environment.copy()\n                env.update(proc.environment)\n                proc.environment = env\n        section.server_configs = self.server_configs_from_parser(parser)\n        section.profile_options = None\n        return section\n\n",
                      "markdown": "`            for proc in group.process_configs:\n                env = section.environment.copy()\n                env.update(proc.environment)\n                proc.environment = env\n        section.server_configs = self.server_configs_from_parser(parser)\n        section.profile_options = None\n        return section\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 672,
                  "startColumn": 15,
                  "endLine": 672,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        section.process_group_configs = self.process_groups_from_parser(parser)\n        for group in section.process_group_configs:\n            for proc in group.process_configs:\n                env = section.environment.copy()\n                env.update(proc.environment)\n                proc.environment = env\n        section.server_configs = self.server_configs_from_parser(parser)\n",
                    "rendered": {
                      "text": "        section.process_group_configs = self.process_groups_from_parser(parser)\n        for group in section.process_group_configs:\n            for proc in group.process_configs:\n                env = section.environment.copy()\n                env.update(proc.environment)\n                proc.environment = env\n        section.server_configs = self.server_configs_from_parser(parser)\n",
                      "markdown": "`        section.process_group_configs = self.process_groups_from_parser(parser)\n        for group in section.process_group_configs:\n            for proc in group.process_configs:\n                env = section.environment.copy()\n                env.update(proc.environment)\n                proc.environment = env\n        section.server_configs = self.server_configs_from_parser(parser)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 563,
                  "startColumn": 43,
                  "endLine": 563,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        need_close = False\n        if not hasattr(fp, 'read'):\n            if not self.exists(fp):\n                raise ValueError(\"could not find config file %s\" % fp)\n            try:\n                fp = self.open(fp, 'r')\n                need_close = True\n",
                    "rendered": {
                      "text": "        need_close = False\n        if not hasattr(fp, 'read'):\n            if not self.exists(fp):\n                raise ValueError(\"could not find config file %s\" % fp)\n            try:\n                fp = self.open(fp, 'r')\n                need_close = True\n",
                      "markdown": "`        need_close = False\n        if not hasattr(fp, 'read'):\n            if not self.exists(fp):\n                raise ValueError(\"could not find config file %s\" % fp)\n            try:\n                fp = self.open(fp, 'r')\n                need_close = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/options.py"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 25,
                  "endLine": 554,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    def read_config(self, fp):\n        # Clear parse messages, since we may be re-reading the\n        # config a second time after a reload.\n        self.parse_criticals = []\n        self.parse_warnings = []\n        self.parse_infos = []\n",
                    "rendered": {
                      "text": "\n    def read_config(self, fp):\n        # Clear parse messages, since we may be re-reading the\n        # config a second time after a reload.\n        self.parse_criticals = []\n        self.parse_warnings = []\n        self.parse_infos = []\n",
                      "markdown": "`\n    def read_config(self, fp):\n        # Clear parse messages, since we may be re-reading the\n        # config a second time after a reload.\n        self.parse_criticals = []\n        self.parse_warnings = []\n        self.parse_infos = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/http_date.py"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 6,
                  "endLine": 5,
                  "snippet": {
                    "text": "# -*- Mode: Python -*-\n\nimport re\nimport time\n\ndef concat (*args):\n    return ''.join (args)\n\n",
                    "rendered": {
                      "text": "# -*- Mode: Python -*-\n\nimport re\nimport time\n\ndef concat (*args):\n    return ''.join (args)\n\n",
                      "markdown": "`# -*- Mode: Python -*-\n\nimport re\nimport time\n\ndef concat (*args):\n    return ''.join (args)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/loggers.py"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 72,
                  "endLine": 196,
                  "snippet": {
                    "text": "        Open the specified file and use it as the stream for logging.\n\n        By default, the file grows indefinitely. You can specify particular\n        values of maxBytes and backupCount to allow the file to rollover at\n        a predetermined size.\n\n        Rollover occurs whenever the current log file is nearly maxBytes in\n        length. If backupCount is >= 1, the system will successively create\n",
                    "rendered": {
                      "text": "        Open the specified file and use it as the stream for logging.\n\n        By default, the file grows indefinitely. You can specify particular\n        values of maxBytes and backupCount to allow the file to rollover at\n        a predetermined size.\n\n        Rollover occurs whenever the current log file is nearly maxBytes in\n        length. If backupCount is >= 1, the system will successively create\n",
                      "markdown": "`        Open the specified file and use it as the stream for logging.\n\n        By default, the file grows indefinitely. You can specify particular\n        values of maxBytes and backupCount to allow the file to rollover at\n        a predetermined size.\n\n        Rollover occurs whenever the current log file is nearly maxBytes in\n        length. If backupCount is >= 1, the system will successively create\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/loggers.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 64,
                  "endLine": 70,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        try:\n            self.stream.flush()\n        except IOError as why:\n            # if supervisor output is piped, EPIPE can be raised at exit\n            if why.args[0] != errno.EPIPE:\n                raise\n\n",
                    "rendered": {
                      "text": "        try:\n            self.stream.flush()\n        except IOError as why:\n            # if supervisor output is piped, EPIPE can be raised at exit\n            if why.args[0] != errno.EPIPE:\n                raise\n\n",
                      "markdown": "`        try:\n            self.stream.flush()\n        except IOError as why:\n            # if supervisor output is piped, EPIPE can be raised at exit\n            if why.args[0] != errno.EPIPE:\n                raise\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/loggers.py"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 26,
                  "endLine": 253,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            self._rename(sfn, dfn)\n        except OSError as why:\n            # catch exceptional condition (source deleted)\n            # E.g. cleanup script removes active log.\n            if why.args[0] != errno.ENOENT:\n                raise\n\n",
                    "rendered": {
                      "text": "            self._rename(sfn, dfn)\n        except OSError as why:\n            # catch exceptional condition (source deleted)\n            # E.g. cleanup script removes active log.\n            if why.args[0] != errno.ENOENT:\n                raise\n\n",
                      "markdown": "`            self._rename(sfn, dfn)\n        except OSError as why:\n            # catch exceptional condition (source deleted)\n            # E.g. cleanup script removes active log.\n            if why.args[0] != errno.ENOENT:\n                raise\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/loggers.py"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 25,
                  "endLine": 238,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        return os.rename(src, tgt)\n\n    def _exists(self, fn): # pragma: no cover\n        # this is here to service stubbing in unit tests\n        return os.path.exists(fn)\n\n    def removeAndRename(self, sfn, dfn):\n",
                    "rendered": {
                      "text": "        return os.rename(src, tgt)\n\n    def _exists(self, fn): # pragma: no cover\n        # this is here to service stubbing in unit tests\n        return os.path.exists(fn)\n\n    def removeAndRename(self, sfn, dfn):\n",
                      "markdown": "`        return os.rename(src, tgt)\n\n    def _exists(self, fn): # pragma: no cover\n        # this is here to service stubbing in unit tests\n        return os.path.exists(fn)\n\n    def removeAndRename(self, sfn, dfn):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/loggers.py"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 25,
                  "endLine": 234,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        return os.remove(fn)\n\n    def _rename(self, src, tgt): # pragma: no cover\n        # this is here to service stubbing in unit tests\n        return os.rename(src, tgt)\n\n    def _exists(self, fn): # pragma: no cover\n",
                    "rendered": {
                      "text": "        return os.remove(fn)\n\n    def _rename(self, src, tgt): # pragma: no cover\n        # this is here to service stubbing in unit tests\n        return os.rename(src, tgt)\n\n    def _exists(self, fn): # pragma: no cover\n",
                      "markdown": "`        return os.remove(fn)\n\n    def _rename(self, src, tgt): # pragma: no cover\n        # this is here to service stubbing in unit tests\n        return os.rename(src, tgt)\n\n    def _exists(self, fn): # pragma: no cover\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/loggers.py"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 25,
                  "endLine": 230,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        self.doRollover()\n\n    def _remove(self, fn): # pragma: no cover\n        # this is here to service stubbing in unit tests\n        return os.remove(fn)\n\n    def _rename(self, src, tgt): # pragma: no cover\n",
                    "rendered": {
                      "text": "        self.doRollover()\n\n    def _remove(self, fn): # pragma: no cover\n        # this is here to service stubbing in unit tests\n        return os.remove(fn)\n\n    def _rename(self, src, tgt): # pragma: no cover\n",
                      "markdown": "`        self.doRollover()\n\n    def _remove(self, fn): # pragma: no cover\n        # this is here to service stubbing in unit tests\n        return os.remove(fn)\n\n    def _rename(self, src, tgt): # pragma: no cover\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/loggers.py"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 17,
                  "endLine": 107,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                # TODO sort out later\n                # this only occurs because of a test stream type\n                # which deliberately raises an exception the first\n                # time it's called. So just do it again\n                self.stream.write(msg)\n            self.flush()\n        except:\n",
                    "rendered": {
                      "text": "                # TODO sort out later\n                # this only occurs because of a test stream type\n                # which deliberately raises an exception the first\n                # time it's called. So just do it again\n                self.stream.write(msg)\n            self.flush()\n        except:\n",
                      "markdown": "`                # TODO sort out later\n                # this only occurs because of a test stream type\n                # which deliberately raises an exception the first\n                # time it's called. So just do it again\n                self.stream.write(msg)\n            self.flush()\n        except:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/loggers.py"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 22,
                  "endLine": 104,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            try:\n                self.stream.write(msg)\n            except UnicodeError:\n                # TODO sort out later\n                # this only occurs because of a test stream type\n                # which deliberately raises an exception the first\n                # time it's called. So just do it again\n",
                    "rendered": {
                      "text": "            try:\n                self.stream.write(msg)\n            except UnicodeError:\n                # TODO sort out later\n                # this only occurs because of a test stream type\n                # which deliberately raises an exception the first\n                # time it's called. So just do it again\n",
                      "markdown": "`            try:\n                self.stream.write(msg)\n            except UnicodeError:\n                # TODO sort out later\n                # this only occurs because of a test stream type\n                # which deliberately raises an exception the first\n                # time it's called. So just do it again\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/loggers.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 18,
                  "endLine": 62,
                  "snippet": {
                    "text": "        self.closed = False\n\n    def setFormat(self, fmt):\n        self.fmt = fmt\n\n    def setLevel(self, level):\n        self.level = level\n\n",
                    "rendered": {
                      "text": "        self.closed = False\n\n    def setFormat(self, fmt):\n        self.fmt = fmt\n\n    def setLevel(self, level):\n        self.level = level\n\n",
                      "markdown": "`        self.closed = False\n\n    def setFormat(self, fmt):\n        self.fmt = fmt\n\n    def setLevel(self, level):\n        self.level = level\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/loggers.py"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 3,
                  "endLine": 53,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    return num\n\nclass Handler:\n    fmt = '%(message)s'\n    level = LevelsByName.INFO\n\n    def __init__(self, stream=None):\n",
                    "rendered": {
                      "text": "    return num\n\nclass Handler:\n    fmt = '%(message)s'\n    level = LevelsByName.INFO\n\n    def __init__(self, stream=None):\n",
                      "markdown": "`    return num\n\nclass Handler:\n    fmt = '%(message)s'\n    level = LevelsByName.INFO\n\n    def __init__(self, stream=None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/loggers.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 6,
                  "endLine": 14,
                  "snippet": {
                    "text": "import os\nimport errno\nimport sys\nimport time\nimport traceback\n\nfrom supervisor.compat import syslog\nfrom supervisor.compat import long\n",
                    "rendered": {
                      "text": "import os\nimport errno\nimport sys\nimport time\nimport traceback\n\nfrom supervisor.compat import syslog\nfrom supervisor.compat import long\n",
                      "markdown": "`import os\nimport errno\nimport sys\nimport time\nimport traceback\n\nfrom supervisor.compat import syslog\nfrom supervisor.compat import long\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/.PKGINFO"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 28,
                  "endLine": 7,
                  "endColumn": 37,
                  "snippet": {
                    "text": "arch = x86_64\nsize = 3023410\norigin = supervisor\npkgdesc = Supervisor process control system for Unix (supervisord)\nurl = \ncommit = 73312beef6efa8a84789bc4bc274ddf6afbc239d\nbuilddate = 1721752275\n",
                    "rendered": {
                      "text": "arch = x86_64\nsize = 3023410\norigin = supervisor\npkgdesc = Supervisor process control system for Unix (supervisord)\nurl = \ncommit = 73312beef6efa8a84789bc4bc274ddf6afbc239d\nbuilddate = 1721752275\n",
                      "markdown": "`arch = x86_64\nsize = 3023410\norigin = supervisor\npkgdesc = Supervisor process control system for Unix (supervisord)\nurl = \ncommit = 73312beef6efa8a84789bc4bc274ddf6afbc239d\nbuilddate = 1721752275\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_xmlrpc.py"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 17,
                  "endLine": 518,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        def getconn():\n            return dummy_conn\n        transport._get_connection = getconn\n        transport.request('localhost', '/', '')\n        transport.close()\n        self.assertTrue(dummy_conn.closed)\n\n",
                    "rendered": {
                      "text": "        def getconn():\n            return dummy_conn\n        transport._get_connection = getconn\n        transport.request('localhost', '/', '')\n        transport.close()\n        self.assertTrue(dummy_conn.closed)\n\n",
                      "markdown": "`        def getconn():\n            return dummy_conn\n        transport._get_connection = getconn\n        transport.request('localhost', '/', '')\n        transport.close()\n        self.assertTrue(dummy_conn.closed)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_xmlrpc.py"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 26,
                  "endLine": 498,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        def getconn():\n            return dummy_conn\n        transport._get_connection = getconn\n        result = transport.request('localhost', '/', '')\n        self.assertEqual(transport.connection, dummy_conn)\n        self.assertEqual(dummy_conn.closed, False)\n        self.assertEqual(dummy_conn.requestargs[0], 'POST')\n",
                    "rendered": {
                      "text": "        def getconn():\n            return dummy_conn\n        transport._get_connection = getconn\n        result = transport.request('localhost', '/', '')\n        self.assertEqual(transport.connection, dummy_conn)\n        self.assertEqual(dummy_conn.closed, False)\n        self.assertEqual(dummy_conn.requestargs[0], 'POST')\n",
                      "markdown": "`        def getconn():\n            return dummy_conn\n        transport._get_connection = getconn\n        result = transport.request('localhost', '/', '')\n        self.assertEqual(transport.connection, dummy_conn)\n        self.assertEqual(dummy_conn.closed, False)\n        self.assertEqual(dummy_conn.requestargs[0], 'POST')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_xmlrpc.py"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 53,
                  "endLine": 282,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        </value>\n        </param>\n        <param>\n        <value><base64>eW91IGNhbid0IHJlYWQgdGhpcyE=</base64></value>\n        </param>\n        <param>\n        <struct>\n",
                    "rendered": {
                      "text": "        </value>\n        </param>\n        <param>\n        <value><base64>eW91IGNhbid0IHJlYWQgdGhpcyE=</base64></value>\n        </param>\n        <param>\n        <struct>\n",
                      "markdown": "`        </value>\n        </param>\n        <param>\n        <value><base64>eW91IGNhbid0IHJlYWQgdGhpcyE=</base64></value>\n        </param>\n        <param>\n        <struct>\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/tests/test_xmlrpc.py"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 16,
                  "endLine": 282,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        </value>\n        </param>\n        <param>\n        <value><base64>eW91IGNhbid0IHJlYWQgdGhpcyE=</base64></value>\n        </param>\n        <param>\n        <struct>\n",
                    "rendered": {
                      "text": "        </value>\n        </param>\n        <param>\n        <value><base64>eW91IGNhbid0IHJlYWQgdGhpcyE=</base64></value>\n        </param>\n        <param>\n        <struct>\n",
                      "markdown": "`        </value>\n        </param>\n        <param>\n        <value><base64>eW91IGNhbid0IHJlYWQgdGhpcyE=</base64></value>\n        </param>\n        <param>\n        <struct>\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisord.py"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 45,
                  "endLine": 276,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            return\n        pid, sts = self.options.waitpid()\n        if pid:\n            process = self.options.pidhistory.get(pid, None)\n            if process is None:\n                _, msg = decode_wait_status(sts)\n                self.options.logger.info('reaped unknown pid %s (%s)' % (pid, msg))\n",
                    "rendered": {
                      "text": "            return\n        pid, sts = self.options.waitpid()\n        if pid:\n            process = self.options.pidhistory.get(pid, None)\n            if process is None:\n                _, msg = decode_wait_status(sts)\n                self.options.logger.info('reaped unknown pid %s (%s)' % (pid, msg))\n",
                      "markdown": "`            return\n        pid, sts = self.options.waitpid()\n        if pid:\n            process = self.options.pidhistory.get(pid, None)\n            if process is None:\n                _, msg = decode_wait_status(sts)\n                self.options.logger.info('reaped unknown pid %s (%s)' % (pid, msg))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisord.py"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 34,
                  "endLine": 262,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            now = time.time()\n        for event in events.TICK_EVENTS:\n            period = event.period\n            last_tick = self.ticks.get(period)\n            if last_tick is None:\n                # we just started up\n                last_tick = self.ticks[period] = timeslice(period, now)\n",
                    "rendered": {
                      "text": "            now = time.time()\n        for event in events.TICK_EVENTS:\n            period = event.period\n            last_tick = self.ticks.get(period)\n            if last_tick is None:\n                # we just started up\n                last_tick = self.ticks[period] = timeslice(period, now)\n",
                      "markdown": "`            now = time.time()\n        for event in events.TICK_EVENTS:\n            period = event.period\n            last_tick = self.ticks.get(period)\n            if last_tick is None:\n                # we just started up\n                last_tick = self.ticks[period] = timeslice(period, now)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisord.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 37,
                  "endLine": 109,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        removed = [cand for cand in cur if cand.name not in newdict]\n\n        changed = [cand for cand in new\n                   if cand != curdict.get(cand.name, cand)]\n\n        return added, changed, removed\n\n",
                    "rendered": {
                      "text": "        removed = [cand for cand in cur if cand.name not in newdict]\n\n        changed = [cand for cand in new\n                   if cand != curdict.get(cand.name, cand)]\n\n        return added, changed, removed\n\n",
                      "markdown": "`        removed = [cand for cand in cur if cand.name not in newdict]\n\n        changed = [cand for cand in new\n                   if cand != curdict.get(cand.name, cand)]\n\n        return added, changed, removed\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisord.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 57,
                  "endLine": 61,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n    def main(self):\n        if not self.options.first:\n            # prevent crash on libdispatch-based systems, at least for the\n            # first request\n            self.options.cleanup_fds()\n\n",
                    "rendered": {
                      "text": "\n    def main(self):\n        if not self.options.first:\n            # prevent crash on libdispatch-based systems, at least for the\n            # first request\n            self.options.cleanup_fds()\n\n",
                      "markdown": "`\n    def main(self):\n        if not self.options.first:\n            # prevent crash on libdispatch-based systems, at least for the\n            # first request\n            self.options.cleanup_fds()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisord.py"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 71,
                  "endLine": 50,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\nclass Supervisor:\n    stopping = False # set after we detect that we are handling a stop request\n    lastshutdownreport = 0 # throttle for delayed process error reports at stop\n    process_groups = None # map of process group name to process group object\n    stop_groups = None # list used for priority ordered shutdown\n\n",
                    "rendered": {
                      "text": "\nclass Supervisor:\n    stopping = False # set after we detect that we are handling a stop request\n    lastshutdownreport = 0 # throttle for delayed process error reports at stop\n    process_groups = None # map of process group name to process group object\n    stop_groups = None # list used for priority ordered shutdown\n\n",
                      "markdown": "`\nclass Supervisor:\n    stopping = False # set after we detect that we are handling a stop request\n    lastshutdownreport = 0 # throttle for delayed process error reports at stop\n    process_groups = None # map of process group name to process group object\n    stop_groups = None # list used for priority ordered shutdown\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisord.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 49,
                  "endLine": 24,
                  "endColumn": 53,
                  "snippet": {
                    "text": "-i/--identifier STR -- identifier used for this instance of supervisord\n-q/--childlogdir DIRECTORY -- the log directory for child process logs\n-k/--nocleanup --  prevent the process from performing cleanup (removal of\n                   old automatic child log files) at startup.\n-a/--minfds NUM -- the minimum number of file descriptors for start success\n-t/--strip_ansi -- strip ansi escape codes from process output\n--minprocs NUM  -- the minimum number of processes available for start success\n",
                    "rendered": {
                      "text": "-i/--identifier STR -- identifier used for this instance of supervisord\n-q/--childlogdir DIRECTORY -- the log directory for child process logs\n-k/--nocleanup --  prevent the process from performing cleanup (removal of\n                   old automatic child log files) at startup.\n-a/--minfds NUM -- the minimum number of file descriptors for start success\n-t/--strip_ansi -- strip ansi escape codes from process output\n--minprocs NUM  -- the minimum number of processes available for start success\n",
                      "markdown": "`-i/--identifier STR -- identifier used for this instance of supervisord\n-q/--childlogdir DIRECTORY -- the log directory for child process logs\n-k/--nocleanup --  prevent the process from performing cleanup (removal of\n                   old automatic child log files) at startup.\n-a/--minfds NUM -- the minimum number of file descriptors for start success\n-t/--strip_ansi -- strip ansi escape codes from process output\n--minprocs NUM  -- the minimum number of processes available for start success\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisord.py"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 7,
                  "endLine": 176,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    def runforever(self):\n        events.notify(events.SupervisorRunningEvent())\n        timeout = 1 # this cannot be fewer than the smallest TickEvent (5)\n\n        socket_map = self.options.get_socket_map()\n\n",
                    "rendered": {
                      "text": "\n    def runforever(self):\n        events.notify(events.SupervisorRunningEvent())\n        timeout = 1 # this cannot be fewer than the smallest TickEvent (5)\n\n        socket_map = self.options.get_socket_map()\n\n",
                      "markdown": "`\n    def runforever(self):\n        events.notify(events.SupervisorRunningEvent())\n        timeout = 1 # this cannot be fewer than the smallest TickEvent (5)\n\n        socket_map = self.options.get_socket_map()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisord.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 6,
                  "endLine": 36,
                  "snippet": {
                    "text": "\"\"\"\n\nimport os\nimport time\nimport signal\n\nfrom supervisor.medusa import asyncore_25 as asyncore\n\n",
                    "rendered": {
                      "text": "\"\"\"\n\nimport os\nimport time\nimport signal\n\nfrom supervisor.medusa import asyncore_25 as asyncore\n\n",
                      "markdown": "`\"\"\"\n\nimport os\nimport time\nimport signal\n\nfrom supervisor.medusa import asyncore_25 as asyncore\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 19,
                  "endLine": 472,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            else:\n                listener = self.listener # for unit tests\n            handler = http_client.HTTPHandler(listener, username, password)\n            handler.get(self.ctl.options.serverurl, path)\n            asyncore.loop()\n        except KeyboardInterrupt:\n            if handler:\n",
                    "rendered": {
                      "text": "            else:\n                listener = self.listener # for unit tests\n            handler = http_client.HTTPHandler(listener, username, password)\n            handler.get(self.ctl.options.serverurl, path)\n            asyncore.loop()\n        except KeyboardInterrupt:\n            if handler:\n",
                      "markdown": "`            else:\n                listener = self.listener # for unit tests\n            handler = http_client.HTTPHandler(listener, username, password)\n            handler.get(self.ctl.options.serverurl, path)\n            asyncore.loop()\n        except KeyboardInterrupt:\n            if handler:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 26,
                  "endLine": 92,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    def run(self): # pragma: no cover\n        self.output_handler.get(self.ctl.options.serverurl,\n                                '/logtail/%s/stdout' % self.program)\n        self.error_handler.get(self.ctl.options.serverurl,\n                               '/logtail/%s/stderr' % self.program)\n        asyncore.loop()\n\n",
                    "rendered": {
                      "text": "    def run(self): # pragma: no cover\n        self.output_handler.get(self.ctl.options.serverurl,\n                                '/logtail/%s/stdout' % self.program)\n        self.error_handler.get(self.ctl.options.serverurl,\n                               '/logtail/%s/stderr' % self.program)\n        asyncore.loop()\n\n",
                      "markdown": "`    def run(self): # pragma: no cover\n        self.output_handler.get(self.ctl.options.serverurl,\n                                '/logtail/%s/stdout' % self.program)\n        self.error_handler.get(self.ctl.options.serverurl,\n                               '/logtail/%s/stderr' % self.program)\n        asyncore.loop()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 27,
                  "endLine": 90,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        threading.Thread.start(self)\n\n    def run(self): # pragma: no cover\n        self.output_handler.get(self.ctl.options.serverurl,\n                                '/logtail/%s/stdout' % self.program)\n        self.error_handler.get(self.ctl.options.serverurl,\n                               '/logtail/%s/stderr' % self.program)\n",
                    "rendered": {
                      "text": "        threading.Thread.start(self)\n\n    def run(self): # pragma: no cover\n        self.output_handler.get(self.ctl.options.serverurl,\n                                '/logtail/%s/stdout' % self.program)\n        self.error_handler.get(self.ctl.options.serverurl,\n                               '/logtail/%s/stderr' % self.program)\n",
                      "markdown": "`        threading.Thread.start(self)\n\n    def run(self): # pragma: no cover\n        self.output_handler.get(self.ctl.options.serverurl,\n                                '/logtail/%s/stdout' % self.program)\n        self.error_handler.get(self.ctl.options.serverurl,\n                               '/logtail/%s/stderr' % self.program)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 66,
                  "endLine": 471,
                  "endColumn": 74,
                  "snippet": {
                    "text": "                listener = http_client.Listener()\n            else:\n                listener = self.listener # for unit tests\n            handler = http_client.HTTPHandler(listener, username, password)\n            handler.get(self.ctl.options.serverurl, path)\n            asyncore.loop()\n        except KeyboardInterrupt:\n",
                    "rendered": {
                      "text": "                listener = http_client.Listener()\n            else:\n                listener = self.listener # for unit tests\n            handler = http_client.HTTPHandler(listener, username, password)\n            handler.get(self.ctl.options.serverurl, path)\n            asyncore.loop()\n        except KeyboardInterrupt:\n",
                      "markdown": "`                listener = http_client.Listener()\n            else:\n                listener = self.listener # for unit tests\n            handler = http_client.HTTPHandler(listener, username, password)\n            handler.get(self.ctl.options.serverurl, path)\n            asyncore.loop()\n        except KeyboardInterrupt:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 36,
                  "endLine": 458,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        self.ctl.output('==> Press Ctrl-C to exit <==')\n\n        username = self.ctl.options.username\n        password = self.ctl.options.password\n        handler = None\n        try:\n            # Python's urllib2 (at least as of Python 2.4.2) isn't up\n",
                    "rendered": {
                      "text": "        self.ctl.output('==> Press Ctrl-C to exit <==')\n\n        username = self.ctl.options.username\n        password = self.ctl.options.password\n        handler = None\n        try:\n            # Python's urllib2 (at least as of Python 2.4.2) isn't up\n",
                      "markdown": "`        self.ctl.output('==> Press Ctrl-C to exit <==')\n\n        username = self.ctl.options.username\n        password = self.ctl.options.password\n        handler = None\n        try:\n            # Python's urllib2 (at least as of Python 2.4.2) isn't up\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 8,
                  "endLine": 458,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        self.ctl.output('==> Press Ctrl-C to exit <==')\n\n        username = self.ctl.options.username\n        password = self.ctl.options.password\n        handler = None\n        try:\n            # Python's urllib2 (at least as of Python 2.4.2) isn't up\n",
                    "rendered": {
                      "text": "        self.ctl.output('==> Press Ctrl-C to exit <==')\n\n        username = self.ctl.options.username\n        password = self.ctl.options.password\n        handler = None\n        try:\n            # Python's urllib2 (at least as of Python 2.4.2) isn't up\n",
                      "markdown": "`        self.ctl.output('==> Press Ctrl-C to exit <==')\n\n        username = self.ctl.options.username\n        password = self.ctl.options.password\n        handler = None\n        try:\n            # Python's urllib2 (at least as of Python 2.4.2) isn't up\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 52,
                  "endLine": 216,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                            password = getpass.getpass(prompt='Password:')\n                            self.output('')\n                            self.options.username = username\n                            self.options.password = password\n                            return self.onecmd(line)\n                        else:\n                            self.output('Server requires authentication')\n",
                    "rendered": {
                      "text": "                            password = getpass.getpass(prompt='Password:')\n                            self.output('')\n                            self.options.username = username\n                            self.options.password = password\n                            return self.onecmd(line)\n                        else:\n                            self.output('Server requires authentication')\n",
                      "markdown": "`                            password = getpass.getpass(prompt='Password:')\n                            self.output('')\n                            self.options.username = username\n                            self.options.password = password\n                            return self.onecmd(line)\n                        else:\n                            self.output('Server requires authentication')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 41,
                  "endLine": 216,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                            password = getpass.getpass(prompt='Password:')\n                            self.output('')\n                            self.options.username = username\n                            self.options.password = password\n                            return self.onecmd(line)\n                        else:\n                            self.output('Server requires authentication')\n",
                    "rendered": {
                      "text": "                            password = getpass.getpass(prompt='Password:')\n                            self.output('')\n                            self.options.username = username\n                            self.options.password = password\n                            return self.onecmd(line)\n                        else:\n                            self.output('Server requires authentication')\n",
                      "markdown": "`                            password = getpass.getpass(prompt='Password:')\n                            self.output('')\n                            self.options.username = username\n                            self.options.password = password\n                            return self.onecmd(line)\n                        else:\n                            self.output('Server requires authentication')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 63,
                  "endLine": 213,
                  "endColumn": 71,
                  "snippet": {
                    "text": "                        if self.options.interactive:\n                            self.output('Server requires authentication')\n                            username = raw_input('Username:')\n                            password = getpass.getpass(prompt='Password:')\n                            self.output('')\n                            self.options.username = username\n                            self.options.password = password\n",
                    "rendered": {
                      "text": "                        if self.options.interactive:\n                            self.output('Server requires authentication')\n                            username = raw_input('Username:')\n                            password = getpass.getpass(prompt='Password:')\n                            self.output('')\n                            self.options.username = username\n                            self.options.password = password\n",
                      "markdown": "`                        if self.options.interactive:\n                            self.output('Server requires authentication')\n                            username = raw_input('Username:')\n                            password = getpass.getpass(prompt='Password:')\n                            self.output('')\n                            self.options.username = username\n                            self.options.password = password\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 28,
                  "endLine": 213,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                        if self.options.interactive:\n                            self.output('Server requires authentication')\n                            username = raw_input('Username:')\n                            password = getpass.getpass(prompt='Password:')\n                            self.output('')\n                            self.options.username = username\n                            self.options.password = password\n",
                    "rendered": {
                      "text": "                        if self.options.interactive:\n                            self.output('Server requires authentication')\n                            username = raw_input('Username:')\n                            password = getpass.getpass(prompt='Password:')\n                            self.output('')\n                            self.options.username = username\n                            self.options.password = password\n",
                      "markdown": "`                        if self.options.interactive:\n                            self.output('Server requires authentication')\n                            username = raw_input('Username:')\n                            password = getpass.getpass(prompt='Password:')\n                            self.output('')\n                            self.options.username = username\n                            self.options.password = password\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 70,
                  "endLine": 81,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                                                      self.ctl.options.password)\n        self.error_handler = http_client.HTTPHandler(self.listener,\n                                                     self.ctl.options.username,\n                                                     self.ctl.options.password)\n\n    def start(self): # pragma: no cover\n        # Start the thread\n",
                    "rendered": {
                      "text": "                                                      self.ctl.options.password)\n        self.error_handler = http_client.HTTPHandler(self.listener,\n                                                     self.ctl.options.username,\n                                                     self.ctl.options.password)\n\n    def start(self): # pragma: no cover\n        # Start the thread\n",
                      "markdown": "`                                                      self.ctl.options.password)\n        self.error_handler = http_client.HTTPHandler(self.listener,\n                                                     self.ctl.options.username,\n                                                     self.ctl.options.password)\n\n    def start(self): # pragma: no cover\n        # Start the thread\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 71,
                  "endLine": 78,
                  "endColumn": 79,
                  "snippet": {
                    "text": "        self.listener = http_client.Listener()\n        self.output_handler = http_client.HTTPHandler(self.listener,\n                                                      self.ctl.options.username,\n                                                      self.ctl.options.password)\n        self.error_handler = http_client.HTTPHandler(self.listener,\n                                                     self.ctl.options.username,\n                                                     self.ctl.options.password)\n",
                    "rendered": {
                      "text": "        self.listener = http_client.Listener()\n        self.output_handler = http_client.HTTPHandler(self.listener,\n                                                      self.ctl.options.username,\n                                                      self.ctl.options.password)\n        self.error_handler = http_client.HTTPHandler(self.listener,\n                                                     self.ctl.options.username,\n                                                     self.ctl.options.password)\n",
                      "markdown": "`        self.listener = http_client.Listener()\n        self.output_handler = http_client.HTTPHandler(self.listener,\n                                                      self.ctl.options.username,\n                                                      self.ctl.options.password)\n        self.error_handler = http_client.HTTPHandler(self.listener,\n                                                     self.ctl.options.username,\n                                                     self.ctl.options.password)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 26,
                  "endLine": 14,
                  "endColumn": 34,
                  "snippet": {
                    "text": "-s/--serverurl URL -- URL on which supervisord server is listening\n     (default \"http://localhost:9001\").\n-u/--username USERNAME -- username to use for authentication with server\n-p/--password PASSWORD -- password to use for authentication with server\n-r/--history-file -- keep a readline history (if readline is available)\n\naction [arguments] -- see below\n",
                    "rendered": {
                      "text": "-s/--serverurl URL -- URL on which supervisord server is listening\n     (default \"http://localhost:9001\").\n-u/--username USERNAME -- username to use for authentication with server\n-p/--password PASSWORD -- password to use for authentication with server\n-r/--history-file -- keep a readline history (if readline is available)\n\naction [arguments] -- see below\n",
                      "markdown": "`-s/--serverurl URL -- URL on which supervisord server is listening\n     (default \"http://localhost:9001\").\n-u/--username USERNAME -- username to use for authentication with server\n-p/--password PASSWORD -- password to use for authentication with server\n-r/--history-file -- keep a readline history (if readline is available)\n\naction [arguments] -- see below\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 14,
                  "endLine": 14,
                  "endColumn": 22,
                  "snippet": {
                    "text": "-s/--serverurl URL -- URL on which supervisord server is listening\n     (default \"http://localhost:9001\").\n-u/--username USERNAME -- username to use for authentication with server\n-p/--password PASSWORD -- password to use for authentication with server\n-r/--history-file -- keep a readline history (if readline is available)\n\naction [arguments] -- see below\n",
                    "rendered": {
                      "text": "-s/--serverurl URL -- URL on which supervisord server is listening\n     (default \"http://localhost:9001\").\n-u/--username USERNAME -- username to use for authentication with server\n-p/--password PASSWORD -- password to use for authentication with server\n-r/--history-file -- keep a readline history (if readline is available)\n\naction [arguments] -- see below\n",
                      "markdown": "`-s/--serverurl URL -- URL on which supervisord server is listening\n     (default \"http://localhost:9001\").\n-u/--username USERNAME -- username to use for authentication with server\n-p/--password PASSWORD -- password to use for authentication with server\n-r/--history-file -- keep a readline history (if readline is available)\n\naction [arguments] -- see below\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 5,
                  "endLine": 14,
                  "endColumn": 13,
                  "snippet": {
                    "text": "-s/--serverurl URL -- URL on which supervisord server is listening\n     (default \"http://localhost:9001\").\n-u/--username USERNAME -- username to use for authentication with server\n-p/--password PASSWORD -- password to use for authentication with server\n-r/--history-file -- keep a readline history (if readline is available)\n\naction [arguments] -- see below\n",
                    "rendered": {
                      "text": "-s/--serverurl URL -- URL on which supervisord server is listening\n     (default \"http://localhost:9001\").\n-u/--username USERNAME -- username to use for authentication with server\n-p/--password PASSWORD -- password to use for authentication with server\n-r/--history-file -- keep a readline history (if readline is available)\n\naction [arguments] -- see below\n",
                      "markdown": "`-s/--serverurl URL -- URL on which supervisord server is listening\n     (default \"http://localhost:9001\").\n-u/--username USERNAME -- username to use for authentication with server\n-p/--password PASSWORD -- password to use for authentication with server\n-r/--history-file -- keep a readline history (if readline is available)\n\naction [arguments] -- see below\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 20,
                  "endLine": 448,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    if problematic_enc:\n        ctl.output('Warning: sys.stdout.encoding is set to %s, so Unicode '\n                   'output may fail. Check your LANG and PYTHONIOENCODING '\n                   'environment settings.' % problematic_enc)\n\nclass DefaultControllerPlugin(ControllerPluginBase):\n    name = 'default'\n",
                    "rendered": {
                      "text": "    if problematic_enc:\n        ctl.output('Warning: sys.stdout.encoding is set to %s, so Unicode '\n                   'output may fail. Check your LANG and PYTHONIOENCODING '\n                   'environment settings.' % problematic_enc)\n\nclass DefaultControllerPlugin(ControllerPluginBase):\n    name = 'default'\n",
                      "markdown": "`    if problematic_enc:\n        ctl.output('Warning: sys.stdout.encoding is set to %s, so Unicode '\n                   'output may fail. Check your LANG and PYTHONIOENCODING '\n                   'environment settings.' % problematic_enc)\n\nclass DefaultControllerPlugin(ControllerPluginBase):\n    name = 'default'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 22,
                  "endLine": 429,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                        continue\n                    prevname = name\n                    cmd=name[3:]\n                    if cmd in help:\n                        cmds_doc.append(cmd)\n                        del help[cmd]\n                    elif getattr(self, name).__doc__:\n",
                    "rendered": {
                      "text": "                        continue\n                    prevname = name\n                    cmd=name[3:]\n                    if cmd in help:\n                        cmds_doc.append(cmd)\n                        del help[cmd]\n                    elif getattr(self, name).__doc__:\n",
                      "markdown": "`                        continue\n                    prevname = name\n                    cmd=name[3:]\n                    if cmd in help:\n                        cmds_doc.append(cmd)\n                        del help[cmd]\n                    elif getattr(self, name).__doc__:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 34,
                  "endLine": 294,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        return True\n\n    def complete(self, text, state, line=None):\n        \"\"\"Completer function that Cmd will register with readline using\n        readline.set_completer().  This function will be called by readline\n        as complete(text, state) where text is a fragment to complete and\n        state is an integer (0..n).  Each call returns a string with a new\n",
                    "rendered": {
                      "text": "        return True\n\n    def complete(self, text, state, line=None):\n        \"\"\"Completer function that Cmd will register with readline using\n        readline.set_completer().  This function will be called by readline\n        as complete(text, state) where text is a fragment to complete and\n        state is an integer (0..n).  Each call returns a string with a new\n",
                      "markdown": "`        return True\n\n    def complete(self, text, state, line=None):\n        \"\"\"Completer function that Cmd will register with readline using\n        readline.set_completer().  This function will be called by readline\n        as complete(text, state) where text is a fragment to complete and\n        state is an integer (0..n).  Each call returns a string with a new\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 28,
                  "endLine": 273,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                self.output(\n                    'Sorry, supervisord responded but did not recognize '\n                    'the supervisor namespace commands that supervisorctl '\n                    'uses to control it.  Please check that the '\n                    '[rpcinterface:supervisor] section is enabled in the '\n                    'configuration file (see sample.conf).')\n                self.exitstatus = LSBInitExitStatuses.UNIMPLEMENTED_FEATURE\n",
                    "rendered": {
                      "text": "                self.output(\n                    'Sorry, supervisord responded but did not recognize '\n                    'the supervisor namespace commands that supervisorctl '\n                    'uses to control it.  Please check that the '\n                    '[rpcinterface:supervisor] section is enabled in the '\n                    'configuration file (see sample.conf).')\n                self.exitstatus = LSBInitExitStatuses.UNIMPLEMENTED_FEATURE\n",
                      "markdown": "`                self.output(\n                    'Sorry, supervisord responded but did not recognize '\n                    'the supervisor namespace commands that supervisorctl '\n                    'uses to control it.  Please check that the '\n                    '[rpcinterface:supervisor] section is enabled in the '\n                    'configuration file (see sample.conf).')\n                self.exitstatus = LSBInitExitStatuses.UNIMPLEMENTED_FEATURE\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 27,
                  "endLine": 233,
                  "snippet": {
                    "text": "                self.exitstatus = LSBInitExitStatuses.GENERIC\n\n    def _get_do_func(self, cmd):\n        func_name = 'do_' + cmd\n        func = getattr(self, func_name, None)\n        if not func:\n            for plugin in self.options.plugins:\n                func = getattr(plugin, func_name, None)\n",
                    "rendered": {
                      "text": "                self.exitstatus = LSBInitExitStatuses.GENERIC\n\n    def _get_do_func(self, cmd):\n        func_name = 'do_' + cmd\n        func = getattr(self, func_name, None)\n        if not func:\n            for plugin in self.options.plugins:\n                func = getattr(plugin, func_name, None)\n",
                      "markdown": "`                self.exitstatus = LSBInitExitStatuses.GENERIC\n\n    def _get_do_func(self, cmd):\n        func_name = 'do_' + cmd\n        func = getattr(self, func_name, None)\n        if not func:\n            for plugin in self.options.plugins:\n                func = getattr(plugin, func_name, None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 10,
                  "endLine": 199,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        self._complete_info = None\n        self.lastcmd = line\n\n        if cmd == '':\n            return self.default(line)\n        else:\n            do_func = self._get_do_func(cmd)\n",
                    "rendered": {
                      "text": "        self._complete_info = None\n        self.lastcmd = line\n\n        if cmd == '':\n            return self.default(line)\n        else:\n            do_func = self._get_do_func(cmd)\n",
                      "markdown": "`        self._complete_info = None\n        self.lastcmd = line\n\n        if cmd == '':\n            return self.default(line)\n        else:\n            do_func = self._get_do_func(cmd)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 10,
                  "endLine": 194,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        cmd, arg, line = self.parseline(line)\n        if not line:\n            return self.emptyline()\n        if cmd is None:\n            return self.default(line)\n        self._complete_info = None\n        self.lastcmd = line\n",
                    "rendered": {
                      "text": "        cmd, arg, line = self.parseline(line)\n        if not line:\n            return self.emptyline()\n        if cmd is None:\n            return self.default(line)\n        self._complete_info = None\n        self.lastcmd = line\n",
                      "markdown": "`        cmd, arg, line = self.parseline(line)\n        if not line:\n            return self.emptyline()\n        if cmd is None:\n            return self.default(line)\n        self._complete_info = None\n        self.lastcmd = line\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 6,
                  "endLine": 26,
                  "snippet": {
                    "text": "actions.\n\"\"\"\n\nimport cmd\nimport errno\nimport getpass\nimport socket\nimport sys\n",
                    "rendered": {
                      "text": "actions.\n\"\"\"\n\nimport cmd\nimport errno\nimport getpass\nimport socket\nimport sys\n",
                      "markdown": "`actions.\n\"\"\"\n\nimport cmd\nimport errno\nimport getpass\nimport socket\nimport sys\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 68,
                  "endLine": 3,
                  "endColumn": 73,
                  "snippet": {
                    "text": "#!/usr/bin/env python -u\n\n\"\"\"supervisorctl -- control applications run by supervisord from the cmd line.\n\nUsage: %s [options] [action [arguments]]\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env python -u\n\n\"\"\"supervisorctl -- control applications run by supervisord from the cmd line.\n\nUsage: %s [options] [action [arguments]]\n\n",
                      "markdown": "`#!/usr/bin/env python -u\n\n\"\"\"supervisorctl -- control applications run by supervisord from the cmd line.\n\nUsage: %s [options] [action [arguments]]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 19,
                  "endLine": 3,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#!/usr/bin/env python -u\n\n\"\"\"supervisorctl -- control applications run by supervisord from the cmd line.\n\nUsage: %s [options] [action [arguments]]\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env python -u\n\n\"\"\"supervisorctl -- control applications run by supervisord from the cmd line.\n\nUsage: %s [options] [action [arguments]]\n\n",
                      "markdown": "`#!/usr/bin/env python -u\n\n\"\"\"supervisorctl -- control applications run by supervisord from the cmd line.\n\nUsage: %s [options] [action [arguments]]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 37,
                  "endLine": 626,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n    def help_maintail(self):\n        self.ctl.output(\n            \"maintail -f \\tContinuous tail of supervisor main log file\"\n            \" (Ctrl-C to exit)\\n\"\n            \"maintail -100\\tlast 100 *bytes* of supervisord main log file\\n\"\n            \"maintail\\tlast 1600 *bytes* of supervisor main log file\\n\"\n",
                    "rendered": {
                      "text": "\n    def help_maintail(self):\n        self.ctl.output(\n            \"maintail -f \\tContinuous tail of supervisor main log file\"\n            \" (Ctrl-C to exit)\\n\"\n            \"maintail -100\\tlast 100 *bytes* of supervisord main log file\\n\"\n            \"maintail\\tlast 1600 *bytes* of supervisor main log file\\n\"\n",
                      "markdown": "`\n    def help_maintail(self):\n        self.ctl.output(\n            \"maintail -f \\tContinuous tail of supervisor main log file\"\n            \" (Ctrl-C to exit)\\n\"\n            \"maintail -100\\tlast 100 *bytes* of supervisord main log file\\n\"\n            \"maintail\\tlast 1600 *bytes* of supervisor main log file\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 41,
                  "endLine": 567,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        self.ctl.output(\n            \"tail [-f] <name> [stdout|stderr] (default stdout)\\n\"\n            \"Ex:\\n\"\n            \"tail -f <name>\\t\\tContinuous tail of named process stdout\\n\"\n            \"\\t\\t\\tCtrl-C to exit.\\n\"\n            \"tail -100 <name>\\tlast 100 *bytes* of process stdout\\n\"\n            \"tail <name> stderr\\tlast 1600 *bytes* of process stderr\"\n",
                    "rendered": {
                      "text": "        self.ctl.output(\n            \"tail [-f] <name> [stdout|stderr] (default stdout)\\n\"\n            \"Ex:\\n\"\n            \"tail -f <name>\\t\\tContinuous tail of named process stdout\\n\"\n            \"\\t\\t\\tCtrl-C to exit.\\n\"\n            \"tail -100 <name>\\tlast 100 *bytes* of process stdout\\n\"\n            \"tail <name> stderr\\tlast 1600 *bytes* of process stderr\"\n",
                      "markdown": "`        self.ctl.output(\n            \"tail [-f] <name> [stdout|stderr] (default stdout)\\n\"\n            \"Ex:\\n\"\n            \"tail -f <name>\\t\\tContinuous tail of named process stdout\\n\"\n            \"\\t\\t\\tCtrl-C to exit.\\n\"\n            \"tail -100 <name>\\tlast 100 *bytes* of process stdout\\n\"\n            \"tail <name> stderr\\tlast 1600 *bytes* of process stderr\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 39,
                  "endLine": 515,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                    self.ctl.exitstatus = LSBInitExitStatuses.GENERIC\n                    return\n            else:\n                self.ctl.output('Error: tail requires process name')\n                self.ctl.exitstatus = LSBInitExitStatuses.GENERIC\n                return\n\n",
                    "rendered": {
                      "text": "                    self.ctl.exitstatus = LSBInitExitStatuses.GENERIC\n                    return\n            else:\n                self.ctl.output('Error: tail requires process name')\n                self.ctl.exitstatus = LSBInitExitStatuses.GENERIC\n                return\n\n",
                      "markdown": "`                    self.ctl.exitstatus = LSBInitExitStatuses.GENERIC\n                    return\n            else:\n                self.ctl.output('Error: tail requires process name')\n                self.ctl.exitstatus = LSBInitExitStatuses.GENERIC\n                return\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/supervisorctl.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 51,
                  "endLine": 21,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\nActions are commands like \"tail\" or \"stop\".  If -i is specified or no action is\nspecified on the command line, a \"shell\" interpreting actions typed\ninteractively is started.  Use the action \"help\" to find out about available\nactions.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "\nActions are commands like \"tail\" or \"stop\".  If -i is specified or no action is\nspecified on the command line, a \"shell\" interpreting actions typed\ninteractively is started.  Use the action \"help\" to find out about available\nactions.\n\"\"\"\n\n",
                      "markdown": "`\nActions are commands like \"tail\" or \"stop\".  If -i is specified or no action is\nspecified on the command line, a \"shell\" interpreting actions typed\ninteractively is started.  Use the action \"help\" to find out about available\nactions.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/scripts/loop_eventgen.py"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 6,
                  "endLine": 9,
                  "snippet": {
                    "text": "# loop_listener.py.\n\nimport sys\nimport time\nfrom supervisor import childutils\n\ndef main(max):\n    start = time.time()\n",
                    "rendered": {
                      "text": "# loop_listener.py.\n\nimport sys\nimport time\nfrom supervisor import childutils\n\ndef main(max):\n    start = time.time()\n",
                      "markdown": "`# loop_listener.py.\n\nimport sys\nimport time\nfrom supervisor import childutils\n\ndef main(max):\n    start = time.time()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/pidproxy.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 6,
                  "endLine": 16,
                  "snippet": {
                    "text": "import os\nimport sys\nimport signal\nimport time\n\nclass PidProxy:\n    pid = None\n\n",
                    "rendered": {
                      "text": "import os\nimport sys\nimport signal\nimport time\n\nclass PidProxy:\n    pid = None\n\n",
                      "markdown": "`import os\nimport sys\nimport signal\nimport time\n\nclass PidProxy:\n    pid = None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/medusa/counter.py"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 33,
                  "endLine": 48,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    __bool__ = __nonzero__\n\n    def __repr__ (self):\n        return '<counter value=%s at %x>' % (self.value, id(self))\n\n    def __str__ (self):\n        s = str(long(self.value))\n",
                    "rendered": {
                      "text": "    __bool__ = __nonzero__\n\n    def __repr__ (self):\n        return '<counter value=%s at %x>' % (self.value, id(self))\n\n    def __str__ (self):\n        s = str(long(self.value))\n",
                      "markdown": "`    __bool__ = __nonzero__\n\n    def __repr__ (self):\n        return '<counter value=%s at %x>' % (self.value, id(self))\n\n    def __str__ (self):\n        s = str(long(self.value))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http_client.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 50,
                  "endLine": 146,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        self.header('Accept', '*/*')\n        self.header('User-agent', self.user_agent)\n        if self.password:\n            auth = '%s:%s' % (self.username, self.password)\n            auth = as_string(encodestring(as_bytes(auth))).strip()\n            self.header('Authorization', 'Basic %s' % auth)\n        self.push(CRLF)\n",
                    "rendered": {
                      "text": "        self.header('Accept', '*/*')\n        self.header('User-agent', self.user_agent)\n        if self.password:\n            auth = '%s:%s' % (self.username, self.password)\n            auth = as_string(encodestring(as_bytes(auth))).strip()\n            self.header('Authorization', 'Basic %s' % auth)\n        self.push(CRLF)\n",
                      "markdown": "`        self.header('Accept', '*/*')\n        self.header('User-agent', self.user_agent)\n        if self.password:\n            auth = '%s:%s' % (self.username, self.password)\n            auth = as_string(encodestring(as_bytes(auth))).strip()\n            self.header('Authorization', 'Basic %s' % auth)\n        self.push(CRLF)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http_client.py"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 16,
                  "endLine": 145,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        self.header('Accept-Encoding', 'chunked')\n        self.header('Accept', '*/*')\n        self.header('User-agent', self.user_agent)\n        if self.password:\n            auth = '%s:%s' % (self.username, self.password)\n            auth = as_string(encodestring(as_bytes(auth))).strip()\n            self.header('Authorization', 'Basic %s' % auth)\n",
                    "rendered": {
                      "text": "        self.header('Accept-Encoding', 'chunked')\n        self.header('Accept', '*/*')\n        self.header('User-agent', self.user_agent)\n        if self.password:\n            auth = '%s:%s' % (self.username, self.password)\n            auth = as_string(encodestring(as_bytes(auth))).strip()\n            self.header('Authorization', 'Basic %s' % auth)\n",
                      "markdown": "`        self.header('Accept-Encoding', 'chunked')\n        self.header('Accept', '*/*')\n        self.header('User-agent', self.user_agent)\n        if self.password:\n            auth = '%s:%s' % (self.username, self.password)\n            auth = as_string(encodestring(as_bytes(auth))).strip()\n            self.header('Authorization', 'Basic %s' % auth)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http_client.py"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 24,
                  "endLine": 77,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        self.length = 0\n        self.encoding = None\n        self.username = username\n        self.password = password\n        self.url = None\n        self.error_handled = False\n\n",
                    "rendered": {
                      "text": "        self.length = 0\n        self.encoding = None\n        self.username = username\n        self.password = password\n        self.url = None\n        self.error_handled = False\n\n",
                      "markdown": "`        self.length = 0\n        self.encoding = None\n        self.username = username\n        self.password = password\n        self.url = None\n        self.error_handled = False\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http_client.py"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 13,
                  "endLine": 77,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        self.length = 0\n        self.encoding = None\n        self.username = username\n        self.password = password\n        self.url = None\n        self.error_handled = False\n\n",
                    "rendered": {
                      "text": "        self.length = 0\n        self.encoding = None\n        self.username = username\n        self.password = password\n        self.url = None\n        self.error_handled = False\n\n",
                      "markdown": "`        self.length = 0\n        self.encoding = None\n        self.username = username\n        self.password = password\n        self.url = None\n        self.error_handled = False\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http_client.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 8,
                  "endLine": 60,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        self,\n        listener,\n        username='',\n        password=None,\n        conn=None,\n        map=None\n        ):\n",
                    "rendered": {
                      "text": "        self,\n        listener,\n        username='',\n        password=None,\n        conn=None,\n        map=None\n        ):\n",
                      "markdown": "`        self,\n        listener,\n        username='',\n        password=None,\n        conn=None,\n        map=None\n        ):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http_client.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 17,
                  "endLine": 101,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        self.port = port\n\n        if scheme == \"http\":\n            ip = hostname\n            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.connect((ip, self.port))\n        elif scheme == \"unix\":\n",
                    "rendered": {
                      "text": "        self.port = port\n\n        if scheme == \"http\":\n            ip = hostname\n            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.connect((ip, self.port))\n        elif scheme == \"unix\":\n",
                      "markdown": "`        self.port = port\n\n        if scheme == \"http\":\n            ip = hostname\n            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.connect((ip, self.port))\n        elif scheme == \"unix\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http_client.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 12,
                  "endLine": 94,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            hostname, port = host.split(\":\", 1)\n            port = int(port)\n        else:\n            hostname = host\n            port = 80\n\n        self.path = path\n",
                    "rendered": {
                      "text": "            hostname, port = host.split(\":\", 1)\n            port = int(port)\n        else:\n            hostname = host\n            port = 80\n\n        self.path = path\n",
                      "markdown": "`            hostname, port = host.split(\":\", 1)\n            port = int(port)\n        else:\n            hostname = host\n            port = 80\n\n        self.path = path\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http_client.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 12,
                  "endLine": 91,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            raise NotImplementedError\n        self.host = host\n        if \":\" in host:\n            hostname, port = host.split(\":\", 1)\n            port = int(port)\n        else:\n            hostname = host\n",
                    "rendered": {
                      "text": "            raise NotImplementedError\n        self.host = host\n        if \":\" in host:\n            hostname, port = host.split(\":\", 1)\n            port = int(port)\n        else:\n            hostname = host\n",
                      "markdown": "`            raise NotImplementedError\n        self.host = host\n        if \":\" in host:\n            hostname, port = host.split(\":\", 1)\n            port = int(port)\n        else:\n            hostname = host\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/usr/lib/python3.12/site-packages/supervisor/http_client.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 11,
                  "endLine": 101,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        self.port = port\n\n        if scheme == \"http\":\n            ip = hostname\n            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.connect((ip, self.port))\n        elif scheme == \"unix\":\n",
                    "rendered": {
                      "text": "        self.port = port\n\n        if scheme == \"http\":\n            ip = hostname\n            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.connect((ip, self.port))\n        elif scheme == \"unix\":\n",
                      "markdown": "`        self.port = port\n\n        if scheme == \"http\":\n            ip = hostname\n            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.connect((ip, self.port))\n        elif scheme == \"unix\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/etc/logrotate.d/supervisord"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 75,
                  "endLine": 12,
                  "endColumn": 5,
                  "snippet": {
                    "text": "chmod 600 /home/build/melange-out/supervisor/etc/supervisord.conf\nchmod 644 /home/build/melange-out/supervisor/etc/logrotate.d/supervisord\n\nfind \"/home/build/melange-out/supervisor\" -name \"*.pyo\" -exec rm -rf '{}' +\nfind \"/home/build/melange-out/supervisor\" -name \"tests\" -exec rm -rf '{}' +\n\nexit 0",
                    "rendered": {
                      "text": "chmod 600 /home/build/melange-out/supervisor/etc/supervisord.conf\nchmod 644 /home/build/melange-out/supervisor/etc/logrotate.d/supervisord\n\nfind \"/home/build/melange-out/supervisor\" -name \"*.pyo\" -exec rm -rf '{}' +\nfind \"/home/build/melange-out/supervisor\" -name \"tests\" -exec rm -rf '{}' +\n\nexit 0",
                      "markdown": "`chmod 600 /home/build/melange-out/supervisor/etc/supervisord.conf\nchmod 644 /home/build/melange-out/supervisor/etc/logrotate.d/supervisord\n\nfind \"/home/build/melange-out/supervisor\" -name \"*.pyo\" -exec rm -rf '{}' +\nfind \"/home/build/melange-out/supervisor\" -name \"tests\" -exec rm -rf '{}' +\n\nexit 0`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/etc/logrotate.d/supervisord"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 11,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nchmod 600 /home/build/melange-out/supervisor/etc/supervisord.conf\nchmod 644 /home/build/melange-out/supervisor/etc/logrotate.d/supervisord\n\nfind \"/home/build/melange-out/supervisor\" -name \"*.pyo\" -exec rm -rf '{}' +\nfind \"/home/build/melange-out/supervisor\" -name \"tests\" -exec rm -rf '{}' +\n\nexit 0",
                    "rendered": {
                      "text": "\nchmod 600 /home/build/melange-out/supervisor/etc/supervisord.conf\nchmod 644 /home/build/melange-out/supervisor/etc/logrotate.d/supervisord\n\nfind \"/home/build/melange-out/supervisor\" -name \"*.pyo\" -exec rm -rf '{}' +\nfind \"/home/build/melange-out/supervisor\" -name \"tests\" -exec rm -rf '{}' +\n\nexit 0",
                      "markdown": "`\nchmod 600 /home/build/melange-out/supervisor/etc/supervisord.conf\nchmod 644 /home/build/melange-out/supervisor/etc/logrotate.d/supervisord\n\nfind \"/home/build/melange-out/supervisor\" -name \"*.pyo\" -exec rm -rf '{}' +\nfind \"/home/build/melange-out/supervisor\" -name \"tests\" -exec rm -rf '{}' +\n\nexit 0`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/etc/logrotate.d/supervisord"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 65,
                  "endLine": 9,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  nocompress\n}\n\nchmod 600 /home/build/melange-out/supervisor/etc/supervisord.conf\nchmod 644 /home/build/melange-out/supervisor/etc/logrotate.d/supervisord\n\nfind \"/home/build/melange-out/supervisor\" -name \"*.pyo\" -exec rm -rf '{}' +\nfind \"/home/build/melange-out/supervisor\" -name \"tests\" -exec rm -rf '{}' +\n",
                    "rendered": {
                      "text": "  nocompress\n}\n\nchmod 600 /home/build/melange-out/supervisor/etc/supervisord.conf\nchmod 644 /home/build/melange-out/supervisor/etc/logrotate.d/supervisord\n\nfind \"/home/build/melange-out/supervisor\" -name \"*.pyo\" -exec rm -rf '{}' +\nfind \"/home/build/melange-out/supervisor\" -name \"tests\" -exec rm -rf '{}' +\n",
                      "markdown": "`  nocompress\n}\n\nchmod 600 /home/build/melange-out/supervisor/etc/supervisord.conf\nchmod 644 /home/build/melange-out/supervisor/etc/logrotate.d/supervisord\n\nfind \"/home/build/melange-out/supervisor\" -name \"*.pyo\" -exec rm -rf '{}' +\nfind \"/home/build/melange-out/supervisor\" -name \"tests\" -exec rm -rf '{}' +\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/supervisor-4.2.5-r5.apk/supervisor-4.2.5-r5/etc/logrotate.d/supervisord"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 8,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  notifempty\n  nocompress\n}\n\nchmod 600 /home/build/melange-out/supervisor/etc/supervisord.conf\nchmod 644 /home/build/melange-out/supervisor/etc/logrotate.d/supervisord\n\nfind \"/home/build/melange-out/supervisor\" -name \"*.pyo\" -exec rm -rf '{}' +\n",
                    "rendered": {
                      "text": "  notifempty\n  nocompress\n}\n\nchmod 600 /home/build/melange-out/supervisor/etc/supervisord.conf\nchmod 644 /home/build/melange-out/supervisor/etc/logrotate.d/supervisord\n\nfind \"/home/build/melange-out/supervisor\" -name \"*.pyo\" -exec rm -rf '{}' +\n",
                      "markdown": "`  notifempty\n  nocompress\n}\n\nchmod 600 /home/build/melange-out/supervisor/etc/supervisord.conf\nchmod 644 /home/build/melange-out/supervisor/etc/logrotate.d/supervisord\n\nfind \"/home/build/melange-out/supervisor\" -name \"*.pyo\" -exec rm -rf '{}' +\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}