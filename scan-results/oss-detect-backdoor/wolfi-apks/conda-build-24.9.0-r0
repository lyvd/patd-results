{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/get_core_modules.pl"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 6,
                  "endLine": 31,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  # printf(\"%s %s %s\\n\", $mod, $ver, $Module::CoreList::version{$ver}{$mod} || 'undef' if exists $Module::CoreList::version{$ver}{$mod});\n\n#  for my $v(\n#      sort keys %Module::CoreList::version ){\n#      printf \"  %-10s %-10s\\n\",\n#          $v,\n#          $Module::CoreList::version{$v}{$mod}\n",
                    "rendered": {
                      "text": "  # printf(\"%s %s %s\\n\", $mod, $ver, $Module::CoreList::version{$ver}{$mod} || 'undef' if exists $Module::CoreList::version{$ver}{$mod});\n\n#  for my $v(\n#      sort keys %Module::CoreList::version ){\n#      printf \"  %-10s %-10s\\n\",\n#          $v,\n#          $Module::CoreList::version{$v}{$mod}\n",
                      "markdown": "`  # printf(\"%s %s %s\\n\", $mod, $ver, $Module::CoreList::version{$ver}{$mod} || 'undef' if exists $Module::CoreList::version{$ver}{$mod});\n\n#  for my $v(\n#      sort keys %Module::CoreList::version ){\n#      printf \"  %-10s %-10s\\n\",\n#          $v,\n#          $Module::CoreList::version{$v}{$mod}\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/get_core_modules.pl"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Module::CoreList;\n",
                    "rendered": {
                      "text": "#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Module::CoreList;\n",
                      "markdown": "`#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Module::CoreList;\n`"
                    }
                  },
                  "sourceLanguage": "perl"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 1440,
                  "startColumn": 23,
                  "endLine": 1440,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            d[\"skip_os\"] = \"# no skip\"\n\n        need_git = is_github_url\n        if cran_package.get(\"NeedsCompilation\", \"no\") == \"yes\":\n            with tarfile.open(available[\"source\"][\"cached_path\"]) as tf:\n                need_f = any(\n                    [\n",
                    "rendered": {
                      "text": "            d[\"skip_os\"] = \"# no skip\"\n\n        need_git = is_github_url\n        if cran_package.get(\"NeedsCompilation\", \"no\") == \"yes\":\n            with tarfile.open(available[\"source\"][\"cached_path\"]) as tf:\n                need_f = any(\n                    [\n",
                      "markdown": "`            d[\"skip_os\"] = \"# no skip\"\n\n        need_git = is_github_url\n        if cran_package.get(\"NeedsCompilation\", \"no\") == \"yes\":\n            with tarfile.open(available[\"source\"][\"cached_path\"]) as tf:\n                need_f = any(\n                    [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 1424,
                  "startColumn": 30,
                  "endLine": 1424,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        if \"R\" not in dep_dict:\n            dep_dict[\"R\"] = \"\"\n\n        os_type = cran_package.get(\"OS_type\", \"\")\n        if os_type != \"unix\" and os_type != \"windows\" and os_type != \"\":\n            print(f\"Unknown OS_type: {os_type} in CRAN package\")\n            os_type = \"\"\n",
                    "rendered": {
                      "text": "        if \"R\" not in dep_dict:\n            dep_dict[\"R\"] = \"\"\n\n        os_type = cran_package.get(\"OS_type\", \"\")\n        if os_type != \"unix\" and os_type != \"windows\" and os_type != \"\":\n            print(f\"Unknown OS_type: {os_type} in CRAN package\")\n            os_type = \"\"\n",
                      "markdown": "`        if \"R\" not in dep_dict:\n            dep_dict[\"R\"] = \"\"\n\n        os_type = cran_package.get(\"OS_type\", \"\")\n        if os_type != \"unix\" and os_type != \"windows\" and os_type != \"\":\n            print(f\"Unknown OS_type: {os_type} in CRAN package\")\n            os_type = \"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 1392,
                  "startColumn": 43,
                  "endLine": 1392,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            s.strip() for s in cran_package.get(\"Imports\", \"\").split(\",\") if s.strip()\n        ]\n        links = [\n            s.strip() for s in cran_package.get(\"LinkingTo\", \"\").split(\",\") if s.strip()\n        ]\n\n        dep_dict = {}\n",
                    "rendered": {
                      "text": "            s.strip() for s in cran_package.get(\"Imports\", \"\").split(\",\") if s.strip()\n        ]\n        links = [\n            s.strip() for s in cran_package.get(\"LinkingTo\", \"\").split(\",\") if s.strip()\n        ]\n\n        dep_dict = {}\n",
                      "markdown": "`            s.strip() for s in cran_package.get(\"Imports\", \"\").split(\",\") if s.strip()\n        ]\n        links = [\n            s.strip() for s in cran_package.get(\"LinkingTo\", \"\").split(\",\") if s.strip()\n        ]\n\n        dep_dict = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 1389,
                  "startColumn": 43,
                  "endLine": 1389,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            s.strip() for s in cran_package.get(\"Depends\", \"\").split(\",\") if s.strip()\n        ]\n        imports = [\n            s.strip() for s in cran_package.get(\"Imports\", \"\").split(\",\") if s.strip()\n        ]\n        links = [\n            s.strip() for s in cran_package.get(\"LinkingTo\", \"\").split(\",\") if s.strip()\n",
                    "rendered": {
                      "text": "            s.strip() for s in cran_package.get(\"Depends\", \"\").split(\",\") if s.strip()\n        ]\n        imports = [\n            s.strip() for s in cran_package.get(\"Imports\", \"\").split(\",\") if s.strip()\n        ]\n        links = [\n            s.strip() for s in cran_package.get(\"LinkingTo\", \"\").split(\",\") if s.strip()\n",
                      "markdown": "`            s.strip() for s in cran_package.get(\"Depends\", \"\").split(\",\") if s.strip()\n        ]\n        imports = [\n            s.strip() for s in cran_package.get(\"Imports\", \"\").split(\",\") if s.strip()\n        ]\n        links = [\n            s.strip() for s in cran_package.get(\"LinkingTo\", \"\").split(\",\") if s.strip()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 1386,
                  "startColumn": 43,
                  "endLine": 1386,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        # Every package depends on at least R.\n        # I'm not sure what the difference between depends and imports is.\n        depends = [\n            s.strip() for s in cran_package.get(\"Depends\", \"\").split(\",\") if s.strip()\n        ]\n        imports = [\n            s.strip() for s in cran_package.get(\"Imports\", \"\").split(\",\") if s.strip()\n",
                    "rendered": {
                      "text": "        # Every package depends on at least R.\n        # I'm not sure what the difference between depends and imports is.\n        depends = [\n            s.strip() for s in cran_package.get(\"Depends\", \"\").split(\",\") if s.strip()\n        ]\n        imports = [\n            s.strip() for s in cran_package.get(\"Imports\", \"\").split(\",\") if s.strip()\n",
                      "markdown": "`        # Every package depends on at least R.\n        # I'm not sure what the difference between depends and imports is.\n        depends = [\n            s.strip() for s in cran_package.get(\"Depends\", \"\").split(\",\") if s.strip()\n        ]\n        imports = [\n            s.strip() for s in cran_package.get(\"Imports\", \"\").split(\",\") if s.strip()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 1368,
                  "startColumn": 27,
                  "endLine": 1368,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        if (\n            not use_noarch_generic\n            or cran_package.get(\"NeedsCompilation\", \"no\") == \"yes\"\n        ):\n            d[\"noarch_generic\"] = \"\"\n        else:\n",
                    "rendered": {
                      "text": "\n        if (\n            not use_noarch_generic\n            or cran_package.get(\"NeedsCompilation\", \"no\") == \"yes\"\n        ):\n            d[\"noarch_generic\"] = \"\"\n        else:\n",
                      "markdown": "`\n        if (\n            not use_noarch_generic\n            or cran_package.get(\"NeedsCompilation\", \"no\") == \"yes\"\n        ):\n            d[\"noarch_generic\"] = \"\"\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 1352,
                  "startColumn": 23,
                  "endLine": 1352,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n        if \"License_is_FOSS\" in cran_package:\n            d[\"license\"] += \" (FOSS)\"\n        if cran_package.get(\"License_restricts_use\") == \"yes\":\n            d[\"license\"] += \" (Restricts use)\"\n\n        if \"URL\" in cran_package:\n",
                    "rendered": {
                      "text": "\n        if \"License_is_FOSS\" in cran_package:\n            d[\"license\"] += \" (FOSS)\"\n        if cran_package.get(\"License_restricts_use\") == \"yes\":\n            d[\"license\"] += \" (Restricts use)\"\n\n        if \"URL\" in cran_package:\n",
                      "markdown": "`\n        if \"License_is_FOSS\" in cran_package:\n            d[\"license\"] += \" (FOSS)\"\n        if cran_package.get(\"License_restricts_use\") == \"yes\":\n            d[\"license\"] += \" (Restricts use)\"\n\n        if \"URL\" in cran_package:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 1346,
                  "startColumn": 24,
                  "endLine": 1346,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                binary_id += 1\n\n        license_info = get_license_info(\n            cran_package.get(\"License\", \"None\"), allowed_license_families\n        )\n        d[\"license\"], d[\"license_file\"], d[\"license_family\"] = license_info\n\n",
                    "rendered": {
                      "text": "                binary_id += 1\n\n        license_info = get_license_info(\n            cran_package.get(\"License\", \"None\"), allowed_license_families\n        )\n        d[\"license\"], d[\"license_file\"], d[\"license_family\"] = license_info\n\n",
                      "markdown": "`                binary_id += 1\n\n        license_info = get_license_info(\n            cran_package.get(\"License\", \"None\"), allowed_license_families\n        )\n        d[\"license\"], d[\"license_file\"], d[\"license_family\"] = license_info\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 920,
                  "startColumn": 20,
                  "endLine": 920,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        with TemporaryDirectory() as t:\n            _variant = get_package_variants(t, config)[0]\n        cran_url = ensure_list(\n            _variant.get(\"cran_mirror\", DEFAULT_VARIANTS[\"cran_mirror\"])\n        )[0]\n\n    if len(in_packages) > 1 and version_compare:\n",
                    "rendered": {
                      "text": "        with TemporaryDirectory() as t:\n            _variant = get_package_variants(t, config)[0]\n        cran_url = ensure_list(\n            _variant.get(\"cran_mirror\", DEFAULT_VARIANTS[\"cran_mirror\"])\n        )[0]\n\n    if len(in_packages) > 1 and version_compare:\n",
                      "markdown": "`        with TemporaryDirectory() as t:\n            _variant = get_package_variants(t, config)[0]\n        cran_url = ensure_list(\n            _variant.get(\"cran_mirror\", DEFAULT_VARIANTS[\"cran_mirror\"])\n        )[0]\n\n    if len(in_packages) > 1 and version_compare:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 850,
                  "startColumn": 23,
                  "endLine": 850,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\ndef get_available_binaries(cran_url, details):\n    url = cran_url + \"/\" + details[\"dir\"]\n    response = requests.get(url)\n    response.raise_for_status()\n    ext = details[\"ext\"]\n    for filename in re.findall(r'<a href=\"([^\"]*)\">\\1</a>', response.text):\n",
                    "rendered": {
                      "text": "\ndef get_available_binaries(cran_url, details):\n    url = cran_url + \"/\" + details[\"dir\"]\n    response = requests.get(url)\n    response.raise_for_status()\n    ext = details[\"ext\"]\n    for filename in re.findall(r'<a href=\"([^\"]*)\">\\1</a>', response.text):\n",
                      "markdown": "`\ndef get_available_binaries(cran_url, details):\n    url = cran_url + \"/\" + details[\"dir\"]\n    response = requests.get(url)\n    response.raise_for_status()\n    ext = details[\"ext\"]\n    for filename in re.findall(r'<a href=\"([^\"]*)\">\\1</a>', response.text):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 15,
                  "endLine": 709,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        if p.endswith(\".tar.gz\") and \"_\" in p:\n            name, version = p.rsplit(\".\", 2)[0].split(\"_\", 1)\n            records[name.lower()] = (name, version)\n    r = session.get(cran_url + \"/src/contrib/Archive/\")\n    r.raise_for_status()\n    for p in re.findall(r'<td><a href=\"([^\"]+)/\">\\1/</a></td>', r.text):\n        if re.match(r\"^[A-Za-z]\", p):\n",
                    "rendered": {
                      "text": "        if p.endswith(\".tar.gz\") and \"_\" in p:\n            name, version = p.rsplit(\".\", 2)[0].split(\"_\", 1)\n            records[name.lower()] = (name, version)\n    r = session.get(cran_url + \"/src/contrib/Archive/\")\n    r.raise_for_status()\n    for p in re.findall(r'<td><a href=\"([^\"]+)/\">\\1/</a></td>', r.text):\n        if re.match(r\"^[A-Za-z]\", p):\n",
                      "markdown": "`        if p.endswith(\".tar.gz\") and \"_\" in p:\n            name, version = p.rsplit(\".\", 2)[0].split(\"_\", 1)\n            records[name.lower()] = (name, version)\n    r = session.get(cran_url + \"/src/contrib/Archive/\")\n    r.raise_for_status()\n    for p in re.findall(r'<td><a href=\"([^\"]+)/\">\\1/</a></td>', r.text):\n        if re.match(r\"^[A-Za-z]\", p):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 15,
                  "endLine": 702,
                  "endColumn": 20,
                  "snippet": {
                    "text": "def get_cran_index(cran_url, session, verbose=True):\n    if verbose:\n        print(f\"Fetching main index from {cran_url}\")\n    r = session.get(cran_url + \"/src/contrib/\")\n    r.raise_for_status()\n    records = {}\n    for p in re.findall(r'<td><a href=\"([^\"]+)\">\\1</a></td>', r.text):\n",
                    "rendered": {
                      "text": "def get_cran_index(cran_url, session, verbose=True):\n    if verbose:\n        print(f\"Fetching main index from {cran_url}\")\n    r = session.get(cran_url + \"/src/contrib/\")\n    r.raise_for_status()\n    records = {}\n    for p in re.findall(r'<td><a href=\"([^\"]+)\">\\1</a></td>', r.text):\n",
                      "markdown": "`def get_cran_index(cran_url, session, verbose=True):\n    if verbose:\n        print(f\"Fetching main index from {cran_url}\")\n    r = session.get(cran_url + \"/src/contrib/\")\n    r.raise_for_status()\n    records = {}\n    for p in re.findall(r'<td><a href=\"([^\"]+)\">\\1</a></td>', r.text):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 681,
                  "startColumn": 15,
                  "endLine": 681,
                  "endColumn": 20,
                  "snippet": {
                    "text": "def get_cran_archive_versions(cran_url, session, package, verbose=True):\n    if verbose:\n        print(f\"Fetching archived versions for package {package} from {cran_url}\")\n    r = session.get(cran_url + \"/src/contrib/Archive/\" + package + \"/\")\n    try:\n        r.raise_for_status()\n    except requests.exceptions.HTTPError as e:\n",
                    "rendered": {
                      "text": "def get_cran_archive_versions(cran_url, session, package, verbose=True):\n    if verbose:\n        print(f\"Fetching archived versions for package {package} from {cran_url}\")\n    r = session.get(cran_url + \"/src/contrib/Archive/\" + package + \"/\")\n    try:\n        r.raise_for_status()\n    except requests.exceptions.HTTPError as e:\n",
                      "markdown": "`def get_cran_archive_versions(cran_url, session, package, verbose=True):\n    if verbose:\n        print(f\"Fetching archived versions for package {package} from {cran_url}\")\n    r = session.get(cran_url + \"/src/contrib/Archive/\" + package + \"/\")\n    try:\n        r.raise_for_status()\n    except requests.exceptions.HTTPError as e:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 656,
                  "startColumn": 18,
                  "endLine": 656,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    This provides a workaround for users in some corporate environments where\n    MITM style proxies make it difficult to fetch data over HTTPS.\n    \"\"\"\n    return environ.get(\"SSL_NO_VERIFY\", \"\").strip().lower() in (\"1\", \"true\")\n\n\ndef get_session(output_dir, verbose=True):\n",
                    "rendered": {
                      "text": "    This provides a workaround for users in some corporate environments where\n    MITM style proxies make it difficult to fetch data over HTTPS.\n    \"\"\"\n    return environ.get(\"SSL_NO_VERIFY\", \"\").strip().lower() in (\"1\", \"true\")\n\n\ndef get_session(output_dir, verbose=True):\n",
                      "markdown": "`    This provides a workaround for users in some corporate environments where\n    MITM style proxies make it difficult to fetch data over HTTPS.\n    \"\"\"\n    return environ.get(\"SSL_NO_VERIFY\", \"\").strip().lower() in (\"1\", \"true\")\n\n\ndef get_session(output_dir, verbose=True):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 35,
                  "endLine": 460,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    cran.add_argument(\n        \"-m\",\n        \"--variant-config-files\",\n        default=context.conda_build.get(\"skeleton_config_yaml\", None),\n        help=\"\"\"Variant config file to add.  These yaml files can contain\n        keys such as `cran_mirror`.  Only one can be provided here.\"\"\",\n    )\n",
                    "rendered": {
                      "text": "    cran.add_argument(\n        \"-m\",\n        \"--variant-config-files\",\n        default=context.conda_build.get(\"skeleton_config_yaml\", None),\n        help=\"\"\"Variant config file to add.  These yaml files can contain\n        keys such as `cran_mirror`.  Only one can be provided here.\"\"\",\n    )\n",
                      "markdown": "`    cran.add_argument(\n        \"-m\",\n        \"--variant-config-files\",\n        default=context.conda_build.get(\"skeleton_config_yaml\", None),\n        help=\"\"\"Variant config file to add.  These yaml files can contain\n        keys such as `cran_mirror`.  Only one can be provided here.\"\"\",\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 656,
                  "startColumn": 11,
                  "endLine": 656,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    This provides a workaround for users in some corporate environments where\n    MITM style proxies make it difficult to fetch data over HTTPS.\n    \"\"\"\n    return environ.get(\"SSL_NO_VERIFY\", \"\").strip().lower() in (\"1\", \"true\")\n\n\ndef get_session(output_dir, verbose=True):\n",
                    "rendered": {
                      "text": "    This provides a workaround for users in some corporate environments where\n    MITM style proxies make it difficult to fetch data over HTTPS.\n    \"\"\"\n    return environ.get(\"SSL_NO_VERIFY\", \"\").strip().lower() in (\"1\", \"true\")\n\n\ndef get_session(output_dir, verbose=True):\n",
                      "markdown": "`    This provides a workaround for users in some corporate environments where\n    MITM style proxies make it difficult to fetch data over HTTPS.\n    \"\"\"\n    return environ.get(\"SSL_NO_VERIFY\", \"\").strip().lower() in (\"1\", \"true\")\n\n\ndef get_session(output_dir, verbose=True):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 1383,
                  "startColumn": 34,
                  "endLine": 1383,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        else:\n            d[\"suggests\"] = \"\"\n\n        # Every package depends on at least R.\n        # I'm not sure what the difference between depends and imports is.\n        depends = [\n            s.strip() for s in cran_package.get(\"Depends\", \"\").split(\",\") if s.strip()\n",
                    "rendered": {
                      "text": "        else:\n            d[\"suggests\"] = \"\"\n\n        # Every package depends on at least R.\n        # I'm not sure what the difference between depends and imports is.\n        depends = [\n            s.strip() for s in cran_package.get(\"Depends\", \"\").split(\",\") if s.strip()\n",
                      "markdown": "`        else:\n            d[\"suggests\"] = \"\"\n\n        # Every package depends on at least R.\n        # I'm not sure what the difference between depends and imports is.\n        depends = [\n            s.strip() for s in cran_package.get(\"Depends\", \"\").split(\",\") if s.strip()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 71,
                  "endLine": 924,
                  "endColumn": 75,
                  "snippet": {
                    "text": "        )[0]\n\n    if len(in_packages) > 1 and version_compare:\n        raise ValueError(\"--version-compare only works with one package at a time\")\n    if update_policy == \"error\" and not in_packages:\n        raise ValueError(\"At least one package must be supplied\")\n\n",
                    "rendered": {
                      "text": "        )[0]\n\n    if len(in_packages) > 1 and version_compare:\n        raise ValueError(\"--version-compare only works with one package at a time\")\n    if update_policy == \"error\" and not in_packages:\n        raise ValueError(\"At least one package must be supplied\")\n\n",
                      "markdown": "`        )[0]\n\n    if len(in_packages) > 1 and version_compare:\n        raise ValueError(\"--version-compare only works with one package at a time\")\n    if update_policy == \"error\" and not in_packages:\n        raise ValueError(\"At least one package must be supplied\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 756,
                  "startColumn": 60,
                  "endLine": 756,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    Converts `package` (*) into a tuple of:\n\n    pkg_name (without leading 'r-')\n    location (in a subdir of output_dir - may not exist - or at GitHub)\n    old_git_rev (from existing metadata, so corresponds to the *old* version)\n    metadata or None (if a recipe does *not* already exist)\n\n",
                    "rendered": {
                      "text": "    Converts `package` (*) into a tuple of:\n\n    pkg_name (without leading 'r-')\n    location (in a subdir of output_dir - may not exist - or at GitHub)\n    old_git_rev (from existing metadata, so corresponds to the *old* version)\n    metadata or None (if a recipe does *not* already exist)\n\n",
                      "markdown": "`    Converts `package` (*) into a tuple of:\n\n    pkg_name (without leading 'r-')\n    location (in a subdir of output_dir - may not exist - or at GitHub)\n    old_git_rev (from existing metadata, so corresponds to the *old* version)\n    metadata or None (if a recipe does *not* already exist)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 52,
                  "endLine": 393,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        \"--use-when-no-binary\",\n        choices=(\"src\", \"old\", \"src-old\", \"old-src\", \"error\"),\n        default=\"src\",\n        help=\"\"\"Sometimes binaries are not available at the correct version for\n                a given platform (macOS). You can use this flag to specify what\n                fallback to take, either compiling from source or using an older\n                binary or trying one then the other.\"\"\",\n",
                    "rendered": {
                      "text": "        \"--use-when-no-binary\",\n        choices=(\"src\", \"old\", \"src-old\", \"old-src\", \"error\"),\n        default=\"src\",\n        help=\"\"\"Sometimes binaries are not available at the correct version for\n                a given platform (macOS). You can use this flag to specify what\n                fallback to take, either compiling from source or using an older\n                binary or trying one then the other.\"\"\",\n",
                      "markdown": "`        \"--use-when-no-binary\",\n        choices=(\"src\", \"old\", \"src-old\", \"old-src\", \"error\"),\n        default=\"src\",\n        help=\"\"\"Sometimes binaries are not available at the correct version for\n                a given platform (macOS). You can use this flag to specify what\n                fallback to take, either compiling from source or using an older\n                binary or trying one then the other.\"\"\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 20,
                  "endLine": 370,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    cran.add_argument(\n        \"--all-urls\",\n        action=\"store_true\",\n        help=\"\"\"Look at all URLs, not just source URLs. Use this if it can't\n                find the right URL.\"\"\",\n    )\n    cran.add_argument(\n",
                    "rendered": {
                      "text": "    cran.add_argument(\n        \"--all-urls\",\n        action=\"store_true\",\n        help=\"\"\"Look at all URLs, not just source URLs. Use this if it can't\n                find the right URL.\"\"\",\n    )\n    cran.add_argument(\n",
                      "markdown": "`    cran.add_argument(\n        \"--all-urls\",\n        action=\"store_true\",\n        help=\"\"\"Look at all URLs, not just source URLs. Use this if it can't\n                find the right URL.\"\"\",\n    )\n    cran.add_argument(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 5,
                  "endLine": 230,
                  "endColumn": 10,
                  "snippet": {
                    "text": "# We hardcode the fact that CRAN does not provide win32 binaries here.\nCRAN_BLD_BAT_MIXED = \"\"\"\\\nif \"%target_platform%\" == \"win-64\" goto skip_source_build\n\"%R%\" CMD INSTALL --build . %R_ARGS%\nIF %ERRORLEVEL% NEQ 0 exit /B 1\nexit 0\n:skip_source_build\n",
                    "rendered": {
                      "text": "# We hardcode the fact that CRAN does not provide win32 binaries here.\nCRAN_BLD_BAT_MIXED = \"\"\"\\\nif \"%target_platform%\" == \"win-64\" goto skip_source_build\n\"%R%\" CMD INSTALL --build . %R_ARGS%\nIF %ERRORLEVEL% NEQ 0 exit /B 1\nexit 0\n:skip_source_build\n",
                      "markdown": "`# We hardcode the fact that CRAN does not provide win32 binaries here.\nCRAN_BLD_BAT_MIXED = \"\"\"\\\nif \"%target_platform%\" == \"win-64\" goto skip_source_build\n\"%R%\" CMD INSTALL --build . %R_ARGS%\nIF %ERRORLEVEL% NEQ 0 exit /B 1\nexit 0\n:skip_source_build\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 5,
                  "endLine": 223,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\"\"\"\n\nCRAN_BLD_BAT_SOURCE = \"\"\"\\\n\"%R%\" CMD INSTALL --build . %R_ARGS%\nIF %ERRORLEVEL% NEQ 0 exit /B 1\n\"\"\"\n\n",
                    "rendered": {
                      "text": "\"\"\"\n\nCRAN_BLD_BAT_SOURCE = \"\"\"\\\n\"%R%\" CMD INSTALL --build . %R_ARGS%\nIF %ERRORLEVEL% NEQ 0 exit /B 1\n\"\"\"\n\n",
                      "markdown": "`\"\"\"\n\nCRAN_BLD_BAT_SOURCE = \"\"\"\\\n\"%R%\" CMD INSTALL --build . %R_ARGS%\nIF %ERRORLEVEL% NEQ 0 exit /B 1\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 8,
                  "endLine": 178,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  mv DESCRIPTION DESCRIPTION.old\n  grep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n  # shellcheck disable=SC2086\n  ${{R}} CMD INSTALL --build . ${{R_ARGS}}\nelse\n  mkdir -p \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n  mv ./* \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n",
                    "rendered": {
                      "text": "  mv DESCRIPTION DESCRIPTION.old\n  grep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n  # shellcheck disable=SC2086\n  ${{R}} CMD INSTALL --build . ${{R_ARGS}}\nelse\n  mkdir -p \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n  mv ./* \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n",
                      "markdown": "`  mv DESCRIPTION DESCRIPTION.old\n  grep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n  # shellcheck disable=SC2086\n  ${{R}} CMD INSTALL --build . ${{R_ARGS}}\nelse\n  mkdir -p \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n  mv ./* \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 6,
                  "endLine": 159,
                  "endColumn": 11,
                  "snippet": {
                    "text": "mv DESCRIPTION DESCRIPTION.old\ngrep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n# shellcheck disable=SC2086\n${{R}} CMD INSTALL --build . ${{R_ARGS}}\n\n# Add more build steps here, if they are necessary.\n\n",
                    "rendered": {
                      "text": "mv DESCRIPTION DESCRIPTION.old\ngrep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n# shellcheck disable=SC2086\n${{R}} CMD INSTALL --build . ${{R_ARGS}}\n\n# Add more build steps here, if they are necessary.\n\n",
                      "markdown": "`mv DESCRIPTION DESCRIPTION.old\ngrep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n# shellcheck disable=SC2086\n${{R}} CMD INSTALL --build . ${{R_ARGS}}\n\n# Add more build steps here, if they are necessary.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 34,
                  "endLine": 119,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    - \"\\\\\"%R%\\\\\" -e \\\\\"library('{cran_packagename}')\\\\\"\"  # [win]\n\n  # You can also put a file called run_test.py, run_test.sh, or run_test.bat\n  # in the recipe that will be run at test time.\n\n  # requires:\n    # Put any additional test requirements here.\n",
                    "rendered": {
                      "text": "    - \"\\\\\"%R%\\\\\" -e \\\\\"library('{cran_packagename}')\\\\\"\"  # [win]\n\n  # You can also put a file called run_test.py, run_test.sh, or run_test.bat\n  # in the recipe that will be run at test time.\n\n  # requires:\n    # Put any additional test requirements here.\n",
                      "markdown": "`    - \"\\\\\"%R%\\\\\" -e \\\\\"library('{cran_packagename}')\\\\\"\"  # [win]\n\n  # You can also put a file called run_test.py, run_test.sh, or run_test.bat\n  # in the recipe that will be run at test time.\n\n  # requires:\n    # Put any additional test requirements here.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 25,
                  "endLine": 641,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    stdout = stdout.decode(\"utf-8\")\n    stderr = stderr.decode(\"utf-8\")\n    if stderr or p.returncode:\n        sys.exit(f\"Error: git tag failed ({stderr})\")\n    tags = stdout.strip().splitlines()\n    if not tags:\n        sys.exit(\"Error: no tags found\")\n",
                    "rendered": {
                      "text": "    stdout = stdout.decode(\"utf-8\")\n    stderr = stderr.decode(\"utf-8\")\n    if stderr or p.returncode:\n        sys.exit(f\"Error: git tag failed ({stderr})\")\n    tags = stdout.strip().splitlines()\n    if not tags:\n        sys.exit(\"Error: no tags found\")\n",
                      "markdown": "`    stdout = stdout.decode(\"utf-8\")\n    stderr = stderr.decode(\"utf-8\")\n    if stderr or p.returncode:\n        sys.exit(f\"Error: git tag failed ({stderr})\")\n    tags = stdout.strip().splitlines()\n    if not tags:\n        sys.exit(\"Error: no tags found\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 15,
                  "endLine": 371,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        \"--all-urls\",\n        action=\"store_true\",\n        help=\"\"\"Look at all URLs, not just source URLs. Use this if it can't\n                find the right URL.\"\"\",\n    )\n    cran.add_argument(\n        \"--cran-url\",\n",
                    "rendered": {
                      "text": "        \"--all-urls\",\n        action=\"store_true\",\n        help=\"\"\"Look at all URLs, not just source URLs. Use this if it can't\n                find the right URL.\"\"\",\n    )\n    cran.add_argument(\n        \"--cran-url\",\n",
                      "markdown": "`        \"--all-urls\",\n        action=\"store_true\",\n        help=\"\"\"Look at all URLs, not just source URLs. Use this if it can't\n                find the right URL.\"\"\",\n    )\n    cran.add_argument(\n        \"--cran-url\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 55,
                  "endLine": 219,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\nset -o errexit -o pipefail\n\nmkdir -p \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\nmv ./* \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n\"\"\"\n\nCRAN_BLD_BAT_SOURCE = \"\"\"\\\n",
                    "rendered": {
                      "text": "\nset -o errexit -o pipefail\n\nmkdir -p \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\nmv ./* \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n\"\"\"\n\nCRAN_BLD_BAT_SOURCE = \"\"\"\\\n",
                      "markdown": "`\nset -o errexit -o pipefail\n\nmkdir -p \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\nmv ./* \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n\"\"\"\n\nCRAN_BLD_BAT_SOURCE = \"\"\"\\\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 1,
                  "endLine": 181,
                  "endColumn": 5,
                  "snippet": {
                    "text": "  ${{R}} CMD INSTALL --build . ${{R_ARGS}}\nelse\n  mkdir -p \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n  mv ./* \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n\n  if [[ ${{target_platform}} == osx-64 ]]; then\n    pushd \"${{PREFIX}}\"\n",
                    "rendered": {
                      "text": "  ${{R}} CMD INSTALL --build . ${{R_ARGS}}\nelse\n  mkdir -p \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n  mv ./* \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n\n  if [[ ${{target_platform}} == osx-64 ]]; then\n    pushd \"${{PREFIX}}\"\n",
                      "markdown": "`  ${{R}} CMD INSTALL --build . ${{R_ARGS}}\nelse\n  mkdir -p \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n  mv ./* \"${{PREFIX}}\"/lib/R/library/{cran_packagename}\n\n  if [[ ${{target_platform}} == osx-64 ]]; then\n    pushd \"${{PREFIX}}\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 1,
                  "endLine": 176,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if {source_pf_bash}; then\n  export DISABLE_AUTOBREW=1\n  mv DESCRIPTION DESCRIPTION.old\n  grep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n  # shellcheck disable=SC2086\n  ${{R}} CMD INSTALL --build . ${{R_ARGS}}\nelse\n",
                    "rendered": {
                      "text": "if {source_pf_bash}; then\n  export DISABLE_AUTOBREW=1\n  mv DESCRIPTION DESCRIPTION.old\n  grep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n  # shellcheck disable=SC2086\n  ${{R}} CMD INSTALL --build . ${{R_ARGS}}\nelse\n",
                      "markdown": "`if {source_pf_bash}; then\n  export DISABLE_AUTOBREW=1\n  mv DESCRIPTION DESCRIPTION.old\n  grep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n  # shellcheck disable=SC2086\n  ${{R}} CMD INSTALL --build . ${{R_ARGS}}\nelse\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 1,
                  "endLine": 175,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif {source_pf_bash}; then\n  export DISABLE_AUTOBREW=1\n  mv DESCRIPTION DESCRIPTION.old\n  grep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n  # shellcheck disable=SC2086\n  ${{R}} CMD INSTALL --build . ${{R_ARGS}}\n",
                    "rendered": {
                      "text": "\nif {source_pf_bash}; then\n  export DISABLE_AUTOBREW=1\n  mv DESCRIPTION DESCRIPTION.old\n  grep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n  # shellcheck disable=SC2086\n  ${{R}} CMD INSTALL --build . ${{R_ARGS}}\n",
                      "markdown": "`\nif {source_pf_bash}; then\n  export DISABLE_AUTOBREW=1\n  mv DESCRIPTION DESCRIPTION.old\n  grep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n  # shellcheck disable=SC2086\n  ${{R}} CMD INSTALL --build . ${{R_ARGS}}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 30,
                  "endLine": 157,
                  "endColumn": 5,
                  "snippet": {
                    "text": "export DISABLE_AUTOBREW=1\n\n# R refuses to build packages that mark themselves as Priority: Recommended\nmv DESCRIPTION DESCRIPTION.old\ngrep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n# shellcheck disable=SC2086\n${{R}} CMD INSTALL --build . ${{R_ARGS}}\n\n",
                    "rendered": {
                      "text": "export DISABLE_AUTOBREW=1\n\n# R refuses to build packages that mark themselves as Priority: Recommended\nmv DESCRIPTION DESCRIPTION.old\ngrep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n# shellcheck disable=SC2086\n${{R}} CMD INSTALL --build . ${{R_ARGS}}\n\n",
                      "markdown": "`export DISABLE_AUTOBREW=1\n\n# R refuses to build packages that mark themselves as Priority: Recommended\nmv DESCRIPTION DESCRIPTION.old\ngrep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n# shellcheck disable=SC2086\n${{R}} CMD INSTALL --build . ${{R_ARGS}}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cran.py"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 75,
                  "endLine": 156,
                  "endColumn": 3,
                  "snippet": {
                    "text": "# https://github.com/jeroen/autobrew/issues/3\nexport DISABLE_AUTOBREW=1\n\n# R refuses to build packages that mark themselves as Priority: Recommended\nmv DESCRIPTION DESCRIPTION.old\ngrep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n# shellcheck disable=SC2086\n${{R}} CMD INSTALL --build . ${{R_ARGS}}\n",
                    "rendered": {
                      "text": "# https://github.com/jeroen/autobrew/issues/3\nexport DISABLE_AUTOBREW=1\n\n# R refuses to build packages that mark themselves as Priority: Recommended\nmv DESCRIPTION DESCRIPTION.old\ngrep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n# shellcheck disable=SC2086\n${{R}} CMD INSTALL --build . ${{R_ARGS}}\n",
                      "markdown": "`# https://github.com/jeroen/autobrew/issues/3\nexport DISABLE_AUTOBREW=1\n\n# R refuses to build packages that mark themselves as Priority: Recommended\nmv DESCRIPTION DESCRIPTION.old\ngrep -va '^Priority: ' DESCRIPTION.old > DESCRIPTION\n# shellcheck disable=SC2086\n${{R}} CMD INSTALL --build . ${{R_ARGS}}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 1047,
                  "startColumn": 22,
                  "endLine": 1047,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        return False\n    else:\n        url = f\"{cpan_url}/module/{module}\"\n        req = requests.get(url)\n        if req.status_code == 200:\n            return True\n        else:\n",
                    "rendered": {
                      "text": "        return False\n    else:\n        url = f\"{cpan_url}/module/{module}\"\n        req = requests.get(url)\n        if req.status_code == 200:\n            return True\n        else:\n",
                      "markdown": "`        return False\n    else:\n        url = f\"{cpan_url}/module/{module}\"\n        req = requests.get(url)\n        if req.status_code == 200:\n            return True\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 1041,
                  "startColumn": 18,
                  "endLine": 1041,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        print(\"debug\")\n    url = f\"{cpan_url}/release/{module}\"\n    url = url.replace(\"::\", \"-\")\n    req = requests.get(url)\n\n    if req.status_code == 200:\n        return False\n",
                    "rendered": {
                      "text": "        print(\"debug\")\n    url = f\"{cpan_url}/release/{module}\"\n    url = url.replace(\"::\", \"-\")\n    req = requests.get(url)\n\n    if req.status_code == 200:\n        return False\n",
                      "markdown": "`        print(\"debug\")\n    url = f\"{cpan_url}/release/{module}\"\n    url = url.replace(\"::\", \"-\")\n    req = requests.get(url)\n\n    if req.status_code == 200:\n        return False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 759,
                  "startColumn": 23,
                  "endLine": 759,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    print(f\"Processing dependencies for {package}...\", end=\"\")\n    sys.stdout.flush()\n\n    if not release_data.get(\"dependency\"):\n        return deps, packages_to_append\n\n    # release_data['dependency'] = ['FindBin-libs' if r == 'FindBin' else r for r in release_data['dependency']]\n",
                    "rendered": {
                      "text": "    print(f\"Processing dependencies for {package}...\", end=\"\")\n    sys.stdout.flush()\n\n    if not release_data.get(\"dependency\"):\n        return deps, packages_to_append\n\n    # release_data['dependency'] = ['FindBin-libs' if r == 'FindBin' else r for r in release_data['dependency']]\n",
                      "markdown": "`    print(f\"Processing dependencies for {package}...\", end=\"\")\n    sys.stdout.flush()\n\n    if not release_data.get(\"dependency\"):\n        return deps, packages_to_append\n\n    # release_data['dependency'] = ['FindBin-libs' if r == 'FindBin' else r for r in release_data['dependency']]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 27,
                  "endLine": 536,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            # If this is something we're downloading, get MD5\n            d[\"cpanurl\"] = \"\"\n            d[\"sha256\"] = \"\"\n            if release_data.get(\"download_url\"):\n                d[\"cpanurl\"] = release_data[\"download_url\"]\n                d[\"sha256\"], size = get_checksum_and_size(release_data[\"download_url\"])\n                print(\"Using url {} ({}) for {}.\".format(d[\"cpanurl\"], size, package))\n",
                    "rendered": {
                      "text": "            # If this is something we're downloading, get MD5\n            d[\"cpanurl\"] = \"\"\n            d[\"sha256\"] = \"\"\n            if release_data.get(\"download_url\"):\n                d[\"cpanurl\"] = release_data[\"download_url\"]\n                d[\"sha256\"], size = get_checksum_and_size(release_data[\"download_url\"])\n                print(\"Using url {} ({}) for {}.\".format(d[\"cpanurl\"], size, package))\n",
                      "markdown": "`            # If this is something we're downloading, get MD5\n            d[\"cpanurl\"] = \"\"\n            d[\"sha256\"] = \"\"\n            if release_data.get(\"download_url\"):\n                d[\"cpanurl\"] = release_data[\"download_url\"]\n                d[\"sha256\"], size = get_checksum_and_size(release_data[\"download_url\"])\n                print(\"Using url {} ({}) for {}.\".format(d[\"cpanurl\"], size, package))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 33,
                  "endLine": 406,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    # TODO :: Make a temp env. with perl (which we need anyway) and use whatever version\n    #         got installed instead of this. Also allow the version to be specified.\n    perl_version = config.variant.get(\"perl\", get_default_variant(config)[\"perl\"])\n    core_modules = get_core_modules_for_this_perl_version(perl_version, cache_dir)\n\n    # wildcards are not valid for perl\n",
                    "rendered": {
                      "text": "\n    # TODO :: Make a temp env. with perl (which we need anyway) and use whatever version\n    #         got installed instead of this. Also allow the version to be specified.\n    perl_version = config.variant.get(\"perl\", get_default_variant(config)[\"perl\"])\n    core_modules = get_core_modules_for_this_perl_version(perl_version, cache_dir)\n\n    # wildcards are not valid for perl\n",
                      "markdown": "`\n    # TODO :: Make a temp env. with perl (which we need anyway) and use whatever version\n    #         got installed instead of this. Also allow the version to be specified.\n    perl_version = config.variant.get(\"perl\", get_default_variant(config)[\"perl\"])\n    core_modules = get_core_modules_for_this_perl_version(perl_version, cache_dir)\n\n    # wildcards are not valid for perl\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 1135,
                  "startColumn": 3,
                  "endLine": 1135,
                  "endColumn": 7,
                  "snippet": {
                    "text": "def get_checksum_and_size(download_url):\n    \"\"\"\n    Looks in the CHECKSUMS file in the same directory as the file specified\n    at download_url and returns the sha256 hash and file size.\n    \"\"\"\n    base_url = dirname(download_url)\n    filename = basename(download_url)\n",
                    "rendered": {
                      "text": "def get_checksum_and_size(download_url):\n    \"\"\"\n    Looks in the CHECKSUMS file in the same directory as the file specified\n    at download_url and returns the sha256 hash and file size.\n    \"\"\"\n    base_url = dirname(download_url)\n    filename = basename(download_url)\n",
                      "markdown": "`def get_checksum_and_size(download_url):\n    \"\"\"\n    Looks in the CHECKSUMS file in the same directory as the file specified\n    at download_url and returns the sha256 hash and file size.\n    \"\"\"\n    base_url = dirname(download_url)\n    filename = basename(download_url)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 1069,
                  "startColumn": 54,
                  "endLine": 1069,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\ndef get_release_info(cpan_url, cache_dir, core_modules, package, version):\n    \"\"\"\n    Return a dictionary of the JSON information stored at cpan.metacpan.org\n    corresponding to the given package/dist/module.\n    \"\"\"\n    # Transform module name to dist name if necessary\n",
                    "rendered": {
                      "text": "\ndef get_release_info(cpan_url, cache_dir, core_modules, package, version):\n    \"\"\"\n    Return a dictionary of the JSON information stored at cpan.metacpan.org\n    corresponding to the given package/dist/module.\n    \"\"\"\n    # Transform module name to dist name if necessary\n",
                      "markdown": "`\ndef get_release_info(cpan_url, cache_dir, core_modules, package, version):\n    \"\"\"\n    Return a dictionary of the JSON information stored at cpan.metacpan.org\n    corresponding to the given package/dist/module.\n    \"\"\"\n    # Transform module name to dist name if necessary\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 75,
                  "endLine": 893,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    \"\"\"\n    if \"Git::Check\" in module:\n        print(\"debug this\")\n    # First check if it is a core module, those mask distributions here, or at least they\n    # do in the case of `import Exporter`\n    distribution = None\n    try:\n",
                    "rendered": {
                      "text": "    \"\"\"\n    if \"Git::Check\" in module:\n        print(\"debug this\")\n    # First check if it is a core module, those mask distributions here, or at least they\n    # do in the case of `import Exporter`\n    distribution = None\n    try:\n",
                      "markdown": "`    \"\"\"\n    if \"Git::Check\" in module:\n        print(\"debug this\")\n    # First check if it is a core module, those mask distributions here, or at least they\n    # do in the case of `import Exporter`\n    distribution = None\n    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 833,
                  "startColumn": 48,
                  "endLine": 833,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                        pkg_version = metacpan_api_get_core_version(\n                            core_modules, dep_dict[\"module\"]\n                        )\n                    # If no package is available at all, it's in the core, or\n                    # the latest is already good enough, don't specify version.\n                    # This is because conda doesn't support > in version\n                    # requirements.\n",
                    "rendered": {
                      "text": "                        pkg_version = metacpan_api_get_core_version(\n                            core_modules, dep_dict[\"module\"]\n                        )\n                    # If no package is available at all, it's in the core, or\n                    # the latest is already good enough, don't specify version.\n                    # This is because conda doesn't support > in version\n                    # requirements.\n",
                      "markdown": "`                        pkg_version = metacpan_api_get_core_version(\n                            core_modules, dep_dict[\"module\"]\n                        )\n                    # If no package is available at all, it's in the core, or\n                    # the latest is already good enough, don't specify version.\n                    # This is because conda doesn't support > in version\n                    # requirements.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 9,
                  "endLine": 431,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    while packages:\n        package, module = packages.pop()\n        # If we're passed version in the same format as `PACKAGE=VERSION`\n        # update version\n        if \"=\" in package:\n            package, _, version = package.partition(\"=\")\n        else:\n",
                    "rendered": {
                      "text": "    while packages:\n        package, module = packages.pop()\n        # If we're passed version in the same format as `PACKAGE=VERSION`\n        # update version\n        if \"=\" in package:\n            package, _, version = package.partition(\"=\")\n        else:\n",
                      "markdown": "`    while packages:\n        package, module = packages.pop()\n        # If we're passed version in the same format as `PACKAGE=VERSION`\n        # update version\n        if \"=\" in package:\n            package, _, version = package.partition(\"=\")\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 7,
                  "endLine": 276,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# Probably uses a system cpan? TODO :: Fix this.\ndef package_exists(package_name):\n    try:\n        cmd = [\"cpan\", \"-D\", package_name]\n        if on_win:\n            cmd.insert(0, \"/c\")\n            cmd.insert(0, \"/d\")\n",
                    "rendered": {
                      "text": "# Probably uses a system cpan? TODO :: Fix this.\ndef package_exists(package_name):\n    try:\n        cmd = [\"cpan\", \"-D\", package_name]\n        if on_win:\n            cmd.insert(0, \"/c\")\n            cmd.insert(0, \"/d\")\n",
                      "markdown": "`# Probably uses a system cpan? TODO :: Fix this.\ndef package_exists(package_name):\n    try:\n        cmd = [\"cpan\", \"-D\", package_name]\n        if on_win:\n            cmd.insert(0, \"/c\")\n            cmd.insert(0, \"/d\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 20,
                  "endLine": 73,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  {import_comment}imports:{import_tests}\n\n  # You can also put a file called run_test.pl (or run_test.py) in the recipe\n  # that will be run at test time.\n\nabout:\n  home: {homeurl}\n",
                    "rendered": {
                      "text": "  {import_comment}imports:{import_tests}\n\n  # You can also put a file called run_test.pl (or run_test.py) in the recipe\n  # that will be run at test time.\n\nabout:\n  home: {homeurl}\n",
                      "markdown": "`  {import_comment}imports:{import_tests}\n\n  # You can also put a file called run_test.pl (or run_test.py) in the recipe\n  # that will be run at test time.\n\nabout:\n  home: {homeurl}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 1161,
                  "startColumn": 18,
                  "endLine": 1161,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n\ndef perl_to_conda(name):\n    \"\"\"Sanitizes a Perl package name for use as a conda package name.\"\"\"\n    return \"perl-\" + name.replace(\"::\", \"-\").lower()\n",
                    "rendered": {
                      "text": "\n\ndef perl_to_conda(name):\n    \"\"\"Sanitizes a Perl package name for use as a conda package name.\"\"\"\n    return \"perl-\" + name.replace(\"::\", \"-\").lower()\n",
                      "markdown": "`\n\ndef perl_to_conda(name):\n    \"\"\"Sanitizes a Perl package name for use as a conda package name.\"\"\"\n    return \"perl-\" + name.replace(\"::\", \"-\").lower()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 1098,
                  "startColumn": 34,
                  "endLine": 1098,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            }\n        else:\n            sys.exit(\n                (\"Error: Could not find any versions of package %s on \" + \"MetaCPAN.\")\n                % (orig_package)\n            )\n\n",
                    "rendered": {
                      "text": "            }\n        else:\n            sys.exit(\n                (\"Error: Could not find any versions of package %s on \" + \"MetaCPAN.\")\n                % (orig_package)\n            )\n\n",
                      "markdown": "`            }\n        else:\n            sys.exit(\n                (\"Error: Could not find any versions of package %s on \" + \"MetaCPAN.\")\n                % (orig_package)\n            )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 1076,
                  "startColumn": 24,
                  "endLine": 1076,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    orig_package = package\n    package = dist_for_module(cpan_url, cache_dir, core_modules, package)\n\n    # Get latest info to find author, which is necessary for retrieving a\n    # specific version\n    try:\n        rel_dict = get_cpan_api_url(f\"{cpan_url}/release/{package}\", colons=False)\n",
                    "rendered": {
                      "text": "    orig_package = package\n    package = dist_for_module(cpan_url, cache_dir, core_modules, package)\n\n    # Get latest info to find author, which is necessary for retrieving a\n    # specific version\n    try:\n        rel_dict = get_cpan_api_url(f\"{cpan_url}/release/{package}\", colons=False)\n",
                      "markdown": "`    orig_package = package\n    package = dist_for_module(cpan_url, cache_dir, core_modules, package)\n\n    # Get latest info to find author, which is necessary for retrieving a\n    # specific version\n    try:\n        rel_dict = get_cpan_api_url(f\"{cpan_url}/release/{package}\", colons=False)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 1052,
                  "startColumn": 33,
                  "endLine": 1052,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            return True\n        else:\n            sys.exit(\n                \"Error: Could not find module or distribution named\"\n                f\" {module} on MetaCPAN.\"\n            )\n\n",
                    "rendered": {
                      "text": "            return True\n        else:\n            sys.exit(\n                \"Error: Could not find module or distribution named\"\n                f\" {module} on MetaCPAN.\"\n            )\n\n",
                      "markdown": "`            return True\n        else:\n            sys.exit(\n                \"Error: Could not find module or distribution named\"\n                f\" {module} on MetaCPAN.\"\n            )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 1020,
                  "startColumn": 30,
                  "endLine": 1020,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        # If there was an error, report it\n    except CondaHTTPError as e:\n        sys.exit(\n            f\"Error: Could not find module or distribution named\"\n            f\" {module} on MetaCPAN. Error was: {e.message}\"\n        )\n    else:\n",
                    "rendered": {
                      "text": "        # If there was an error, report it\n    except CondaHTTPError as e:\n        sys.exit(\n            f\"Error: Could not find module or distribution named\"\n            f\" {module} on MetaCPAN. Error was: {e.message}\"\n        )\n    else:\n",
                      "markdown": "`        # If there was an error, report it\n    except CondaHTTPError as e:\n        sys.exit(\n            f\"Error: Could not find module or distribution named\"\n            f\" {module} on MetaCPAN. Error was: {e.message}\"\n        )\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 1004,
                  "startColumn": 52,
                  "endLine": 1004,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            download(dl_url_dict[\"download_url\"], dst)\n            with gzip.open(dst) as dist_json_file:\n                output = dist_json_file.read()\n            # (base) Rays-Mac-Pro:Volumes rdonnelly$ cpan -D Time::Zone\n            rel_dict = release_module_dict_direct(cpan_url, cache_dir, dist)\n\n    return rel_dict\n",
                    "rendered": {
                      "text": "            download(dl_url_dict[\"download_url\"], dst)\n            with gzip.open(dst) as dist_json_file:\n                output = dist_json_file.read()\n            # (base) Rays-Mac-Pro:Volumes rdonnelly$ cpan -D Time::Zone\n            rel_dict = release_module_dict_direct(cpan_url, cache_dir, dist)\n\n    return rel_dict\n",
                      "markdown": "`            download(dl_url_dict[\"download_url\"], dst)\n            with gzip.open(dst) as dist_json_file:\n                output = dist_json_file.read()\n            # (base) Rays-Mac-Pro:Volumes rdonnelly$ cpan -D Time::Zone\n            rel_dict = release_module_dict_direct(cpan_url, cache_dir, dist)\n\n    return rel_dict\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 987,
                  "startColumn": 13,
                  "endLine": 987,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        else:\n            # Difficult case.\n            print(f\"Not up to date: {module}\")\n            # cpan -D Time::Zone\n            # Time::Zone\n            # -------------------------------------------------------------------------\n            # \t(no description)\n",
                    "rendered": {
                      "text": "        else:\n            # Difficult case.\n            print(f\"Not up to date: {module}\")\n            # cpan -D Time::Zone\n            # Time::Zone\n            # -------------------------------------------------------------------------\n            # \t(no description)\n",
                      "markdown": "`        else:\n            # Difficult case.\n            print(f\"Not up to date: {module}\")\n            # cpan -D Time::Zone\n            # Time::Zone\n            # -------------------------------------------------------------------------\n            # \t(no description)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 934,
                  "startColumn": 34,
                  "endLine": 934,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    except CondaHTTPError:\n        rel_dict = None\n    if not rel_dict:\n        print(f\"WARNING :: Did not find rel_dict for module {module}\")\n    distribution = module.replace(\"::\", \"-\")\n    if not rel_dict or \"dependency\" not in rel_dict:\n        if rel_dict and \"distribution\" in rel_dict:\n",
                    "rendered": {
                      "text": "    except CondaHTTPError:\n        rel_dict = None\n    if not rel_dict:\n        print(f\"WARNING :: Did not find rel_dict for module {module}\")\n    distribution = module.replace(\"::\", \"-\")\n    if not rel_dict or \"dependency\" not in rel_dict:\n        if rel_dict and \"distribution\" in rel_dict:\n",
                      "markdown": "`    except CondaHTTPError:\n        rel_dict = None\n    if not rel_dict:\n        print(f\"WARNING :: Did not find rel_dict for module {module}\")\n    distribution = module.replace(\"::\", \"-\")\n    if not rel_dict or \"dependency\" not in rel_dict:\n        if rel_dict and \"distribution\" in rel_dict:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 876,
                  "startColumn": 9,
                  "endLine": 876,
                  "endColumn": 15,
                  "snippet": {
                    "text": "                    )\n        # seemingly new in conda 4.3: HTTPErrors arise when we ask for\n        # something that is a\n        # perl module, but not a package.\n        # See https://github.com/conda/conda-build/issues/1675\n        except (CondaError, CondaHTTPError):\n            continue\n",
                    "rendered": {
                      "text": "                    )\n        # seemingly new in conda 4.3: HTTPErrors arise when we ask for\n        # something that is a\n        # perl module, but not a package.\n        # See https://github.com/conda/conda-build/issues/1675\n        except (CondaError, CondaHTTPError):\n            continue\n",
                      "markdown": "`                    )\n        # seemingly new in conda 4.3: HTTPErrors arise when we ask for\n        # something that is a\n        # perl module, but not a package.\n        # See https://github.com/conda/conda-build/issues/1675\n        except (CondaError, CondaHTTPError):\n            continue\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 22,
                  "endLine": 791,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                )\n\n                dep_entry = perl_to_conda(orig_dist)\n                # Skip perl as a dependency, since it's already in list\n                if orig_dist.lower() == \"perl\":\n                    continue\n\n",
                    "rendered": {
                      "text": "                )\n\n                dep_entry = perl_to_conda(orig_dist)\n                # Skip perl as a dependency, since it's already in list\n                if orig_dist.lower() == \"perl\":\n                    continue\n\n",
                      "markdown": "`                )\n\n                dep_entry = perl_to_conda(orig_dist)\n                # Skip perl as a dependency, since it's already in list\n                if orig_dist.lower() == \"perl\":\n                    continue\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 785,
                  "startColumn": 48,
                  "endLine": 785,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                    print(\"debug common::sense version mismatch\")\n                print(\".\", end=\"\")\n                sys.stdout.flush()\n                # Format dependency string (with Perl trailing dist comment)\n                orig_dist = dist_for_module(\n                    meta_cpan_url, cache_dir, core_modules, dep_dict[\"module\"]\n                )\n",
                    "rendered": {
                      "text": "                    print(\"debug common::sense version mismatch\")\n                print(\".\", end=\"\")\n                sys.stdout.flush()\n                # Format dependency string (with Perl trailing dist comment)\n                orig_dist = dist_for_module(\n                    meta_cpan_url, cache_dir, core_modules, dep_dict[\"module\"]\n                )\n",
                      "markdown": "`                    print(\"debug common::sense version mismatch\")\n                print(\".\", end=\"\")\n                sys.stdout.flush()\n                # Format dependency string (with Perl trailing dist comment)\n                orig_dist = dist_for_module(\n                    meta_cpan_url, cache_dir, core_modules, dep_dict[\"module\"]\n                )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 62,
                  "endLine": 750,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        #         These (sometimes?) reference sub-components of modules\n        #         e.g. inc::MMPackageStash instead of inc which does not\n        #         get found on metacpan fastapi. We may need to chop the\n        #         suffix off an try again (and repeat until we find it).\n        \"x_Dist_Zilla\": None,\n        \"develop\": None,\n    }\n",
                    "rendered": {
                      "text": "        #         These (sometimes?) reference sub-components of modules\n        #         e.g. inc::MMPackageStash instead of inc which does not\n        #         get found on metacpan fastapi. We may need to chop the\n        #         suffix off an try again (and repeat until we find it).\n        \"x_Dist_Zilla\": None,\n        \"develop\": None,\n    }\n",
                      "markdown": "`        #         These (sometimes?) reference sub-components of modules\n        #         e.g. inc::MMPackageStash instead of inc which does not\n        #         get found on metacpan fastapi. We may need to chop the\n        #         suffix off an try again (and repeat until we find it).\n        \"x_Dist_Zilla\": None,\n        \"develop\": None,\n    }\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 722,
                  "startColumn": 46,
                  "endLine": 722,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    :type package: str\n    :param release_data: The metadata about the current release of the package.\n    :type release_data: dict\n    :param perl_version: The target version of Perl we're building this for.\n                         This only really matters for core modules.\n    :type perl_version: str\n    :param output_dir: The output directory to write recipes to\n",
                    "rendered": {
                      "text": "    :type package: str\n    :param release_data: The metadata about the current release of the package.\n    :type release_data: dict\n    :param perl_version: The target version of Perl we're building this for.\n                         This only really matters for core modules.\n    :type perl_version: str\n    :param output_dir: The output directory to write recipes to\n",
                      "markdown": "`    :type package: str\n    :param release_data: The metadata about the current release of the package.\n    :type release_data: dict\n    :param perl_version: The target version of Perl we're building this for.\n                         This only really matters for core modules.\n    :type perl_version: str\n    :param output_dir: The output directory to write recipes to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 718,
                  "startColumn": 19,
                  "endLine": 718,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    only be called for non-core modules/distributions, as dependencies are\n    ignored for core modules.\n\n    :param package: Perl distribution we're checking dependencies of.\n    :type package: str\n    :param release_data: The metadata about the current release of the package.\n    :type release_data: dict\n",
                    "rendered": {
                      "text": "    only be called for non-core modules/distributions, as dependencies are\n    ignored for core modules.\n\n    :param package: Perl distribution we're checking dependencies of.\n    :type package: str\n    :param release_data: The metadata about the current release of the package.\n    :type release_data: dict\n",
                      "markdown": "`    only be called for non-core modules/distributions, as dependencies are\n    ignored for core modules.\n\n    :param package: Perl distribution we're checking dependencies of.\n    :type package: str\n    :param release_data: The metadata about the current release of the package.\n    :type release_data: dict\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 31,
                  "endLine": 689,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    cpan.add_argument(\n        \"--write_core\",\n        action=\"store_true\",\n        help=\"Write recipes for perl core modules (default: %(default)s). \",\n    )\n\n\n",
                    "rendered": {
                      "text": "    cpan.add_argument(\n        \"--write_core\",\n        action=\"store_true\",\n        help=\"Write recipes for perl core modules (default: %(default)s). \",\n    )\n\n\n",
                      "markdown": "`    cpan.add_argument(\n        \"--write_core\",\n        action=\"store_true\",\n        help=\"Write recipes for perl core modules (default: %(default)s). \",\n    )\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 653,
                  "startColumn": 67,
                  "endLine": 653,
                  "endColumn": 73,
                  "snippet": {
                    "text": "    cpan = repos.add_parser(\n        \"cpan\",\n        help=\"\"\"\n    Create recipe skeleton for packages hosted on the Comprehensive Perl Archive\n    Network (CPAN) (cpan.org).\n        \"\"\",\n    )\n",
                    "rendered": {
                      "text": "    cpan = repos.add_parser(\n        \"cpan\",\n        help=\"\"\"\n    Create recipe skeleton for packages hosted on the Comprehensive Perl Archive\n    Network (CPAN) (cpan.org).\n        \"\"\",\n    )\n",
                      "markdown": "`    cpan = repos.add_parser(\n        \"cpan\",\n        help=\"\"\"\n    Create recipe skeleton for packages hosted on the Comprehensive Perl Archive\n    Network (CPAN) (cpan.org).\n        \"\"\",\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 3,
                  "endLine": 650,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n\ndef add_parser(repos):\n    cpan = repos.add_parser(\n        \"cpan\",\n        help=\"\"\"\n    Create recipe skeleton for packages hosted on the Comprehensive Perl Archive\n",
                    "rendered": {
                      "text": "\n\ndef add_parser(repos):\n    cpan = repos.add_parser(\n        \"cpan\",\n        help=\"\"\"\n    Create recipe skeleton for packages hosted on the Comprehensive Perl Archive\n",
                      "markdown": "`\n\ndef add_parser(repos):\n    cpan = repos.add_parser(\n        \"cpan\",\n        help=\"\"\"\n    Create recipe skeleton for packages hosted on the Comprehensive Perl Archive\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 13,
                  "endLine": 510,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        # Check if recipe directory already exists\n        dir_path = join(output_dir, packagename, release_data[\"version\"])\n\n        # Add Perl version to core module requirements, since these are empty\n        # packages, unless we're newer than what's in core\n        if metacpan_api_is_core_version(meta_cpan_url, package):\n            if not write_core:\n",
                    "rendered": {
                      "text": "        # Check if recipe directory already exists\n        dir_path = join(output_dir, packagename, release_data[\"version\"])\n\n        # Add Perl version to core module requirements, since these are empty\n        # packages, unless we're newer than what's in core\n        if metacpan_api_is_core_version(meta_cpan_url, package):\n            if not write_core:\n",
                      "markdown": "`        # Check if recipe directory already exists\n        dir_path = join(output_dir, packagename, release_data[\"version\"])\n\n        # Add Perl version to core module requirements, since these are empty\n        # packages, unless we're newer than what's in core\n        if metacpan_api_is_core_version(meta_cpan_url, package):\n            if not write_core:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 33,
                  "endLine": 500,
                  "snippet": {
                    "text": "            },\n        )\n\n        # Fetch all metadata from CPAN\n        if version is None:\n            release_data = latest_release_data\n        else:\n            release_data = get_release_info(\n",
                    "rendered": {
                      "text": "            },\n        )\n\n        # Fetch all metadata from CPAN\n        if version is None:\n            release_data = latest_release_data\n        else:\n            release_data = get_release_info(\n",
                      "markdown": "`            },\n        )\n\n        # Fetch all metadata from CPAN\n        if version is None:\n            release_data = latest_release_data\n        else:\n            release_data = get_release_info(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 46,
                  "endLine": 453,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        )\n        if package == \"perl\":\n            print(\n                f\"WARNING: {orig_package} is a Perl core module that is not developed \"\n                f\"outside of Perl, so we are skipping creating a recipe \"\n                f\"for it.\"\n            )\n",
                    "rendered": {
                      "text": "        )\n        if package == \"perl\":\n            print(\n                f\"WARNING: {orig_package} is a Perl core module that is not developed \"\n                f\"outside of Perl, so we are skipping creating a recipe \"\n                f\"for it.\"\n            )\n",
                      "markdown": "`        )\n        if package == \"perl\":\n            print(\n                f\"WARNING: {orig_package} is a Perl core module that is not developed \"\n                f\"outside of Perl, so we are skipping creating a recipe \"\n                f\"for it.\"\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 33,
                  "endLine": 410,
                  "snippet": {
                    "text": "    perl_version = config.variant.get(\"perl\", get_default_variant(config)[\"perl\"])\n    core_modules = get_core_modules_for_this_perl_version(perl_version, cache_dir)\n\n    # wildcards are not valid for perl\n    perl_version = perl_version.replace(\".*\", \"\")\n    package_dicts = {}\n    indent = \"\\n    - \"\n    indent_core = \"\\n    #- \"\n",
                    "rendered": {
                      "text": "    perl_version = config.variant.get(\"perl\", get_default_variant(config)[\"perl\"])\n    core_modules = get_core_modules_for_this_perl_version(perl_version, cache_dir)\n\n    # wildcards are not valid for perl\n    perl_version = perl_version.replace(\".*\", \"\")\n    package_dicts = {}\n    indent = \"\\n    - \"\n    indent_core = \"\\n    #- \"\n",
                      "markdown": "`    perl_version = config.variant.get(\"perl\", get_default_variant(config)[\"perl\"])\n    core_modules = get_core_modules_for_this_perl_version(perl_version, cache_dir)\n\n    # wildcards are not valid for perl\n    perl_version = perl_version.replace(\".*\", \"\")\n    package_dicts = {}\n    indent = \"\\n    - \"\n    indent_core = \"\\n    #- \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 35,
                  "endLine": 404,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    config = get_or_merge_config(config)\n    cache_dir = os.path.join(config.src_cache_root, \".conda-build\", \"pickled.cb\")\n\n    # TODO :: Make a temp env. with perl (which we need anyway) and use whatever version\n    #         got installed instead of this. Also allow the version to be specified.\n    perl_version = config.variant.get(\"perl\", get_default_variant(config)[\"perl\"])\n    core_modules = get_core_modules_for_this_perl_version(perl_version, cache_dir)\n",
                    "rendered": {
                      "text": "    config = get_or_merge_config(config)\n    cache_dir = os.path.join(config.src_cache_root, \".conda-build\", \"pickled.cb\")\n\n    # TODO :: Make a temp env. with perl (which we need anyway) and use whatever version\n    #         got installed instead of this. Also allow the version to be specified.\n    perl_version = config.variant.get(\"perl\", get_default_variant(config)[\"perl\"])\n    core_modules = get_core_modules_for_this_perl_version(perl_version, cache_dir)\n",
                      "markdown": "`    config = get_or_merge_config(config)\n    cache_dir = os.path.join(config.src_cache_root, \".conda-build\", \"pickled.cb\")\n\n    # TODO :: Make a temp env. with perl (which we need anyway) and use whatever version\n    #         got installed instead of this. Also allow the version to be specified.\n    perl_version = config.variant.get(\"perl\", get_default_variant(config)[\"perl\"])\n    core_modules = get_core_modules_for_this_perl_version(perl_version, cache_dir)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 64,
                  "endLine": 399,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    write_core: bool = False,\n) -> None:\n    \"\"\"\n    Loops over packages, outputting conda recipes converted from CPAN metata.\n    \"\"\"\n    config = get_or_merge_config(config)\n    cache_dir = os.path.join(config.src_cache_root, \".conda-build\", \"pickled.cb\")\n",
                    "rendered": {
                      "text": "    write_core: bool = False,\n) -> None:\n    \"\"\"\n    Loops over packages, outputting conda recipes converted from CPAN metata.\n    \"\"\"\n    config = get_or_merge_config(config)\n    cache_dir = os.path.join(config.src_cache_root, \".conda-build\", \"pickled.cb\")\n",
                      "markdown": "`    write_core: bool = False,\n) -> None:\n    \"\"\"\n    Loops over packages, outputting conda recipes converted from CPAN metata.\n    \"\"\"\n    config = get_or_merge_config(config)\n    cache_dir = os.path.join(config.src_cache_root, \".conda-build\", \"pickled.cb\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 30,
                  "endLine": 354,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                f\"{join(tmpdir, *subdirs[1:])}\",\n                \"-e\",\n                \"use Module::CoreList; \"\n                \"my @modules = grep {Module::CoreList::is_core($_)} Module::CoreList->find_modules(qr/.*/); \"\n                'print join \"\\n\", @modules;',\n            ]\n            try:\n",
                    "rendered": {
                      "text": "                f\"{join(tmpdir, *subdirs[1:])}\",\n                \"-e\",\n                \"use Module::CoreList; \"\n                \"my @modules = grep {Module::CoreList::is_core($_)} Module::CoreList->find_modules(qr/.*/); \"\n                'print join \"\\n\", @modules;',\n            ]\n            try:\n",
                      "markdown": "`                f\"{join(tmpdir, *subdirs[1:])}\",\n                \"-e\",\n                \"use Module::CoreList; \"\n                \"my @modules = grep {Module::CoreList::is_core($_)} Module::CoreList->find_modules(qr/.*/); \"\n                'print join \"\\n\", @modules;',\n            ]\n            try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 17,
                  "endLine": 307,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n\ndef load_or_pickle(filename_prefix, base_folder, data_partial, key):\n    # It might be nice to hash the entire code tree of data_partial\n    # along with all the args to it via hashlib instead but that's\n    # difficult.\n    pickled = get_pickle_file_path(\n",
                    "rendered": {
                      "text": "\n\ndef load_or_pickle(filename_prefix, base_folder, data_partial, key):\n    # It might be nice to hash the entire code tree of data_partial\n    # along with all the args to it via hashlib instead but that's\n    # difficult.\n    pickled = get_pickle_file_path(\n",
                      "markdown": "`\n\ndef load_or_pickle(filename_prefix, base_folder, data_partial, key):\n    # It might be nice to hash the entire code tree of data_partial\n    # along with all the args to it via hashlib instead but that's\n    # difficult.\n    pickled = get_pickle_file_path(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 19,
                  "endLine": 136,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    IF %ERRORLEVEL% NEQ 0 exit /B 1\n    make install\n) ELSE (\n    ECHO 'Unable to find Build.PL or Makefile.PL. You need to modify bld.bat.'\n    exit 1\n)\n\n",
                    "rendered": {
                      "text": "    IF %ERRORLEVEL% NEQ 0 exit /B 1\n    make install\n) ELSE (\n    ECHO 'Unable to find Build.PL or Makefile.PL. You need to modify bld.bat.'\n    exit 1\n)\n\n",
                      "markdown": "`    IF %ERRORLEVEL% NEQ 0 exit /B 1\n    make install\n) ELSE (\n    ECHO 'Unable to find Build.PL or Makefile.PL. You need to modify bld.bat.'\n    exit 1\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 3,
                  "endLine": 128,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    IF %ERRORLEVEL% NEQ 0 exit /B 1\n) ELSE IF exist Makefile.PL (\n    :: Make sure this goes in site\n    perl Makefile.PL INSTALLDIRS=site\n    IF %ERRORLEVEL% NEQ 0 exit /B 1\n    make\n    IF %ERRORLEVEL% NEQ 0 exit /B 1\n",
                    "rendered": {
                      "text": "    IF %ERRORLEVEL% NEQ 0 exit /B 1\n) ELSE IF exist Makefile.PL (\n    :: Make sure this goes in site\n    perl Makefile.PL INSTALLDIRS=site\n    IF %ERRORLEVEL% NEQ 0 exit /B 1\n    make\n    IF %ERRORLEVEL% NEQ 0 exit /B 1\n",
                      "markdown": "`    IF %ERRORLEVEL% NEQ 0 exit /B 1\n) ELSE IF exist Makefile.PL (\n    :: Make sure this goes in site\n    perl Makefile.PL INSTALLDIRS=site\n    IF %ERRORLEVEL% NEQ 0 exit /B 1\n    make\n    IF %ERRORLEVEL% NEQ 0 exit /B 1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 3,
                  "endLine": 118,
                  "endColumn": 9,
                  "snippet": {
                    "text": "CPAN_BLD_BAT = \"\"\"\\\n:: If it has Build.PL use that, otherwise use Makefile.PL\nIF exist Build.PL (\n    perl Build.PL\n    IF %ERRORLEVEL% NEQ 0 exit /B 1\n    Build\n    IF %ERRORLEVEL% NEQ 0 exit /B 1\n",
                    "rendered": {
                      "text": "CPAN_BLD_BAT = \"\"\"\\\n:: If it has Build.PL use that, otherwise use Makefile.PL\nIF exist Build.PL (\n    perl Build.PL\n    IF %ERRORLEVEL% NEQ 0 exit /B 1\n    Build\n    IF %ERRORLEVEL% NEQ 0 exit /B 1\n",
                      "markdown": "`CPAN_BLD_BAT = \"\"\"\\\n:: If it has Build.PL use that, otherwise use Makefile.PL\nIF exist Build.PL (\n    perl Build.PL\n    IF %ERRORLEVEL% NEQ 0 exit /B 1\n    Build\n    IF %ERRORLEVEL% NEQ 0 exit /B 1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 19,
                  "endLine": 104,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    make test\n    make install\nelse\n    echo 'Unable to find Build.PL or Makefile.PL. You need to modify build.sh.'\n    exit 1\nfi\n\n",
                    "rendered": {
                      "text": "    make test\n    make install\nelse\n    echo 'Unable to find Build.PL or Makefile.PL. You need to modify build.sh.'\n    exit 1\nfi\n\n",
                      "markdown": "`    make test\n    make install\nelse\n    echo 'Unable to find Build.PL or Makefile.PL. You need to modify build.sh.'\n    exit 1\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 3,
                  "endLine": 99,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    perl ./Build install --installdirs site\nelif [[ -f Makefile.PL ]]; then\n    # Make sure this goes in site\n    perl Makefile.PL INSTALLDIRS=site\n    make\n    make test\n    make install\n",
                    "rendered": {
                      "text": "    perl ./Build install --installdirs site\nelif [[ -f Makefile.PL ]]; then\n    # Make sure this goes in site\n    perl Makefile.PL INSTALLDIRS=site\n    make\n    make test\n    make install\n",
                      "markdown": "`    perl ./Build install --installdirs site\nelif [[ -f Makefile.PL ]]; then\n    # Make sure this goes in site\n    perl Makefile.PL INSTALLDIRS=site\n    make\n    make test\n    make install\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 3,
                  "endLine": 96,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    perl ./Build\n    perl ./Build test\n    # Make sure this goes in site\n    perl ./Build install --installdirs site\nelif [[ -f Makefile.PL ]]; then\n    # Make sure this goes in site\n    perl Makefile.PL INSTALLDIRS=site\n",
                    "rendered": {
                      "text": "    perl ./Build\n    perl ./Build test\n    # Make sure this goes in site\n    perl ./Build install --installdirs site\nelif [[ -f Makefile.PL ]]; then\n    # Make sure this goes in site\n    perl Makefile.PL INSTALLDIRS=site\n",
                      "markdown": "`    perl ./Build\n    perl ./Build test\n    # Make sure this goes in site\n    perl ./Build install --installdirs site\nelif [[ -f Makefile.PL ]]; then\n    # Make sure this goes in site\n    perl Makefile.PL INSTALLDIRS=site\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 3,
                  "endLine": 94,
                  "endColumn": 9,
                  "snippet": {
                    "text": "if [[ -f Build.PL ]]; then\n    perl Build.PL\n    perl ./Build\n    perl ./Build test\n    # Make sure this goes in site\n    perl ./Build install --installdirs site\nelif [[ -f Makefile.PL ]]; then\n",
                    "rendered": {
                      "text": "if [[ -f Build.PL ]]; then\n    perl Build.PL\n    perl ./Build\n    perl ./Build test\n    # Make sure this goes in site\n    perl ./Build install --installdirs site\nelif [[ -f Makefile.PL ]]; then\n",
                      "markdown": "`if [[ -f Build.PL ]]; then\n    perl Build.PL\n    perl ./Build\n    perl ./Build test\n    # Make sure this goes in site\n    perl ./Build install --installdirs site\nelif [[ -f Makefile.PL ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 3,
                  "endLine": 93,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# If it has Build.PL use that, otherwise use Makefile.PL\nif [[ -f Build.PL ]]; then\n    perl Build.PL\n    perl ./Build\n    perl ./Build test\n    # Make sure this goes in site\n    perl ./Build install --installdirs site\n",
                    "rendered": {
                      "text": "# If it has Build.PL use that, otherwise use Makefile.PL\nif [[ -f Build.PL ]]; then\n    perl Build.PL\n    perl ./Build\n    perl ./Build test\n    # Make sure this goes in site\n    perl ./Build install --installdirs site\n",
                      "markdown": "`# If it has Build.PL use that, otherwise use Makefile.PL\nif [[ -f Build.PL ]]; then\n    perl Build.PL\n    perl ./Build\n    perl ./Build test\n    # Make sure this goes in site\n    perl ./Build install --installdirs site\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 3,
                  "endLine": 92,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n# If it has Build.PL use that, otherwise use Makefile.PL\nif [[ -f Build.PL ]]; then\n    perl Build.PL\n    perl ./Build\n    perl ./Build test\n    # Make sure this goes in site\n",
                    "rendered": {
                      "text": "\n# If it has Build.PL use that, otherwise use Makefile.PL\nif [[ -f Build.PL ]]; then\n    perl Build.PL\n    perl ./Build\n    perl ./Build test\n    # Make sure this goes in site\n",
                      "markdown": "`\n# If it has Build.PL use that, otherwise use Makefile.PL\nif [[ -f Build.PL ]]; then\n    perl Build.PL\n    perl ./Build\n    perl ./Build test\n    # Make sure this goes in site\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "endLine": 69,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    - perl{run_depends}\n\n{import_comment}test:\n  # Perl 'use' tests\n  {import_comment}imports:{import_tests}\n\n  # You can also put a file called run_test.pl (or run_test.py) in the recipe\n",
                    "rendered": {
                      "text": "    - perl{run_depends}\n\n{import_comment}test:\n  # Perl 'use' tests\n  {import_comment}imports:{import_tests}\n\n  # You can also put a file called run_test.pl (or run_test.py) in the recipe\n",
                      "markdown": "`    - perl{run_depends}\n\n{import_comment}test:\n  # Perl 'use' tests\n  {import_comment}imports:{import_tests}\n\n  # You can also put a file called run_test.pl (or run_test.py) in the recipe\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/cpan.py"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 20,
                  "endLine": 4,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# Copyright (C) 2014 Anaconda, Inc\n# SPDX-License-Identifier: BSD-3-Clause\n\"\"\"\nTools for converting CPAN packages to conda recipes.\n\"\"\"\n\nfrom __future__ import annotations\n",
                    "rendered": {
                      "text": "# Copyright (C) 2014 Anaconda, Inc\n# SPDX-License-Identifier: BSD-3-Clause\n\"\"\"\nTools for converting CPAN packages to conda recipes.\n\"\"\"\n\nfrom __future__ import annotations\n",
                      "markdown": "`# Copyright (C) 2014 Anaconda, Inc\n# SPDX-License-Identifier: BSD-3-Clause\n\"\"\"\nTools for converting CPAN packages to conda recipes.\n\"\"\"\n\nfrom __future__ import annotations\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build-24.9.0.dist-info/licenses/AUTHORS.md"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 31,
                  "endLine": 1,
                  "endColumn": 35,
                  "snippet": {
                    "text": "All of the people who have made at least one contribution to conda-build.\nAuthors are sorted alphabetically.\n\n* Aaron Meurer\n",
                    "rendered": {
                      "text": "All of the people who have made at least one contribution to conda-build.\nAuthors are sorted alphabetically.\n\n* Aaron Meurer\n",
                      "markdown": "`All of the people who have made at least one contribution to conda-build.\nAuthors are sorted alphabetically.\n\n* Aaron Meurer\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build-24.9.0.dist-info/licenses/AUTHORS.md"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 1,
                  "endLine": 69,
                  "endColumn": 5,
                  "snippet": {
                    "text": "* Diogo de Campos\n* Dougal J. Sutherland\n* Duncan Macleod\n* Ed Campbell\n* Eli Rykoff\n* Elliot Hughes\n* Eric Dill\n",
                    "rendered": {
                      "text": "* Diogo de Campos\n* Dougal J. Sutherland\n* Duncan Macleod\n* Ed Campbell\n* Eli Rykoff\n* Elliot Hughes\n* Eric Dill\n",
                      "markdown": "`* Diogo de Campos\n* Dougal J. Sutherland\n* Duncan Macleod\n* Ed Campbell\n* Eli Rykoff\n* Elliot Hughes\n* Eric Dill\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/noarch_python.py"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 5,
                  "endLine": 142,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n    d = populate_files(m, files, prefix)\n\n    # Find our way to this directory\n    this_dir = dirname(__file__)\n\n    # copy in windows exe shims if there are any python-scripts\n",
                    "rendered": {
                      "text": "\n    d = populate_files(m, files, prefix)\n\n    # Find our way to this directory\n    this_dir = dirname(__file__)\n\n    # copy in windows exe shims if there are any python-scripts\n",
                      "markdown": "`\n    d = populate_files(m, files, prefix)\n\n    # Find our way to this directory\n    this_dir = dirname(__file__)\n\n    # copy in windows exe shims if there are any python-scripts\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/noarch_python.py"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 39,
                  "endLine": 131,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    \"\"\"\n        )\n\n    # Create windows prelink script (be nice and use Windows newlines)\n    with open(join(scripts_dir, f\".{name}-pre-link.bat\"), \"wb\") as fo:\n        fo.write(\n            \"\"\"\\\n",
                    "rendered": {
                      "text": "    \"\"\"\n        )\n\n    # Create windows prelink script (be nice and use Windows newlines)\n    with open(join(scripts_dir, f\".{name}-pre-link.bat\"), \"wb\") as fo:\n        fo.write(\n            \"\"\"\\\n",
                      "markdown": "`    \"\"\"\n        )\n\n    # Create windows prelink script (be nice and use Windows newlines)\n    with open(join(scripts_dir, f\".{name}-pre-link.bat\"), \"wb\") as fo:\n        fo.write(\n            \"\"\"\\\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/noarch_python.py"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 28,
                  "endLine": 131,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    \"\"\"\n        )\n\n    # Create windows prelink script (be nice and use Windows newlines)\n    with open(join(scripts_dir, f\".{name}-pre-link.bat\"), \"wb\") as fo:\n        fo.write(\n            \"\"\"\\\n",
                    "rendered": {
                      "text": "    \"\"\"\n        )\n\n    # Create windows prelink script (be nice and use Windows newlines)\n    with open(join(scripts_dir, f\".{name}-pre-link.bat\"), \"wb\") as fo:\n        fo.write(\n            \"\"\"\\\n",
                      "markdown": "`    \"\"\"\n        )\n\n    # Create windows prelink script (be nice and use Windows newlines)\n    with open(join(scripts_dir, f\".{name}-pre-link.bat\"), \"wb\") as fo:\n        fo.write(\n            \"\"\"\\\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/noarch_python.py"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 25,
                  "endLine": 122,
                  "snippet": {
                    "text": "\n    name = m.name()\n\n    # Create *nix prelink script\n    # Note: it's important to use LF newlines or it wont work if we build on Win\n    with open(join(bin_dir, f\".{name}-pre-link.sh\"), \"wb\") as fo:\n        fo.write(\n            b\"\"\"\\\n",
                    "rendered": {
                      "text": "\n    name = m.name()\n\n    # Create *nix prelink script\n    # Note: it's important to use LF newlines or it wont work if we build on Win\n    with open(join(bin_dir, f\".{name}-pre-link.sh\"), \"wb\") as fo:\n        fo.write(\n            b\"\"\"\\\n",
                      "markdown": "`\n    name = m.name()\n\n    # Create *nix prelink script\n    # Note: it's important to use LF newlines or it wont work if we build on Win\n    with open(join(bin_dir, f\".{name}-pre-link.sh\"), \"wb\") as fo:\n        fo.write(\n            b\"\"\"\\\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/create_test.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 53,
                  "endLine": 112,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if out_test_script.endswith(ext):\n                    name = out_test_script\n                    break\n",
                    "rendered": {
                      "text": "        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if out_test_script.endswith(ext):\n                    name = out_test_script\n                    break\n",
                      "markdown": "`        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if out_test_script.endswith(ext):\n                    name = out_test_script\n                    break\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/create_test.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 37,
                  "endLine": 112,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if out_test_script.endswith(ext):\n                    name = out_test_script\n                    break\n",
                    "rendered": {
                      "text": "        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if out_test_script.endswith(ext):\n                    name = out_test_script\n                    break\n",
                      "markdown": "`        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if out_test_script.endswith(ext):\n                    name = out_test_script\n                    break\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/create_test.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 30,
                  "endLine": 111,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        # the way this works is that each output needs to explicitly define a test script to run\n        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if out_test_script.endswith(ext):\n                    name = out_test_script\n",
                    "rendered": {
                      "text": "        # the way this works is that each output needs to explicitly define a test script to run\n        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if out_test_script.endswith(ext):\n                    name = out_test_script\n",
                      "markdown": "`        # the way this works is that each output needs to explicitly define a test script to run\n        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if out_test_script.endswith(ext):\n                    name = out_test_script\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/create_test.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 53,
                  "endLine": 56,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        src_name = \"no-file\"\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if os.path.splitext(out_test_script)[1].lower() == ext:\n                    src_name = out_test_script\n                    break\n",
                    "rendered": {
                      "text": "        src_name = \"no-file\"\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if os.path.splitext(out_test_script)[1].lower() == ext:\n                    src_name = out_test_script\n                    break\n",
                      "markdown": "`        src_name = \"no-file\"\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if os.path.splitext(out_test_script)[1].lower() == ext:\n                    src_name = out_test_script\n                    break\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/create_test.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 37,
                  "endLine": 56,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        src_name = \"no-file\"\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if os.path.splitext(out_test_script)[1].lower() == ext:\n                    src_name = out_test_script\n                    break\n",
                    "rendered": {
                      "text": "        src_name = \"no-file\"\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if os.path.splitext(out_test_script)[1].lower() == ext:\n                    src_name = out_test_script\n                    break\n",
                      "markdown": "`        src_name = \"no-file\"\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if os.path.splitext(out_test_script)[1].lower() == ext:\n                    src_name = out_test_script\n                    break\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/create_test.py"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 30,
                  "endLine": 55,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    if m.is_output:\n        src_name = \"no-file\"\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if os.path.splitext(out_test_script)[1].lower() == ext:\n                    src_name = out_test_script\n",
                    "rendered": {
                      "text": "    if m.is_output:\n        src_name = \"no-file\"\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if os.path.splitext(out_test_script)[1].lower() == ext:\n                    src_name = out_test_script\n",
                      "markdown": "`    if m.is_output:\n        src_name = \"no-file\"\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n                if os.path.splitext(out_test_script)[1].lower() == ext:\n                    src_name = out_test_script\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/create_test.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 76,
                  "endLine": 109,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    if m.is_output:\n        name = \"\"\n        # the way this works is that each output needs to explicitly define a test script to run\n        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n",
                    "rendered": {
                      "text": "    if m.is_output:\n        name = \"\"\n        # the way this works is that each output needs to explicitly define a test script to run\n        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n",
                      "markdown": "`    if m.is_output:\n        name = \"\"\n        # the way this works is that each output needs to explicitly define a test script to run\n        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n                out_test_script = out.get(\"test\", {}).get(\"script\", \"no-file\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/create_test.py"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 19,
                  "endLine": 85,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                if not status:\n                    f.write(\"set -ex\\n\\n\")\n                f.write(\"\\n\\n\")\n                for cmd in commands:\n                    f.write(cmd)\n                    f.write(\"\\n\")\n                    if status:\n",
                    "rendered": {
                      "text": "                if not status:\n                    f.write(\"set -ex\\n\\n\")\n                f.write(\"\\n\\n\")\n                for cmd in commands:\n                    f.write(cmd)\n                    f.write(\"\\n\")\n                    if status:\n",
                      "markdown": "`                if not status:\n                    f.write(\"set -ex\\n\\n\")\n                f.write(\"\\n\\n\")\n                for cmd in commands:\n                    f.write(cmd)\n                    f.write(\"\\n\")\n                    if status:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/create_test.py"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 72,
                  "endLine": 47,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    win_status: bool,\n) -> tuple[os.PathLike, os.PathLike]:\n    # the way this works is that each output needs to explicitly define a test script to run.\n    #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n\n    ext = \".bat\" if win_status else \".sh\"\n    dst_name = \"run_test\" + ext\n",
                    "rendered": {
                      "text": "    win_status: bool,\n) -> tuple[os.PathLike, os.PathLike]:\n    # the way this works is that each output needs to explicitly define a test script to run.\n    #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n\n    ext = \".bat\" if win_status else \".sh\"\n    dst_name = \"run_test\" + ext\n",
                      "markdown": "`    win_status: bool,\n) -> tuple[os.PathLike, os.PathLike]:\n    # the way this works is that each output needs to explicitly define a test script to run.\n    #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n\n    ext = \".bat\" if win_status else \".sh\"\n    dst_name = \"run_test\" + ext\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/create_test.py"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 82,
                  "endLine": 108,
                  "endColumn": 90,
                  "snippet": {
                    "text": "    name = \"run_test\" + ext\n    if m.is_output:\n        name = \"\"\n        # the way this works is that each output needs to explicitly define a test script to run\n        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n",
                    "rendered": {
                      "text": "    name = \"run_test\" + ext\n    if m.is_output:\n        name = \"\"\n        # the way this works is that each output needs to explicitly define a test script to run\n        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n",
                      "markdown": "`    name = \"run_test\" + ext\n    if m.is_output:\n        name = \"\"\n        # the way this works is that each output needs to explicitly define a test script to run\n        #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n        for out in m.get_section(\"outputs\"):\n            if m.name() == out.get(\"name\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/create_test.py"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 78,
                  "endLine": 46,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    m: MetaData,\n    win_status: bool,\n) -> tuple[os.PathLike, os.PathLike]:\n    # the way this works is that each output needs to explicitly define a test script to run.\n    #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n\n    ext = \".bat\" if win_status else \".sh\"\n",
                    "rendered": {
                      "text": "    m: MetaData,\n    win_status: bool,\n) -> tuple[os.PathLike, os.PathLike]:\n    # the way this works is that each output needs to explicitly define a test script to run.\n    #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n\n    ext = \".bat\" if win_status else \".sh\"\n",
                      "markdown": "`    m: MetaData,\n    win_status: bool,\n) -> tuple[os.PathLike, os.PathLike]:\n    # the way this works is that each output needs to explicitly define a test script to run.\n    #   They do not automatically pick up run_test.*, but can be pointed at that explicitly.\n\n    ext = \".bat\" if win_status else \".sh\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 14,
                  "endLine": 200,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n    if target_platform in other_platforms:\n        source_architecture = architecture\n    elif index.get(\"arch\") == \"x86_64\":\n        source_architecture = \"64\"\n    else:\n        source_architecture = \"32\"\n",
                    "rendered": {
                      "text": "\n    if target_platform in other_platforms:\n        source_architecture = architecture\n    elif index.get(\"arch\") == \"x86_64\":\n        source_architecture = \"64\"\n    else:\n        source_architecture = \"32\"\n",
                      "markdown": "`\n    if target_platform in other_platforms:\n        source_architecture = architecture\n    elif index.get(\"arch\") == \"x86_64\":\n        source_architecture = \"64\"\n    else:\n        source_architecture = \"32\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 28,
                  "endLine": 73,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    elif index.get(\"arch\") == \"x86\":\n        architecture = \"32\"\n    else:\n        architecture = index.get(\"arch\")\n\n    if platform.startswith(\"linux\") or platform.startswith(\"osx\"):\n        return (\"unix\", platform, architecture)\n",
                    "rendered": {
                      "text": "    elif index.get(\"arch\") == \"x86\":\n        architecture = \"32\"\n    else:\n        architecture = index.get(\"arch\")\n\n    if platform.startswith(\"linux\") or platform.startswith(\"osx\"):\n        return (\"unix\", platform, architecture)\n",
                      "markdown": "`    elif index.get(\"arch\") == \"x86\":\n        architecture = \"32\"\n    else:\n        architecture = index.get(\"arch\")\n\n    if platform.startswith(\"linux\") or platform.startswith(\"osx\"):\n        return (\"unix\", platform, architecture)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 14,
                  "endLine": 70,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n    if index.get(\"arch\") == \"x86_64\":\n        architecture = \"64\"\n    elif index.get(\"arch\") == \"x86\":\n        architecture = \"32\"\n    else:\n        architecture = index.get(\"arch\")\n",
                    "rendered": {
                      "text": "\n    if index.get(\"arch\") == \"x86_64\":\n        architecture = \"64\"\n    elif index.get(\"arch\") == \"x86\":\n        architecture = \"32\"\n    else:\n        architecture = index.get(\"arch\")\n",
                      "markdown": "`\n    if index.get(\"arch\") == \"x86_64\":\n        architecture = \"64\"\n    elif index.get(\"arch\") == \"x86\":\n        architecture = \"32\"\n    else:\n        architecture = index.get(\"arch\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 12,
                  "endLine": 68,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n    platform = index[\"platform\"]\n\n    if index.get(\"arch\") == \"x86_64\":\n        architecture = \"64\"\n    elif index.get(\"arch\") == \"x86\":\n        architecture = \"32\"\n",
                    "rendered": {
                      "text": "\n    platform = index[\"platform\"]\n\n    if index.get(\"arch\") == \"x86_64\":\n        architecture = \"64\"\n    elif index.get(\"arch\") == \"x86\":\n        architecture = \"32\"\n",
                      "markdown": "`\n    platform = index[\"platform\"]\n\n    if index.get(\"arch\") == \"x86_64\":\n        architecture = \"64\"\n    elif index.get(\"arch\") == \"x86\":\n        architecture = \"32\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 52,
                  "endLine": 361,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Positional arguments:\n    temp_dir (str) -- the file path to the temporary directory containing the source\n        package's extracted contents\n    executable (str) -- the executable whose size to update including its file extension\n\n    Returns:\n    byte size (int) of the executable file\n",
                    "rendered": {
                      "text": "    Positional arguments:\n    temp_dir (str) -- the file path to the temporary directory containing the source\n        package's extracted contents\n    executable (str) -- the executable whose size to update including its file extension\n\n    Returns:\n    byte size (int) of the executable file\n",
                      "markdown": "`    Positional arguments:\n    temp_dir (str) -- the file path to the temporary directory containing the source\n        package's extracted contents\n    executable (str) -- the executable whose size to update including its file extension\n\n    Returns:\n    byte size (int) of the executable file\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 34,
                  "endLine": 347,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    \"\"\"Update the sha of executable scripts.\n\n    When moving from windows to linux, a shebang line is removed/added from\n    script files which requires to update the sha.\n\n    \"\"\"\n    with open(os.path.join(package_directory, executable_path), \"rb\") as script_file:\n",
                    "rendered": {
                      "text": "    \"\"\"Update the sha of executable scripts.\n\n    When moving from windows to linux, a shebang line is removed/added from\n    script files which requires to update the sha.\n\n    \"\"\"\n    with open(os.path.join(package_directory, executable_path), \"rb\") as script_file:\n",
                      "markdown": "`    \"\"\"Update the sha of executable scripts.\n\n    When moving from windows to linux, a shebang line is removed/added from\n    script files which requires to update the sha.\n\n    \"\"\"\n    with open(os.path.join(package_directory, executable_path), \"rb\") as script_file:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 799,
                  "startColumn": 70,
                  "endLine": 799,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    show_imports (bool) -- show all C extensions found in the source package\n    platforms list[str] -- the platforms to convert to: 'win-64', 'win-32', 'linux-64',\n        'linux-32', 'osx-64', or 'all'\n",
                    "rendered": {
                      "text": "\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    show_imports (bool) -- show all C extensions found in the source package\n    platforms list[str] -- the platforms to convert to: 'win-64', 'win-32', 'linux-64',\n        'linux-32', 'osx-64', or 'all'\n",
                      "markdown": "`\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    show_imports (bool) -- show all C extensions found in the source package\n    platforms list[str] -- the platforms to convert to: 'win-64', 'win-32', 'linux-64',\n        'linux-32', 'osx-64', or 'all'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 60,
                  "endLine": 798,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    \"\"\"Convert a conda package between different platforms and architectures.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    show_imports (bool) -- show all C extensions found in the source package\n    platforms list[str] -- the platforms to convert to: 'win-64', 'win-32', 'linux-64',\n",
                    "rendered": {
                      "text": "    \"\"\"Convert a conda package between different platforms and architectures.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    show_imports (bool) -- show all C extensions found in the source package\n    platforms list[str] -- the platforms to convert to: 'win-64', 'win-32', 'linux-64',\n",
                      "markdown": "`    \"\"\"Convert a conda package between different platforms and architectures.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    show_imports (bool) -- show all C extensions found in the source package\n    platforms list[str] -- the platforms to convert to: 'win-64', 'win-32', 'linux-64',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 762,
                  "startColumn": 15,
                  "endLine": 762,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            update_lib_contents(directory, temp_dir, \"unix\", file_path)\n\n        if os.path.isdir(directory) and \"Scripts\" in directory:\n            for script in os.listdir(directory):\n                if not is_binary_file(directory, script) and not script.startswith(\".\"):\n                    rename_executable(directory, script, \"unix\")\n                    remove_executable(directory, script)\n",
                    "rendered": {
                      "text": "            update_lib_contents(directory, temp_dir, \"unix\", file_path)\n\n        if os.path.isdir(directory) and \"Scripts\" in directory:\n            for script in os.listdir(directory):\n                if not is_binary_file(directory, script) and not script.startswith(\".\"):\n                    rename_executable(directory, script, \"unix\")\n                    remove_executable(directory, script)\n",
                      "markdown": "`            update_lib_contents(directory, temp_dir, \"unix\", file_path)\n\n        if os.path.isdir(directory) and \"Scripts\" in directory:\n            for script in os.listdir(directory):\n                if not is_binary_file(directory, script) and not script.startswith(\".\"):\n                    rename_executable(directory, script, \"unix\")\n                    remove_executable(directory, script)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 746,
                  "startColumn": 70,
                  "endLine": 746,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'linux-64', 'linux-32', or 'osx-64'\n    dependencies (List[str]) -- the dependencies passed from the command line\n    verbose (bool) -- show output of items that are updated\n",
                    "rendered": {
                      "text": "\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'linux-64', 'linux-32', or 'osx-64'\n    dependencies (List[str]) -- the dependencies passed from the command line\n    verbose (bool) -- show output of items that are updated\n",
                      "markdown": "`\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'linux-64', 'linux-32', or 'osx-64'\n    dependencies (List[str]) -- the dependencies passed from the command line\n    verbose (bool) -- show output of items that are updated\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 745,
                  "startColumn": 60,
                  "endLine": 745,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    \"\"\"Convert a package from windows to a unix platform.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'linux-64', 'linux-32', or 'osx-64'\n    dependencies (List[str]) -- the dependencies passed from the command line\n",
                    "rendered": {
                      "text": "    \"\"\"Convert a package from windows to a unix platform.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'linux-64', 'linux-32', or 'osx-64'\n    dependencies (List[str]) -- the dependencies passed from the command line\n",
                      "markdown": "`    \"\"\"Convert a package from windows to a unix platform.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'linux-64', 'linux-32', or 'osx-64'\n    dependencies (List[str]) -- the dependencies passed from the command line\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 15,
                  "endLine": 711,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            update_lib_contents(directory, temp_dir, \"win\", file_path)\n\n        if os.path.isdir(directory) and entry.strip(os.sep) == \"bin\":\n            for script in os.listdir(directory):\n                if (\n                    os.path.isfile(os.path.join(directory, script))\n                    and not is_binary_file(directory, script)\n",
                    "rendered": {
                      "text": "            update_lib_contents(directory, temp_dir, \"win\", file_path)\n\n        if os.path.isdir(directory) and entry.strip(os.sep) == \"bin\":\n            for script in os.listdir(directory):\n                if (\n                    os.path.isfile(os.path.join(directory, script))\n                    and not is_binary_file(directory, script)\n",
                      "markdown": "`            update_lib_contents(directory, temp_dir, \"win\", file_path)\n\n        if os.path.isdir(directory) and entry.strip(os.sep) == \"bin\":\n            for script in os.listdir(directory):\n                if (\n                    os.path.isfile(os.path.join(directory, script))\n                    and not is_binary_file(directory, script)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 70,
                  "endLine": 696,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'win-64' or 'win-32'\n    dependencies (List[str]) -- the dependencies passed from the command line\n    verbose (bool) -- show output of items that are updated\n",
                    "rendered": {
                      "text": "\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'win-64' or 'win-32'\n    dependencies (List[str]) -- the dependencies passed from the command line\n    verbose (bool) -- show output of items that are updated\n",
                      "markdown": "`\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'win-64' or 'win-32'\n    dependencies (List[str]) -- the dependencies passed from the command line\n    verbose (bool) -- show output of items that are updated\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 60,
                  "endLine": 695,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    \"\"\"Convert a package from a unix platform to windows.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'win-64' or 'win-32'\n    dependencies (List[str]) -- the dependencies passed from the command line\n",
                    "rendered": {
                      "text": "    \"\"\"Convert a package from a unix platform to windows.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'win-64' or 'win-32'\n    dependencies (List[str]) -- the dependencies passed from the command line\n",
                      "markdown": "`    \"\"\"Convert a package from a unix platform to windows.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'win-64' or 'win-32'\n    dependencies (List[str]) -- the dependencies passed from the command line\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 674,
                  "startColumn": 70,
                  "endLine": 674,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'win-64' or 'win-32'\n    dependencies (List[str]) -- the dependencies passed from the command line\n    verbose (bool) -- show output of items that are updated\n",
                    "rendered": {
                      "text": "\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'win-64' or 'win-32'\n    dependencies (List[str]) -- the dependencies passed from the command line\n    verbose (bool) -- show output of items that are updated\n",
                      "markdown": "`\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'win-64' or 'win-32'\n    dependencies (List[str]) -- the dependencies passed from the command line\n    verbose (bool) -- show output of items that are updated\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 60,
                  "endLine": 673,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    \"\"\"Convert package between windows architectures.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'win-64' or 'win-32'\n    dependencies (List[str]) -- the dependencies passed from the command line\n",
                    "rendered": {
                      "text": "    \"\"\"Convert package between windows architectures.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'win-64' or 'win-32'\n    dependencies (List[str]) -- the dependencies passed from the command line\n",
                      "markdown": "`    \"\"\"Convert package between windows architectures.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'win-64' or 'win-32'\n    dependencies (List[str]) -- the dependencies passed from the command line\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 652,
                  "startColumn": 70,
                  "endLine": 652,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'linux-64', 'linux-32', or 'osx-64'\n    dependencies (List[str]) -- the dependencies passed from the command line\n    verbose (bool) -- show output of items that are updated\n",
                    "rendered": {
                      "text": "\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'linux-64', 'linux-32', or 'osx-64'\n    dependencies (List[str]) -- the dependencies passed from the command line\n    verbose (bool) -- show output of items that are updated\n",
                      "markdown": "`\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'linux-64', 'linux-32', or 'osx-64'\n    dependencies (List[str]) -- the dependencies passed from the command line\n    verbose (bool) -- show output of items that are updated\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 651,
                  "startColumn": 60,
                  "endLine": 651,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    \"\"\"Convert package between unix platforms.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'linux-64', 'linux-32', or 'osx-64'\n    dependencies (List[str]) -- the dependencies passed from the command line\n",
                    "rendered": {
                      "text": "    \"\"\"Convert package between unix platforms.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'linux-64', 'linux-32', or 'osx-64'\n    dependencies (List[str]) -- the dependencies passed from the command line\n",
                      "markdown": "`    \"\"\"Convert package between unix platforms.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    output_dir (str) -- the file path to where to output the converted tar file\n    platform (str) -- the platform to convert to: 'linux-64', 'linux-32', or 'osx-64'\n    dependencies (List[str]) -- the dependencies passed from the command line\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 60,
                  "endLine": 624,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    \"\"\"Create the converted package's tar file.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    temp_dir (str) -- the file path to the temporary directory containing the source\n        package's extracted contents\n    platform (str) -- the platform to convert to: 'win-64', 'win-32', 'linux-64',\n",
                    "rendered": {
                      "text": "    \"\"\"Create the converted package's tar file.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    temp_dir (str) -- the file path to the temporary directory containing the source\n        package's extracted contents\n    platform (str) -- the platform to convert to: 'win-64', 'win-32', 'linux-64',\n",
                      "markdown": "`    \"\"\"Create the converted package's tar file.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n    temp_dir (str) -- the file path to the temporary directory containing the source\n        package's extracted contents\n    platform (str) -- the platform to convert to: 'win-64', 'win-32', 'linux-64',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 37,
                  "endLine": 621,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n\ndef create_target_archive(file_path, temp_dir, platform, output_dir):\n    \"\"\"Create the converted package's tar file.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n",
                    "rendered": {
                      "text": "\n\ndef create_target_archive(file_path, temp_dir, platform, output_dir):\n    \"\"\"Create the converted package's tar file.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n",
                      "markdown": "`\n\ndef create_target_archive(file_path, temp_dir, platform, output_dir):\n    \"\"\"Create the converted package's tar file.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package's tar file\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 7,
                  "endLine": 550,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    executable (str) -- the filename of the executable to remove\n    \"\"\"\n    if executable.endswith((\".exe\", \".bat\")):\n        script = os.path.join(directory, executable)\n        os.remove(script)\n\n\n",
                    "rendered": {
                      "text": "    executable (str) -- the filename of the executable to remove\n    \"\"\"\n    if executable.endswith((\".exe\", \".bat\")):\n        script = os.path.join(directory, executable)\n        os.remove(script)\n\n\n",
                      "markdown": "`    executable (str) -- the filename of the executable to remove\n    \"\"\"\n    if executable.endswith((\".exe\", \".bat\")):\n        script = os.path.join(directory, executable)\n        os.remove(script)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 19,
                  "endLine": 425,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n            script_directory = os.path.join(temp_dir, \"Scripts\")\n            if os.path.isdir(script_directory):\n                for script in os.listdir(script_directory):\n                    if script.endswith(\".exe\"):\n                        paths[\"paths\"].append(\n                            add_new_windows_path(script_directory, script)\n",
                    "rendered": {
                      "text": "\n            script_directory = os.path.join(temp_dir, \"Scripts\")\n            if os.path.isdir(script_directory):\n                for script in os.listdir(script_directory):\n                    if script.endswith(\".exe\"):\n                        paths[\"paths\"].append(\n                            add_new_windows_path(script_directory, script)\n",
                      "markdown": "`\n            script_directory = os.path.join(temp_dir, \"Scripts\")\n            if os.path.isdir(script_directory):\n                for script in os.listdir(script_directory):\n                    if script.endswith(\".exe\"):\n                        paths[\"paths\"].append(\n                            add_new_windows_path(script_directory, script)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 43,
                  "endLine": 378,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n    Positional arguments:\n    executable_directory (str) -- the file path to temporary directory's 'Scripts' directory\n    executable (str) -- the filename of the script to add to paths.json\n    \"\"\"\n    with open(os.path.join(executable_directory, executable), \"rb\") as script_file:\n        script_file_contents = script_file.read()\n",
                    "rendered": {
                      "text": "\n    Positional arguments:\n    executable_directory (str) -- the file path to temporary directory's 'Scripts' directory\n    executable (str) -- the filename of the script to add to paths.json\n    \"\"\"\n    with open(os.path.join(executable_directory, executable), \"rb\") as script_file:\n        script_file_contents = script_file.read()\n",
                      "markdown": "`\n    Positional arguments:\n    executable_directory (str) -- the file path to temporary directory's 'Scripts' directory\n    executable (str) -- the filename of the script to add to paths.json\n    \"\"\"\n    with open(os.path.join(executable_directory, executable), \"rb\") as script_file:\n        script_file_contents = script_file.read()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 3,
                  "endLine": 347,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    \"\"\"Update the sha of executable scripts.\n\n    When moving from windows to linux, a shebang line is removed/added from\n    script files which requires to update the sha.\n\n    \"\"\"\n    with open(os.path.join(package_directory, executable_path), \"rb\") as script_file:\n",
                    "rendered": {
                      "text": "    \"\"\"Update the sha of executable scripts.\n\n    When moving from windows to linux, a shebang line is removed/added from\n    script files which requires to update the sha.\n\n    \"\"\"\n    with open(os.path.join(package_directory, executable_path), \"rb\") as script_file:\n",
                      "markdown": "`    \"\"\"Update the sha of executable scripts.\n\n    When moving from windows to linux, a shebang line is removed/added from\n    script files which requires to update the sha.\n\n    \"\"\"\n    with open(os.path.join(package_directory, executable_path), \"rb\") as script_file:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 58,
                  "endLine": 271,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    temp_dir (str) -- the file path to the temporary directory that contains\n        the source package's extracted contents\n    target_platform (str) -- the platform to target: 'unix' or win'\n    file_path (str) -- the file path to the source package tar file\n    \"\"\"\n    if target_platform == \"win\":\n        try:\n",
                    "rendered": {
                      "text": "    temp_dir (str) -- the file path to the temporary directory that contains\n        the source package's extracted contents\n    target_platform (str) -- the platform to target: 'unix' or win'\n    file_path (str) -- the file path to the source package tar file\n    \"\"\"\n    if target_platform == \"win\":\n        try:\n",
                      "markdown": "`    temp_dir (str) -- the file path to the temporary directory that contains\n        the source package's extracted contents\n    target_platform (str) -- the platform to target: 'unix' or win'\n    file_path (str) -- the file path to the source package tar file\n    \"\"\"\n    if target_platform == \"win\":\n        try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 58,
                  "endLine": 130,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    \"\"\"Extract the source tar archive contents to a temporary directory.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package tar file\n    \"\"\"\n    temporary_directory = tempfile.mkdtemp()\n\n",
                    "rendered": {
                      "text": "    \"\"\"Extract the source tar archive contents to a temporary directory.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package tar file\n    \"\"\"\n    temporary_directory = tempfile.mkdtemp()\n\n",
                      "markdown": "`    \"\"\"Extract the source tar archive contents to a temporary directory.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package tar file\n    \"\"\"\n    temporary_directory = tempfile.mkdtemp()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 25,
                  "endLine": 127,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n\ndef extract_temporary_directory(file_path):\n    \"\"\"Extract the source tar archive contents to a temporary directory.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package tar file\n",
                    "rendered": {
                      "text": "\n\ndef extract_temporary_directory(file_path):\n    \"\"\"Extract the source tar archive contents to a temporary directory.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package tar file\n",
                      "markdown": "`\n\ndef extract_temporary_directory(file_path):\n    \"\"\"Extract the source tar archive contents to a temporary directory.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package tar file\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 21,
                  "endLine": 95,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n    Positional arguments:\n    file_path (str) -- the file path to a tar archive member, the file path\n        to the source tar file itself, or the file path to the\n        temporary directory containing the extracted source package contents\n    \"\"\"\n    if \"python\" in file_path:\n",
                    "rendered": {
                      "text": "\n    Positional arguments:\n    file_path (str) -- the file path to a tar archive member, the file path\n        to the source tar file itself, or the file path to the\n        temporary directory containing the extracted source package contents\n    \"\"\"\n    if \"python\" in file_path:\n",
                      "markdown": "`\n    Positional arguments:\n    file_path (str) -- the file path to a tar archive member, the file path\n        to the source tar file itself, or the file path to the\n        temporary directory containing the extracted source package contents\n    \"\"\"\n    if \"python\" in file_path:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 41,
                  "endLine": 94,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    most common cases of retrieving the python version from the source package.\n\n    Positional arguments:\n    file_path (str) -- the file path to a tar archive member, the file path\n        to the source tar file itself, or the file path to the\n        temporary directory containing the extracted source package contents\n    \"\"\"\n",
                    "rendered": {
                      "text": "    most common cases of retrieving the python version from the source package.\n\n    Positional arguments:\n    file_path (str) -- the file path to a tar archive member, the file path\n        to the source tar file itself, or the file path to the\n        temporary directory containing the extracted source package contents\n    \"\"\"\n",
                      "markdown": "`    most common cases of retrieving the python version from the source package.\n\n    Positional arguments:\n    file_path (str) -- the file path to a tar archive member, the file path\n        to the source tar file itself, or the file path to the\n        temporary directory containing the extracted source package contents\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 25,
                  "endLine": 90,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    when a path is a tar archive member path such as 'lib/python3.6/site-packages',\n    when a path is the file path to the source package tar file, and when a path\n    is the path to the temporary directory that contains the extracted contents\n    of the source package tar file. This allows one function to handle the three\n    most common cases of retrieving the python version from the source package.\n\n    Positional arguments:\n",
                    "rendered": {
                      "text": "    when a path is a tar archive member path such as 'lib/python3.6/site-packages',\n    when a path is the file path to the source package tar file, and when a path\n    is the path to the temporary directory that contains the extracted contents\n    of the source package tar file. This allows one function to handle the three\n    most common cases of retrieving the python version from the source package.\n\n    Positional arguments:\n",
                      "markdown": "`    when a path is a tar archive member path such as 'lib/python3.6/site-packages',\n    when a path is the file path to the source package tar file, and when a path\n    is the path to the temporary directory that contains the extracted contents\n    of the source package tar file. This allows one function to handle the three\n    most common cases of retrieving the python version from the source package.\n\n    Positional arguments:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 54,
                  "endLine": 88,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n    This function is overloaded to handle three separate cases:\n    when a path is a tar archive member path such as 'lib/python3.6/site-packages',\n    when a path is the file path to the source package tar file, and when a path\n    is the path to the temporary directory that contains the extracted contents\n    of the source package tar file. This allows one function to handle the three\n    most common cases of retrieving the python version from the source package.\n",
                    "rendered": {
                      "text": "\n    This function is overloaded to handle three separate cases:\n    when a path is a tar archive member path such as 'lib/python3.6/site-packages',\n    when a path is the file path to the source package tar file, and when a path\n    is the path to the temporary directory that contains the extracted contents\n    of the source package tar file. This allows one function to handle the three\n    most common cases of retrieving the python version from the source package.\n",
                      "markdown": "`\n    This function is overloaded to handle three separate cases:\n    when a path is a tar archive member path such as 'lib/python3.6/site-packages',\n    when a path is the file path to the source package tar file, and when a path\n    is the path to the temporary directory that contains the extracted contents\n    of the source package tar file. This allows one function to handle the three\n    most common cases of retrieving the python version from the source package.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 20,
                  "endLine": 87,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    \"\"\"Retrieve the python version from a path.\n\n    This function is overloaded to handle three separate cases:\n    when a path is a tar archive member path such as 'lib/python3.6/site-packages',\n    when a path is the file path to the source package tar file, and when a path\n    is the path to the temporary directory that contains the extracted contents\n    of the source package tar file. This allows one function to handle the three\n",
                    "rendered": {
                      "text": "    \"\"\"Retrieve the python version from a path.\n\n    This function is overloaded to handle three separate cases:\n    when a path is a tar archive member path such as 'lib/python3.6/site-packages',\n    when a path is the file path to the source package tar file, and when a path\n    is the path to the temporary directory that contains the extracted contents\n    of the source package tar file. This allows one function to handle the three\n",
                      "markdown": "`    \"\"\"Retrieve the python version from a path.\n\n    This function is overloaded to handle three separate cases:\n    when a path is a tar archive member path such as 'lib/python3.6/site-packages',\n    when a path is the file path to the source package tar file, and when a path\n    is the path to the temporary directory that contains the extracted contents\n    of the source package tar file. This allows one function to handle the three\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 58,
                  "endLine": 61,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    \"\"\"Retrieve the platform and architecture of the source package.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package tar file\n    \"\"\"\n    with tarfile.open(file_path) as tar:\n        index = json.loads(tar.extractfile(\"info/index.json\").read().decode(\"utf-8\"))\n",
                    "rendered": {
                      "text": "    \"\"\"Retrieve the platform and architecture of the source package.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package tar file\n    \"\"\"\n    with tarfile.open(file_path) as tar:\n        index = json.loads(tar.extractfile(\"info/index.json\").read().decode(\"utf-8\"))\n",
                      "markdown": "`    \"\"\"Retrieve the platform and architecture of the source package.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package tar file\n    \"\"\"\n    with tarfile.open(file_path) as tar:\n        index = json.loads(tar.extractfile(\"info/index.json\").read().decode(\"utf-8\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/convert.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 58,
                  "endLine": 35,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    to convert packages containing C extensions to other platforms.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package tar file\n\n    Keyword arguments:\n    show_imports (bool) -- output the C extensions included in the package\n",
                    "rendered": {
                      "text": "    to convert packages containing C extensions to other platforms.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package tar file\n\n    Keyword arguments:\n    show_imports (bool) -- output the C extensions included in the package\n",
                      "markdown": "`    to convert packages containing C extensions to other platforms.\n\n    Positional arguments:\n    file_path (str) -- the file path to the source package tar file\n\n    Keyword arguments:\n    show_imports (bool) -- output the C extensions included in the package\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 46,
                  "endLine": 892,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n\ndef get_channel_urls(args):\n    channel_urls = args.get(\"channel\") or args.get(\"channels\") or ()\n    final_channel_urls = []\n\n    for url in channel_urls:\n",
                    "rendered": {
                      "text": "\n\ndef get_channel_urls(args):\n    channel_urls = args.get(\"channel\") or args.get(\"channels\") or ()\n    final_channel_urls = []\n\n    for url in channel_urls:\n",
                      "markdown": "`\n\ndef get_channel_urls(args):\n    channel_urls = args.get(\"channel\") or args.get(\"channels\") or ()\n    final_channel_urls = []\n\n    for url in channel_urls:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 23,
                  "endLine": 892,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n\ndef get_channel_urls(args):\n    channel_urls = args.get(\"channel\") or args.get(\"channels\") or ()\n    final_channel_urls = []\n\n    for url in channel_urls:\n",
                    "rendered": {
                      "text": "\n\ndef get_channel_urls(args):\n    channel_urls = args.get(\"channel\") or args.get(\"channels\") or ()\n    final_channel_urls = []\n\n    for url in channel_urls:\n",
                      "markdown": "`\n\ndef get_channel_urls(args):\n    channel_urls = args.get(\"channel\") or args.get(\"channels\") or ()\n    final_channel_urls = []\n\n    for url in channel_urls:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 30,
                  "endLine": 507,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    # TODO: This is probably broken on Windows, but no one has a lua package on windows to test.\n    def _get_lua(self, prefix, platform):\n        lua_ver = self.variant.get(\"lua\", get_default_variant(self)[\"lua\"])\n        binary_name = \"luajit\" if (lua_ver and lua_ver[0] == \"2\") else \"lua\"\n        if platform.startswith(\"win\"):\n            res = join(prefix, \"Library\", \"bin\", f\"{binary_name}.exe\")\n",
                    "rendered": {
                      "text": "\n    # TODO: This is probably broken on Windows, but no one has a lua package on windows to test.\n    def _get_lua(self, prefix, platform):\n        lua_ver = self.variant.get(\"lua\", get_default_variant(self)[\"lua\"])\n        binary_name = \"luajit\" if (lua_ver and lua_ver[0] == \"2\") else \"lua\"\n        if platform.startswith(\"win\"):\n            res = join(prefix, \"Library\", \"bin\", f\"{binary_name}.exe\")\n",
                      "markdown": "`\n    # TODO: This is probably broken on Windows, but no one has a lua package on windows to test.\n    def _get_lua(self, prefix, platform):\n        lua_ver = self.variant.get(\"lua\", get_default_variant(self)[\"lua\"])\n        binary_name = \"luajit\" if (lua_ver and lua_ver[0] == \"2\") else \"lua\"\n        if platform.startswith(\"win\"):\n            res = join(prefix, \"Library\", \"bin\", f\"{binary_name}.exe\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 46,
                  "endLine": 458,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        \"\"\"This is where source caches and work folders live\"\"\"\n        if not self._croot:\n            _bld_root_env = os.getenv(\"CONDA_BLD_PATH\")\n            _bld_root_rc = context.conda_build.get(\"root-dir\")\n            if _bld_root_env:\n                self._croot = abspath(expanduser(_bld_root_env))\n            elif _bld_root_rc:\n",
                    "rendered": {
                      "text": "        \"\"\"This is where source caches and work folders live\"\"\"\n        if not self._croot:\n            _bld_root_env = os.getenv(\"CONDA_BLD_PATH\")\n            _bld_root_rc = context.conda_build.get(\"root-dir\")\n            if _bld_root_env:\n                self._croot = abspath(expanduser(_bld_root_env))\n            elif _bld_root_rc:\n",
                      "markdown": "`        \"\"\"This is where source caches and work folders live\"\"\"\n        if not self._croot:\n            _bld_root_env = os.getenv(\"CONDA_BLD_PATH\")\n            _bld_root_rc = context.conda_build.get(\"root-dir\")\n            if _bld_root_env:\n                self._croot = abspath(expanduser(_bld_root_env))\n            elif _bld_root_rc:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 30,
                  "endLine": 413,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    @host_subdir.setter\n    def host_subdir(self, value):\n        value = SUBDIR_ALIASES.get(value, value)\n        values = value.rsplit(\"-\", 1)\n        self.host_platform = values[0]\n        if len(values) > 1:\n",
                    "rendered": {
                      "text": "\n    @host_subdir.setter\n    def host_subdir(self, value):\n        value = SUBDIR_ALIASES.get(value, value)\n        values = value.rsplit(\"-\", 1)\n        self.host_platform = values[0]\n        if len(values) > 1:\n",
                      "markdown": "`\n    @host_subdir.setter\n    def host_subdir(self, value):\n        value = SUBDIR_ALIASES.get(value, value)\n        values = value.rsplit(\"-\", 1)\n        self.host_platform = values[0]\n        if len(values) > 1:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 29,
                  "endLine": 409,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            subdir = self.host_platform\n        elif subdir != \"-\".join([self.host_platform, str(self.host_arch)]):\n            subdir = \"-\".join([self.host_platform, str(self.host_arch)])\n        return SUBDIR_ALIASES.get(subdir, subdir)\n\n    @host_subdir.setter\n    def host_subdir(self, value):\n",
                    "rendered": {
                      "text": "            subdir = self.host_platform\n        elif subdir != \"-\".join([self.host_platform, str(self.host_arch)]):\n            subdir = \"-\".join([self.host_platform, str(self.host_arch)])\n        return SUBDIR_ALIASES.get(subdir, subdir)\n\n    @host_subdir.setter\n    def host_subdir(self, value):\n",
                      "markdown": "`            subdir = self.host_platform\n        elif subdir != \"-\".join([self.host_platform, str(self.host_arch)]):\n            subdir = \"-\".join([self.host_platform, str(self.host_arch)])\n        return SUBDIR_ALIASES.get(subdir, subdir)\n\n    @host_subdir.setter\n    def host_subdir(self, value):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 29,
                  "endLine": 404,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n    @property\n    def host_subdir(self):\n        subdir = self.variant.get(\"target_platform\", self.build_subdir)\n        if self.host_platform == \"noarch\":\n            subdir = self.host_platform\n        elif subdir != \"-\".join([self.host_platform, str(self.host_arch)]):\n",
                    "rendered": {
                      "text": "\n    @property\n    def host_subdir(self):\n        subdir = self.variant.get(\"target_platform\", self.build_subdir)\n        if self.host_platform == \"noarch\":\n            subdir = self.host_platform\n        elif subdir != \"-\".join([self.host_platform, str(self.host_arch)]):\n",
                      "markdown": "`\n    @property\n    def host_subdir(self):\n        subdir = self.variant.get(\"target_platform\", self.build_subdir)\n        if self.host_platform == \"noarch\":\n            subdir = self.host_platform\n        elif subdir != \"-\".join([self.host_platform, str(self.host_arch)]):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 27,
                  "endLine": 395,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    def host_platform(self):\n        return (\n            self._host_platform\n            or self.variant.get(\"target_platform\", self.build_subdir).split(\"-\", 1)[0]\n        )\n\n    @host_platform.setter\n",
                    "rendered": {
                      "text": "    def host_platform(self):\n        return (\n            self._host_platform\n            or self.variant.get(\"target_platform\", self.build_subdir).split(\"-\", 1)[0]\n        )\n\n    @host_platform.setter\n",
                      "markdown": "`    def host_platform(self):\n        return (\n            self._host_platform\n            or self.variant.get(\"target_platform\", self.build_subdir).split(\"-\", 1)[0]\n        )\n\n    @host_platform.setter\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 39,
                  "endLine": 368,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    @property\n    def host_arch(self):\n        try:\n            variant_arch = self.variant.get(\"target_platform\", self.build_subdir).split(\n                \"-\", 1\n            )[1]\n        except IndexError:\n",
                    "rendered": {
                      "text": "    @property\n    def host_arch(self):\n        try:\n            variant_arch = self.variant.get(\"target_platform\", self.build_subdir).split(\n                \"-\", 1\n            )[1]\n        except IndexError:\n",
                      "markdown": "`    @property\n    def host_arch(self):\n        try:\n            variant_arch = self.variant.get(\"target_platform\", self.build_subdir).split(\n                \"-\", 1\n            )[1]\n        except IndexError:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 42,
                  "endLine": 284,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            return version\n\n        def set_lang(variant, lang):\n            value = env(lang, self.variant.get(lang))\n            if value:\n                if \".\" not in str(value):\n                    value = \".\".join((value[0], value[1:]))\n",
                    "rendered": {
                      "text": "            return version\n\n        def set_lang(variant, lang):\n            value = env(lang, self.variant.get(lang))\n            if value:\n                if \".\" not in str(value):\n                    value = \".\".join((value[0], value[1:]))\n",
                      "markdown": "`            return version\n\n        def set_lang(variant, lang):\n            value = env(lang, self.variant.get(lang))\n            if value:\n                if \".\" not in str(value):\n                    value = \".\".join((value[0], value[1:]))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 22,
                  "endLine": 259,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            self._src_cache_root = os.path.expanduser(self._src_cache_root)\n\n    def _set_attribute_from_kwargs(self, kwargs, attr, default):\n        value = kwargs.get(\n            attr, getattr(self, attr) if hasattr(self, attr) else default\n        )\n        setattr(self, attr, value)\n",
                    "rendered": {
                      "text": "            self._src_cache_root = os.path.expanduser(self._src_cache_root)\n\n    def _set_attribute_from_kwargs(self, kwargs, attr, default):\n        value = kwargs.get(\n            attr, getattr(self, attr) if hasattr(self, attr) else default\n        )\n        setattr(self, attr, value)\n",
                      "markdown": "`            self._src_cache_root = os.path.expanduser(self._src_cache_root)\n\n    def _set_attribute_from_kwargs(self, kwargs, attr, default):\n        value = kwargs.get(\n            attr, getattr(self, attr) if hasattr(self, attr) else default\n        )\n        setattr(self, attr, value)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 51,
                  "endLine": 241,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            context.conda_build.get(\"pkg_format\", conda_pkg_format_default),\n        ),\n        Setting(\"suppress_variables\", False),\n        Setting(\"build_id_pat\", context.conda_build.get(\"build_id_pat\", \"{n}_{t}\")),\n    ]\n\n\n",
                    "rendered": {
                      "text": "            context.conda_build.get(\"pkg_format\", conda_pkg_format_default),\n        ),\n        Setting(\"suppress_variables\", False),\n        Setting(\"build_id_pat\", context.conda_build.get(\"build_id_pat\", \"{n}_{t}\")),\n    ]\n\n\n",
                      "markdown": "`            context.conda_build.get(\"pkg_format\", conda_pkg_format_default),\n        ),\n        Setting(\"suppress_variables\", False),\n        Setting(\"build_id_pat\", context.conda_build.get(\"build_id_pat\", \"{n}_{t}\")),\n    ]\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 31,
                  "endLine": 238,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        # this can be set to different values (currently only 2 means anything) to use package formats\n        Setting(\n            \"conda_pkg_format\",\n            context.conda_build.get(\"pkg_format\", conda_pkg_format_default),\n        ),\n        Setting(\"suppress_variables\", False),\n        Setting(\"build_id_pat\", context.conda_build.get(\"build_id_pat\", \"{n}_{t}\")),\n",
                    "rendered": {
                      "text": "        # this can be set to different values (currently only 2 means anything) to use package formats\n        Setting(\n            \"conda_pkg_format\",\n            context.conda_build.get(\"pkg_format\", conda_pkg_format_default),\n        ),\n        Setting(\"suppress_variables\", False),\n        Setting(\"build_id_pat\", context.conda_build.get(\"build_id_pat\", \"{n}_{t}\")),\n",
                      "markdown": "`        # this can be set to different values (currently only 2 means anything) to use package formats\n        Setting(\n            \"conda_pkg_format\",\n            context.conda_build.get(\"pkg_format\", conda_pkg_format_default),\n        ),\n        Setting(\"suppress_variables\", False),\n        Setting(\"build_id_pat\", context.conda_build.get(\"build_id_pat\", \"{n}_{t}\")),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 31,
                  "endLine": 231,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        Setting(\"_pip_cache_dir\", None),\n        Setting(\n            \"zstd_compression_level\",\n            context.conda_build.get(\n                \"zstd_compression_level\", zstd_compression_level_default\n            ),\n        ),\n",
                    "rendered": {
                      "text": "        Setting(\"_pip_cache_dir\", None),\n        Setting(\n            \"zstd_compression_level\",\n            context.conda_build.get(\n                \"zstd_compression_level\", zstd_compression_level_default\n            ),\n        ),\n",
                      "markdown": "`        Setting(\"_pip_cache_dir\", None),\n        Setting(\n            \"zstd_compression_level\",\n            context.conda_build.get(\n                \"zstd_compression_level\", zstd_compression_level_default\n            ),\n        ),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 31,
                  "endLine": 211,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        ),\n        Setting(\n            \"exit_on_verify_error\",\n            context.conda_build.get(\n                \"exit_on_verify_error\", exit_on_verify_error_default\n            ),\n        ),\n",
                    "rendered": {
                      "text": "        ),\n        Setting(\n            \"exit_on_verify_error\",\n            context.conda_build.get(\n                \"exit_on_verify_error\", exit_on_verify_error_default\n            ),\n        ),\n",
                      "markdown": "`        ),\n        Setting(\n            \"exit_on_verify_error\",\n            context.conda_build.get(\n                \"exit_on_verify_error\", exit_on_verify_error_default\n            ),\n        ),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 31,
                  "endLine": 207,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        Setting(\"verify\", True),\n        Setting(\n            \"ignore_verify_codes\",\n            context.conda_build.get(\"ignore_verify_codes\", ignore_verify_codes_default),\n        ),\n        Setting(\n            \"exit_on_verify_error\",\n",
                    "rendered": {
                      "text": "        Setting(\"verify\", True),\n        Setting(\n            \"ignore_verify_codes\",\n            context.conda_build.get(\"ignore_verify_codes\", ignore_verify_codes_default),\n        ),\n        Setting(\n            \"exit_on_verify_error\",\n",
                      "markdown": "`        Setting(\"verify\", True),\n        Setting(\n            \"ignore_verify_codes\",\n            context.conda_build.get(\"ignore_verify_codes\", ignore_verify_codes_default),\n        ),\n        Setting(\n            \"exit_on_verify_error\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 31,
                  "endLine": 168,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        ),\n        Setting(\n            \"no_rewrite_stdout_env\",\n            context.conda_build.get(\n                \"no_rewrite_stdout_env\", no_rewrite_stdout_env_default\n            ).lower()\n            == \"true\",\n",
                    "rendered": {
                      "text": "        ),\n        Setting(\n            \"no_rewrite_stdout_env\",\n            context.conda_build.get(\n                \"no_rewrite_stdout_env\", no_rewrite_stdout_env_default\n            ).lower()\n            == \"true\",\n",
                      "markdown": "`        ),\n        Setting(\n            \"no_rewrite_stdout_env\",\n            context.conda_build.get(\n                \"no_rewrite_stdout_env\", no_rewrite_stdout_env_default\n            ).lower()\n            == \"true\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 31,
                  "endLine": 163,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        ),\n        Setting(\n            \"enable_static\",\n            context.conda_build.get(\"enable_static\", enable_static_default).lower()\n            == \"true\",\n        ),\n        Setting(\n",
                    "rendered": {
                      "text": "        ),\n        Setting(\n            \"enable_static\",\n            context.conda_build.get(\"enable_static\", enable_static_default).lower()\n            == \"true\",\n        ),\n        Setting(\n",
                      "markdown": "`        ),\n        Setting(\n            \"enable_static\",\n            context.conda_build.get(\"enable_static\", enable_static_default).lower()\n            == \"true\",\n        ),\n        Setting(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 31,
                  "endLine": 156,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        ),\n        Setting(\n            \"error_overdepending\",\n            context.conda_build.get(\n                \"error_overdepending\", error_overdepending_default\n            ).lower()\n            == \"true\",\n",
                    "rendered": {
                      "text": "        ),\n        Setting(\n            \"error_overdepending\",\n            context.conda_build.get(\n                \"error_overdepending\", error_overdepending_default\n            ).lower()\n            == \"true\",\n",
                      "markdown": "`        ),\n        Setting(\n            \"error_overdepending\",\n            context.conda_build.get(\n                \"error_overdepending\", error_overdepending_default\n            ).lower()\n            == \"true\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 31,
                  "endLine": 149,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        #    cli/main_build.py that this default will switch in conda-build 4.0.\n        Setting(\n            \"error_overlinking\",\n            context.conda_build.get(\n                \"error_overlinking\", error_overlinking_default\n            ).lower()\n            == \"true\",\n",
                    "rendered": {
                      "text": "        #    cli/main_build.py that this default will switch in conda-build 4.0.\n        Setting(\n            \"error_overlinking\",\n            context.conda_build.get(\n                \"error_overlinking\", error_overlinking_default\n            ).lower()\n            == \"true\",\n",
                      "markdown": "`        #    cli/main_build.py that this default will switch in conda-build 4.0.\n        Setting(\n            \"error_overlinking\",\n            context.conda_build.get(\n                \"error_overlinking\", error_overlinking_default\n            ).lower()\n            == \"true\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 48,
                  "endLine": 124,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        Setting(\n            \"_src_cache_root\",\n            abspath(expanduser(expandvars(cache_dir)))\n            if (cache_dir := context.conda_build.get(\"cache_dir\"))\n            else _src_cache_root_default,\n        ),\n        Setting(\"copy_test_source_files\", True),\n",
                    "rendered": {
                      "text": "        Setting(\n            \"_src_cache_root\",\n            abspath(expanduser(expandvars(cache_dir)))\n            if (cache_dir := context.conda_build.get(\"cache_dir\"))\n            else _src_cache_root_default,\n        ),\n        Setting(\"copy_test_source_files\", True),\n",
                      "markdown": "`        Setting(\n            \"_src_cache_root\",\n            abspath(expanduser(expandvars(cache_dir)))\n            if (cache_dir := context.conda_build.get(\"cache_dir\"))\n            else _src_cache_root_default,\n        ),\n        Setting(\"copy_test_source_files\", True),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 31,
                  "endLine": 115,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        Setting(\"test_run_post\", False),\n        Setting(\n            \"filename_hashing\",\n            context.conda_build.get(\n                \"filename_hashing\", filename_hashing_default\n            ).lower()\n            == \"true\",\n",
                    "rendered": {
                      "text": "        Setting(\"test_run_post\", False),\n        Setting(\n            \"filename_hashing\",\n            context.conda_build.get(\n                \"filename_hashing\", filename_hashing_default\n            ).lower()\n            == \"true\",\n",
                      "markdown": "`        Setting(\"test_run_post\", False),\n        Setting(\n            \"filename_hashing\",\n            context.conda_build.get(\n                \"filename_hashing\", filename_hashing_default\n            ).lower()\n            == \"true\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 17,
                  "endLine": 198,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        # source provisioning.\n        Setting(\"git_commits_since_tag\", 0),\n        # pypi upload settings (twine)\n        Setting(\"password\", None),\n        Setting(\"sign\", False),\n        Setting(\"sign_with\", \"gpg\"),\n        Setting(\"identity\", None),\n",
                    "rendered": {
                      "text": "        # source provisioning.\n        Setting(\"git_commits_since_tag\", 0),\n        # pypi upload settings (twine)\n        Setting(\"password\", None),\n        Setting(\"sign\", False),\n        Setting(\"sign_with\", \"gpg\"),\n        Setting(\"identity\", None),\n",
                      "markdown": "`        # source provisioning.\n        Setting(\"git_commits_since_tag\", 0),\n        # pypi upload settings (twine)\n        Setting(\"password\", None),\n        Setting(\"sign\", False),\n        Setting(\"sign_with\", \"gpg\"),\n        Setting(\"identity\", None),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 22,
                  "endLine": 457,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    def croot(self) -> str:\n        \"\"\"This is where source caches and work folders live\"\"\"\n        if not self._croot:\n            _bld_root_env = os.getenv(\"CONDA_BLD_PATH\")\n            _bld_root_rc = context.conda_build.get(\"root-dir\")\n            if _bld_root_env:\n                self._croot = abspath(expanduser(_bld_root_env))\n",
                    "rendered": {
                      "text": "    def croot(self) -> str:\n        \"\"\"This is where source caches and work folders live\"\"\"\n        if not self._croot:\n            _bld_root_env = os.getenv(\"CONDA_BLD_PATH\")\n            _bld_root_rc = context.conda_build.get(\"root-dir\")\n            if _bld_root_env:\n                self._croot = abspath(expanduser(_bld_root_env))\n",
                      "markdown": "`    def croot(self) -> str:\n        \"\"\"This is where source caches and work folders live\"\"\"\n        if not self._croot:\n            _bld_root_env = os.getenv(\"CONDA_BLD_PATH\")\n            _bld_root_rc = context.conda_build.get(\"root-dir\")\n            if _bld_root_env:\n                self._croot = abspath(expanduser(_bld_root_env))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 20,
                  "endLine": 284,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            return version\n\n        def set_lang(variant, lang):\n            value = env(lang, self.variant.get(lang))\n            if value:\n                if \".\" not in str(value):\n                    value = \".\".join((value[0], value[1:]))\n",
                    "rendered": {
                      "text": "            return version\n\n        def set_lang(variant, lang):\n            value = env(lang, self.variant.get(lang))\n            if value:\n                if \".\" not in str(value):\n                    value = \".\".join((value[0], value[1:]))\n",
                      "markdown": "`            return version\n\n        def set_lang(variant, lang):\n            value = env(lang, self.variant.get(lang))\n            if value:\n                if \".\" not in str(value):\n                    value = \".\".join((value[0], value[1:]))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 32,
                  "endLine": 278,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                elif lang == \"r_base\":\n                    lang = \"r\"\n                var = \"CONDA_\" + lang.upper()\n                version = os.getenv(var) if os.getenv(var) else default\n            elif isinstance(version, list) and len(version) == 1:\n                version = version[0]\n            return version\n",
                    "rendered": {
                      "text": "                elif lang == \"r_base\":\n                    lang = \"r\"\n                var = \"CONDA_\" + lang.upper()\n                version = os.getenv(var) if os.getenv(var) else default\n            elif isinstance(version, list) and len(version) == 1:\n                version = version[0]\n            return version\n",
                      "markdown": "`                elif lang == \"r_base\":\n                    lang = \"r\"\n                var = \"CONDA_\" + lang.upper()\n                version = os.getenv(var) if os.getenv(var) else default\n            elif isinstance(version, list) and len(version) == 1:\n                version = version[0]\n            return version\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 734,
                  "startColumn": 32,
                  "endLine": 734,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    @property\n    def git_cache(self):\n        \"\"\"Where local clones of git sources are stored\"\"\"\n        path = join(self.src_cache_root, \"git_cache\")\n        os.makedirs(path, exist_ok=True)\n        return path\n",
                    "rendered": {
                      "text": "\n    @property\n    def git_cache(self):\n        \"\"\"Where local clones of git sources are stored\"\"\"\n        path = join(self.src_cache_root, \"git_cache\")\n        os.makedirs(path, exist_ok=True)\n        return path\n",
                      "markdown": "`\n    @property\n    def git_cache(self):\n        \"\"\"Where local clones of git sources are stored\"\"\"\n        path = join(self.src_cache_root, \"git_cache\")\n        os.makedirs(path, exist_ok=True)\n        return path\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 80,
                  "endLine": 632,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\n    @property\n    def host_prefix(self):\n        \"\"\"The temporary folder where the host environment is created.  The host env contains\n        libraries that may be linked.  It is not placed on PATH.\"\"\"\n        if on_win:\n            return self._short_host_prefix\n",
                    "rendered": {
                      "text": "\n    @property\n    def host_prefix(self):\n        \"\"\"The temporary folder where the host environment is created.  The host env contains\n        libraries that may be linked.  It is not placed on PATH.\"\"\"\n        if on_win:\n            return self._short_host_prefix\n",
                      "markdown": "`\n    @property\n    def host_prefix(self):\n        \"\"\"The temporary folder where the host environment is created.  The host env contains\n        libraries that may be linked.  It is not placed on PATH.\"\"\"\n        if on_win:\n            return self._short_host_prefix\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 58,
                  "endLine": 622,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    @property\n    def build_prefix(self):\n        \"\"\"The temporary folder where the build environment is created.  The build env contains\n        libraries that may be linked, but only if the host env is not specified.  It is placed on\n        PATH.\"\"\"\n        if self._merge_build_host:\n            prefix = self.host_prefix\n",
                    "rendered": {
                      "text": "    @property\n    def build_prefix(self):\n        \"\"\"The temporary folder where the build environment is created.  The build env contains\n        libraries that may be linked, but only if the host env is not specified.  It is placed on\n        PATH.\"\"\"\n        if self._merge_build_host:\n            prefix = self.host_prefix\n",
                      "markdown": "`    @property\n    def build_prefix(self):\n        \"\"\"The temporary folder where the build environment is created.  The build env contains\n        libraries that may be linked, but only if the host env is not specified.  It is placed on\n        PATH.\"\"\"\n        if self._merge_build_host:\n            prefix = self.host_prefix\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 82,
                  "endLine": 621,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\n    @property\n    def build_prefix(self):\n        \"\"\"The temporary folder where the build environment is created.  The build env contains\n        libraries that may be linked, but only if the host env is not specified.  It is placed on\n        PATH.\"\"\"\n        if self._merge_build_host:\n",
                    "rendered": {
                      "text": "\n    @property\n    def build_prefix(self):\n        \"\"\"The temporary folder where the build environment is created.  The build env contains\n        libraries that may be linked, but only if the host env is not specified.  It is placed on\n        PATH.\"\"\"\n        if self._merge_build_host:\n",
                      "markdown": "`\n    @property\n    def build_prefix(self):\n        \"\"\"The temporary folder where the build environment is created.  The build env contains\n        libraries that may be linked, but only if the host env is not specified.  It is placed on\n        PATH.\"\"\"\n        if self._merge_build_host:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 7,
                  "endLine": 584,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    @property\n    def build_id(self):\n        \"\"\"This is a per-build (almost) unique id, consisting of the package being built, and the\n        time since the epoch, in ms.  It is appended to build and test prefixes, and used to create\n        unique work folders for build and test.\"\"\"\n        return self._build_id\n\n",
                    "rendered": {
                      "text": "    @property\n    def build_id(self):\n        \"\"\"This is a per-build (almost) unique id, consisting of the package being built, and the\n        time since the epoch, in ms.  It is appended to build and test prefixes, and used to create\n        unique work folders for build and test.\"\"\"\n        return self._build_id\n\n",
                      "markdown": "`    @property\n    def build_id(self):\n        \"\"\"This is a per-build (almost) unique id, consisting of the package being built, and the\n        time since the epoch, in ms.  It is appended to build and test prefixes, and used to create\n        unique work folders for build and test.\"\"\"\n        return self._build_id\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 64,
                  "endLine": 505,
                  "endColumn": 69,
                  "snippet": {
                    "text": "            res = join(prefix, \"bin/perl\")\n        return res\n\n    # TODO: This is probably broken on Windows, but no one has a lua package on windows to test.\n    def _get_lua(self, prefix, platform):\n        lua_ver = self.variant.get(\"lua\", get_default_variant(self)[\"lua\"])\n        binary_name = \"luajit\" if (lua_ver and lua_ver[0] == \"2\") else \"lua\"\n",
                    "rendered": {
                      "text": "            res = join(prefix, \"bin/perl\")\n        return res\n\n    # TODO: This is probably broken on Windows, but no one has a lua package on windows to test.\n    def _get_lua(self, prefix, platform):\n        lua_ver = self.variant.get(\"lua\", get_default_variant(self)[\"lua\"])\n        binary_name = \"luajit\" if (lua_ver and lua_ver[0] == \"2\") else \"lua\"\n",
                      "markdown": "`            res = join(prefix, \"bin/perl\")\n        return res\n\n    # TODO: This is probably broken on Windows, but no one has a lua package on windows to test.\n    def _get_lua(self, prefix, platform):\n        lua_ver = self.variant.get(\"lua\", get_default_variant(self)[\"lua\"])\n        binary_name = \"luajit\" if (lua_ver and lua_ver[0] == \"2\") else \"lua\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 47,
                  "endLine": 360,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    @property\n    def build_subdir(self):\n        \"\"\"Determines channel to download build env packages from.\n        Should generally be the native platform.  Does not preclude packages from noarch.\n        \"\"\"\n        return \"-\".join((self.platform, self.arch))\n",
                    "rendered": {
                      "text": "\n    @property\n    def build_subdir(self):\n        \"\"\"Determines channel to download build env packages from.\n        Should generally be the native platform.  Does not preclude packages from noarch.\n        \"\"\"\n        return \"-\".join((self.platform, self.arch))\n",
                      "markdown": "`\n    @property\n    def build_subdir(self):\n        \"\"\"Determines channel to download build env packages from.\n        Should generally be the native platform.  Does not preclude packages from noarch.\n        \"\"\"\n        return \"-\".join((self.platform, self.arch))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 70,
                  "endLine": 295,
                  "endColumn": 76,
                  "snippet": {
                    "text": "        for lang in (\"perl\", \"lua\", \"python\", \"numpy\", \"r_base\"):\n            set_lang(self.variant, lang)\n\n        # --override-channels is a valid CLI argument but we no longer wish to set it here\n        # use conda.base.context.context.override_channels instead\n        kwargs.pop(\"override_channels\", None)\n\n",
                    "rendered": {
                      "text": "        for lang in (\"perl\", \"lua\", \"python\", \"numpy\", \"r_base\"):\n            set_lang(self.variant, lang)\n\n        # --override-channels is a valid CLI argument but we no longer wish to set it here\n        # use conda.base.context.context.override_channels instead\n        kwargs.pop(\"override_channels\", None)\n\n",
                      "markdown": "`        for lang in (\"perl\", \"lua\", \"python\", \"numpy\", \"r_base\"):\n            set_lang(self.variant, lang)\n\n        # --override-channels is a valid CLI argument but we no longer wish to set it here\n        # use conda.base.context.context.override_channels instead\n        kwargs.pop(\"override_channels\", None)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 27,
                  "endLine": 227,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        Setting(\"stats_file\", None),\n        # extra deps to add to test env creation\n        Setting(\"extra_deps\", []),\n        # customize this so pip doesn't look in places we don't want.  Per-build path by default.\n        Setting(\"_pip_cache_dir\", None),\n        Setting(\n            \"zstd_compression_level\",\n",
                    "rendered": {
                      "text": "        Setting(\"stats_file\", None),\n        # extra deps to add to test env creation\n        Setting(\"extra_deps\", []),\n        # customize this so pip doesn't look in places we don't want.  Per-build path by default.\n        Setting(\"_pip_cache_dir\", None),\n        Setting(\n            \"zstd_compression_level\",\n",
                      "markdown": "`        Setting(\"stats_file\", None),\n        # extra deps to add to test env creation\n        Setting(\"extra_deps\", []),\n        # customize this so pip doesn't look in places we don't want.  Per-build path by default.\n        Setting(\"_pip_cache_dir\", None),\n        Setting(\n            \"zstd_compression_level\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 35,
                  "endLine": 225,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        Setting(\"_merge_build_host\", False),\n        # path to output build statistics to\n        Setting(\"stats_file\", None),\n        # extra deps to add to test env creation\n        Setting(\"extra_deps\", []),\n        # customize this so pip doesn't look in places we don't want.  Per-build path by default.\n        Setting(\"_pip_cache_dir\", None),\n",
                    "rendered": {
                      "text": "        Setting(\"_merge_build_host\", False),\n        # path to output build statistics to\n        Setting(\"stats_file\", None),\n        # extra deps to add to test env creation\n        Setting(\"extra_deps\", []),\n        # customize this so pip doesn't look in places we don't want.  Per-build path by default.\n        Setting(\"_pip_cache_dir\", None),\n",
                      "markdown": "`        Setting(\"_merge_build_host\", False),\n        # path to output build statistics to\n        Setting(\"stats_file\", None),\n        # extra deps to add to test env creation\n        Setting(\"extra_deps\", []),\n        # customize this so pip doesn't look in places we don't want.  Per-build path by default.\n        Setting(\"_pip_cache_dir\", None),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 26,
                  "endLine": 128,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            else _src_cache_root_default,\n        ),\n        Setting(\"copy_test_source_files\", True),\n        # should rendering cut out any skipped metadata?\n        Setting(\"trim_skip\", True),\n        # Use channeldata.json for run_export information during rendering.\n        # Falls back to downloading packages if False or channeldata does\n",
                    "rendered": {
                      "text": "            else _src_cache_root_default,\n        ),\n        Setting(\"copy_test_source_files\", True),\n        # should rendering cut out any skipped metadata?\n        Setting(\"trim_skip\", True),\n        # Use channeldata.json for run_export information during rendering.\n        # Falls back to downloading packages if False or channeldata does\n",
                      "markdown": "`            else _src_cache_root_default,\n        ),\n        Setting(\"copy_test_source_files\", True),\n        # should rendering cut out any skipped metadata?\n        Setting(\"trim_skip\", True),\n        # Use channeldata.json for run_export information during rendering.\n        # Falls back to downloading packages if False or channeldata does\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/config.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 6,
                  "endLine": 16,
                  "snippet": {
                    "text": "import pickle\nimport re\nimport shutil\nimport time\nfrom collections import namedtuple\nfrom os.path import abspath, expanduser, expandvars, join\nfrom typing import TYPE_CHECKING\n\n",
                    "rendered": {
                      "text": "import pickle\nimport re\nimport shutil\nimport time\nfrom collections import namedtuple\nfrom os.path import abspath, expanduser, expandvars, join\nfrom typing import TYPE_CHECKING\n\n",
                      "markdown": "`import pickle\nimport re\nimport shutil\nimport time\nfrom collections import namedtuple\nfrom os.path import abspath, expanduser, expandvars, join\nfrom typing import TYPE_CHECKING\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 35,
                  "endLine": 455,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            \"Merge the build and host directories, even when host section or compiler \"\n            \"jinja2 is present\"\n        ),\n        default=context.conda_build.get(\"merge_build_host\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--stats-file\",\n",
                    "rendered": {
                      "text": "            \"Merge the build and host directories, even when host section or compiler \"\n            \"jinja2 is present\"\n        ),\n        default=context.conda_build.get(\"merge_build_host\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--stats-file\",\n",
                      "markdown": "`            \"Merge the build and host directories, even when host section or compiler \"\n            \"jinja2 is present\"\n        ),\n        default=context.conda_build.get(\"merge_build_host\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--stats-file\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 35,
                  "endLine": 438,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        \"--no-copy-test-source-files\",\n        dest=\"copy_test_source_files\",\n        action=\"store_false\",\n        default=context.conda_build.get(\"copy_test_source_files\", \"true\").lower()\n        == \"true\",\n        help=(\n            \"Disables copying the files necessary for testing the package into \"\n",
                    "rendered": {
                      "text": "        \"--no-copy-test-source-files\",\n        dest=\"copy_test_source_files\",\n        action=\"store_false\",\n        default=context.conda_build.get(\"copy_test_source_files\", \"true\").lower()\n        == \"true\",\n        help=(\n            \"Disables copying the files necessary for testing the package into \"\n",
                      "markdown": "`        \"--no-copy-test-source-files\",\n        dest=\"copy_test_source_files\",\n        action=\"store_false\",\n        default=context.conda_build.get(\"copy_test_source_files\", \"true\").lower()\n        == \"true\",\n        help=(\n            \"Disables copying the files necessary for testing the package into \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 48,
                  "endLine": 430,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        ),\n        default=(\n            abspath(expanduser(expandvars(cache_dir)))\n            if (cache_dir := context.conda_build.get(\"cache_dir\"))\n            else None\n        ),\n    )\n",
                    "rendered": {
                      "text": "        ),\n        default=(\n            abspath(expanduser(expandvars(cache_dir)))\n            if (cache_dir := context.conda_build.get(\"cache_dir\"))\n            else None\n        ),\n    )\n",
                      "markdown": "`        ),\n        default=(\n            abspath(expanduser(expandvars(cache_dir)))\n            if (cache_dir := context.conda_build.get(\"cache_dir\"))\n            else None\n        ),\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 35,
                  "endLine": 412,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            \"Do not use a long prefix for the test prefix, as well as the build prefix.\"\n            \"  Affects only Linux and Mac.  Prefix length matches the --prefix-length flag.  \"\n        ),\n        default=context.conda_build.get(\"long_test_prefix\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--keep-going\",\n",
                    "rendered": {
                      "text": "            \"Do not use a long prefix for the test prefix, as well as the build prefix.\"\n            \"  Affects only Linux and Mac.  Prefix length matches the --prefix-length flag.  \"\n        ),\n        default=context.conda_build.get(\"long_test_prefix\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--keep-going\",\n",
                      "markdown": "`            \"Do not use a long prefix for the test prefix, as well as the build prefix.\"\n            \"  Affects only Linux and Mac.  Prefix length matches the --prefix-length flag.  \"\n        ),\n        default=context.conda_build.get(\"long_test_prefix\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--keep-going\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 35,
                  "endLine": 402,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            \"Linux and Mac.  Prefix length matches the --prefix-length flag.  This is on by \"\n            \"default in conda-build 3.0+\"\n        ),\n        default=context.conda_build.get(\"long_test_prefix\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--no-long-test-prefix\",\n",
                    "rendered": {
                      "text": "            \"Linux and Mac.  Prefix length matches the --prefix-length flag.  This is on by \"\n            \"default in conda-build 3.0+\"\n        ),\n        default=context.conda_build.get(\"long_test_prefix\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--no-long-test-prefix\",\n",
                      "markdown": "`            \"Linux and Mac.  Prefix length matches the --prefix-length flag.  This is on by \"\n            \"default in conda-build 3.0+\"\n        ),\n        default=context.conda_build.get(\"long_test_prefix\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--no-long-test-prefix\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 35,
                  "endLine": 391,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            \"`run_exports` are not auto-loaded by the OSes DSO loading mechanism by \"\n            \"any of the files in this package.\"\n        ),\n        default=context.conda_build.get(\"error_overdepending\", \"false\").lower()\n        == \"true\",\n    )\n    parser.add_argument(\n",
                    "rendered": {
                      "text": "            \"`run_exports` are not auto-loaded by the OSes DSO loading mechanism by \"\n            \"any of the files in this package.\"\n        ),\n        default=context.conda_build.get(\"error_overdepending\", \"false\").lower()\n        == \"true\",\n    )\n    parser.add_argument(\n",
                      "markdown": "`            \"`run_exports` are not auto-loaded by the OSes DSO loading mechanism by \"\n            \"any of the files in this package.\"\n        ),\n        default=context.conda_build.get(\"error_overdepending\", \"false\").lower()\n        == \"true\",\n    )\n    parser.add_argument(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 35,
                  "endLine": 379,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            \"`run_exports` are not auto-loaded by the OSes DSO loading mechanism by \"\n            \"any of the files in this package.\"\n        ),\n        default=context.conda_build.get(\"error_overdepending\", \"false\").lower()\n        == \"true\",\n    )\n    parser.add_argument(\n",
                    "rendered": {
                      "text": "            \"`run_exports` are not auto-loaded by the OSes DSO loading mechanism by \"\n            \"any of the files in this package.\"\n        ),\n        default=context.conda_build.get(\"error_overdepending\", \"false\").lower()\n        == \"true\",\n    )\n    parser.add_argument(\n",
                      "markdown": "`            \"`run_exports` are not auto-loaded by the OSes DSO loading mechanism by \"\n            \"any of the files in this package.\"\n        ),\n        default=context.conda_build.get(\"error_overdepending\", \"false\").lower()\n        == \"true\",\n    )\n    parser.add_argument(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 35,
                  "endLine": 368,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            \"linked to any executables or shared libraries in built packages.  This is currently \"\n            \"the default behavior, but will change in conda-build 4.0.\"\n        ),\n        default=context.conda_build.get(\"error_overlinking\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--error-overdepending\",\n",
                    "rendered": {
                      "text": "            \"linked to any executables or shared libraries in built packages.  This is currently \"\n            \"the default behavior, but will change in conda-build 4.0.\"\n        ),\n        default=context.conda_build.get(\"error_overlinking\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--error-overdepending\",\n",
                      "markdown": "`            \"linked to any executables or shared libraries in built packages.  This is currently \"\n            \"the default behavior, but will change in conda-build 4.0.\"\n        ),\n        default=context.conda_build.get(\"error_overlinking\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--error-overdepending\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 35,
                  "endLine": 357,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            \"linked to any executables or shared libraries in built packages.  This is disabled \"\n            \"by default, but will be enabled by default in conda-build 4.0.\"\n        ),\n        default=context.conda_build.get(\"error_overlinking\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--no-error-overlinking\",\n",
                    "rendered": {
                      "text": "            \"linked to any executables or shared libraries in built packages.  This is disabled \"\n            \"by default, but will be enabled by default in conda-build 4.0.\"\n        ),\n        default=context.conda_build.get(\"error_overlinking\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--no-error-overlinking\",\n",
                      "markdown": "`            \"linked to any executables or shared libraries in built packages.  This is disabled \"\n            \"by default, but will be enabled by default in conda-build 4.0.\"\n        ),\n        default=context.conda_build.get(\"error_overlinking\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--no-error-overlinking\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 35,
                  "endLine": 288,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            \"folder to dump output package to.  Package are moved here if build or test succeeds.\"\n            \"  Destination folder must exist prior to using this.\"\n        ),\n        default=context.conda_build.get(\"output_folder\"),\n    )\n    parser.add_argument(\n        \"--no-prefix-length-fallback\",\n",
                    "rendered": {
                      "text": "            \"folder to dump output package to.  Package are moved here if build or test succeeds.\"\n            \"  Destination folder must exist prior to using this.\"\n        ),\n        default=context.conda_build.get(\"output_folder\"),\n    )\n    parser.add_argument(\n        \"--no-prefix-length-fallback\",\n",
                      "markdown": "`            \"folder to dump output package to.  Package are moved here if build or test succeeds.\"\n            \"  Destination folder must exist prior to using this.\"\n        ),\n        default=context.conda_build.get(\"output_folder\"),\n    )\n    parser.add_argument(\n        \"--no-prefix-length-fallback\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 35,
                  "endLine": 279,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        action=\"store_true\",\n        dest=\"exit_on_verify_error\",\n        help=\"Exit if any conda-verify check fail, instead of only printing them\",\n        default=context.conda_build.get(\"exit_on_verify_error\", \"false\").lower()\n        == \"true\",\n    )\n    parser.add_argument(\n",
                    "rendered": {
                      "text": "        action=\"store_true\",\n        dest=\"exit_on_verify_error\",\n        help=\"Exit if any conda-verify check fail, instead of only printing them\",\n        default=context.conda_build.get(\"exit_on_verify_error\", \"false\").lower()\n        == \"true\",\n    )\n    parser.add_argument(\n",
                      "markdown": "`        action=\"store_true\",\n        dest=\"exit_on_verify_error\",\n        help=\"Exit if any conda-verify check fail, instead of only printing them\",\n        default=context.conda_build.get(\"exit_on_verify_error\", \"false\").lower()\n        == \"true\",\n    )\n    parser.add_argument(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 35,
                  "endLine": 272,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        action=\"store_false\",\n        dest=\"verify\",\n        help=\"do not run verification on recipes or packages when building\",\n        default=context.conda_build.get(\"verify\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--strict-verify\",\n",
                    "rendered": {
                      "text": "        action=\"store_false\",\n        dest=\"verify\",\n        help=\"do not run verification on recipes or packages when building\",\n        default=context.conda_build.get(\"verify\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--strict-verify\",\n",
                      "markdown": "`        action=\"store_false\",\n        dest=\"verify\",\n        help=\"do not run verification on recipes or packages when building\",\n        default=context.conda_build.get(\"verify\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--strict-verify\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 35,
                  "endLine": 265,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        \"--verify\",\n        action=\"store_true\",\n        help=\"run verification on recipes or packages when building\",\n        default=context.conda_build.get(\"verify\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--no-verify\",\n",
                    "rendered": {
                      "text": "        \"--verify\",\n        action=\"store_true\",\n        help=\"run verification on recipes or packages when building\",\n        default=context.conda_build.get(\"verify\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--no-verify\",\n",
                      "markdown": "`        \"--verify\",\n        action=\"store_true\",\n        help=\"run verification on recipes or packages when building\",\n        default=context.conda_build.get(\"verify\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--no-verify\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 35,
                  "endLine": 252,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            \"paths being too long.\"\n        ),\n        dest=\"build_id_pat\",\n        default=context.conda_build.get(\"build_id_pat\", \"{n}_{t}\"),\n    )\n    parser.add_argument(\n        \"--croot\",\n",
                    "rendered": {
                      "text": "            \"paths being too long.\"\n        ),\n        dest=\"build_id_pat\",\n        default=context.conda_build.get(\"build_id_pat\", \"{n}_{t}\"),\n    )\n    parser.add_argument(\n        \"--croot\",\n",
                      "markdown": "`            \"paths being too long.\"\n        ),\n        dest=\"build_id_pat\",\n        default=context.conda_build.get(\"build_id_pat\", \"{n}_{t}\"),\n    )\n    parser.add_argument(\n        \"--croot\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 35,
                  "endLine": 243,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        ),\n        dest=\"set_build_id\",\n        # note: inverted - dest stores positive logic\n        default=context.conda_build.get(\"set_build_id\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--build-id-pat\",\n",
                    "rendered": {
                      "text": "        ),\n        dest=\"set_build_id\",\n        # note: inverted - dest stores positive logic\n        default=context.conda_build.get(\"set_build_id\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--build-id-pat\",\n",
                      "markdown": "`        ),\n        dest=\"set_build_id\",\n        # note: inverted - dest stores positive logic\n        default=context.conda_build.get(\"set_build_id\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--build-id-pat\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 35,
                  "endLine": 232,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        action=\"store_false\",\n        help=\"do not activate the build and test envs; just prepend to PATH\",\n        dest=\"activate\",\n        default=context.conda_build.get(\"activate\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--no-build-id\",\n",
                    "rendered": {
                      "text": "        action=\"store_false\",\n        help=\"do not activate the build and test envs; just prepend to PATH\",\n        dest=\"activate\",\n        default=context.conda_build.get(\"activate\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--no-build-id\",\n",
                      "markdown": "`        action=\"store_false\",\n        help=\"do not activate the build and test envs; just prepend to PATH\",\n        dest=\"activate\",\n        default=context.conda_build.get(\"activate\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--no-build-id\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 35,
                  "endLine": 225,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        \"--repository\",\n        \"-r\",\n        help=\"PyPI repository to upload to\",\n        default=context.conda_build.get(\"pypi_repository\", \"pypitest\"),\n    )\n    parser.add_argument(\n        \"--no-activate\",\n",
                    "rendered": {
                      "text": "        \"--repository\",\n        \"-r\",\n        help=\"PyPI repository to upload to\",\n        default=context.conda_build.get(\"pypi_repository\", \"pypitest\"),\n    )\n    parser.add_argument(\n        \"--no-activate\",\n",
                      "markdown": "`        \"--repository\",\n        \"-r\",\n        help=\"PyPI repository to upload to\",\n        default=context.conda_build.get(\"pypi_repository\", \"pypitest\"),\n    )\n    parser.add_argument(\n        \"--no-activate\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 45,
                  "endLine": 217,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        help=\"path to .pypirc file to use when uploading to pypi\",\n        default=(\n            abspath(expanduser(expandvars(pypirc)))\n            if (pypirc := context.conda_build.get(\"pypirc\"))\n            else None\n        ),\n    )\n",
                    "rendered": {
                      "text": "        help=\"path to .pypirc file to use when uploading to pypi\",\n        default=(\n            abspath(expanduser(expandvars(pypirc)))\n            if (pypirc := context.conda_build.get(\"pypirc\"))\n            else None\n        ),\n    )\n",
                      "markdown": "`        help=\"path to .pypirc file to use when uploading to pypi\",\n        default=(\n            abspath(expanduser(expandvars(pypirc)))\n            if (pypirc := context.conda_build.get(\"pypirc\"))\n            else None\n        ),\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 35,
                  "endLine": 191,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        ),\n        type=int,\n        choices=range(1, 23),\n        default=context.conda_build.get(\n            \"zstd_compression_level\", zstd_compression_level_default\n        ),\n    )\n",
                    "rendered": {
                      "text": "        ),\n        type=int,\n        choices=range(1, 23),\n        default=context.conda_build.get(\n            \"zstd_compression_level\", zstd_compression_level_default\n        ),\n    )\n",
                      "markdown": "`        ),\n        type=int,\n        choices=range(1, 23),\n        default=context.conda_build.get(\n            \"zstd_compression_level\", zstd_compression_level_default\n        ),\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 35,
                  "endLine": 166,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    parser.add_argument(\n        \"--user\",\n        help=\"User/organization to upload packages to on anaconda.org or pypi\",\n        default=context.conda_build.get(\"user\"),\n    )\n    parser.add_argument(\n        \"--label\",\n",
                    "rendered": {
                      "text": "    parser.add_argument(\n        \"--user\",\n        help=\"User/organization to upload packages to on anaconda.org or pypi\",\n        default=context.conda_build.get(\"user\"),\n    )\n    parser.add_argument(\n        \"--label\",\n",
                      "markdown": "`    parser.add_argument(\n        \"--user\",\n        help=\"User/organization to upload packages to on anaconda.org or pypi\",\n        default=context.conda_build.get(\"user\"),\n    )\n    parser.add_argument(\n        \"--label\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 35,
                  "endLine": 161,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    parser.add_argument(\n        \"--token\",\n        help=\"Token to pass through to anaconda upload\",\n        default=context.conda_build.get(\"anaconda_token\"),\n    )\n    parser.add_argument(\n        \"--user\",\n",
                    "rendered": {
                      "text": "    parser.add_argument(\n        \"--token\",\n        help=\"Token to pass through to anaconda upload\",\n        default=context.conda_build.get(\"anaconda_token\"),\n    )\n    parser.add_argument(\n        \"--user\",\n",
                      "markdown": "`    parser.add_argument(\n        \"--token\",\n        help=\"Token to pass through to anaconda upload\",\n        default=context.conda_build.get(\"anaconda_token\"),\n    )\n    parser.add_argument(\n        \"--user\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 35,
                  "endLine": 151,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        \"--quiet\",\n        action=\"store_true\",\n        help=\"do not display progress bar\",\n        default=context.conda_build.get(\"quiet\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--debug\",\n",
                    "rendered": {
                      "text": "        \"--quiet\",\n        action=\"store_true\",\n        help=\"do not display progress bar\",\n        default=context.conda_build.get(\"quiet\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--debug\",\n",
                      "markdown": "`        \"--quiet\",\n        action=\"store_true\",\n        help=\"do not display progress bar\",\n        default=context.conda_build.get(\"quiet\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--debug\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 35,
                  "endLine": 131,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            \"Skip recipes for which there already exists an existing build \"\n            \"(locally or in the channels).\"\n        ),\n        default=context.conda_build.get(\"skip_existing\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--keep-old-work\",\n",
                    "rendered": {
                      "text": "            \"Skip recipes for which there already exists an existing build \"\n            \"(locally or in the channels).\"\n        ),\n        default=context.conda_build.get(\"skip_existing\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--keep-old-work\",\n",
                      "markdown": "`            \"Skip recipes for which there already exists an existing build \"\n            \"(locally or in the channels).\"\n        ),\n        default=context.conda_build.get(\"skip_existing\", \"false\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"--keep-old-work\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 35,
                  "endLine": 76,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        action=\"store_false\",\n        help=\"Don't include the recipe inside the built package.\",\n        dest=\"include_recipe\",\n        default=context.conda_build.get(\"include_recipe\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"-s\",\n",
                    "rendered": {
                      "text": "        action=\"store_false\",\n        help=\"Don't include the recipe inside the built package.\",\n        dest=\"include_recipe\",\n        default=context.conda_build.get(\"include_recipe\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"-s\",\n",
                      "markdown": "`        action=\"store_false\",\n        help=\"Don't include the recipe inside the built package.\",\n        dest=\"include_recipe\",\n        default=context.conda_build.get(\"include_recipe\", \"true\").lower() == \"true\",\n    )\n    parser.add_argument(\n        \"-s\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 14,
                  "endLine": 198,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    pypi_grp = parser.add_argument_group(\"PyPI upload parameters (twine)\")\n    pypi_grp.add_argument(\n        \"--password\",\n        help=\"password to use when uploading packages to pypi\",\n    )\n    pypi_grp.add_argument(\n        \"--sign\", default=False, help=\"sign files when uploading to pypi\"\n",
                    "rendered": {
                      "text": "    pypi_grp = parser.add_argument_group(\"PyPI upload parameters (twine)\")\n    pypi_grp.add_argument(\n        \"--password\",\n        help=\"password to use when uploading packages to pypi\",\n    )\n    pypi_grp.add_argument(\n        \"--sign\", default=False, help=\"sign files when uploading to pypi\"\n",
                      "markdown": "`    pypi_grp = parser.add_argument_group(\"PyPI upload parameters (twine)\")\n    pypi_grp.add_argument(\n        \"--password\",\n        help=\"password to use when uploading packages to pypi\",\n    )\n    pypi_grp.add_argument(\n        \"--sign\", default=False, help=\"sign files when uploading to pypi\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 11,
                  "endLine": 197,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    )\n    pypi_grp = parser.add_argument_group(\"PyPI upload parameters (twine)\")\n    pypi_grp.add_argument(\n        \"--password\",\n        help=\"password to use when uploading packages to pypi\",\n    )\n    pypi_grp.add_argument(\n",
                    "rendered": {
                      "text": "    )\n    pypi_grp = parser.add_argument_group(\"PyPI upload parameters (twine)\")\n    pypi_grp.add_argument(\n        \"--password\",\n        help=\"password to use when uploading packages to pypi\",\n    )\n    pypi_grp.add_argument(\n",
                      "markdown": "`    )\n    pypi_grp = parser.add_argument_group(\"PyPI upload parameters (twine)\")\n    pypi_grp.add_argument(\n        \"--password\",\n        help=\"password to use when uploading packages to pypi\",\n    )\n    pypi_grp.add_argument(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 19,
                  "endLine": 334,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        action=\"store_false\",\n        help=(\n            \"Disable locking, to avoid unresolved race condition issues.  Unsafe to run multiple \"\n            \"builds at once on one system with this set.\"\n        ),\n    )\n    parser.add_argument(\n",
                    "rendered": {
                      "text": "        action=\"store_false\",\n        help=(\n            \"Disable locking, to avoid unresolved race condition issues.  Unsafe to run multiple \"\n            \"builds at once on one system with this set.\"\n        ),\n    )\n    parser.add_argument(\n",
                      "markdown": "`        action=\"store_false\",\n        help=(\n            \"Disable locking, to avoid unresolved race condition issues.  Unsafe to run multiple \"\n            \"builds at once on one system with this set.\"\n        ),\n    )\n    parser.add_argument(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 54,
                  "endLine": 426,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    parser.add_argument(\n        \"--cache-dir\",\n        help=(\n            \"Path to store the source files (archives, git clones, etc.) during the build.\"\n        ),\n        default=(\n            abspath(expanduser(expandvars(cache_dir)))\n",
                    "rendered": {
                      "text": "    parser.add_argument(\n        \"--cache-dir\",\n        help=(\n            \"Path to store the source files (archives, git clones, etc.) during the build.\"\n        ),\n        default=(\n            abspath(expanduser(expandvars(cache_dir)))\n",
                      "markdown": "`    parser.add_argument(\n        \"--cache-dir\",\n        help=(\n            \"Path to store the source files (archives, git clones, etc.) during the build.\"\n        ),\n        default=(\n            abspath(expanduser(expandvars(cache_dir)))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 24,
                  "endLine": 323,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            \"location instead, so that you maintain a known prefix length.\"\n        ),\n        # this default will change to false in the future, when we deem that the community has\n        #     had enough time to build long-prefix length packages.\n        default=255,\n        type=int,\n    )\n",
                    "rendered": {
                      "text": "            \"location instead, so that you maintain a known prefix length.\"\n        ),\n        # this default will change to false in the future, when we deem that the community has\n        #     had enough time to build long-prefix length packages.\n        default=255,\n        type=int,\n    )\n",
                      "markdown": "`            \"location instead, so that you maintain a known prefix length.\"\n        ),\n        # this default will change to false in the future, when we deem that the community has\n        #     had enough time to build long-prefix length packages.\n        default=255,\n        type=int,\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_build.py"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 24,
                  "endLine": 309,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            \" fails due to insufficient prefix length in dependency packages\"\n        ),\n        # this default will change to false in the future, when we deem that the community has\n        #     had enough time to build long-prefix length packages.\n        default=True,\n    )\n    parser.add_argument(\n",
                    "rendered": {
                      "text": "            \" fails due to insufficient prefix length in dependency packages\"\n        ),\n        # this default will change to false in the future, when we deem that the community has\n        #     had enough time to build long-prefix length packages.\n        default=True,\n    )\n    parser.add_argument(\n",
                      "markdown": "`            \" fails due to insufficient prefix length in dependency packages\"\n        ),\n        # this default will change to false in the future, when we deem that the community has\n        #     had enough time to build long-prefix length packages.\n        default=True,\n    )\n    parser.add_argument(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build-24.9.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 4,
                  "endLine": 131,
                  "endColumn": 10,
                  "snippet": {
                    "text": "you will be prompted to upload to [anaconda.org](https://anaconda.org).\n\nTo add your [anaconda.org](https://anaconda.org) channel, or the channel of others to `conda` so that `conda install`\nwill find and install their packages, run\n\n```bash\n$ conda config --add channels https://conda.anaconda.org/<USERNAME>\n",
                    "rendered": {
                      "text": "you will be prompted to upload to [anaconda.org](https://anaconda.org).\n\nTo add your [anaconda.org](https://anaconda.org) channel, or the channel of others to `conda` so that `conda install`\nwill find and install their packages, run\n\n```bash\n$ conda config --add channels https://conda.anaconda.org/<USERNAME>\n",
                      "markdown": "`you will be prompted to upload to [anaconda.org](https://anaconda.org).\n\nTo add your [anaconda.org](https://anaconda.org) channel, or the channel of others to `conda` so that `conda install`\nwill find and install their packages, run\n\n```bash\n$ conda config --add channels https://conda.anaconda.org/<USERNAME>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build-24.9.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 44,
                  "endLine": 108,
                  "endColumn": 53,
                  "snippet": {
                    "text": "## Building Your Own Packages\n\nYou can easily build your own packages for `conda`, and upload them to\n[anaconda.org](https://anaconda.org), a free service for hosting packages for `conda`, as\nwell as other package managers. To build a package, create a recipe. See\n[AnacondaRecipes](https://github.com/AnacondaRecipes) and [conda-forge](https://github.com/conda-forge) for many example recipes, and\n[`conda-build` documentation](https://docs.conda.io/projects/conda-build/en/latest/index.html) on how to build\n",
                    "rendered": {
                      "text": "## Building Your Own Packages\n\nYou can easily build your own packages for `conda`, and upload them to\n[anaconda.org](https://anaconda.org), a free service for hosting packages for `conda`, as\nwell as other package managers. To build a package, create a recipe. See\n[AnacondaRecipes](https://github.com/AnacondaRecipes) and [conda-forge](https://github.com/conda-forge) for many example recipes, and\n[`conda-build` documentation](https://docs.conda.io/projects/conda-build/en/latest/index.html) on how to build\n",
                      "markdown": "`## Building Your Own Packages\n\nYou can easily build your own packages for `conda`, and upload them to\n[anaconda.org](https://anaconda.org), a free service for hosting packages for `conda`, as\nwell as other package managers. To build a package, create a recipe. See\n[AnacondaRecipes](https://github.com/AnacondaRecipes) and [conda-forge](https://github.com/conda-forge) for many example recipes, and\n[`conda-build` documentation](https://docs.conda.io/projects/conda-build/en/latest/index.html) on how to build\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build-24.9.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 33,
                  "endLine": 102,
                  "snippet": {
                    "text": "# Display information about current conda install\n$ conda info\n\n# Install conda-build in the base env\n$ conda install -n base conda-build\n```\n\n## Building Your Own Packages\n",
                    "rendered": {
                      "text": "# Display information about current conda install\n$ conda info\n\n# Install conda-build in the base env\n$ conda install -n base conda-build\n```\n\n## Building Your Own Packages\n",
                      "markdown": "`# Display information about current conda install\n$ conda info\n\n# Install conda-build in the base env\n$ conda install -n base conda-build\n```\n\n## Building Your Own Packages\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 31,
                  "endLine": 140,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    msvc_env_lines.append(\"set MSSdk=1\")\n\n    if not version:\n        py_ver = config.variant.get(\"python\", get_default_variant(config)[\"python\"])\n        if int(py_ver[0]) >= 3:\n            if int(py_ver.split(\".\")[1]) < 5:\n                version = \"10.0\"\n",
                    "rendered": {
                      "text": "    msvc_env_lines.append(\"set MSSdk=1\")\n\n    if not version:\n        py_ver = config.variant.get(\"python\", get_default_variant(config)[\"python\"])\n        if int(py_ver[0]) >= 3:\n            if int(py_ver.split(\".\")[1]) < 5:\n                version = \"10.0\"\n",
                      "markdown": "`    msvc_env_lines.append(\"set MSSdk=1\")\n\n    if not version:\n        py_ver = config.variant.get(\"python\", get_default_variant(config)[\"python\"])\n        if int(py_ver[0]) >= 3:\n            if int(py_ver.split(\".\")[1]) < 5:\n                version = \"10.0\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 4,
                  "endLine": 306,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    #    See note above about inverted logic on \"NO\" variables\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n\n    # pip's cache directory (PIP_NO_CACHE_DIR) should not be\n",
                    "rendered": {
                      "text": "    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    #    See note above about inverted logic on \"NO\" variables\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n\n    # pip's cache directory (PIP_NO_CACHE_DIR) should not be\n",
                      "markdown": "`    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    #    See note above about inverted logic on \"NO\" variables\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n\n    # pip's cache directory (PIP_NO_CACHE_DIR) should not be\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 17,
                  "endLine": 303,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    #    See note above about inverted logic on \"NO\" variables\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n",
                    "rendered": {
                      "text": "    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    #    See note above about inverted logic on \"NO\" variables\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n",
                      "markdown": "`    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    #    See note above about inverted logic on \"NO\" variables\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 12,
                  "endLine": 293,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    #       Leaving it as is, for now, since we need a quick, non-disruptive patch release.\n    with path_prepended(m.config.host_prefix):\n        with path_prepended(m.config.build_prefix):\n            env = environ.get_dict(m=m)\n    env[\"CONDA_BUILD_STATE\"] = \"BUILD\"\n\n    # hard-code this because we never want pip's build isolation\n",
                    "rendered": {
                      "text": "    #       Leaving it as is, for now, since we need a quick, non-disruptive patch release.\n    with path_prepended(m.config.host_prefix):\n        with path_prepended(m.config.build_prefix):\n            env = environ.get_dict(m=m)\n    env[\"CONDA_BUILD_STATE\"] = \"BUILD\"\n\n    # hard-code this because we never want pip's build isolation\n",
                      "markdown": "`    #       Leaving it as is, for now, since we need a quick, non-disruptive patch release.\n    with path_prepended(m.config.host_prefix):\n        with path_prepended(m.config.build_prefix):\n            env = environ.get_dict(m=m)\n    env[\"CONDA_BUILD_STATE\"] = \"BUILD\"\n\n    # hard-code this because we never want pip's build isolation\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 55,
                  "endLine": 269,
                  "endColumn": 71,
                  "snippet": {
                    "text": "            )\n        # Reset echo on, because MSVC scripts might have turned it off\n        fo.write(\"@echo on\\n\")\n        fo.write('set \"INCLUDE={};%INCLUDE%\"\\n'.format(env[\"LIBRARY_INC\"]))\n        fo.write('set \"LIB={};%LIB%\"\\n'.format(env[\"LIBRARY_LIB\"]))\n        if m.config.activate and m.name() != \"conda\":\n            write_bat_activation_text(fo, m)\n",
                    "rendered": {
                      "text": "            )\n        # Reset echo on, because MSVC scripts might have turned it off\n        fo.write(\"@echo on\\n\")\n        fo.write('set \"INCLUDE={};%INCLUDE%\"\\n'.format(env[\"LIBRARY_INC\"]))\n        fo.write('set \"LIB={};%LIB%\"\\n'.format(env[\"LIBRARY_LIB\"]))\n        if m.config.activate and m.name() != \"conda\":\n            write_bat_activation_text(fo, m)\n",
                      "markdown": "`            )\n        # Reset echo on, because MSVC scripts might have turned it off\n        fo.write(\"@echo on\\n\")\n        fo.write('set \"INCLUDE={};%INCLUDE%\"\\n'.format(env[\"LIBRARY_INC\"]))\n        fo.write('set \"LIB={};%LIB%\"\\n'.format(env[\"LIBRARY_LIB\"]))\n        if m.config.activate and m.name() != \"conda\":\n            write_bat_activation_text(fo, m)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 7,
                  "endLine": 330,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    work_script, env_script = write_build_scripts(m, env, bld_bat)\n\n    if not provision_only and os.path.isfile(work_script):\n        cmd = [\"cmd.exe\", \"/d\", \"/c\", os.path.basename(work_script)]\n        # rewrite long paths in stdout back to their env variables\n        if m.config.debug or m.config.no_rewrite_stdout_env:\n            rewrite_env = None\n",
                    "rendered": {
                      "text": "    work_script, env_script = write_build_scripts(m, env, bld_bat)\n\n    if not provision_only and os.path.isfile(work_script):\n        cmd = [\"cmd.exe\", \"/d\", \"/c\", os.path.basename(work_script)]\n        # rewrite long paths in stdout back to their env variables\n        if m.config.debug or m.config.no_rewrite_stdout_env:\n            rewrite_env = None\n",
                      "markdown": "`    work_script, env_script = write_build_scripts(m, env, bld_bat)\n\n    if not provision_only and os.path.isfile(work_script):\n        cmd = [\"cmd.exe\", \"/d\", \"/c\", os.path.basename(work_script)]\n        # rewrite long paths in stdout back to their env variables\n        if m.config.debug or m.config.no_rewrite_stdout_env:\n            rewrite_env = None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 26,
                  "endLine": 119,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            \"variant-powered compiler configuration instead. Note that msvc_compiler\"\n            \"is incompatible with the new {{{{compiler('c')}}}} jinja scheme.\"\n        )\n    # this has been an int at times.  Make sure it's a string for consistency.\n    bits = str(bits)\n    arch_selector = \"x86\" if bits == \"32\" else \"amd64\"\n\n",
                    "rendered": {
                      "text": "            \"variant-powered compiler configuration instead. Note that msvc_compiler\"\n            \"is incompatible with the new {{{{compiler('c')}}}} jinja scheme.\"\n        )\n    # this has been an int at times.  Make sure it's a string for consistency.\n    bits = str(bits)\n    arch_selector = \"x86\" if bits == \"32\" else \"amd64\"\n\n",
                      "markdown": "`            \"variant-powered compiler configuration instead. Note that msvc_compiler\"\n            \"is incompatible with the new {{{{compiler('c')}}}} jinja scheme.\"\n        )\n    # this has been an int at times.  Make sure it's a string for consistency.\n    bits = str(bits)\n    arch_selector = \"x86\" if bits == \"32\" else \"amd64\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 24,
                  "endLine": 91,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    if vstools in os.environ:\n        return os.path.join(os.environ[vstools], \"..\\\\..\\\\VC\\\\vcvarsall.bat\")\n    else:\n        # prefer looking at env var; fall back to program files defaults\n        return os.path.join(\n            PROGRAM_FILES_PATH,\n            f\"Microsoft Visual Studio {version}\",\n",
                    "rendered": {
                      "text": "    if vstools in os.environ:\n        return os.path.join(os.environ[vstools], \"..\\\\..\\\\VC\\\\vcvarsall.bat\")\n    else:\n        # prefer looking at env var; fall back to program files defaults\n        return os.path.join(\n            PROGRAM_FILES_PATH,\n            f\"Microsoft Visual Studio {version}\",\n",
                      "markdown": "`    if vstools in os.environ:\n        return os.path.join(os.environ[vstools], \"..\\\\..\\\\VC\\\\vcvarsall.bat\")\n    else:\n        # prefer looking at env var; fall back to program files defaults\n        return os.path.join(\n            PROGRAM_FILES_PATH,\n            f\"Microsoft Visual Studio {version}\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 64,
                  "endLine": 14,
                  "snippet": {
                    "text": "# Leverage the hard work done by setuptools/distutils to find vcvarsall using\n# either the registry or the VS**COMNTOOLS environment variable\ntry:\n    from setuptools._distutils.msvc9compiler import WINSDK_BASE, Reg\n    from setuptools._distutils.msvc9compiler import (\n        find_vcvarsall as distutils_find_vcvarsall,\n    )\nexcept:\n",
                    "rendered": {
                      "text": "# Leverage the hard work done by setuptools/distutils to find vcvarsall using\n# either the registry or the VS**COMNTOOLS environment variable\ntry:\n    from setuptools._distutils.msvc9compiler import WINSDK_BASE, Reg\n    from setuptools._distutils.msvc9compiler import (\n        find_vcvarsall as distutils_find_vcvarsall,\n    )\nexcept:\n",
                      "markdown": "`# Leverage the hard work done by setuptools/distutils to find vcvarsall using\n# either the registry or the VS**COMNTOOLS environment variable\ntry:\n    from setuptools._distutils.msvc9compiler import WINSDK_BASE, Reg\n    from setuptools._distutils.msvc9compiler import (\n        find_vcvarsall as distutils_find_vcvarsall,\n    )\nexcept:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 29,
                  "endLine": 338,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            rewrite_env = {\n                k: env[k] for k in [\"PREFIX\", \"BUILD_PREFIX\", \"SRC_DIR\"] if k in env\n            }\n            print(f\"Rewriting env in output: {pprint.pformat(rewrite_env)}\")\n        check_call_env(\n            cmd, cwd=m.config.work_dir, stats=stats, rewrite_stdout_env=rewrite_env\n        )\n",
                    "rendered": {
                      "text": "            rewrite_env = {\n                k: env[k] for k in [\"PREFIX\", \"BUILD_PREFIX\", \"SRC_DIR\"] if k in env\n            }\n            print(f\"Rewriting env in output: {pprint.pformat(rewrite_env)}\")\n        check_call_env(\n            cmd, cwd=m.config.work_dir, stats=stats, rewrite_stdout_env=rewrite_env\n        )\n",
                      "markdown": "`            rewrite_env = {\n                k: env[k] for k in [\"PREFIX\", \"BUILD_PREFIX\", \"SRC_DIR\"] if k in env\n            }\n            print(f\"Rewriting env in output: {pprint.pformat(rewrite_env)}\")\n        check_call_env(\n            cmd, cwd=m.config.work_dir, stats=stats, rewrite_stdout_env=rewrite_env\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 80,
                  "endLine": 337,
                  "snippet": {
                    "text": "            rewrite_env = None\n        else:\n            rewrite_env = {\n                k: env[k] for k in [\"PREFIX\", \"BUILD_PREFIX\", \"SRC_DIR\"] if k in env\n            }\n            print(f\"Rewriting env in output: {pprint.pformat(rewrite_env)}\")\n        check_call_env(\n            cmd, cwd=m.config.work_dir, stats=stats, rewrite_stdout_env=rewrite_env\n",
                    "rendered": {
                      "text": "            rewrite_env = None\n        else:\n            rewrite_env = {\n                k: env[k] for k in [\"PREFIX\", \"BUILD_PREFIX\", \"SRC_DIR\"] if k in env\n            }\n            print(f\"Rewriting env in output: {pprint.pformat(rewrite_env)}\")\n        check_call_env(\n            cmd, cwd=m.config.work_dir, stats=stats, rewrite_stdout_env=rewrite_env\n",
                      "markdown": "`            rewrite_env = None\n        else:\n            rewrite_env = {\n                k: env[k] for k in [\"PREFIX\", \"BUILD_PREFIX\", \"SRC_DIR\"] if k in env\n            }\n            print(f\"Rewriting env in output: {pprint.pformat(rewrite_env)}\")\n        check_call_env(\n            cmd, cwd=m.config.work_dir, stats=stats, rewrite_stdout_env=rewrite_env\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 52,
                  "endLine": 331,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n    if not provision_only and os.path.isfile(work_script):\n        cmd = [\"cmd.exe\", \"/d\", \"/c\", os.path.basename(work_script)]\n        # rewrite long paths in stdout back to their env variables\n        if m.config.debug or m.config.no_rewrite_stdout_env:\n            rewrite_env = None\n        else:\n",
                    "rendered": {
                      "text": "\n    if not provision_only and os.path.isfile(work_script):\n        cmd = [\"cmd.exe\", \"/d\", \"/c\", os.path.basename(work_script)]\n        # rewrite long paths in stdout back to their env variables\n        if m.config.debug or m.config.no_rewrite_stdout_env:\n            rewrite_env = None\n        else:\n",
                      "markdown": "`\n    if not provision_only and os.path.isfile(work_script):\n        cmd = [\"cmd.exe\", \"/d\", \"/c\", os.path.basename(work_script)]\n        # rewrite long paths in stdout back to their env variables\n        if m.config.debug or m.config.no_rewrite_stdout_env:\n            rewrite_env = None\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 10,
                  "endLine": 315,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    # set PIP_CACHE_DIR to a path in the work dir that does not exist.\n    env[\"PIP_CACHE_DIR\"] = m.config.pip_cache_dir\n\n    # tell pip to not get anything from PyPI, please.  We have everything we need\n    # locally, and if we don't, it's a problem.\n    env[\"PIP_NO_INDEX\"] = True\n\n",
                    "rendered": {
                      "text": "    # set PIP_CACHE_DIR to a path in the work dir that does not exist.\n    env[\"PIP_CACHE_DIR\"] = m.config.pip_cache_dir\n\n    # tell pip to not get anything from PyPI, please.  We have everything we need\n    # locally, and if we don't, it's a problem.\n    env[\"PIP_NO_INDEX\"] = True\n\n",
                      "markdown": "`    # set PIP_CACHE_DIR to a path in the work dir that does not exist.\n    env[\"PIP_CACHE_DIR\"] = m.config.pip_cache_dir\n\n    # tell pip to not get anything from PyPI, please.  We have everything we need\n    # locally, and if we don't, it's a problem.\n    env[\"PIP_NO_INDEX\"] = True\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 33,
                  "endLine": 303,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    #    See note above about inverted logic on \"NO\" variables\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n",
                    "rendered": {
                      "text": "    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    #    See note above about inverted logic on \"NO\" variables\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n",
                      "markdown": "`    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    #    See note above about inverted logic on \"NO\" variables\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 16,
                  "endLine": 303,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    #    See note above about inverted logic on \"NO\" variables\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n",
                    "rendered": {
                      "text": "    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    #    See note above about inverted logic on \"NO\" variables\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n",
                      "markdown": "`    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    #    See note above about inverted logic on \"NO\" variables\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 15,
                  "endLine": 299,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    # hard-code this because we never want pip's build isolation\n    #    https://github.com/conda/conda-build/pull/2972#discussion_r198290241\n    #\n    # Note that pip env \"NO\" variables are inverted logic.\n    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n",
                    "rendered": {
                      "text": "    # hard-code this because we never want pip's build isolation\n    #    https://github.com/conda/conda-build/pull/2972#discussion_r198290241\n    #\n    # Note that pip env \"NO\" variables are inverted logic.\n    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n",
                      "markdown": "`    # hard-code this because we never want pip's build isolation\n    #    https://github.com/conda/conda-build/pull/2972#discussion_r198290241\n    #\n    # Note that pip env \"NO\" variables are inverted logic.\n    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 11,
                  "endLine": 293,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    #       Leaving it as is, for now, since we need a quick, non-disruptive patch release.\n    with path_prepended(m.config.host_prefix):\n        with path_prepended(m.config.build_prefix):\n            env = environ.get_dict(m=m)\n    env[\"CONDA_BUILD_STATE\"] = \"BUILD\"\n\n    # hard-code this because we never want pip's build isolation\n",
                    "rendered": {
                      "text": "    #       Leaving it as is, for now, since we need a quick, non-disruptive patch release.\n    with path_prepended(m.config.host_prefix):\n        with path_prepended(m.config.build_prefix):\n            env = environ.get_dict(m=m)\n    env[\"CONDA_BUILD_STATE\"] = \"BUILD\"\n\n    # hard-code this because we never want pip's build isolation\n",
                      "markdown": "`    #       Leaving it as is, for now, since we need a quick, non-disruptive patch release.\n    with path_prepended(m.config.host_prefix):\n        with path_prepended(m.config.build_prefix):\n            env = environ.get_dict(m=m)\n    env[\"CONDA_BUILD_STATE\"] = \"BUILD\"\n\n    # hard-code this because we never want pip's build isolation\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 27,
                  "endLine": 91,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    if vstools in os.environ:\n        return os.path.join(os.environ[vstools], \"..\\\\..\\\\VC\\\\vcvarsall.bat\")\n    else:\n        # prefer looking at env var; fall back to program files defaults\n        return os.path.join(\n            PROGRAM_FILES_PATH,\n            f\"Microsoft Visual Studio {version}\",\n",
                    "rendered": {
                      "text": "    if vstools in os.environ:\n        return os.path.join(os.environ[vstools], \"..\\\\..\\\\VC\\\\vcvarsall.bat\")\n    else:\n        # prefer looking at env var; fall back to program files defaults\n        return os.path.join(\n            PROGRAM_FILES_PATH,\n            f\"Microsoft Visual Studio {version}\",\n",
                      "markdown": "`    if vstools in os.environ:\n        return os.path.join(os.environ[vstools], \"..\\\\..\\\\VC\\\\vcvarsall.bat\")\n    else:\n        # prefer looking at env var; fall back to program files defaults\n        return os.path.join(\n            PROGRAM_FILES_PATH,\n            f\"Microsoft Visual Studio {version}\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 29,
                  "endLine": 70,
                  "snippet": {
                    "text": "                join(scripts_dir, fn + \".exe\"),\n            )\n\n        # remove the original script\n        os.remove(join(scripts_dir, fn))\n\n\ndef build_vcvarsall_vs_path(version):\n",
                    "rendered": {
                      "text": "                join(scripts_dir, fn + \".exe\"),\n            )\n\n        # remove the original script\n        os.remove(join(scripts_dir, fn))\n\n\ndef build_vcvarsall_vs_path(version):\n",
                      "markdown": "`                join(scripts_dir, fn + \".exe\"),\n            )\n\n        # remove the original script\n        os.remove(join(scripts_dir, fn))\n\n\ndef build_vcvarsall_vs_path(version):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 43,
                  "endLine": 59,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            # If it's a #!python script\n            if not (line.startswith(b\"#!\") and b\"python\" in line.lower()):\n                continue\n            print(f\"Adjusting unix-style #! script {fn}, and adding a .bat file for it\")\n            # copy it with a .py extension (skipping that first #! line)\n            with open(join(scripts_dir, fn + \"-script.py\"), \"wb\") as fo:\n                fo.write(f.read())\n",
                    "rendered": {
                      "text": "            # If it's a #!python script\n            if not (line.startswith(b\"#!\") and b\"python\" in line.lower()):\n                continue\n            print(f\"Adjusting unix-style #! script {fn}, and adding a .bat file for it\")\n            # copy it with a .py extension (skipping that first #! line)\n            with open(join(scripts_dir, fn + \"-script.py\"), \"wb\") as fo:\n                fo.write(f.read())\n",
                      "markdown": "`            # If it's a #!python script\n            if not (line.startswith(b\"#!\") and b\"python\" in line.lower()):\n                continue\n            print(f\"Adjusting unix-style #! script {fn}, and adding a .bat file for it\")\n            # copy it with a .py extension (skipping that first #! line)\n            with open(join(scripts_dir, fn + \"-script.py\"), \"wb\") as fo:\n                fo.write(f.read())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 32,
                  "endLine": 57,
                  "snippet": {
                    "text": "        # read as binary file to ensure we don't run into encoding errors, see #1632\n        with open(join(scripts_dir, fn), \"rb\") as f:\n            line = f.readline()\n            # If it's a #!python script\n            if not (line.startswith(b\"#!\") and b\"python\" in line.lower()):\n                continue\n            print(f\"Adjusting unix-style #! script {fn}, and adding a .bat file for it\")\n            # copy it with a .py extension (skipping that first #! line)\n",
                    "rendered": {
                      "text": "        # read as binary file to ensure we don't run into encoding errors, see #1632\n        with open(join(scripts_dir, fn), \"rb\") as f:\n            line = f.readline()\n            # If it's a #!python script\n            if not (line.startswith(b\"#!\") and b\"python\" in line.lower()):\n                continue\n            print(f\"Adjusting unix-style #! script {fn}, and adding a .bat file for it\")\n            # copy it with a .py extension (skipping that first #! line)\n",
                      "markdown": "`        # read as binary file to ensure we don't run into encoding errors, see #1632\n        with open(join(scripts_dir, fn), \"rb\") as f:\n            line = f.readline()\n            # If it's a #!python script\n            if not (line.startswith(b\"#!\") and b\"python\" in line.lower()):\n                continue\n            print(f\"Adjusting unix-style #! script {fn}, and adding a .bat file for it\")\n            # copy it with a .py extension (skipping that first #! line)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 56,
                  "endLine": 10,
                  "endColumn": 62,
                  "snippet": {
                    "text": "# importing setuptools patches distutils so that it knows how to find VC for python 2.7\nimport setuptools  # noqa\n\n# Leverage the hard work done by setuptools/distutils to find vcvarsall using\n# either the registry or the VS**COMNTOOLS environment variable\ntry:\n    from setuptools._distutils.msvc9compiler import WINSDK_BASE, Reg\n",
                    "rendered": {
                      "text": "# importing setuptools patches distutils so that it knows how to find VC for python 2.7\nimport setuptools  # noqa\n\n# Leverage the hard work done by setuptools/distutils to find vcvarsall using\n# either the registry or the VS**COMNTOOLS environment variable\ntry:\n    from setuptools._distutils.msvc9compiler import WINSDK_BASE, Reg\n",
                      "markdown": "`# importing setuptools patches distutils so that it knows how to find VC for python 2.7\nimport setuptools  # noqa\n\n# Leverage the hard work done by setuptools/distutils to find vcvarsall using\n# either the registry or the VS**COMNTOOLS environment variable\ntry:\n    from setuptools._distutils.msvc9compiler import WINSDK_BASE, Reg\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/windows.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 64,
                  "endLine": 7,
                  "endColumn": 70,
                  "snippet": {
                    "text": "import pprint\nfrom os.path import dirname, isdir, isfile, join\n\n# importing setuptools patches distutils so that it knows how to find VC for python 2.7\nimport setuptools  # noqa\n\n# Leverage the hard work done by setuptools/distutils to find vcvarsall using\n",
                    "rendered": {
                      "text": "import pprint\nfrom os.path import dirname, isdir, isfile, join\n\n# importing setuptools patches distutils so that it knows how to find VC for python 2.7\nimport setuptools  # noqa\n\n# Leverage the hard work done by setuptools/distutils to find vcvarsall using\n",
                      "markdown": "`import pprint\nfrom os.path import dirname, isdir, isfile, join\n\n# importing setuptools patches distutils so that it knows how to find VC for python 2.7\nimport setuptools  # noqa\n\n# Leverage the hard work done by setuptools/distutils to find vcvarsall using\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/version.py"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 46,
                  "endLine": 121,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\ndef _parse_version_parts(s: str) -> Iterator[str]:\n    for part in _legacy_version_component_re.split(s):\n        part = _legacy_version_replacement_map.get(part, part)\n\n        if not part or part == \".\":\n            continue\n",
                    "rendered": {
                      "text": "\ndef _parse_version_parts(s: str) -> Iterator[str]:\n    for part in _legacy_version_component_re.split(s):\n        part = _legacy_version_replacement_map.get(part, part)\n\n        if not part or part == \".\":\n            continue\n",
                      "markdown": "`\ndef _parse_version_parts(s: str) -> Iterator[str]:\n    for part in _legacy_version_component_re.split(s):\n        part = _legacy_version_replacement_map.get(part, part)\n\n        if not part or part == \".\":\n            continue\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 1057,
                  "startColumn": 45,
                  "endLine": 1057,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                    else:\n                        output_metas[\n                            f\"{om.type}: {om.name()}\",\n                            om.config.variant.get(\"target_platform\"),\n                            tuple(\n                                (var, om.config.variant[var])\n                                for var in om.get_used_vars()\n",
                    "rendered": {
                      "text": "                    else:\n                        output_metas[\n                            f\"{om.type}: {om.name()}\",\n                            om.config.variant.get(\"target_platform\"),\n                            tuple(\n                                (var, om.config.variant[var])\n                                for var in om.get_used_vars()\n",
                      "markdown": "`                    else:\n                        output_metas[\n                            f\"{om.type}: {om.name()}\",\n                            om.config.variant.get(\"target_platform\"),\n                            tuple(\n                                (var, om.config.variant[var])\n                                for var in om.get_used_vars()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 1048,
                  "startColumn": 45,
                  "endLine": 1048,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n                        output_metas[\n                            om.dist(),\n                            om.config.variant.get(\"target_platform\"),\n                            tuple(\n                                (var, om.config.variant[var])\n                                for var in om.get_used_vars()\n",
                    "rendered": {
                      "text": "\n                        output_metas[\n                            om.dist(),\n                            om.config.variant.get(\"target_platform\"),\n                            tuple(\n                                (var, om.config.variant[var])\n                                for var in om.get_used_vars()\n",
                      "markdown": "`\n                        output_metas[\n                            om.dist(),\n                            om.config.variant.get(\"target_platform\"),\n                            tuple(\n                                (var, om.config.variant[var])\n                                for var in om.get_used_vars()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 906,
                  "startColumn": 45,
                  "endLine": 906,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            (\n                mv.dist(),\n                mv.config.variant.get(\"target_platform\", mv.config.subdir),\n                tuple((var, mv.config.variant.get(var)) for var in mv.get_used_vars()),\n            )\n        ] = MetaDataTuple(mv, need_source_download, False)\n    # list of tuples.\n",
                    "rendered": {
                      "text": "            (\n                mv.dist(),\n                mv.config.variant.get(\"target_platform\", mv.config.subdir),\n                tuple((var, mv.config.variant.get(var)) for var in mv.get_used_vars()),\n            )\n        ] = MetaDataTuple(mv, need_source_download, False)\n    # list of tuples.\n",
                      "markdown": "`            (\n                mv.dist(),\n                mv.config.variant.get(\"target_platform\", mv.config.subdir),\n                tuple((var, mv.config.variant.get(var)) for var in mv.get_used_vars()),\n            )\n        ] = MetaDataTuple(mv, need_source_download, False)\n    # list of tuples.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 905,
                  "startColumn": 33,
                  "endLine": 905,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        rendered_metadata[\n            (\n                mv.dist(),\n                mv.config.variant.get(\"target_platform\", mv.config.subdir),\n                tuple((var, mv.config.variant.get(var)) for var in mv.get_used_vars()),\n            )\n        ] = MetaDataTuple(mv, need_source_download, False)\n",
                    "rendered": {
                      "text": "        rendered_metadata[\n            (\n                mv.dist(),\n                mv.config.variant.get(\"target_platform\", mv.config.subdir),\n                tuple((var, mv.config.variant.get(var)) for var in mv.get_used_vars()),\n            )\n        ] = MetaDataTuple(mv, need_source_download, False)\n",
                      "markdown": "`        rendered_metadata[\n            (\n                mv.dist(),\n                mv.config.variant.get(\"target_platform\", mv.config.subdir),\n                tuple((var, mv.config.variant.get(var)) for var in mv.get_used_vars()),\n            )\n        ] = MetaDataTuple(mv, need_source_download, False)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 875,
                  "startColumn": 34,
                  "endLine": 875,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        # but after we've reduced the list via the conform_dict filter\n        mv.config.variants = mv.config.copy_variants()\n        get_all_replacements(mv.config.variants)\n        pin_run_as_build = variant.get(\"pin_run_as_build\", {})\n        if mv.numpy_xx and \"numpy\" not in pin_run_as_build:\n            pin_run_as_build[\"numpy\"] = {\"min_pin\": \"x.x\", \"max_pin\": \"x.x\"}\n\n",
                    "rendered": {
                      "text": "        # but after we've reduced the list via the conform_dict filter\n        mv.config.variants = mv.config.copy_variants()\n        get_all_replacements(mv.config.variants)\n        pin_run_as_build = variant.get(\"pin_run_as_build\", {})\n        if mv.numpy_xx and \"numpy\" not in pin_run_as_build:\n            pin_run_as_build[\"numpy\"] = {\"min_pin\": \"x.x\", \"max_pin\": \"x.x\"}\n\n",
                      "markdown": "`        # but after we've reduced the list via the conform_dict filter\n        mv.config.variants = mv.config.copy_variants()\n        get_all_replacements(mv.config.variants)\n        pin_run_as_build = variant.get(\"pin_run_as_build\", {})\n        if mv.numpy_xx and \"numpy\" not in pin_run_as_build:\n            pin_run_as_build[\"numpy\"] = {\"min_pin\": \"x.x\", \"max_pin\": \"x.x\"}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 853,
                  "startColumn": 34,
                  "endLine": 853,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        # start with shared list:\n        mv.config.variants = all_variants\n\n        pin_run_as_build = variant.get(\"pin_run_as_build\", {})\n        if mv.numpy_xx and \"numpy\" not in pin_run_as_build:\n            pin_run_as_build[\"numpy\"] = {\"min_pin\": \"x.x\", \"max_pin\": \"x.x\"}\n\n",
                    "rendered": {
                      "text": "        # start with shared list:\n        mv.config.variants = all_variants\n\n        pin_run_as_build = variant.get(\"pin_run_as_build\", {})\n        if mv.numpy_xx and \"numpy\" not in pin_run_as_build:\n            pin_run_as_build[\"numpy\"] = {\"min_pin\": \"x.x\", \"max_pin\": \"x.x\"}\n\n",
                      "markdown": "`        # start with shared list:\n        mv.config.variants = all_variants\n\n        pin_run_as_build = variant.get(\"pin_run_as_build\", {})\n        if mv.numpy_xx and \"numpy\" not in pin_run_as_build:\n            pin_run_as_build[\"numpy\"] = {\"min_pin\": \"x.x\", \"max_pin\": \"x.x\"}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 67,
                  "endLine": 815,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    if metadata.noarch or metadata.noarch_python:\n        # filter variants by the newest Python version\n        version = sorted(\n            {version for variant in variants if (version := variant.get(\"python\"))},\n            key=lambda key: VersionOrder(key.split(\" \")[0]),\n        )[-1]\n        variants = filter_by_key_value(\n",
                    "rendered": {
                      "text": "    if metadata.noarch or metadata.noarch_python:\n        # filter variants by the newest Python version\n        version = sorted(\n            {version for variant in variants if (version := variant.get(\"python\"))},\n            key=lambda key: VersionOrder(key.split(\" \")[0]),\n        )[-1]\n        variants = filter_by_key_value(\n",
                      "markdown": "`    if metadata.noarch or metadata.noarch_python:\n        # filter variants by the newest Python version\n        version = sorted(\n            {version for variant in variants if (version := variant.get(\"python\"))},\n            key=lambda key: VersionOrder(key.split(\" \")[0]),\n        )[-1]\n        variants = filter_by_key_value(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 727,
                  "startColumn": 39,
                  "endLine": 727,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            if (source_path := source_dict.get(\"path\")) and not isabs(source_path):\n                source_dict[\"path\"] = normpath(join(m.path, source_path))\n            elif (\n                (git_url := source_dict.get(\"git_url\"))\n                # absolute paths are not relative paths\n                and not isabs(git_url)\n                # real urls are not relative paths\n",
                    "rendered": {
                      "text": "            if (source_path := source_dict.get(\"path\")) and not isabs(source_path):\n                source_dict[\"path\"] = normpath(join(m.path, source_path))\n            elif (\n                (git_url := source_dict.get(\"git_url\"))\n                # absolute paths are not relative paths\n                and not isabs(git_url)\n                # real urls are not relative paths\n",
                      "markdown": "`            if (source_path := source_dict.get(\"path\")) and not isabs(source_path):\n                source_dict[\"path\"] = normpath(join(m.path, source_path))\n            elif (\n                (git_url := source_dict.get(\"git_url\"))\n                # absolute paths are not relative paths\n                and not isabs(git_url)\n                # real urls are not relative paths\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 724,
                  "startColumn": 42,
                  "endLine": 724,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        #   best thing is to hard-code the absolute path.  This probably won't exist on any\n        #   system other than the original build machine, but at least it will work there.\n        for source_dict in m.get_section(\"source\"):\n            if (source_path := source_dict.get(\"path\")) and not isabs(source_path):\n                source_dict[\"path\"] = normpath(join(m.path, source_path))\n            elif (\n                (git_url := source_dict.get(\"git_url\"))\n",
                    "rendered": {
                      "text": "        #   best thing is to hard-code the absolute path.  This probably won't exist on any\n        #   system other than the original build machine, but at least it will work there.\n        for source_dict in m.get_section(\"source\"):\n            if (source_path := source_dict.get(\"path\")) and not isabs(source_path):\n                source_dict[\"path\"] = normpath(join(m.path, source_path))\n            elif (\n                (git_url := source_dict.get(\"git_url\"))\n",
                      "markdown": "`        #   best thing is to hard-code the absolute path.  This probably won't exist on any\n        #   system other than the original build machine, but at least it will work there.\n        for source_dict in m.get_section(\"source\"):\n            if (source_path := source_dict.get(\"path\")) and not isabs(source_path):\n                source_dict[\"path\"] = normpath(join(m.path, source_path))\n            elif (\n                (git_url := source_dict.get(\"git_url\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 31,
                  "endLine": 686,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        if isfile(m.requirements_path) and not requirements.get(\"run\"):\n            requirements[\"run\"] = specs_from_url(m.requirements_path)\n        run_deps = requirements.get(\"run\", [])\n\n        versioned_run_deps = [\n            get_pin_from_build(m, dep, full_build_dep_versions) for dep in run_deps\n",
                    "rendered": {
                      "text": "\n        if isfile(m.requirements_path) and not requirements.get(\"run\"):\n            requirements[\"run\"] = specs_from_url(m.requirements_path)\n        run_deps = requirements.get(\"run\", [])\n\n        versioned_run_deps = [\n            get_pin_from_build(m, dep, full_build_dep_versions) for dep in run_deps\n",
                      "markdown": "`\n        if isfile(m.requirements_path) and not requirements.get(\"run\"):\n            requirements[\"run\"] = specs_from_url(m.requirements_path)\n        run_deps = requirements.get(\"run\", [])\n\n        versioned_run_deps = [\n            get_pin_from_build(m, dep, full_build_dep_versions) for dep in run_deps\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 59,
                  "endLine": 684,
                  "endColumn": 64,
                  "snippet": {
                    "text": "            dep.split()[0]: \" \".join(dep.split()[1:]) for dep in full_build_deps\n        }\n\n        if isfile(m.requirements_path) and not requirements.get(\"run\"):\n            requirements[\"run\"] = specs_from_url(m.requirements_path)\n        run_deps = requirements.get(\"run\", [])\n\n",
                    "rendered": {
                      "text": "            dep.split()[0]: \" \".join(dep.split()[1:]) for dep in full_build_deps\n        }\n\n        if isfile(m.requirements_path) and not requirements.get(\"run\"):\n            requirements[\"run\"] = specs_from_url(m.requirements_path)\n        run_deps = requirements.get(\"run\", [])\n\n",
                      "markdown": "`            dep.split()[0]: \" \".join(dep.split()[1:]) for dep in full_build_deps\n        }\n\n        if isfile(m.requirements_path) and not requirements.get(\"run\"):\n            requirements[\"run\"] = specs_from_url(m.requirements_path)\n        run_deps = requirements.get(\"run\", [])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 666,
                  "startColumn": 33,
                  "endLine": 666,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            )\n        pinning_env = \"host\" if m.is_cross else \"build\"\n\n        build_reqs = requirements.get(pinning_env, [])\n        # if python is in the build specs, but doesn't have a specific associated\n        #    version, make sure to add one\n        if build_reqs and \"python\" in build_reqs:\n",
                    "rendered": {
                      "text": "            )\n        pinning_env = \"host\" if m.is_cross else \"build\"\n\n        build_reqs = requirements.get(pinning_env, [])\n        # if python is in the build specs, but doesn't have a specific associated\n        #    version, make sure to add one\n        if build_reqs and \"python\" in build_reqs:\n",
                      "markdown": "`            )\n        pinning_env = \"host\" if m.is_cross else \"build\"\n\n        build_reqs = requirements.get(pinning_env, [])\n        # if python is in the build specs, but doesn't have a specific associated\n        #    version, make sure to add one\n        if build_reqs and \"python\" in build_reqs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 51,
                  "endLine": 642,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n            if not parent_recipe or parent_recipe[\"name\"] == m.name():\n                combine_top_level_metadata_with_output(m, output)\n            requirements = utils.expand_reqs(output.get(\"requirements\", {}))\n            m.meta[\"requirements\"] = requirements\n\n        if requirements := m.get_section(\"requirements\"):\n",
                    "rendered": {
                      "text": "\n            if not parent_recipe or parent_recipe[\"name\"] == m.name():\n                combine_top_level_metadata_with_output(m, output)\n            requirements = utils.expand_reqs(output.get(\"requirements\", {}))\n            m.meta[\"requirements\"] = requirements\n\n        if requirements := m.get_section(\"requirements\"):\n",
                      "markdown": "`\n            if not parent_recipe or parent_recipe[\"name\"] == m.name():\n                combine_top_level_metadata_with_output(m, output)\n            requirements = utils.expand_reqs(output.get(\"requirements\", {}))\n            m.meta[\"requirements\"] = requirements\n\n        if requirements := m.get_section(\"requirements\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 610,
                  "startColumn": 35,
                  "endLine": 610,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        exclude_pattern = None\n        excludes = set(m.config.variant.get(\"ignore_version\", []))\n\n        for key in m.config.variant.get(\"pin_run_as_build\", {}).keys():\n            if key in excludes:\n                excludes.remove(key)\n\n",
                    "rendered": {
                      "text": "        exclude_pattern = None\n        excludes = set(m.config.variant.get(\"ignore_version\", []))\n\n        for key in m.config.variant.get(\"pin_run_as_build\", {}).keys():\n            if key in excludes:\n                excludes.remove(key)\n\n",
                      "markdown": "`        exclude_pattern = None\n        excludes = set(m.config.variant.get(\"ignore_version\", []))\n\n        for key in m.config.variant.get(\"pin_run_as_build\", {}).keys():\n            if key in excludes:\n                excludes.remove(key)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 39,
                  "endLine": 608,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        m.final = True\n    else:\n        exclude_pattern = None\n        excludes = set(m.config.variant.get(\"ignore_version\", []))\n\n        for key in m.config.variant.get(\"pin_run_as_build\", {}).keys():\n            if key in excludes:\n",
                    "rendered": {
                      "text": "        m.final = True\n    else:\n        exclude_pattern = None\n        excludes = set(m.config.variant.get(\"ignore_version\", []))\n\n        for key in m.config.variant.get(\"pin_run_as_build\", {}).keys():\n            if key in excludes:\n",
                      "markdown": "`        m.final = True\n    else:\n        exclude_pattern = None\n        excludes = set(m.config.variant.get(\"ignore_version\", []))\n\n        for key in m.config.variant.get(\"pin_run_as_build\", {}).keys():\n            if key in excludes:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 45,
                  "endLine": 564,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    requirements = metadata.meta.get(\"requirements\", {})\n    # collect deps on a per-section basis\n    for section in \"build\", \"host\", \"run\":\n        deps = utils.ensure_list(requirements.get(section, []))\n        deps_dict = defaultdict(list)\n        for dep in deps:\n            spec_parts = utils.ensure_valid_spec(dep).split()\n",
                    "rendered": {
                      "text": "    requirements = metadata.meta.get(\"requirements\", {})\n    # collect deps on a per-section basis\n    for section in \"build\", \"host\", \"run\":\n        deps = utils.ensure_list(requirements.get(section, []))\n        deps_dict = defaultdict(list)\n        for dep in deps:\n            spec_parts = utils.ensure_valid_spec(dep).split()\n",
                      "markdown": "`    requirements = metadata.meta.get(\"requirements\", {})\n    # collect deps on a per-section basis\n    for section in \"build\", \"host\", \"run\":\n        deps = utils.ensure_list(requirements.get(section, []))\n        deps_dict = defaultdict(list)\n        for dep in deps:\n            spec_parts = utils.ensure_valid_spec(dep).split()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 561,
                  "startColumn": 32,
                  "endLine": 561,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    For metapackages that are pinned exactly, we want to bypass all dependencies that may\n    be less exact.\n    \"\"\"\n    requirements = metadata.meta.get(\"requirements\", {})\n    # collect deps on a per-section basis\n    for section in \"build\", \"host\", \"run\":\n        deps = utils.ensure_list(requirements.get(section, []))\n",
                    "rendered": {
                      "text": "    For metapackages that are pinned exactly, we want to bypass all dependencies that may\n    be less exact.\n    \"\"\"\n    requirements = metadata.meta.get(\"requirements\", {})\n    # collect deps on a per-section basis\n    for section in \"build\", \"host\", \"run\":\n        deps = utils.ensure_list(requirements.get(section, []))\n",
                      "markdown": "`    For metapackages that are pinned exactly, we want to bypass all dependencies that may\n    be less exact.\n    \"\"\"\n    requirements = metadata.meta.get(\"requirements\", {})\n    # collect deps on a per-section basis\n    for section in \"build\", \"host\", \"run\":\n        deps = utils.ensure_list(requirements.get(section, []))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 38,
                  "endLine": 540,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n    run_deps = extra_run_specs | set(utils.ensure_list(requirements.get(\"run\")))\n    run_constrained_deps = extra_run_constrained_specs | set(\n        utils.ensure_list(requirements.get(\"run_constrained\"))\n    )\n\n    for section, deps in (\n",
                    "rendered": {
                      "text": "\n    run_deps = extra_run_specs | set(utils.ensure_list(requirements.get(\"run\")))\n    run_constrained_deps = extra_run_constrained_specs | set(\n        utils.ensure_list(requirements.get(\"run_constrained\"))\n    )\n\n    for section, deps in (\n",
                      "markdown": "`\n    run_deps = extra_run_specs | set(utils.ensure_list(requirements.get(\"run\")))\n    run_constrained_deps = extra_run_constrained_specs | set(\n        utils.ensure_list(requirements.get(\"run_constrained\"))\n    )\n\n    for section, deps in (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 538,
                  "startColumn": 67,
                  "endLine": 538,
                  "endColumn": 72,
                  "snippet": {
                    "text": "            else:\n                host_deps = set(extra_run_specs_from_build.get(\"strong\", []))\n\n    run_deps = extra_run_specs | set(utils.ensure_list(requirements.get(\"run\")))\n    run_constrained_deps = extra_run_constrained_specs | set(\n        utils.ensure_list(requirements.get(\"run_constrained\"))\n    )\n",
                    "rendered": {
                      "text": "            else:\n                host_deps = set(extra_run_specs_from_build.get(\"strong\", []))\n\n    run_deps = extra_run_specs | set(utils.ensure_list(requirements.get(\"run\")))\n    run_constrained_deps = extra_run_constrained_specs | set(\n        utils.ensure_list(requirements.get(\"run_constrained\"))\n    )\n",
                      "markdown": "`            else:\n                host_deps = set(extra_run_specs_from_build.get(\"strong\", []))\n\n    run_deps = extra_run_specs | set(utils.ensure_list(requirements.get(\"run\")))\n    run_constrained_deps = extra_run_constrained_specs | set(\n        utils.ensure_list(requirements.get(\"run_constrained\"))\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 58,
                  "endLine": 536,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                    extra_run_specs_from_build.get(\"weak\", [])\n                )\n            else:\n                host_deps = set(extra_run_specs_from_build.get(\"strong\", []))\n\n    run_deps = extra_run_specs | set(utils.ensure_list(requirements.get(\"run\")))\n    run_constrained_deps = extra_run_constrained_specs | set(\n",
                    "rendered": {
                      "text": "                    extra_run_specs_from_build.get(\"weak\", [])\n                )\n            else:\n                host_deps = set(extra_run_specs_from_build.get(\"strong\", []))\n\n    run_deps = extra_run_specs | set(utils.ensure_list(requirements.get(\"run\")))\n    run_constrained_deps = extra_run_constrained_specs | set(\n",
                      "markdown": "`                    extra_run_specs_from_build.get(\"weak\", [])\n                )\n            else:\n                host_deps = set(extra_run_specs_from_build.get(\"strong\", []))\n\n    run_deps = extra_run_specs | set(utils.ensure_list(requirements.get(\"run\")))\n    run_constrained_deps = extra_run_constrained_specs | set(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 46,
                  "endLine": 533,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                    extra_run_specs_from_build.get(\"weak_constrains\", [])\n                )\n                build_deps = set(build_deps or []).update(\n                    extra_run_specs_from_build.get(\"weak\", [])\n                )\n            else:\n                host_deps = set(extra_run_specs_from_build.get(\"strong\", []))\n",
                    "rendered": {
                      "text": "                    extra_run_specs_from_build.get(\"weak_constrains\", [])\n                )\n                build_deps = set(build_deps or []).update(\n                    extra_run_specs_from_build.get(\"weak\", [])\n                )\n            else:\n                host_deps = set(extra_run_specs_from_build.get(\"strong\", []))\n",
                      "markdown": "`                    extra_run_specs_from_build.get(\"weak_constrains\", [])\n                )\n                build_deps = set(build_deps or []).update(\n                    extra_run_specs_from_build.get(\"weak\", [])\n                )\n            else:\n                host_deps = set(extra_run_specs_from_build.get(\"strong\", []))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 46,
                  "endLine": 530,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            if m.build_is_host:\n                extra_run_specs.update(extra_run_specs_from_build.get(\"weak\", []))\n                extra_run_constrained_specs.update(\n                    extra_run_specs_from_build.get(\"weak_constrains\", [])\n                )\n                build_deps = set(build_deps or []).update(\n                    extra_run_specs_from_build.get(\"weak\", [])\n",
                    "rendered": {
                      "text": "            if m.build_is_host:\n                extra_run_specs.update(extra_run_specs_from_build.get(\"weak\", []))\n                extra_run_constrained_specs.update(\n                    extra_run_specs_from_build.get(\"weak_constrains\", [])\n                )\n                build_deps = set(build_deps or []).update(\n                    extra_run_specs_from_build.get(\"weak\", [])\n",
                      "markdown": "`            if m.build_is_host:\n                extra_run_specs.update(extra_run_specs_from_build.get(\"weak\", []))\n                extra_run_constrained_specs.update(\n                    extra_run_specs_from_build.get(\"weak_constrains\", [])\n                )\n                build_deps = set(build_deps or []).update(\n                    extra_run_specs_from_build.get(\"weak\", [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 65,
                  "endLine": 528,
                  "endColumn": 70,
                  "snippet": {
                    "text": "                extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n            if m.build_is_host:\n                extra_run_specs.update(extra_run_specs_from_build.get(\"weak\", []))\n                extra_run_constrained_specs.update(\n                    extra_run_specs_from_build.get(\"weak_constrains\", [])\n                )\n",
                    "rendered": {
                      "text": "                extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n            if m.build_is_host:\n                extra_run_specs.update(extra_run_specs_from_build.get(\"weak\", []))\n                extra_run_constrained_specs.update(\n                    extra_run_specs_from_build.get(\"weak_constrains\", [])\n                )\n",
                      "markdown": "`                extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n            if m.build_is_host:\n                extra_run_specs.update(extra_run_specs_from_build.get(\"weak\", []))\n                extra_run_constrained_specs.update(\n                    extra_run_specs_from_build.get(\"weak_constrains\", [])\n                )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 42,
                  "endLine": 525,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        else:\n            extra_run_specs = set(extra_run_specs_from_build.get(\"strong\", []))\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n            if m.build_is_host:\n                extra_run_specs.update(extra_run_specs_from_build.get(\"weak\", []))\n",
                    "rendered": {
                      "text": "        else:\n            extra_run_specs = set(extra_run_specs_from_build.get(\"strong\", []))\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n            if m.build_is_host:\n                extra_run_specs.update(extra_run_specs_from_build.get(\"weak\", []))\n",
                      "markdown": "`        else:\n            extra_run_specs = set(extra_run_specs_from_build.get(\"strong\", []))\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n            if m.build_is_host:\n                extra_run_specs.update(extra_run_specs_from_build.get(\"weak\", []))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 60,
                  "endLine": 523,
                  "endColumn": 65,
                  "snippet": {
                    "text": "                extra_run_constrained_specs = set()\n                build_deps = set(build_deps or [])\n        else:\n            extra_run_specs = set(extra_run_specs_from_build.get(\"strong\", []))\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n",
                    "rendered": {
                      "text": "                extra_run_constrained_specs = set()\n                build_deps = set(build_deps or [])\n        else:\n            extra_run_specs = set(extra_run_specs_from_build.get(\"strong\", []))\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n",
                      "markdown": "`                extra_run_constrained_specs = set()\n                build_deps = set(build_deps or [])\n        else:\n            extra_run_specs = set(extra_run_specs_from_build.get(\"strong\", []))\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 46,
                  "endLine": 516,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                extra_run_specs = set(extra_run_specs_from_build.get(\"noarch\", []))\n                extra_run_constrained_specs = set()\n                build_deps = set(build_deps or []).update(\n                    extra_run_specs_from_build.get(\"noarch\", [])\n                )\n            else:\n                extra_run_specs = set()\n",
                    "rendered": {
                      "text": "                extra_run_specs = set(extra_run_specs_from_build.get(\"noarch\", []))\n                extra_run_constrained_specs = set()\n                build_deps = set(build_deps or []).update(\n                    extra_run_specs_from_build.get(\"noarch\", [])\n                )\n            else:\n                extra_run_specs = set()\n",
                      "markdown": "`                extra_run_specs = set(extra_run_specs_from_build.get(\"noarch\", []))\n                extra_run_constrained_specs = set()\n                build_deps = set(build_deps or []).update(\n                    extra_run_specs_from_build.get(\"noarch\", [])\n                )\n            else:\n                extra_run_specs = set()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 64,
                  "endLine": 513,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        host_unsat = []\n        if m.noarch or m.noarch_python:\n            if m.build_is_host:\n                extra_run_specs = set(extra_run_specs_from_build.get(\"noarch\", []))\n                extra_run_constrained_specs = set()\n                build_deps = set(build_deps or []).update(\n                    extra_run_specs_from_build.get(\"noarch\", [])\n",
                    "rendered": {
                      "text": "        host_unsat = []\n        if m.noarch or m.noarch_python:\n            if m.build_is_host:\n                extra_run_specs = set(extra_run_specs_from_build.get(\"noarch\", []))\n                extra_run_constrained_specs = set()\n                build_deps = set(build_deps or []).update(\n                    extra_run_specs_from_build.get(\"noarch\", [])\n",
                      "markdown": "`        host_unsat = []\n        if m.noarch or m.noarch_python:\n            if m.build_is_host:\n                extra_run_specs = set(extra_run_specs_from_build.get(\"noarch\", []))\n                extra_run_constrained_specs = set()\n                build_deps = set(build_deps or []).update(\n                    extra_run_specs_from_build.get(\"noarch\", [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 44,
                  "endLine": 506,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            extra_run_constrained_specs = set(\n                extra_run_specs_from_host.get(\"strong_constrains\", [])\n                + extra_run_specs_from_host.get(\"weak_constrains\", [])\n                + extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n    else:\n        host_deps = []\n",
                    "rendered": {
                      "text": "            extra_run_constrained_specs = set(\n                extra_run_specs_from_host.get(\"strong_constrains\", [])\n                + extra_run_specs_from_host.get(\"weak_constrains\", [])\n                + extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n    else:\n        host_deps = []\n",
                      "markdown": "`            extra_run_constrained_specs = set(\n                extra_run_specs_from_host.get(\"strong_constrains\", [])\n                + extra_run_specs_from_host.get(\"weak_constrains\", [])\n                + extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n    else:\n        host_deps = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 43,
                  "endLine": 505,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            )\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_host.get(\"strong_constrains\", [])\n                + extra_run_specs_from_host.get(\"weak_constrains\", [])\n                + extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n    else:\n",
                    "rendered": {
                      "text": "            )\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_host.get(\"strong_constrains\", [])\n                + extra_run_specs_from_host.get(\"weak_constrains\", [])\n                + extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n    else:\n",
                      "markdown": "`            )\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_host.get(\"strong_constrains\", [])\n                + extra_run_specs_from_host.get(\"weak_constrains\", [])\n                + extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 41,
                  "endLine": 504,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                + extra_run_specs_from_build.get(\"strong\", [])\n            )\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_host.get(\"strong_constrains\", [])\n                + extra_run_specs_from_host.get(\"weak_constrains\", [])\n                + extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n",
                    "rendered": {
                      "text": "                + extra_run_specs_from_build.get(\"strong\", [])\n            )\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_host.get(\"strong_constrains\", [])\n                + extra_run_specs_from_host.get(\"weak_constrains\", [])\n                + extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n",
                      "markdown": "`                + extra_run_specs_from_build.get(\"strong\", [])\n            )\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_host.get(\"strong_constrains\", [])\n                + extra_run_specs_from_host.get(\"weak_constrains\", [])\n                + extra_run_specs_from_build.get(\"strong_constrains\", [])\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 44,
                  "endLine": 501,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            extra_run_specs = set(\n                extra_run_specs_from_host.get(\"strong\", [])\n                + extra_run_specs_from_host.get(\"weak\", [])\n                + extra_run_specs_from_build.get(\"strong\", [])\n            )\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_host.get(\"strong_constrains\", [])\n",
                    "rendered": {
                      "text": "            extra_run_specs = set(\n                extra_run_specs_from_host.get(\"strong\", [])\n                + extra_run_specs_from_host.get(\"weak\", [])\n                + extra_run_specs_from_build.get(\"strong\", [])\n            )\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_host.get(\"strong_constrains\", [])\n",
                      "markdown": "`            extra_run_specs = set(\n                extra_run_specs_from_host.get(\"strong\", [])\n                + extra_run_specs_from_host.get(\"weak\", [])\n                + extra_run_specs_from_build.get(\"strong\", [])\n            )\n            extra_run_constrained_specs = set(\n                extra_run_specs_from_host.get(\"strong_constrains\", [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 43,
                  "endLine": 500,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        else:\n            extra_run_specs = set(\n                extra_run_specs_from_host.get(\"strong\", [])\n                + extra_run_specs_from_host.get(\"weak\", [])\n                + extra_run_specs_from_build.get(\"strong\", [])\n            )\n            extra_run_constrained_specs = set(\n",
                    "rendered": {
                      "text": "        else:\n            extra_run_specs = set(\n                extra_run_specs_from_host.get(\"strong\", [])\n                + extra_run_specs_from_host.get(\"weak\", [])\n                + extra_run_specs_from_build.get(\"strong\", [])\n            )\n            extra_run_constrained_specs = set(\n",
                      "markdown": "`        else:\n            extra_run_specs = set(\n                extra_run_specs_from_host.get(\"strong\", [])\n                + extra_run_specs_from_host.get(\"weak\", [])\n                + extra_run_specs_from_build.get(\"strong\", [])\n            )\n            extra_run_constrained_specs = set(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 41,
                  "endLine": 499,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            extra_run_constrained_specs = set()\n        else:\n            extra_run_specs = set(\n                extra_run_specs_from_host.get(\"strong\", [])\n                + extra_run_specs_from_host.get(\"weak\", [])\n                + extra_run_specs_from_build.get(\"strong\", [])\n            )\n",
                    "rendered": {
                      "text": "            extra_run_constrained_specs = set()\n        else:\n            extra_run_specs = set(\n                extra_run_specs_from_host.get(\"strong\", [])\n                + extra_run_specs_from_host.get(\"weak\", [])\n                + extra_run_specs_from_build.get(\"strong\", [])\n            )\n",
                      "markdown": "`            extra_run_constrained_specs = set()\n        else:\n            extra_run_specs = set(\n                extra_run_specs_from_host.get(\"strong\", [])\n                + extra_run_specs_from_host.get(\"weak\", [])\n                + extra_run_specs_from_build.get(\"strong\", [])\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 59,
                  "endLine": 495,
                  "endColumn": 64,
                  "snippet": {
                    "text": "            m, \"host\", permit_unsatisfiable_variants, exclude_pattern\n        )\n        if m.noarch or m.noarch_python:\n            extra_run_specs = set(extra_run_specs_from_host.get(\"noarch\", []))\n            extra_run_constrained_specs = set()\n        else:\n            extra_run_specs = set(\n",
                    "rendered": {
                      "text": "            m, \"host\", permit_unsatisfiable_variants, exclude_pattern\n        )\n        if m.noarch or m.noarch_python:\n            extra_run_specs = set(extra_run_specs_from_host.get(\"noarch\", []))\n            extra_run_constrained_specs = set()\n        else:\n            extra_run_specs = set(\n",
                      "markdown": "`            m, \"host\", permit_unsatisfiable_variants, exclude_pattern\n        )\n        if m.noarch or m.noarch_python:\n            extra_run_specs = set(extra_run_specs_from_host.get(\"noarch\", []))\n            extra_run_constrained_specs = set()\n        else:\n            extra_run_specs = set(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 51,
                  "endLine": 489,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                matching_output[0][\"requirements\"] = requirements\n                host_reqs = requirements.setdefault(\"host\", [])\n        # in-place modification of above thingie\n        host_reqs.extend(extra_run_specs_from_build.get(\"strong\", []))\n\n        host_deps, host_unsat, extra_run_specs_from_host = _read_upstream_pin_files(\n            m, \"host\", permit_unsatisfiable_variants, exclude_pattern\n",
                    "rendered": {
                      "text": "                matching_output[0][\"requirements\"] = requirements\n                host_reqs = requirements.setdefault(\"host\", [])\n        # in-place modification of above thingie\n        host_reqs.extend(extra_run_specs_from_build.get(\"strong\", []))\n\n        host_deps, host_unsat, extra_run_specs_from_host = _read_upstream_pin_files(\n            m, \"host\", permit_unsatisfiable_variants, exclude_pattern\n",
                      "markdown": "`                matching_output[0][\"requirements\"] = requirements\n                host_reqs = requirements.setdefault(\"host\", [])\n        # in-place modification of above thingie\n        host_reqs.extend(extra_run_specs_from_build.get(\"strong\", []))\n\n        host_deps, host_unsat, extra_run_specs_from_host = _read_upstream_pin_files(\n            m, \"host\", permit_unsatisfiable_variants, exclude_pattern\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 38,
                  "endLine": 484,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            ]\n            if matching_output:\n                requirements = utils.expand_reqs(\n                    matching_output[0].get(\"requirements\", {})\n                )\n                matching_output[0][\"requirements\"] = requirements\n                host_reqs = requirements.setdefault(\"host\", [])\n",
                    "rendered": {
                      "text": "            ]\n            if matching_output:\n                requirements = utils.expand_reqs(\n                    matching_output[0].get(\"requirements\", {})\n                )\n                matching_output[0][\"requirements\"] = requirements\n                host_reqs = requirements.setdefault(\"host\", [])\n",
                      "markdown": "`            ]\n            if matching_output:\n                requirements = utils.expand_reqs(\n                    matching_output[0].get(\"requirements\", {})\n                )\n                matching_output[0][\"requirements\"] = requirements\n                host_reqs = requirements.setdefault(\"host\", [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 62,
                  "endLine": 480,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n        if not host_reqs:\n            matching_output = [\n                out for out in m.get_section(\"outputs\") if out.get(\"name\") == m.name()\n            ]\n            if matching_output:\n                requirements = utils.expand_reqs(\n",
                    "rendered": {
                      "text": "\n        if not host_reqs:\n            matching_output = [\n                out for out in m.get_section(\"outputs\") if out.get(\"name\") == m.name()\n            ]\n            if matching_output:\n                requirements = utils.expand_reqs(\n",
                      "markdown": "`\n        if not host_reqs:\n            matching_output = [\n                out for out in m.get_section(\"outputs\") if out.get(\"name\") == m.name()\n            ]\n            if matching_output:\n                requirements = utils.expand_reqs(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 61,
                  "endLine": 423,
                  "endColumn": 66,
                  "snippet": {
                    "text": "            # a packages key, otherwise use run_exports from the packages themselves\n            if \"packages\" in channeldata:\n                pkg_data = channeldata[\"packages\"].get(prec.name, {})\n                run_exports = pkg_data.get(\"run_exports\", {}).get(prec.version, {})\n        if run_exports is None:\n            loc, dist = execute_download_actions(\n                m,\n",
                    "rendered": {
                      "text": "            # a packages key, otherwise use run_exports from the packages themselves\n            if \"packages\" in channeldata:\n                pkg_data = channeldata[\"packages\"].get(prec.name, {})\n                run_exports = pkg_data.get(\"run_exports\", {}).get(prec.version, {})\n        if run_exports is None:\n            loc, dist = execute_download_actions(\n                m,\n",
                      "markdown": "`            # a packages key, otherwise use run_exports from the packages themselves\n            if \"packages\" in channeldata:\n                pkg_data = channeldata[\"packages\"].get(prec.name, {})\n                run_exports = pkg_data.get(\"run_exports\", {}).get(prec.version, {})\n        if run_exports is None:\n            loc, dist = execute_download_actions(\n                m,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 38,
                  "endLine": 423,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            # a packages key, otherwise use run_exports from the packages themselves\n            if \"packages\" in channeldata:\n                pkg_data = channeldata[\"packages\"].get(prec.name, {})\n                run_exports = pkg_data.get(\"run_exports\", {}).get(prec.version, {})\n        if run_exports is None:\n            loc, dist = execute_download_actions(\n                m,\n",
                    "rendered": {
                      "text": "            # a packages key, otherwise use run_exports from the packages themselves\n            if \"packages\" in channeldata:\n                pkg_data = channeldata[\"packages\"].get(prec.name, {})\n                run_exports = pkg_data.get(\"run_exports\", {}).get(prec.version, {})\n        if run_exports is None:\n            loc, dist = execute_download_actions(\n                m,\n",
                      "markdown": "`            # a packages key, otherwise use run_exports from the packages themselves\n            if \"packages\" in channeldata:\n                pkg_data = channeldata[\"packages\"].get(prec.name, {})\n                run_exports = pkg_data.get(\"run_exports\", {}).get(prec.version, {})\n        if run_exports is None:\n            loc, dist = execute_download_actions(\n                m,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 50,
                  "endLine": 422,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            # only use channeldata if requested, channeldata exists and contains\n            # a packages key, otherwise use run_exports from the packages themselves\n            if \"packages\" in channeldata:\n                pkg_data = channeldata[\"packages\"].get(prec.name, {})\n                run_exports = pkg_data.get(\"run_exports\", {}).get(prec.version, {})\n        if run_exports is None:\n            loc, dist = execute_download_actions(\n",
                    "rendered": {
                      "text": "            # only use channeldata if requested, channeldata exists and contains\n            # a packages key, otherwise use run_exports from the packages themselves\n            if \"packages\" in channeldata:\n                pkg_data = channeldata[\"packages\"].get(prec.name, {})\n                run_exports = pkg_data.get(\"run_exports\", {}).get(prec.version, {})\n        if run_exports is None:\n            loc, dist = execute_download_actions(\n",
                      "markdown": "`            # only use channeldata if requested, channeldata exists and contains\n            # a packages key, otherwise use run_exports from the packages themselves\n            if \"packages\" in channeldata:\n                pkg_data = channeldata[\"packages\"].get(prec.name, {})\n                run_exports = pkg_data.get(\"run_exports\", {}).get(prec.version, {})\n        if run_exports is None:\n            loc, dist = execute_download_actions(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 54,
                  "endLine": 247,
                  "endColumn": 59,
                  "snippet": {
                    "text": "                )\n                for ignore_spec in ignore_list\n            ):\n                filtered_specs[agent] = filtered_specs.get(agent, []) + [spec]\n    return filtered_specs\n\n\n",
                    "rendered": {
                      "text": "                )\n                for ignore_spec in ignore_list\n            ):\n                filtered_specs[agent] = filtered_specs.get(agent, []) + [spec]\n    return filtered_specs\n\n\n",
                      "markdown": "`                )\n                for ignore_spec in ignore_list\n            ):\n                filtered_specs[agent] = filtered_specs.get(agent, []) + [spec]\n    return filtered_specs\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 33,
                  "endLine": 221,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            pin_cfg = dict(min_pin=pin_cfg, max_pin=pin_cfg)\n        pin = utils.apply_pin_expressions(version.split()[0], **pin_cfg)\n    elif dep.startswith(\"numpy\") and \"x.x\" in dep:\n        if not build_dep_versions.get(dep_name):\n            raise ValueError(\n                \"numpy x.x specified, but numpy not in build requirements.\"\n            )\n",
                    "rendered": {
                      "text": "            pin_cfg = dict(min_pin=pin_cfg, max_pin=pin_cfg)\n        pin = utils.apply_pin_expressions(version.split()[0], **pin_cfg)\n    elif dep.startswith(\"numpy\") and \"x.x\" in dep:\n        if not build_dep_versions.get(dep_name):\n            raise ValueError(\n                \"numpy x.x specified, but numpy not in build requirements.\"\n            )\n",
                      "markdown": "`            pin_cfg = dict(min_pin=pin_cfg, max_pin=pin_cfg)\n        pin = utils.apply_pin_expressions(version.split()[0], **pin_cfg)\n    elif dep.startswith(\"numpy\") and \"x.x\" in dep:\n        if not build_dep_versions.get(dep_name):\n            raise ValueError(\n                \"numpy x.x specified, but numpy not in build requirements.\"\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 40,
                  "endLine": 211,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    version = build_dep_versions.get(dep_name) or m.config.variant.get(dep_name)\n    if (\n        version\n        and dep_name in m.config.variant.get(\"pin_run_as_build\", {})\n        and not (dep_name == \"python\" and (m.noarch or m.noarch_python))\n        and dep_name in build_dep_versions\n    ):\n",
                    "rendered": {
                      "text": "    version = build_dep_versions.get(dep_name) or m.config.variant.get(dep_name)\n    if (\n        version\n        and dep_name in m.config.variant.get(\"pin_run_as_build\", {})\n        and not (dep_name == \"python\" and (m.noarch or m.noarch_python))\n        and dep_name in build_dep_versions\n    ):\n",
                      "markdown": "`    version = build_dep_versions.get(dep_name) or m.config.variant.get(dep_name)\n    if (\n        version\n        and dep_name in m.config.variant.get(\"pin_run_as_build\", {})\n        and not (dep_name == \"python\" and (m.noarch or m.noarch_python))\n        and dep_name in build_dep_versions\n    ):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 66,
                  "endLine": 208,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    if len(dep_split) >= 3:\n        build = dep_split[2]\n    pin = None\n    version = build_dep_versions.get(dep_name) or m.config.variant.get(dep_name)\n    if (\n        version\n        and dep_name in m.config.variant.get(\"pin_run_as_build\", {})\n",
                    "rendered": {
                      "text": "    if len(dep_split) >= 3:\n        build = dep_split[2]\n    pin = None\n    version = build_dep_versions.get(dep_name) or m.config.variant.get(dep_name)\n    if (\n        version\n        and dep_name in m.config.variant.get(\"pin_run_as_build\", {})\n",
                      "markdown": "`    if len(dep_split) >= 3:\n        build = dep_split[2]\n    pin = None\n    version = build_dep_versions.get(dep_name) or m.config.variant.get(dep_name)\n    if (\n        version\n        and dep_name in m.config.variant.get(\"pin_run_as_build\", {})\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 32,
                  "endLine": 208,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    if len(dep_split) >= 3:\n        build = dep_split[2]\n    pin = None\n    version = build_dep_versions.get(dep_name) or m.config.variant.get(dep_name)\n    if (\n        version\n        and dep_name in m.config.variant.get(\"pin_run_as_build\", {})\n",
                    "rendered": {
                      "text": "    if len(dep_split) >= 3:\n        build = dep_split[2]\n    pin = None\n    version = build_dep_versions.get(dep_name) or m.config.variant.get(dep_name)\n    if (\n        version\n        and dep_name in m.config.variant.get(\"pin_run_as_build\", {})\n",
                      "markdown": "`    if len(dep_split) >= 3:\n        build = dep_split[2]\n    pin = None\n    version = build_dep_versions.get(dep_name) or m.config.variant.get(dep_name)\n    if (\n        version\n        and dep_name in m.config.variant.get(\"pin_run_as_build\", {})\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 62,
                  "endLine": 140,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        for spec in specs:\n            if \" x.x\" in spec:\n                pkg_name = spec.split()[0]\n                no_xx_specs.append(\" \".join((pkg_name, variant.get(pkg_name, \"\"))))\n            else:\n                no_xx_specs.append(spec)\n        specs = no_xx_specs\n",
                    "rendered": {
                      "text": "        for spec in specs:\n            if \" x.x\" in spec:\n                pkg_name = spec.split()[0]\n                no_xx_specs.append(\" \".join((pkg_name, variant.get(pkg_name, \"\"))))\n            else:\n                no_xx_specs.append(spec)\n        specs = no_xx_specs\n",
                      "markdown": "`        for spec in specs:\n            if \" x.x\" in spec:\n                pkg_name = spec.split()[0]\n                no_xx_specs.append(\" \".join((pkg_name, variant.get(pkg_name, \"\"))))\n            else:\n                no_xx_specs.append(spec)\n        specs = no_xx_specs\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 28,
                  "endLine": 107,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            is_subpackage = False\n            spec_name = spec.split()[0]\n            for entry in m.get_section(\"outputs\"):\n                name = entry.get(\"name\")\n                if name == spec_name:\n                    subpackages.append(\" \".join((name, m.version())))\n                    is_subpackage = True\n",
                    "rendered": {
                      "text": "            is_subpackage = False\n            spec_name = spec.split()[0]\n            for entry in m.get_section(\"outputs\"):\n                name = entry.get(\"name\")\n                if name == spec_name:\n                    subpackages.append(\" \".join((name, m.version())))\n                    is_subpackage = True\n",
                      "markdown": "`            is_subpackage = False\n            spec_name = spec.split()[0]\n            for entry in m.get_section(\"outputs\"):\n                name = entry.get(\"name\")\n                if name == spec_name:\n                    subpackages.append(\" \".join((name, m.version())))\n                    is_subpackage = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 44,
                  "endLine": 703,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        m.append_requirements()\n\n        if m.pin_depends == \"strict\":\n            m.meta[\"requirements\"][\"run\"] = environ.get_pinned_deps(m, \"run\")\n        test_deps = m.get_value(\"test/requires\")\n        if test_deps:\n            versioned_test_deps = list(\n",
                    "rendered": {
                      "text": "        m.append_requirements()\n\n        if m.pin_depends == \"strict\":\n            m.meta[\"requirements\"][\"run\"] = environ.get_pinned_deps(m, \"run\")\n        test_deps = m.get_value(\"test/requires\")\n        if test_deps:\n            versioned_test_deps = list(\n",
                      "markdown": "`        m.append_requirements()\n\n        if m.pin_depends == \"strict\":\n            m.meta[\"requirements\"][\"run\"] = environ.get_pinned_deps(m, \"run\")\n        test_deps = m.get_value(\"test/requires\")\n        if test_deps:\n            versioned_test_deps = list(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 36,
                  "endLine": 673,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            build_reqs.append(\"python {}\".format(m.config.variant[\"python\"]))\n            m.meta[\"requirements\"][pinning_env] = build_reqs\n\n        full_build_deps, _, _ = get_env_dependencies(\n            m,\n            pinning_env,\n            m.config.variant,\n",
                    "rendered": {
                      "text": "            build_reqs.append(\"python {}\".format(m.config.variant[\"python\"]))\n            m.meta[\"requirements\"][pinning_env] = build_reqs\n\n        full_build_deps, _, _ = get_env_dependencies(\n            m,\n            pinning_env,\n            m.config.variant,\n",
                      "markdown": "`            build_reqs.append(\"python {}\".format(m.config.variant[\"python\"]))\n            m.meta[\"requirements\"][pinning_env] = build_reqs\n\n        full_build_deps, _, _ = get_env_dependencies(\n            m,\n            pinning_env,\n            m.config.variant,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 29,
                  "endLine": 444,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    permit_unsatisfiable_variants,\n    exclude_pattern,\n):\n    deps, precs, unsat = get_env_dependencies(\n        m,\n        env,\n        m.config.variant,\n",
                    "rendered": {
                      "text": "    permit_unsatisfiable_variants,\n    exclude_pattern,\n):\n    deps, precs, unsat = get_env_dependencies(\n        m,\n        env,\n        m.config.variant,\n",
                      "markdown": "`    permit_unsatisfiable_variants,\n    exclude_pattern,\n):\n    deps, precs, unsat = get_env_dependencies(\n        m,\n        env,\n        m.config.variant,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 4,
                  "endLine": 406,
                  "endColumn": 21,
                  "snippet": {
                    "text": "def get_upstream_pins(m: MetaData, precs, env):\n    \"\"\"Download packages from specs, then inspect each downloaded package for additional\n    downstream dependency specs.  Return these additional specs.\"\"\"\n    env_specs = m.get_value(f\"requirements/{env}\", [])\n    explicit_specs = [req.split(\" \")[0] for req in env_specs] if env_specs else []\n    precs = [prec for prec in precs if prec.name in explicit_specs]\n\n",
                    "rendered": {
                      "text": "def get_upstream_pins(m: MetaData, precs, env):\n    \"\"\"Download packages from specs, then inspect each downloaded package for additional\n    downstream dependency specs.  Return these additional specs.\"\"\"\n    env_specs = m.get_value(f\"requirements/{env}\", [])\n    explicit_specs = [req.split(\" \")[0] for req in env_specs] if env_specs else []\n    precs = [prec for prec in precs if prec.name in explicit_specs]\n\n",
                      "markdown": "`def get_upstream_pins(m: MetaData, precs, env):\n    \"\"\"Download packages from specs, then inspect each downloaded package for additional\n    downstream dependency specs.  Return these additional specs.\"\"\"\n    env_specs = m.get_value(f\"requirements/{env}\", [])\n    explicit_specs = [req.split(\" \")[0] for req in env_specs] if env_specs else []\n    precs = [prec for prec in precs if prec.name in explicit_specs]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 20,
                  "endLine": 156,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    )\n    with TemporaryDirectory(prefix=\"_\", suffix=random_string) as tmpdir:\n        try:\n            precs = environ.get_package_records(\n                tmpdir,\n                tuple(dependencies),\n                env,\n",
                    "rendered": {
                      "text": "    )\n    with TemporaryDirectory(prefix=\"_\", suffix=random_string) as tmpdir:\n        try:\n            precs = environ.get_package_records(\n                tmpdir,\n                tuple(dependencies),\n                env,\n",
                      "markdown": "`    )\n    with TemporaryDirectory(prefix=\"_\", suffix=random_string) as tmpdir:\n        try:\n            precs = environ.get_package_records(\n                tmpdir,\n                tuple(dependencies),\n                env,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 8,
                  "endLine": 125,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    return subpackages, dependencies, pass_through_deps\n\n\ndef get_env_dependencies(\n    m: MetaData,\n    env,\n    variant,\n",
                    "rendered": {
                      "text": "    return subpackages, dependencies, pass_through_deps\n\n\ndef get_env_dependencies(\n    m: MetaData,\n    env,\n    variant,\n",
                      "markdown": "`    return subpackages, dependencies, pass_through_deps\n\n\ndef get_env_dependencies(\n    m: MetaData,\n    env,\n    variant,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 1004,
                  "startColumn": 48,
                  "endLine": 1004,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n                variants,\n",
                    "rendered": {
                      "text": "            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n                variants,\n",
                      "markdown": "`            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n                variants,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 1003,
                  "startColumn": 90,
                  "endLine": 1004,
                  "snippet": {
                    "text": "            # merge any passed-in variants with any files found\n            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n                variants,\n",
                    "rendered": {
                      "text": "            # merge any passed-in variants with any files found\n            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n                variants,\n",
                      "markdown": "`            # merge any passed-in variants with any files found\n            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n                variants,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 1003,
                  "startColumn": 51,
                  "endLine": 1003,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            # merge any passed-in variants with any files found\n            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n",
                    "rendered": {
                      "text": "            # merge any passed-in variants with any files found\n            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n",
                      "markdown": "`            # merge any passed-in variants with any files found\n            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 722,
                  "startColumn": 61,
                  "endLine": 722,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n        # if source/path is relative, then the output package makes no sense at all.  The next\n        #   best thing is to hard-code the absolute path.  This probably won't exist on any\n        #   system other than the original build machine, but at least it will work there.\n        for source_dict in m.get_section(\"source\"):\n            if (source_path := source_dict.get(\"path\")) and not isabs(source_path):\n                source_dict[\"path\"] = normpath(join(m.path, source_path))\n",
                    "rendered": {
                      "text": "\n        # if source/path is relative, then the output package makes no sense at all.  The next\n        #   best thing is to hard-code the absolute path.  This probably won't exist on any\n        #   system other than the original build machine, but at least it will work there.\n        for source_dict in m.get_section(\"source\"):\n            if (source_path := source_dict.get(\"path\")) and not isabs(source_path):\n                source_dict[\"path\"] = normpath(join(m.path, source_path))\n",
                      "markdown": "`\n        # if source/path is relative, then the output package makes no sense at all.  The next\n        #   best thing is to hard-code the absolute path.  This probably won't exist on any\n        #   system other than the original build machine, but at least it will work there.\n        for source_dict in m.get_section(\"source\"):\n            if (source_path := source_dict.get(\"path\")) and not isabs(source_path):\n                source_dict[\"path\"] = normpath(join(m.path, source_path))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 720,
                  "startColumn": 76,
                  "endLine": 720,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        extra[\"copy_test_source_files\"] = m.config.copy_test_source_files\n        m.meta[\"extra\"] = extra\n\n        # if source/path is relative, then the output package makes no sense at all.  The next\n        #   best thing is to hard-code the absolute path.  This probably won't exist on any\n        #   system other than the original build machine, but at least it will work there.\n        for source_dict in m.get_section(\"source\"):\n",
                    "rendered": {
                      "text": "        extra[\"copy_test_source_files\"] = m.config.copy_test_source_files\n        m.meta[\"extra\"] = extra\n\n        # if source/path is relative, then the output package makes no sense at all.  The next\n        #   best thing is to hard-code the absolute path.  This probably won't exist on any\n        #   system other than the original build machine, but at least it will work there.\n        for source_dict in m.get_section(\"source\"):\n",
                      "markdown": "`        extra[\"copy_test_source_files\"] = m.config.copy_test_source_files\n        m.meta[\"extra\"] = extra\n\n        # if source/path is relative, then the output package makes no sense at all.  The next\n        #   best thing is to hard-code the absolute path.  This probably won't exist on any\n        #   system other than the original build machine, but at least it will work there.\n        for source_dict in m.get_section(\"source\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 52,
                  "endLine": 113,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                    is_subpackage = True\n            if not is_subpackage:\n                dependencies.append(spec)\n            # fill in variant version iff no version at all is provided\n            for key, value in variant.items():\n                # for sake of comparison, ignore dashes and underscores\n                if dash_or_under.sub(\"\", key) == dash_or_under.sub(\n",
                    "rendered": {
                      "text": "                    is_subpackage = True\n            if not is_subpackage:\n                dependencies.append(spec)\n            # fill in variant version iff no version at all is provided\n            for key, value in variant.items():\n                # for sake of comparison, ignore dashes and underscores\n                if dash_or_under.sub(\"\", key) == dash_or_under.sub(\n",
                      "markdown": "`                    is_subpackage = True\n            if not is_subpackage:\n                dependencies.append(spec)\n            # fill in variant version iff no version at all is provided\n            for key, value in variant.items():\n                # for sake of comparison, ignore dashes and underscores\n                if dash_or_under.sub(\"\", key) == dash_or_under.sub(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 51,
                  "endLine": 80,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    else:\n        pkg_type = m.type\n\n    # the default case will switch over to conda_v2 at some point\n    if pkg_type == \"conda\":\n        path = join(\n            m.config.output_folder, subdir, f\"{m.dist()}{CONDA_PACKAGE_EXTENSION_V1}\"\n",
                    "rendered": {
                      "text": "    else:\n        pkg_type = m.type\n\n    # the default case will switch over to conda_v2 at some point\n    if pkg_type == \"conda\":\n        path = join(\n            m.config.output_folder, subdir, f\"{m.dist()}{CONDA_PACKAGE_EXTENSION_V1}\"\n",
                      "markdown": "`    else:\n        pkg_type = m.type\n\n    # the default case will switch over to conda_v2 at some point\n    if pkg_type == \"conda\":\n        path = join(\n            m.config.output_folder, subdir, f\"{m.dist()}{CONDA_PACKAGE_EXTENSION_V1}\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 1096,
                  "startColumn": 10,
                  "endLine": 1097,
                  "snippet": {
                    "text": "\ndef _unicode_representer(dumper, uni):\n    node = yaml.ScalarNode(tag=\"tag:yaml.org,2002:str\", value=uni)\n    return node\n\n\nclass _IndentDumper(yaml.Dumper):\n    def increase_indent(self, flow=False, indentless=False):\n",
                    "rendered": {
                      "text": "\ndef _unicode_representer(dumper, uni):\n    node = yaml.ScalarNode(tag=\"tag:yaml.org,2002:str\", value=uni)\n    return node\n\n\nclass _IndentDumper(yaml.Dumper):\n    def increase_indent(self, flow=False, indentless=False):\n",
                      "markdown": "`\ndef _unicode_representer(dumper, uni):\n    node = yaml.ScalarNode(tag=\"tag:yaml.org,2002:str\", value=uni)\n    return node\n\n\nclass _IndentDumper(yaml.Dumper):\n    def increase_indent(self, flow=False, indentless=False):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 1095,
                  "startColumn": 3,
                  "endLine": 1095,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n\ndef _unicode_representer(dumper, uni):\n    node = yaml.ScalarNode(tag=\"tag:yaml.org,2002:str\", value=uni)\n    return node\n\n\n",
                    "rendered": {
                      "text": "\n\ndef _unicode_representer(dumper, uni):\n    node = yaml.ScalarNode(tag=\"tag:yaml.org,2002:str\", value=uni)\n    return node\n\n\n",
                      "markdown": "`\n\ndef _unicode_representer(dumper, uni):\n    node = yaml.ScalarNode(tag=\"tag:yaml.org,2002:str\", value=uni)\n    return node\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 1030,
                  "startColumn": 36,
                  "endLine": 1030,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                bypass_env_check=bypass_env_check,\n            ):\n                if not om.skip() or not config.trim_skip:\n                    if \"type\" not in od or od[\"type\"] == \"conda\":\n                        if finalize and not om.final:\n                            try:\n                                om = finalize_metadata(\n",
                    "rendered": {
                      "text": "                bypass_env_check=bypass_env_check,\n            ):\n                if not om.skip() or not config.trim_skip:\n                    if \"type\" not in od or od[\"type\"] == \"conda\":\n                        if finalize and not om.final:\n                            try:\n                                om = finalize_metadata(\n",
                      "markdown": "`                bypass_env_check=bypass_env_check,\n            ):\n                if not om.skip() or not config.trim_skip:\n                    if \"type\" not in od or od[\"type\"] == \"conda\":\n                        if finalize and not om.final:\n                            try:\n                                om = finalize_metadata(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 1004,
                  "startColumn": 48,
                  "endLine": 1004,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n                variants,\n",
                    "rendered": {
                      "text": "            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n                variants,\n",
                      "markdown": "`            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n                variants,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 1003,
                  "startColumn": 90,
                  "endLine": 1004,
                  "snippet": {
                    "text": "            # merge any passed-in variants with any files found\n            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n                variants,\n",
                    "rendered": {
                      "text": "            # merge any passed-in variants with any files found\n            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n                variants,\n",
                      "markdown": "`            # merge any passed-in variants with any files found\n            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n                variants,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 1003,
                  "startColumn": 51,
                  "endLine": 1003,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            # merge any passed-in variants with any files found\n            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n",
                    "rendered": {
                      "text": "            # merge any passed-in variants with any files found\n            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n",
                      "markdown": "`            # merge any passed-in variants with any files found\n            variants = get_package_variants(m, variants=variants)\n\n            # when building, we don't want to fully expand all outputs into metadata, only expand\n            #    whatever variants we have (i.e. expand top-level variants, not output-only variants)\n            return distribute_variants(\n                m,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 848,
                  "startColumn": 7,
                  "endLine": 848,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        from .build import get_all_replacements\n\n        get_all_replacements(variant)\n        mv = metadata.copy()\n        mv.config.variant = variant\n        # start with shared list:\n        mv.config.variants = all_variants\n",
                    "rendered": {
                      "text": "        from .build import get_all_replacements\n\n        get_all_replacements(variant)\n        mv = metadata.copy()\n        mv.config.variant = variant\n        # start with shared list:\n        mv.config.variants = all_variants\n",
                      "markdown": "`        from .build import get_all_replacements\n\n        get_all_replacements(variant)\n        mv = metadata.copy()\n        mv.config.variant = variant\n        # start with shared list:\n        mv.config.variants = all_variants\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 657,
                  "startColumn": 61,
                  "endLine": 657,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        #     to the metadata.\n        requirements = m.get_section(\"requirements\")\n\n        # here's where we pin run dependencies to their build time versions.  This happens based\n        #     on the keys in the 'pin_run_as_build' key in the variant, which is a list of package\n        #     names to have this behavior.\n        if output_excludes:\n",
                    "rendered": {
                      "text": "        #     to the metadata.\n        requirements = m.get_section(\"requirements\")\n\n        # here's where we pin run dependencies to their build time versions.  This happens based\n        #     on the keys in the 'pin_run_as_build' key in the variant, which is a list of package\n        #     names to have this behavior.\n        if output_excludes:\n",
                      "markdown": "`        #     to the metadata.\n        requirements = m.get_section(\"requirements\")\n\n        # here's where we pin run dependencies to their build time versions.  This happens based\n        #     on the keys in the 'pin_run_as_build' key in the variant, which is a list of package\n        #     names to have this behavior.\n        if output_excludes:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 627,
                  "startColumn": 80,
                  "endLine": 627,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\n        parent_recipe = m.get_value(\"extra/parent_recipe\", {})\n\n        # extract the topmost section where variables are defined, and put it on top of the\n        #     requirements for a particular output\n        # Re-parse the output from the original recipe, so that we re-consider any jinja2 stuff\n        output = parent_metadata.get_rendered_output(m.name(), variant=m.config.variant)\n",
                    "rendered": {
                      "text": "\n        parent_recipe = m.get_value(\"extra/parent_recipe\", {})\n\n        # extract the topmost section where variables are defined, and put it on top of the\n        #     requirements for a particular output\n        # Re-parse the output from the original recipe, so that we re-consider any jinja2 stuff\n        output = parent_metadata.get_rendered_output(m.name(), variant=m.config.variant)\n",
                      "markdown": "`\n        parent_recipe = m.get_value(\"extra/parent_recipe\", {})\n\n        # extract the topmost section where variables are defined, and put it on top of the\n        #     requirements for a particular output\n        # Re-parse the output from the original recipe, so that we re-consider any jinja2 stuff\n        output = parent_metadata.get_rendered_output(m.name(), variant=m.config.variant)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 48,
                  "endLine": 380,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            pkg_dist, m, files_only=require_files\n        )\n\n        # ran through all pkgs_dirs, and did not find package or folder.  Download it.\n        # TODO: this is a vile hack reaching into conda's internals. Replace with\n        #    proper conda API when available.\n        if not pkg_loc:\n",
                    "rendered": {
                      "text": "            pkg_dist, m, files_only=require_files\n        )\n\n        # ran through all pkgs_dirs, and did not find package or folder.  Download it.\n        # TODO: this is a vile hack reaching into conda's internals. Replace with\n        #    proper conda API when available.\n        if not pkg_loc:\n",
                      "markdown": "`            pkg_dist, m, files_only=require_files\n        )\n\n        # ran through all pkgs_dirs, and did not find package or folder.  Download it.\n        # TODO: this is a vile hack reaching into conda's internals. Replace with\n        #    proper conda API when available.\n        if not pkg_loc:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/render.py"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 6,
                  "endLine": 135,
                  "endColumn": 11,
                  "snippet": {
                    "text": "):\n    specs = m.get_depends_top_and_out(env)\n    # replace x.x with our variant's numpy version, or else conda tries to literally go get x.x\n    if env in (\"build\", \"host\"):\n        no_xx_specs = []\n        for spec in specs:\n            if \" x.x\" in spec:\n",
                    "rendered": {
                      "text": "):\n    specs = m.get_depends_top_and_out(env)\n    # replace x.x with our variant's numpy version, or else conda tries to literally go get x.x\n    if env in (\"build\", \"host\"):\n        no_xx_specs = []\n        for spec in specs:\n            if \" x.x\" in spec:\n",
                      "markdown": "`):\n    specs = m.get_depends_top_and_out(env)\n    # replace x.x with our variant's numpy version, or else conda tries to literally go get x.x\n    if env in (\"build\", \"host\"):\n        no_xx_specs = []\n        for spec in specs:\n            if \" x.x\" in spec:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1440,
                  "startColumn": 43,
                  "endLine": 1440,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        # matches the subdir for eg: linux-aarch64.\n        sysroot_arch = Path(path).parent.name.split(\"-\")[0]\n        subdir_arch = subdir.split(\"-\")[-1]\n        return sysroot_arch == GNU_ARCH_MAP.get(subdir_arch, subdir_arch)\n\n    sysroots_files = OrderedDict(\n        sorted(\n",
                    "rendered": {
                      "text": "        # matches the subdir for eg: linux-aarch64.\n        sysroot_arch = Path(path).parent.name.split(\"-\")[0]\n        subdir_arch = subdir.split(\"-\")[-1]\n        return sysroot_arch == GNU_ARCH_MAP.get(subdir_arch, subdir_arch)\n\n    sysroots_files = OrderedDict(\n        sorted(\n",
                      "markdown": "`        # matches the subdir for eg: linux-aarch64.\n        sysroot_arch = Path(path).parent.name.split(\"-\")[0]\n        subdir_arch = subdir.split(\"-\")[-1]\n        return sysroot_arch == GNU_ARCH_MAP.get(subdir_arch, subdir_arch)\n\n    sysroots_files = OrderedDict(\n        sorted(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1351,
                  "startColumn": 34,
                  "endLine": 1351,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    ]\n    # ignore_for_statics = ['gcc_impl_linux*', 'compiler-rt*', 'llvm-openmp*', 'gfortran_osx*']\n    # sysroots and whitelists are similar, but the subtle distinctions are important.\n    CONDA_BUILD_SYSROOT = variants.get(\"CONDA_BUILD_SYSROOT\", None)\n    if CONDA_BUILD_SYSROOT and os.path.exists(CONDA_BUILD_SYSROOT):\n        # When on macOS and CBS not set, sysroots should probably be '/'\n        # is everything in the sysroot allowed? I suppose so!\n",
                    "rendered": {
                      "text": "    ]\n    # ignore_for_statics = ['gcc_impl_linux*', 'compiler-rt*', 'llvm-openmp*', 'gfortran_osx*']\n    # sysroots and whitelists are similar, but the subtle distinctions are important.\n    CONDA_BUILD_SYSROOT = variants.get(\"CONDA_BUILD_SYSROOT\", None)\n    if CONDA_BUILD_SYSROOT and os.path.exists(CONDA_BUILD_SYSROOT):\n        # When on macOS and CBS not set, sysroots should probably be '/'\n        # is everything in the sysroot allowed? I suppose so!\n",
                      "markdown": "`    ]\n    # ignore_for_statics = ['gcc_impl_linux*', 'compiler-rt*', 'llvm-openmp*', 'gfortran_osx*']\n    # sysroots and whitelists are similar, but the subtle distinctions are important.\n    CONDA_BUILD_SYSROOT = variants.get(\"CONDA_BUILD_SYSROOT\", None)\n    if CONDA_BUILD_SYSROOT and os.path.exists(CONDA_BUILD_SYSROOT):\n        # When on macOS and CBS not set, sysroots should probably be '/'\n        # is everything in the sysroot allowed? I suppose so!\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1310,
                  "startColumn": 60,
                  "endLine": 1310,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    # Used to detect overlinking (finally)\n    requirements_run = [req.split(\" \")[0] for req in requirements_run]\n    pd = PrefixData(run_prefix)\n    precs = [prec for req in requirements_run if (prec := pd.get(req, None))]\n    local_channel = (\n        dirname(bldpkgs_dirs).replace(\"\\\\\", \"/\")\n        if utils.on_win\n",
                    "rendered": {
                      "text": "    # Used to detect overlinking (finally)\n    requirements_run = [req.split(\" \")[0] for req in requirements_run]\n    pd = PrefixData(run_prefix)\n    precs = [prec for req in requirements_run if (prec := pd.get(req, None))]\n    local_channel = (\n        dirname(bldpkgs_dirs).replace(\"\\\\\", \"/\")\n        if utils.on_win\n",
                      "markdown": "`    # Used to detect overlinking (finally)\n    requirements_run = [req.split(\" \")[0] for req in requirements_run]\n    pd = PrefixData(run_prefix)\n    precs = [prec for req in requirements_run if (prec := pd.get(req, None))]\n    local_channel = (\n        dirname(bldpkgs_dirs).replace(\"\\\\\", \"/\")\n        if utils.on_win\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1682,
                  "startColumn": 58,
                  "endLine": 1682,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    Validation can fail if the menu/*.json file is not valid JSON, or if it doesn't\n    comply with the menuinst schema.\n\n    We validate at build-time so we don't have to validate at install-time, saving\n    `conda` a few dependencies.\n    \"\"\"\n    json_files = fnmatch_filter(files, \"[Mm][Ee][Nn][Uu][/\\\\]*.[Jj][Ss][Oo][Nn]\")\n",
                    "rendered": {
                      "text": "    Validation can fail if the menu/*.json file is not valid JSON, or if it doesn't\n    comply with the menuinst schema.\n\n    We validate at build-time so we don't have to validate at install-time, saving\n    `conda` a few dependencies.\n    \"\"\"\n    json_files = fnmatch_filter(files, \"[Mm][Ee][Nn][Uu][/\\\\]*.[Jj][Ss][Oo][Nn]\")\n",
                      "markdown": "`    Validation can fail if the menu/*.json file is not valid JSON, or if it doesn't\n    comply with the menuinst schema.\n\n    We validate at build-time so we don't have to validate at install-time, saving\n    `conda` a few dependencies.\n    \"\"\"\n    json_files = fnmatch_filter(files, \"[Mm][Ee][Nn][Uu][/\\\\]*.[Jj][Ss][Oo][Nn]\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1682,
                  "startColumn": 15,
                  "endLine": 1682,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    Validation can fail if the menu/*.json file is not valid JSON, or if it doesn't\n    comply with the menuinst schema.\n\n    We validate at build-time so we don't have to validate at install-time, saving\n    `conda` a few dependencies.\n    \"\"\"\n    json_files = fnmatch_filter(files, \"[Mm][Ee][Nn][Uu][/\\\\]*.[Jj][Ss][Oo][Nn]\")\n",
                    "rendered": {
                      "text": "    Validation can fail if the menu/*.json file is not valid JSON, or if it doesn't\n    comply with the menuinst schema.\n\n    We validate at build-time so we don't have to validate at install-time, saving\n    `conda` a few dependencies.\n    \"\"\"\n    json_files = fnmatch_filter(files, \"[Mm][Ee][Nn][Uu][/\\\\]*.[Jj][Ss][Oo][Nn]\")\n",
                      "markdown": "`    Validation can fail if the menu/*.json file is not valid JSON, or if it doesn't\n    comply with the menuinst schema.\n\n    We validate at build-time so we don't have to validate at install-time, saving\n    `conda` a few dependencies.\n    \"\"\"\n    json_files = fnmatch_filter(files, \"[Mm][Ee][Nn][Uu][/\\\\]*.[Jj][Ss][Oo][Nn]\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1491,
                  "startColumn": 52,
                  "endLine": 1491,
                  "endColumn": 56,
                  "snippet": {
                    "text": "             if not in_whitelist:\n                    if resolved in prefix_owners[build_prefix]:\n                        print(f\"  ERROR :: {needed_dso} in prefix_owners[build_prefix]\")\n                    elif not needed_dso.startswith(\"$PATH\"):\n                        # DSOs with '$RPATH' in them at this stage are 'unresolved'. Though instead of\n                        # letting them through through like this, I should detect that they were not\n                        # resolved and change them back to how they were stored in the consumer DSO/elf\n                        # e.g. an elf will have ",
                    "rendered": {
                      "text": "             if not in_whitelist:\n                    if resolved in prefix_owners[build_prefix]:\n                        print(f\"  ERROR :: {needed_dso} in prefix_owners[build_prefix]\")\n                    elif not needed_dso.startswith(\"$PATH\"):\n                        # DSOs with '$RPATH' in them at this stage are 'unresolved'. Though instead of\n                        # letting them through through like this, I should detect that they were not\n                        # resolved and change them back to how they were stored in the consumer DSO/elf\n                        # e.g. an elf will have ",
                      "markdown": "`             if not in_whitelist:\n                    if resolved in prefix_owners[build_prefix]:\n                        print(f\"  ERROR :: {needed_dso} in prefix_owners[build_prefix]\")\n                    elif not needed_dso.startswith(\"$PATH\"):\n                        # DSOs with '$RPATH' in them at this stage are 'unresolved'. Though instead of\n                        # letting them through through like this, I should detect that they were not\n                        # resolved and change them back to how they were stored in the consumer DSO/elf\n                        # e.g. an elf will have `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1376,
                  "startColumn": 49,
                  "endLine": 1376,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            # what we are really specifying here are subtrees of sysroots to search in and it may be\n            # better to store each element of this as a tuple with a string and a nested tuple, e.g.\n            # [('/', ('/usr/lib', '/opt/X11', '/System/Library/Frameworks'))]\n            # Here we mean that we have a sysroot at '/' (could be a tokenized value like '$SYSROOT'?)\n            # .. and in that sysroot there are 3 suddirs in which we may search for DSOs.\n            sysroots = [\"/usr/lib\", \"/opt/X11\", \"/System/Library/Frameworks\"]\n            whitelist = DEFAULT_MAC_WHITELIST\n",
                    "rendered": {
                      "text": "            # what we are really specifying here are subtrees of sysroots to search in and it may be\n            # better to store each element of this as a tuple with a string and a nested tuple, e.g.\n            # [('/', ('/usr/lib', '/opt/X11', '/System/Library/Frameworks'))]\n            # Here we mean that we have a sysroot at '/' (could be a tokenized value like '$SYSROOT'?)\n            # .. and in that sysroot there are 3 suddirs in which we may search for DSOs.\n            sysroots = [\"/usr/lib\", \"/opt/X11\", \"/System/Library/Frameworks\"]\n            whitelist = DEFAULT_MAC_WHITELIST\n",
                      "markdown": "`            # what we are really specifying here are subtrees of sysroots to search in and it may be\n            # better to store each element of this as a tuple with a string and a nested tuple, e.g.\n            # [('/', ('/usr/lib', '/opt/X11', '/System/Library/Frameworks'))]\n            # Here we mean that we have a sysroot at '/' (could be a tokenized value like '$SYSROOT'?)\n            # .. and in that sysroot there are 3 suddirs in which we may search for DSOs.\n            sysroots = [\"/usr/lib\", \"/opt/X11\", \"/System/Library/Frameworks\"]\n            whitelist = DEFAULT_MAC_WHITELIST\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1079,
                  "startColumn": 46,
                  "endLine": 1079,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        # It takes a very long time to glob in C:/Windows so we do not do that.\n        for replacement in replacements:\n            needed_dso_w = needed_dso.replace(sysroot_substitution, replacement + \"/\")\n            # We should pass in multiple paths at once to this, but the code isn't structured for that.\n            in_whitelist = any(\n                [caseless_sepless_fnmatch([needed_dso_w], w) for w in whitelist]\n            )\n",
                    "rendered": {
                      "text": "        # It takes a very long time to glob in C:/Windows so we do not do that.\n        for replacement in replacements:\n            needed_dso_w = needed_dso.replace(sysroot_substitution, replacement + \"/\")\n            # We should pass in multiple paths at once to this, but the code isn't structured for that.\n            in_whitelist = any(\n                [caseless_sepless_fnmatch([needed_dso_w], w) for w in whitelist]\n            )\n",
                      "markdown": "`        # It takes a very long time to glob in C:/Windows so we do not do that.\n        for replacement in replacements:\n            needed_dso_w = needed_dso.replace(sysroot_substitution, replacement + \"/\")\n            # We should pass in multiple paths at once to this, but the code isn't structured for that.\n            in_whitelist = any(\n                [caseless_sepless_fnmatch([needed_dso_w], w) for w in whitelist]\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 29,
                  "endLine": 924,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                        fnmatch(fp, ext) for ext in (\"*.so*\", \"*.dylib*\", \"*.dll\")\n                    ) and codefile_class(fp, skip_symlinks=False)\n                    static_lib = any(fnmatch(fp, ext) for ext in (\"*.a\", \"*.lib\"))\n                    # Looking at all the files is very slow.\n                    if not dynamic_lib and not static_lib:\n                        continue\n                    rp = normpath(relpath(fp, prefix)).replace(\"\\\\\", \"/\")\n",
                    "rendered": {
                      "text": "                        fnmatch(fp, ext) for ext in (\"*.so*\", \"*.dylib*\", \"*.dll\")\n                    ) and codefile_class(fp, skip_symlinks=False)\n                    static_lib = any(fnmatch(fp, ext) for ext in (\"*.a\", \"*.lib\"))\n                    # Looking at all the files is very slow.\n                    if not dynamic_lib and not static_lib:\n                        continue\n                    rp = normpath(relpath(fp, prefix)).replace(\"\\\\\", \"/\")\n",
                      "markdown": "`                        fnmatch(fp, ext) for ext in (\"*.so*\", \"*.dylib*\", \"*.dll\")\n                    ) and codefile_class(fp, skip_symlinks=False)\n                    static_lib = any(fnmatch(fp, ext) for ext in (\"*.a\", \"*.lib\"))\n                    # Looking at all the files is very slow.\n                    if not dynamic_lib and not static_lib:\n                        continue\n                    rp = normpath(relpath(fp, prefix)).replace(\"\\\\\", \"/\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 771,
                  "startColumn": 61,
                  "endLine": 771,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    return \"non-library\"\n\n\n# This is really just a small, fixed sysroot and it is rooted at ''. `libcrypto.0.9.8.dylib` should not be in it IMHO.\nDEFAULT_MAC_WHITELIST = [\n    \"/opt/X11/\",\n    \"/usr/lib/libSystem.B.dylib\",\n",
                    "rendered": {
                      "text": "    return \"non-library\"\n\n\n# This is really just a small, fixed sysroot and it is rooted at ''. `libcrypto.0.9.8.dylib` should not be in it IMHO.\nDEFAULT_MAC_WHITELIST = [\n    \"/opt/X11/\",\n    \"/usr/lib/libSystem.B.dylib\",\n",
                      "markdown": "`    return \"non-library\"\n\n\n# This is really just a small, fixed sysroot and it is rooted at ''. `libcrypto.0.9.8.dylib` should not be in it IMHO.\nDEFAULT_MAC_WHITELIST = [\n    \"/opt/X11/\",\n    \"/usr/lib/libSystem.B.dylib\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 29,
                  "endLine": 669,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        for prefix in (host_prefix, build_prefix):\n            if prefix and name.startswith(prefix):\n                raise RuntimeError(\n                    f\"library at {path} appears to have an absolute path embedded\"\n                )\n\n\n",
                    "rendered": {
                      "text": "        for prefix in (host_prefix, build_prefix):\n            if prefix and name.startswith(prefix):\n                raise RuntimeError(\n                    f\"library at {path} appears to have an absolute path embedded\"\n                )\n\n\n",
                      "markdown": "`        for prefix in (host_prefix, build_prefix):\n            if prefix and name.startswith(prefix):\n                raise RuntimeError(\n                    f\"library at {path} appears to have an absolute path embedded\"\n                )\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 45,
                  "endLine": 453,
                  "snippet": {
                    "text": "    # lib_to_link = 'things'\n    # path_to_lib = '../..'\n\n    # @rpath always means 'lib', link will be at\n    # @rpath/lib_to_link/basename(link), like @rpath/things/libthings.dylib.\n\n    # For when we can't use @rpath, @loader_path means the path to the library\n    # ('path'), so from path to link is\n",
                    "rendered": {
                      "text": "    # lib_to_link = 'things'\n    # path_to_lib = '../..'\n\n    # @rpath always means 'lib', link will be at\n    # @rpath/lib_to_link/basename(link), like @rpath/things/libthings.dylib.\n\n    # For when we can't use @rpath, @loader_path means the path to the library\n    # ('path'), so from path to link is\n",
                      "markdown": "`    # lib_to_link = 'things'\n    # path_to_lib = '../..'\n\n    # @rpath always means 'lib', link will be at\n    # @rpath/lib_to_link/basename(link), like @rpath/things/libthings.dylib.\n\n    # For when we can't use @rpath, @loader_path means the path to the library\n    # ('path'), so from path to link is\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1777,
                  "startColumn": 24,
                  "endLine": 1777,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            link_path = os.readlink(path)\n            real_link_path = realpath(path)\n            # symlinks to binaries outside of the same dir don't work.  RPATH stuff gets confused\n            #    because ld.so follows symlinks in RPATHS\n            #    If condition exists, then copy the file rather than symlink it.\n            if not dirname(link_path) == dirname(real_link_path) and codefile_class(\n                f, skip_symlinks=True\n",
                    "rendered": {
                      "text": "            link_path = os.readlink(path)\n            real_link_path = realpath(path)\n            # symlinks to binaries outside of the same dir don't work.  RPATH stuff gets confused\n            #    because ld.so follows symlinks in RPATHS\n            #    If condition exists, then copy the file rather than symlink it.\n            if not dirname(link_path) == dirname(real_link_path) and codefile_class(\n                f, skip_symlinks=True\n",
                      "markdown": "`            link_path = os.readlink(path)\n            real_link_path = realpath(path)\n            # symlinks to binaries outside of the same dir don't work.  RPATH stuff gets confused\n            #    because ld.so follows symlinks in RPATHS\n            #    If condition exists, then copy the file rather than symlink it.\n            if not dirname(link_path) == dirname(real_link_path) and codefile_class(\n                f, skip_symlinks=True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1388,
                  "startColumn": 5,
                  "endLine": 1388,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n    whitelist += missing_dso_whitelist or []\n\n    # Sort the sysroots by the number of files in them so things can assume that\n    # the first sysroot is more important than others.\n    sysroots_files = dict()\n    for sysroot in sysroots:\n",
                    "rendered": {
                      "text": "\n    whitelist += missing_dso_whitelist or []\n\n    # Sort the sysroots by the number of files in them so things can assume that\n    # the first sysroot is more important than others.\n    sysroots_files = dict()\n    for sysroot in sysroots:\n",
                      "markdown": "`\n    whitelist += missing_dso_whitelist or []\n\n    # Sort the sysroots by the number of files in them so things can assume that\n    # the first sysroot is more important than others.\n    sysroots_files = dict()\n    for sysroot in sysroots:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1076,
                  "startColumn": 30,
                  "endLine": 1076,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                        verbose=verbose,\n                    )\n    if not in_sysroots:\n        # It takes a very long time to glob in C:/Windows so we do not do that.\n        for replacement in replacements:\n            needed_dso_w = needed_dso.replace(sysroot_substitution, replacement + \"/\")\n            # We should pass in multiple paths at once to this, but the code isn't structured for that.\n",
                    "rendered": {
                      "text": "                        verbose=verbose,\n                    )\n    if not in_sysroots:\n        # It takes a very long time to glob in C:/Windows so we do not do that.\n        for replacement in replacements:\n            needed_dso_w = needed_dso.replace(sysroot_substitution, replacement + \"/\")\n            # We should pass in multiple paths at once to this, but the code isn't structured for that.\n",
                      "markdown": "`                        verbose=verbose,\n                    )\n    if not in_sysroots:\n        # It takes a very long time to glob in C:/Windows so we do not do that.\n        for replacement in replacements:\n            needed_dso_w = needed_dso.replace(sysroot_substitution, replacement + \"/\")\n            # We should pass in multiple paths at once to this, but the code isn't structured for that.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1016,
                  "startColumn": 56,
                  "endLine": 1016,
                  "endColumn": 62,
                  "snippet": {
                    "text": "):\n    # A system or ignored dependency. We should be able to find it in one of the CDT or\n    # compiler packages on linux or in a sysroot folder on other OSes. These usually\n    # start with '$RPATH/' which indicates pyldd did not find them, so remove that now.\n    if needed_dso.startswith(sysroot_substitution):\n        replacements = [sysroot_substitution] + [\n            sysroot for sysroot, _ in sysroots_files.items()\n",
                    "rendered": {
                      "text": "):\n    # A system or ignored dependency. We should be able to find it in one of the CDT or\n    # compiler packages on linux or in a sysroot folder on other OSes. These usually\n    # start with '$RPATH/' which indicates pyldd did not find them, so remove that now.\n    if needed_dso.startswith(sysroot_substitution):\n        replacements = [sysroot_substitution] + [\n            sysroot for sysroot, _ in sysroots_files.items()\n",
                      "markdown": "`):\n    # A system or ignored dependency. We should be able to find it in one of the CDT or\n    # compiler packages on linux or in a sysroot folder on other OSes. These usually\n    # start with '$RPATH/' which indicates pyldd did not find them, so remove that now.\n    if needed_dso.startswith(sysroot_substitution):\n        replacements = [sysroot_substitution] + [\n            sysroot for sysroot, _ in sysroots_files.items()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 1014,
                  "startColumn": 58,
                  "endLine": 1014,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    subdir,\n    verbose,\n):\n    # A system or ignored dependency. We should be able to find it in one of the CDT or\n    # compiler packages on linux or in a sysroot folder on other OSes. These usually\n    # start with '$RPATH/' which indicates pyldd did not find them, so remove that now.\n    if needed_dso.startswith(sysroot_substitution):\n",
                    "rendered": {
                      "text": "    subdir,\n    verbose,\n):\n    # A system or ignored dependency. We should be able to find it in one of the CDT or\n    # compiler packages on linux or in a sysroot folder on other OSes. These usually\n    # start with '$RPATH/' which indicates pyldd did not find them, so remove that now.\n    if needed_dso.startswith(sysroot_substitution):\n",
                      "markdown": "`    subdir,\n    verbose,\n):\n    # A system or ignored dependency. We should be able to find it in one of the CDT or\n    # compiler packages on linux or in a sysroot folder on other OSes. These usually\n    # start with '$RPATH/' which indicates pyldd did not find them, so remove that now.\n    if needed_dso.startswith(sysroot_substitution):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 83,
                  "endLine": 884,
                  "endColumn": 89,
                  "snippet": {
                    "text": "                resolved = resolved.replace(build_prefix, build_prefix_substitution)\n            if resolved.startswith(run_prefix):\n                resolved = relpath(resolved, run_prefix).replace(os.sep, \"/\")\n            # If resolved still starts with '$RPATH' then that means we will either find it in\n            # the whitelist or it will present as an error later.\n            res[\"resolved\"] = resolved\n        needed_dsos_for_file[f] = needed\n",
                    "rendered": {
                      "text": "                resolved = resolved.replace(build_prefix, build_prefix_substitution)\n            if resolved.startswith(run_prefix):\n                resolved = relpath(resolved, run_prefix).replace(os.sep, \"/\")\n            # If resolved still starts with '$RPATH' then that means we will either find it in\n            # the whitelist or it will present as an error later.\n            res[\"resolved\"] = resolved\n        needed_dsos_for_file[f] = needed\n",
                      "markdown": "`                resolved = resolved.replace(build_prefix, build_prefix_substitution)\n            if resolved.startswith(run_prefix):\n                resolved = relpath(resolved, run_prefix).replace(os.sep, \"/\")\n            # If resolved still starts with '$RPATH' then that means we will either find it in\n            # the whitelist or it will present as an error later.\n            res[\"resolved\"] = resolved\n        needed_dsos_for_file[f] = needed\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 29,
                  "endLine": 413,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                    \"Choosing the first one.\"\n                )\n        return file_names[link][0]\n    print(f\"Don't know how to find {link}, skipping\")\n\n\ndef osx_ch_link(path, link_dict, host_prefix, build_prefix, files):\n",
                    "rendered": {
                      "text": "                    \"Choosing the first one.\"\n                )\n        return file_names[link][0]\n    print(f\"Don't know how to find {link}, skipping\")\n\n\ndef osx_ch_link(path, link_dict, host_prefix, build_prefix, files):\n",
                      "markdown": "`                    \"Choosing the first one.\"\n                )\n        return file_names[link][0]\n    print(f\"Don't know how to find {link}, skipping\")\n\n\ndef osx_ch_link(path, link_dict, host_prefix, build_prefix, files):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 39,
                  "endLine": 392,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        for f in files:\n            file_names[basename(f)].append(f)\n        if link not in file_names:\n            sys.exit(f\"Error: Could not find {link}\")\n        if len(file_names[link]) > 1:\n            if path and basename(path) == link:\n                # The link is for the file itself, just use it\n",
                    "rendered": {
                      "text": "        for f in files:\n            file_names[basename(f)].append(f)\n        if link not in file_names:\n            sys.exit(f\"Error: Could not find {link}\")\n        if len(file_names[link]) > 1:\n            if path and basename(path) == link:\n                # The link is for the file itself, just use it\n",
                      "markdown": "`        for f in files:\n            file_names[basename(f)].append(f)\n        if link not in file_names:\n            sys.exit(f\"Error: Could not find {link}\")\n        if len(file_names[link]) > 1:\n            if path and basename(path) == link:\n                # The link is for the file itself, just use it\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 39,
                  "endLine": 378,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    if link.startswith(prefix):\n        link = normpath(link[len(prefix) + 1 :])\n        if not any(link == normpath(w) for w in files):\n            sys.exit(f\"Error: Could not find {link}\")\n        return link\n    if link.startswith(\"/\"):  # but doesn't start with the build prefix\n        return\n",
                    "rendered": {
                      "text": "    if link.startswith(prefix):\n        link = normpath(link[len(prefix) + 1 :])\n        if not any(link == normpath(w) for w in files):\n            sys.exit(f\"Error: Could not find {link}\")\n        return link\n    if link.startswith(\"/\"):  # but doesn't start with the build prefix\n        return\n",
                      "markdown": "`    if link.startswith(prefix):\n        link = normpath(link[len(prefix) + 1 :])\n        if not any(link == normpath(w) for w in files):\n            sys.exit(f\"Error: Could not find {link}\")\n        return link\n    if link.startswith(\"/\"):  # but doesn't start with the build prefix\n        return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/post.py"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 32,
                  "endLine": 341,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                _, distname, f_lower = f_lower.rpartition(name + \"-\")\n                if distname == name and version != f_lower:\n                    print(\n                        f\"ERROR: Top level dist-info version incorrect (is {f_lower}, should be {version})\"\n                    )\n                    sys.exit(1)\n                else:\n",
                    "rendered": {
                      "text": "                _, distname, f_lower = f_lower.rpartition(name + \"-\")\n                if distname == name and version != f_lower:\n                    print(\n                        f\"ERROR: Top level dist-info version incorrect (is {f_lower}, should be {version})\"\n                    )\n                    sys.exit(1)\n                else:\n",
                      "markdown": "`                _, distname, f_lower = f_lower.rpartition(name + \"-\")\n                if distname == name and version != f_lower:\n                    print(\n                        f\"ERROR: Top level dist-info version incorrect (is {f_lower}, should be {version})\"\n                    )\n                    sys.exit(1)\n                else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 25,
                  "endLine": 401,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    When resolving shared object dependencies, the dynamic linker first inspects each dependency\n    string to see if it contains a slash (this can occur if a shared object pathname containing\n    slashes was specified at link time).  If a slash is found, then the dependency string is\n    interpreted as a (relative or absolute) pathname, and the shared object is loaded using that\n    pathname.\n\n",
                    "rendered": {
                      "text": "\n    When resolving shared object dependencies, the dynamic linker first inspects each dependency\n    string to see if it contains a slash (this can occur if a shared object pathname containing\n    slashes was specified at link time).  If a slash is found, then the dependency string is\n    interpreted as a (relative or absolute) pathname, and the shared object is loaded using that\n    pathname.\n\n",
                      "markdown": "`\n    When resolving shared object dependencies, the dynamic linker first inspects each dependency\n    string to see if it contains a slash (this can occur if a shared object pathname containing\n    slashes was specified at link time).  If a slash is found, then the dependency string is\n    interpreted as a (relative or absolute) pathname, and the shared object is loaded using that\n    pathname.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 6,
                  "endLine": 308,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\ndef find_lc_rpath(file, where, bits, endian, cmd, cmdsize):\n    if cmd == LC_RPATH:\n        # The first data field in LC_LOAD_DYLIB commands is the\n        # offset of the name, starting from the beginning of the\n        # command.\n",
                    "rendered": {
                      "text": "\n\ndef find_lc_rpath(file, where, bits, endian, cmd, cmdsize):\n    if cmd == LC_RPATH:\n        # The first data field in LC_LOAD_DYLIB commands is the\n        # offset of the name, starting from the beginning of the\n        # command.\n",
                      "markdown": "`\n\ndef find_lc_rpath(file, where, bits, endian, cmd, cmdsize):\n    if cmd == LC_RPATH:\n        # The first data field in LC_LOAD_DYLIB commands is the\n        # offset of the name, starting from the beginning of the\n        # command.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 6,
                  "endLine": 293,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\ndef find_lc_load_dylib(file, where, bits, endian, cmd, cmdsize, what):\n    if cmd & ~LC_REQ_DYLD in LC_LOAD_DYLIBS:\n        # The first data field in LC_LOAD_DYLIB commands is the\n        # offset of the name, starting from the beginning of the\n        # command.\n",
                    "rendered": {
                      "text": "\n\ndef find_lc_load_dylib(file, where, bits, endian, cmd, cmdsize, what):\n    if cmd & ~LC_REQ_DYLD in LC_LOAD_DYLIBS:\n        # The first data field in LC_LOAD_DYLIB commands is the\n        # offset of the name, starting from the beginning of the\n        # command.\n",
                      "markdown": "`\n\ndef find_lc_load_dylib(file, where, bits, endian, cmd, cmdsize, what):\n    if cmd & ~LC_REQ_DYLD in LC_LOAD_DYLIBS:\n        # The first data field in LC_LOAD_DYLIB commands is the\n        # offset of the name, starting from the beginning of the\n        # command.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 6,
                  "endLine": 275,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\ndef replace_lc_load_dylib(file, where, bits, endian, cmd, cmdsize, what, val):\n    if cmd & ~LC_REQ_DYLD in LC_LOAD_DYLIBS:\n        # The first data field in LC_LOAD_DYLIB commands is the\n        # offset of the name, starting from the beginning of the\n        # command.\n",
                    "rendered": {
                      "text": "\n\ndef replace_lc_load_dylib(file, where, bits, endian, cmd, cmdsize, what, val):\n    if cmd & ~LC_REQ_DYLD in LC_LOAD_DYLIBS:\n        # The first data field in LC_LOAD_DYLIB commands is the\n        # offset of the name, starting from the beginning of the\n        # command.\n",
                      "markdown": "`\n\ndef replace_lc_load_dylib(file, where, bits, endian, cmd, cmdsize, what, val):\n    if cmd & ~LC_REQ_DYLD in LC_LOAD_DYLIBS:\n        # The first data field in LC_LOAD_DYLIB commands is the\n        # offset of the name, starting from the beginning of the\n        # command.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 7,
                  "endLine": 43,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    def __check_security_property(opt, filename, pattern):\n        cmd   = [readelf,]\n        cmd  += opt.split()\n        cmd  += [filename,]\n        lines = gef_execute_external(cmd, as_list=True)\n        for line in lines:\n            if re.search(pattern, line):\n",
                    "rendered": {
                      "text": "    def __check_security_property(opt, filename, pattern):\n        cmd   = [readelf,]\n        cmd  += opt.split()\n        cmd  += [filename,]\n        lines = gef_execute_external(cmd, as_list=True)\n        for line in lines:\n            if re.search(pattern, line):\n",
                      "markdown": "`    def __check_security_property(opt, filename, pattern):\n        cmd   = [readelf,]\n        cmd  += opt.split()\n        cmd  += [filename,]\n        lines = gef_execute_external(cmd, as_list=True)\n        for line in lines:\n            if re.search(pattern, line):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 7,
                  "endLine": 42,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n    def __check_security_property(opt, filename, pattern):\n        cmd   = [readelf,]\n        cmd  += opt.split()\n        cmd  += [filename,]\n        lines = gef_execute_external(cmd, as_list=True)\n        for line in lines:\n",
                    "rendered": {
                      "text": "\n    def __check_security_property(opt, filename, pattern):\n        cmd   = [readelf,]\n        cmd  += opt.split()\n        cmd  += [filename,]\n        lines = gef_execute_external(cmd, as_list=True)\n        for line in lines:\n",
                      "markdown": "`\n    def __check_security_property(opt, filename, pattern):\n        cmd   = [readelf,]\n        cmd  += opt.split()\n        cmd  += [filename,]\n        lines = gef_execute_external(cmd, as_list=True)\n        for line in lines:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 7,
                  "endLine": 41,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        return\n\n    def __check_security_property(opt, filename, pattern):\n        cmd   = [readelf,]\n        cmd  += opt.split()\n        cmd  += [filename,]\n        lines = gef_execute_external(cmd, as_list=True)\n",
                    "rendered": {
                      "text": "        return\n\n    def __check_security_property(opt, filename, pattern):\n        cmd   = [readelf,]\n        cmd  += opt.split()\n        cmd  += [filename,]\n        lines = gef_execute_external(cmd, as_list=True)\n",
                      "markdown": "`        return\n\n    def __check_security_property(opt, filename, pattern):\n        cmd   = [readelf,]\n        cmd  += opt.split()\n        cmd  += [filename,]\n        lines = gef_execute_external(cmd, as_list=True)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 1246,
                  "startColumn": 9,
                  "endLine": 1246,
                  "endColumn": 15,
                  "snippet": {
                    "text": "            if on_linux:\n                test_that = partial(inspect_linkages_ldd)\n            SOEXT = \"so\"\n        # Find a load of dylibs or elfs and compare\n        # the output against 'otool -L' or 'ldd'\n        # codefiles = glob.glob('/usr/lib/*.'+SOEXT)\n        codefiles = glob.glob(sysroot + \"/usr/lib/*.\" + SOEXT)\n",
                    "rendered": {
                      "text": "            if on_linux:\n                test_that = partial(inspect_linkages_ldd)\n            SOEXT = \"so\"\n        # Find a load of dylibs or elfs and compare\n        # the output against 'otool -L' or 'ldd'\n        # codefiles = glob.glob('/usr/lib/*.'+SOEXT)\n        codefiles = glob.glob(sysroot + \"/usr/lib/*.\" + SOEXT)\n",
                      "markdown": "`            if on_linux:\n                test_that = partial(inspect_linkages_ldd)\n            SOEXT = \"so\"\n        # Find a load of dylibs or elfs and compare\n        # the output against 'otool -L' or 'ldd'\n        # codefiles = glob.glob('/usr/lib/*.'+SOEXT)\n        codefiles = glob.glob(sysroot + \"/usr/lib/*.\" + SOEXT)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 755,
                  "startColumn": 71,
                  "endLine": 756,
                  "snippet": {
                    "text": "            #\n            # the $ORIGIN token\n            #\n            # To support flexible RUNPATH (and RPATH) settings, the GNU ld.so\n            # (also the SUN and Irix linkers) allow the usage of some \"magic\"\n            # tokens in the .dynamic section of ELF binaries (both libraries\n            # and executables):\n            #\n",
                    "rendered": {
                      "text": "            #\n            # the $ORIGIN token\n            #\n            # To support flexible RUNPATH (and RPATH) settings, the GNU ld.so\n            # (also the SUN and Irix linkers) allow the usage of some \"magic\"\n            # tokens in the .dynamic section of ELF binaries (both libraries\n            # and executables):\n            #\n",
                      "markdown": "`            #\n            # the $ORIGIN token\n            #\n            # To support flexible RUNPATH (and RPATH) settings, the GNU ld.so\n            # (also the SUN and Irix linkers) allow the usage of some \"magic\"\n            # tokens in the .dynamic section of ELF binaries (both libraries\n            # and executables):\n            #\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 62,
                  "endLine": 415,
                  "endColumn": 68,
                  "snippet": {
                    "text": "      secure-execution mode; see below).  in which case it is ignored.\n\n    o Using the directories specified in the DT_RUNPATH dynamic section attribute of the\n      binary if present. Such directories are searched only to find those objects required\n      by DT_NEEDED (direct dependencies) entries and do not apply to those objects' children,\n      which must themselves have their own DT_RUNPATH entries. This is unlike DT_RPATH,\n      which is applied to searches for all children in the dependency tree.\n",
                    "rendered": {
                      "text": "      secure-execution mode; see below).  in which case it is ignored.\n\n    o Using the directories specified in the DT_RUNPATH dynamic section attribute of the\n      binary if present. Such directories are searched only to find those objects required\n      by DT_NEEDED (direct dependencies) entries and do not apply to those objects' children,\n      which must themselves have their own DT_RUNPATH entries. This is unlike DT_RPATH,\n      which is applied to searches for all children in the dependency tree.\n",
                      "markdown": "`      secure-execution mode; see below).  in which case it is ignored.\n\n    o Using the directories specified in the DT_RUNPATH dynamic section attribute of the\n      binary if present. Such directories are searched only to find those objects required\n      by DT_NEEDED (direct dependencies) entries and do not apply to those objects' children,\n      which must themselves have their own DT_RUNPATH entries. This is unlike DT_RPATH,\n      which is applied to searches for all children in the dependency tree.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 7,
                  "endLine": 35,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    associated whether the protection was found.\"\"\"\n\n    try:\n        readelf = which(\"readelf\")\n    except IOError:\n        err(\"Missing `readelf`\")\n        return\n",
                    "rendered": {
                      "text": "    associated whether the protection was found.\"\"\"\n\n    try:\n        readelf = which(\"readelf\")\n    except IOError:\n        err(\"Missing `readelf`\")\n        return\n",
                      "markdown": "`    associated whether the protection was found.\"\"\"\n\n    try:\n        readelf = which(\"readelf\")\n    except IOError:\n        err(\"Missing `readelf`\")\n        return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 20,
                  "endLine": 22,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n'''\n# Detect security flags via readelf (from https://github.com/hugsy/gef)\n# .. spawning out to readelf is not something we intend to do though ..\n@lru_cache(32)\ndef checksec(filename):\n    \"\"\"Check the security property of the ELF binary. The following properties are:\n",
                    "rendered": {
                      "text": "\n'''\n# Detect security flags via readelf (from https://github.com/hugsy/gef)\n# .. spawning out to readelf is not something we intend to do though ..\n@lru_cache(32)\ndef checksec(filename):\n    \"\"\"Check the security property of the ELF binary. The following properties are:\n",
                      "markdown": "`\n'''\n# Detect security flags via readelf (from https://github.com/hugsy/gef)\n# .. spawning out to readelf is not something we intend to do though ..\n@lru_cache(32)\ndef checksec(filename):\n    \"\"\"Check the security property of the ELF binary. The following properties are:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/pyldd.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 27,
                  "endLine": 21,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n\n'''\n# Detect security flags via readelf (from https://github.com/hugsy/gef)\n# .. spawning out to readelf is not something we intend to do though ..\n@lru_cache(32)\ndef checksec(filename):\n",
                    "rendered": {
                      "text": "\n\n'''\n# Detect security flags via readelf (from https://github.com/hugsy/gef)\n# .. spawning out to readelf is not something we intend to do though ..\n@lru_cache(32)\ndef checksec(filename):\n",
                      "markdown": "`\n\n'''\n# Detect security flags via readelf (from https://github.com/hugsy/gef)\n# .. spawning out to readelf is not something we intend to do though ..\n@lru_cache(32)\ndef checksec(filename):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/macho.py"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 45,
                  "endLine": 301,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n\ndef delete_rpath(path, rpath, build_prefix=None, verbose=False):\n    \"\"\"Delete an `rpath` from the Mach-O file at `path`\"\"\"\n    if not is_macho(path):\n        return\n    args = [\"-delete_rpath\", rpath, path]\n",
                    "rendered": {
                      "text": "\n\ndef delete_rpath(path, rpath, build_prefix=None, verbose=False):\n    \"\"\"Delete an `rpath` from the Mach-O file at `path`\"\"\"\n    if not is_macho(path):\n        return\n    args = [\"-delete_rpath\", rpath, path]\n",
                      "markdown": "`\n\ndef delete_rpath(path, rpath, build_prefix=None, verbose=False):\n    \"\"\"Delete an `rpath` from the Mach-O file at `path`\"\"\"\n    if not is_macho(path):\n        return\n    args = [\"-delete_rpath\", rpath, path]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/macho.py"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 40,
                  "endLine": 283,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n\ndef add_rpath(path, rpath, build_prefix=None, verbose=False):\n    \"\"\"Add an `rpath` to the Mach-O file at `path`\"\"\"\n    if not is_macho(path):\n        return\n    args = [\"-add_rpath\", rpath, path]\n",
                    "rendered": {
                      "text": "\n\ndef add_rpath(path, rpath, build_prefix=None, verbose=False):\n    \"\"\"Add an `rpath` to the Mach-O file at `path`\"\"\"\n    if not is_macho(path):\n        return\n    args = [\"-add_rpath\", rpath, path]\n",
                      "markdown": "`\n\ndef add_rpath(path, rpath, build_prefix=None, verbose=False):\n    \"\"\"Add an `rpath` to the Mach-O file at `path`\"\"\"\n    if not is_macho(path):\n        return\n    args = [\"-add_rpath\", rpath, path]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/macho.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 7,
                  "endLine": 65,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    if path.endswith(NO_EXT) or os.path.islink(path) or not os.path.isfile(path):\n        return False\n    with open(path, \"rb\") as fi:\n        head = fi.read(4)\n    return bool(head in MAGIC)\n\n\n",
                    "rendered": {
                      "text": "    if path.endswith(NO_EXT) or os.path.islink(path) or not os.path.isfile(path):\n        return False\n    with open(path, \"rb\") as fi:\n        head = fi.read(4)\n    return bool(head in MAGIC)\n\n\n",
                      "markdown": "`    if path.endswith(NO_EXT) or os.path.islink(path) or not os.path.isfile(path):\n        return False\n    with open(path, \"rb\") as fi:\n        head = fi.read(4)\n    return bool(head in MAGIC)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/liefldd.py"
                },
                "region": {
                  "startLine": 1177,
                  "startColumn": 17,
                  "endLine": 1177,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                        if not data:\n                            break\n                        sha1.update(data)\n                # update with file name, if its a different\n                # file with the same contents, we don't want\n                # to treat it as cached\n                sha1.update(os.path.realpath(arg).encode(\"utf-8\"))\n",
                    "rendered": {
                      "text": "                        if not data:\n                            break\n                        sha1.update(data)\n                # update with file name, if its a different\n                # file with the same contents, we don't want\n                # to treat it as cached\n                sha1.update(os.path.realpath(arg).encode(\"utf-8\"))\n",
                      "markdown": "`                        if not data:\n                            break\n                        sha1.update(data)\n                # update with file name, if its a different\n                # file with the same contents, we don't want\n                # to treat it as cached\n                sha1.update(os.path.realpath(arg).encode(\"utf-8\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/liefldd.py"
                },
                "region": {
                  "startLine": 1027,
                  "startColumn": 22,
                  "endLine": 1027,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            and is_archive(filename)\n        ) and not on_win:\n            # syms = os.system('nm -g {}'.filename)\n            # on macOS at least:\n            # -PgUj is:\n            # P: posix format\n            # g: global (exported) only\n",
                    "rendered": {
                      "text": "            and is_archive(filename)\n        ) and not on_win:\n            # syms = os.system('nm -g {}'.filename)\n            # on macOS at least:\n            # -PgUj is:\n            # P: posix format\n            # g: global (exported) only\n",
                      "markdown": "`            and is_archive(filename)\n        ) and not on_win:\n            # syms = os.system('nm -g {}'.filename)\n            # on macOS at least:\n            # -PgUj is:\n            # P: posix format\n            # g: global (exported) only\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/liefldd.py"
                },
                "region": {
                  "startLine": 862,
                  "startColumn": 26,
                  "endLine": 862,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                print(hex(obj_start), hex(obj_end), obj_end - obj_start)\n            if MACHINE_TYPE in (IMAGE_FILE_MACHINE_I386, IMAGE_FILE_MACHINE_AMD64):\n                # 'This file is not a PE binary' (yeah, fair enough, it's a COFF file).\n                # Reported at https://github.com/lief-project/LIEF/issues/233#issuecomment-452580391\n                try:\n                    obj = lief.PE.parse(raw=content[obj_start : obj_end - 1])\n                except:\n",
                    "rendered": {
                      "text": "                print(hex(obj_start), hex(obj_end), obj_end - obj_start)\n            if MACHINE_TYPE in (IMAGE_FILE_MACHINE_I386, IMAGE_FILE_MACHINE_AMD64):\n                # 'This file is not a PE binary' (yeah, fair enough, it's a COFF file).\n                # Reported at https://github.com/lief-project/LIEF/issues/233#issuecomment-452580391\n                try:\n                    obj = lief.PE.parse(raw=content[obj_start : obj_end - 1])\n                except:\n",
                      "markdown": "`                print(hex(obj_start), hex(obj_end), obj_end - obj_start)\n            if MACHINE_TYPE in (IMAGE_FILE_MACHINE_I386, IMAGE_FILE_MACHINE_AMD64):\n                # 'This file is not a PE binary' (yeah, fair enough, it's a COFF file).\n                # Reported at https://github.com/lief-project/LIEF/issues/233#issuecomment-452580391\n                try:\n                    obj = lief.PE.parse(raw=content[obj_start : obj_end - 1])\n                except:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/liefldd.py"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 57,
                  "endLine": 496,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        default_paths = [\"$SYSROOT/usr/lib\"]\n    elif binary.format == EXE_FORMATS.PE:\n        # We do not include C:\\Windows nor C:\\Windows\\System32 in this list. They are added in\n        # get_rpaths() instead since we need to carefully control the order.\n        default_paths = [\n            \"$SYSROOT/System32/Wbem\",\n            \"$SYSROOT/System32/WindowsPowerShell/v1.0\",\n",
                    "rendered": {
                      "text": "        default_paths = [\"$SYSROOT/usr/lib\"]\n    elif binary.format == EXE_FORMATS.PE:\n        # We do not include C:\\Windows nor C:\\Windows\\System32 in this list. They are added in\n        # get_rpaths() instead since we need to carefully control the order.\n        default_paths = [\n            \"$SYSROOT/System32/Wbem\",\n            \"$SYSROOT/System32/WindowsPowerShell/v1.0\",\n",
                      "markdown": "`        default_paths = [\"$SYSROOT/usr/lib\"]\n    elif binary.format == EXE_FORMATS.PE:\n        # We do not include C:\\Windows nor C:\\Windows\\System32 in this list. They are added in\n        # get_rpaths() instead since we need to carefully control the order.\n        default_paths = [\n            \"$SYSROOT/System32/Wbem\",\n            \"$SYSROOT/System32/WindowsPowerShell/v1.0\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/liefldd.py"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 25,
                  "endLine": 392,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    When resolving shared object dependencies, the dynamic linker first inspects each dependency\n    string to see if it contains a slash (this can occur if a shared object pathname containing\n    slashes was specified at link time).  If a slash is found, then the dependency string is\n    interpreted as a (relative or absolute) pathname, and the shared object is loaded using that\n    pathname.\n\n",
                    "rendered": {
                      "text": "\n    When resolving shared object dependencies, the dynamic linker first inspects each dependency\n    string to see if it contains a slash (this can occur if a shared object pathname containing\n    slashes was specified at link time).  If a slash is found, then the dependency string is\n    interpreted as a (relative or absolute) pathname, and the shared object is loaded using that\n    pathname.\n\n",
                      "markdown": "`\n    When resolving shared object dependencies, the dynamic linker first inspects each dependency\n    string to see if it contains a slash (this can occur if a shared object pathname containing\n    slashes was specified at link time).  If a slash is found, then the dependency string is\n    interpreted as a (relative or absolute) pathname, and the shared object is loaded using that\n    pathname.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/liefldd.py"
                },
                "region": {
                  "startLine": 1153,
                  "startColumn": 55,
                  "endLine": 1153,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n\nclass memoized_by_arg0_filehash:\n    \"\"\"Decorator. Caches a function's return value each time it is called.\n    If called later with the same arguments, the cached value is returned\n    (not reevaluated).\n\n",
                    "rendered": {
                      "text": "\n\nclass memoized_by_arg0_filehash:\n    \"\"\"Decorator. Caches a function's return value each time it is called.\n    If called later with the same arguments, the cached value is returned\n    (not reevaluated).\n\n",
                      "markdown": "`\n\nclass memoized_by_arg0_filehash:\n    \"\"\"Decorator. Caches a function's return value each time it is called.\n    If called later with the same arguments, the cached value is returned\n    (not reevaluated).\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/liefldd.py"
                },
                "region": {
                  "startLine": 948,
                  "startColumn": 7,
                  "endLine": 948,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        \"\"\"\n        Oh the fun:\n        https://stackoverflow.com/questions/41106407/programmatically-finding-the-vs2017-installation-directory\n        Nice to see MS avoiding the Windows Registry though, took them a while! Still, let's ignore that, we just\n        want a good dumpbin!\n        \"\"\"\n        pfx86 = os.environ[\"PROGRAMFILES(X86)\"]\n",
                    "rendered": {
                      "text": "        \"\"\"\n        Oh the fun:\n        https://stackoverflow.com/questions/41106407/programmatically-finding-the-vs2017-installation-directory\n        Nice to see MS avoiding the Windows Registry though, took them a while! Still, let's ignore that, we just\n        want a good dumpbin!\n        \"\"\"\n        pfx86 = os.environ[\"PROGRAMFILES(X86)\"]\n",
                      "markdown": "`        \"\"\"\n        Oh the fun:\n        https://stackoverflow.com/questions/41106407/programmatically-finding-the-vs2017-installation-directory\n        Nice to see MS avoiding the Windows Registry though, took them a while! Still, let's ignore that, we just\n        want a good dumpbin!\n        \"\"\"\n        pfx86 = os.environ[\"PROGRAMFILES(X86)\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/liefldd.py"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 62,
                  "endLine": 406,
                  "endColumn": 68,
                  "snippet": {
                    "text": "      secure-execution mode; see below).  in which case it is ignored.\n\n    o Using the directories specified in the DT_RUNPATH dynamic section attribute of the\n      binary if present. Such directories are searched only to find those objects required\n      by DT_NEEDED (direct dependencies) entries and do not apply to those objects' children,\n      which must themselves have their own DT_RUNPATH entries. This is unlike DT_RPATH,\n      which is applied to searches for all children in the dependency tree.\n",
                    "rendered": {
                      "text": "      secure-execution mode; see below).  in which case it is ignored.\n\n    o Using the directories specified in the DT_RUNPATH dynamic section attribute of the\n      binary if present. Such directories are searched only to find those objects required\n      by DT_NEEDED (direct dependencies) entries and do not apply to those objects' children,\n      which must themselves have their own DT_RUNPATH entries. This is unlike DT_RPATH,\n      which is applied to searches for all children in the dependency tree.\n",
                      "markdown": "`      secure-execution mode; see below).  in which case it is ignored.\n\n    o Using the directories specified in the DT_RUNPATH dynamic section attribute of the\n      binary if present. Such directories are searched only to find those objects required\n      by DT_NEEDED (direct dependencies) entries and do not apply to those objects' children,\n      which must themselves have their own DT_RUNPATH entries. This is unlike DT_RPATH,\n      which is applied to searches for all children in the dependency tree.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/liefldd.py"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 34,
                  "endLine": 261,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    rpaths, rpaths_type, binary_format, binary_type = get_runpaths_or_rpaths_raw(file)\n    if binary_format == EXE_FORMATS.PE:\n        # To allow the unix-y rpath code to work we consider\n        # exes as having rpaths of env + CONDA_WINDOWS_PATHS\n        # and consider DLLs as having no rpaths.\n        # .. scratch that, we don't pass exes in as the root\n        # entries so we just need rpaths for all files and\n",
                    "rendered": {
                      "text": "    rpaths, rpaths_type, binary_format, binary_type = get_runpaths_or_rpaths_raw(file)\n    if binary_format == EXE_FORMATS.PE:\n        # To allow the unix-y rpath code to work we consider\n        # exes as having rpaths of env + CONDA_WINDOWS_PATHS\n        # and consider DLLs as having no rpaths.\n        # .. scratch that, we don't pass exes in as the root\n        # entries so we just need rpaths for all files and\n",
                      "markdown": "`    rpaths, rpaths_type, binary_format, binary_type = get_runpaths_or_rpaths_raw(file)\n    if binary_format == EXE_FORMATS.PE:\n        # To allow the unix-y rpath code to work we consider\n        # exes as having rpaths of env + CONDA_WINDOWS_PATHS\n        # and consider DLLs as having no rpaths.\n        # .. scratch that, we don't pass exes in as the root\n        # entries so we just need rpaths for all files and\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/os_utils/elf.py"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 7,
                  "endLine": 29,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    if path.endswith(NO_EXT) or islink(path) or not isfile(path):\n        return False\n    with open(path, \"rb\") as fi:\n        head = fi.read(4)\n    return bool(head == MAGIC)\n",
                    "rendered": {
                      "text": "    if path.endswith(NO_EXT) or islink(path) or not isfile(path):\n        return False\n    with open(path, \"rb\") as fi:\n        head = fi.read(4)\n    return bool(head == MAGIC)\n",
                      "markdown": "`    if path.endswith(NO_EXT) or islink(path) or not isfile(path):\n        return False\n    with open(path, \"rb\") as fi:\n        head = fi.read(4)\n    return bool(head == MAGIC)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3890,
                  "startColumn": 30,
                  "endLine": 3890,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    max_memory_used = max([step.get(\"rss\") for step in stats.values()] or [0])\n    total_disk = sum([step.get(\"disk\") for step in stats.values()] or [0])\n    total_cpu_sys = sum([step.get(\"cpu_sys\") for step in stats.values()] or [0])\n    total_cpu_user = sum([step.get(\"cpu_user\") for step in stats.values()] or [0])\n\n    print(\n        \"{bar}\\n\"\n",
                    "rendered": {
                      "text": "    max_memory_used = max([step.get(\"rss\") for step in stats.values()] or [0])\n    total_disk = sum([step.get(\"disk\") for step in stats.values()] or [0])\n    total_cpu_sys = sum([step.get(\"cpu_sys\") for step in stats.values()] or [0])\n    total_cpu_user = sum([step.get(\"cpu_user\") for step in stats.values()] or [0])\n\n    print(\n        \"{bar}\\n\"\n",
                      "markdown": "`    max_memory_used = max([step.get(\"rss\") for step in stats.values()] or [0])\n    total_disk = sum([step.get(\"disk\") for step in stats.values()] or [0])\n    total_cpu_sys = sum([step.get(\"cpu_sys\") for step in stats.values()] or [0])\n    total_cpu_user = sum([step.get(\"cpu_user\") for step in stats.values()] or [0])\n\n    print(\n        \"{bar}\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3889,
                  "startColumn": 29,
                  "endLine": 3889,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    total_time = time.time() - initial_time\n    max_memory_used = max([step.get(\"rss\") for step in stats.values()] or [0])\n    total_disk = sum([step.get(\"disk\") for step in stats.values()] or [0])\n    total_cpu_sys = sum([step.get(\"cpu_sys\") for step in stats.values()] or [0])\n    total_cpu_user = sum([step.get(\"cpu_user\") for step in stats.values()] or [0])\n\n    print(\n",
                    "rendered": {
                      "text": "    total_time = time.time() - initial_time\n    max_memory_used = max([step.get(\"rss\") for step in stats.values()] or [0])\n    total_disk = sum([step.get(\"disk\") for step in stats.values()] or [0])\n    total_cpu_sys = sum([step.get(\"cpu_sys\") for step in stats.values()] or [0])\n    total_cpu_user = sum([step.get(\"cpu_user\") for step in stats.values()] or [0])\n\n    print(\n",
                      "markdown": "`    total_time = time.time() - initial_time\n    max_memory_used = max([step.get(\"rss\") for step in stats.values()] or [0])\n    total_disk = sum([step.get(\"disk\") for step in stats.values()] or [0])\n    total_cpu_sys = sum([step.get(\"cpu_sys\") for step in stats.values()] or [0])\n    total_cpu_user = sum([step.get(\"cpu_user\") for step in stats.values()] or [0])\n\n    print(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3888,
                  "startColumn": 26,
                  "endLine": 3888,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    total_time = time.time() - initial_time\n    max_memory_used = max([step.get(\"rss\") for step in stats.values()] or [0])\n    total_disk = sum([step.get(\"disk\") for step in stats.values()] or [0])\n    total_cpu_sys = sum([step.get(\"cpu_sys\") for step in stats.values()] or [0])\n    total_cpu_user = sum([step.get(\"cpu_user\") for step in stats.values()] or [0])\n\n",
                    "rendered": {
                      "text": "\n    total_time = time.time() - initial_time\n    max_memory_used = max([step.get(\"rss\") for step in stats.values()] or [0])\n    total_disk = sum([step.get(\"disk\") for step in stats.values()] or [0])\n    total_cpu_sys = sum([step.get(\"cpu_sys\") for step in stats.values()] or [0])\n    total_cpu_user = sum([step.get(\"cpu_user\") for step in stats.values()] or [0])\n\n",
                      "markdown": "`\n    total_time = time.time() - initial_time\n    max_memory_used = max([step.get(\"rss\") for step in stats.values()] or [0])\n    total_disk = sum([step.get(\"disk\") for step in stats.values()] or [0])\n    total_cpu_sys = sum([step.get(\"cpu_sys\") for step in stats.values()] or [0])\n    total_cpu_user = sum([step.get(\"cpu_user\") for step in stats.values()] or [0])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3887,
                  "startColumn": 31,
                  "endLine": 3887,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    print(\"\\n\")\n\n    total_time = time.time() - initial_time\n    max_memory_used = max([step.get(\"rss\") for step in stats.values()] or [0])\n    total_disk = sum([step.get(\"disk\") for step in stats.values()] or [0])\n    total_cpu_sys = sum([step.get(\"cpu_sys\") for step in stats.values()] or [0])\n    total_cpu_user = sum([step.get(\"cpu_user\") for step in stats.values()] or [0])\n",
                    "rendered": {
                      "text": "    print(\"\\n\")\n\n    total_time = time.time() - initial_time\n    max_memory_used = max([step.get(\"rss\") for step in stats.values()] or [0])\n    total_disk = sum([step.get(\"disk\") for step in stats.values()] or [0])\n    total_cpu_sys = sum([step.get(\"cpu_sys\") for step in stats.values()] or [0])\n    total_cpu_user = sum([step.get(\"cpu_user\") for step in stats.values()] or [0])\n",
                      "markdown": "`    print(\"\\n\")\n\n    total_time = time.time() - initial_time\n    max_memory_used = max([step.get(\"rss\") for step in stats.values()] or [0])\n    total_disk = sum([step.get(\"disk\") for step in stats.values()] or [0])\n    total_cpu_sys = sum([step.get(\"cpu_sys\") for step in stats.values()] or [0])\n    total_cpu_user = sum([step.get(\"cpu_user\") for step in stats.values()] or [0])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3672,
                  "startColumn": 63,
                  "endLine": 3672,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                            # we only know how to test conda packages\n                            test(pkg, config=metadata.config.copy(), stats=stats)\n                        _, meta = dict_and_meta\n                        downstreams = meta.meta.get(\"test\", {}).get(\"downstreams\")\n                        if downstreams:\n                            channel_urls = tuple(\n                                utils.ensure_list(metadata.config.channel_urls)\n",
                    "rendered": {
                      "text": "                            # we only know how to test conda packages\n                            test(pkg, config=metadata.config.copy(), stats=stats)\n                        _, meta = dict_and_meta\n                        downstreams = meta.meta.get(\"test\", {}).get(\"downstreams\")\n                        if downstreams:\n                            channel_urls = tuple(\n                                utils.ensure_list(metadata.config.channel_urls)\n",
                      "markdown": "`                            # we only know how to test conda packages\n                            test(pkg, config=metadata.config.copy(), stats=stats)\n                        _, meta = dict_and_meta\n                        downstreams = meta.meta.get(\"test\", {}).get(\"downstreams\")\n                        if downstreams:\n                            channel_urls = tuple(\n                                utils.ensure_list(metadata.config.channel_urls)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3672,
                  "startColumn": 47,
                  "endLine": 3672,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                            # we only know how to test conda packages\n                            test(pkg, config=metadata.config.copy(), stats=stats)\n                        _, meta = dict_and_meta\n                        downstreams = meta.meta.get(\"test\", {}).get(\"downstreams\")\n                        if downstreams:\n                            channel_urls = tuple(\n                                utils.ensure_list(metadata.config.channel_urls)\n",
                    "rendered": {
                      "text": "                            # we only know how to test conda packages\n                            test(pkg, config=metadata.config.copy(), stats=stats)\n                        _, meta = dict_and_meta\n                        downstreams = meta.meta.get(\"test\", {}).get(\"downstreams\")\n                        if downstreams:\n                            channel_urls = tuple(\n                                utils.ensure_list(metadata.config.channel_urls)\n",
                      "markdown": "`                            # we only know how to test conda packages\n                            test(pkg, config=metadata.config.copy(), stats=stats)\n                        _, meta = dict_and_meta\n                        downstreams = meta.meta.get(\"test\", {}).get(\"downstreams\")\n                        if downstreams:\n                            channel_urls = tuple(\n                                utils.ensure_list(metadata.config.channel_urls)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3459,
                  "startColumn": 25,
                  "endLine": 3459,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    )\n\n    if utils.on_win:\n        cmd = [os.environ.get(\"COMSPEC\", \"cmd.exe\"), \"/d\", \"/c\", test_script]\n    else:\n        cmd = (\n            [shell_path]\n",
                    "rendered": {
                      "text": "    )\n\n    if utils.on_win:\n        cmd = [os.environ.get(\"COMSPEC\", \"cmd.exe\"), \"/d\", \"/c\", test_script]\n    else:\n        cmd = (\n            [shell_path]\n",
                      "markdown": "`    )\n\n    if utils.on_win:\n        cmd = [os.environ.get(\"COMSPEC\", \"cmd.exe\"), \"/d\", \"/c\", test_script]\n    else:\n        cmd = (\n            [shell_path]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3209,
                  "startColumn": 33,
                  "endLine": 3209,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            else:\n                py_flags = (\n                    \"-I -m\"\n                    if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\")\n                    else \"-m\"\n                )\n                tf.write(\n",
                    "rendered": {
                      "text": "            else:\n                py_flags = (\n                    \"-I -m\"\n                    if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\")\n                    else \"-m\"\n                )\n                tf.write(\n",
                      "markdown": "`            else:\n                py_flags = (\n                    \"-I -m\"\n                    if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\")\n                    else \"-m\"\n                )\n                tf.write(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3201,
                  "startColumn": 37,
                  "endLine": 3201,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                        sys.prefix,\n                        \"--dev\" if metadata.config.debug else \"\",\n                        \"-i\"\n                        if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\")\n                        else \"\",\n                        python_exe=sys.executable,\n                    )\n",
                    "rendered": {
                      "text": "                        sys.prefix,\n                        \"--dev\" if metadata.config.debug else \"\",\n                        \"-i\"\n                        if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\")\n                        else \"\",\n                        python_exe=sys.executable,\n                    )\n",
                      "markdown": "`                        sys.prefix,\n                        \"--dev\" if metadata.config.debug else \"\",\n                        \"-i\"\n                        if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\")\n                        else \"\",\n                        python_exe=sys.executable,\n                    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3004,
                  "startColumn": 44,
                  "endLine": 3004,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            metadata.meta[\"test\"] = test_section\n\n        else:\n            if metadata.meta.get(\"test\", {}).get(\"source_files\"):\n                if not metadata.source_provided:\n                    try_download(metadata, no_download_source=False)\n\n",
                    "rendered": {
                      "text": "            metadata.meta[\"test\"] = test_section\n\n        else:\n            if metadata.meta.get(\"test\", {}).get(\"source_files\"):\n                if not metadata.source_provided:\n                    try_download(metadata, no_download_source=False)\n\n",
                      "markdown": "`            metadata.meta[\"test\"] = test_section\n\n        else:\n            if metadata.meta.get(\"test\", {}).get(\"source_files\"):\n                if not metadata.source_provided:\n                    try_download(metadata, no_download_source=False)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3004,
                  "startColumn": 28,
                  "endLine": 3004,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            metadata.meta[\"test\"] = test_section\n\n        else:\n            if metadata.meta.get(\"test\", {}).get(\"source_files\"):\n                if not metadata.source_provided:\n                    try_download(metadata, no_download_source=False)\n\n",
                    "rendered": {
                      "text": "            metadata.meta[\"test\"] = test_section\n\n        else:\n            if metadata.meta.get(\"test\", {}).get(\"source_files\"):\n                if not metadata.source_provided:\n                    try_download(metadata, no_download_source=False)\n\n",
                      "markdown": "`            metadata.meta[\"test\"] = test_section\n\n        else:\n            if metadata.meta.get(\"test\", {}).get(\"source_files\"):\n                if not metadata.source_provided:\n                    try_download(metadata, no_download_source=False)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2999,
                  "startColumn": 40,
                  "endLine": 2999,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            if os.path.isfile(dependencies_file):\n                with open(dependencies_file) as f:\n                    test_deps = json.load(f)\n            test_section = metadata.meta.get(\"test\", {})\n            test_section[\"requires\"] = test_deps\n            metadata.meta[\"test\"] = test_section\n\n",
                    "rendered": {
                      "text": "            if os.path.isfile(dependencies_file):\n                with open(dependencies_file) as f:\n                    test_deps = json.load(f)\n            test_section = metadata.meta.get(\"test\", {})\n            test_section[\"requires\"] = test_deps\n            metadata.meta[\"test\"] = test_section\n\n",
                      "markdown": "`            if os.path.isfile(dependencies_file):\n                with open(dependencies_file) as f:\n                    test_deps = json.load(f)\n            test_section = metadata.meta.get(\"test\", {})\n            test_section[\"requires\"] = test_deps\n            metadata.meta[\"test\"] = test_section\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2770,
                  "startColumn": 56,
                  "endLine": 2770,
                  "endColumn": 61,
                  "snippet": {
                    "text": "                        for file, csum in output_d[\"checksums\"].items():\n                            for _, prev_om in new_pkgs.items():\n                                prev_output_d, _ = prev_om\n                                if file in prev_output_d.get(\"checksums\", {}):\n                                    prev_csum = prev_output_d[\"checksums\"][file]\n                                    nature = \"Exact\" if csum == prev_csum else \"Inexact\"\n                                    log.warning(\n",
                    "rendered": {
                      "text": "                        for file, csum in output_d[\"checksums\"].items():\n                            for _, prev_om in new_pkgs.items():\n                                prev_output_d, _ = prev_om\n                                if file in prev_output_d.get(\"checksums\", {}):\n                                    prev_csum = prev_output_d[\"checksums\"][file]\n                                    nature = \"Exact\" if csum == prev_csum else \"Inexact\"\n                                    log.warning(\n",
                      "markdown": "`                        for file, csum in output_d[\"checksums\"].items():\n                            for _, prev_om in new_pkgs.items():\n                                prev_output_d, _ = prev_om\n                                if file in prev_output_d.get(\"checksums\", {}):\n                                    prev_csum = prev_output_d[\"checksums\"][file]\n                                    nature = \"Exact\" if csum == prev_csum else \"Inexact\"\n                                    log.warning(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2746,
                  "startColumn": 41,
                  "endLine": 2746,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                    # This is wrong, files has not been expanded at this time and could contain\n                    # wildcards.  Also well, I just do not understand this, because when this\n                    # does contain wildcards, the files in to_remove will slip back in.\n                    if (files := output_d.get(\"files\")) and not isinstance(files, dict):\n                        output_d[\"files\"] = set(files) - to_remove\n\n                    # copies the backed-up new prefix files into the newly created host env\n",
                    "rendered": {
                      "text": "                    # This is wrong, files has not been expanded at this time and could contain\n                    # wildcards.  Also well, I just do not understand this, because when this\n                    # does contain wildcards, the files in to_remove will slip back in.\n                    if (files := output_d.get(\"files\")) and not isinstance(files, dict):\n                        output_d[\"files\"] = set(files) - to_remove\n\n                    # copies the backed-up new prefix files into the newly created host env\n",
                      "markdown": "`                    # This is wrong, files has not been expanded at this time and could contain\n                    # wildcards.  Also well, I just do not understand this, because when this\n                    # does contain wildcards, the files in to_remove will slip back in.\n                    if (files := output_d.get(\"files\")) and not isinstance(files, dict):\n                        output_d[\"files\"] = set(files) - to_remove\n\n                    # copies the backed-up new prefix files into the newly created host env\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2739,
                  "startColumn": 37,
                  "endLine": 2739,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                        )\n\n                    to_remove = set()\n                    for f in output_d.get(\"files\", []):\n                        if f.startswith(\"conda-meta\"):\n                            to_remove.add(f)\n\n",
                    "rendered": {
                      "text": "                        )\n\n                    to_remove = set()\n                    for f in output_d.get(\"files\", []):\n                        if f.startswith(\"conda-meta\"):\n                            to_remove.add(f)\n\n",
                      "markdown": "`                        )\n\n                    to_remove = set()\n                    for f in output_d.get(\"files\", []):\n                        if f.startswith(\"conda-meta\"):\n                            to_remove.add(f)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2656,
                  "startColumn": 28,
                  "endLine": 2656,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                    )\n\n                assert (\n                    output_d.get(\"type\") != \"conda\" or m.final\n                ), f\"output metadata for {m.dist()} is not finalized\"\n                pkg_path = bldpkg_path(m)\n                if pkg_path not in built_packages and pkg_path not in new_pkgs:\n",
                    "rendered": {
                      "text": "                    )\n\n                assert (\n                    output_d.get(\"type\") != \"conda\" or m.final\n                ), f\"output metadata for {m.dist()} is not finalized\"\n                pkg_path = bldpkg_path(m)\n                if pkg_path not in built_packages and pkg_path not in new_pkgs:\n",
                      "markdown": "`                    )\n\n                assert (\n                    output_d.get(\"type\") != \"conda\" or m.final\n                ), f\"output metadata for {m.dist()} is not finalized\"\n                pkg_path = bldpkg_path(m)\n                if pkg_path not in built_packages and pkg_path not in new_pkgs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2643,
                  "startColumn": 54,
                  "endLine": 2643,
                  "endColumn": 59,
                  "snippet": {
                    "text": "                    )\n\n                # same thing, for test scripts\n                test_script = output_d.get(\"test\", {}).get(\"script\")\n                if test_script:\n                    if not os.path.isfile(os.path.join(m.path, test_script)):\n                        raise ValueError(\n",
                    "rendered": {
                      "text": "                    )\n\n                # same thing, for test scripts\n                test_script = output_d.get(\"test\", {}).get(\"script\")\n                if test_script:\n                    if not os.path.isfile(os.path.join(m.path, test_script)):\n                        raise ValueError(\n",
                      "markdown": "`                    )\n\n                # same thing, for test scripts\n                test_script = output_d.get(\"test\", {}).get(\"script\")\n                if test_script:\n                    if not os.path.isfile(os.path.join(m.path, test_script)):\n                        raise ValueError(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2643,
                  "startColumn": 38,
                  "endLine": 2643,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                    )\n\n                # same thing, for test scripts\n                test_script = output_d.get(\"test\", {}).get(\"script\")\n                if test_script:\n                    if not os.path.isfile(os.path.join(m.path, test_script)):\n                        raise ValueError(\n",
                    "rendered": {
                      "text": "                    )\n\n                # same thing, for test scripts\n                test_script = output_d.get(\"test\", {}).get(\"script\")\n                if test_script:\n                    if not os.path.isfile(os.path.join(m.path, test_script)):\n                        raise ValueError(\n",
                      "markdown": "`                    )\n\n                # same thing, for test scripts\n                test_script = output_d.get(\"test\", {}).get(\"script\")\n                if test_script:\n                    if not os.path.isfile(os.path.join(m.path, test_script)):\n                        raise ValueError(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2630,
                  "startColumn": 53,
                  "endLine": 2630,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                    continue\n\n                if top_level_meta.name() == output_d.get(\"name\") and not (\n                    output_d.get(\"files\") or output_d.get(\"script\")\n                ):\n                    output_d[\"files\"] = (\n                        utils.prefix_files(prefix=m.config.host_prefix) - initial_files\n",
                    "rendered": {
                      "text": "                    continue\n\n                if top_level_meta.name() == output_d.get(\"name\") and not (\n                    output_d.get(\"files\") or output_d.get(\"script\")\n                ):\n                    output_d[\"files\"] = (\n                        utils.prefix_files(prefix=m.config.host_prefix) - initial_files\n",
                      "markdown": "`                    continue\n\n                if top_level_meta.name() == output_d.get(\"name\") and not (\n                    output_d.get(\"files\") or output_d.get(\"script\")\n                ):\n                    output_d[\"files\"] = (\n                        utils.prefix_files(prefix=m.config.host_prefix) - initial_files\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2630,
                  "startColumn": 28,
                  "endLine": 2630,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                    continue\n\n                if top_level_meta.name() == output_d.get(\"name\") and not (\n                    output_d.get(\"files\") or output_d.get(\"script\")\n                ):\n                    output_d[\"files\"] = (\n                        utils.prefix_files(prefix=m.config.host_prefix) - initial_files\n",
                    "rendered": {
                      "text": "                    continue\n\n                if top_level_meta.name() == output_d.get(\"name\") and not (\n                    output_d.get(\"files\") or output_d.get(\"script\")\n                ):\n                    output_d[\"files\"] = (\n                        utils.prefix_files(prefix=m.config.host_prefix) - initial_files\n",
                      "markdown": "`                    continue\n\n                if top_level_meta.name() == output_d.get(\"name\") and not (\n                    output_d.get(\"files\") or output_d.get(\"script\")\n                ):\n                    output_d[\"files\"] = (\n                        utils.prefix_files(prefix=m.config.host_prefix) - initial_files\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2629,
                  "startColumn": 52,
                  "endLine": 2629,
                  "endColumn": 57,
                  "snippet": {
                    "text": "                    new_pkgs[bldpkg_path(m)] = output_d, m\n                    continue\n\n                if top_level_meta.name() == output_d.get(\"name\") and not (\n                    output_d.get(\"files\") or output_d.get(\"script\")\n                ):\n                    output_d[\"files\"] = (\n",
                    "rendered": {
                      "text": "                    new_pkgs[bldpkg_path(m)] = output_d, m\n                    continue\n\n                if top_level_meta.name() == output_d.get(\"name\") and not (\n                    output_d.get(\"files\") or output_d.get(\"script\")\n                ):\n                    output_d[\"files\"] = (\n",
                      "markdown": "`                    new_pkgs[bldpkg_path(m)] = output_d, m\n                    continue\n\n                if top_level_meta.name() == output_d.get(\"name\") and not (\n                    output_d.get(\"files\") or output_d.get(\"script\")\n                ):\n                    output_d[\"files\"] = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2425,
                  "startColumn": 55,
                  "endLine": 2425,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            exclude_pattern = None\n            excludes = set(top_level_pkg.config.variant.get(\"ignore_version\", []))\n            if excludes:\n                for key in top_level_pkg.config.variant.get(\n                    \"pin_run_as_build\", {}\n                ).keys():\n                    if key in excludes:\n",
                    "rendered": {
                      "text": "            exclude_pattern = None\n            excludes = set(top_level_pkg.config.variant.get(\"ignore_version\", []))\n            if excludes:\n                for key in top_level_pkg.config.variant.get(\n                    \"pin_run_as_build\", {}\n                ).keys():\n                    if key in excludes:\n",
                      "markdown": "`            exclude_pattern = None\n            excludes = set(top_level_pkg.config.variant.get(\"ignore_version\", []))\n            if excludes:\n                for key in top_level_pkg.config.variant.get(\n                    \"pin_run_as_build\", {}\n                ).keys():\n                    if key in excludes:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2423,
                  "startColumn": 55,
                  "endLine": 2423,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            )\n\n            exclude_pattern = None\n            excludes = set(top_level_pkg.config.variant.get(\"ignore_version\", []))\n            if excludes:\n                for key in top_level_pkg.config.variant.get(\n                    \"pin_run_as_build\", {}\n",
                    "rendered": {
                      "text": "            )\n\n            exclude_pattern = None\n            excludes = set(top_level_pkg.config.variant.get(\"ignore_version\", []))\n            if excludes:\n                for key in top_level_pkg.config.variant.get(\n                    \"pin_run_as_build\", {}\n",
                      "markdown": "`            )\n\n            exclude_pattern = None\n            excludes = set(top_level_pkg.config.variant.get(\"ignore_version\", []))\n            if excludes:\n                for key in top_level_pkg.config.variant.get(\n                    \"pin_run_as_build\", {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2417,
                  "startColumn": 34,
                  "endLine": 2417,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                \"build\",\n            )\n            utils.insert_variant_versions(\n                top_level_pkg.meta.get(\"requirements\", {}),\n                top_level_pkg.config.variant,\n                \"host\",\n            )\n",
                    "rendered": {
                      "text": "                \"build\",\n            )\n            utils.insert_variant_versions(\n                top_level_pkg.meta.get(\"requirements\", {}),\n                top_level_pkg.config.variant,\n                \"host\",\n            )\n",
                      "markdown": "`                \"build\",\n            )\n            utils.insert_variant_versions(\n                top_level_pkg.meta.get(\"requirements\", {}),\n                top_level_pkg.config.variant,\n                \"host\",\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2412,
                  "startColumn": 34,
                  "endLine": 2412,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n        if top_level_needs_finalizing:\n            utils.insert_variant_versions(\n                top_level_pkg.meta.get(\"requirements\", {}),\n                top_level_pkg.config.variant,\n                \"build\",\n            )\n",
                    "rendered": {
                      "text": "\n        if top_level_needs_finalizing:\n            utils.insert_variant_versions(\n                top_level_pkg.meta.get(\"requirements\", {}),\n                top_level_pkg.config.variant,\n                \"build\",\n            )\n",
                      "markdown": "`\n        if top_level_needs_finalizing:\n            utils.insert_variant_versions(\n                top_level_pkg.meta.get(\"requirements\", {}),\n                top_level_pkg.config.variant,\n                \"build\",\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2380,
                  "startColumn": 18,
                  "endLine": 2380,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        )\n\n        specs = [ms.spec for ms in m.ms_depends(\"build\")]\n        if any(out.get(\"type\") == \"wheel\" for out in m.get_section(\"outputs\")):\n            specs.extend([\"pip\", \"wheel\"])\n\n        # TODO :: This is broken. It does not respect build/script for example and also if you need git\n",
                    "rendered": {
                      "text": "        )\n\n        specs = [ms.spec for ms in m.ms_depends(\"build\")]\n        if any(out.get(\"type\") == \"wheel\" for out in m.get_section(\"outputs\")):\n            specs.extend([\"pip\", \"wheel\"])\n\n        # TODO :: This is broken. It does not respect build/script for example and also if you need git\n",
                      "markdown": "`        )\n\n        specs = [ms.spec for ms in m.ms_depends(\"build\")]\n        if any(out.get(\"type\") == \"wheel\" for out in m.get_section(\"outputs\")):\n            specs.extend([\"pip\", \"wheel\"])\n\n        # TODO :: This is broken. It does not respect build/script for example and also if you need git\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2072,
                  "startColumn": 36,
                  "endLine": 2072,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    cygpath_prefix = \"$(cygpath -u \" if utils.on_win else \"\"\n    cygpath_suffix = \" )\" if utils.on_win else \"\"\n\n    py_flags = \"-I -m\" if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\") else \"-m\"\n    file_handle.write(\n        f\"\"\"eval \"$('{sys.executable}' {py_flags} conda shell.bash hook)\"\\n\"\"\"\n    )\n",
                    "rendered": {
                      "text": "    cygpath_prefix = \"$(cygpath -u \" if utils.on_win else \"\"\n    cygpath_suffix = \" )\" if utils.on_win else \"\"\n\n    py_flags = \"-I -m\" if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\") else \"-m\"\n    file_handle.write(\n        f\"\"\"eval \"$('{sys.executable}' {py_flags} conda shell.bash hook)\"\\n\"\"\"\n    )\n",
                      "markdown": "`    cygpath_prefix = \"$(cygpath -u \" if utils.on_win else \"\"\n    cygpath_suffix = \" )\" if utils.on_win else \"\"\n\n    py_flags = \"-I -m\" if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\") else \"-m\"\n    file_handle.write(\n        f\"\"\"eval \"$('{sys.executable}' {py_flags} conda shell.bash hook)\"\\n\"\"\"\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1901,
                  "startColumn": 13,
                  "endLine": 1901,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    final_outputs = []\n    cph_kwargs = {}\n    ext = CONDA_PACKAGE_EXTENSION_V1\n    if output.get(\"type\") == \"conda_v2\" or metadata.config.conda_pkg_format == \"2\":\n        ext = CONDA_PACKAGE_EXTENSION_V2\n        cph_kwargs[\"compression_tuple\"] = (\n            \".tar.zst\",\n",
                    "rendered": {
                      "text": "    final_outputs = []\n    cph_kwargs = {}\n    ext = CONDA_PACKAGE_EXTENSION_V1\n    if output.get(\"type\") == \"conda_v2\" or metadata.config.conda_pkg_format == \"2\":\n        ext = CONDA_PACKAGE_EXTENSION_V2\n        cph_kwargs[\"compression_tuple\"] = (\n            \".tar.zst\",\n",
                      "markdown": "`    final_outputs = []\n    cph_kwargs = {}\n    ext = CONDA_PACKAGE_EXTENSION_V1\n    if output.get(\"type\") == \"conda_v2\" or metadata.config.conda_pkg_format == \"2\":\n        ext = CONDA_PACKAGE_EXTENSION_V2\n        cph_kwargs[\"compression_tuple\"] = (\n            \".tar.zst\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1873,
                  "startColumn": 36,
                  "endLine": 1873,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            )\n    files = post_process_files(metadata, initial_files)\n\n    if output.get(\"name\") and output.get(\"name\") != \"conda\":\n        assert \"bin/conda\" not in files and \"Scripts/conda.exe\" not in files, (\n            \"Bug in conda-build \"\n            \"has included conda binary in package. Please report this on the conda-build issue \"\n",
                    "rendered": {
                      "text": "            )\n    files = post_process_files(metadata, initial_files)\n\n    if output.get(\"name\") and output.get(\"name\") != \"conda\":\n        assert \"bin/conda\" not in files and \"Scripts/conda.exe\" not in files, (\n            \"Bug in conda-build \"\n            \"has included conda binary in package. Please report this on the conda-build issue \"\n",
                      "markdown": "`            )\n    files = post_process_files(metadata, initial_files)\n\n    if output.get(\"name\") and output.get(\"name\") != \"conda\":\n        assert \"bin/conda\" not in files and \"Scripts/conda.exe\" not in files, (\n            \"Bug in conda-build \"\n            \"has included conda binary in package. Please report this on the conda-build issue \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1873,
                  "startColumn": 13,
                  "endLine": 1873,
                  "endColumn": 18,
                  "snippet": {
                    "text": "            )\n    files = post_process_files(metadata, initial_files)\n\n    if output.get(\"name\") and output.get(\"name\") != \"conda\":\n        assert \"bin/conda\" not in files and \"Scripts/conda.exe\" not in files, (\n            \"Bug in conda-build \"\n            \"has included conda binary in package. Please report this on the conda-build issue \"\n",
                    "rendered": {
                      "text": "            )\n    files = post_process_files(metadata, initial_files)\n\n    if output.get(\"name\") and output.get(\"name\") != \"conda\":\n        assert \"bin/conda\" not in files and \"Scripts/conda.exe\" not in files, (\n            \"Bug in conda-build \"\n            \"has included conda binary in package. Please report this on the conda-build issue \"\n",
                      "markdown": "`            )\n    files = post_process_files(metadata, initial_files)\n\n    if output.get(\"name\") and output.get(\"name\") != \"conda\":\n        assert \"bin/conda\" not in files and \"Scripts/conda.exe\" not in files, (\n            \"Bug in conda-build \"\n            \"has included conda binary in package. Please report this on the conda-build issue \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1831,
                  "startColumn": 70,
                  "endLine": 1831,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    elif not output.get(\"script\"):\n        if not metadata.always_include_files():\n            log.warning(\n                \"No files or script found for output {}\".format(output.get(\"name\"))\n            )\n            build_deps = metadata.get_value(\"requirements/build\")\n            host_deps = metadata.get_value(\"requirements/host\")\n",
                    "rendered": {
                      "text": "    elif not output.get(\"script\"):\n        if not metadata.always_include_files():\n            log.warning(\n                \"No files or script found for output {}\".format(output.get(\"name\"))\n            )\n            build_deps = metadata.get_value(\"requirements/build\")\n            host_deps = metadata.get_value(\"requirements/host\")\n",
                      "markdown": "`    elif not output.get(\"script\"):\n        if not metadata.always_include_files():\n            log.warning(\n                \"No files or script found for output {}\".format(output.get(\"name\"))\n            )\n            build_deps = metadata.get_value(\"requirements/build\")\n            host_deps = metadata.get_value(\"requirements/host\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1828,
                  "startColumn": 19,
                  "endLine": 1828,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                keep_file.startswith(item + os.path.sep) for keep_file in keep_files\n            )\n        }\n    elif not output.get(\"script\"):\n        if not metadata.always_include_files():\n            log.warning(\n                \"No files or script found for output {}\".format(output.get(\"name\"))\n",
                    "rendered": {
                      "text": "                keep_file.startswith(item + os.path.sep) for keep_file in keep_files\n            )\n        }\n    elif not output.get(\"script\"):\n        if not metadata.always_include_files():\n            log.warning(\n                \"No files or script found for output {}\".format(output.get(\"name\"))\n",
                      "markdown": "`                keep_file.startswith(item + os.path.sep) for keep_file in keep_files\n            )\n        }\n    elif not output.get(\"script\"):\n        if not metadata.always_include_files():\n            log.warning(\n                \"No files or script found for output {}\".format(output.get(\"name\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1805,
                  "startColumn": 27,
                  "endLine": 1805,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            # new_prefix_files are considered. Files in the PREFIX from other\n            # recipes (dependencies) are ignored\n            include = files.get(\"include\") or []\n            exclude = files.get(\"exclude\") or []\n            exclude_files = {\n                os.path.normpath(pth)\n                for pth in utils.expand_globs(exclude, metadata.config.host_prefix)\n",
                    "rendered": {
                      "text": "            # new_prefix_files are considered. Files in the PREFIX from other\n            # recipes (dependencies) are ignored\n            include = files.get(\"include\") or []\n            exclude = files.get(\"exclude\") or []\n            exclude_files = {\n                os.path.normpath(pth)\n                for pth in utils.expand_globs(exclude, metadata.config.host_prefix)\n",
                      "markdown": "`            # new_prefix_files are considered. Files in the PREFIX from other\n            # recipes (dependencies) are ignored\n            include = files.get(\"include\") or []\n            exclude = files.get(\"exclude\") or []\n            exclude_files = {\n                os.path.normpath(pth)\n                for pth in utils.expand_globs(exclude, metadata.config.host_prefix)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1804,
                  "startColumn": 27,
                  "endLine": 1804,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            # When file matching with include/exclude lists, only\n            # new_prefix_files are considered. Files in the PREFIX from other\n            # recipes (dependencies) are ignored\n            include = files.get(\"include\") or []\n            exclude = files.get(\"exclude\") or []\n            exclude_files = {\n                os.path.normpath(pth)\n",
                    "rendered": {
                      "text": "            # When file matching with include/exclude lists, only\n            # new_prefix_files are considered. Files in the PREFIX from other\n            # recipes (dependencies) are ignored\n            include = files.get(\"include\") or []\n            exclude = files.get(\"exclude\") or []\n            exclude_files = {\n                os.path.normpath(pth)\n",
                      "markdown": "`            # When file matching with include/exclude lists, only\n            # new_prefix_files are considered. Files in the PREFIX from other\n            # recipes (dependencies) are ignored\n            include = files.get(\"include\") or []\n            exclude = files.get(\"exclude\") or []\n            exclude_files = {\n                os.path.normpath(pth)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1726,
                  "startColumn": 28,
                  "endLine": 1726,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    if output.get(\"script\"):\n        env = environ.get_dict(m=metadata)\n\n        interpreter = output.get(\"script_interpreter\")\n        if not interpreter:\n            args = list(guess_interpreter(output[\"script\"]))\n            args[0] = external.find_executable(args[0], metadata.config.build_prefix)\n",
                    "rendered": {
                      "text": "    if output.get(\"script\"):\n        env = environ.get_dict(m=metadata)\n\n        interpreter = output.get(\"script_interpreter\")\n        if not interpreter:\n            args = list(guess_interpreter(output[\"script\"]))\n            args[0] = external.find_executable(args[0], metadata.config.build_prefix)\n",
                      "markdown": "`    if output.get(\"script\"):\n        env = environ.get_dict(m=metadata)\n\n        interpreter = output.get(\"script_interpreter\")\n        if not interpreter:\n            args = list(guess_interpreter(output[\"script\"]))\n            args[0] = external.find_executable(args[0], metadata.config.build_prefix)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1723,
                  "startColumn": 13,
                  "endLine": 1723,
                  "endColumn": 18,
                  "snippet": {
                    "text": "            f.write(\"\\n\")\n        output[\"script\"] = script_fn\n\n    if output.get(\"script\"):\n        env = environ.get_dict(m=metadata)\n\n        interpreter = output.get(\"script_interpreter\")\n",
                    "rendered": {
                      "text": "            f.write(\"\\n\")\n        output[\"script\"] = script_fn\n\n    if output.get(\"script\"):\n        env = environ.get_dict(m=metadata)\n\n        interpreter = output.get(\"script_interpreter\")\n",
                      "markdown": "`            f.write(\"\\n\")\n        output[\"script\"] = script_fn\n\n    if output.get(\"script\"):\n        env = environ.get_dict(m=metadata)\n\n        interpreter = output.get(\"script_interpreter\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1716,
                  "startColumn": 26,
                  "endLine": 1716,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        activate_script = metadata.config.activate\n        script = \"\\n\".join(script)\n        suffix = \"bat\" if utils.on_win else \"sh\"\n        script_fn = output.get(\"script\") or f\"output_script.{suffix}\"\n        with open(os.path.join(metadata.config.work_dir, script_fn), \"w\") as f:\n            f.write(\"\\n\")\n            f.write(script)\n",
                    "rendered": {
                      "text": "        activate_script = metadata.config.activate\n        script = \"\\n\".join(script)\n        suffix = \"bat\" if utils.on_win else \"sh\"\n        script_fn = output.get(\"script\") or f\"output_script.{suffix}\"\n        with open(os.path.join(metadata.config.work_dir, script_fn), \"w\") as f:\n            f.write(\"\\n\")\n            f.write(script)\n",
                      "markdown": "`        activate_script = metadata.config.activate\n        script = \"\\n\".join(script)\n        suffix = \"bat\" if utils.on_win else \"sh\"\n        script_fn = output.get(\"script\") or f\"output_script.{suffix}\"\n        with open(os.path.join(metadata.config.work_dir, script_fn), \"w\") as f:\n            f.write(\"\\n\")\n            f.write(script)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1710,
                  "startColumn": 34,
                  "endLine": 1710,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    activate_script = metadata.activate_build_script\n    if (script and not output.get(\"script\")) and (\n        is_output or not top_build.get(\"script\")\n    ):\n        # do add in activation, but only if it's not disabled\n        activate_script = metadata.config.activate\n",
                    "rendered": {
                      "text": "\n    activate_script = metadata.activate_build_script\n    if (script and not output.get(\"script\")) and (\n        is_output or not top_build.get(\"script\")\n    ):\n        # do add in activation, but only if it's not disabled\n        activate_script = metadata.config.activate\n",
                      "markdown": "`\n    activate_script = metadata.activate_build_script\n    if (script and not output.get(\"script\")) and (\n        is_output or not top_build.get(\"script\")\n    ):\n        # do add in activation, but only if it's not disabled\n        activate_script = metadata.config.activate\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1709,
                  "startColumn": 29,
                  "endLine": 1709,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    top_build = metadata.get_top_level_recipe_without_outputs().get(\"build\", {}) or {}\n\n    activate_script = metadata.activate_build_script\n    if (script and not output.get(\"script\")) and (\n        is_output or not top_build.get(\"script\")\n    ):\n        # do add in activation, but only if it's not disabled\n",
                    "rendered": {
                      "text": "    top_build = metadata.get_top_level_recipe_without_outputs().get(\"build\", {}) or {}\n\n    activate_script = metadata.activate_build_script\n    if (script and not output.get(\"script\")) and (\n        is_output or not top_build.get(\"script\")\n    ):\n        # do add in activation, but only if it's not disabled\n",
                      "markdown": "`    top_build = metadata.get_top_level_recipe_without_outputs().get(\"build\", {}) or {}\n\n    activate_script = metadata.activate_build_script\n    if (script and not output.get(\"script\")) and (\n        is_output or not top_build.get(\"script\")\n    ):\n        # do add in activation, but only if it's not disabled\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1706,
                  "startColumn": 63,
                  "endLine": 1706,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    # metadata.get_top_level_recipe_without_outputs is destructive to replacements.\n\n    replacements = get_all_replacements(metadata.config)\n    top_build = metadata.get_top_level_recipe_without_outputs().get(\"build\", {}) or {}\n\n    activate_script = metadata.activate_build_script\n    if (script and not output.get(\"script\")) and (\n",
                    "rendered": {
                      "text": "    # metadata.get_top_level_recipe_without_outputs is destructive to replacements.\n\n    replacements = get_all_replacements(metadata.config)\n    top_build = metadata.get_top_level_recipe_without_outputs().get(\"build\", {}) or {}\n\n    activate_script = metadata.activate_build_script\n    if (script and not output.get(\"script\")) and (\n",
                      "markdown": "`    # metadata.get_top_level_recipe_without_outputs is destructive to replacements.\n\n    replacements = get_all_replacements(metadata.config)\n    top_build = metadata.get_top_level_recipe_without_outputs().get(\"build\", {}) or {}\n\n    activate_script = metadata.activate_build_script\n    if (script and not output.get(\"script\")) and (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1688,
                  "startColumn": 18,
                  "endLine": 1688,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    log = utils.get_logger(__name__)\n    log.info(\"Packaging %s\", metadata.dist())\n    get_all_replacements(metadata.config)\n    files = output.get(\"files\", [])\n\n    # this is because without any requirements at all, we still need to have the host prefix exist\n    try:\n",
                    "rendered": {
                      "text": "    log = utils.get_logger(__name__)\n    log.info(\"Packaging %s\", metadata.dist())\n    get_all_replacements(metadata.config)\n    files = output.get(\"files\", [])\n\n    # this is because without any requirements at all, we still need to have the host prefix exist\n    try:\n",
                      "markdown": "`    log = utils.get_logger(__name__)\n    log.info(\"Packaging %s\", metadata.dist())\n    get_all_replacements(metadata.config)\n    files = output.get(\"files\", [])\n\n    # this is because without any requirements at all, we still need to have the host prefix exist\n    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1562,
                  "startColumn": 21,
                  "endLine": 1562,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            file_info[\"prefix_placeholder\"] = prefix_placeholder\n            file_info[\"file_mode\"] = file_mode\n        if (\n            file_info.get(\"path_type\") == PathType.hardlink\n            and os.stat(path).st_nlink > 1\n        ):\n            target_short_path_inode = get_inode(path)\n",
                    "rendered": {
                      "text": "            file_info[\"prefix_placeholder\"] = prefix_placeholder\n            file_info[\"file_mode\"] = file_mode\n        if (\n            file_info.get(\"path_type\") == PathType.hardlink\n            and os.stat(path).st_nlink > 1\n        ):\n            target_short_path_inode = get_inode(path)\n",
                      "markdown": "`            file_info[\"prefix_placeholder\"] = prefix_placeholder\n            file_info[\"file_mode\"] = file_mode\n        if (\n            file_info.get(\"path_type\") == PathType.hardlink\n            and os.stat(path).st_nlink > 1\n        ):\n            target_short_path_inode = get_inode(path)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1427,
                  "startColumn": 63,
                  "endLine": 1427,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        for source_dict in m.get_section(\"source\"):\n            if source_dict.get(\"git_url\"):\n                source.git_info(\n                    os.path.join(m.config.work_dir, source_dict.get(\"folder\", \"\")),\n                    m.config.build_prefix,\n                    git=None,\n                    verbose=m.config.verbose,\n",
                    "rendered": {
                      "text": "        for source_dict in m.get_section(\"source\"):\n            if source_dict.get(\"git_url\"):\n                source.git_info(\n                    os.path.join(m.config.work_dir, source_dict.get(\"folder\", \"\")),\n                    m.config.build_prefix,\n                    git=None,\n                    verbose=m.config.verbose,\n",
                      "markdown": "`        for source_dict in m.get_section(\"source\"):\n            if source_dict.get(\"git_url\"):\n                source.git_info(\n                    os.path.join(m.config.work_dir, source_dict.get(\"folder\", \"\")),\n                    m.config.build_prefix,\n                    git=None,\n                    verbose=m.config.verbose,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1425,
                  "startColumn": 26,
                  "endLine": 1425,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    with open(join(m.config.info_dir, \"git\"), \"w\", encoding=\"utf-8\") as fo:\n        for source_dict in m.get_section(\"source\"):\n            if source_dict.get(\"git_url\"):\n                source.git_info(\n                    os.path.join(m.config.work_dir, source_dict.get(\"folder\", \"\")),\n                    m.config.build_prefix,\n",
                    "rendered": {
                      "text": "\n    with open(join(m.config.info_dir, \"git\"), \"w\", encoding=\"utf-8\") as fo:\n        for source_dict in m.get_section(\"source\"):\n            if source_dict.get(\"git_url\"):\n                source.git_info(\n                    os.path.join(m.config.work_dir, source_dict.get(\"folder\", \"\")),\n                    m.config.build_prefix,\n",
                      "markdown": "`\n    with open(join(m.config.info_dir, \"git\"), \"w\", encoding=\"utf-8\") as fo:\n        for source_dict in m.get_section(\"source\"):\n            if source_dict.get(\"git_url\"):\n                source.git_info(\n                    os.path.join(m.config.work_dir, source_dict.get(\"folder\", \"\")),\n                    m.config.build_prefix,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 742,
                  "startColumn": 50,
                  "endLine": 742,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        # just for lack of confusion, don't show outputs in final rendered recipes\n        if \"outputs\" in output_metadata.meta:\n            del output_metadata.meta[\"outputs\"]\n        if \"parent_recipe\" in output_metadata.meta.get(\"extra\", {}):\n            del output_metadata.meta[\"extra\"][\"parent_recipe\"]\n\n        utils.sort_list_in_nested_structure(\n",
                    "rendered": {
                      "text": "        # just for lack of confusion, don't show outputs in final rendered recipes\n        if \"outputs\" in output_metadata.meta:\n            del output_metadata.meta[\"outputs\"]\n        if \"parent_recipe\" in output_metadata.meta.get(\"extra\", {}):\n            del output_metadata.meta[\"extra\"][\"parent_recipe\"]\n\n        utils.sort_list_in_nested_structure(\n",
                      "markdown": "`        # just for lack of confusion, don't show outputs in final rendered recipes\n        if \"outputs\" in output_metadata.meta:\n            del output_metadata.meta[\"outputs\"]\n        if \"parent_recipe\" in output_metadata.meta.get(\"extra\", {}):\n            del output_metadata.meta[\"extra\"][\"parent_recipe\"]\n\n        utils.sort_list_in_nested_structure(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 735,
                  "startColumn": 36,
                  "endLine": 735,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n        output_metadata = m.copy()\n        # hard code the build string, so that tests don't get it mixed up\n        build = output_metadata.meta.get(\"build\", {})\n        build[\"string\"] = output_metadata.build_id()\n        output_metadata.meta[\"build\"] = build\n\n",
                    "rendered": {
                      "text": "\n        output_metadata = m.copy()\n        # hard code the build string, so that tests don't get it mixed up\n        build = output_metadata.meta.get(\"build\", {})\n        build[\"string\"] = output_metadata.build_id()\n        output_metadata.meta[\"build\"] = build\n\n",
                      "markdown": "`\n        output_metadata = m.copy()\n        # hard code the build string, so that tests don't get it mixed up\n        build = output_metadata.meta.get(\"build\", {})\n        build[\"string\"] = output_metadata.build_id()\n        output_metadata.meta[\"build\"] = build\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 699,
                  "startColumn": 32,
                  "endLine": 699,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    _copy_top_level_recipe(m.path, m.config, dest_dir, \"parent\")\n\n    this_output = m.get_rendered_output(m.name()) or {}\n    install_script = this_output.get(\"script\")\n    build_inputs = []\n    inputs = [install_script] + build_inputs\n    file_paths = [script for script in inputs if script]\n",
                    "rendered": {
                      "text": "    _copy_top_level_recipe(m.path, m.config, dest_dir, \"parent\")\n\n    this_output = m.get_rendered_output(m.name()) or {}\n    install_script = this_output.get(\"script\")\n    build_inputs = []\n    inputs = [install_script] + build_inputs\n    file_paths = [script for script in inputs if script]\n",
                      "markdown": "`    _copy_top_level_recipe(m.path, m.config, dest_dir, \"parent\")\n\n    this_output = m.get_rendered_output(m.name()) or {}\n    install_script = this_output.get(\"script\")\n    build_inputs = []\n    inputs = [install_script] + build_inputs\n    file_paths = [script for script in inputs if script]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 25,
                  "endLine": 146,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            if stats_dict.get(\"cpu_user\")\n            else \"-\",\n            memory=utils.bytes2human(stats_dict[\"rss\"])\n            if stats_dict.get(\"rss\")\n            else \"-\",\n            disk=utils.bytes2human(stats_dict[\"disk\"]),\n            elapsed=utils.seconds2human(stats_dict[\"elapsed\"]),\n",
                    "rendered": {
                      "text": "            if stats_dict.get(\"cpu_user\")\n            else \"-\",\n            memory=utils.bytes2human(stats_dict[\"rss\"])\n            if stats_dict.get(\"rss\")\n            else \"-\",\n            disk=utils.bytes2human(stats_dict[\"disk\"]),\n            elapsed=utils.seconds2human(stats_dict[\"elapsed\"]),\n",
                      "markdown": "`            if stats_dict.get(\"cpu_user\")\n            else \"-\",\n            memory=utils.bytes2human(stats_dict[\"rss\"])\n            if stats_dict.get(\"rss\")\n            else \"-\",\n            disk=utils.bytes2human(stats_dict[\"disk\"]),\n            elapsed=utils.seconds2human(stats_dict[\"elapsed\"]),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 25,
                  "endLine": 143,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            if stats_dict.get(\"cpu_sys\")\n            else \"-\",\n            cpu_user=utils.seconds2human(stats_dict[\"cpu_user\"])\n            if stats_dict.get(\"cpu_user\")\n            else \"-\",\n            memory=utils.bytes2human(stats_dict[\"rss\"])\n            if stats_dict.get(\"rss\")\n",
                    "rendered": {
                      "text": "            if stats_dict.get(\"cpu_sys\")\n            else \"-\",\n            cpu_user=utils.seconds2human(stats_dict[\"cpu_user\"])\n            if stats_dict.get(\"cpu_user\")\n            else \"-\",\n            memory=utils.bytes2human(stats_dict[\"rss\"])\n            if stats_dict.get(\"rss\")\n",
                      "markdown": "`            if stats_dict.get(\"cpu_sys\")\n            else \"-\",\n            cpu_user=utils.seconds2human(stats_dict[\"cpu_user\"])\n            if stats_dict.get(\"cpu_user\")\n            else \"-\",\n            memory=utils.bytes2human(stats_dict[\"rss\"])\n            if stats_dict.get(\"rss\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 25,
                  "endLine": 140,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            descriptor=descriptor,\n            processes=stats_dict.get(\"processes\", 1),\n            cpu_sys=utils.seconds2human(stats_dict[\"cpu_sys\"])\n            if stats_dict.get(\"cpu_sys\")\n            else \"-\",\n            cpu_user=utils.seconds2human(stats_dict[\"cpu_user\"])\n            if stats_dict.get(\"cpu_user\")\n",
                    "rendered": {
                      "text": "            descriptor=descriptor,\n            processes=stats_dict.get(\"processes\", 1),\n            cpu_sys=utils.seconds2human(stats_dict[\"cpu_sys\"])\n            if stats_dict.get(\"cpu_sys\")\n            else \"-\",\n            cpu_user=utils.seconds2human(stats_dict[\"cpu_user\"])\n            if stats_dict.get(\"cpu_user\")\n",
                      "markdown": "`            descriptor=descriptor,\n            processes=stats_dict.get(\"processes\", 1),\n            cpu_sys=utils.seconds2human(stats_dict[\"cpu_sys\"])\n            if stats_dict.get(\"cpu_sys\")\n            else \"-\",\n            cpu_user=utils.seconds2human(stats_dict[\"cpu_user\"])\n            if stats_dict.get(\"cpu_user\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 32,
                  "endLine": 138,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        \"   Time elapsed: {elapsed}\\n\"\n        \"\\n\".format(\n            descriptor=descriptor,\n            processes=stats_dict.get(\"processes\", 1),\n            cpu_sys=utils.seconds2human(stats_dict[\"cpu_sys\"])\n            if stats_dict.get(\"cpu_sys\")\n            else \"-\",\n",
                    "rendered": {
                      "text": "        \"   Time elapsed: {elapsed}\\n\"\n        \"\\n\".format(\n            descriptor=descriptor,\n            processes=stats_dict.get(\"processes\", 1),\n            cpu_sys=utils.seconds2human(stats_dict[\"cpu_sys\"])\n            if stats_dict.get(\"cpu_sys\")\n            else \"-\",\n",
                      "markdown": "`        \"   Time elapsed: {elapsed}\\n\"\n        \"\\n\".format(\n            descriptor=descriptor,\n            processes=stats_dict.get(\"processes\", 1),\n            cpu_sys=utils.seconds2human(stats_dict[\"cpu_sys\"])\n            if stats_dict.get(\"cpu_sys\")\n            else \"-\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 32,
                  "endLine": 116,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    )\n    # kind of a special case.  Target platform determines a lot of output behavior, but may not be\n    #    explicitly listed in the recipe.\n    tp = metadata.config.variant.get(\"target_platform\")\n    if tp and tp != metadata.config.subdir and \"target_platform\" not in build_vars:\n        build_vars += \"-target_\" + tp\n    key = [metadata.name(), metadata.version()]\n",
                    "rendered": {
                      "text": "    )\n    # kind of a special case.  Target platform determines a lot of output behavior, but may not be\n    #    explicitly listed in the recipe.\n    tp = metadata.config.variant.get(\"target_platform\")\n    if tp and tp != metadata.config.subdir and \"target_platform\" not in build_vars:\n        build_vars += \"-target_\" + tp\n    key = [metadata.name(), metadata.version()]\n",
                      "markdown": "`    )\n    # kind of a special case.  Target platform determines a lot of output behavior, but may not be\n    #    explicitly listed in the recipe.\n    tp = metadata.config.variant.get(\"target_platform\")\n    if tp and tp != metadata.config.subdir and \"target_platform\" not in build_vars:\n        build_vars += \"-target_\" + tp\n    key = [metadata.name(), metadata.version()]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 4006,
                  "startColumn": 42,
                  "endLine": 4006,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    if config.user:\n        args.extend([\"--user\", config.user])\n    if config.password:\n        args.extend([\"--password\", config.password])\n    if config.sign:\n        args.extend([\"--sign\"])\n    if config.identity:\n",
                    "rendered": {
                      "text": "    if config.user:\n        args.extend([\"--user\", config.user])\n    if config.password:\n        args.extend([\"--password\", config.password])\n    if config.sign:\n        args.extend([\"--sign\"])\n    if config.identity:\n",
                      "markdown": "`    if config.user:\n        args.extend([\"--user\", config.user])\n    if config.password:\n        args.extend([\"--password\", config.password])\n    if config.sign:\n        args.extend([\"--sign\"])\n    if config.identity:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 4006,
                  "startColumn": 24,
                  "endLine": 4006,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    if config.user:\n        args.extend([\"--user\", config.user])\n    if config.password:\n        args.extend([\"--password\", config.password])\n    if config.sign:\n        args.extend([\"--sign\"])\n    if config.identity:\n",
                    "rendered": {
                      "text": "    if config.user:\n        args.extend([\"--user\", config.user])\n    if config.password:\n        args.extend([\"--password\", config.password])\n    if config.sign:\n        args.extend([\"--sign\"])\n    if config.identity:\n",
                      "markdown": "`    if config.user:\n        args.extend([\"--user\", config.user])\n    if config.password:\n        args.extend([\"--password\", config.password])\n    if config.sign:\n        args.extend([\"--sign\"])\n    if config.identity:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 4005,
                  "startColumn": 14,
                  "endLine": 4005,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    ]\n    if config.user:\n        args.extend([\"--user\", config.user])\n    if config.password:\n        args.extend([\"--password\", config.password])\n    if config.sign:\n        args.extend([\"--sign\"])\n",
                    "rendered": {
                      "text": "    ]\n    if config.user:\n        args.extend([\"--user\", config.user])\n    if config.password:\n        args.extend([\"--password\", config.password])\n    if config.sign:\n        args.extend([\"--sign\"])\n",
                      "markdown": "`    ]\n    if config.user:\n        args.extend([\"--user\", config.user])\n    if config.password:\n        args.extend([\"--password\", config.password])\n    if config.sign:\n        args.extend([\"--sign\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 4050,
                  "startColumn": 31,
                  "endLine": 4050,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        utils.rm_rf(folder)\n\n\ndef is_package_built(metadata, env, include_local=True):\n    # bldpkgs_dirs is typically {'$ENVIRONMENT/conda-bld/noarch', '$ENVIRONMENT/conda-bld/osx-arm64'}\n    # could pop subdirs (last path element) and call update_index() once\n    for d in metadata.config.bldpkgs_dirs:\n",
                    "rendered": {
                      "text": "        utils.rm_rf(folder)\n\n\ndef is_package_built(metadata, env, include_local=True):\n    # bldpkgs_dirs is typically {'$ENVIRONMENT/conda-bld/noarch', '$ENVIRONMENT/conda-bld/osx-arm64'}\n    # could pop subdirs (last path element) and call update_index() once\n    for d in metadata.config.bldpkgs_dirs:\n",
                      "markdown": "`        utils.rm_rf(folder)\n\n\ndef is_package_built(metadata, env, include_local=True):\n    # bldpkgs_dirs is typically {'$ENVIRONMENT/conda-bld/noarch', '$ENVIRONMENT/conda-bld/osx-arm64'}\n    # could pop subdirs (last path element) and call update_index() once\n    for d in metadata.config.bldpkgs_dirs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3715,
                  "startColumn": 48,
                  "endLine": 3715,
                  "endColumn": 59,
                  "snippet": {
                    "text": "                                    with TemporaryDirectory(\n                                        prefix=\"_\", suffix=r_string\n                                    ) as tmpdir:\n                                        precs = environ.get_package_records(\n                                            tmpdir,\n                                            specs,\n                                            env=\"run\",\n",
                    "rendered": {
                      "text": "                                    with TemporaryDirectory(\n                                        prefix=\"_\", suffix=r_string\n                                    ) as tmpdir:\n                                        precs = environ.get_package_records(\n                                            tmpdir,\n                                            specs,\n                                            env=\"run\",\n",
                      "markdown": "`                                    with TemporaryDirectory(\n                                        prefix=\"_\", suffix=r_string\n                                    ) as tmpdir:\n                                        precs = environ.get_package_records(\n                                            tmpdir,\n                                            specs,\n                                            env=\"run\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3459,
                  "startColumn": 18,
                  "endLine": 3459,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    )\n\n    if utils.on_win:\n        cmd = [os.environ.get(\"COMSPEC\", \"cmd.exe\"), \"/d\", \"/c\", test_script]\n    else:\n        cmd = (\n            [shell_path]\n",
                    "rendered": {
                      "text": "    )\n\n    if utils.on_win:\n        cmd = [os.environ.get(\"COMSPEC\", \"cmd.exe\"), \"/d\", \"/c\", test_script]\n    else:\n        cmd = (\n            [shell_path]\n",
                      "markdown": "`    )\n\n    if utils.on_win:\n        cmd = [os.environ.get(\"COMSPEC\", \"cmd.exe\"), \"/d\", \"/c\", test_script]\n    else:\n        cmd = (\n            [shell_path]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3434,
                  "startColumn": 8,
                  "endLine": 3434,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n    with utils.path_prepended(metadata.config.test_prefix):\n        env = dict(os.environ.copy())\n        env.update(environ.get_dict(m=metadata, prefix=metadata.config.test_prefix))\n        env[\"CONDA_BUILD_STATE\"] = \"TEST\"\n\n    if config.test_run_post:\n",
                    "rendered": {
                      "text": "\n    with utils.path_prepended(metadata.config.test_prefix):\n        env = dict(os.environ.copy())\n        env.update(environ.get_dict(m=metadata, prefix=metadata.config.test_prefix))\n        env[\"CONDA_BUILD_STATE\"] = \"TEST\"\n\n    if config.test_run_post:\n",
                      "markdown": "`\n    with utils.path_prepended(metadata.config.test_prefix):\n        env = dict(os.environ.copy())\n        env.update(environ.get_dict(m=metadata, prefix=metadata.config.test_prefix))\n        env[\"CONDA_BUILD_STATE\"] = \"TEST\"\n\n    if config.test_run_post:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3382,
                  "startColumn": 16,
                  "endLine": 3382,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    utils.rm_rf(metadata.config.test_prefix)\n\n    try:\n        precs = environ.get_package_records(\n            metadata.config.test_prefix,\n            tuple(specs),\n            \"host\",\n",
                    "rendered": {
                      "text": "    utils.rm_rf(metadata.config.test_prefix)\n\n    try:\n        precs = environ.get_package_records(\n            metadata.config.test_prefix,\n            tuple(specs),\n            \"host\",\n",
                      "markdown": "`    utils.rm_rf(metadata.config.test_prefix)\n\n    try:\n        precs = environ.get_package_records(\n            metadata.config.test_prefix,\n            tuple(specs),\n            \"host\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3351,
                  "startColumn": 8,
                  "endLine": 3351,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n    with utils.path_prepended(metadata.config.test_prefix):\n        env = dict(os.environ.copy())\n        env.update(environ.get_dict(m=metadata, prefix=config.test_prefix))\n        env[\"CONDA_BUILD_STATE\"] = \"TEST\"\n        env[\"CONDA_BUILD\"] = \"1\"\n\n",
                    "rendered": {
                      "text": "\n    with utils.path_prepended(metadata.config.test_prefix):\n        env = dict(os.environ.copy())\n        env.update(environ.get_dict(m=metadata, prefix=config.test_prefix))\n        env[\"CONDA_BUILD_STATE\"] = \"TEST\"\n        env[\"CONDA_BUILD\"] = \"1\"\n\n",
                      "markdown": "`\n    with utils.path_prepended(metadata.config.test_prefix):\n        env = dict(os.environ.copy())\n        env.update(environ.get_dict(m=metadata, prefix=config.test_prefix))\n        env[\"CONDA_BUILD_STATE\"] = \"TEST\"\n        env[\"CONDA_BUILD\"] = \"1\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3209,
                  "startColumn": 26,
                  "endLine": 3209,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            else:\n                py_flags = (\n                    \"-I -m\"\n                    if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\")\n                    else \"-m\"\n                )\n                tf.write(\n",
                    "rendered": {
                      "text": "            else:\n                py_flags = (\n                    \"-I -m\"\n                    if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\")\n                    else \"-m\"\n                )\n                tf.write(\n",
                      "markdown": "`            else:\n                py_flags = (\n                    \"-I -m\"\n                    if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\")\n                    else \"-m\"\n                )\n                tf.write(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3201,
                  "startColumn": 30,
                  "endLine": 3201,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                        sys.prefix,\n                        \"--dev\" if metadata.config.debug else \"\",\n                        \"-i\"\n                        if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\")\n                        else \"\",\n                        python_exe=sys.executable,\n                    )\n",
                    "rendered": {
                      "text": "                        sys.prefix,\n                        \"--dev\" if metadata.config.debug else \"\",\n                        \"-i\"\n                        if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\")\n                        else \"\",\n                        python_exe=sys.executable,\n                    )\n",
                      "markdown": "`                        sys.prefix,\n                        \"--dev\" if metadata.config.debug else \"\",\n                        \"-i\"\n                        if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\")\n                        else \"\",\n                        python_exe=sys.executable,\n                    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3052,
                  "startColumn": 12,
                  "endLine": 3052,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    #       Leaving it as is, for now, since we need a quick, non-disruptive patch release.\n    with utils.path_prepended(m.config.host_prefix, False):\n        with utils.path_prepended(m.config.build_prefix, False):\n            env = environ.get_dict(m=m)\n\n    _set_env_variables_for_build(m, env)\n\n",
                    "rendered": {
                      "text": "    #       Leaving it as is, for now, since we need a quick, non-disruptive patch release.\n    with utils.path_prepended(m.config.host_prefix, False):\n        with utils.path_prepended(m.config.build_prefix, False):\n            env = environ.get_dict(m=m)\n\n    _set_env_variables_for_build(m, env)\n\n",
                      "markdown": "`    #       Leaving it as is, for now, since we need a quick, non-disruptive patch release.\n    with utils.path_prepended(m.config.host_prefix, False):\n        with utils.path_prepended(m.config.build_prefix, False):\n            env = environ.get_dict(m=m)\n\n    _set_env_variables_for_build(m, env)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3025,
                  "startColumn": 4,
                  "endLine": 3025,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n    # pip's cache directory (PIP_NO_CACHE_DIR) should not be\n    # disabled as this results in .egg-info rather than\n",
                    "rendered": {
                      "text": "    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n    # pip's cache directory (PIP_NO_CACHE_DIR) should not be\n    # disabled as this results in .egg-info rather than\n",
                      "markdown": "`    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n    # pip's cache directory (PIP_NO_CACHE_DIR) should not be\n    # disabled as this results in .egg-info rather than\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3023,
                  "startColumn": 17,
                  "endLine": 3023,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n",
                    "rendered": {
                      "text": "    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n",
                      "markdown": "`    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2760,
                  "startColumn": 24,
                  "endLine": 2760,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n                    pkg_type = \"conda\" if not hasattr(m, \"type\") else m.type\n                    newly_built_packages = bundlers[pkg_type](\n                        output_d, m, env, stats, new_prefix_files\n",
                    "rendered": {
                      "text": "                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n                    pkg_type = \"conda\" if not hasattr(m, \"type\") else m.type\n                    newly_built_packages = bundlers[pkg_type](\n                        output_d, m, env, stats, new_prefix_files\n",
                      "markdown": "`                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n                    pkg_type = \"conda\" if not hasattr(m, \"type\") else m.type\n                    newly_built_packages = bundlers[pkg_type](\n                        output_d, m, env, stats, new_prefix_files\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2713,
                  "startColumn": 38,
                  "endLine": 2713,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                        else:\n                            # When not cross-compiling, the build deps aggregate 'build' and 'host'.\n                            sub_build_ms_deps.extend(host_ms_deps)\n                        build_precs = environ.get_package_records(\n                            m.config.build_prefix,\n                            tuple(sub_build_ms_deps),\n                            \"build\",\n",
                    "rendered": {
                      "text": "                        else:\n                            # When not cross-compiling, the build deps aggregate 'build' and 'host'.\n                            sub_build_ms_deps.extend(host_ms_deps)\n                        build_precs = environ.get_package_records(\n                            m.config.build_prefix,\n                            tuple(sub_build_ms_deps),\n                            \"build\",\n",
                      "markdown": "`                        else:\n                            # When not cross-compiling, the build deps aggregate 'build' and 'host'.\n                            sub_build_ms_deps.extend(host_ms_deps)\n                        build_precs = environ.get_package_records(\n                            m.config.build_prefix,\n                            tuple(sub_build_ms_deps),\n                            \"build\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2686,
                  "startColumn": 41,
                  "endLine": 2686,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                        host_ms_deps = m.ms_depends(\"host\")\n                        sub_build_ms_deps = m.ms_depends(\"build\")\n                        if m.is_cross and not m.build_is_host:\n                            host_precs = environ.get_package_records(\n                                m.config.host_prefix,\n                                tuple(host_ms_deps),\n                                \"host\",\n",
                    "rendered": {
                      "text": "                        host_ms_deps = m.ms_depends(\"host\")\n                        sub_build_ms_deps = m.ms_depends(\"build\")\n                        if m.is_cross and not m.build_is_host:\n                            host_precs = environ.get_package_records(\n                                m.config.host_prefix,\n                                tuple(host_ms_deps),\n                                \"host\",\n",
                      "markdown": "`                        host_ms_deps = m.ms_depends(\"host\")\n                        sub_build_ms_deps = m.ms_depends(\"build\")\n                        if m.is_cross and not m.build_is_host:\n                            host_precs = environ.get_package_records(\n                                m.config.host_prefix,\n                                tuple(host_ms_deps),\n                                \"host\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2325,
                  "startColumn": 8,
                  "endLine": 2325,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    output_metas = []\n\n    with utils.path_prepended(m.config.build_prefix):\n        env = environ.get_dict(m=m)\n    env[\"CONDA_BUILD_STATE\"] = \"BUILD\"\n\n    # this should be a no-op if source is already here\n",
                    "rendered": {
                      "text": "    output_metas = []\n\n    with utils.path_prepended(m.config.build_prefix):\n        env = environ.get_dict(m=m)\n    env[\"CONDA_BUILD_STATE\"] = \"BUILD\"\n\n    # this should be a no-op if source is already here\n",
                      "markdown": "`    output_metas = []\n\n    with utils.path_prepended(m.config.build_prefix):\n        env = environ.get_dict(m=m)\n    env[\"CONDA_BUILD_STATE\"] = \"BUILD\"\n\n    # this should be a no-op if source is already here\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2247,
                  "startColumn": 12,
                  "endLine": 2247,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                *utils.ensure_list(m.get_value(\"requirements/run\", [])),\n            ]\n            # make sure test deps are available before taking time to create build env\n            environ.get_package_records(\n                m.config.test_prefix,\n                tuple(test_run_ms_deps),\n                \"test\",\n",
                    "rendered": {
                      "text": "                *utils.ensure_list(m.get_value(\"requirements/run\", [])),\n            ]\n            # make sure test deps are available before taking time to create build env\n            environ.get_package_records(\n                m.config.test_prefix,\n                tuple(test_run_ms_deps),\n                \"test\",\n",
                      "markdown": "`                *utils.ensure_list(m.get_value(\"requirements/run\", [])),\n            ]\n            # make sure test deps are available before taking time to create build env\n            environ.get_package_records(\n                m.config.test_prefix,\n                tuple(test_run_ms_deps),\n                \"test\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2221,
                  "startColumn": 18,
                  "endLine": 2221,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        )\n    if m.build_is_host:\n        build_ms_deps.extend(host_ms_deps)\n    build_precs = environ.get_package_records(\n        m.config.build_prefix,\n        tuple(build_ms_deps),\n        \"build\",\n",
                    "rendered": {
                      "text": "        )\n    if m.build_is_host:\n        build_ms_deps.extend(host_ms_deps)\n    build_precs = environ.get_package_records(\n        m.config.build_prefix,\n        tuple(build_ms_deps),\n        \"build\",\n",
                      "markdown": "`        )\n    if m.build_is_host:\n        build_ms_deps.extend(host_ms_deps)\n    build_precs = environ.get_package_records(\n        m.config.build_prefix,\n        tuple(build_ms_deps),\n        \"build\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2195,
                  "startColumn": 21,
                  "endLine": 2195,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    m.config._merge_build_host = m.build_is_host\n\n    if m.is_cross and not m.build_is_host:\n        host_precs = environ.get_package_records(\n            m.config.host_prefix,\n            tuple(host_ms_deps),\n            \"host\",\n",
                    "rendered": {
                      "text": "    m.config._merge_build_host = m.build_is_host\n\n    if m.is_cross and not m.build_is_host:\n        host_precs = environ.get_package_records(\n            m.config.host_prefix,\n            tuple(host_ms_deps),\n            \"host\",\n",
                      "markdown": "`    m.config._merge_build_host = m.build_is_host\n\n    if m.is_cross and not m.build_is_host:\n        host_precs = environ.get_package_records(\n            m.config.host_prefix,\n            tuple(host_ms_deps),\n            \"host\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2072,
                  "startColumn": 29,
                  "endLine": 2072,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    cygpath_prefix = \"$(cygpath -u \" if utils.on_win else \"\"\n    cygpath_suffix = \" )\" if utils.on_win else \"\"\n\n    py_flags = \"-I -m\" if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\") else \"-m\"\n    file_handle.write(\n        f\"\"\"eval \"$('{sys.executable}' {py_flags} conda shell.bash hook)\"\\n\"\"\"\n    )\n",
                    "rendered": {
                      "text": "    cygpath_prefix = \"$(cygpath -u \" if utils.on_win else \"\"\n    cygpath_suffix = \" )\" if utils.on_win else \"\"\n\n    py_flags = \"-I -m\" if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\") else \"-m\"\n    file_handle.write(\n        f\"\"\"eval \"$('{sys.executable}' {py_flags} conda shell.bash hook)\"\\n\"\"\"\n    )\n",
                      "markdown": "`    cygpath_prefix = \"$(cygpath -u \" if utils.on_win else \"\"\n    cygpath_suffix = \" )\" if utils.on_win else \"\"\n\n    py_flags = \"-I -m\" if os.environ.get(\"_CONDA_BUILD_ISOLATED_ACTIVATION\") else \"-m\"\n    file_handle.write(\n        f\"\"\"eval \"$('{sys.executable}' {py_flags} conda shell.bash hook)\"\\n\"\"\"\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2014,
                  "startColumn": 8,
                  "endLine": 2014,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            _write_activation_text(dest_file, metadata)\n\n        # run the appropriate script\n        env = environ.get_dict(m=metadata).copy()\n        env[\"TOP_PKG_NAME\"] = env[\"PKG_NAME\"]\n        env[\"TOP_PKG_VERSION\"] = env[\"PKG_VERSION\"]\n        env[\"PKG_VERSION\"] = metadata.version()\n",
                    "rendered": {
                      "text": "            _write_activation_text(dest_file, metadata)\n\n        # run the appropriate script\n        env = environ.get_dict(m=metadata).copy()\n        env[\"TOP_PKG_NAME\"] = env[\"PKG_NAME\"]\n        env[\"TOP_PKG_VERSION\"] = env[\"PKG_VERSION\"]\n        env[\"PKG_VERSION\"] = metadata.version()\n",
                      "markdown": "`            _write_activation_text(dest_file, metadata)\n\n        # run the appropriate script\n        env = environ.get_dict(m=metadata).copy()\n        env[\"TOP_PKG_NAME\"] = env[\"PKG_NAME\"]\n        env[\"TOP_PKG_VERSION\"] = env[\"PKG_VERSION\"]\n        env[\"PKG_VERSION\"] = metadata.version()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1724,
                  "startColumn": 8,
                  "endLine": 1724,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        output[\"script\"] = script_fn\n\n    if output.get(\"script\"):\n        env = environ.get_dict(m=metadata)\n\n        interpreter = output.get(\"script_interpreter\")\n        if not interpreter:\n",
                    "rendered": {
                      "text": "        output[\"script\"] = script_fn\n\n    if output.get(\"script\"):\n        env = environ.get_dict(m=metadata)\n\n        interpreter = output.get(\"script_interpreter\")\n        if not interpreter:\n",
                      "markdown": "`        output[\"script\"] = script_fn\n\n    if output.get(\"script\"):\n        env = environ.get_dict(m=metadata)\n\n        interpreter = output.get(\"script_interpreter\")\n        if not interpreter:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1329,
                  "startColumn": 27,
                  "endLine": 1329,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            runtime_deps = m.get_value(\"requirements/run\", [])\n            info_index[\"depends\"] = runtime_deps\n        else:\n            runtime_deps = environ.get_pinned_deps(m, \"run\")\n        with open(join(m.config.info_dir, \"requires\"), \"w\") as fo:\n            fo.write(\n                \"# This file as created when building:\\n\"\n",
                    "rendered": {
                      "text": "            runtime_deps = m.get_value(\"requirements/run\", [])\n            info_index[\"depends\"] = runtime_deps\n        else:\n            runtime_deps = environ.get_pinned_deps(m, \"run\")\n        with open(join(m.config.info_dir, \"requires\"), \"w\") as fo:\n            fo.write(\n                \"# This file as created when building:\\n\"\n",
                      "markdown": "`            runtime_deps = m.get_value(\"requirements/run\", [])\n            info_index[\"depends\"] = runtime_deps\n        else:\n            runtime_deps = environ.get_pinned_deps(m, \"run\")\n        with open(join(m.config.info_dir, \"requires\"), \"w\") as fo:\n            fo.write(\n                \"# This file as created when building:\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1301,
                  "startColumn": 11,
                  "endLine": 1301,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        d[\"channels\"] = stripped_channels\n        evars = [\"CIO_TEST\"]\n\n        d[\"env_vars\"] = {ev: os.getenv(ev, \"<not set>\") for ev in evars}\n        # Adding this to extra since its arbitrary info\n        extra = m.get_section(\"extra\")\n        # Add burn-in information to extra\n",
                    "rendered": {
                      "text": "        d[\"channels\"] = stripped_channels\n        evars = [\"CIO_TEST\"]\n\n        d[\"env_vars\"] = {ev: os.getenv(ev, \"<not set>\") for ev in evars}\n        # Adding this to extra since its arbitrary info\n        extra = m.get_section(\"extra\")\n        # Add burn-in information to extra\n",
                      "markdown": "`        d[\"channels\"] = stripped_channels\n        evars = [\"CIO_TEST\"]\n\n        d[\"env_vars\"] = {ev: os.getenv(ev, \"<not set>\") for ev in evars}\n        # Adding this to extra since its arbitrary info\n        extra = m.get_section(\"extra\")\n        # Add burn-in information to extra\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1260,
                  "startColumn": 14,
                  "endLine": 1260,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                noarch_dict[\"entry_points\"] = entry_points\n        package_metadata[\"noarch\"] = noarch_dict\n\n    preferred_env = m.get_value(\"build/preferred_env\")\n    if preferred_env:\n        preferred_env_dict = OrderedDict(name=str(preferred_env))\n        executable_paths = m.get_value(\"build/preferred_env_executable_paths\")\n",
                    "rendered": {
                      "text": "                noarch_dict[\"entry_points\"] = entry_points\n        package_metadata[\"noarch\"] = noarch_dict\n\n    preferred_env = m.get_value(\"build/preferred_env\")\n    if preferred_env:\n        preferred_env_dict = OrderedDict(name=str(preferred_env))\n        executable_paths = m.get_value(\"build/preferred_env_executable_paths\")\n",
                      "markdown": "`                noarch_dict[\"entry_points\"] = entry_points\n        package_metadata[\"noarch\"] = noarch_dict\n\n    preferred_env = m.get_value(\"build/preferred_env\")\n    if preferred_env:\n        preferred_env_dict = OrderedDict(name=str(preferred_env))\n        executable_paths = m.get_value(\"build/preferred_env_executable_paths\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3972,
                  "startColumn": 3,
                  "endLine": 3972,
                  "endColumn": 8,
                  "snippet": {
                    "text": "            \"# Try:\\n\"\n            f\"# {prompter}conda install anaconda-client\"\n        )\n    cmd = [\n        anaconda,\n    ]\n\n",
                    "rendered": {
                      "text": "            \"# Try:\\n\"\n            f\"# {prompter}conda install anaconda-client\"\n        )\n    cmd = [\n        anaconda,\n    ]\n\n",
                      "markdown": "`            \"# Try:\\n\"\n            f\"# {prompter}conda install anaconda-client\"\n        )\n    cmd = [\n        anaconda,\n    ]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3789,
                  "startColumn": 48,
                  "endLine": 3789,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            recipe_list.extendleft([recipe])\n            for pkg, matchspec in zip(e.packages, e.matchspecs):\n                pkg_name = pkg.split(\" \")[0].split(\"=\")[0]\n                # if we hit missing dependencies at test time, the error we get says that our\n                #    package that we just built needs to be built.  Very confusing.  Bomb out\n                #    if any of our output metadatas are in the exception list of pkgs.\n                if metadata and any(\n",
                    "rendered": {
                      "text": "            recipe_list.extendleft([recipe])\n            for pkg, matchspec in zip(e.packages, e.matchspecs):\n                pkg_name = pkg.split(\" \")[0].split(\"=\")[0]\n                # if we hit missing dependencies at test time, the error we get says that our\n                #    package that we just built needs to be built.  Very confusing.  Bomb out\n                #    if any of our output metadatas are in the exception list of pkgs.\n                if metadata and any(\n",
                      "markdown": "`            recipe_list.extendleft([recipe])\n            for pkg, matchspec in zip(e.packages, e.matchspecs):\n                pkg_name = pkg.split(\" \")[0].split(\"=\")[0]\n                # if we hit missing dependencies at test time, the error we get says that our\n                #    package that we just built needs to be built.  Very confusing.  Bomb out\n                #    if any of our output metadatas are in the exception list of pkgs.\n                if metadata and any(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3785,
                  "startColumn": 40,
                  "endLine": 3785,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            skip_names = [\"python\", \"r\", \"r-base\", \"mro-base\", \"perl\", \"lua\"]\n            built_package_paths = [entry[1][1].path for entry in built_packages.items()]\n            add_recipes = []\n            # add the failed one back in at the beginning - but its deps may come before it\n            recipe_list.extendleft([recipe])\n            for pkg, matchspec in zip(e.packages, e.matchspecs):\n                pkg_name = pkg.split(\" \")[0].split(\"=\")[0]\n",
                    "rendered": {
                      "text": "            skip_names = [\"python\", \"r\", \"r-base\", \"mro-base\", \"perl\", \"lua\"]\n            built_package_paths = [entry[1][1].path for entry in built_packages.items()]\n            add_recipes = []\n            # add the failed one back in at the beginning - but its deps may come before it\n            recipe_list.extendleft([recipe])\n            for pkg, matchspec in zip(e.packages, e.matchspecs):\n                pkg_name = pkg.split(\" \")[0].split(\"=\")[0]\n",
                      "markdown": "`            skip_names = [\"python\", \"r\", \"r-base\", \"mro-base\", \"perl\", \"lua\"]\n            built_package_paths = [entry[1][1].path for entry in built_packages.items()]\n            add_recipes = []\n            # add the failed one back in at the beginning - but its deps may come before it\n            recipe_list.extendleft([recipe])\n            for pkg, matchspec in zip(e.packages, e.matchspecs):\n                pkg_name = pkg.split(\" \")[0].split(\"=\")[0]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3461,
                  "startColumn": 7,
                  "endLine": 3461,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    if utils.on_win:\n        cmd = [os.environ.get(\"COMSPEC\", \"cmd.exe\"), \"/d\", \"/c\", test_script]\n    else:\n        cmd = (\n            [shell_path]\n            + ([\"-x\"] if metadata.config.debug else [])\n            + [\"-o\", \"errexit\", test_script]\n",
                    "rendered": {
                      "text": "    if utils.on_win:\n        cmd = [os.environ.get(\"COMSPEC\", \"cmd.exe\"), \"/d\", \"/c\", test_script]\n    else:\n        cmd = (\n            [shell_path]\n            + ([\"-x\"] if metadata.config.debug else [])\n            + [\"-o\", \"errexit\", test_script]\n",
                      "markdown": "`    if utils.on_win:\n        cmd = [os.environ.get(\"COMSPEC\", \"cmd.exe\"), \"/d\", \"/c\", test_script]\n    else:\n        cmd = (\n            [shell_path]\n            + ([\"-x\"] if metadata.config.debug else [])\n            + [\"-o\", \"errexit\", test_script]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3459,
                  "startColumn": 7,
                  "endLine": 3459,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    )\n\n    if utils.on_win:\n        cmd = [os.environ.get(\"COMSPEC\", \"cmd.exe\"), \"/d\", \"/c\", test_script]\n    else:\n        cmd = (\n            [shell_path]\n",
                    "rendered": {
                      "text": "    )\n\n    if utils.on_win:\n        cmd = [os.environ.get(\"COMSPEC\", \"cmd.exe\"), \"/d\", \"/c\", test_script]\n    else:\n        cmd = (\n            [shell_path]\n",
                      "markdown": "`    )\n\n    if utils.on_win:\n        cmd = [os.environ.get(\"COMSPEC\", \"cmd.exe\"), \"/d\", \"/c\", test_script]\n    else:\n        cmd = (\n            [shell_path]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2982,
                  "startColumn": 61,
                  "endLine": 2982,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        if os.path.exists(test_files) and os.path.isdir(test_files):\n            # things are re-extracted into the test dir because that's cwd when tests are run,\n            #    and provides the most intuitive experience. This is a little\n            #    tricky, because SRC_DIR still needs to point at the original\n            #    work_dir, for legacy behavior where people aren't using\n            #    test/source_files. It would be better to change SRC_DIR in\n            #    test phase to always point to test_dir. Maybe one day.\n",
                    "rendered": {
                      "text": "        if os.path.exists(test_files) and os.path.isdir(test_files):\n            # things are re-extracted into the test dir because that's cwd when tests are run,\n            #    and provides the most intuitive experience. This is a little\n            #    tricky, because SRC_DIR still needs to point at the original\n            #    work_dir, for legacy behavior where people aren't using\n            #    test/source_files. It would be better to change SRC_DIR in\n            #    test phase to always point to test_dir. Maybe one day.\n",
                      "markdown": "`        if os.path.exists(test_files) and os.path.isdir(test_files):\n            # things are re-extracted into the test dir because that's cwd when tests are run,\n            #    and provides the most intuitive experience. This is a little\n            #    tricky, because SRC_DIR still needs to point at the original\n            #    work_dir, for legacy behavior where people aren't using\n            #    test/source_files. It would be better to change SRC_DIR in\n            #    test phase to always point to test_dir. Maybe one day.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2926,
                  "startColumn": 5,
                  "endLine": 2926,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n    local_channel = os.path.dirname(local_pkg_location)\n\n    # update indices in the channel\n    _delegated_update_index(local_channel, verbose=config.debug, threads=1)\n\n    try:\n",
                    "rendered": {
                      "text": "\n    local_channel = os.path.dirname(local_pkg_location)\n\n    # update indices in the channel\n    _delegated_update_index(local_channel, verbose=config.debug, threads=1)\n\n    try:\n",
                      "markdown": "`\n    local_channel = os.path.dirname(local_pkg_location)\n\n    # update indices in the channel\n    _delegated_update_index(local_channel, verbose=config.debug, threads=1)\n\n    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2911,
                  "startColumn": 36,
                  "endLine": 2911,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            \"Copying package to conda-build croot.  No packages otherwise alongside yours will\"\n            \" be available unless you specify -c local.  To avoid this warning, your package \"\n            \"must reside in a channel structure with platform-subfolders.  See more info on \"\n            \"what a valid channel is at \"\n            \"https://conda.io/docs/user-guide/tasks/create-custom-channels.html\"\n        )\n\n",
                    "rendered": {
                      "text": "            \"Copying package to conda-build croot.  No packages otherwise alongside yours will\"\n            \" be available unless you specify -c local.  To avoid this warning, your package \"\n            \"must reside in a channel structure with platform-subfolders.  See more info on \"\n            \"what a valid channel is at \"\n            \"https://conda.io/docs/user-guide/tasks/create-custom-channels.html\"\n        )\n\n",
                      "markdown": "`            \"Copying package to conda-build croot.  No packages otherwise alongside yours will\"\n            \" be available unless you specify -c local.  To avoid this warning, your package \"\n            \"must reside in a channel structure with platform-subfolders.  See more info on \"\n            \"what a valid channel is at \"\n            \"https://conda.io/docs/user-guide/tasks/create-custom-channels.html\"\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2743,
                  "startColumn": 64,
                  "endLine": 2743,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                        if f.startswith(\"conda-meta\"):\n                            to_remove.add(f)\n\n                    # This is wrong, files has not been expanded at this time and could contain\n                    # wildcards.  Also well, I just do not understand this, because when this\n                    # does contain wildcards, the files in to_remove will slip back in.\n                    if (files := output_d.get(\"files\")) and not isinstance(files, dict):\n",
                    "rendered": {
                      "text": "                        if f.startswith(\"conda-meta\"):\n                            to_remove.add(f)\n\n                    # This is wrong, files has not been expanded at this time and could contain\n                    # wildcards.  Also well, I just do not understand this, because when this\n                    # does contain wildcards, the files in to_remove will slip back in.\n                    if (files := output_d.get(\"files\")) and not isinstance(files, dict):\n",
                      "markdown": "`                        if f.startswith(\"conda-meta\"):\n                            to_remove.add(f)\n\n                    # This is wrong, files has not been expanded at this time and could contain\n                    # wildcards.  Also well, I just do not understand this, because when this\n                    # does contain wildcards, the files in to_remove will slip back in.\n                    if (files := output_d.get(\"files\")) and not isinstance(files, dict):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2525,
                  "startColumn": 23,
                  "endLine": 2525,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                if isfile(build_file) or script:\n                    work_file, _ = write_build_scripts(m, script, build_file)\n                    if not provision_only:\n                        cmd = (\n                            [shell_path]\n                            + ([\"-x\"] if m.config.debug else [])\n                            + [\"-o\", \"errexit\", work_file]\n",
                    "rendered": {
                      "text": "                if isfile(build_file) or script:\n                    work_file, _ = write_build_scripts(m, script, build_file)\n                    if not provision_only:\n                        cmd = (\n                            [shell_path]\n                            + ([\"-x\"] if m.config.debug else [])\n                            + [\"-o\", \"errexit\", work_file]\n",
                      "markdown": "`                if isfile(build_file) or script:\n                    work_file, _ = write_build_scripts(m, script, build_file)\n                    if not provision_only:\n                        cmd = (\n                            [shell_path]\n                            + ([\"-x\"] if m.config.debug else [])\n                            + [\"-o\", \"errexit\", work_file]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2398,
                  "startColumn": 50,
                  "endLine": 2398,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                    specs.append(vcs_source)\n\n                    log.warning(\n                        \"Your recipe depends on %s at build time (for templates), \"\n                        \"but you have not listed it as a build dependency.  Doing \"\n                        \"so for this build.\",\n                        vcs_source,\n",
                    "rendered": {
                      "text": "                    specs.append(vcs_source)\n\n                    log.warning(\n                        \"Your recipe depends on %s at build time (for templates), \"\n                        \"but you have not listed it as a build dependency.  Doing \"\n                        \"so for this build.\",\n                        vcs_source,\n",
                      "markdown": "`                    specs.append(vcs_source)\n\n                    log.warning(\n                        \"Your recipe depends on %s at build time (for templates), \"\n                        \"but you have not listed it as a build dependency.  Doing \"\n                        \"so for this build.\",\n                        vcs_source,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1740,
                  "startColumn": 26,
                  "endLine": 1740,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                # WSL bash is always the same path, it is an alias to the default\n                # distribution as configured by the user\n                on_win\n                # check if WSL is installed before calling Path.samefile/os.stat\n                and (wsl_bash := Path(\"C:\\\\Windows\\\\System32\\\\bash.exe\")).exists()\n                and wsl_bash.samefile(args[0])\n            ):\n",
                    "rendered": {
                      "text": "                # WSL bash is always the same path, it is an alias to the default\n                # distribution as configured by the user\n                on_win\n                # check if WSL is installed before calling Path.samefile/os.stat\n                and (wsl_bash := Path(\"C:\\\\Windows\\\\System32\\\\bash.exe\")).exists()\n                and wsl_bash.samefile(args[0])\n            ):\n",
                      "markdown": "`                # WSL bash is always the same path, it is an alias to the default\n                # distribution as configured by the user\n                on_win\n                # check if WSL is installed before calling Path.samefile/os.stat\n                and (wsl_bash := Path(\"C:\\\\Windows\\\\System32\\\\bash.exe\")).exists()\n                and wsl_bash.samefile(args[0])\n            ):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1737,
                  "startColumn": 17,
                  "endLine": 1737,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                    args[0],\n                )\n            if (\n                # WSL bash is always the same path, it is an alias to the default\n                # distribution as configured by the user\n                on_win\n                # check if WSL is installed before calling Path.samefile/os.stat\n",
                    "rendered": {
                      "text": "                    args[0],\n                )\n            if (\n                # WSL bash is always the same path, it is an alias to the default\n                # distribution as configured by the user\n                on_win\n                # check if WSL is installed before calling Path.samefile/os.stat\n",
                      "markdown": "`                    args[0],\n                )\n            if (\n                # WSL bash is always the same path, it is an alias to the default\n                # distribution as configured by the user\n                on_win\n                # check if WSL is installed before calling Path.samefile/os.stat\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1690,
                  "startColumn": 46,
                  "endLine": 1690,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    get_all_replacements(metadata.config)\n    files = output.get(\"files\", [])\n\n    # this is because without any requirements at all, we still need to have the host prefix exist\n    try:\n        os.makedirs(metadata.config.host_prefix)\n    except OSError:\n",
                    "rendered": {
                      "text": "    get_all_replacements(metadata.config)\n    files = output.get(\"files\", [])\n\n    # this is because without any requirements at all, we still need to have the host prefix exist\n    try:\n        os.makedirs(metadata.config.host_prefix)\n    except OSError:\n",
                      "markdown": "`    get_all_replacements(metadata.config)\n    files = output.get(\"files\", [])\n\n    # this is because without any requirements at all, we still need to have the host prefix exist\n    try:\n        os.makedirs(metadata.config.host_prefix)\n    except OSError:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1361,
                  "startColumn": 7,
                  "endLine": 1361,
                  "endColumn": 12,
                  "snippet": {
                    "text": "def get_entry_point_script_names(entry_point_scripts):\n    scripts = []\n    for entry_point in entry_point_scripts:\n        cmd = entry_point[: entry_point.find(\"=\")].strip()\n        if utils.on_win:\n            scripts.append(f\"Scripts\\\\{cmd}-script.py\")\n            scripts.append(f\"Scripts\\\\{cmd}.exe\")\n",
                    "rendered": {
                      "text": "def get_entry_point_script_names(entry_point_scripts):\n    scripts = []\n    for entry_point in entry_point_scripts:\n        cmd = entry_point[: entry_point.find(\"=\")].strip()\n        if utils.on_win:\n            scripts.append(f\"Scripts\\\\{cmd}-script.py\")\n            scripts.append(f\"Scripts\\\\{cmd}.exe\")\n",
                      "markdown": "`def get_entry_point_script_names(entry_point_scripts):\n    scripts = []\n    for entry_point in entry_point_scripts:\n        cmd = entry_point[: entry_point.find(\"=\")].strip()\n        if utils.on_win:\n            scripts.append(f\"Scripts\\\\{cmd}-script.py\")\n            scripts.append(f\"Scripts\\\\{cmd}.exe\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1069,
                  "startColumn": 79,
                  "endLine": 1069,
                  "endColumn": 83,
                  "snippet": {
                    "text": "        debug=m.config.debug,\n    )\n    prefixes_for_file = {}\n    # This is for Windows mainly, though we may want to allow multiple searches at once in a file on\n    # all OSes some-day. It  is harmless to do this on all systems anyway.\n    for filename, match in pfx_matches.items():\n        prefixes_for_file[filename] = {sm[\"text\"] for sm in match[\"submatches\"]}\n",
                    "rendered": {
                      "text": "        debug=m.config.debug,\n    )\n    prefixes_for_file = {}\n    # This is for Windows mainly, though we may want to allow multiple searches at once in a file on\n    # all OSes some-day. It  is harmless to do this on all systems anyway.\n    for filename, match in pfx_matches.items():\n        prefixes_for_file[filename] = {sm[\"text\"] for sm in match[\"submatches\"]}\n",
                      "markdown": "`        debug=m.config.debug,\n    )\n    prefixes_for_file = {}\n    # This is for Windows mainly, though we may want to allow multiple searches at once in a file on\n    # all OSes some-day. It  is harmless to do this on all systems anyway.\n    for filename, match in pfx_matches.items():\n        prefixes_for_file[filename] = {sm[\"text\"] for sm in match[\"submatches\"]}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1061,
                  "startColumn": 35,
                  "endLine": 1061,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        regex_re=re_test,\n        # We definitely do not want this as a replacement_re as it'd replace\n        # /opt/anaconda1anaconda2anaconda3 with the prefix. As it happens we\n        # do not do any replacement at all here.\n        # replacement_re=prefix.encode('utf-8').replace(b'\\\\', b'\\\\\\\\'),\n        replacement_re=None,\n        also_binaries=True,\n",
                    "rendered": {
                      "text": "        regex_re=re_test,\n        # We definitely do not want this as a replacement_re as it'd replace\n        # /opt/anaconda1anaconda2anaconda3 with the prefix. As it happens we\n        # do not do any replacement at all here.\n        # replacement_re=prefix.encode('utf-8').replace(b'\\\\', b'\\\\\\\\'),\n        replacement_re=None,\n        also_binaries=True,\n",
                      "markdown": "`        regex_re=re_test,\n        # We definitely do not want this as a replacement_re as it'd replace\n        # /opt/anaconda1anaconda2anaconda3 with the prefix. As it happens we\n        # do not do any replacement at all here.\n        # replacement_re=prefix.encode('utf-8').replace(b'\\\\', b'\\\\\\\\'),\n        replacement_re=None,\n        also_binaries=True,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 71,
                  "endLine": 453,
                  "endColumn": 75,
                  "snippet": {
                    "text": "                        submatch[\"end\"] = submatch[\"start\"] + len(match_tigher)\n                        # print(\"from {} to {} (index={})\".format(submatch['text'], match_tigher, index))\n                        submatch[\"text\"] = match_tigher\n                        # Assert we can still find submatches correctly at their start and end in the line.\n                        if \"line\" in match:\n                            assert (\n                                match[\"line\"][\n",
                    "rendered": {
                      "text": "                        submatch[\"end\"] = submatch[\"start\"] + len(match_tigher)\n                        # print(\"from {} to {} (index={})\".format(submatch['text'], match_tigher, index))\n                        submatch[\"text\"] = match_tigher\n                        # Assert we can still find submatches correctly at their start and end in the line.\n                        if \"line\" in match:\n                            assert (\n                                match[\"line\"][\n",
                      "markdown": "`                        submatch[\"end\"] = submatch[\"start\"] + len(match_tigher)\n                        # print(\"from {} to {} (index={})\".format(submatch['text'], match_tigher, index))\n                        submatch[\"text\"] = match_tigher\n                        # Assert we can still find submatches correctly at their start and end in the line.\n                        if \"line\" in match:\n                            assert (\n                                match[\"line\"][\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 65,
                  "endLine": 437,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                    else:\n                        match_tigher = str(match_re)\n                    if match_tigher != submatch[\"text\"]:\n                        # Assert we can find submatches correctly at their start and end in the line.\n                        if \"line\" in match:\n                            assert (\n                                match[\"line\"][\n",
                    "rendered": {
                      "text": "                    else:\n                        match_tigher = str(match_re)\n                    if match_tigher != submatch[\"text\"]:\n                        # Assert we can find submatches correctly at their start and end in the line.\n                        if \"line\" in match:\n                            assert (\n                                match[\"line\"][\n",
                      "markdown": "`                    else:\n                        match_tigher = str(match_re)\n                    if match_tigher != submatch[\"text\"]:\n                        # Assert we can find submatches correctly at their start and end in the line.\n                        if \"line\" in match:\n                            assert (\n                                match[\"line\"][\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3469,
                  "startColumn": 56,
                  "endLine": 3469,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    try:\n        test_stats = {}\n        if not provision_only:\n            # rewrite long paths in stdout back to their env variables\n            if metadata.config.debug or metadata.config.no_rewrite_stdout_env:\n                rewrite_env = None\n            else:\n",
                    "rendered": {
                      "text": "    try:\n        test_stats = {}\n        if not provision_only:\n            # rewrite long paths in stdout back to their env variables\n            if metadata.config.debug or metadata.config.no_rewrite_stdout_env:\n                rewrite_env = None\n            else:\n",
                      "markdown": "`    try:\n        test_stats = {}\n        if not provision_only:\n            # rewrite long paths in stdout back to their env variables\n            if metadata.config.debug or metadata.config.no_rewrite_stdout_env:\n                rewrite_env = None\n            else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3433,
                  "startColumn": 7,
                  "endLine": 3433,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        )\n\n    with utils.path_prepended(metadata.config.test_prefix):\n        env = dict(os.environ.copy())\n        env.update(environ.get_dict(m=metadata, prefix=metadata.config.test_prefix))\n        env[\"CONDA_BUILD_STATE\"] = \"TEST\"\n\n",
                    "rendered": {
                      "text": "        )\n\n    with utils.path_prepended(metadata.config.test_prefix):\n        env = dict(os.environ.copy())\n        env.update(environ.get_dict(m=metadata, prefix=metadata.config.test_prefix))\n        env[\"CONDA_BUILD_STATE\"] = \"TEST\"\n\n",
                      "markdown": "`        )\n\n    with utils.path_prepended(metadata.config.test_prefix):\n        env = dict(os.environ.copy())\n        env.update(environ.get_dict(m=metadata, prefix=metadata.config.test_prefix))\n        env[\"CONDA_BUILD_STATE\"] = \"TEST\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3357,
                  "startColumn": 7,
                  "endLine": 3357,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n    if not metadata.config.activate or metadata.name() == \"conda\":\n        # prepend bin (or Scripts) directory\n        env = utils.prepend_bin_path(\n            env, metadata.config.test_prefix, prepend_prefix=True\n        )\n\n",
                    "rendered": {
                      "text": "\n    if not metadata.config.activate or metadata.name() == \"conda\":\n        # prepend bin (or Scripts) directory\n        env = utils.prepend_bin_path(\n            env, metadata.config.test_prefix, prepend_prefix=True\n        )\n\n",
                      "markdown": "`\n    if not metadata.config.activate or metadata.name() == \"conda\":\n        # prepend bin (or Scripts) directory\n        env = utils.prepend_bin_path(\n            env, metadata.config.test_prefix, prepend_prefix=True\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3350,
                  "startColumn": 7,
                  "endLine": 3350,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    specs = metadata.get_test_deps(py_files, pl_files, lua_files, r_files)\n\n    with utils.path_prepended(metadata.config.test_prefix):\n        env = dict(os.environ.copy())\n        env.update(environ.get_dict(m=metadata, prefix=config.test_prefix))\n        env[\"CONDA_BUILD_STATE\"] = \"TEST\"\n        env[\"CONDA_BUILD\"] = \"1\"\n",
                    "rendered": {
                      "text": "    specs = metadata.get_test_deps(py_files, pl_files, lua_files, r_files)\n\n    with utils.path_prepended(metadata.config.test_prefix):\n        env = dict(os.environ.copy())\n        env.update(environ.get_dict(m=metadata, prefix=config.test_prefix))\n        env[\"CONDA_BUILD_STATE\"] = \"TEST\"\n        env[\"CONDA_BUILD\"] = \"1\"\n",
                      "markdown": "`    specs = metadata.get_test_deps(py_files, pl_files, lua_files, r_files)\n\n    with utils.path_prepended(metadata.config.test_prefix):\n        env = dict(os.environ.copy())\n        env.update(environ.get_dict(m=metadata, prefix=config.test_prefix))\n        env[\"CONDA_BUILD_STATE\"] = \"TEST\"\n        env[\"CONDA_BUILD\"] = \"1\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3316,
                  "startColumn": 67,
                  "endLine": 3316,
                  "endColumn": 72,
                  "snippet": {
                    "text": "            (\"build\", metadata.config.build_prefix),\n        ):\n            if os.path.isdir(prefix):\n                # move host folder to force hardcoded paths to host env to break during tests\n                #    (so that they can be properly addressed by recipe author)\n                dest = os.path.join(\n                    os.path.dirname(prefix),\n",
                    "rendered": {
                      "text": "            (\"build\", metadata.config.build_prefix),\n        ):\n            if os.path.isdir(prefix):\n                # move host folder to force hardcoded paths to host env to break during tests\n                #    (so that they can be properly addressed by recipe author)\n                dest = os.path.join(\n                    os.path.dirname(prefix),\n",
                      "markdown": "`            (\"build\", metadata.config.build_prefix),\n        ):\n            if os.path.isdir(prefix):\n                # move host folder to force hardcoded paths to host env to break during tests\n                #    (so that they can be properly addressed by recipe author)\n                dest = os.path.join(\n                    os.path.dirname(prefix),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3052,
                  "startColumn": 11,
                  "endLine": 3052,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    #       Leaving it as is, for now, since we need a quick, non-disruptive patch release.\n    with utils.path_prepended(m.config.host_prefix, False):\n        with utils.path_prepended(m.config.build_prefix, False):\n            env = environ.get_dict(m=m)\n\n    _set_env_variables_for_build(m, env)\n\n",
                    "rendered": {
                      "text": "    #       Leaving it as is, for now, since we need a quick, non-disruptive patch release.\n    with utils.path_prepended(m.config.host_prefix, False):\n        with utils.path_prepended(m.config.build_prefix, False):\n            env = environ.get_dict(m=m)\n\n    _set_env_variables_for_build(m, env)\n\n",
                      "markdown": "`    #       Leaving it as is, for now, since we need a quick, non-disruptive patch release.\n    with utils.path_prepended(m.config.host_prefix, False):\n        with utils.path_prepended(m.config.build_prefix, False):\n            env = environ.get_dict(m=m)\n\n    _set_env_variables_for_build(m, env)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3041,
                  "startColumn": 58,
                  "endLine": 3041,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    if m.noarch == \"python\":\n        env[\"PYTHONDONTWRITEBYTECODE\"] = True\n\n    # The stuff in replacements is not parsable in a shell script (or we need to escape it)\n    if \"replacements\" in env:\n        del env[\"replacements\"]\n\n",
                    "rendered": {
                      "text": "    if m.noarch == \"python\":\n        env[\"PYTHONDONTWRITEBYTECODE\"] = True\n\n    # The stuff in replacements is not parsable in a shell script (or we need to escape it)\n    if \"replacements\" in env:\n        del env[\"replacements\"]\n\n",
                      "markdown": "`    if m.noarch == \"python\":\n        env[\"PYTHONDONTWRITEBYTECODE\"] = True\n\n    # The stuff in replacements is not parsable in a shell script (or we need to escape it)\n    if \"replacements\" in env:\n        del env[\"replacements\"]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3034,
                  "startColumn": 10,
                  "endLine": 3034,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    # set PIP_CACHE_DIR to a path in the work dir that does not exist.\n    env[\"PIP_CACHE_DIR\"] = m.config.pip_cache_dir\n\n    # tell pip to not get anything from PyPI, please.  We have everything we need\n    # locally, and if we don't, it's a problem.\n    env[\"PIP_NO_INDEX\"] = True\n\n",
                    "rendered": {
                      "text": "    # set PIP_CACHE_DIR to a path in the work dir that does not exist.\n    env[\"PIP_CACHE_DIR\"] = m.config.pip_cache_dir\n\n    # tell pip to not get anything from PyPI, please.  We have everything we need\n    # locally, and if we don't, it's a problem.\n    env[\"PIP_NO_INDEX\"] = True\n\n",
                      "markdown": "`    # set PIP_CACHE_DIR to a path in the work dir that does not exist.\n    env[\"PIP_CACHE_DIR\"] = m.config.pip_cache_dir\n\n    # tell pip to not get anything from PyPI, please.  We have everything we need\n    # locally, and if we don't, it's a problem.\n    env[\"PIP_NO_INDEX\"] = True\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3023,
                  "startColumn": 33,
                  "endLine": 3023,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n",
                    "rendered": {
                      "text": "    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n",
                      "markdown": "`    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3023,
                  "startColumn": 16,
                  "endLine": 3023,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n",
                    "rendered": {
                      "text": "    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n",
                      "markdown": "`    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n    # some other env vars to have pip ignore dependencies.\n    # we supply them ourselves instead.\n    env[\"PIP_NO_DEPENDENCIES\"] = True\n    env[\"PIP_IGNORE_INSTALLED\"] = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 3019,
                  "startColumn": 15,
                  "endLine": 3019,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    # hard-code this because we never want pip's build isolation\n    #    https://github.com/conda/conda-build/pull/2972#discussion_r198290241\n    #\n    # Note that pip env \"NO\" variables are inverted logic.\n    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n",
                    "rendered": {
                      "text": "    # hard-code this because we never want pip's build isolation\n    #    https://github.com/conda/conda-build/pull/2972#discussion_r198290241\n    #\n    # Note that pip env \"NO\" variables are inverted logic.\n    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n",
                      "markdown": "`    # hard-code this because we never want pip's build isolation\n    #    https://github.com/conda/conda-build/pull/2972#discussion_r198290241\n    #\n    # Note that pip env \"NO\" variables are inverted logic.\n    #      PIP_NO_BUILD_ISOLATION=False means don't use build isolation.\n    #\n    env[\"PIP_NO_BUILD_ISOLATION\"] = \"False\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2760,
                  "startColumn": 23,
                  "endLine": 2760,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n                    pkg_type = \"conda\" if not hasattr(m, \"type\") else m.type\n                    newly_built_packages = bundlers[pkg_type](\n                        output_d, m, env, stats, new_prefix_files\n",
                    "rendered": {
                      "text": "                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n                    pkg_type = \"conda\" if not hasattr(m, \"type\") else m.type\n                    newly_built_packages = bundlers[pkg_type](\n                        output_d, m, env, stats, new_prefix_files\n",
                      "markdown": "`                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n                    pkg_type = \"conda\" if not hasattr(m, \"type\") else m.type\n                    newly_built_packages = bundlers[pkg_type](\n                        output_d, m, env, stats, new_prefix_files\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2758,
                  "startColumn": 62,
                  "endLine": 2758,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                        )\n\n                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n                    pkg_type = \"conda\" if not hasattr(m, \"type\") else m.type\n",
                    "rendered": {
                      "text": "                        )\n\n                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n                    pkg_type = \"conda\" if not hasattr(m, \"type\") else m.type\n",
                      "markdown": "`                        )\n\n                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n                    pkg_type = \"conda\" if not hasattr(m, \"type\") else m.type\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2758,
                  "startColumn": 50,
                  "endLine": 2758,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                        )\n\n                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n                    pkg_type = \"conda\" if not hasattr(m, \"type\") else m.type\n",
                    "rendered": {
                      "text": "                        )\n\n                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n                    pkg_type = \"conda\" if not hasattr(m, \"type\") else m.type\n",
                      "markdown": "`                        )\n\n                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n                    pkg_type = \"conda\" if not hasattr(m, \"type\") else m.type\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2757,
                  "startColumn": 75,
                  "endLine": 2757,
                  "endColumn": 80,
                  "snippet": {
                    "text": "                            symlinks=True,\n                        )\n\n                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n",
                    "rendered": {
                      "text": "                            symlinks=True,\n                        )\n\n                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n",
                      "markdown": "`                            symlinks=True,\n                        )\n\n                    # we must refresh the environment variables because our env for each package\n                    #    can be different from the env for the top level build.\n                    with utils.path_prepended(m.config.build_prefix):\n                        env = environ.get_dict(m=m)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2749,
                  "startColumn": 87,
                  "endLine": 2750,
                  "snippet": {
                    "text": "                    if (files := output_d.get(\"files\")) and not isinstance(files, dict):\n                        output_d[\"files\"] = set(files) - to_remove\n\n                    # copies the backed-up new prefix files into the newly created host env\n                    for f in new_prefix_files:\n                        utils.copy_into(\n                            os.path.join(prefix_files_backup, f),\n                            os.path.join(m.config.host_prefix, f),\n",
                    "rendered": {
                      "text": "                    if (files := output_d.get(\"files\")) and not isinstance(files, dict):\n                        output_d[\"files\"] = set(files) - to_remove\n\n                    # copies the backed-up new prefix files into the newly created host env\n                    for f in new_prefix_files:\n                        utils.copy_into(\n                            os.path.join(prefix_files_backup, f),\n                            os.path.join(m.config.host_prefix, f),\n",
                      "markdown": "`                    if (files := output_d.get(\"files\")) and not isinstance(files, dict):\n                        output_d[\"files\"] = set(files) - to_remove\n\n                    # copies the backed-up new prefix files into the newly created host env\n                    for f in new_prefix_files:\n                        utils.copy_into(\n                            os.path.join(prefix_files_backup, f),\n                            os.path.join(m.config.host_prefix, f),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2743,
                  "startColumn": 72,
                  "endLine": 2743,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                        if f.startswith(\"conda-meta\"):\n                            to_remove.add(f)\n\n                    # This is wrong, files has not been expanded at this time and could contain\n                    # wildcards.  Also well, I just do not understand this, because when this\n                    # does contain wildcards, the files in to_remove will slip back in.\n                    if (files := output_d.get(\"files\")) and not isinstance(files, dict):\n",
                    "rendered": {
                      "text": "                        if f.startswith(\"conda-meta\"):\n                            to_remove.add(f)\n\n                    # This is wrong, files has not been expanded at this time and could contain\n                    # wildcards.  Also well, I just do not understand this, because when this\n                    # does contain wildcards, the files in to_remove will slip back in.\n                    if (files := output_d.get(\"files\")) and not isinstance(files, dict):\n",
                      "markdown": "`                        if f.startswith(\"conda-meta\"):\n                            to_remove.add(f)\n\n                    # This is wrong, files has not been expanded at this time and could contain\n                    # wildcards.  Also well, I just do not understand this, because when this\n                    # does contain wildcards, the files in to_remove will slip back in.\n                    if (files := output_d.get(\"files\")) and not isinstance(files, dict):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2674,
                  "startColumn": 45,
                  "endLine": 2674,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                        # This log message contradicts both the not (m.is_output or ..) check above\n                        # and also the comment \"For more than one output, ...\"\n                        log.debug(\n                            \"Not creating new env for output - already exists from top-level\"\n                        )\n                    else:\n                        m.config._merge_build_host = m.build_is_host\n",
                    "rendered": {
                      "text": "                        # This log message contradicts both the not (m.is_output or ..) check above\n                        # and also the comment \"For more than one output, ...\"\n                        log.debug(\n                            \"Not creating new env for output - already exists from top-level\"\n                        )\n                    else:\n                        m.config._merge_build_host = m.build_is_host\n",
                      "markdown": "`                        # This log message contradicts both the not (m.is_output or ..) check above\n                        # and also the comment \"For more than one output, ...\"\n                        log.debug(\n                            \"Not creating new env for output - already exists from top-level\"\n                        )\n                    else:\n                        m.config._merge_build_host = m.build_is_host\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2647,
                  "startColumn": 34,
                  "endLine": 2647,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                if test_script:\n                    if not os.path.isfile(os.path.join(m.path, test_script)):\n                        raise ValueError(\n                            f\"test script specified as {test_script} does not exist.  Please \"\n                            \"check for typos or create the file and try again.\"\n                        )\n                    utils.copy_into(\n",
                    "rendered": {
                      "text": "                if test_script:\n                    if not os.path.isfile(os.path.join(m.path, test_script)):\n                        raise ValueError(\n                            f\"test script specified as {test_script} does not exist.  Please \"\n                            \"check for typos or create the file and try again.\"\n                        )\n                    utils.copy_into(\n",
                      "markdown": "`                if test_script:\n                    if not os.path.isfile(os.path.join(m.path, test_script)):\n                        raise ValueError(\n                            f\"test script specified as {test_script} does not exist.  Please \"\n                            \"check for typos or create the file and try again.\"\n                        )\n                    utils.copy_into(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2550,
                  "startColumn": 58,
                  "endLine": 2550,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                                    )\n                                )\n\n                        # clear this, so that the activate script will get run as necessary\n                        del env[\"CONDA_BUILD\"]\n\n                        # this should raise if any problems occur while building\n",
                    "rendered": {
                      "text": "                                    )\n                                )\n\n                        # clear this, so that the activate script will get run as necessary\n                        del env[\"CONDA_BUILD\"]\n\n                        # this should raise if any problems occur while building\n",
                      "markdown": "`                                    )\n                                )\n\n                        # clear this, so that the activate script will get run as necessary\n                        del env[\"CONDA_BUILD\"]\n\n                        # this should raise if any problems occur while building\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2531,
                  "startColumn": 68,
                  "endLine": 2531,
                  "endColumn": 73,
                  "snippet": {
                    "text": "                            + [\"-o\", \"errexit\", work_file]\n                        )\n\n                        # rewrite long paths in stdout back to their env variables\n                        if m.config.debug or m.config.no_rewrite_stdout_env:\n                            rewrite_env = None\n                        else:\n",
                    "rendered": {
                      "text": "                            + [\"-o\", \"errexit\", work_file]\n                        )\n\n                        # rewrite long paths in stdout back to their env variables\n                        if m.config.debug or m.config.no_rewrite_stdout_env:\n                            rewrite_env = None\n                        else:\n",
                      "markdown": "`                            + [\"-o\", \"errexit\", work_file]\n                        )\n\n                        # rewrite long paths in stdout back to their env variables\n                        if m.config.debug or m.config.no_rewrite_stdout_env:\n                            rewrite_env = None\n                        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2518,
                  "startColumn": 69,
                  "endLine": 2518,
                  "endColumn": 77,
                  "snippet": {
                    "text": "                if isfile(build_file) and script:\n                    raise CondaBuildException(\n                        \"Found a build.sh script and a build/script section \"\n                        \"inside meta.yaml. Either remove the build.sh script \"\n                        \"or remove the build/script section in meta.yaml.\"\n                    )\n                # There is no sense in trying to run an empty build script.\n",
                    "rendered": {
                      "text": "                if isfile(build_file) and script:\n                    raise CondaBuildException(\n                        \"Found a build.sh script and a build/script section \"\n                        \"inside meta.yaml. Either remove the build.sh script \"\n                        \"or remove the build/script section in meta.yaml.\"\n                    )\n                # There is no sense in trying to run an empty build script.\n",
                      "markdown": "`                if isfile(build_file) and script:\n                    raise CondaBuildException(\n                        \"Found a build.sh script and a build/script section \"\n                        \"inside meta.yaml. Either remove the build.sh script \"\n                        \"or remove the build/script section in meta.yaml.\"\n                    )\n                # There is no sense in trying to run an empty build script.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2517,
                  "startColumn": 41,
                  "endLine": 2517,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                build_file = join(m.path, \"build.sh\")\n                if isfile(build_file) and script:\n                    raise CondaBuildException(\n                        \"Found a build.sh script and a build/script section \"\n                        \"inside meta.yaml. Either remove the build.sh script \"\n                        \"or remove the build/script section in meta.yaml.\"\n                    )\n",
                    "rendered": {
                      "text": "                build_file = join(m.path, \"build.sh\")\n                if isfile(build_file) and script:\n                    raise CondaBuildException(\n                        \"Found a build.sh script and a build/script section \"\n                        \"inside meta.yaml. Either remove the build.sh script \"\n                        \"or remove the build/script section in meta.yaml.\"\n                    )\n",
                      "markdown": "`                build_file = join(m.path, \"build.sh\")\n                if isfile(build_file) and script:\n                    raise CondaBuildException(\n                        \"Found a build.sh script and a build/script section \"\n                        \"inside meta.yaml. Either remove the build.sh script \"\n                        \"or remove the build/script section in meta.yaml.\"\n                    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2495,
                  "startColumn": 11,
                  "endLine": 2495,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        # Use script from recipe?\n        script = utils.ensure_list(m.get_value(\"build/script\", None))\n        if script:\n            script = \"\\n\".join(script)\n\n        if isdir(src_dir):\n            build_stats = {}\n",
                    "rendered": {
                      "text": "        # Use script from recipe?\n        script = utils.ensure_list(m.get_value(\"build/script\", None))\n        if script:\n            script = \"\\n\".join(script)\n\n        if isdir(src_dir):\n            build_stats = {}\n",
                      "markdown": "`        # Use script from recipe?\n        script = utils.ensure_list(m.get_value(\"build/script\", None))\n        if script:\n            script = \"\\n\".join(script)\n\n        if isdir(src_dir):\n            build_stats = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2493,
                  "startColumn": 7,
                  "endLine": 2493,
                  "endColumn": 15,
                  "snippet": {
                    "text": "            f.write(\"\\n\")\n\n        # Use script from recipe?\n        script = utils.ensure_list(m.get_value(\"build/script\", None))\n        if script:\n            script = \"\\n\".join(script)\n\n",
                    "rendered": {
                      "text": "            f.write(\"\\n\")\n\n        # Use script from recipe?\n        script = utils.ensure_list(m.get_value(\"build/script\", None))\n        if script:\n            script = \"\\n\".join(script)\n\n",
                      "markdown": "`            f.write(\"\\n\")\n\n        # Use script from recipe?\n        script = utils.ensure_list(m.get_value(\"build/script\", None))\n        if script:\n            script = \"\\n\".join(script)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2492,
                  "startColumn": 13,
                  "endLine": 2492,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            f.write(\"\\n\".join(sorted(list(files1))))\n            f.write(\"\\n\")\n\n        # Use script from recipe?\n        script = utils.ensure_list(m.get_value(\"build/script\", None))\n        if script:\n            script = \"\\n\".join(script)\n",
                    "rendered": {
                      "text": "            f.write(\"\\n\".join(sorted(list(files1))))\n            f.write(\"\\n\")\n\n        # Use script from recipe?\n        script = utils.ensure_list(m.get_value(\"build/script\", None))\n        if script:\n            script = \"\\n\".join(script)\n",
                      "markdown": "`            f.write(\"\\n\".join(sorted(list(files1))))\n            f.write(\"\\n\")\n\n        # Use script from recipe?\n        script = utils.ensure_list(m.get_value(\"build/script\", None))\n        if script:\n            script = \"\\n\".join(script)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2398,
                  "startColumn": 59,
                  "endLine": 2398,
                  "endColumn": 65,
                  "snippet": {
                    "text": "                    specs.append(vcs_source)\n\n                    log.warning(\n                        \"Your recipe depends on %s at build time (for templates), \"\n                        \"but you have not listed it as a build dependency.  Doing \"\n                        \"so for this build.\",\n                        vcs_source,\n",
                    "rendered": {
                      "text": "                    specs.append(vcs_source)\n\n                    log.warning(\n                        \"Your recipe depends on %s at build time (for templates), \"\n                        \"but you have not listed it as a build dependency.  Doing \"\n                        \"so for this build.\",\n                        vcs_source,\n",
                      "markdown": "`                    specs.append(vcs_source)\n\n                    log.warning(\n                        \"Your recipe depends on %s at build time (for templates), \"\n                        \"but you have not listed it as a build dependency.  Doing \"\n                        \"so for this build.\",\n                        vcs_source,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2383,
                  "startColumn": 99,
                  "endLine": 2384,
                  "snippet": {
                    "text": "        if any(out.get(\"type\") == \"wheel\" for out in m.get_section(\"outputs\")):\n            specs.extend([\"pip\", \"wheel\"])\n\n        # TODO :: This is broken. It does not respect build/script for example and also if you need git\n        #         you should add it as s build dep manually.\n        vcs_source = m.uses_vcs_in_build\n        if vcs_source and vcs_source not in specs:\n            vcs_executable = \"hg\" if vcs_source == \"mercurial\" else vcs_source\n",
                    "rendered": {
                      "text": "        if any(out.get(\"type\") == \"wheel\" for out in m.get_section(\"outputs\")):\n            specs.extend([\"pip\", \"wheel\"])\n\n        # TODO :: This is broken. It does not respect build/script for example and also if you need git\n        #         you should add it as s build dep manually.\n        vcs_source = m.uses_vcs_in_build\n        if vcs_source and vcs_source not in specs:\n            vcs_executable = \"hg\" if vcs_source == \"mercurial\" else vcs_source\n",
                      "markdown": "`        if any(out.get(\"type\") == \"wheel\" for out in m.get_section(\"outputs\")):\n            specs.extend([\"pip\", \"wheel\"])\n\n        # TODO :: This is broken. It does not respect build/script for example and also if you need git\n        #         you should add it as s build dep manually.\n        vcs_source = m.uses_vcs_in_build\n        if vcs_source and vcs_source not in specs:\n            vcs_executable = \"hg\" if vcs_source == \"mercurial\" else vcs_source\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2325,
                  "startColumn": 7,
                  "endLine": 2325,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    output_metas = []\n\n    with utils.path_prepended(m.config.build_prefix):\n        env = environ.get_dict(m=m)\n    env[\"CONDA_BUILD_STATE\"] = \"BUILD\"\n\n    # this should be a no-op if source is already here\n",
                    "rendered": {
                      "text": "    output_metas = []\n\n    with utils.path_prepended(m.config.build_prefix):\n        env = environ.get_dict(m=m)\n    env[\"CONDA_BUILD_STATE\"] = \"BUILD\"\n\n    # this should be a no-op if source is already here\n",
                      "markdown": "`    output_metas = []\n\n    with utils.path_prepended(m.config.build_prefix):\n        env = environ.get_dict(m=m)\n    env[\"CONDA_BUILD_STATE\"] = \"BUILD\"\n\n    # this should be a no-op if source is already here\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2309,
                  "startColumn": 50,
                  "endLine": 2309,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    :type post: bool or None. None means run the whole build. True means run\n    post only. False means stop just before the post.\n    :type need_source_download: bool: if rendering failed to download source\n    (due to missing tools), retry here after build env is populated\n    \"\"\"\n    default_return = {}\n    if not built_packages:\n",
                    "rendered": {
                      "text": "    :type post: bool or None. None means run the whole build. True means run\n    post only. False means stop just before the post.\n    :type need_source_download: bool: if rendering failed to download source\n    (due to missing tools), retry here after build env is populated\n    \"\"\"\n    default_return = {}\n    if not built_packages:\n",
                      "markdown": "`    :type post: bool or None. None means run the whole build. True means run\n    post only. False means stop just before the post.\n    :type need_source_download: bool: if rendering failed to download source\n    (due to missing tools), retry here after build env is populated\n    \"\"\"\n    default_return = {}\n    if not built_packages:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2246,
                  "startColumn": 82,
                  "endLine": 2247,
                  "snippet": {
                    "text": "                *utils.ensure_list(m.get_value(\"test/requires\", [])),\n                *utils.ensure_list(m.get_value(\"requirements/run\", [])),\n            ]\n            # make sure test deps are available before taking time to create build env\n            environ.get_package_records(\n                m.config.test_prefix,\n                tuple(test_run_ms_deps),\n                \"test\",\n",
                    "rendered": {
                      "text": "                *utils.ensure_list(m.get_value(\"test/requires\", [])),\n                *utils.ensure_list(m.get_value(\"requirements/run\", [])),\n            ]\n            # make sure test deps are available before taking time to create build env\n            environ.get_package_records(\n                m.config.test_prefix,\n                tuple(test_run_ms_deps),\n                \"test\",\n",
                      "markdown": "`                *utils.ensure_list(m.get_value(\"test/requires\", [])),\n                *utils.ensure_list(m.get_value(\"requirements/run\", [])),\n            ]\n            # make sure test deps are available before taking time to create build env\n            environ.get_package_records(\n                m.config.test_prefix,\n                tuple(test_run_ms_deps),\n                \"test\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2246,
                  "startColumn": 61,
                  "endLine": 2246,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                *utils.ensure_list(m.get_value(\"test/requires\", [])),\n                *utils.ensure_list(m.get_value(\"requirements/run\", [])),\n            ]\n            # make sure test deps are available before taking time to create build env\n            environ.get_package_records(\n                m.config.test_prefix,\n                tuple(test_run_ms_deps),\n",
                    "rendered": {
                      "text": "                *utils.ensure_list(m.get_value(\"test/requires\", [])),\n                *utils.ensure_list(m.get_value(\"requirements/run\", [])),\n            ]\n            # make sure test deps are available before taking time to create build env\n            environ.get_package_records(\n                m.config.test_prefix,\n                tuple(test_run_ms_deps),\n",
                      "markdown": "`                *utils.ensure_list(m.get_value(\"test/requires\", [])),\n                *utils.ensure_list(m.get_value(\"requirements/run\", [])),\n            ]\n            # make sure test deps are available before taking time to create build env\n            environ.get_package_records(\n                m.config.test_prefix,\n                tuple(test_run_ms_deps),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2109,
                  "startColumn": 31,
                  "endLine": 2109,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        (cygpath_prefix, m.config.build_prefix.replace(\"\\\\\", \"\\\\\\\\\"), cygpath_suffix)\n    )\n\n    # Do not stack against base env when not cross.\n    stack = \"--stack\" if m.is_cross else \"\"\n    file_handle.write(f'conda activate {stack} \"{build_prefix_path}\"\\n')\n\n",
                    "rendered": {
                      "text": "        (cygpath_prefix, m.config.build_prefix.replace(\"\\\\\", \"\\\\\\\\\"), cygpath_suffix)\n    )\n\n    # Do not stack against base env when not cross.\n    stack = \"--stack\" if m.is_cross else \"\"\n    file_handle.write(f'conda activate {stack} \"{build_prefix_path}\"\\n')\n\n",
                      "markdown": "`        (cygpath_prefix, m.config.build_prefix.replace(\"\\\\\", \"\\\\\\\\\"), cygpath_suffix)\n    )\n\n    # Do not stack against base env when not cross.\n    stack = \"--stack\" if m.is_cross else \"\"\n    file_handle.write(f'conda activate {stack} \"{build_prefix_path}\"\\n')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2014,
                  "startColumn": 7,
                  "endLine": 2014,
                  "endColumn": 12,
                  "snippet": {
                    "text": "            _write_activation_text(dest_file, metadata)\n\n        # run the appropriate script\n        env = environ.get_dict(m=metadata).copy()\n        env[\"TOP_PKG_NAME\"] = env[\"PKG_NAME\"]\n        env[\"TOP_PKG_VERSION\"] = env[\"PKG_VERSION\"]\n        env[\"PKG_VERSION\"] = metadata.version()\n",
                    "rendered": {
                      "text": "            _write_activation_text(dest_file, metadata)\n\n        # run the appropriate script\n        env = environ.get_dict(m=metadata).copy()\n        env[\"TOP_PKG_NAME\"] = env[\"PKG_NAME\"]\n        env[\"TOP_PKG_VERSION\"] = env[\"PKG_VERSION\"]\n        env[\"PKG_VERSION\"] = metadata.version()\n",
                      "markdown": "`            _write_activation_text(dest_file, metadata)\n\n        # run the appropriate script\n        env = environ.get_dict(m=metadata).copy()\n        env[\"TOP_PKG_NAME\"] = env[\"PKG_NAME\"]\n        env[\"TOP_PKG_VERSION\"] = env[\"PKG_VERSION\"]\n        env[\"PKG_VERSION\"] = metadata.version()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 2013,
                  "startColumn": 29,
                  "endLine": 2014,
                  "snippet": {
                    "text": "        if metadata.config.activate:\n            _write_activation_text(dest_file, metadata)\n\n        # run the appropriate script\n        env = environ.get_dict(m=metadata).copy()\n        env[\"TOP_PKG_NAME\"] = env[\"PKG_NAME\"]\n        env[\"TOP_PKG_VERSION\"] = env[\"PKG_VERSION\"]\n        env[\"PKG_VERSION\"] = metadata.version()\n",
                    "rendered": {
                      "text": "        if metadata.config.activate:\n            _write_activation_text(dest_file, metadata)\n\n        # run the appropriate script\n        env = environ.get_dict(m=metadata).copy()\n        env[\"TOP_PKG_NAME\"] = env[\"PKG_NAME\"]\n        env[\"TOP_PKG_VERSION\"] = env[\"PKG_VERSION\"]\n        env[\"PKG_VERSION\"] = metadata.version()\n",
                      "markdown": "`        if metadata.config.activate:\n            _write_activation_text(dest_file, metadata)\n\n        # run the appropriate script\n        env = environ.get_dict(m=metadata).copy()\n        env[\"TOP_PKG_NAME\"] = env[\"PKG_NAME\"]\n        env[\"TOP_PKG_VERSION\"] = env[\"PKG_VERSION\"]\n        env[\"PKG_VERSION\"] = metadata.version()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1844,
                  "startColumn": 49,
                  "endLine": 1844,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                        f\"Empty package; {dep} present in build and host deps.  \"\n                        f\"You probably picked up the build environment's {dep} \"\n                        \" executable.  You need to alter your recipe to \"\n                        f\" use the {env_var_name} env var in your recipe to \"\n                        \"run that executable.\"\n                    )\n                elif dep in build_pkgs and metadata.uses_new_style_compiler_activation:\n",
                    "rendered": {
                      "text": "                        f\"Empty package; {dep} present in build and host deps.  \"\n                        f\"You probably picked up the build environment's {dep} \"\n                        \" executable.  You need to alter your recipe to \"\n                        f\" use the {env_var_name} env var in your recipe to \"\n                        \"run that executable.\"\n                    )\n                elif dep in build_pkgs and metadata.uses_new_style_compiler_activation:\n",
                      "markdown": "`                        f\"Empty package; {dep} present in build and host deps.  \"\n                        f\"You probably picked up the build environment's {dep} \"\n                        \" executable.  You need to alter your recipe to \"\n                        f\" use the {env_var_name} env var in your recipe to \"\n                        \"run that executable.\"\n                    )\n                elif dep in build_pkgs and metadata.uses_new_style_compiler_activation:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1831,
                  "startColumn": 28,
                  "endLine": 1831,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    elif not output.get(\"script\"):\n        if not metadata.always_include_files():\n            log.warning(\n                \"No files or script found for output {}\".format(output.get(\"name\"))\n            )\n            build_deps = metadata.get_value(\"requirements/build\")\n            host_deps = metadata.get_value(\"requirements/host\")\n",
                    "rendered": {
                      "text": "    elif not output.get(\"script\"):\n        if not metadata.always_include_files():\n            log.warning(\n                \"No files or script found for output {}\".format(output.get(\"name\"))\n            )\n            build_deps = metadata.get_value(\"requirements/build\")\n            host_deps = metadata.get_value(\"requirements/host\")\n",
                      "markdown": "`    elif not output.get(\"script\"):\n        if not metadata.always_include_files():\n            log.warning(\n                \"No files or script found for output {}\".format(output.get(\"name\"))\n            )\n            build_deps = metadata.get_value(\"requirements/build\")\n            host_deps = metadata.get_value(\"requirements/host\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1746,
                  "startColumn": 63,
                  "endLine": 1746,
                  "endColumn": 71,
                  "snippet": {
                    "text": "            ):\n                raise CondaBuildUserError(\n                    \"WSL bash.exe is not supported. Please use MSYS2 packages. Add \"\n                    \"`m2-base` and more (depending on what your script needs) to \"\n                    \"`requirements/build` instead.\"\n                )\n        else:\n",
                    "rendered": {
                      "text": "            ):\n                raise CondaBuildUserError(\n                    \"WSL bash.exe is not supported. Please use MSYS2 packages. Add \"\n                    \"`m2-base` and more (depending on what your script needs) to \"\n                    \"`requirements/build` instead.\"\n                )\n        else:\n",
                      "markdown": "`            ):\n                raise CondaBuildUserError(\n                    \"WSL bash.exe is not supported. Please use MSYS2 packages. Add \"\n                    \"`m2-base` and more (depending on what your script needs) to \"\n                    \"`requirements/build` instead.\"\n                )\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1737,
                  "startColumn": 21,
                  "endLine": 1737,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                    args[0],\n                )\n            if (\n                # WSL bash is always the same path, it is an alias to the default\n                # distribution as configured by the user\n                on_win\n                # check if WSL is installed before calling Path.samefile/os.stat\n",
                    "rendered": {
                      "text": "                    args[0],\n                )\n            if (\n                # WSL bash is always the same path, it is an alias to the default\n                # distribution as configured by the user\n                on_win\n                # check if WSL is installed before calling Path.samefile/os.stat\n",
                      "markdown": "`                    args[0],\n                )\n            if (\n                # WSL bash is always the same path, it is an alias to the default\n                # distribution as configured by the user\n                on_win\n                # check if WSL is installed before calling Path.samefile/os.stat\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1732,
                  "startColumn": 28,
                  "endLine": 1732,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            args[0] = external.find_executable(args[0], metadata.config.build_prefix)\n            if not args[0]:\n                log.error(\n                    \"Did not find an interpreter to run %s, looked for %s\",\n                    output[\"script\"],\n                    args[0],\n                )\n",
                    "rendered": {
                      "text": "            args[0] = external.find_executable(args[0], metadata.config.build_prefix)\n            if not args[0]:\n                log.error(\n                    \"Did not find an interpreter to run %s, looked for %s\",\n                    output[\"script\"],\n                    args[0],\n                )\n",
                      "markdown": "`            args[0] = external.find_executable(args[0], metadata.config.build_prefix)\n            if not args[0]:\n                log.error(\n                    \"Did not find an interpreter to run %s, looked for %s\",\n                    output[\"script\"],\n                    args[0],\n                )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1724,
                  "startColumn": 7,
                  "endLine": 1724,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        output[\"script\"] = script_fn\n\n    if output.get(\"script\"):\n        env = environ.get_dict(m=metadata)\n\n        interpreter = output.get(\"script_interpreter\")\n        if not interpreter:\n",
                    "rendered": {
                      "text": "        output[\"script\"] = script_fn\n\n    if output.get(\"script\"):\n        env = environ.get_dict(m=metadata)\n\n        interpreter = output.get(\"script_interpreter\")\n        if not interpreter:\n",
                      "markdown": "`        output[\"script\"] = script_fn\n\n    if output.get(\"script\"):\n        env = environ.get_dict(m=metadata)\n\n        interpreter = output.get(\"script_interpreter\")\n        if not interpreter:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1714,
                  "startColumn": 7,
                  "endLine": 1714,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    ):\n        # do add in activation, but only if it's not disabled\n        activate_script = metadata.config.activate\n        script = \"\\n\".join(script)\n        suffix = \"bat\" if utils.on_win else \"sh\"\n        script_fn = output.get(\"script\") or f\"output_script.{suffix}\"\n        with open(os.path.join(metadata.config.work_dir, script_fn), \"w\") as f:\n",
                    "rendered": {
                      "text": "    ):\n        # do add in activation, but only if it's not disabled\n        activate_script = metadata.config.activate\n        script = \"\\n\".join(script)\n        suffix = \"bat\" if utils.on_win else \"sh\"\n        script_fn = output.get(\"script\") or f\"output_script.{suffix}\"\n        with open(os.path.join(metadata.config.work_dir, script_fn), \"w\") as f:\n",
                      "markdown": "`    ):\n        # do add in activation, but only if it's not disabled\n        activate_script = metadata.config.activate\n        script = \"\\n\".join(script)\n        suffix = \"bat\" if utils.on_win else \"sh\"\n        script_fn = output.get(\"script\") or f\"output_script.{suffix}\"\n        with open(os.path.join(metadata.config.work_dir, script_fn), \"w\") as f:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1697,
                  "startColumn": 3,
                  "endLine": 1697,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        pass\n\n    # Use script from recipe?\n    script = utils.ensure_list(metadata.get_value(\"build/script\", None))\n\n    # need to treat top-level stuff specially.  build/script in top-level stuff should not be\n    #     re-run for an output with a similar name to the top-level recipe\n",
                    "rendered": {
                      "text": "        pass\n\n    # Use script from recipe?\n    script = utils.ensure_list(metadata.get_value(\"build/script\", None))\n\n    # need to treat top-level stuff specially.  build/script in top-level stuff should not be\n    #     re-run for an output with a similar name to the top-level recipe\n",
                      "markdown": "`        pass\n\n    # Use script from recipe?\n    script = utils.ensure_list(metadata.get_value(\"build/script\", None))\n\n    # need to treat top-level stuff specially.  build/script in top-level stuff should not be\n    #     re-run for an output with a similar name to the top-level recipe\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1696,
                  "startColumn": 9,
                  "endLine": 1696,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    except OSError:\n        pass\n\n    # Use script from recipe?\n    script = utils.ensure_list(metadata.get_value(\"build/script\", None))\n\n    # need to treat top-level stuff specially.  build/script in top-level stuff should not be\n",
                    "rendered": {
                      "text": "    except OSError:\n        pass\n\n    # Use script from recipe?\n    script = utils.ensure_list(metadata.get_value(\"build/script\", None))\n\n    # need to treat top-level stuff specially.  build/script in top-level stuff should not be\n",
                      "markdown": "`    except OSError:\n        pass\n\n    # Use script from recipe?\n    script = utils.ensure_list(metadata.get_value(\"build/script\", None))\n\n    # need to treat top-level stuff specially.  build/script in top-level stuff should not be\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1293,
                  "startColumn": 15,
                  "endLine": 1293,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        # for sake of reproducibility, record some conda info\n        d[\"conda_version\"] = conda_version\n        d[\"conda_build_version\"] = conda_build_version\n        # conda env will be in most, but not necessarily all installations.\n        #    Don't die if we don't see it.\n        stripped_channels = []\n        for channel in (*context.channels, *m.config.channel_urls):\n",
                    "rendered": {
                      "text": "        # for sake of reproducibility, record some conda info\n        d[\"conda_version\"] = conda_version\n        d[\"conda_build_version\"] = conda_build_version\n        # conda env will be in most, but not necessarily all installations.\n        #    Don't die if we don't see it.\n        stripped_channels = []\n        for channel in (*context.channels, *m.config.channel_urls):\n",
                      "markdown": "`        # for sake of reproducibility, record some conda info\n        d[\"conda_version\"] = conda_version\n        d[\"conda_build_version\"] = conda_build_version\n        # conda env will be in most, but not necessarily all installations.\n        #    Don't die if we don't see it.\n        stripped_channels = []\n        for channel in (*context.channels, *m.config.channel_urls):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 1116,
                  "startColumn": 16,
                  "endLine": 1116,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        map(lambda i: len(all_matches[i][\"submatches\"]), all_matches)\n    )\n    print(\n        \"INFO :: Time taken to mark (prefix){}\\n\"\n        \"        {} replacements in {} files was {:.2f} seconds\".format(\n            f\" and mark+peform ({replacement_tags})\" if replacement_tags else \"\",\n            total_replacements,\n",
                    "rendered": {
                      "text": "        map(lambda i: len(all_matches[i][\"submatches\"]), all_matches)\n    )\n    print(\n        \"INFO :: Time taken to mark (prefix){}\\n\"\n        \"        {} replacements in {} files was {:.2f} seconds\".format(\n            f\" and mark+peform ({replacement_tags})\" if replacement_tags else \"\",\n            total_replacements,\n",
                      "markdown": "`        map(lambda i: len(all_matches[i][\"submatches\"]), all_matches)\n    )\n    print(\n        \"INFO :: Time taken to mark (prefix){}\\n\"\n        \"        {} replacements in {} files was {:.2f} seconds\".format(\n            f\" and mark+peform ({replacement_tags})\" if replacement_tags else \"\",\n            total_replacements,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 999,
                  "startColumn": 10,
                  "endLine": 1000,
                  "snippet": {
                    "text": "\n\ndef get_files_with_prefix(m, replacements, files_in, prefix):\n    import time\n\n    start = time.time()\n    # It is nonsensical to replace anything in a symlink.\n    files = sorted(f for f in files_in if not os.path.islink(os.path.join(prefix, f)))\n",
                    "rendered": {
                      "text": "\n\ndef get_files_with_prefix(m, replacements, files_in, prefix):\n    import time\n\n    start = time.time()\n    # It is nonsensical to replace anything in a symlink.\n    files = sorted(f for f in files_in if not os.path.islink(os.path.join(prefix, f)))\n",
                      "markdown": "`\n\ndef get_files_with_prefix(m, replacements, files_in, prefix):\n    import time\n\n    start = time.time()\n    # It is nonsensical to replace anything in a symlink.\n    files = sorted(f for f in files_in if not os.path.islink(os.path.join(prefix, f)))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 912,
                  "startColumn": 34,
                  "endLine": 912,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                    )\n                files = glob(join(src_dir, pattern))\n                if not files:\n                    msg = \"Did not find any source_files for test with pattern {0}\"\n                    raise RuntimeError(msg.format(pattern))\n                for f in files:\n                    try:\n",
                    "rendered": {
                      "text": "                    )\n                files = glob(join(src_dir, pattern))\n                if not files:\n                    msg = \"Did not find any source_files for test with pattern {0}\"\n                    raise RuntimeError(msg.format(pattern))\n                for f in files:\n                    try:\n",
                      "markdown": "`                    )\n                files = glob(join(src_dir, pattern))\n                if not files:\n                    msg = \"Did not find any source_files for test with pattern {0}\"\n                    raise RuntimeError(msg.format(pattern))\n                for f in files:\n                    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 28,
                  "endLine": 702,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    install_script = this_output.get(\"script\")\n    build_inputs = []\n    inputs = [install_script] + build_inputs\n    file_paths = [script for script in inputs if script]\n    file_paths = utils.filter_files(file_paths, m.path)\n\n    for f in file_paths:\n",
                    "rendered": {
                      "text": "    install_script = this_output.get(\"script\")\n    build_inputs = []\n    inputs = [install_script] + build_inputs\n    file_paths = [script for script in inputs if script]\n    file_paths = utils.filter_files(file_paths, m.path)\n\n    for f in file_paths:\n",
                      "markdown": "`    install_script = this_output.get(\"script\")\n    build_inputs = []\n    inputs = [install_script] + build_inputs\n    file_paths = [script for script in inputs if script]\n    file_paths = utils.filter_files(file_paths, m.path)\n\n    for f in file_paths:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 653,
                  "startColumn": 24,
                  "endLine": 653,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if os.path.exists(filename_tmp):\n            if diff and match[\"type\"] == \"text\":\n                diffo = f\"Diff returned no difference after patching {filename_short}\"\n                # Always expect an exception.\n                try:\n                    diffo = subprocess.check_output(\n                        [diff, \"-urN\", filename, filename_tmp], stderr=subprocess.PIPE\n",
                    "rendered": {
                      "text": "        if os.path.exists(filename_tmp):\n            if diff and match[\"type\"] == \"text\":\n                diffo = f\"Diff returned no difference after patching {filename_short}\"\n                # Always expect an exception.\n                try:\n                    diffo = subprocess.check_output(\n                        [diff, \"-urN\", filename, filename_tmp], stderr=subprocess.PIPE\n",
                      "markdown": "`        if os.path.exists(filename_tmp):\n            if diff and match[\"type\"] == \"text\":\n                diffo = f\"Diff returned no difference after patching {filename_short}\"\n                # Always expect an exception.\n                try:\n                    diffo = subprocess.check_output(\n                        [diff, \"-urN\", filename, filename_tmp], stderr=subprocess.PIPE\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 651,
                  "startColumn": 14,
                  "endLine": 651,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                        file_tmp.write(data)\n        # Could assert the lengths of binaries are the same here for extra safety.\n        if os.path.exists(filename_tmp):\n            if diff and match[\"type\"] == \"text\":\n                diffo = f\"Diff returned no difference after patching {filename_short}\"\n                # Always expect an exception.\n                try:\n",
                    "rendered": {
                      "text": "                        file_tmp.write(data)\n        # Could assert the lengths of binaries are the same here for extra safety.\n        if os.path.exists(filename_tmp):\n            if diff and match[\"type\"] == \"text\":\n                diffo = f\"Diff returned no difference after patching {filename_short}\"\n                # Always expect an exception.\n                try:\n",
                      "markdown": "`                        file_tmp.write(data)\n        # Could assert the lengths of binaries are the same here for extra safety.\n        if os.path.exists(filename_tmp):\n            if diff and match[\"type\"] == \"text\":\n                diffo = f\"Diff returned no difference after patching {filename_short}\"\n                # Always expect an exception.\n                try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 62,
                  "endLine": 592,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    # Save as\n    with open(path, \"wb\") as fo:\n        fo.write(data)\n    os.chmod(path, stat.S_IMODE(st.st_mode) | stat.S_IWUSR)  # chmod u+w\n    return data\n\n\n",
                    "rendered": {
                      "text": "    # Save as\n    with open(path, \"wb\") as fo:\n        fo.write(data)\n    os.chmod(path, stat.S_IMODE(st.st_mode) | stat.S_IWUSR)  # chmod u+w\n    return data\n\n\n",
                      "markdown": "`    # Save as\n    with open(path, \"wb\") as fo:\n        fo.write(data)\n    os.chmod(path, stat.S_IMODE(st.st_mode) | stat.S_IWUSR)  # chmod u+w\n    return data\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 69,
                  "endLine": 523,
                  "endColumn": 75,
                  "snippet": {
                    "text": "                     reduce the matches. There are also some minor syntax differences between rg and re.\n                     The last group is taken as the matching portion, though I am not sure about that\n                     decision.\n    :param match_records: A dictionary of previous results should you wish to augment it\n    :return: input match_records augmented with matches\n    \"\"\"\n    if not len(files):\n",
                    "rendered": {
                      "text": "                     reduce the matches. There are also some minor syntax differences between rg and re.\n                     The last group is taken as the matching portion, though I am not sure about that\n                     decision.\n    :param match_records: A dictionary of previous results should you wish to augment it\n    :return: input match_records augmented with matches\n    \"\"\"\n    if not len(files):\n",
                      "markdown": "`                     reduce the matches. There are also some minor syntax differences between rg and re.\n                     The last group is taken as the matching portion, though I am not sure about that\n                     decision.\n    :param match_records: A dictionary of previous results should you wish to augment it\n    :return: input match_records augmented with matches\n    \"\"\"\n    if not len(files):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 45,
                  "endLine": 453,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                        submatch[\"end\"] = submatch[\"start\"] + len(match_tigher)\n                        # print(\"from {} to {} (index={})\".format(submatch['text'], match_tigher, index))\n                        submatch[\"text\"] = match_tigher\n                        # Assert we can still find submatches correctly at their start and end in the line.\n                        if \"line\" in match:\n                            assert (\n                                match[\"line\"][\n",
                    "rendered": {
                      "text": "                        submatch[\"end\"] = submatch[\"start\"] + len(match_tigher)\n                        # print(\"from {} to {} (index={})\".format(submatch['text'], match_tigher, index))\n                        submatch[\"text\"] = match_tigher\n                        # Assert we can still find submatches correctly at their start and end in the line.\n                        if \"line\" in match:\n                            assert (\n                                match[\"line\"][\n",
                      "markdown": "`                        submatch[\"end\"] = submatch[\"start\"] + len(match_tigher)\n                        # print(\"from {} to {} (index={})\".format(submatch['text'], match_tigher, index))\n                        submatch[\"text\"] = match_tigher\n                        # Assert we can still find submatches correctly at their start and end in the line.\n                        if \"line\" in match:\n                            assert (\n                                match[\"line\"][\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 39,
                  "endLine": 437,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                    else:\n                        match_tigher = str(match_re)\n                    if match_tigher != submatch[\"text\"]:\n                        # Assert we can find submatches correctly at their start and end in the line.\n                        if \"line\" in match:\n                            assert (\n                                match[\"line\"][\n",
                    "rendered": {
                      "text": "                    else:\n                        match_tigher = str(match_re)\n                    if match_tigher != submatch[\"text\"]:\n                        # Assert we can find submatches correctly at their start and end in the line.\n                        if \"line\" in match:\n                            assert (\n                                match[\"line\"][\n",
                      "markdown": "`                    else:\n                        match_tigher = str(match_re)\n                    if match_tigher != submatch[\"text\"]:\n                        # Assert we can find submatches correctly at their start and end in the line.\n                        if \"line\" in match:\n                            assert (\n                                match[\"line\"][\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 11,
                  "endLine": 135,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        \"   CPU time: Sys={cpu_sys}, User={cpu_user}\\n\"\n        \"   Memory: {memory}\\n\"\n        \"   Disk usage: {disk}\\n\"\n        \"   Time elapsed: {elapsed}\\n\"\n        \"\\n\".format(\n            descriptor=descriptor,\n            processes=stats_dict.get(\"processes\", 1),\n",
                    "rendered": {
                      "text": "        \"   CPU time: Sys={cpu_sys}, User={cpu_user}\\n\"\n        \"   Memory: {memory}\\n\"\n        \"   Disk usage: {disk}\\n\"\n        \"   Time elapsed: {elapsed}\\n\"\n        \"\\n\".format(\n            descriptor=descriptor,\n            processes=stats_dict.get(\"processes\", 1),\n",
                      "markdown": "`        \"   CPU time: Sys={cpu_sys}, User={cpu_user}\\n\"\n        \"   Memory: {memory}\\n\"\n        \"   Disk usage: {disk}\\n\"\n        \"   Time elapsed: {elapsed}\\n\"\n        \"\\n\".format(\n            descriptor=descriptor,\n            processes=stats_dict.get(\"processes\", 1),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/build.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 6,
                  "endLine": 20,
                  "snippet": {
                    "text": "import string\nimport subprocess\nimport sys\nimport time\nimport warnings\nfrom collections import OrderedDict, deque\nfrom os.path import dirname, isdir, isfile, islink, join\nfrom pathlib import Path\n",
                    "rendered": {
                      "text": "import string\nimport subprocess\nimport sys\nimport time\nimport warnings\nfrom collections import OrderedDict, deque\nfrom os.path import dirname, isdir, isfile, islink, join\nfrom pathlib import Path\n",
                      "markdown": "`import string\nimport subprocess\nimport sys\nimport time\nimport warnings\nfrom collections import OrderedDict, deque\nfrom os.path import dirname, isdir, isfile, islink, join\nfrom pathlib import Path\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/api.py"
                },
                "region": {
                  "startLine": 657,
                  "startColumn": 38,
                  "endLine": 657,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            )\n        else:\n            test_input = recipe_or_package_path_or_metadata_tuples\n        # use the package to create an env and extract the test files.  Stop short of running the tests.\n        # tell people what steps to take next\n        with log_context:\n            run_test(test_input, config=config, stats={}, provision_only=True)\n",
                    "rendered": {
                      "text": "            )\n        else:\n            test_input = recipe_or_package_path_or_metadata_tuples\n        # use the package to create an env and extract the test files.  Stop short of running the tests.\n        # tell people what steps to take next\n        with log_context:\n            run_test(test_input, config=config, stats={}, provision_only=True)\n",
                      "markdown": "`            )\n        else:\n            test_input = recipe_or_package_path_or_metadata_tuples\n        # use the package to create an env and extract the test files.  Stop short of running the tests.\n        # tell people what steps to take next\n        with log_context:\n            run_test(test_input, config=config, stats={}, provision_only=True)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/api.py"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 67,
                  "endLine": 587,
                  "endColumn": 72,
                  "snippet": {
                    "text": "            matched_outputs = outputs\n\n        target_metadata = metadata_tuples[outputs.index(matched_outputs[0])][0]\n        # make sure that none of the _placehold stuff gets added to env paths\n        target_metadata.config.prefix_length = 10\n\n    if best_link_source_method == \"symlink\":\n",
                    "rendered": {
                      "text": "            matched_outputs = outputs\n\n        target_metadata = metadata_tuples[outputs.index(matched_outputs[0])][0]\n        # make sure that none of the _placehold stuff gets added to env paths\n        target_metadata.config.prefix_length = 10\n\n    if best_link_source_method == \"symlink\":\n",
                      "markdown": "`            matched_outputs = outputs\n\n        target_metadata = metadata_tuples[outputs.index(matched_outputs[0])][0]\n        # make sure that none of the _placehold stuff gets added to env paths\n        target_metadata.config.prefix_length = 10\n\n    if best_link_source_method == \"symlink\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/api.py"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 10,
                  "endLine": 498,
                  "snippet": {
                    "text": "    your package's build or test phase.\n    \"\"\"\n    import logging\n    import time\n    from fnmatch import fnmatch\n\n    from .build import build as run_build\n    from .build import test as run_test\n",
                    "rendered": {
                      "text": "    your package's build or test phase.\n    \"\"\"\n    import logging\n    import time\n    from fnmatch import fnmatch\n\n    from .build import build as run_build\n    from .build import test as run_test\n",
                      "markdown": "`    your package's build or test phase.\n    \"\"\"\n    import logging\n    import time\n    from fnmatch import fnmatch\n\n    from .build import build as run_build\n    from .build import test as run_test\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/api.py"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 78,
                  "endLine": 301,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\n    # This is a little bit of black magic.  The idea is that for any keyword argument that\n    #    we inspect from the given module's skeletonize function, we should hoist the argument\n    #    off of the config object, and pass it as a keyword argument.  This is sort of the\n    #    inverse of what we do in the CLI code - there we take CLI arguments and dangle them\n    #    all on the config object as attributes.\n    module = getattr(\n",
                    "rendered": {
                      "text": "\n    # This is a little bit of black magic.  The idea is that for any keyword argument that\n    #    we inspect from the given module's skeletonize function, we should hoist the argument\n    #    off of the config object, and pass it as a keyword argument.  This is sort of the\n    #    inverse of what we do in the CLI code - there we take CLI arguments and dangle them\n    #    all on the config object as attributes.\n    module = getattr(\n",
                      "markdown": "`\n    # This is a little bit of black magic.  The idea is that for any keyword argument that\n    #    we inspect from the given module's skeletonize function, we should hoist the argument\n    #    off of the config object, and pass it as a keyword argument.  This is sort of the\n    #    inverse of what we do in the CLI code - there we take CLI arguments and dangle them\n    #    all on the config object as attributes.\n    module = getattr(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/_version.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 38,
                  "endLine": 3,
                  "snippet": {
                    "text": "# file generated by setuptools_scm\n# don't change, don't track in version control\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple, Union\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\n",
                    "rendered": {
                      "text": "# file generated by setuptools_scm\n# don't change, don't track in version control\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple, Union\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\n",
                      "markdown": "`# file generated by setuptools_scm\n# don't change, don't track in version control\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple, Union\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/_load_setup_py_data.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 20,
                  "endLine": 49,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            setup_file = os.path.join(work_dir, setup_file)\n    else:\n        message = (\n            \"Did not find setup.py file in manually specified location, and source \"\n            \"not downloaded yet.\"\n        )\n        if permit_undefined_jinja:\n",
                    "rendered": {
                      "text": "            setup_file = os.path.join(work_dir, setup_file)\n    else:\n        message = (\n            \"Did not find setup.py file in manually specified location, and source \"\n            \"not downloaded yet.\"\n        )\n        if permit_undefined_jinja:\n",
                      "markdown": "`            setup_file = os.path.join(work_dir, setup_file)\n    else:\n        message = (\n            \"Did not find setup.py file in manually specified location, and source \"\n            \"not downloaded yet.\"\n        )\n        if permit_undefined_jinja:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 26,
                  "endLine": 714,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        \"pin_run_as_build\",\n        \"zip_keys\",\n        \"ignore_version\",\n        *ensure_list(first.get(\"extend_keys\")),\n    }\n    to_consider = set(first)\n    if subset is not None:\n",
                    "rendered": {
                      "text": "        \"pin_run_as_build\",\n        \"zip_keys\",\n        \"ignore_version\",\n        *ensure_list(first.get(\"extend_keys\")),\n    }\n    to_consider = set(first)\n    if subset is not None:\n",
                      "markdown": "`        \"pin_run_as_build\",\n        \"zip_keys\",\n        \"ignore_version\",\n        *ensure_list(first.get(\"extend_keys\")),\n    }\n    to_consider = set(first)\n    if subset is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 43,
                  "endLine": 624,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            elif isinstance(v, list):\n                squished[k] = set(squished.get(k, set())) | set(v)\n            else:\n                squished[k] = list(squished.get(k, [])) + ensure_list(v)\n                if k not in all_zip_keys:\n                    squished[k] = list(set(squished[k]))\n    # reduce the combinatoric space of the zipped keys, too:\n",
                    "rendered": {
                      "text": "            elif isinstance(v, list):\n                squished[k] = set(squished.get(k, set())) | set(v)\n            else:\n                squished[k] = list(squished.get(k, [])) + ensure_list(v)\n                if k not in all_zip_keys:\n                    squished[k] = list(set(squished[k]))\n    # reduce the combinatoric space of the zipped keys, too:\n",
                      "markdown": "`            elif isinstance(v, list):\n                squished[k] = set(squished.get(k, set())) | set(v)\n            else:\n                squished[k] = list(squished.get(k, [])) + ensure_list(v)\n                if k not in all_zip_keys:\n                    squished[k] = list(set(squished[k]))\n    # reduce the combinatoric space of the zipped keys, too:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 42,
                  "endLine": 622,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                existing_value.update(v)\n                squished[k] = existing_value\n            elif isinstance(v, list):\n                squished[k] = set(squished.get(k, set())) | set(v)\n            else:\n                squished[k] = list(squished.get(k, [])) + ensure_list(v)\n                if k not in all_zip_keys:\n",
                    "rendered": {
                      "text": "                existing_value.update(v)\n                squished[k] = existing_value\n            elif isinstance(v, list):\n                squished[k] = set(squished.get(k, set())) | set(v)\n            else:\n                squished[k] = list(squished.get(k, [])) + ensure_list(v)\n                if k not in all_zip_keys:\n",
                      "markdown": "`                existing_value.update(v)\n                squished[k] = existing_value\n            elif isinstance(v, list):\n                squished[k] = set(squished.get(k, set())) | set(v)\n            else:\n                squished[k] = list(squished.get(k, [])) + ensure_list(v)\n                if k not in all_zip_keys:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 41,
                  "endLine": 618,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            if k == \"zip_keys\":\n                continue\n            if hasattr(v, \"keys\"):\n                existing_value = squished.get(k, OrderedDict())\n                existing_value.update(v)\n                squished[k] = existing_value\n            elif isinstance(v, list):\n",
                    "rendered": {
                      "text": "            if k == \"zip_keys\":\n                continue\n            if hasattr(v, \"keys\"):\n                existing_value = squished.get(k, OrderedDict())\n                existing_value.update(v)\n                squished[k] = existing_value\n            elif isinstance(v, list):\n",
                      "markdown": "`            if k == \"zip_keys\":\n                continue\n            if hasattr(v, \"keys\"):\n                existing_value = squished.get(k, OrderedDict())\n                existing_value.update(v)\n                squished[k] = existing_value\n            elif isinstance(v, list):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 502,
                  "startColumn": 68,
                  "endLine": 502,
                  "endColumn": 73,
                  "snippet": {
                    "text": "                log = get_logger(__name__)\n                log.debug(\n                    f\"Filtering variant with key {key} not matching target value(s) \"\n                    f\"({values}) from {source_name}, actual {variant.get(key)}\"\n                )\n    return reduced_variants\n\n",
                    "rendered": {
                      "text": "                log = get_logger(__name__)\n                log.debug(\n                    f\"Filtering variant with key {key} not matching target value(s) \"\n                    f\"({values}) from {source_name}, actual {variant.get(key)}\"\n                )\n    return reduced_variants\n\n",
                      "markdown": "`                log = get_logger(__name__)\n                log.debug(\n                    f\"Filtering variant with key {key} not matching target value(s) \"\n                    f\"({values}) from {source_name}, actual {variant.get(key)}\"\n                )\n    return reduced_variants\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 55,
                  "endLine": 496,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    else:\n        # break this out into a full loop so that we can show filtering output\n        for variant in variants:\n            if variant.get(key) is not None and variant.get(key) in values:\n                reduced_variants.append(variant)\n            else:\n                log = get_logger(__name__)\n",
                    "rendered": {
                      "text": "    else:\n        # break this out into a full loop so that we can show filtering output\n        for variant in variants:\n            if variant.get(key) is not None and variant.get(key) in values:\n                reduced_variants.append(variant)\n            else:\n                log = get_logger(__name__)\n",
                      "markdown": "`    else:\n        # break this out into a full loop so that we can show filtering output\n        for variant in variants:\n            if variant.get(key) is not None and variant.get(key) in values:\n                reduced_variants.append(variant)\n            else:\n                log = get_logger(__name__)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 22,
                  "endLine": 496,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    else:\n        # break this out into a full loop so that we can show filtering output\n        for variant in variants:\n            if variant.get(key) is not None and variant.get(key) in values:\n                reduced_variants.append(variant)\n            else:\n                log = get_logger(__name__)\n",
                    "rendered": {
                      "text": "    else:\n        # break this out into a full loop so that we can show filtering output\n        for variant in variants:\n            if variant.get(key) is not None and variant.get(key) in values:\n                reduced_variants.append(variant)\n            else:\n                log = get_logger(__name__)\n",
                      "markdown": "`    else:\n        # break this out into a full loop so that we can show filtering output\n        for variant in variants:\n            if variant.get(key) is not None and variant.get(key) in values:\n                reduced_variants.append(variant)\n            else:\n                log = get_logger(__name__)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 45,
                  "endLine": 439,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    extend_keys = {\"zip_keys\", \"extend_keys\"}\n    if include_defaults:\n        extend_keys.update(DEFAULT_VARIANTS[\"extend_keys\"])\n    return extend_keys.union(ensure_list(spec.get(\"extend_keys\")))\n\n\ndef _get_passthru_keys(spec, zip_keys=None, extend_keys=None):\n",
                    "rendered": {
                      "text": "    extend_keys = {\"zip_keys\", \"extend_keys\"}\n    if include_defaults:\n        extend_keys.update(DEFAULT_VARIANTS[\"extend_keys\"])\n    return extend_keys.union(ensure_list(spec.get(\"extend_keys\")))\n\n\ndef _get_passthru_keys(spec, zip_keys=None, extend_keys=None):\n",
                      "markdown": "`    extend_keys = {\"zip_keys\", \"extend_keys\"}\n    if include_defaults:\n        extend_keys.update(DEFAULT_VARIANTS[\"extend_keys\"])\n    return extend_keys.union(ensure_list(spec.get(\"extend_keys\")))\n\n\ndef _get_passthru_keys(spec, zip_keys=None, extend_keys=None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 19,
                  "endLine": 412,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    :rtype: set\n    :raise ValueError: 'zip_keys' cannot be standardized\n    \"\"\"\n    zip_keys = spec.get(\"zip_keys\")\n    if not zip_keys:\n        return set()\n    elif islist(zip_keys, uniform=lambda e: isinstance(e, str)):\n",
                    "rendered": {
                      "text": "    :rtype: set\n    :raise ValueError: 'zip_keys' cannot be standardized\n    \"\"\"\n    zip_keys = spec.get(\"zip_keys\")\n    if not zip_keys:\n        return set()\n    elif islist(zip_keys, uniform=lambda e: isinstance(e, str)):\n",
                      "markdown": "`    :rtype: set\n    :raise ValueError: 'zip_keys' cannot be standardized\n    \"\"\"\n    zip_keys = spec.get(\"zip_keys\")\n    if not zip_keys:\n        return set()\n    elif islist(zip_keys, uniform=lambda e: isinstance(e, str)):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 5,
                  "endLine": 377,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n    zip_keys = _combine_spec_dictionaries(\n        specs, extend_keys=extend_keys, filter_keys=[\"zip_keys\"], log_output=log_output\n    ).get(\"zip_keys\", [])\n    values = _combine_spec_dictionaries(\n        specs, extend_keys=extend_keys, zip_keys=zip_keys, log_output=log_output\n    )\n",
                    "rendered": {
                      "text": "\n    zip_keys = _combine_spec_dictionaries(\n        specs, extend_keys=extend_keys, filter_keys=[\"zip_keys\"], log_output=log_output\n    ).get(\"zip_keys\", [])\n    values = _combine_spec_dictionaries(\n        specs, extend_keys=extend_keys, zip_keys=zip_keys, log_output=log_output\n    )\n",
                      "markdown": "`\n    zip_keys = _combine_spec_dictionaries(\n        specs, extend_keys=extend_keys, filter_keys=[\"zip_keys\"], log_output=log_output\n    ).get(\"zip_keys\", [])\n    values = _combine_spec_dictionaries(\n        specs, extend_keys=extend_keys, zip_keys=zip_keys, log_output=log_output\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 39,
                  "endLine": 368,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            key\n            for spec in specs.values()\n            if spec\n            for key in ensure_list(spec.get(\"extend_keys\"))\n        ]\n    )\n\n",
                    "rendered": {
                      "text": "            key\n            for spec in specs.values()\n            if spec\n            for key in ensure_list(spec.get(\"extend_keys\"))\n        ]\n    )\n\n",
                      "markdown": "`            key\n            for spec in specs.values()\n            if spec\n            for key in ensure_list(spec.get(\"extend_keys\"))\n        ]\n    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 42,
                  "endLine": 287,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                        if not isinstance(v[0], list) and not isinstance(v[0], tuple):\n                            v = [v]\n                        # should always be a list of lists, but users may specify as just a list\n                        values[k] = values.get(k, [])\n                        values[k].extend(v)\n                        values[k] = list(\n                            list(set_group)\n",
                    "rendered": {
                      "text": "                        if not isinstance(v[0], list) and not isinstance(v[0], tuple):\n                            v = [v]\n                        # should always be a list of lists, but users may specify as just a list\n                        values[k] = values.get(k, [])\n                        values[k].extend(v)\n                        values[k] = list(\n                            list(set_group)\n",
                      "markdown": "`                        if not isinstance(v[0], list) and not isinstance(v[0], tuple):\n                            v = [v]\n                        # should always be a list of lists, but users may specify as just a list\n                        values[k] = values.get(k, [])\n                        values[k].extend(v)\n                        values[k] = list(\n                            list(set_group)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 58,
                  "endLine": 278,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                            else:\n                                values[k] = v.copy()\n                        else:\n                            values[k] = ensure_list(values.get(k, []))\n                            values[k].extend(ensure_list(v))\n                            # uniquify\n                            values[k] = list(set(values[k]))\n",
                    "rendered": {
                      "text": "                            else:\n                                values[k] = v.copy()\n                        else:\n                            values[k] = ensure_list(values.get(k, []))\n                            values[k].extend(ensure_list(v))\n                            # uniquify\n                            values[k] = list(set(values[k]))\n",
                      "markdown": "`                            else:\n                                values[k] = v.copy()\n                        else:\n                            values[k] = ensure_list(values.get(k, []))\n                            values[k].extend(ensure_list(v))\n                            # uniquify\n                            values[k] = list(set(values[k]))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 45,
                  "endLine": 233,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    if not files and not config.ignore_system_variants:\n        # user config\n        if config_file := context.conda_build.get(\"config_file\"):\n            cfg = resolve(config_file)\n        else:\n            cfg = resolve(os.path.join(\"~\", \"conda_build_config.yaml\"))\n",
                    "rendered": {
                      "text": "\n    if not files and not config.ignore_system_variants:\n        # user config\n        if config_file := context.conda_build.get(\"config_file\"):\n            cfg = resolve(config_file)\n        else:\n            cfg = resolve(os.path.join(\"~\", \"conda_build_config.yaml\"))\n",
                      "markdown": "`\n    if not files and not config.ignore_system_variants:\n        # user config\n        if config_file := context.conda_build.get(\"config_file\"):\n            cfg = resolve(config_file)\n        else:\n            cfg = resolve(os.path.join(\"~\", \"conda_build_config.yaml\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 64,
                  "endLine": 132,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    base[\"target_platform\"] = config.subdir\n    python = (\n        base[\"python\"]\n        if (not hasattr(config, \"variant\") or not config.variant.get(\"python\"))\n        else config.variant[\"python\"]\n    )\n    base.update(_get_default_compilers(config.platform, python))\n",
                    "rendered": {
                      "text": "    base[\"target_platform\"] = config.subdir\n    python = (\n        base[\"python\"]\n        if (not hasattr(config, \"variant\") or not config.variant.get(\"python\"))\n        else config.variant[\"python\"]\n    )\n    base.update(_get_default_compilers(config.platform, python))\n",
                      "markdown": "`    base[\"target_platform\"] = config.subdir\n    python = (\n        base[\"python\"]\n        if (not hasattr(config, \"variant\") or not config.variant.get(\"python\"))\n        else config.variant[\"python\"]\n    )\n    base.update(_get_default_compilers(config.platform, python))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 5,
                  "endLine": 36,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        (3, 10): \"1.22\",  # 1.21-1.26\n        (3, 11): \"1.23\",  # 1.23-1.26\n        (3, 12): \"1.26\",  # 1.26-\n    }.get(sys.version_info[:2], \"1.26\"),\n    # this one actually needs to be pretty specific.  The reason is that cpan skeleton uses the\n    #    version to say what's in their standard library.\n    \"perl\": \"5.26.2\",\n",
                    "rendered": {
                      "text": "        (3, 10): \"1.22\",  # 1.21-1.26\n        (3, 11): \"1.23\",  # 1.23-1.26\n        (3, 12): \"1.26\",  # 1.26-\n    }.get(sys.version_info[:2], \"1.26\"),\n    # this one actually needs to be pretty specific.  The reason is that cpan skeleton uses the\n    #    version to say what's in their standard library.\n    \"perl\": \"5.26.2\",\n",
                      "markdown": "`        (3, 10): \"1.22\",  # 1.21-1.26\n        (3, 11): \"1.23\",  # 1.23-1.26\n        (3, 12): \"1.26\",  # 1.26-\n    }.get(sys.version_info[:2], \"1.26\"),\n    # this one actually needs to be pretty specific.  The reason is that cpan skeleton uses the\n    #    version to say what's in their standard library.\n    \"perl\": \"5.26.2\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 25,
                  "endLine": 271,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            for k, v in spec.items():\n                if not keys or k in keys:\n                    if k in extend_keys:\n                        # update dictionaries, extend lists\n                        if hasattr(v, \"keys\"):\n                            if k in values and hasattr(values[k], \"keys\"):\n                                values[k].update(v)\n",
                    "rendered": {
                      "text": "            for k, v in spec.items():\n                if not keys or k in keys:\n                    if k in extend_keys:\n                        # update dictionaries, extend lists\n                        if hasattr(v, \"keys\"):\n                            if k in values and hasattr(values[k], \"keys\"):\n                                values[k].update(v)\n",
                      "markdown": "`            for k, v in spec.items():\n                if not keys or k in keys:\n                    if k in extend_keys:\n                        # update dictionaries, extend lists\n                        if hasattr(v, \"keys\"):\n                            if k in values and hasattr(values[k], \"keys\"):\n                                values[k].update(v)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 86,
                  "endLine": 654,
                  "endColumn": 91,
                  "snippet": {
                    "text": "    for f in files:\n        specs[f] = parse_config_file(f, config)\n\n    # this is the override of the variants from files and args with values from CLI or env vars\n    if hasattr(config, \"variant\") and config.variant:\n        specs[\"config.variant\"] = config.variant\n    if variants:\n",
                    "rendered": {
                      "text": "    for f in files:\n        specs[f] = parse_config_file(f, config)\n\n    # this is the override of the variants from files and args with values from CLI or env vars\n    if hasattr(config, \"variant\") and config.variant:\n        specs[\"config.variant\"] = config.variant\n    if variants:\n",
                      "markdown": "`    for f in files:\n        specs[f] = parse_config_file(f, config)\n\n    # this is the override of the variants from files and args with values from CLI or env vars\n    if hasattr(config, \"variant\") and config.variant:\n        specs[\"config.variant\"] = config.variant\n    if variants:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 32,
                  "endLine": 422,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    ):\n        return {frozenset(zg) for zg in zip_keys}\n\n    raise ValueError(\"'zip_keys' expect list of string or list of lists of string\")\n\n\ndef _get_extend_keys(spec, include_defaults=True):\n",
                    "rendered": {
                      "text": "    ):\n        return {frozenset(zg) for zg in zip_keys}\n\n    raise ValueError(\"'zip_keys' expect list of string or list of lists of string\")\n\n\ndef _get_extend_keys(spec, include_defaults=True):\n",
                      "markdown": "`    ):\n        return {frozenset(zg) for zg in zip_keys}\n\n    raise ValueError(\"'zip_keys' expect list of string or list of lists of string\")\n\n\ndef _get_extend_keys(spec, include_defaults=True):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 10,
                  "endLine": 399,
                  "snippet": {
                    "text": "            if env_var_name == \"PY\":\n                value = \"\".join(value.split(\".\")[:2])\n            env[\"CONDA_\" + env_var_name] = value\n    return env\n\n\ndef _get_zip_keys(spec):\n    \"\"\"\n",
                    "rendered": {
                      "text": "            if env_var_name == \"PY\":\n                value = \"\".join(value.split(\".\")[:2])\n            env[\"CONDA_\" + env_var_name] = value\n    return env\n\n\ndef _get_zip_keys(spec):\n    \"\"\"\n",
                      "markdown": "`            if env_var_name == \"PY\":\n                value = \"\".join(value.split(\".\")[:2])\n            env[\"CONDA_\" + env_var_name] = value\n    return env\n\n\ndef _get_zip_keys(spec):\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 3,
                  "endLine": 390,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    Search terms: CONDA_PY, CONDA_R, CONDA_PERL, CONDA_LUA, CONDA_NPY\n    \"\"\"\n    inverse_map = {v: k for k, v in SUFFIX_MAP.items()}\n    env = {}\n    for variant_name, env_var_name in inverse_map.items():\n        if variant_name in variant:\n            value = str(variant[variant_name])\n",
                    "rendered": {
                      "text": "    Search terms: CONDA_PY, CONDA_R, CONDA_PERL, CONDA_LUA, CONDA_NPY\n    \"\"\"\n    inverse_map = {v: k for k, v in SUFFIX_MAP.items()}\n    env = {}\n    for variant_name, env_var_name in inverse_map.items():\n        if variant_name in variant:\n            value = str(variant[variant_name])\n",
                      "markdown": "`    Search terms: CONDA_PY, CONDA_R, CONDA_PERL, CONDA_LUA, CONDA_NPY\n    \"\"\"\n    inverse_map = {v: k for k, v in SUFFIX_MAP.items()}\n    env = {}\n    for variant_name, env_var_name in inverse_map.items():\n        if variant_name in variant:\n            value = str(variant[variant_name])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 57,
                  "endLine": 385,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n\ndef set_language_env_vars(variant):\n    \"\"\"Given args passed into conda command, set language env vars to be made available.\n\n    Search terms: CONDA_PY, CONDA_R, CONDA_PERL, CONDA_LUA, CONDA_NPY\n    \"\"\"\n",
                    "rendered": {
                      "text": "\n\ndef set_language_env_vars(variant):\n    \"\"\"Given args passed into conda command, set language env vars to be made available.\n\n    Search terms: CONDA_PY, CONDA_R, CONDA_PERL, CONDA_LUA, CONDA_NPY\n    \"\"\"\n",
                      "markdown": "`\n\ndef set_language_env_vars(variant):\n    \"\"\"Given args passed into conda command, set language env vars to be made available.\n\n    Search terms: CONDA_PY, CONDA_R, CONDA_PERL, CONDA_LUA, CONDA_NPY\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 92,
                  "endLine": 346,
                  "endColumn": 98,
                  "snippet": {
                    "text": "                                    raise ValueError(\n                                        f\"variant config in {spec_source} is ambiguous because it does not fully \"\n                                        f\"implement all zipped keys (missing {missing_group_items}) or specifies a \"\n                                        f\"subspace that is not fully implemented (we did not find {missing_subvalues} \"\n                                        f\"from {spec} in {k}:{values[k]}).\"\n                                    )\n\n",
                    "rendered": {
                      "text": "                                    raise ValueError(\n                                        f\"variant config in {spec_source} is ambiguous because it does not fully \"\n                                        f\"implement all zipped keys (missing {missing_group_items}) or specifies a \"\n                                        f\"subspace that is not fully implemented (we did not find {missing_subvalues} \"\n                                        f\"from {spec} in {k}:{values[k]}).\"\n                                    )\n\n",
                      "markdown": "`                                    raise ValueError(\n                                        f\"variant config in {spec_source} is ambiguous because it does not fully \"\n                                        f\"implement all zipped keys (missing {missing_group_items}) or specifies a \"\n                                        f\"subspace that is not fully implemented (we did not find {missing_subvalues} \"\n                                        f\"from {spec} in {k}:{values[k]}).\"\n                                    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 65,
                  "endLine": 218,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    .. note::\n        Order determines clobbering with later files clobbering earlier ones.\n\n    :param metadata_or_path: the metadata or path within which to find recipe config files\n    :type metadata_or_path:\n    :param config: config object specifying config file settings\n                   (see exclusive_config_files, ignore_system_variants, and variant_config_files)\n",
                    "rendered": {
                      "text": "    .. note::\n        Order determines clobbering with later files clobbering earlier ones.\n\n    :param metadata_or_path: the metadata or path within which to find recipe config files\n    :type metadata_or_path:\n    :param config: config object specifying config file settings\n                   (see exclusive_config_files, ignore_system_variants, and variant_config_files)\n",
                      "markdown": "`    .. note::\n        Order determines clobbering with later files clobbering earlier ones.\n\n    :param metadata_or_path: the metadata or path within which to find recipe config files\n    :type metadata_or_path:\n    :param config: config object specifying config file settings\n                   (see exclusive_config_files, ignore_system_variants, and variant_config_files)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 3,
                  "endLine": 207,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\ndef find_config_files(metadata_or_path, config):\n    \"\"\"\n    Find config files to load. Config files are stacked in the following order:\n        1. exclusive config files (see config.exclusive_config_files)\n        2. user config files\n           (see context.conda_build[\"config_file\"] or ~/conda_build_config.yaml)\n",
                    "rendered": {
                      "text": "\ndef find_config_files(metadata_or_path, config):\n    \"\"\"\n    Find config files to load. Config files are stacked in the following order:\n        1. exclusive config files (see config.exclusive_config_files)\n        2. user config files\n           (see context.conda_build[\"config_file\"] or ~/conda_build_config.yaml)\n",
                      "markdown": "`\ndef find_config_files(metadata_or_path, config):\n    \"\"\"\n    Find config files to load. Config files are stacked in the following order:\n        1. exclusive config files (see config.exclusive_config_files)\n        2. user config files\n           (see context.conda_build[\"config_file\"] or ~/conda_build_config.yaml)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/variants.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 72,
                  "endLine": 37,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        (3, 11): \"1.23\",  # 1.23-1.26\n        (3, 12): \"1.26\",  # 1.26-\n    }.get(sys.version_info[:2], \"1.26\"),\n    # this one actually needs to be pretty specific.  The reason is that cpan skeleton uses the\n    #    version to say what's in their standard library.\n    \"perl\": \"5.26.2\",\n    \"lua\": \"5\",\n",
                    "rendered": {
                      "text": "        (3, 11): \"1.23\",  # 1.23-1.26\n        (3, 12): \"1.26\",  # 1.26-\n    }.get(sys.version_info[:2], \"1.26\"),\n    # this one actually needs to be pretty specific.  The reason is that cpan skeleton uses the\n    #    version to say what's in their standard library.\n    \"perl\": \"5.26.2\",\n    \"lua\": \"5\",\n",
                      "markdown": "`        (3, 11): \"1.23\",  # 1.23-1.26\n        (3, 12): \"1.26\",  # 1.26-\n    }.get(sys.version_info[:2], \"1.26\"),\n    # this one actually needs to be pretty specific.  The reason is that cpan skeleton uses the\n    #    version to say what's in their standard library.\n    \"perl\": \"5.26.2\",\n    \"lua\": \"5\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1931,
                  "startColumn": 67,
                  "endLine": 1931,
                  "endColumn": 72,
                  "snippet": {
                    "text": "                del reqs[i]\n                reqs.insert(\n                    i,\n                    ensure_valid_spec(\" \".join((x.group(1), variant.get(x.group(1))))),\n                )\n    if reqs:\n        requirements_dict[env] = reqs\n",
                    "rendered": {
                      "text": "                del reqs[i]\n                reqs.insert(\n                    i,\n                    ensure_valid_spec(\" \".join((x.group(1), variant.get(x.group(1))))),\n                )\n    if reqs:\n        requirements_dict[env] = reqs\n",
                      "markdown": "`                del reqs[i]\n                reqs.insert(\n                    i,\n                    ensure_valid_spec(\" \".join((x.group(1), variant.get(x.group(1))))),\n                )\n    if reqs:\n        requirements_dict[env] = reqs\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1910,
                  "startColumn": 40,
                  "endLine": 1910,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    build_deps = ensure_list(requirements_dict.get(\"build\")) + ensure_list(\n        requirements_dict.get(\"host\")\n    )\n    reqs = ensure_list(requirements_dict.get(env))\n    for key, val in variant.items():\n        regex = re.compile(r\"^({})(?:\\s*$)\".format(key.replace(\"_\", \"[-_]\")))\n        matches = [regex.match(pkg) for pkg in reqs]\n",
                    "rendered": {
                      "text": "    build_deps = ensure_list(requirements_dict.get(\"build\")) + ensure_list(\n        requirements_dict.get(\"host\")\n    )\n    reqs = ensure_list(requirements_dict.get(env))\n    for key, val in variant.items():\n        regex = re.compile(r\"^({})(?:\\s*$)\".format(key.replace(\"_\", \"[-_]\")))\n        matches = [regex.match(pkg) for pkg in reqs]\n",
                      "markdown": "`    build_deps = ensure_list(requirements_dict.get(\"build\")) + ensure_list(\n        requirements_dict.get(\"host\")\n    )\n    reqs = ensure_list(requirements_dict.get(env))\n    for key, val in variant.items():\n        regex = re.compile(r\"^({})(?:\\s*$)\".format(key.replace(\"_\", \"[-_]\")))\n        matches = [regex.match(pkg) for pkg in reqs]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1908,
                  "startColumn": 25,
                  "endLine": 1908,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\ndef insert_variant_versions(requirements_dict, variant, env):\n    build_deps = ensure_list(requirements_dict.get(\"build\")) + ensure_list(\n        requirements_dict.get(\"host\")\n    )\n    reqs = ensure_list(requirements_dict.get(env))\n    for key, val in variant.items():\n",
                    "rendered": {
                      "text": "\ndef insert_variant_versions(requirements_dict, variant, env):\n    build_deps = ensure_list(requirements_dict.get(\"build\")) + ensure_list(\n        requirements_dict.get(\"host\")\n    )\n    reqs = ensure_list(requirements_dict.get(env))\n    for key, val in variant.items():\n",
                      "markdown": "`\ndef insert_variant_versions(requirements_dict, variant, env):\n    build_deps = ensure_list(requirements_dict.get(\"build\")) + ensure_list(\n        requirements_dict.get(\"host\")\n    )\n    reqs = ensure_list(requirements_dict.get(env))\n    for key, val in variant.items():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1907,
                  "startColumn": 46,
                  "endLine": 1907,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n\ndef insert_variant_versions(requirements_dict, variant, env):\n    build_deps = ensure_list(requirements_dict.get(\"build\")) + ensure_list(\n        requirements_dict.get(\"host\")\n    )\n    reqs = ensure_list(requirements_dict.get(env))\n",
                    "rendered": {
                      "text": "\n\ndef insert_variant_versions(requirements_dict, variant, env):\n    build_deps = ensure_list(requirements_dict.get(\"build\")) + ensure_list(\n        requirements_dict.get(\"host\")\n    )\n    reqs = ensure_list(requirements_dict.get(env))\n",
                      "markdown": "`\n\ndef insert_variant_versions(requirements_dict, variant, env):\n    build_deps = ensure_list(requirements_dict.get(\"build\")) + ensure_list(\n        requirements_dict.get(\"host\")\n    )\n    reqs = ensure_list(requirements_dict.get(env))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1877,
                  "startColumn": 25,
                  "endLine": 1877,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        if (\n            hasattr(spec, \"version\")\n            and spec.version\n            and (not spec.get(\"build\", \"\"))\n            and spec_ver_needing_star_re.match(str(spec.version))\n        ):\n            if str(spec.name) not in (\"python\", \"numpy\") or str(spec.version) != \"x.x\":\n",
                    "rendered": {
                      "text": "        if (\n            hasattr(spec, \"version\")\n            and spec.version\n            and (not spec.get(\"build\", \"\"))\n            and spec_ver_needing_star_re.match(str(spec.version))\n        ):\n            if str(spec.name) not in (\"python\", \"numpy\") or str(spec.version) != \"x.x\":\n",
                      "markdown": "`        if (\n            hasattr(spec, \"version\")\n            and spec.version\n            and (not spec.get(\"build\", \"\"))\n            and spec_ver_needing_star_re.match(str(spec.version))\n        ):\n            if str(spec.name) not in (\"python\", \"numpy\") or str(spec.version) != \"x.x\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1746,
                  "startColumn": 37,
                  "endLine": 1746,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    \"\"\"\n    keys = set(dol1).union(dol2)\n    no = []\n    return {k: dol1.get(k, no) + dol2.get(k, no) for k in keys}\n\n\ndef prefix_files(prefix: str | os.PathLike | Path) -> set[str]:\n",
                    "rendered": {
                      "text": "    \"\"\"\n    keys = set(dol1).union(dol2)\n    no = []\n    return {k: dol1.get(k, no) + dol2.get(k, no) for k in keys}\n\n\ndef prefix_files(prefix: str | os.PathLike | Path) -> set[str]:\n",
                      "markdown": "`    \"\"\"\n    keys = set(dol1).union(dol2)\n    no = []\n    return {k: dol1.get(k, no) + dol2.get(k, no) for k in keys}\n\n\ndef prefix_files(prefix: str | os.PathLike | Path) -> set[str]:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1746,
                  "startColumn": 19,
                  "endLine": 1746,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    \"\"\"\n    keys = set(dol1).union(dol2)\n    no = []\n    return {k: dol1.get(k, no) + dol2.get(k, no) for k in keys}\n\n\ndef prefix_files(prefix: str | os.PathLike | Path) -> set[str]:\n",
                    "rendered": {
                      "text": "    \"\"\"\n    keys = set(dol1).union(dol2)\n    no = []\n    return {k: dol1.get(k, no) + dol2.get(k, no) for k in keys}\n\n\ndef prefix_files(prefix: str | os.PathLike | Path) -> set[str]:\n",
                      "markdown": "`    \"\"\"\n    keys = set(dol1).union(dol2)\n    no = []\n    return {k: dol1.get(k, no) + dol2.get(k, no) for k in keys}\n\n\ndef prefix_files(prefix: str | os.PathLike | Path) -> set[str]:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1701,
                  "startColumn": 29,
                  "endLine": 1701,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    log = get_logger(__name__)\n    for key, value in new.items():\n        if key in base or add_missing_keys:\n            base_value = base.get(key, value)\n            if hasattr(value, \"keys\"):\n                base_value = merge_or_update_dict(\n                    base_value, value, path, merge, raise_on_clobber=raise_on_clobber\n",
                    "rendered": {
                      "text": "    log = get_logger(__name__)\n    for key, value in new.items():\n        if key in base or add_missing_keys:\n            base_value = base.get(key, value)\n            if hasattr(value, \"keys\"):\n                base_value = merge_or_update_dict(\n                    base_value, value, path, merge, raise_on_clobber=raise_on_clobber\n",
                      "markdown": "`    log = get_logger(__name__)\n    for key, value in new.items():\n        if key in base or add_missing_keys:\n            base_value = base.get(key, value)\n            if hasattr(value, \"keys\"):\n                base_value = merge_or_update_dict(\n                    base_value, value, path, merge, raise_on_clobber=raise_on_clobber\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1654,
                  "startColumn": 60,
                  "endLine": 1654,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        with open(config_file) as f:\n            config_dict = yaml.safe_load(f)\n        logging.config.dictConfig(config_dict)\n        level = config_dict.get(\"loggers\", {}).get(name, {}).get(\"level\", level)\n    log = logging.getLogger(name)\n    if log.level != level:\n        log.setLevel(level)\n",
                    "rendered": {
                      "text": "        with open(config_file) as f:\n            config_dict = yaml.safe_load(f)\n        logging.config.dictConfig(config_dict)\n        level = config_dict.get(\"loggers\", {}).get(name, {}).get(\"level\", level)\n    log = logging.getLogger(name)\n    if log.level != level:\n        log.setLevel(level)\n",
                      "markdown": "`        with open(config_file) as f:\n            config_dict = yaml.safe_load(f)\n        logging.config.dictConfig(config_dict)\n        level = config_dict.get(\"loggers\", {}).get(name, {}).get(\"level\", level)\n    log = logging.getLogger(name)\n    if log.level != level:\n        log.setLevel(level)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1654,
                  "startColumn": 46,
                  "endLine": 1654,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        with open(config_file) as f:\n            config_dict = yaml.safe_load(f)\n        logging.config.dictConfig(config_dict)\n        level = config_dict.get(\"loggers\", {}).get(name, {}).get(\"level\", level)\n    log = logging.getLogger(name)\n    if log.level != level:\n        log.setLevel(level)\n",
                    "rendered": {
                      "text": "        with open(config_file) as f:\n            config_dict = yaml.safe_load(f)\n        logging.config.dictConfig(config_dict)\n        level = config_dict.get(\"loggers\", {}).get(name, {}).get(\"level\", level)\n    log = logging.getLogger(name)\n    if log.level != level:\n        log.setLevel(level)\n",
                      "markdown": "`        with open(config_file) as f:\n            config_dict = yaml.safe_load(f)\n        logging.config.dictConfig(config_dict)\n        level = config_dict.get(\"loggers\", {}).get(name, {}).get(\"level\", level)\n    log = logging.getLogger(name)\n    if log.level != level:\n        log.setLevel(level)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1654,
                  "startColumn": 27,
                  "endLine": 1654,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        with open(config_file) as f:\n            config_dict = yaml.safe_load(f)\n        logging.config.dictConfig(config_dict)\n        level = config_dict.get(\"loggers\", {}).get(name, {}).get(\"level\", level)\n    log = logging.getLogger(name)\n    if log.level != level:\n        log.setLevel(level)\n",
                    "rendered": {
                      "text": "        with open(config_file) as f:\n            config_dict = yaml.safe_load(f)\n        logging.config.dictConfig(config_dict)\n        level = config_dict.get(\"loggers\", {}).get(name, {}).get(\"level\", level)\n    log = logging.getLogger(name)\n    if log.level != level:\n        log.setLevel(level)\n",
                      "markdown": "`        with open(config_file) as f:\n            config_dict = yaml.safe_load(f)\n        logging.config.dictConfig(config_dict)\n        level = config_dict.get(\"loggers\", {}).get(name, {}).get(\"level\", level)\n    log = logging.getLogger(name)\n    if log.level != level:\n        log.setLevel(level)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1646,
                  "startColumn": 45,
                  "endLine": 1646,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\ndef get_logger(name, level=logging.INFO, dedupe=True, add_stdout_stderr_handlers=True):\n    config_file = None\n    if log_config_file := context.conda_build.get(\"log_config_file\"):\n        config_file = abspath(expanduser(expandvars(log_config_file)))\n    # by loading config file here, and then only adding handlers later, people\n    # should be able to override conda-build's logger settings here.\n",
                    "rendered": {
                      "text": "\ndef get_logger(name, level=logging.INFO, dedupe=True, add_stdout_stderr_handlers=True):\n    config_file = None\n    if log_config_file := context.conda_build.get(\"log_config_file\"):\n        config_file = abspath(expanduser(expandvars(log_config_file)))\n    # by loading config file here, and then only adding handlers later, people\n    # should be able to override conda-build's logger settings here.\n",
                      "markdown": "`\ndef get_logger(name, level=logging.INFO, dedupe=True, add_stdout_stderr_handlers=True):\n    config_file = None\n    if log_config_file := context.conda_build.get(\"log_config_file\"):\n        config_file = abspath(expanduser(expandvars(log_config_file)))\n    # by loading config file here, and then only adding handlers later, people\n    # should be able to override conda-build's logger settings here.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1433,
                  "startColumn": 30,
                  "endLine": 1433,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    # NOTE: will likely want to call reset_context() when using this function, so pass\n    #       it as callback\n    name, value = str(name), str(value)\n    saved_env_var = os.environ.get(name)\n    try:\n        os.environ[name] = value\n        if callback:\n",
                    "rendered": {
                      "text": "    # NOTE: will likely want to call reset_context() when using this function, so pass\n    #       it as callback\n    name, value = str(name), str(value)\n    saved_env_var = os.environ.get(name)\n    try:\n        os.environ[name] = value\n        if callback:\n",
                      "markdown": "`    # NOTE: will likely want to call reset_context() when using this function, so pass\n    #       it as callback\n    name, value = str(name), str(value)\n    saved_env_var = os.environ.get(name)\n    try:\n        os.environ[name] = value\n        if callback:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 18,
                  "endLine": 365,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            arg = arg.decode(codec)\n        _args.append(str(arg))\n\n    stats = kwargs.get(\"stats\")\n    if \"stats\" in kwargs:\n        del kwargs[\"stats\"]\n\n",
                    "rendered": {
                      "text": "            arg = arg.decode(codec)\n        _args.append(str(arg))\n\n    stats = kwargs.get(\"stats\")\n    if \"stats\" in kwargs:\n        del kwargs[\"stats\"]\n\n",
                      "markdown": "`            arg = arg.decode(codec)\n        _args.append(str(arg))\n\n    stats = kwargs.get(\"stats\")\n    if \"stats\" in kwargs:\n        del kwargs[\"stats\"]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 47,
                  "endLine": 294,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                processes = 0\n                # We use the parent process to get mem usage of all spawned processes\n                for child in parent.children(recursive=True):\n                    child_cpu_usage = cpu_usage.get(child.pid, {})\n                    try:\n                        mem = child.memory_info()\n                        rss += mem.rss\n",
                    "rendered": {
                      "text": "                processes = 0\n                # We use the parent process to get mem usage of all spawned processes\n                for child in parent.children(recursive=True):\n                    child_cpu_usage = cpu_usage.get(child.pid, {})\n                    try:\n                        mem = child.memory_info()\n                        rss += mem.rss\n",
                      "markdown": "`                processes = 0\n                # We use the parent process to get mem usage of all spawned processes\n                for child in parent.children(recursive=True):\n                    child_cpu_usage = cpu_usage.get(child.pid, {})\n                    try:\n                        mem = child.memory_info()\n                        rss += mem.rss\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 31,
                  "endLine": 269,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        # The polling interval (in seconds)\n        time_int = kwargs.pop(\"time_int\", 2)\n\n        disk_usage_dir = kwargs.get(\"cwd\", sys.prefix)\n\n        # Create a process of this (the parent) process\n        parent = psutil.Process(os.getpid()) if psutil else DummyPsutilProcess()\n",
                    "rendered": {
                      "text": "        # The polling interval (in seconds)\n        time_int = kwargs.pop(\"time_int\", 2)\n\n        disk_usage_dir = kwargs.get(\"cwd\", sys.prefix)\n\n        # Create a process of this (the parent) process\n        parent = psutil.Process(os.getpid()) if psutil else DummyPsutilProcess()\n",
                      "markdown": "`        # The polling interval (in seconds)\n        time_int = kwargs.pop(\"time_int\", 2)\n\n        disk_usage_dir = kwargs.get(\"cwd\", sys.prefix)\n\n        # Create a process of this (the parent) process\n        parent = psutil.Process(os.getpid()) if psutil else DummyPsutilProcess()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1433,
                  "startColumn": 10,
                  "endLine": 1433,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    # NOTE: will likely want to call reset_context() when using this function, so pass\n    #       it as callback\n    name, value = str(name), str(value)\n    saved_env_var = os.environ.get(name)\n    try:\n        os.environ[name] = value\n        if callback:\n",
                    "rendered": {
                      "text": "    # NOTE: will likely want to call reset_context() when using this function, so pass\n    #       it as callback\n    name, value = str(name), str(value)\n    saved_env_var = os.environ.get(name)\n    try:\n        os.environ[name] = value\n        if callback:\n",
                      "markdown": "`    # NOTE: will likely want to call reset_context() when using this function, so pass\n    #       it as callback\n    name, value = str(name), str(value)\n    saved_env_var = os.environ.get(name)\n    try:\n        os.environ[name] = value\n        if callback:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 19,
                  "endLine": 795,
                  "endColumn": 27,
                  "snippet": {
                    "text": "uncompress (or gunzip) is required to unarchive .z source files.\n\"\"\"\n            )\n        check_call_env([uncompress, \"-f\", tarball])\n        tarball = tarball[:-2]\n\n    t = tarfile.open(tarball, mode)\n",
                    "rendered": {
                      "text": "uncompress (or gunzip) is required to unarchive .z source files.\n\"\"\"\n            )\n        check_call_env([uncompress, \"-f\", tarball])\n        tarball = tarball[:-2]\n\n    t = tarfile.open(tarball, mode)\n",
                      "markdown": "`uncompress (or gunzip) is required to unarchive .z source files.\n\"\"\"\n            )\n        check_call_env([uncompress, \"-f\", tarball])\n        tarball = tarball[:-2]\n\n    t = tarfile.open(tarball, mode)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 21,
                  "endLine": 348,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        )\n\n\ndef _func_defaulting_env_to_os_environ(func, *popenargs, **kwargs):\n    if \"env\" not in kwargs:\n        kwargs = kwargs.copy()\n        env_copy = os.environ.copy()\n",
                    "rendered": {
                      "text": "        )\n\n\ndef _func_defaulting_env_to_os_environ(func, *popenargs, **kwargs):\n    if \"env\" not in kwargs:\n        kwargs = kwargs.copy()\n        env_copy = os.environ.copy()\n",
                      "markdown": "`        )\n\n\ndef _func_defaulting_env_to_os_environ(func, *popenargs, **kwargs):\n    if \"env\" not in kwargs:\n        kwargs = kwargs.copy()\n        env_copy = os.environ.copy()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1978,
                  "startColumn": 15,
                  "endLine": 1978,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    if islink(filename) and not isfile(filename):\n        # symlink to nowhere so an empty file\n        # this is the sha256 hash of an empty file\n        return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n    if not isfile(filename):\n        return None\n    sha256 = hashlib.sha256()\n",
                    "rendered": {
                      "text": "    if islink(filename) and not isfile(filename):\n        # symlink to nowhere so an empty file\n        # this is the sha256 hash of an empty file\n        return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n    if not isfile(filename):\n        return None\n    sha256 = hashlib.sha256()\n",
                      "markdown": "`    if islink(filename) and not isfile(filename):\n        # symlink to nowhere so an empty file\n        # this is the sha256 hash of an empty file\n        return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n    if not isfile(filename):\n        return None\n    sha256 = hashlib.sha256()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1856,
                  "startColumn": 50,
                  "endLine": 1856,
                  "endColumn": 58,
                  "snippet": {
                    "text": "#        to specify when not to add .*\n\n# if you are seeing mysterious unsatisfiable errors, with the package you're building being the\n#    unsatisfiable part, then you probably need to update this regex.\n\nspec_needing_star_re = re.compile(\n    r\"([\\w\\d\\.\\-\\_]+)\\s+((?<![><=])[\\w\\d\\.\\-\\_]+?(?!\\*))(\\s+[\\w\\d\\.\\_]+)?$\"\n",
                    "rendered": {
                      "text": "#        to specify when not to add .*\n\n# if you are seeing mysterious unsatisfiable errors, with the package you're building being the\n#    unsatisfiable part, then you probably need to update this regex.\n\nspec_needing_star_re = re.compile(\n    r\"([\\w\\d\\.\\-\\_]+)\\s+((?<![><=])[\\w\\d\\.\\-\\_]+?(?!\\*))(\\s+[\\w\\d\\.\\_]+)?$\"\n",
                      "markdown": "`#        to specify when not to add .*\n\n# if you are seeing mysterious unsatisfiable errors, with the package you're building being the\n#    unsatisfiable part, then you probably need to update this regex.\n\nspec_needing_star_re = re.compile(\n    r\"([\\w\\d\\.\\-\\_]+)\\s+((?<![><=])[\\w\\d\\.\\-\\_]+?(?!\\*))(\\s+[\\w\\d\\.\\_]+)?$\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1783,
                  "startColumn": 39,
                  "endLine": 1783,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    Windows has `tagname`.\n    Unix does not, but makes up for it with `flags` and `prot`.\n    On both, the default value for `access` is determined from how the file\n    was opened so must not be passed in at all to get this default behaviour.\n    \"\"\"\n    if on_win:\n        if access:\n",
                    "rendered": {
                      "text": "    Windows has `tagname`.\n    Unix does not, but makes up for it with `flags` and `prot`.\n    On both, the default value for `access` is determined from how the file\n    was opened so must not be passed in at all to get this default behaviour.\n    \"\"\"\n    if on_win:\n        if access:\n",
                      "markdown": "`    Windows has `tagname`.\n    Unix does not, but makes up for it with `flags` and `prot`.\n    On both, the default value for `access` is determined from how the file\n    was opened so must not be passed in at all to get this default behaviour.\n    \"\"\"\n    if on_win:\n        if access:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1639,
                  "startColumn": 31,
                  "endLine": 1639,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\ndef reset_deduplicator():\n    \"\"\"Most of the time, we want the deduplication.  There are some cases (tests especially)\n    where we want to be able to control the duplication.\"\"\"\n    global dedupe_filter\n    dedupe_filter = DuplicateFilter()\n\n",
                    "rendered": {
                      "text": "\ndef reset_deduplicator():\n    \"\"\"Most of the time, we want the deduplication.  There are some cases (tests especially)\n    where we want to be able to control the duplication.\"\"\"\n    global dedupe_filter\n    dedupe_filter = DuplicateFilter()\n\n",
                      "markdown": "`\ndef reset_deduplicator():\n    \"\"\"Most of the time, we want the deduplication.  There are some cases (tests especially)\n    where we want to be able to control the duplication.\"\"\"\n    global dedupe_filter\n    dedupe_filter = DuplicateFilter()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 957,
                  "startColumn": 7,
                  "endLine": 957,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    from .os_utils.external import find_executable\n\n    if find_executable(\"cygpath\"):\n        cmd = f\"cygpath -u {path}\"\n        path = subprocess.getoutput(cmd)\n\n    else:\n",
                    "rendered": {
                      "text": "    from .os_utils.external import find_executable\n\n    if find_executable(\"cygpath\"):\n        cmd = f\"cygpath -u {path}\"\n        path = subprocess.getoutput(cmd)\n\n    else:\n",
                      "markdown": "`    from .os_utils.external import find_executable\n\n    if find_executable(\"cygpath\"):\n        cmd = f\"cygpath -u {path}\"\n        path = subprocess.getoutput(cmd)\n\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 945,
                  "startColumn": 7,
                  "endLine": 945,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    from .os_utils.external import find_executable\n\n    if find_executable(\"cygpath\"):\n        cmd = f\"cygpath -w {path}\"\n        path = subprocess.getoutput(cmd)\n\n    else:\n",
                    "rendered": {
                      "text": "    from .os_utils.external import find_executable\n\n    if find_executable(\"cygpath\"):\n        cmd = f\"cygpath -w {path}\"\n        path = subprocess.getoutput(cmd)\n\n    else:\n",
                      "markdown": "`    from .os_utils.external import find_executable\n\n    if find_executable(\"cygpath\"):\n        cmd = f\"cygpath -w {path}\"\n        path = subprocess.getoutput(cmd)\n\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 706,
                  "startColumn": 4,
                  "endLine": 706,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\n# purpose here is that we want *one* lock per location on disk.  It can be locked or unlocked\n#    at any time, but the lock within this process should all be tied to the same tracking\n#    mechanism.\n_lock_folders = (\n    os.path.join(context.root_prefix, \"locks\"),\n",
                    "rendered": {
                      "text": "\n\n# purpose here is that we want *one* lock per location on disk.  It can be locked or unlocked\n#    at any time, but the lock within this process should all be tied to the same tracking\n#    mechanism.\n_lock_folders = (\n    os.path.join(context.root_prefix, \"locks\"),\n",
                      "markdown": "`\n\n# purpose here is that we want *one* lock per location on disk.  It can be locked or unlocked\n#    at any time, but the lock within this process should all be tied to the same tracking\n#    mechanism.\n_lock_folders = (\n    os.path.join(context.root_prefix, \"locks\"),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 502,
                  "startColumn": 74,
                  "endLine": 503,
                  "snippet": {
                    "text": "            break\n    else:\n        # If we reach this point, we weren't able to acquire all locks within\n        # the specified timeout. We shouldn't be holding any locks anymore at\n        # this point, so we just raise an exception.\n        raise BuildLockError(\"Failed to acquire all locks\")\n\n    try:\n",
                    "rendered": {
                      "text": "            break\n    else:\n        # If we reach this point, we weren't able to acquire all locks within\n        # the specified timeout. We shouldn't be holding any locks anymore at\n        # this point, so we just raise an exception.\n        raise BuildLockError(\"Failed to acquire all locks\")\n\n    try:\n",
                      "markdown": "`            break\n    else:\n        # If we reach this point, we weren't able to acquire all locks within\n        # the specified timeout. We shouldn't be holding any locks anymore at\n        # this point, so we just raise an exception.\n        raise BuildLockError(\"Failed to acquire all locks\")\n\n    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 44,
                  "endLine": 466,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        recipe_dir = abspath(os.path.join(os.getcwd(), recipe))\n        need_cleanup = False\n    if not os.path.exists(recipe_dir):\n        raise ValueError(f\"Package or recipe at path {recipe_dir} does not exist\")\n    return recipe_dir, need_cleanup\n\n\n",
                    "rendered": {
                      "text": "        recipe_dir = abspath(os.path.join(os.getcwd(), recipe))\n        need_cleanup = False\n    if not os.path.exists(recipe_dir):\n        raise ValueError(f\"Package or recipe at path {recipe_dir} does not exist\")\n    return recipe_dir, need_cleanup\n\n\n",
                      "markdown": "`        recipe_dir = abspath(os.path.join(os.getcwd(), recipe))\n        need_cleanup = False\n    if not os.path.exists(recipe_dir):\n        raise ValueError(f\"Package or recipe at path {recipe_dir} does not exist\")\n    return recipe_dir, need_cleanup\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 13,
                  "endLine": 454,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                conda_package_handling.api.extract(recipe, recipe_dir)\n            else:\n                tar_xf(recipe, recipe_dir)\n            # At some stage the old build system started to tar up recipes.\n            recipe_tarfile = os.path.join(recipe_dir, \"info\", \"recipe.tar\")\n            if isfile(recipe_tarfile):\n                tar_xf(recipe_tarfile, os.path.join(recipe_dir, \"info\"))\n",
                    "rendered": {
                      "text": "                conda_package_handling.api.extract(recipe, recipe_dir)\n            else:\n                tar_xf(recipe, recipe_dir)\n            # At some stage the old build system started to tar up recipes.\n            recipe_tarfile = os.path.join(recipe_dir, \"info\", \"recipe.tar\")\n            if isfile(recipe_tarfile):\n                tar_xf(recipe_tarfile, os.path.join(recipe_dir, \"info\"))\n",
                      "markdown": "`                conda_package_handling.api.extract(recipe, recipe_dir)\n            else:\n                tar_xf(recipe, recipe_dir)\n            # At some stage the old build system started to tar up recipes.\n            recipe_tarfile = os.path.join(recipe_dir, \"info\", \"recipe.tar\")\n            if isfile(recipe_tarfile):\n                tar_xf(recipe_tarfile, os.path.join(recipe_dir, \"info\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 2118,
                  "startColumn": 18,
                  "endLine": 2119,
                  "snippet": {
                    "text": "                f\"Failed to rename {debug_name} directory, check with strace, struss or procmon. \"\n                \"Will sleep for 3 seconds and try again!\"\n            )\n            import time\n\n            time.sleep(3)\n        elif attempts_left != -1:\n            log.error(\n",
                    "rendered": {
                      "text": "                f\"Failed to rename {debug_name} directory, check with strace, struss or procmon. \"\n                \"Will sleep for 3 seconds and try again!\"\n            )\n            import time\n\n            time.sleep(3)\n        elif attempts_left != -1:\n            log.error(\n",
                      "markdown": "`                f\"Failed to rename {debug_name} directory, check with strace, struss or procmon. \"\n                \"Will sleep for 3 seconds and try again!\"\n            )\n            import time\n\n            time.sleep(3)\n        elif attempts_left != -1:\n            log.error(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1839,
                  "startColumn": 57,
                  "endLine": 1840,
                  "snippet": {
                    "text": "                    section.sort()\n\n        # there's a possibility for nested lists containing dictionaries\n        # in this case we recurse until we find a list to sort\n        elif isinstance(value, list):\n            for element in value:\n                if isinstance(element, dict):\n                    sort_list_in_nested_structure(element)\n",
                    "rendered": {
                      "text": "                    section.sort()\n\n        # there's a possibility for nested lists containing dictionaries\n        # in this case we recurse until we find a list to sort\n        elif isinstance(value, list):\n            for element in value:\n                if isinstance(element, dict):\n                    sort_list_in_nested_structure(element)\n",
                      "markdown": "`                    section.sort()\n\n        # there's a possibility for nested lists containing dictionaries\n        # in this case we recurse until we find a list to sort\n        elif isinstance(value, list):\n            for element in value:\n                if isinstance(element, dict):\n                    sort_list_in_nested_structure(element)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1839,
                  "startColumn": 42,
                  "endLine": 1839,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                    section.sort()\n\n        # there's a possibility for nested lists containing dictionaries\n        # in this case we recurse until we find a list to sort\n        elif isinstance(value, list):\n            for element in value:\n                if isinstance(element, dict):\n",
                    "rendered": {
                      "text": "                    section.sort()\n\n        # there's a possibility for nested lists containing dictionaries\n        # in this case we recurse until we find a list to sort\n        elif isinstance(value, list):\n            for element in value:\n                if isinstance(element, dict):\n",
                      "markdown": "`                    section.sort()\n\n        # there's a possibility for nested lists containing dictionaries\n        # in this case we recurse until we find a list to sort\n        elif isinstance(value, list):\n            for element in value:\n                if isinstance(element, dict):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1819,
                  "startColumn": 46,
                  "endLine": 1819,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n\ndef sort_list_in_nested_structure(dictionary, omissions=\"\"):\n    \"\"\"Recurse through a nested dictionary and sort any lists that are found.\n\n    If the list that is found contains anything but strings, it is skipped\n    as we can't compare lists containing different types. The omissions argument\n",
                    "rendered": {
                      "text": "\n\ndef sort_list_in_nested_structure(dictionary, omissions=\"\"):\n    \"\"\"Recurse through a nested dictionary and sort any lists that are found.\n\n    If the list that is found contains anything but strings, it is skipped\n    as we can't compare lists containing different types. The omissions argument\n",
                      "markdown": "`\n\ndef sort_list_in_nested_structure(dictionary, omissions=\"\"):\n    \"\"\"Recurse through a nested dictionary and sort any lists that are found.\n\n    If the list that is found contains anything but strings, it is skipped\n    as we can't compare lists containing different types. The omissions argument\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1802,
                  "startColumn": 13,
                  "endLine": 1802,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\ndef remove_pycache_from_scripts(build_prefix):\n    \"\"\"Remove pip created pycache directory from bin or Scripts.\"\"\"\n    if on_win:\n        scripts_path = os.path.join(build_prefix, \"Scripts\")\n    else:\n",
                    "rendered": {
                      "text": "\n\ndef remove_pycache_from_scripts(build_prefix):\n    \"\"\"Remove pip created pycache directory from bin or Scripts.\"\"\"\n    if on_win:\n        scripts_path = os.path.join(build_prefix, \"Scripts\")\n    else:\n",
                      "markdown": "`\n\ndef remove_pycache_from_scripts(build_prefix):\n    \"\"\"Remove pip created pycache directory from bin or Scripts.\"\"\"\n    if on_win:\n        scripts_path = os.path.join(build_prefix, \"Scripts\")\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1294,
                  "startColumn": 50,
                  "endLine": 1294,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n    If we have a base level meta file and other supplemental (nested) ones, use the base level.\n    \"\"\"\n    # if initial path is absolute then any path we find (via rec_glob)\n    # will also be absolute\n    if not os.path.isabs(path):\n        path = os.path.normpath(os.path.join(os.getcwd(), path))\n",
                    "rendered": {
                      "text": "\n    If we have a base level meta file and other supplemental (nested) ones, use the base level.\n    \"\"\"\n    # if initial path is absolute then any path we find (via rec_glob)\n    # will also be absolute\n    if not os.path.isabs(path):\n        path = os.path.normpath(os.path.join(os.getcwd(), path))\n",
                      "markdown": "`\n    If we have a base level meta file and other supplemental (nested) ones, use the base level.\n    \"\"\"\n    # if initial path is absolute then any path we find (via rec_glob)\n    # will also be absolute\n    if not os.path.isabs(path):\n        path = os.path.normpath(os.path.join(os.getcwd(), path))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 10,
                  "endLine": 1012,
                  "snippet": {
                    "text": "        prepend_prefix = True  # windows has Python in the prefix.  Use it.\n    if prepend_prefix:\n        env[\"PATH\"] = prefix + os.pathsep + env[\"PATH\"]\n    return env\n\n\n# not currently used.  Leaving in because it may be useful for when we do things\n#   like load setup.py data, and we need the modules from some prefix other than\n",
                    "rendered": {
                      "text": "        prepend_prefix = True  # windows has Python in the prefix.  Use it.\n    if prepend_prefix:\n        env[\"PATH\"] = prefix + os.pathsep + env[\"PATH\"]\n    return env\n\n\n# not currently used.  Leaving in because it may be useful for when we do things\n#   like load setup.py data, and we need the modules from some prefix other than\n",
                      "markdown": "`        prepend_prefix = True  # windows has Python in the prefix.  Use it.\n    if prepend_prefix:\n        env[\"PATH\"] = prefix + os.pathsep + env[\"PATH\"]\n    return env\n\n\n# not currently used.  Leaving in because it may be useful for when we do things\n#   like load setup.py data, and we need the modules from some prefix other than\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 482,
                  "startColumn": 28,
                  "endLine": 482,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    t = time.time()\n    while time.time() - t < timeout:\n        # Continuously try to acquire all locks.\n        # By passing a short timeout to each individual lock, we give other\n        # processes that might be trying to acquire the same locks (and may\n        # already hold some of them) a chance to the remaining locks - and\n        # hopefully subsequently release them.\n",
                    "rendered": {
                      "text": "    t = time.time()\n    while time.time() - t < timeout:\n        # Continuously try to acquire all locks.\n        # By passing a short timeout to each individual lock, we give other\n        # processes that might be trying to acquire the same locks (and may\n        # already hold some of them) a chance to the remaining locks - and\n        # hopefully subsequently release them.\n",
                      "markdown": "`    t = time.time()\n    while time.time() - t < timeout:\n        # Continuously try to acquire all locks.\n        # By passing a short timeout to each individual lock, we give other\n        # processes that might be trying to acquire the same locks (and may\n        # already hold some of them) a chance to the remaining locks - and\n        # hopefully subsequently release them.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 475,
                  "startColumn": 10,
                  "endLine": 475,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    \"\"\"Try to acquire all locks.\n\n    If any lock can't be immediately acquired, free all locks.\n    If the timeout is reached withou acquiring all locks, free all locks and raise.\n\n    http://stackoverflow.com/questions/9814008/multiple-mutex-locking-strategies-and-why-libraries-dont-use-address-comparison\n    \"\"\"\n",
                    "rendered": {
                      "text": "    \"\"\"Try to acquire all locks.\n\n    If any lock can't be immediately acquired, free all locks.\n    If the timeout is reached withou acquiring all locks, free all locks and raise.\n\n    http://stackoverflow.com/questions/9814008/multiple-mutex-locking-strategies-and-why-libraries-dont-use-address-comparison\n    \"\"\"\n",
                      "markdown": "`    \"\"\"Try to acquire all locks.\n\n    If any lock can't be immediately acquired, free all locks.\n    If the timeout is reached withou acquiring all locks, free all locks and raise.\n\n    http://stackoverflow.com/questions/9814008/multiple-mutex-locking-strategies-and-why-libraries-dont-use-address-comparison\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 59,
                  "endLine": 454,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                conda_package_handling.api.extract(recipe, recipe_dir)\n            else:\n                tar_xf(recipe, recipe_dir)\n            # At some stage the old build system started to tar up recipes.\n            recipe_tarfile = os.path.join(recipe_dir, \"info\", \"recipe.tar\")\n            if isfile(recipe_tarfile):\n                tar_xf(recipe_tarfile, os.path.join(recipe_dir, \"info\"))\n",
                    "rendered": {
                      "text": "                conda_package_handling.api.extract(recipe, recipe_dir)\n            else:\n                tar_xf(recipe, recipe_dir)\n            # At some stage the old build system started to tar up recipes.\n            recipe_tarfile = os.path.join(recipe_dir, \"info\", \"recipe.tar\")\n            if isfile(recipe_tarfile):\n                tar_xf(recipe_tarfile, os.path.join(recipe_dir, \"info\"))\n",
                      "markdown": "`                conda_package_handling.api.extract(recipe, recipe_dir)\n            else:\n                tar_xf(recipe, recipe_dir)\n            # At some stage the old build system started to tar up recipes.\n            recipe_tarfile = os.path.join(recipe_dir, \"info\", \"recipe.tar\")\n            if isfile(recipe_tarfile):\n                tar_xf(recipe_tarfile, os.path.join(recipe_dir, \"info\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 24,
                  "endLine": 263,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            log.warning(f\"psutil import failed.  Error was {e}\")\n            log.warning(\n                \"only disk usage and time statistics will be available.  Install psutil to \"\n                \"get CPU time and memory usage statistics.\"\n            )\n\n        # The polling interval (in seconds)\n",
                    "rendered": {
                      "text": "            log.warning(f\"psutil import failed.  Error was {e}\")\n            log.warning(\n                \"only disk usage and time statistics will be available.  Install psutil to \"\n                \"get CPU time and memory usage statistics.\"\n            )\n\n        # The polling interval (in seconds)\n",
                      "markdown": "`            log.warning(f\"psutil import failed.  Error was {e}\")\n            log.warning(\n                \"only disk usage and time statistics will be available.  Install psutil to \"\n                \"get CPU time and memory usage statistics.\"\n            )\n\n        # The polling interval (in seconds)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 36,
                  "endLine": 262,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            log = get_logger(__name__)\n            log.warning(f\"psutil import failed.  Error was {e}\")\n            log.warning(\n                \"only disk usage and time statistics will be available.  Install psutil to \"\n                \"get CPU time and memory usage statistics.\"\n            )\n\n",
                    "rendered": {
                      "text": "            log = get_logger(__name__)\n            log.warning(f\"psutil import failed.  Error was {e}\")\n            log.warning(\n                \"only disk usage and time statistics will be available.  Install psutil to \"\n                \"get CPU time and memory usage statistics.\"\n            )\n\n",
                      "markdown": "`            log = get_logger(__name__)\n            log.warning(f\"psutil import failed.  Error was {e}\")\n            log.warning(\n                \"only disk usage and time statistics will be available.  Install psutil to \"\n                \"get CPU time and memory usage statistics.\"\n            )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 25,
                  "endLine": 193,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n    Returns an FD to be passed to Popen(stdout=...)\n    \"\"\"\n    # replacements is the env dict reversed,\n    # ordered by the length of the value so that longer replacements\n    # always occur first in case of common prefixes\n    replacements = OrderedDict()\n",
                    "rendered": {
                      "text": "\n    Returns an FD to be passed to Popen(stdout=...)\n    \"\"\"\n    # replacements is the env dict reversed,\n    # ordered by the length of the value so that longer replacements\n    # always occur first in case of common prefixes\n    replacements = OrderedDict()\n",
                      "markdown": "`\n    Returns an FD to be passed to Popen(stdout=...)\n    \"\"\"\n    # replacements is the env dict reversed,\n    # ordered by the length of the value so that longer replacements\n    # always occur first in case of common prefixes\n    replacements = OrderedDict()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 26,
                  "endLine": 187,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    \"\"\"Rewrite values of env variables back to $ENV in stdout\n\n    Takes output on the pipe and finds any env value\n    and rewrites it as the env key\n\n    Useful for replacing \"~/conda/conda-bld/pkg_<date>/_h_place...\" with \"$PREFIX\"\n\n",
                    "rendered": {
                      "text": "    \"\"\"Rewrite values of env variables back to $ENV in stdout\n\n    Takes output on the pipe and finds any env value\n    and rewrites it as the env key\n\n    Useful for replacing \"~/conda/conda-bld/pkg_<date>/_h_place...\" with \"$PREFIX\"\n\n",
                      "markdown": "`    \"\"\"Rewrite values of env variables back to $ENV in stdout\n\n    Takes output on the pipe and finds any env value\n    and rewrites it as the env key\n\n    Useful for replacing \"~/conda/conda-bld/pkg_<date>/_h_place...\" with \"$PREFIX\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 42,
                  "endLine": 186,
                  "endColumn": 47,
                  "snippet": {
                    "text": "def _setup_rewrite_pipe(env):\n    \"\"\"Rewrite values of env variables back to $ENV in stdout\n\n    Takes output on the pipe and finds any env value\n    and rewrites it as the env key\n\n    Useful for replacing \"~/conda/conda-bld/pkg_<date>/_h_place...\" with \"$PREFIX\"\n",
                    "rendered": {
                      "text": "def _setup_rewrite_pipe(env):\n    \"\"\"Rewrite values of env variables back to $ENV in stdout\n\n    Takes output on the pipe and finds any env value\n    and rewrites it as the env key\n\n    Useful for replacing \"~/conda/conda-bld/pkg_<date>/_h_place...\" with \"$PREFIX\"\n",
                      "markdown": "`def _setup_rewrite_pipe(env):\n    \"\"\"Rewrite values of env variables back to $ENV in stdout\n\n    Takes output on the pipe and finds any env value\n    and rewrites it as the env key\n\n    Useful for replacing \"~/conda/conda-bld/pkg_<date>/_h_place...\" with \"$PREFIX\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 24,
                  "endLine": 184,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n\ndef _setup_rewrite_pipe(env):\n    \"\"\"Rewrite values of env variables back to $ENV in stdout\n\n    Takes output on the pipe and finds any env value\n    and rewrites it as the env key\n",
                    "rendered": {
                      "text": "\n\ndef _setup_rewrite_pipe(env):\n    \"\"\"Rewrite values of env variables back to $ENV in stdout\n\n    Takes output on the pipe and finds any env value\n    and rewrites it as the env key\n",
                      "markdown": "`\n\ndef _setup_rewrite_pipe(env):\n    \"\"\"Rewrite values of env variables back to $ENV in stdout\n\n    Takes output on the pipe and finds any env value\n    and rewrites it as the env key\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/utils.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 6,
                  "endLine": 21,
                  "snippet": {
                    "text": "import sys\nimport tarfile\nimport tempfile\nimport time\nimport urllib.parse as urlparse\nimport urllib.request as urllib\nfrom collections import OrderedDict, defaultdict\nfrom functools import lru_cache\n",
                    "rendered": {
                      "text": "import sys\nimport tarfile\nimport tempfile\nimport time\nimport urllib.parse as urlparse\nimport urllib.request as urllib\nfrom collections import OrderedDict, defaultdict\nfrom functools import lru_cache\n",
                      "markdown": "`import sys\nimport tarfile\nimport tempfile\nimport time\nimport urllib.parse as urlparse\nimport urllib.request as urllib\nfrom collections import OrderedDict, defaultdict\nfrom functools import lru_cache\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/setuptools.yaml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 17,
                  "endLine": 44,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    {% for req in data.get('tests_require', []) -%}\n    - {{req}}\n    {% endfor %}\n  imports: {{data.get('packages')}}\n{%- endblock -%}\n{%- endblock %}\n\n",
                    "rendered": {
                      "text": "    {% for req in data.get('tests_require', []) -%}\n    - {{req}}\n    {% endfor %}\n  imports: {{data.get('packages')}}\n{%- endblock -%}\n{%- endblock %}\n\n",
                      "markdown": "`    {% for req in data.get('tests_require', []) -%}\n    - {{req}}\n    {% endfor %}\n  imports: {{data.get('packages')}}\n{%- endblock -%}\n{%- endblock %}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/setuptools.yaml"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 22,
                  "endLine": 41,
                  "endColumn": 27,
                  "snippet": {
                    "text": "{% block test -%}\ntest:\n  requires:\n    {% for req in data.get('tests_require', []) -%}\n    - {{req}}\n    {% endfor %}\n  imports: {{data.get('packages')}}\n",
                    "rendered": {
                      "text": "{% block test -%}\ntest:\n  requires:\n    {% for req in data.get('tests_require', []) -%}\n    - {{req}}\n    {% endfor %}\n  imports: {{data.get('packages')}}\n",
                      "markdown": "`{% block test -%}\ntest:\n  requires:\n    {% for req in data.get('tests_require', []) -%}\n    - {{req}}\n    {% endfor %}\n  imports: {{data.get('packages')}}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/setuptools.yaml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "endLine": 36,
                  "endColumn": 22,
                  "snippet": {
                    "text": "{% block about -%}\nabout:\n  home: {{data.get('url')}}\n  license: {{data.get('license')}}\n{%- endblock %}\n{% block test -%}\ntest:\n",
                    "rendered": {
                      "text": "{% block about -%}\nabout:\n  home: {{data.get('url')}}\n  license: {{data.get('license')}}\n{%- endblock %}\n{% block test -%}\ntest:\n",
                      "markdown": "`{% block about -%}\nabout:\n  home: {{data.get('url')}}\n  license: {{data.get('license')}}\n{%- endblock %}\n{% block test -%}\ntest:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/setuptools.yaml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 14,
                  "endLine": 35,
                  "endColumn": 19,
                  "snippet": {
                    "text": "{%- endblock %}\n{% block about -%}\nabout:\n  home: {{data.get('url')}}\n  license: {{data.get('license')}}\n{%- endblock %}\n{% block test -%}\n",
                    "rendered": {
                      "text": "{%- endblock %}\n{% block about -%}\nabout:\n  home: {{data.get('url')}}\n  license: {{data.get('license')}}\n{%- endblock %}\n{% block test -%}\n",
                      "markdown": "`{%- endblock %}\n{% block about -%}\nabout:\n  home: {{data.get('url')}}\n  license: {{data.get('license')}}\n{%- endblock %}\n{% block test -%}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/setuptools.yaml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 22,
                  "endLine": 28,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    - setuptools\n  run:\n    - python\n    {% for req in data.get('install_requires', []) -%}\n    - {{req}}\n    {% endfor %}\n\n",
                    "rendered": {
                      "text": "    - setuptools\n  run:\n    - python\n    {% for req in data.get('install_requires', []) -%}\n    - {{req}}\n    {% endfor %}\n\n",
                      "markdown": "`    - setuptools\n  run:\n    - python\n    {% for req in data.get('install_requires', []) -%}\n    - {{req}}\n    {% endfor %}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/setuptools.yaml"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 46,
                  "endLine": 16,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    - pip install --no-deps .\n\n  {% block entry_points -%}\n  entry_points: {{data.get('entry_points', {}).get('console_scripts', [])}}\n  {%- endblock %}\n\n{%- endblock %}\n",
                    "rendered": {
                      "text": "    - pip install --no-deps .\n\n  {% block entry_points -%}\n  entry_points: {{data.get('entry_points', {}).get('console_scripts', [])}}\n  {%- endblock %}\n\n{%- endblock %}\n",
                      "markdown": "`    - pip install --no-deps .\n\n  {% block entry_points -%}\n  entry_points: {{data.get('entry_points', {}).get('console_scripts', [])}}\n  {%- endblock %}\n\n{%- endblock %}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/setuptools.yaml"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 22,
                  "endLine": 16,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    - pip install --no-deps .\n\n  {% block entry_points -%}\n  entry_points: {{data.get('entry_points', {}).get('console_scripts', [])}}\n  {%- endblock %}\n\n{%- endblock %}\n",
                    "rendered": {
                      "text": "    - pip install --no-deps .\n\n  {% block entry_points -%}\n  entry_points: {{data.get('entry_points', {}).get('console_scripts', [])}}\n  {%- endblock %}\n\n{%- endblock %}\n",
                      "markdown": "`    - pip install --no-deps .\n\n  {% block entry_points -%}\n  entry_points: {{data.get('entry_points', {}).get('console_scripts', [])}}\n  {%- endblock %}\n\n{%- endblock %}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/setuptools.yaml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 17,
                  "endLine": 6,
                  "endColumn": 22,
                  "snippet": {
                    "text": "{% block package -%}\npackage:\n  name: {{data.get('name').lower().replace(' ', '_')}}\n  version: {{data.get('version')}}\n{%- endblock %}\n{% block build -%}\nbuild:\n",
                    "rendered": {
                      "text": "{% block package -%}\npackage:\n  name: {{data.get('name').lower().replace(' ', '_')}}\n  version: {{data.get('version')}}\n{%- endblock %}\n{% block build -%}\nbuild:\n",
                      "markdown": "`{% block package -%}\npackage:\n  name: {{data.get('name').lower().replace(' ', '_')}}\n  version: {{data.get('version')}}\n{%- endblock %}\n{% block build -%}\nbuild:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/setuptools.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 14,
                  "endLine": 5,
                  "endColumn": 19,
                  "snippet": {
                    "text": "{% block body -%}\n{% block package -%}\npackage:\n  name: {{data.get('name').lower().replace(' ', '_')}}\n  version: {{data.get('version')}}\n{%- endblock %}\n{% block build -%}\n",
                    "rendered": {
                      "text": "{% block body -%}\n{% block package -%}\npackage:\n  name: {{data.get('name').lower().replace(' ', '_')}}\n  version: {{data.get('version')}}\n{%- endblock %}\n{% block build -%}\n",
                      "markdown": "`{% block body -%}\n{% block package -%}\npackage:\n  name: {{data.get('name').lower().replace(' ', '_')}}\n  version: {{data.get('version')}}\n{%- endblock %}\n{% block build -%}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/setuptools.yaml"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 5,
                  "endLine": 13,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  number: {% block build_number -%}1{%- endblock %}\n  script:\n    - cd $RECIPE_DIR\n    - pip install --no-deps .\n\n  {% block entry_points -%}\n  entry_points: {{data.get('entry_points', {}).get('console_scripts', [])}}\n",
                    "rendered": {
                      "text": "  number: {% block build_number -%}1{%- endblock %}\n  script:\n    - cd $RECIPE_DIR\n    - pip install --no-deps .\n\n  {% block entry_points -%}\n  entry_points: {{data.get('entry_points', {}).get('console_scripts', [])}}\n",
                      "markdown": "`  number: {% block build_number -%}1{%- endblock %}\n  script:\n    - cd $RECIPE_DIR\n    - pip install --no-deps .\n\n  {% block entry_points -%}\n  entry_points: {{data.get('entry_points', {}).get('console_scripts', [])}}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/npm.yaml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 17,
                  "endLine": 28,
                  "endColumn": 22,
                  "snippet": {
                    "text": "{% block about -%}\nabout:\n  home: {{data.get('url')}}\n  license: {{data.get('license')}}\n{%- endblock %}\n{%- endblock %}\n\n",
                    "rendered": {
                      "text": "{% block about -%}\nabout:\n  home: {{data.get('url')}}\n  license: {{data.get('license')}}\n{%- endblock %}\n{%- endblock %}\n\n",
                      "markdown": "`{% block about -%}\nabout:\n  home: {{data.get('url')}}\n  license: {{data.get('license')}}\n{%- endblock %}\n{%- endblock %}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/npm.yaml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 14,
                  "endLine": 27,
                  "endColumn": 19,
                  "snippet": {
                    "text": "{%- endblock %}\n{% block about -%}\nabout:\n  home: {{data.get('url')}}\n  license: {{data.get('license')}}\n{%- endblock %}\n{%- endblock %}\n",
                    "rendered": {
                      "text": "{%- endblock %}\n{% block about -%}\nabout:\n  home: {{data.get('url')}}\n  license: {{data.get('license')}}\n{%- endblock %}\n{%- endblock %}\n",
                      "markdown": "`{%- endblock %}\n{% block about -%}\nabout:\n  home: {{data.get('url')}}\n  license: {{data.get('license')}}\n{%- endblock %}\n{%- endblock %}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/npm.yaml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 22,
                  "snippet": {
                    "text": "{% block package -%}\npackage:\n  name: {{data.get('name').lower()}}\n  version: {{data.get('version')}}\n{%- endblock %}\n{% block build -%}\nbuild:\n",
                    "rendered": {
                      "text": "{% block package -%}\npackage:\n  name: {{data.get('name').lower()}}\n  version: {{data.get('version')}}\n{%- endblock %}\n{% block build -%}\nbuild:\n",
                      "markdown": "`{% block package -%}\npackage:\n  name: {{data.get('name').lower()}}\n  version: {{data.get('version')}}\n{%- endblock %}\n{% block build -%}\nbuild:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/templates/npm.yaml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 14,
                  "endLine": 6,
                  "endColumn": 19,
                  "snippet": {
                    "text": "{% block body -%}\n{% block package -%}\npackage:\n  name: {{data.get('name').lower()}}\n  version: {{data.get('version')}}\n{%- endblock %}\n{% block build -%}\n",
                    "rendered": {
                      "text": "{% block body -%}\n{% block package -%}\npackage:\n  name: {{data.get('name').lower()}}\n  version: {{data.get('version')}}\n{%- endblock %}\n{% block build -%}\n",
                      "markdown": "`{% block body -%}\n{% block package -%}\npackage:\n  name: {{data.get('name').lower()}}\n  version: {{data.get('version')}}\n{%- endblock %}\n{% block build -%}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/tarcheck.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 33,
                  "endLine": 16,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    elif fn.endswith(\".tar.bz2\"):\n        return fn[:-8]\n    else:\n        raise Exception(f\"did not expect filename: {fn!r}\")\n\n\nclass TarCheck:\n",
                    "rendered": {
                      "text": "    elif fn.endswith(\".tar.bz2\"):\n        return fn[:-8]\n    else:\n        raise Exception(f\"did not expect filename: {fn!r}\")\n\n\nclass TarCheck:\n",
                      "markdown": "`    elif fn.endswith(\".tar.bz2\"):\n        return fn[:-8]\n    else:\n        raise Exception(f\"did not expect filename: {fn!r}\")\n\n\nclass TarCheck:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 37,
                  "endLine": 584,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                \"--username\",\n                source_dict.get(\"svn_username\"),\n                \"--password\",\n                source_dict.get(\"svn_password\"),\n            ]\n        )\n    if isdir(cache_repo):\n",
                    "rendered": {
                      "text": "                \"--username\",\n                source_dict.get(\"svn_username\"),\n                \"--password\",\n                source_dict.get(\"svn_password\"),\n            ]\n        )\n    if isdir(cache_repo):\n",
                      "markdown": "`                \"--username\",\n                source_dict.get(\"svn_username\"),\n                \"--password\",\n                source_dict.get(\"svn_password\"),\n            ]\n        )\n    if isdir(cache_repo):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 583,
                  "startColumn": 19,
                  "endLine": 583,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                \"--no-auth-cache\",\n                \"--username\",\n                source_dict.get(\"svn_username\"),\n                \"--password\",\n                source_dict.get(\"svn_password\"),\n            ]\n        )\n",
                    "rendered": {
                      "text": "                \"--no-auth-cache\",\n                \"--username\",\n                source_dict.get(\"svn_username\"),\n                \"--password\",\n                source_dict.get(\"svn_password\"),\n            ]\n        )\n",
                      "markdown": "`                \"--no-auth-cache\",\n                \"--username\",\n                source_dict.get(\"svn_username\"),\n                \"--password\",\n                source_dict.get(\"svn_password\"),\n            ]\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 46,
                  "endLine": 576,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    extra_args = []\n    if svn_ignore_externals:\n        extra_args.append(\"--ignore-externals\")\n    if \"svn_username\" in source_dict and \"svn_password\" in source_dict:\n        extra_args.extend(\n            [\n                \"--non-interactive\",\n",
                    "rendered": {
                      "text": "    extra_args = []\n    if svn_ignore_externals:\n        extra_args.append(\"--ignore-externals\")\n    if \"svn_username\" in source_dict and \"svn_password\" in source_dict:\n        extra_args.extend(\n            [\n                \"--non-interactive\",\n",
                      "markdown": "`    extra_args = []\n    if svn_ignore_externals:\n        extra_args.append(\"--ignore-externals\")\n    if \"svn_username\" in source_dict and \"svn_password\" in source_dict:\n        extra_args.extend(\n            [\n                \"--non-interactive\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 1110,
                  "startColumn": 45,
                  "endLine": 1110,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                if not isdir(src_dir):\n                    os.makedirs(src_dir)\n\n            patches = ensure_list(source_dict.get(\"patches\", []))\n            patch_attributes_output = []\n            for patch in patches:\n                patch_attributes_output += [\n",
                    "rendered": {
                      "text": "                if not isdir(src_dir):\n                    os.makedirs(src_dir)\n\n            patches = ensure_list(source_dict.get(\"patches\", []))\n            patch_attributes_output = []\n            for patch in patches:\n                patch_attributes_output += [\n",
                      "markdown": "`                if not isdir(src_dir):\n                    os.makedirs(src_dir)\n\n            patches = ensure_list(source_dict.get(\"patches\", []))\n            patch_attributes_output = []\n            for patch in patches:\n                patch_attributes_output += [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 1032,
                  "startColumn": 32,
                  "endLine": 1032,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    try:\n        for source_dict in metadata.get_section(\"source\"):\n            folder = source_dict.get(\"folder\")\n            src_dir = os.path.join(metadata.config.work_dir, folder if folder else \"\")\n            if any(k in source_dict for k in (\"fn\", \"url\")):\n                unpack(\n",
                    "rendered": {
                      "text": "\n    try:\n        for source_dict in metadata.get_section(\"source\"):\n            folder = source_dict.get(\"folder\")\n            src_dir = os.path.join(metadata.config.work_dir, folder if folder else \"\")\n            if any(k in source_dict for k in (\"fn\", \"url\")):\n                unpack(\n",
                      "markdown": "`\n    try:\n        for source_dict in metadata.get_section(\"source\"):\n            folder = source_dict.get(\"folder\")\n            src_dir = os.path.join(metadata.config.work_dir, folder if folder else \"\")\n            if any(k in source_dict for k in (\"fn\", \"url\")):\n                unpack(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 27,
                  "endLine": 584,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                \"--username\",\n                source_dict.get(\"svn_username\"),\n                \"--password\",\n                source_dict.get(\"svn_password\"),\n            ]\n        )\n    if isdir(cache_repo):\n",
                    "rendered": {
                      "text": "                \"--username\",\n                source_dict.get(\"svn_username\"),\n                \"--password\",\n                source_dict.get(\"svn_password\"),\n            ]\n        )\n    if isdir(cache_repo):\n",
                      "markdown": "`                \"--username\",\n                source_dict.get(\"svn_username\"),\n                \"--password\",\n                source_dict.get(\"svn_password\"),\n            ]\n        )\n    if isdir(cache_repo):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 27,
                  "endLine": 582,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                \"--non-interactive\",\n                \"--no-auth-cache\",\n                \"--username\",\n                source_dict.get(\"svn_username\"),\n                \"--password\",\n                source_dict.get(\"svn_password\"),\n            ]\n",
                    "rendered": {
                      "text": "                \"--non-interactive\",\n                \"--no-auth-cache\",\n                \"--username\",\n                source_dict.get(\"svn_username\"),\n                \"--password\",\n                source_dict.get(\"svn_password\"),\n            ]\n",
                      "markdown": "`                \"--non-interactive\",\n                \"--no-auth-cache\",\n                \"--username\",\n                source_dict.get(\"svn_username\"),\n                \"--password\",\n                source_dict.get(\"svn_password\"),\n            ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 49,
                  "endLine": 568,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n    svn_url = source_dict[\"svn_url\"]\n    svn_revision = source_dict.get(\"svn_rev\") or \"head\"\n    svn_ignore_externals = parse_bool(source_dict.get(\"svn_ignore_externals\") or \"no\")\n    if not isdir(svn_cache):\n        os.makedirs(svn_cache)\n    svn_dn = svn_url.split(\":\", 1)[-1].replace(\"/\", \"_\").replace(\":\", \"_\")\n",
                    "rendered": {
                      "text": "\n    svn_url = source_dict[\"svn_url\"]\n    svn_revision = source_dict.get(\"svn_rev\") or \"head\"\n    svn_ignore_externals = parse_bool(source_dict.get(\"svn_ignore_externals\") or \"no\")\n    if not isdir(svn_cache):\n        os.makedirs(svn_cache)\n    svn_dn = svn_url.split(\":\", 1)[-1].replace(\"/\", \"_\").replace(\":\", \"_\")\n",
                      "markdown": "`\n    svn_url = source_dict[\"svn_url\"]\n    svn_revision = source_dict.get(\"svn_rev\") or \"head\"\n    svn_ignore_externals = parse_bool(source_dict.get(\"svn_ignore_externals\") or \"no\")\n    if not isdir(svn_cache):\n        os.makedirs(svn_cache)\n    svn_dn = svn_url.split(\":\", 1)[-1].replace(\"/\", \"_\").replace(\":\", \"_\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 30,
                  "endLine": 567,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        return str(s).lower().strip() in (\"yes\", \"true\", \"1\", \"on\")\n\n    svn_url = source_dict[\"svn_url\"]\n    svn_revision = source_dict.get(\"svn_rev\") or \"head\"\n    svn_ignore_externals = parse_bool(source_dict.get(\"svn_ignore_externals\") or \"no\")\n    if not isdir(svn_cache):\n        os.makedirs(svn_cache)\n",
                    "rendered": {
                      "text": "        return str(s).lower().strip() in (\"yes\", \"true\", \"1\", \"on\")\n\n    svn_url = source_dict[\"svn_url\"]\n    svn_revision = source_dict.get(\"svn_rev\") or \"head\"\n    svn_ignore_externals = parse_bool(source_dict.get(\"svn_ignore_externals\") or \"no\")\n    if not isdir(svn_cache):\n        os.makedirs(svn_cache)\n",
                      "markdown": "`        return str(s).lower().strip() in (\"yes\", \"true\", \"1\", \"on\")\n\n    svn_url = source_dict[\"svn_url\"]\n    svn_revision = source_dict.get(\"svn_rev\") or \"head\"\n    svn_ignore_externals = parse_bool(source_dict.get(\"svn_ignore_externals\") or \"no\")\n    if not isdir(svn_cache):\n        os.makedirs(svn_cache)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 24,
                  "endLine": 536,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        assert isdir(cache_repo)\n\n    # now clone in to work directory\n    update = source_dict.get(\"hg_tag\") or \"tip\"\n    if verbose:\n        print(f\"checkout: {update!r}\")\n\n",
                    "rendered": {
                      "text": "        assert isdir(cache_repo)\n\n    # now clone in to work directory\n    update = source_dict.get(\"hg_tag\") or \"tip\"\n    if verbose:\n        print(f\"checkout: {update!r}\")\n\n",
                      "markdown": "`        assert isdir(cache_repo)\n\n    # now clone in to work directory\n    update = source_dict.get(\"hg_tag\") or \"tip\"\n    if verbose:\n        print(f\"checkout: {update!r}\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 25,
                  "endLine": 430,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        )\n\n    git_depth = int(source_dict.get(\"git_depth\", -1))\n    git_ref = source_dict.get(\"git_rev\") or \"HEAD\"\n\n    git_url = source_dict[\"git_url\"]\n    if git_url.startswith(\"~\"):\n",
                    "rendered": {
                      "text": "        )\n\n    git_depth = int(source_dict.get(\"git_depth\", -1))\n    git_ref = source_dict.get(\"git_rev\") or \"HEAD\"\n\n    git_url = source_dict[\"git_url\"]\n    if git_url.startswith(\"~\"):\n",
                      "markdown": "`        )\n\n    git_depth = int(source_dict.get(\"git_depth\", -1))\n    git_ref = source_dict.get(\"git_rev\") or \"HEAD\"\n\n    git_url = source_dict[\"git_url\"]\n    if git_url.startswith(\"~\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 31,
                  "endLine": 429,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            \"Error: git is not installed in your root environment or as a build requirement.\"\n        )\n\n    git_depth = int(source_dict.get(\"git_depth\", -1))\n    git_ref = source_dict.get(\"git_rev\") or \"HEAD\"\n\n    git_url = source_dict[\"git_url\"]\n",
                    "rendered": {
                      "text": "            \"Error: git is not installed in your root environment or as a build requirement.\"\n        )\n\n    git_depth = int(source_dict.get(\"git_depth\", -1))\n    git_ref = source_dict.get(\"git_rev\") or \"HEAD\"\n\n    git_url = source_dict[\"git_url\"]\n",
                      "markdown": "`            \"Error: git is not installed in your root environment or as a build requirement.\"\n        )\n\n    git_depth = int(source_dict.get(\"git_depth\", -1))\n    git_ref = source_dict.get(\"git_rev\") or \"HEAD\"\n\n    git_url = source_dict[\"git_url\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 1091,
                  "startColumn": 73,
                  "endLine": 1091,
                  "endColumn": 77,
                  "snippet": {
                    "text": "                    if not isdir(src_dir_symlink):\n                        os.makedirs(src_dir_symlink)\n                    if metadata.config.verbose:\n                        print(f\"Creating sybmolic link pointing to {path} at {src_dir}\")\n                    os.symlink(path, src_dir)\n                else:\n                    if metadata.config.verbose:\n",
                    "rendered": {
                      "text": "                    if not isdir(src_dir_symlink):\n                        os.makedirs(src_dir_symlink)\n                    if metadata.config.verbose:\n                        print(f\"Creating sybmolic link pointing to {path} at {src_dir}\")\n                    os.symlink(path, src_dir)\n                else:\n                    if metadata.config.verbose:\n",
                      "markdown": "`                    if not isdir(src_dir_symlink):\n                        os.makedirs(src_dir_symlink)\n                    if metadata.config.verbose:\n                        print(f\"Creating sybmolic link pointing to {path} at {src_dir}\")\n                    os.symlink(path, src_dir)\n                else:\n                    if metadata.config.verbose:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 921,
                  "startColumn": 82,
                  "endLine": 921,
                  "endColumn": 86,
                  "snippet": {
                    "text": "        #    LF.  This cannot be reversed either; the text changes will be reversed but not\n        #    line-feed changes (since all line-endings get changed, not just those of the of\n        #    patched lines)\n        # 3. If patching fails, the bits that succeeded remain, so patching is not at all\n        #    atomic.\n        #\n        # Still, we do our best to mitigate all of this as follows:\n",
                    "rendered": {
                      "text": "        #    LF.  This cannot be reversed either; the text changes will be reversed but not\n        #    line-feed changes (since all line-endings get changed, not just those of the of\n        #    patched lines)\n        # 3. If patching fails, the bits that succeeded remain, so patching is not at all\n        #    atomic.\n        #\n        # Still, we do our best to mitigate all of this as follows:\n",
                      "markdown": "`        #    LF.  This cannot be reversed either; the text changes will be reversed but not\n        #    line-feed changes (since all line-endings get changed, not just those of the of\n        #    patched lines)\n        # 3. If patching fails, the bits that succeeded remain, so patching is not at all\n        #    atomic.\n        #\n        # Still, we do our best to mitigate all of this as follows:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 3,
                  "endLine": 536,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        assert isdir(cache_repo)\n\n    # now clone in to work directory\n    update = source_dict.get(\"hg_tag\") or \"tip\"\n    if verbose:\n        print(f\"checkout: {update!r}\")\n\n",
                    "rendered": {
                      "text": "        assert isdir(cache_repo)\n\n    # now clone in to work directory\n    update = source_dict.get(\"hg_tag\") or \"tip\"\n    if verbose:\n        print(f\"checkout: {update!r}\")\n\n",
                      "markdown": "`        assert isdir(cache_repo)\n\n    # now clone in to work directory\n    update = source_dict.get(\"hg_tag\") or \"tip\"\n    if verbose:\n        print(f\"checkout: {update!r}\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 26,
                  "endLine": 302,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                )\n        except CalledProcessError:\n            msg = (\n                \"Failed to update local git cache. \"\n                f\"Deleting local cached repo: {mirror_dir} \"\n            )\n            print(msg)\n",
                    "rendered": {
                      "text": "                )\n        except CalledProcessError:\n            msg = (\n                \"Failed to update local git cache. \"\n                f\"Deleting local cached repo: {mirror_dir} \"\n            )\n            print(msg)\n",
                      "markdown": "`                )\n        except CalledProcessError:\n            msg = (\n                \"Failed to update local git cache. \"\n                f\"Deleting local cached repo: {mirror_dir} \"\n            )\n            print(msg)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 65,
                  "endLine": 277,
                  "endColumn": 73,
                  "snippet": {
                    "text": "                if check_git_lfs(git, mirror_dir, git_ref):\n                    git_lfs_fetch(git, mirror_dir, git_ref, stdout, stderr)\n            else:\n                # Unlike 'git clone', fetch doesn't automatically update the cache's HEAD,\n                # So here we explicitly store the remote HEAD in the cache's local refs/heads,\n                # and then explicitly set the cache's HEAD.\n                # This is important when the git repo is a local path like \"git_url: ../\",\n",
                    "rendered": {
                      "text": "                if check_git_lfs(git, mirror_dir, git_ref):\n                    git_lfs_fetch(git, mirror_dir, git_ref, stdout, stderr)\n            else:\n                # Unlike 'git clone', fetch doesn't automatically update the cache's HEAD,\n                # So here we explicitly store the remote HEAD in the cache's local refs/heads,\n                # and then explicitly set the cache's HEAD.\n                # This is important when the git repo is a local path like \"git_url: ../\",\n",
                      "markdown": "`                if check_git_lfs(git, mirror_dir, git_ref):\n                    git_lfs_fetch(git, mirror_dir, git_ref, stdout, stderr)\n            else:\n                # Unlike 'git clone', fetch doesn't automatically update the cache's HEAD,\n                # So here we explicitly store the remote HEAD in the cache's local refs/heads,\n                # and then explicitly set the cache's HEAD.\n                # This is important when the git repo is a local path like \"git_url: ../\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 1046,
                  "startColumn": 15,
                  "endLine": 1046,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                    locking=metadata.config.locking,\n                )\n            elif \"git_url\" in source_dict:\n                git = git_source(\n                    source_dict,\n                    metadata.config.git_cache,\n                    src_dir,\n",
                    "rendered": {
                      "text": "                    locking=metadata.config.locking,\n                )\n            elif \"git_url\" in source_dict:\n                git = git_source(\n                    source_dict,\n                    metadata.config.git_cache,\n                    src_dir,\n",
                      "markdown": "`                    locking=metadata.config.locking,\n                )\n            elif \"git_url\" in source_dict:\n                git = git_source(\n                    source_dict,\n                    metadata.config.git_cache,\n                    src_dir,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 1028,
                  "startColumn": 3,
                  "endLine": 1028,
                  "endColumn": 8,
                  "snippet": {
                    "text": "      - apply patches (if any)\n    \"\"\"\n    os.makedirs(metadata.config.build_folder, exist_ok=True)\n    git = None\n\n    try:\n        for source_dict in metadata.get_section(\"source\"):\n",
                    "rendered": {
                      "text": "      - apply patches (if any)\n    \"\"\"\n    os.makedirs(metadata.config.build_folder, exist_ok=True)\n    git = None\n\n    try:\n        for source_dict in metadata.get_section(\"source\"):\n",
                      "markdown": "`      - apply patches (if any)\n    \"\"\"\n    os.makedirs(metadata.config.build_folder, exist_ok=True)\n    git = None\n\n    try:\n        for source_dict in metadata.get_section(\"source\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 1016,
                  "startColumn": 73,
                  "endLine": 1017,
                  "snippet": {
                    "text": "\ndef apply_patch(src_dir, patch, config, git=None):\n    apply_one_patch(\n        src_dir, os.path.dirname(patch), os.path.basename(patch), config, git\n    )\n\n\ndef provide(metadata):\n",
                    "rendered": {
                      "text": "\ndef apply_patch(src_dir, patch, config, git=None):\n    apply_one_patch(\n        src_dir, os.path.dirname(patch), os.path.basename(patch), config, git\n    )\n\n\ndef provide(metadata):\n",
                      "markdown": "`\ndef apply_patch(src_dir, patch, config, git=None):\n    apply_one_patch(\n        src_dir, os.path.dirname(patch), os.path.basename(patch), config, git\n    )\n\n\ndef provide(metadata):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 984,
                  "startColumn": 37,
                  "endLine": 984,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            # Prevents git from asking interactive questions,\n            # also necessary to achieve sha1 reproducibility;\n            # as is --committer-date-is-author-date. By this,\n            # we mean a round-trip of git am/git format-patch\n            # gives the same file.\n            git_env = os.environ\n            git_env[\"GIT_COMMITTER_NAME\"] = \"conda-build\"\n",
                    "rendered": {
                      "text": "            # Prevents git from asking interactive questions,\n            # also necessary to achieve sha1 reproducibility;\n            # as is --committer-date-is-author-date. By this,\n            # we mean a round-trip of git am/git format-patch\n            # gives the same file.\n            git_env = os.environ\n            git_env[\"GIT_COMMITTER_NAME\"] = \"conda-build\"\n",
                      "markdown": "`            # Prevents git from asking interactive questions,\n            # also necessary to achieve sha1 reproducibility;\n            # as is --committer-date-is-author-date. By this,\n            # we mean a round-trip of git am/git format-patch\n            # gives the same file.\n            git_env = os.environ\n            git_env[\"GIT_COMMITTER_NAME\"] = \"conda-build\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 981,
                  "startColumn": 22,
                  "endLine": 981,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            patch_attributes, rel_path, config.build_prefix\n        )\n        if git and patch_attributes[\"format\"] == \"git\":\n            # Prevents git from asking interactive questions,\n            # also necessary to achieve sha1 reproducibility;\n            # as is --committer-date-is-author-date. By this,\n            # we mean a round-trip of git am/git format-patch\n",
                    "rendered": {
                      "text": "            patch_attributes, rel_path, config.build_prefix\n        )\n        if git and patch_attributes[\"format\"] == \"git\":\n            # Prevents git from asking interactive questions,\n            # also necessary to achieve sha1 reproducibility;\n            # as is --committer-date-is-author-date. By this,\n            # we mean a round-trip of git am/git format-patch\n",
                      "markdown": "`            patch_attributes, rel_path, config.build_prefix\n        )\n        if git and patch_attributes[\"format\"] == \"git\":\n            # Prevents git from asking interactive questions,\n            # also necessary to achieve sha1 reproducibility;\n            # as is --committer-date-is-author-date. By this,\n            # we mean a round-trip of git am/git format-patch\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 980,
                  "startColumn": 10,
                  "endLine": 980,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        attributes_output += _patch_attributes_debug(\n            patch_attributes, rel_path, config.build_prefix\n        )\n        if git and patch_attributes[\"format\"] == \"git\":\n            # Prevents git from asking interactive questions,\n            # also necessary to achieve sha1 reproducibility;\n            # as is --committer-date-is-author-date. By this,\n",
                    "rendered": {
                      "text": "        attributes_output += _patch_attributes_debug(\n            patch_attributes, rel_path, config.build_prefix\n        )\n        if git and patch_attributes[\"format\"] == \"git\":\n            # Prevents git from asking interactive questions,\n            # also necessary to achieve sha1 reproducibility;\n            # as is --committer-date-is-author-date. By this,\n",
                      "markdown": "`        attributes_output += _patch_attributes_debug(\n            patch_attributes, rel_path, config.build_prefix\n        )\n        if git and patch_attributes[\"format\"] == \"git\":\n            # Prevents git from asking interactive questions,\n            # also necessary to achieve sha1 reproducibility;\n            # as is --committer-date-is-author-date. By this,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 972,
                  "startColumn": 42,
                  "endLine": 972,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    # See conda-build#4495\n    patch_exe = external.find_executable(\"patch\")\n    if not patch_exe:\n        raise MissingDependency(\"Failed to find conda-build dependency: 'patch'\")\n    with TemporaryDirectory() as tmpdir:\n        patch_attributes = _get_patch_attributes(\n            path, patch_exe, git, src_dir, stdout, stderr, tmpdir\n",
                    "rendered": {
                      "text": "    # See conda-build#4495\n    patch_exe = external.find_executable(\"patch\")\n    if not patch_exe:\n        raise MissingDependency(\"Failed to find conda-build dependency: 'patch'\")\n    with TemporaryDirectory() as tmpdir:\n        patch_attributes = _get_patch_attributes(\n            path, patch_exe, git, src_dir, stdout, stderr, tmpdir\n",
                      "markdown": "`    # See conda-build#4495\n    patch_exe = external.find_executable(\"patch\")\n    if not patch_exe:\n        raise MissingDependency(\"Failed to find conda-build dependency: 'patch'\")\n    with TemporaryDirectory() as tmpdir:\n        patch_attributes = _get_patch_attributes(\n            path, patch_exe, git, src_dir, stdout, stderr, tmpdir\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 887,
                  "startColumn": 44,
                  "endLine": 888,
                  "snippet": {
                    "text": "                        result[check_name] = False\n                        pass\n                    else:\n                        result[check_name] = fmt\n                        # Save the first one found.\n                        if check_name == \"applicable\" and not result[\"args\"]:\n                            result[\"args\"] = patch_args\n                        break\n",
                    "rendered": {
                      "text": "                        result[check_name] = False\n                        pass\n                    else:\n                        result[check_name] = fmt\n                        # Save the first one found.\n                        if check_name == \"applicable\" and not result[\"args\"]:\n                            result[\"args\"] = patch_args\n                        break\n",
                      "markdown": "`                        result[check_name] = False\n                        pass\n                    else:\n                        result[check_name] = fmt\n                        # Save the first one found.\n                        if check_name == \"applicable\" and not result[\"args\"]:\n                            result[\"args\"] = patch_args\n                        break\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 863,
                  "startColumn": 23,
                  "endLine": 863,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                        + fmt_args\n                    )\n                    try:\n                        env = os.environ.copy()\n                        env[\"LC_ALL\"] = \"C\"\n                        from subprocess import PIPE, Popen\n\n",
                    "rendered": {
                      "text": "                        + fmt_args\n                    )\n                    try:\n                        env = os.environ.copy()\n                        env[\"LC_ALL\"] = \"C\"\n                        from subprocess import PIPE, Popen\n\n",
                      "markdown": "`                        + fmt_args\n                    )\n                    try:\n                        env = os.environ.copy()\n                        env[\"LC_ALL\"] = \"C\"\n                        from subprocess import PIPE, Popen\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 828,
                  "startColumn": 20,
                  "endLine": 828,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                        shutil.copy(path, new_patch)\n                elif fmt == \"lf\":\n                    _ensure_LF(path, new_patch)\n                elif fmt == \"crlf\":\n                    _ensure_CRLF(path, new_patch)\n                result[\"patches\"][fmt] = new_patch\n\n",
                    "rendered": {
                      "text": "                        shutil.copy(path, new_patch)\n                elif fmt == \"lf\":\n                    _ensure_LF(path, new_patch)\n                elif fmt == \"crlf\":\n                    _ensure_CRLF(path, new_patch)\n                result[\"patches\"][fmt] = new_patch\n\n",
                      "markdown": "`                        shutil.copy(path, new_patch)\n                elif fmt == \"lf\":\n                    _ensure_LF(path, new_patch)\n                elif fmt == \"crlf\":\n                    _ensure_CRLF(path, new_patch)\n                result[\"patches\"][fmt] = new_patch\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 826,
                  "startColumn": 20,
                  "endLine": 826,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                        shutil.copy2(path, new_patch)\n                    except:\n                        shutil.copy(path, new_patch)\n                elif fmt == \"lf\":\n                    _ensure_LF(path, new_patch)\n                elif fmt == \"crlf\":\n                    _ensure_CRLF(path, new_patch)\n",
                    "rendered": {
                      "text": "                        shutil.copy2(path, new_patch)\n                    except:\n                        shutil.copy(path, new_patch)\n                elif fmt == \"lf\":\n                    _ensure_LF(path, new_patch)\n                elif fmt == \"crlf\":\n                    _ensure_CRLF(path, new_patch)\n",
                      "markdown": "`                        shutil.copy2(path, new_patch)\n                    except:\n                        shutil.copy(path, new_patch)\n                elif fmt == \"lf\":\n                    _ensure_LF(path, new_patch)\n                elif fmt == \"crlf\":\n                    _ensure_CRLF(path, new_patch)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 821,
                  "startColumn": 18,
                  "endLine": 821,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            result[\"patches\"] = {}\n            for fmt, _ in fmts.items():\n                new_patch = os.path.join(tmpdir, os.path.basename(path) + f\".{fmt}\")\n                if fmt == \"native\":\n                    try:\n                        shutil.copy2(path, new_patch)\n                    except:\n",
                    "rendered": {
                      "text": "            result[\"patches\"] = {}\n            for fmt, _ in fmts.items():\n                new_patch = os.path.join(tmpdir, os.path.basename(path) + f\".{fmt}\")\n                if fmt == \"native\":\n                    try:\n                        shutil.copy2(path, new_patch)\n                    except:\n",
                      "markdown": "`            result[\"patches\"] = {}\n            for fmt, _ in fmts.items():\n                new_patch = os.path.join(tmpdir, os.path.basename(path) + f\".{fmt}\")\n                if fmt == \"native\":\n                    try:\n                        shutil.copy2(path, new_patch)\n                    except:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 19,
                  "endLine": 795,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        )\n        if not git:\n            log.error(\n                \"No git program found either. Please add a dependency for one of these.\"\n            )\n        return result\n\n",
                    "rendered": {
                      "text": "        )\n        if not git:\n            log.error(\n                \"No git program found either. Please add a dependency for one of these.\"\n            )\n        return result\n\n",
                      "markdown": "`        )\n        if not git:\n            log.error(\n                \"No git program found either. Please add a dependency for one of these.\"\n            )\n        return result\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 762,
                  "startColumn": 20,
                  "endLine": 762,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    result = {\n        \"patch\": path,\n        \"files\": files,\n        \"patch_exe\": git if (git and is_git_format) else patch_exe,\n        \"format\": \"git\" if is_git_format else \"generic\",\n        # If these remain 'unknown' we had no patch program to test with.\n        \"dry_runnable\": None,\n",
                    "rendered": {
                      "text": "    result = {\n        \"patch\": path,\n        \"files\": files,\n        \"patch_exe\": git if (git and is_git_format) else patch_exe,\n        \"format\": \"git\" if is_git_format else \"generic\",\n        # If these remain 'unknown' we had no patch program to test with.\n        \"dry_runnable\": None,\n",
                      "markdown": "`    result = {\n        \"patch\": path,\n        \"files\": files,\n        \"patch_exe\": git if (git and is_git_format) else patch_exe,\n        \"format\": \"git\" if is_git_format else \"generic\",\n        # If these remain 'unknown' we had no patch program to test with.\n        \"dry_runnable\": None,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 3,
                  "endLine": 485,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    # properly execute without it.\n    env = os.environ.copy()\n    env[\"GIT_DIR\"] = join(src_dir, \".git\")\n    env = {str(key): str(value) for key, value in env.items()}\n    for cmd, check_error in (\n        ((git, \"log\", \"-n1\"), True),\n        ((git, \"describe\", \"--tags\", \"--dirty\"), False),\n",
                    "rendered": {
                      "text": "    # properly execute without it.\n    env = os.environ.copy()\n    env[\"GIT_DIR\"] = join(src_dir, \".git\")\n    env = {str(key): str(value) for key, value in env.items()}\n    for cmd, check_error in (\n        ((git, \"log\", \"-n1\"), True),\n        ((git, \"describe\", \"--tags\", \"--dirty\"), False),\n",
                      "markdown": "`    # properly execute without it.\n    env = os.environ.copy()\n    env[\"GIT_DIR\"] = join(src_dir, \".git\")\n    env = {str(key): str(value) for key, value in env.items()}\n    for cmd, check_error in (\n        ((git, \"log\", \"-n1\"), True),\n        ((git, \"describe\", \"--tags\", \"--dirty\"), False),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 483,
                  "startColumn": 3,
                  "endLine": 483,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n    # Ensure to explicitly set GIT_DIR as some Linux machines will not\n    # properly execute without it.\n    env = os.environ.copy()\n    env[\"GIT_DIR\"] = join(src_dir, \".git\")\n    env = {str(key): str(value) for key, value in env.items()}\n    for cmd, check_error in (\n",
                    "rendered": {
                      "text": "\n    # Ensure to explicitly set GIT_DIR as some Linux machines will not\n    # properly execute without it.\n    env = os.environ.copy()\n    env[\"GIT_DIR\"] = join(src_dir, \".git\")\n    env = {str(key): str(value) for key, value in env.items()}\n    for cmd, check_error in (\n",
                      "markdown": "`\n    # Ensure to explicitly set GIT_DIR as some Linux machines will not\n    # properly execute without it.\n    env = os.environ.copy()\n    env[\"GIT_DIR\"] = join(src_dir, \".git\")\n    env = {str(key): str(value) for key, value in env.items()}\n    for cmd, check_error in (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 74,
                  "endLine": 471,
                  "endColumn": 79,
                  "snippet": {
                    "text": "        git = external.find_executable(\"git\", build_prefix)\n    if not git:\n        log.warning(\n            \"git not installed in root environment.  Skipping recording of git info.\"\n        )\n        return\n\n",
                    "rendered": {
                      "text": "        git = external.find_executable(\"git\", build_prefix)\n    if not git:\n        log.warning(\n            \"git not installed in root environment.  Skipping recording of git info.\"\n        )\n        return\n\n",
                      "markdown": "`        git = external.find_executable(\"git\", build_prefix)\n    if not git:\n        log.warning(\n            \"git not installed in root environment.  Skipping recording of git info.\"\n        )\n        return\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 7,
                  "endLine": 468,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    assert isdir(src_dir)\n\n    if not git:\n        git = external.find_executable(\"git\", build_prefix)\n    if not git:\n        log.warning(\n            \"git not installed in root environment.  Skipping recording of git info.\"\n",
                    "rendered": {
                      "text": "    assert isdir(src_dir)\n\n    if not git:\n        git = external.find_executable(\"git\", build_prefix)\n    if not git:\n        log.warning(\n            \"git not installed in root environment.  Skipping recording of git info.\"\n",
                      "markdown": "`    assert isdir(src_dir)\n\n    if not git:\n        git = external.find_executable(\"git\", build_prefix)\n    if not git:\n        log.warning(\n            \"git not installed in root environment.  Skipping recording of git info.\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 25,
                  "endLine": 464,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n# Why not use get_git_info instead?\ndef git_info(src_dir, build_prefix, git=None, verbose=True, fo=None):\n    \"\"\"Print info about a Git repo.\"\"\"\n    assert isdir(src_dir)\n\n    if not git:\n",
                    "rendered": {
                      "text": "\n# Why not use get_git_info instead?\ndef git_info(src_dir, build_prefix, git=None, verbose=True, fo=None):\n    \"\"\"Print info about a Git repo.\"\"\"\n    assert isdir(src_dir)\n\n    if not git:\n",
                      "markdown": "`\n# Why not use get_git_info instead?\ndef git_info(src_dir, build_prefix, git=None, verbose=True, fo=None):\n    \"\"\"Print info about a Git repo.\"\"\"\n    assert isdir(src_dir)\n\n    if not git:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 10,
                  "endLine": 460,
                  "snippet": {
                    "text": "        is_top_level=True,\n        verbose=verbose,\n    )\n    return git\n\n\n# Why not use get_git_info instead?\ndef git_info(src_dir, build_prefix, git=None, verbose=True, fo=None):\n",
                    "rendered": {
                      "text": "        is_top_level=True,\n        verbose=verbose,\n    )\n    return git\n\n\n# Why not use get_git_info instead?\ndef git_info(src_dir, build_prefix, git=None, verbose=True, fo=None):\n",
                      "markdown": "`        is_top_level=True,\n        verbose=verbose,\n    )\n    return git\n\n\n# Why not use get_git_info instead?\ndef git_info(src_dir, build_prefix, git=None, verbose=True, fo=None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 19,
                  "endLine": 426,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    git = external.find_executable(\"git\")\n    if not git:\n        sys.exit(\n            \"Error: git is not installed in your root environment or as a build requirement.\"\n        )\n\n    git_depth = int(source_dict.get(\"git_depth\", -1))\n",
                    "rendered": {
                      "text": "    git = external.find_executable(\"git\")\n    if not git:\n        sys.exit(\n            \"Error: git is not installed in your root environment or as a build requirement.\"\n        )\n\n    git_depth = int(source_dict.get(\"git_depth\", -1))\n",
                      "markdown": "`    git = external.find_executable(\"git\")\n    if not git:\n        sys.exit(\n            \"Error: git is not installed in your root environment or as a build requirement.\"\n        )\n\n    git_depth = int(source_dict.get(\"git_depth\", -1))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 3,
                  "endLine": 423,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    if not isdir(git_cache):\n        os.makedirs(git_cache)\n\n    git = external.find_executable(\"git\")\n    if not git:\n        sys.exit(\n            \"Error: git is not installed in your root environment or as a build requirement.\"\n",
                    "rendered": {
                      "text": "    if not isdir(git_cache):\n        os.makedirs(git_cache)\n\n    git = external.find_executable(\"git\")\n    if not git:\n        sys.exit(\n            \"Error: git is not installed in your root environment or as a build requirement.\"\n",
                      "markdown": "`    if not isdir(git_cache):\n        os.makedirs(git_cache)\n\n    git = external.find_executable(\"git\")\n    if not git:\n        sys.exit(\n            \"Error: git is not installed in your root environment or as a build requirement.\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 31,
                  "endLine": 419,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n\ndef git_source(source_dict, git_cache, src_dir, recipe_path=None, verbose=True):\n    \"\"\"Download a source from a Git repo (or submodule, recursively)\"\"\"\n    if not isdir(git_cache):\n        os.makedirs(git_cache)\n\n",
                    "rendered": {
                      "text": "\n\ndef git_source(source_dict, git_cache, src_dir, recipe_path=None, verbose=True):\n    \"\"\"Download a source from a Git repo (or submodule, recursively)\"\"\"\n    if not isdir(git_cache):\n        os.makedirs(git_cache)\n\n",
                      "markdown": "`\n\ndef git_source(source_dict, git_cache, src_dir, recipe_path=None, verbose=True):\n    \"\"\"Download a source from a Git repo (or submodule, recursively)\"\"\"\n    if not isdir(git_cache):\n        os.makedirs(git_cache)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 39,
                  "endLine": 302,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                )\n        except CalledProcessError:\n            msg = (\n                \"Failed to update local git cache. \"\n                f\"Deleting local cached repo: {mirror_dir} \"\n            )\n            print(msg)\n",
                    "rendered": {
                      "text": "                )\n        except CalledProcessError:\n            msg = (\n                \"Failed to update local git cache. \"\n                f\"Deleting local cached repo: {mirror_dir} \"\n            )\n            print(msg)\n",
                      "markdown": "`                )\n        except CalledProcessError:\n            msg = (\n                \"Failed to update local git cache. \"\n                f\"Deleting local cached repo: {mirror_dir} \"\n            )\n            print(msg)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 44,
                  "endLine": 280,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                # Unlike 'git clone', fetch doesn't automatically update the cache's HEAD,\n                # So here we explicitly store the remote HEAD in the cache's local refs/heads,\n                # and then explicitly set the cache's HEAD.\n                # This is important when the git repo is a local path like \"git_url: ../\",\n                # but the user is working with a branch other than 'master' without\n                # explicitly providing git_rev.\n                check_call_env(\n",
                    "rendered": {
                      "text": "                # Unlike 'git clone', fetch doesn't automatically update the cache's HEAD,\n                # So here we explicitly store the remote HEAD in the cache's local refs/heads,\n                # and then explicitly set the cache's HEAD.\n                # This is important when the git repo is a local path like \"git_url: ../\",\n                # but the user is working with a branch other than 'master' without\n                # explicitly providing git_rev.\n                check_call_env(\n",
                      "markdown": "`                # Unlike 'git clone', fetch doesn't automatically update the cache's HEAD,\n                # So here we explicitly store the remote HEAD in the cache's local refs/heads,\n                # and then explicitly set the cache's HEAD.\n                # This is important when the git repo is a local path like \"git_url: ../\",\n                # but the user is working with a branch other than 'master' without\n                # explicitly providing git_rev.\n                check_call_env(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 56,
                  "endLine": 278,
                  "endColumn": 62,
                  "snippet": {
                    "text": "                    git_lfs_fetch(git, mirror_dir, git_ref, stdout, stderr)\n            else:\n                # Unlike 'git clone', fetch doesn't automatically update the cache's HEAD,\n                # So here we explicitly store the remote HEAD in the cache's local refs/heads,\n                # and then explicitly set the cache's HEAD.\n                # This is important when the git repo is a local path like \"git_url: ../\",\n                # but the user is working with a branch other than 'master' without\n",
                    "rendered": {
                      "text": "                    git_lfs_fetch(git, mirror_dir, git_ref, stdout, stderr)\n            else:\n                # Unlike 'git clone', fetch doesn't automatically update the cache's HEAD,\n                # So here we explicitly store the remote HEAD in the cache's local refs/heads,\n                # and then explicitly set the cache's HEAD.\n                # This is important when the git repo is a local path like \"git_url: ../\",\n                # but the user is working with a branch other than 'master' without\n",
                      "markdown": "`                    git_lfs_fetch(git, mirror_dir, git_ref, stdout, stderr)\n            else:\n                # Unlike 'git clone', fetch doesn't automatically update the cache's HEAD,\n                # So here we explicitly store the remote HEAD in the cache's local refs/heads,\n                # and then explicitly set the cache's HEAD.\n                # This is important when the git repo is a local path like \"git_url: ../\",\n                # but the user is working with a branch other than 'master' without\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 34,
                  "endLine": 258,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            f\"Error: Attempting to mirror to {mirror_dir} which is outside of GIT_CACHE {git_cache}\"\n        )\n\n    # This is necessary for Cygwin git and m2-git, although it is fixed in newer MSYS2.\n    git_mirror_dir = convert_path_for_cygwin_or_msys2(git, mirror_dir).rstrip(\"/\")\n    git_checkout_dir = convert_path_for_cygwin_or_msys2(git, checkout_dir).rstrip(\"/\")\n\n",
                    "rendered": {
                      "text": "            f\"Error: Attempting to mirror to {mirror_dir} which is outside of GIT_CACHE {git_cache}\"\n        )\n\n    # This is necessary for Cygwin git and m2-git, although it is fixed in newer MSYS2.\n    git_mirror_dir = convert_path_for_cygwin_or_msys2(git, mirror_dir).rstrip(\"/\")\n    git_checkout_dir = convert_path_for_cygwin_or_msys2(git, checkout_dir).rstrip(\"/\")\n\n",
                      "markdown": "`            f\"Error: Attempting to mirror to {mirror_dir} which is outside of GIT_CACHE {git_cache}\"\n        )\n\n    # This is necessary for Cygwin git and m2-git, although it is fixed in newer MSYS2.\n    git_mirror_dir = convert_path_for_cygwin_or_msys2(git, mirror_dir).rstrip(\"/\")\n    git_checkout_dir = convert_path_for_cygwin_or_msys2(git, checkout_dir).rstrip(\"/\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 30,
                  "endLine": 230,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    is_top_level=True,\n    verbose=True,\n):\n    \"\"\"Mirror (and checkout) a Git repository recursively.\n\n    It's not possible to use `git submodule` on a bare\n    repository, so the checkout must be done before we\n",
                    "rendered": {
                      "text": "    is_top_level=True,\n    verbose=True,\n):\n    \"\"\"Mirror (and checkout) a Git repository recursively.\n\n    It's not possible to use `git submodule` on a bare\n    repository, so the checkout must be done before we\n",
                      "markdown": "`    is_top_level=True,\n    verbose=True,\n):\n    \"\"\"Mirror (and checkout) a Git repository recursively.\n\n    It's not possible to use `git submodule` on a bare\n    repository, so the checkout must be done before we\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 75,
                  "endLine": 194,
                  "endColumn": 80,
                  "snippet": {
                    "text": "            copy_into(src_path, unhashed_dest, timeout, locking=locking)\n        flist = os.listdir(tmpdir)\n        folder = os.path.join(tmpdir, flist[0])\n        # Hoisting is destructive of information, in CDT packages, a single top level\n        # folder of /usr64 must not be discarded.\n        if len(flist) == 1 and os.path.isdir(folder) and \"no_hoist\" not in source_dict:\n            hoist_single_extracted_folder(folder)\n",
                    "rendered": {
                      "text": "            copy_into(src_path, unhashed_dest, timeout, locking=locking)\n        flist = os.listdir(tmpdir)\n        folder = os.path.join(tmpdir, flist[0])\n        # Hoisting is destructive of information, in CDT packages, a single top level\n        # folder of /usr64 must not be discarded.\n        if len(flist) == 1 and os.path.isdir(folder) and \"no_hoist\" not in source_dict:\n            hoist_single_extracted_folder(folder)\n",
                      "markdown": "`            copy_into(src_path, unhashed_dest, timeout, locking=locking)\n        flist = os.listdir(tmpdir)\n        folder = os.path.join(tmpdir, flist[0])\n        # Hoisting is destructive of information, in CDT packages, a single top level\n        # folder of /usr64 must not be discarded.\n        if len(flist) == 1 and os.path.isdir(folder) and \"no_hoist\" not in source_dict:\n            hoist_single_extracted_folder(folder)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 37,
                  "endLine": 182,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        if src_path.lower().endswith(decompressible_exts):\n            tar_xf(src_path, tmpdir)\n        else:\n            # In this case, the build script will need to deal with unpacking the source\n            print(\n                \"Warning: Unrecognized source format. Source file will be copied to the SRC_DIR\"\n            )\n",
                    "rendered": {
                      "text": "        if src_path.lower().endswith(decompressible_exts):\n            tar_xf(src_path, tmpdir)\n        else:\n            # In this case, the build script will need to deal with unpacking the source\n            print(\n                \"Warning: Unrecognized source format. Source file will be copied to the SRC_DIR\"\n            )\n",
                      "markdown": "`        if src_path.lower().endswith(decompressible_exts):\n            tar_xf(src_path, tmpdir)\n        else:\n            # In this case, the build script will need to deal with unpacking the source\n            print(\n                \"Warning: Unrecognized source format. Source file will be copied to the SRC_DIR\"\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/source.py"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 6,
                  "endLine": 12,
                  "snippet": {
                    "text": "import shutil\nimport sys\nimport tempfile\nimport time\nfrom os.path import abspath, basename, exists, expanduser, isdir, isfile, join, normpath\nfrom pathlib import Path\nfrom subprocess import CalledProcessError\nfrom typing import TYPE_CHECKING\n",
                    "rendered": {
                      "text": "import shutil\nimport sys\nimport tempfile\nimport time\nfrom os.path import abspath, basename, exists, expanduser, isdir, isfile, join, normpath\nfrom pathlib import Path\nfrom subprocess import CalledProcessError\nfrom typing import TYPE_CHECKING\n",
                      "markdown": "`import shutil\nimport sys\nimport tempfile\nimport time\nfrom os.path import abspath, basename, exists, expanduser, isdir, isfile, join, normpath\nfrom pathlib import Path\nfrom subprocess import CalledProcessError\nfrom typing import TYPE_CHECKING\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 34,
                  "endLine": 380,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    1. There are many lists that can only be of length one that\n       don't need to be lists at all.\n    2. The '_text' entries need to go away.\n    3. The real information starts at ['metadata']['package']\n    4. We want the top-level key to be the package name and under\n       that, an entry for each arch for which the package exists.\n    \"\"\"\n",
                    "rendered": {
                      "text": "    1. There are many lists that can only be of length one that\n       don't need to be lists at all.\n    2. The '_text' entries need to go away.\n    3. The real information starts at ['metadata']['package']\n    4. We want the top-level key to be the package name and under\n       that, an entry for each arch for which the package exists.\n    \"\"\"\n",
                      "markdown": "`    1. There are many lists that can only be of length one that\n       don't need to be lists at all.\n    2. The '_text' entries need to go away.\n    3. The real information starts at ['metadata']['package']\n    4. We want the top-level key to be the package name and under\n       that, an entry for each arch for which the package exists.\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 29,
                  "endLine": 378,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    Massages the result of dictify() into a less cumbersome form.\n    In particular:\n    1. There are many lists that can only be of length one that\n       don't need to be lists at all.\n    2. The '_text' entries need to go away.\n    3. The real information starts at ['metadata']['package']\n    4. We want the top-level key to be the package name and under\n",
                    "rendered": {
                      "text": "    Massages the result of dictify() into a less cumbersome form.\n    In particular:\n    1. There are many lists that can only be of length one that\n       don't need to be lists at all.\n    2. The '_text' entries need to go away.\n    3. The real information starts at ['metadata']['package']\n    4. We want the top-level key to be the package name and under\n",
                      "markdown": "`    Massages the result of dictify() into a less cumbersome form.\n    In particular:\n    1. There are many lists that can only be of length one that\n       don't need to be lists at all.\n    2. The '_text' entries need to go away.\n    3. The real information starts at ['metadata']['package']\n    4. We want the top-level key to be the package name and under\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 746,
                  "startColumn": 30,
                  "endLine": 746,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    rpm = repos.add_parser(\n        \"rpm\",\n        help=\"\"\"\n    Create recipe skeleton for RPM files\n        \"\"\",\n    )\n\n",
                    "rendered": {
                      "text": "    rpm = repos.add_parser(\n        \"rpm\",\n        help=\"\"\"\n    Create recipe skeleton for RPM files\n        \"\"\",\n    )\n\n",
                      "markdown": "`    rpm = repos.add_parser(\n        \"rpm\",\n        help=\"\"\"\n    Create recipe skeleton for RPM files\n        \"\"\",\n    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 743,
                  "startColumn": 3,
                  "endLine": 743,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\ndef add_parser(repos):\n    rpm = repos.add_parser(\n        \"rpm\",\n        help=\"\"\"\n    Create recipe skeleton for RPM files\n",
                    "rendered": {
                      "text": "\n\ndef add_parser(repos):\n    rpm = repos.add_parser(\n        \"rpm\",\n        help=\"\"\"\n    Create recipe skeleton for RPM files\n",
                      "markdown": "`\n\ndef add_parser(repos):\n    rpm = repos.add_parser(\n        \"rpm\",\n        help=\"\"\"\n    Create recipe skeleton for RPM files\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 30,
                  "endLine": 644,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    return package\n\n\n# How do we map conda names to RPM names? The issue would be if two distros\n# name their RPMs differently we probably want to hide that away from users\n# Do I want to pass just the package name, the CDT and the arch and rely on\n# expansion to form the URL? I have been going backwards and forwards here.\n",
                    "rendered": {
                      "text": "    return package\n\n\n# How do we map conda names to RPM names? The issue would be if two distros\n# name their RPMs differently we probably want to hide that away from users\n# Do I want to pass just the package name, the CDT and the arch and rely on\n# expansion to form the URL? I have been going backwards and forwards here.\n",
                      "markdown": "`    return package\n\n\n# How do we map conda names to RPM names? The issue would be if two distros\n# name their RPMs differently we probably want to hide that away from users\n# Do I want to pass just the package name, the CDT and the arch and rely on\n# expansion to form the URL? I have been going backwards and forwards here.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 30,
                  "endLine": 260,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    if found_package_name == \"\":\n        print(\n            f\"WARNING: Did not find package called (or another one providing) {dep_name}\"\n        )  # noqa\n        return None, None, None\n\n",
                    "rendered": {
                      "text": "\n    if found_package_name == \"\":\n        print(\n            f\"WARNING: Did not find package called (or another one providing) {dep_name}\"\n        )  # noqa\n        return None, None, None\n\n",
                      "markdown": "`\n    if found_package_name == \"\":\n        print(\n            f\"WARNING: Did not find package called (or another one providing) {dep_name}\"\n        )  # noqa\n        return None, None, None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 44,
                  "endLine": 234,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    result = rpm_filename_generate(rpm_name, version, release, platform)\n    url = join(url_dirname, result)\n    path, _ = download_to_cache(src_cache, \"\", dict({\"url\": url}))\n    assert path, f\"Failed to cache generated RPM url {result}\"\n    return url\n\n\n",
                    "rendered": {
                      "text": "    result = rpm_filename_generate(rpm_name, version, release, platform)\n    url = join(url_dirname, result)\n    path, _ = download_to_cache(src_cache, \"\", dict({\"url\": url}))\n    assert path, f\"Failed to cache generated RPM url {result}\"\n    return url\n\n\n",
                      "markdown": "`    result = rpm_filename_generate(rpm_name, version, release, platform)\n    url = join(url_dirname, result)\n    path, _ = download_to_cache(src_cache, \"\", dict({\"url\": url}))\n    assert path, f\"Failed to cache generated RPM url {result}\"\n    return url\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 51,
                  "endLine": 130,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n        \"clefos\": {\n",
                    "rendered": {
                      "text": "            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n        \"clefos\": {\n",
                      "markdown": "`            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n        \"clefos\": {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 36,
                  "endLine": 130,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n        \"clefos\": {\n",
                    "rendered": {
                      "text": "            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n        \"clefos\": {\n",
                      "markdown": "`            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n        \"clefos\": {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 43,
                  "endLine": 129,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            \"checksummer\": hashlib.sha256,\n            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n",
                    "rendered": {
                      "text": "            \"checksummer\": hashlib.sha256,\n            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n",
                      "markdown": "`            \"checksummer\": hashlib.sha256,\n            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 71,
                  "endLine": 128,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            \"rpm_filename_platform\": \"el7.{architecture}\",\n            \"checksummer\": hashlib.sha256,\n            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n",
                    "rendered": {
                      "text": "            \"rpm_filename_platform\": \"el7.{architecture}\",\n            \"checksummer\": hashlib.sha256,\n            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n",
                      "markdown": "`            \"rpm_filename_platform\": \"el7.{architecture}\",\n            \"checksummer\": hashlib.sha256,\n            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 51,
                  "endLine": 113,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n        \"centos7\": {\n",
                    "rendered": {
                      "text": "            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n        \"centos7\": {\n",
                      "markdown": "`            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n        \"centos7\": {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 36,
                  "endLine": 113,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n        \"centos7\": {\n",
                    "rendered": {
                      "text": "            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n        \"centos7\": {\n",
                      "markdown": "`            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n        \"centos7\": {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 43,
                  "endLine": 112,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            \"checksummer\": hashlib.sha256,\n            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n",
                    "rendered": {
                      "text": "            \"checksummer\": hashlib.sha256,\n            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n",
                      "markdown": "`            \"checksummer\": hashlib.sha256,\n            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n        },\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 71,
                  "endLine": 111,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            \"rpm_filename_platform\": \"el6.{architecture}\",\n            \"checksummer\": hashlib.sha256,\n            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n",
                    "rendered": {
                      "text": "            \"rpm_filename_platform\": \"el6.{architecture}\",\n            \"checksummer\": hashlib.sha256,\n            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n",
                      "markdown": "`            \"rpm_filename_platform\": \"el6.{architecture}\",\n            \"checksummer\": hashlib.sha256,\n            \"checksummer_name\": \"sha256\",\n            # Some macros are defined in /etc/rpm/macros.* but I cannot find where\n            # these ones are defined. Also, rpm --eval \"%{gdk_pixbuf_base_version}\"\n            # gives nothing nor does rpm --showrc | grep gdk\n            \"macros\": {\"pyver\": \"2.6.6\", \"gdk_pixbuf_base_version\": \"2.24.1\"},\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/rpm.py"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 56,
                  "endLine": 79,
                  "endColumn": 3,
                  "snippet": {
                    "text": "    ln -s usr/lib64 lib64\n  fi\nfi\npushd \"${PREFIX}\"/{hostmachine}/sysroot > /dev/null 2>&1\ncp -Rf \"${SRC_DIR}\"/binary/* .\n\"\"\"\n\n\n",
                    "rendered": {
                      "text": "    ln -s usr/lib64 lib64\n  fi\nfi\npushd \"${PREFIX}\"/{hostmachine}/sysroot > /dev/null 2>&1\ncp -Rf \"${SRC_DIR}\"/binary/* .\n\"\"\"\n\n\n",
                      "markdown": "`    ln -s usr/lib64 lib64\n  fi\nfi\npushd \"${PREFIX}\"/{hostmachine}/sysroot > /dev/null 2>&1\ncp -Rf \"${SRC_DIR}\"/binary/* .\n\"\"\"\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1241,
                  "startColumn": 25,
                  "endLine": 1241,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n    # ... and collect all needed requirement specs in a single list:\n    requires = []\n    for specs in [pkginfo.get(\"install_requires\", \"\")] + extras_require:\n        if isinstance(specs, str):\n            requires.append(specs)\n        else:\n",
                    "rendered": {
                      "text": "\n    # ... and collect all needed requirement specs in a single list:\n    requires = []\n    for specs in [pkginfo.get(\"install_requires\", \"\")] + extras_require:\n        if isinstance(specs, str):\n            requires.append(specs)\n        else:\n",
                      "markdown": "`\n    # ... and collect all needed requirement specs in a single list:\n    requires = []\n    for specs in [pkginfo.get(\"install_requires\", \"\")] + extras_require:\n        if isinstance(specs, str):\n            requires.append(specs)\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1154,
                  "startColumn": 26,
                  "endLine": 1154,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    :param dict pkginfo: Dict which holds the package information\n    :return Bool: Return True if it is enabled or False otherwise\n    \"\"\"\n    entry_points = pkginfo.get(\"entry_points\")\n    if not isinstance(entry_points, dict):\n        return False\n\n",
                    "rendered": {
                      "text": "    :param dict pkginfo: Dict which holds the package information\n    :return Bool: Return True if it is enabled or False otherwise\n    \"\"\"\n    entry_points = pkginfo.get(\"entry_points\")\n    if not isinstance(entry_points, dict):\n        return False\n\n",
                      "markdown": "`    :param dict pkginfo: Dict which holds the package information\n    :return Bool: Return True if it is enabled or False otherwise\n    \"\"\"\n    entry_points = pkginfo.get(\"entry_points\")\n    if not isinstance(entry_points, dict):\n        return False\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1115,
                  "startColumn": 55,
                  "endLine": 1115,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n    if isinstance(entry_points, dict):\n        console_script = convert_to_flat_list(entry_points.get(\"console_scripts\", []))\n        gui_scripts = convert_to_flat_list(entry_points.get(\"gui_scripts\", []))\n\n        # TODO: Use pythonw for gui scripts\n        entry_list = console_script + gui_scripts\n",
                    "rendered": {
                      "text": "\n    if isinstance(entry_points, dict):\n        console_script = convert_to_flat_list(entry_points.get(\"console_scripts\", []))\n        gui_scripts = convert_to_flat_list(entry_points.get(\"gui_scripts\", []))\n\n        # TODO: Use pythonw for gui scripts\n        entry_list = console_script + gui_scripts\n",
                      "markdown": "`\n    if isinstance(entry_points, dict):\n        console_script = convert_to_flat_list(entry_points.get(\"console_scripts\", []))\n        gui_scripts = convert_to_flat_list(entry_points.get(\"gui_scripts\", []))\n\n        # TODO: Use pythonw for gui scripts\n        entry_list = console_script + gui_scripts\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1114,
                  "startColumn": 58,
                  "endLine": 1114,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                    ]\n\n    if isinstance(entry_points, dict):\n        console_script = convert_to_flat_list(entry_points.get(\"console_scripts\", []))\n        gui_scripts = convert_to_flat_list(entry_points.get(\"gui_scripts\", []))\n\n        # TODO: Use pythonw for gui scripts\n",
                    "rendered": {
                      "text": "                    ]\n\n    if isinstance(entry_points, dict):\n        console_script = convert_to_flat_list(entry_points.get(\"console_scripts\", []))\n        gui_scripts = convert_to_flat_list(entry_points.get(\"gui_scripts\", []))\n\n        # TODO: Use pythonw for gui scripts\n",
                      "markdown": "`                    ]\n\n    if isinstance(entry_points, dict):\n        console_script = convert_to_flat_list(entry_points.get(\"console_scripts\", []))\n        gui_scripts = convert_to_flat_list(entry_points.get(\"gui_scripts\", []))\n\n        # TODO: Use pythonw for gui scripts\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1109,
                  "startColumn": 43,
                  "endLine": 1109,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            for section in _config.sections():\n                if section in [\"console_scripts\", \"gui_scripts\"]:\n                    entry_points[section] = [\n                        f\"{option}={_config.get(section, option)}\"\n                        for option in _config.options(section)\n                    ]\n\n",
                    "rendered": {
                      "text": "            for section in _config.sections():\n                if section in [\"console_scripts\", \"gui_scripts\"]:\n                    entry_points[section] = [\n                        f\"{option}={_config.get(section, option)}\"\n                        for option in _config.options(section)\n                    ]\n\n",
                      "markdown": "`            for section in _config.sections():\n                if section in [\"console_scripts\", \"gui_scripts\"]:\n                    entry_points[section] = [\n                        f\"{option}={_config.get(section, option)}\"\n                        for option in _config.options(section)\n                    ]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1090,
                  "startColumn": 26,
                  "endLine": 1090,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    :param pkginfo:\n    :return dict:\n    \"\"\"\n    entry_points = pkginfo.get(\"entry_points\")\n    if not entry_points:\n        return {}\n\n",
                    "rendered": {
                      "text": "    :param pkginfo:\n    :return dict:\n    \"\"\"\n    entry_points = pkginfo.get(\"entry_points\")\n    if not entry_points:\n        return {}\n\n",
                      "markdown": "`    :param pkginfo:\n    :return dict:\n    \"\"\"\n    entry_points = pkginfo.get(\"entry_points\")\n    if not entry_points:\n        return {}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1048,
                  "startColumn": 14,
                  "endLine": 1048,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    if licenses:\n        return \" or \".join(licenses)\n\n    if pkginfo.get(\"license\"):\n        license_name = pkginfo[\"license\"]\n    elif data and \"license\" in data:\n        license_name = data[\"license\"]\n",
                    "rendered": {
                      "text": "    if licenses:\n        return \" or \".join(licenses)\n\n    if pkginfo.get(\"license\"):\n        license_name = pkginfo[\"license\"]\n    elif data and \"license\" in data:\n        license_name = data[\"license\"]\n",
                      "markdown": "`    if licenses:\n        return \" or \".join(licenses)\n\n    if pkginfo.get(\"license\"):\n        license_name = pkginfo[\"license\"]\n    elif data and \"license\" in data:\n        license_name = data[\"license\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1036,
                  "startColumn": 28,
                  "endLine": 1036,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    license_classifier = \"License :: OSI Approved :: \"\n\n    data_classifier = data.get(\"classifiers\", []) if data else []\n    pkg_classifier = pkginfo.get(\"classifiers\", data_classifier)\n    pkg_classifier = pkg_classifier if pkg_classifier else data_classifier\n\n    licenses = [\n",
                    "rendered": {
                      "text": "    license_classifier = \"License :: OSI Approved :: \"\n\n    data_classifier = data.get(\"classifiers\", []) if data else []\n    pkg_classifier = pkginfo.get(\"classifiers\", data_classifier)\n    pkg_classifier = pkg_classifier if pkg_classifier else data_classifier\n\n    licenses = [\n",
                      "markdown": "`    license_classifier = \"License :: OSI Approved :: \"\n\n    data_classifier = data.get(\"classifiers\", []) if data else []\n    pkg_classifier = pkginfo.get(\"classifiers\", data_classifier)\n    pkg_classifier = pkg_classifier if pkg_classifier else data_classifier\n\n    licenses = [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1035,
                  "startColumn": 26,
                  "endLine": 1035,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    \"\"\"\n    license_classifier = \"License :: OSI Approved :: \"\n\n    data_classifier = data.get(\"classifiers\", []) if data else []\n    pkg_classifier = pkginfo.get(\"classifiers\", data_classifier)\n    pkg_classifier = pkg_classifier if pkg_classifier else data_classifier\n\n",
                    "rendered": {
                      "text": "    \"\"\"\n    license_classifier = \"License :: OSI Approved :: \"\n\n    data_classifier = data.get(\"classifiers\", []) if data else []\n    pkg_classifier = pkginfo.get(\"classifiers\", data_classifier)\n    pkg_classifier = pkg_classifier if pkg_classifier else data_classifier\n\n",
                      "markdown": "`    \"\"\"\n    license_classifier = \"License :: OSI Approved :: \"\n\n    data_classifier = data.get(\"classifiers\", []) if data else []\n    pkg_classifier = pkginfo.get(\"classifiers\", data_classifier)\n    pkg_classifier = pkg_classifier if pkg_classifier else data_classifier\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1022,
                  "startColumn": 18,
                  "endLine": 1022,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n\ndef get_summary(pkginfo):\n    return pkginfo.get(\"summary\", \"Summary of the package\").replace('\"', r\"\\\"\")\n\n\ndef get_license_name(package, pkginfo, no_prompt=False, data=None):\n",
                    "rendered": {
                      "text": "\n\ndef get_summary(pkginfo):\n    return pkginfo.get(\"summary\", \"Summary of the package\").replace('\"', r\"\\\"\")\n\n\ndef get_license_name(package, pkginfo, no_prompt=False, data=None):\n",
                      "markdown": "`\n\ndef get_summary(pkginfo):\n    return pkginfo.get(\"summary\", \"Summary of the package\").replace('\"', r\"\\\"\")\n\n\ndef get_license_name(package, pkginfo, no_prompt=False, data=None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1017,
                  "startColumn": 19,
                  "endLine": 1017,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    if pkginfo.get(\"home\"):\n        return pkginfo[\"home\"]\n    if data:\n        return data.get(\"home\", default_home)\n    return default_home\n\n\n",
                    "rendered": {
                      "text": "    if pkginfo.get(\"home\"):\n        return pkginfo[\"home\"]\n    if data:\n        return data.get(\"home\", default_home)\n    return default_home\n\n\n",
                      "markdown": "`    if pkginfo.get(\"home\"):\n        return pkginfo[\"home\"]\n    if data:\n        return data.get(\"home\", default_home)\n    return default_home\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1014,
                  "startColumn": 14,
                  "endLine": 1014,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\ndef get_home(pkginfo, data=None):\n    default_home = \"The package home page\"\n    if pkginfo.get(\"home\"):\n        return pkginfo[\"home\"]\n    if data:\n        return data.get(\"home\", default_home)\n",
                    "rendered": {
                      "text": "\ndef get_home(pkginfo, data=None):\n    default_home = \"The package home page\"\n    if pkginfo.get(\"home\"):\n        return pkginfo[\"home\"]\n    if data:\n        return data.get(\"home\", default_home)\n",
                      "markdown": "`\ndef get_home(pkginfo, data=None):\n    default_home = \"The package home page\"\n    if pkginfo.get(\"home\"):\n        return pkginfo[\"home\"]\n    if data:\n        return data.get(\"home\", default_home)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 999,
                  "startColumn": 18,
                  "endLine": 999,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    :param dict import_tests_metada: Imports already present\n    :return list: Sorted list with the libraries necessary for the test phase\n    \"\"\"\n    if not pkginfo.get(\"packages\"):\n        return import_tests_metada\n\n    olddeps = []\n",
                    "rendered": {
                      "text": "    :param dict import_tests_metada: Imports already present\n    :return list: Sorted list with the libraries necessary for the test phase\n    \"\"\"\n    if not pkginfo.get(\"packages\"):\n        return import_tests_metada\n\n    olddeps = []\n",
                      "markdown": "`    :param dict import_tests_metada: Imports already present\n    :return list: Sorted list with the libraries necessary for the test phase\n    \"\"\"\n    if not pkginfo.get(\"packages\"):\n        return import_tests_metada\n\n    olddeps = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 867,
                  "startColumn": 19,
                  "endLine": 867,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    metadata[\"home\"] = get_home(pkginfo, data)\n\n    if not metadata.get(\"summary\"):\n        metadata[\"summary\"] = get_summary(pkginfo)\n\n    license_name = get_license_name(package, pkginfo, no_prompt, data)\n",
                    "rendered": {
                      "text": "\n    metadata[\"home\"] = get_home(pkginfo, data)\n\n    if not metadata.get(\"summary\"):\n        metadata[\"summary\"] = get_summary(pkginfo)\n\n    license_name = get_license_name(package, pkginfo, no_prompt, data)\n",
                      "markdown": "`\n    metadata[\"home\"] = get_home(pkginfo, data)\n\n    if not metadata.get(\"summary\"):\n        metadata[\"summary\"] = get_summary(pkginfo)\n\n    license_name = get_license_name(package, pkginfo, no_prompt, data)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 862,
                  "startColumn": 65,
                  "endLine": 862,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    if metadata[\"version\"] == \"UNKNOWN\":\n        metadata[\"version\"] = pkginfo[\"version\"]\n\n    metadata[\"import_tests\"] = get_import_tests(pkginfo, metadata.get(\"import_tests\"))\n    metadata[\"tests_require\"] = get_tests_require(pkginfo)\n\n    metadata[\"home\"] = get_home(pkginfo, data)\n",
                    "rendered": {
                      "text": "    if metadata[\"version\"] == \"UNKNOWN\":\n        metadata[\"version\"] = pkginfo[\"version\"]\n\n    metadata[\"import_tests\"] = get_import_tests(pkginfo, metadata.get(\"import_tests\"))\n    metadata[\"tests_require\"] = get_tests_require(pkginfo)\n\n    metadata[\"home\"] = get_home(pkginfo, data)\n",
                      "markdown": "`    if metadata[\"version\"] == \"UNKNOWN\":\n        metadata[\"version\"] = pkginfo[\"version\"]\n\n    metadata[\"import_tests\"] = get_import_tests(pkginfo, metadata.get(\"import_tests\"))\n    metadata[\"tests_require\"] = get_tests_require(pkginfo)\n\n    metadata[\"home\"] = get_home(pkginfo, data)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 775,
                  "startColumn": 5,
                  "endLine": 775,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        \"Linux\": \"linux\",\n        \"Darwin\": \"osx\",\n        \"Windows\": \"win\",\n    }.get(value, value.lower())\n    return \"{}{}\".format(\"not \" if operator == \"!=\" else \"\", system)\n\n\n",
                    "rendered": {
                      "text": "        \"Linux\": \"linux\",\n        \"Darwin\": \"osx\",\n        \"Windows\": \"win\",\n    }.get(value, value.lower())\n    return \"{}{}\".format(\"not \" if operator == \"!=\" else \"\", system)\n\n\n",
                      "markdown": "`        \"Linux\": \"linux\",\n        \"Darwin\": \"osx\",\n        \"Windows\": \"win\",\n    }.get(value, value.lower())\n    return \"{}{}\".format(\"not \" if operator == \"!=\" else \"\", system)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 15,
                  "endLine": 638,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n    if not urls:\n        # Try harder for a download location\n        if data.get(\"download_url\"):\n            urls = [defaultdict(str, {\"url\": data[\"download_url\"]})]\n            if not urls[0][\"url\"]:\n                # The package doesn't have a url, or maybe it only has a wheel.\n",
                    "rendered": {
                      "text": "\n    if not urls:\n        # Try harder for a download location\n        if data.get(\"download_url\"):\n            urls = [defaultdict(str, {\"url\": data[\"download_url\"]})]\n            if not urls[0][\"url\"]:\n                # The package doesn't have a url, or maybe it only has a wheel.\n",
                      "markdown": "`\n    if not urls:\n        # Try harder for a download location\n        if data.get(\"download_url\"):\n            urls = [defaultdict(str, {\"url\": data[\"download_url\"]})]\n            if not urls[0][\"url\"]:\n                # The package doesn't have a url, or maybe it only has a wheel.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 27,
                  "endLine": 365,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        # from PyPI. summary will be pulled from package information in\n        # get_package_metadata or a default value set if it turns out that\n        # data['summary'] is empty.  Ignore description as it is too long.\n        d[\"summary\"] = data.get(\"summary\", \"\")\n        get_package_metadata(\n            package,\n            d,\n",
                    "rendered": {
                      "text": "        # from PyPI. summary will be pulled from package information in\n        # get_package_metadata or a default value set if it turns out that\n        # data['summary'] is empty.  Ignore description as it is too long.\n        d[\"summary\"] = data.get(\"summary\", \"\")\n        get_package_metadata(\n            package,\n            d,\n",
                      "markdown": "`        # from PyPI. summary will be pulled from package information in\n        # get_package_metadata or a default value set if it turns out that\n        # data['summary'] is empty.  Ignore description as it is too long.\n        d[\"summary\"] = data.get(\"summary\", \"\")\n        get_package_metadata(\n            package,\n            d,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 32,
                  "endLine": 323,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            # Make sure there is always something to pass in for this\n            pypi_data = {}\n        else:\n            pypi_resp = requests.get(package_pypi_url, verify=not _ssl_no_verify())\n\n            if pypi_resp.status_code != 200:\n                sys.exit(\n",
                    "rendered": {
                      "text": "            # Make sure there is always something to pass in for this\n            pypi_data = {}\n        else:\n            pypi_resp = requests.get(package_pypi_url, verify=not _ssl_no_verify())\n\n            if pypi_resp.status_code != 200:\n                sys.exit(\n",
                      "markdown": "`            # Make sure there is always something to pass in for this\n            pypi_data = {}\n        else:\n            pypi_resp = requests.get(package_pypi_url, verify=not _ssl_no_verify())\n\n            if pypi_resp.status_code != 200:\n                sys.exit(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 39,
                  "endLine": 286,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        config = Config()\n\n    if not python_version:\n        python_version = config.variant.get(\"python\", context.default_python)\n\n    created_recipes = []\n    while packages:\n",
                    "rendered": {
                      "text": "        config = Config()\n\n    if not python_version:\n        python_version = config.variant.get(\"python\", context.default_python)\n\n    created_recipes = []\n    while packages:\n",
                      "markdown": "`        config = Config()\n\n    if not python_version:\n        python_version = config.variant.get(\"python\", context.default_python)\n\n    created_recipes = []\n    while packages:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 16,
                  "endLine": 182,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    if not pypi_url:\n        pypi_url = \"https://pypi.io/pypi\"\n    # request code will be 404 if the package does not exist.  Requires exact match.\n    r = requests.get(pypi_url + \"/\" + package_name, verify=not _ssl_no_verify())\n    return r.status_code != 404\n\n\n",
                    "rendered": {
                      "text": "    if not pypi_url:\n        pypi_url = \"https://pypi.io/pypi\"\n    # request code will be 404 if the package does not exist.  Requires exact match.\n    r = requests.get(pypi_url + \"/\" + package_name, verify=not _ssl_no_verify())\n    return r.status_code != 404\n\n\n",
                      "markdown": "`    if not pypi_url:\n        pypi_url = \"https://pypi.io/pypi\"\n    # request code will be 404 if the package does not exist.  Requires exact match.\n    r = requests.get(pypi_url + \"/\" + package_name, verify=not _ssl_no_verify())\n    return r.status_code != 404\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 21,
                  "endLine": 175,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    This provides a workaround for users in some corporate environments where\n    MITM style proxies make it difficult to fetch data over HTTPS.\n    \"\"\"\n    return os.environ.get(\"SSL_NO_VERIFY\", \"\").strip().lower() in (\"1\", \"true\")\n\n\ndef package_exists(package_name, pypi_url=None):\n",
                    "rendered": {
                      "text": "    This provides a workaround for users in some corporate environments where\n    MITM style proxies make it difficult to fetch data over HTTPS.\n    \"\"\"\n    return os.environ.get(\"SSL_NO_VERIFY\", \"\").strip().lower() in (\"1\", \"true\")\n\n\ndef package_exists(package_name, pypi_url=None):\n",
                      "markdown": "`    This provides a workaround for users in some corporate environments where\n    MITM style proxies make it difficult to fetch data over HTTPS.\n    \"\"\"\n    return os.environ.get(\"SSL_NO_VERIFY\", \"\").strip().lower() in (\"1\", \"true\")\n\n\ndef package_exists(package_name, pypi_url=None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 29,
                  "endLine": 155,
                  "endColumn": 34,
                  "snippet": {
                    "text": "+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n+    data['version'] = kwargs.get('version', '??PACKAGE-VERSION-UNKNOWN??')\n+    with io.open(os.path.join(\"{}\", \"pkginfo.yaml\"), 'w', encoding='utf-8') as fn:\n+        fn.write(yaml.safe_dump(data, encoding=None))\n+\n",
                    "rendered": {
                      "text": "+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n+    data['version'] = kwargs.get('version', '??PACKAGE-VERSION-UNKNOWN??')\n+    with io.open(os.path.join(\"{}\", \"pkginfo.yaml\"), 'w', encoding='utf-8') as fn:\n+        fn.write(yaml.safe_dump(data, encoding=None))\n+\n",
                      "markdown": "`+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n+    data['version'] = kwargs.get('version', '??PACKAGE-VERSION-UNKNOWN??')\n+    with io.open(os.path.join(\"{}\", \"pkginfo.yaml\"), 'w', encoding='utf-8') as fn:\n+        fn.write(yaml.safe_dump(data, encoding=None))\n+\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 33,
                  "endLine": 154,
                  "endColumn": 38,
                  "snippet": {
                    "text": "+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n+    data['version'] = kwargs.get('version', '??PACKAGE-VERSION-UNKNOWN??')\n+    with io.open(os.path.join(\"{}\", \"pkginfo.yaml\"), 'w', encoding='utf-8') as fn:\n+        fn.write(yaml.safe_dump(data, encoding=None))\n",
                    "rendered": {
                      "text": "+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n+    data['version'] = kwargs.get('version', '??PACKAGE-VERSION-UNKNOWN??')\n+    with io.open(os.path.join(\"{}\", \"pkginfo.yaml\"), 'w', encoding='utf-8') as fn:\n+        fn.write(yaml.safe_dump(data, encoding=None))\n",
                      "markdown": "`+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n+    data['version'] = kwargs.get('version', '??PACKAGE-VERSION-UNKNOWN??')\n+    with io.open(os.path.join(\"{}\", \"pkginfo.yaml\"), 'w', encoding='utf-8') as fn:\n+        fn.write(yaml.safe_dump(data, encoding=None))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 26,
                  "endLine": 153,
                  "endColumn": 31,
                  "snippet": {
                    "text": "+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n+    data['version'] = kwargs.get('version', '??PACKAGE-VERSION-UNKNOWN??')\n+    with io.open(os.path.join(\"{}\", \"pkginfo.yaml\"), 'w', encoding='utf-8') as fn:\n",
                    "rendered": {
                      "text": "+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n+    data['version'] = kwargs.get('version', '??PACKAGE-VERSION-UNKNOWN??')\n+    with io.open(os.path.join(\"{}\", \"pkginfo.yaml\"), 'w', encoding='utf-8') as fn:\n",
                      "markdown": "`+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n+    data['version'] = kwargs.get('version', '??PACKAGE-VERSION-UNKNOWN??')\n+    with io.open(os.path.join(\"{}\", \"pkginfo.yaml\"), 'w', encoding='utf-8') as fn:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 29,
                  "endLine": 152,
                  "endColumn": 34,
                  "snippet": {
                    "text": "+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n+    data['version'] = kwargs.get('version', '??PACKAGE-VERSION-UNKNOWN??')\n",
                    "rendered": {
                      "text": "+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n+    data['version'] = kwargs.get('version', '??PACKAGE-VERSION-UNKNOWN??')\n",
                      "markdown": "`+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n+    data['version'] = kwargs.get('version', '??PACKAGE-VERSION-UNKNOWN??')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 26,
                  "endLine": 151,
                  "endColumn": 31,
                  "snippet": {
                    "text": "+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n",
                    "rendered": {
                      "text": "+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n",
                      "markdown": "`+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n+    data['classifiers'] = kwargs.get('classifiers', None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 29,
                  "endLine": 150,
                  "endColumn": 34,
                  "snippet": {
                    "text": "+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n",
                    "rendered": {
                      "text": "+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n",
                      "markdown": "`+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n+    data['license'] = kwargs.get('license', None)\n+    data['name'] = kwargs.get('name', '??PACKAGE-NAME-UNKNOWN??')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 30,
                  "endLine": 148,
                  "endColumn": 35,
                  "snippet": {
                    "text": "+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n",
                    "rendered": {
                      "text": "+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n",
                      "markdown": "`+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n+    data['home'] = kwargs.get('url', None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 34,
                  "endLine": 147,
                  "endColumn": 39,
                  "snippet": {
                    "text": "+    data['tests_require'] = kwargs.get('tests_require', [])\n+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n",
                    "rendered": {
                      "text": "+    data['tests_require'] = kwargs.get('tests_require', [])\n+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n",
                      "markdown": "`+    data['tests_require'] = kwargs.get('tests_require', [])\n+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n+    data['summary'] = kwargs.get('description', None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 36,
                  "endLine": 146,
                  "endColumn": 41,
                  "snippet": {
                    "text": "+    data = {{}}\n+    data['tests_require'] = kwargs.get('tests_require', [])\n+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n",
                    "rendered": {
                      "text": "+    data = {{}}\n+    data['tests_require'] = kwargs.get('tests_require', [])\n+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n",
                      "markdown": "`+    data = {{}}\n+    data['tests_require'] = kwargs.get('tests_require', [])\n+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n+    data['setuptools'] = 'setuptools' in sys.modules\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 38,
                  "endLine": 145,
                  "endColumn": 43,
                  "snippet": {
                    "text": "+def setup(*args, **kwargs):\n+    data = {{}}\n+    data['tests_require'] = kwargs.get('tests_require', [])\n+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n",
                    "rendered": {
                      "text": "+def setup(*args, **kwargs):\n+    data = {{}}\n+    data['tests_require'] = kwargs.get('tests_require', [])\n+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n",
                      "markdown": "`+def setup(*args, **kwargs):\n+    data = {{}}\n+    data['tests_require'] = kwargs.get('tests_require', [])\n+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n+    data['packages'] = kwargs.get('packages', [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 35,
                  "endLine": 144,
                  "endColumn": 40,
                  "snippet": {
                    "text": "+\n+def setup(*args, **kwargs):\n+    data = {{}}\n+    data['tests_require'] = kwargs.get('tests_require', [])\n+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n",
                    "rendered": {
                      "text": "+\n+def setup(*args, **kwargs):\n+    data = {{}}\n+    data['tests_require'] = kwargs.get('tests_require', [])\n+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n",
                      "markdown": "`+\n+def setup(*args, **kwargs):\n+    data = {{}}\n+    data['tests_require'] = kwargs.get('tests_require', [])\n+    data['install_requires'] = kwargs.get('install_requires', [])\n+    data['extras_require'] = kwargs.get('extras_require', {{}})\n+    data['entry_points'] = kwargs.get('entry_points', [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 14,
                  "endLine": 175,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    This provides a workaround for users in some corporate environments where\n    MITM style proxies make it difficult to fetch data over HTTPS.\n    \"\"\"\n    return os.environ.get(\"SSL_NO_VERIFY\", \"\").strip().lower() in (\"1\", \"true\")\n\n\ndef package_exists(package_name, pypi_url=None):\n",
                    "rendered": {
                      "text": "    This provides a workaround for users in some corporate environments where\n    MITM style proxies make it difficult to fetch data over HTTPS.\n    \"\"\"\n    return os.environ.get(\"SSL_NO_VERIFY\", \"\").strip().lower() in (\"1\", \"true\")\n\n\ndef package_exists(package_name, pypi_url=None):\n",
                      "markdown": "`    This provides a workaround for users in some corporate environments where\n    MITM style proxies make it difficult to fetch data over HTTPS.\n    \"\"\"\n    return os.environ.get(\"SSL_NO_VERIFY\", \"\").strip().lower() in (\"1\", \"true\")\n\n\ndef package_exists(package_name, pypi_url=None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1410,
                  "startColumn": 3,
                  "endLine": 1410,
                  "endColumn": 8,
                  "snippet": {
                    "text": "        apply_patch(setuptools, patch, config=config)\n\n    # Save PYTHONPATH for later\n    env = os.environ.copy()\n    if \"PYTHONPATH\" in env:\n        env[\"PYTHONPATH\"] = str(src_dir + \":\" + env[\"PYTHONPATH\"])\n    else:\n",
                    "rendered": {
                      "text": "        apply_patch(setuptools, patch, config=config)\n\n    # Save PYTHONPATH for later\n    env = os.environ.copy()\n    if \"PYTHONPATH\" in env:\n        env[\"PYTHONPATH\"] = str(src_dir + \":\" + env[\"PYTHONPATH\"])\n    else:\n",
                      "markdown": "`        apply_patch(setuptools, patch, config=config)\n\n    # Save PYTHONPATH for later\n    env = os.environ.copy()\n    if \"PYTHONPATH\" in env:\n        env[\"PYTHONPATH\"] = str(src_dir + \":\" + env[\"PYTHONPATH\"])\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1303,
                  "startColumn": 15,
                  "endLine": 1303,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        print(\"done\")\n        print(f\"working in {tempdir}\")\n        src_dir = get_dir(tempdir)\n        # TODO: find args parameters needed by run_setuppy\n        run_setuppy(\n            src_dir,\n            tempdir,\n",
                    "rendered": {
                      "text": "        print(\"done\")\n        print(f\"working in {tempdir}\")\n        src_dir = get_dir(tempdir)\n        # TODO: find args parameters needed by run_setuppy\n        run_setuppy(\n            src_dir,\n            tempdir,\n",
                      "markdown": "`        print(\"done\")\n        print(f\"working in {tempdir}\")\n        src_dir = get_dir(tempdir)\n        # TODO: find args parameters needed by run_setuppy\n        run_setuppy(\n            src_dir,\n            tempdir,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1191,
                  "startColumn": 30,
                  "endLine": 1191,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            return dir_path\n    if not lst:\n        return tempdir\n    raise Exception(\"could not find unpacked source dir\")\n\n\ndef get_requirements(package, pkginfo, all_extras=True):\n",
                    "rendered": {
                      "text": "            return dir_path\n    if not lst:\n        return tempdir\n    raise Exception(\"could not find unpacked source dir\")\n\n\ndef get_requirements(package, pkginfo, all_extras=True):\n",
                      "markdown": "`            return dir_path\n    if not lst:\n        return tempdir\n    raise Exception(\"could not find unpacked source dir\")\n\n\ndef get_requirements(package, pkginfo, all_extras=True):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 30,
                  "endLine": 644,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                # The package doesn't have a url, or maybe it only has a wheel.\n                sys.exit(\n                    f\"Error: Could not build recipe for {package}. \"\n                    \"Could not find any valid urls.\"\n                )\n            U = parse_url(urls[0][\"url\"])\n            if not U.path:\n",
                    "rendered": {
                      "text": "                # The package doesn't have a url, or maybe it only has a wheel.\n                sys.exit(\n                    f\"Error: Could not build recipe for {package}. \"\n                    \"Could not find any valid urls.\"\n                )\n            U = parse_url(urls[0][\"url\"])\n            if not U.path:\n",
                      "markdown": "`                # The package doesn't have a url, or maybe it only has a wheel.\n                sys.exit(\n                    f\"Error: Could not build recipe for {package}. \"\n                    \"Could not find any valid urls.\"\n                )\n            U = parse_url(urls[0][\"url\"])\n            if not U.path:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 633,
                  "startColumn": 16,
                  "endLine": 633,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    urls = [url for url in pypi_data[\"releases\"][version]] if not is_url else [package]\n\n    if not is_url and not all_urls:\n        # Try to find source urls\n        urls = [url for url in urls if url[\"packagetype\"] == \"sdist\"]\n\n    if not urls:\n",
                    "rendered": {
                      "text": "    urls = [url for url in pypi_data[\"releases\"][version]] if not is_url else [package]\n\n    if not is_url and not all_urls:\n        # Try to find source urls\n        urls = [url for url in urls if url[\"packagetype\"] == \"sdist\"]\n\n    if not urls:\n",
                      "markdown": "`    urls = [url for url in pypi_data[\"releases\"][version]] if not is_url else [package]\n\n    if not is_url and not all_urls:\n        # Try to find source urls\n        urls = [url for url in urls if url[\"packagetype\"] == \"sdist\"]\n\n    if not urls:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 15,
                  "endLine": 524,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        \"--all-urls\",\n        action=\"store_true\",\n        help=\"\"\"Look at all URLs, not just source URLs. Use this if it can't\n                find the right URL.\"\"\",\n    )\n    pypi.add_argument(\n        \"--pypi-url\",\n",
                    "rendered": {
                      "text": "        \"--all-urls\",\n        action=\"store_true\",\n        help=\"\"\"Look at all URLs, not just source URLs. Use this if it can't\n                find the right URL.\"\"\",\n    )\n    pypi.add_argument(\n        \"--pypi-url\",\n",
                      "markdown": "`        \"--all-urls\",\n        action=\"store_true\",\n        help=\"\"\"Look at all URLs, not just source URLs. Use this if it can't\n                find the right URL.\"\"\",\n    )\n    pypi.add_argument(\n        \"--pypi-url\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 475,
                  "startColumn": 63,
                  "endLine": 475,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n            # This hackery is necessary because\n            #  - the default indentation of lists is not what we would like.\n            #    Ideally we'd contact the ruamel.yaml author to find the right\n            #    way to do this. See this PR thread for more:\n            #    https://github.com/conda/conda-build/pull/2205#issuecomment-315803714\n            #    Brute force fix below.\n",
                    "rendered": {
                      "text": "\n            # This hackery is necessary because\n            #  - the default indentation of lists is not what we would like.\n            #    Ideally we'd contact the ruamel.yaml author to find the right\n            #    way to do this. See this PR thread for more:\n            #    https://github.com/conda/conda-build/pull/2205#issuecomment-315803714\n            #    Brute force fix below.\n",
                      "markdown": "`\n            # This hackery is necessary because\n            #  - the default indentation of lists is not what we would like.\n            #    Ideally we'd contact the ruamel.yaml author to find the right\n            #    way to do this. See this PR thread for more:\n            #    https://github.com/conda/conda-build/pull/2205#issuecomment-315803714\n            #    Brute force fix below.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 75,
                  "endLine": 439,
                  "endColumn": 80,
                  "snippet": {
                    "text": "                recipe_script_cmd + setup_options\n            )\n\n            # Always require python as a dependency.  Pip is because we use pip for\n            #    the install line.\n            ordered_recipe[\"requirements\"] = OrderedDict()\n            ordered_recipe[\"requirements\"][\"host\"] = sorted(\n",
                    "rendered": {
                      "text": "                recipe_script_cmd + setup_options\n            )\n\n            # Always require python as a dependency.  Pip is because we use pip for\n            #    the install line.\n            ordered_recipe[\"requirements\"] = OrderedDict()\n            ordered_recipe[\"requirements\"][\"host\"] = sorted(\n",
                      "markdown": "`                recipe_script_cmd + setup_options\n            )\n\n            # Always require python as a dependency.  Pip is because we use pip for\n            #    the install line.\n            ordered_recipe[\"requirements\"] = OrderedDict()\n            ordered_recipe[\"requirements\"][\"host\"] = sorted(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 53,
                  "endLine": 439,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                recipe_script_cmd + setup_options\n            )\n\n            # Always require python as a dependency.  Pip is because we use pip for\n            #    the install line.\n            ordered_recipe[\"requirements\"] = OrderedDict()\n            ordered_recipe[\"requirements\"][\"host\"] = sorted(\n",
                    "rendered": {
                      "text": "                recipe_script_cmd + setup_options\n            )\n\n            # Always require python as a dependency.  Pip is because we use pip for\n            #    the install line.\n            ordered_recipe[\"requirements\"] = OrderedDict()\n            ordered_recipe[\"requirements\"][\"host\"] = sorted(\n",
                      "markdown": "`                recipe_script_cmd + setup_options\n            )\n\n            # Always require python as a dependency.  Pip is because we use pip for\n            #    the install line.\n            ordered_recipe[\"requirements\"] = OrderedDict()\n            ordered_recipe[\"requirements\"][\"host\"] = sorted(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 32,
                  "endLine": 433,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                ordered_recipe[\"build\"][\"noarch\"] = \"python\"\n\n            recipe_script_cmd = [\n                \"{{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation\"\n            ]\n            ordered_recipe[\"build\"][\"script\"] = \" \".join(\n                recipe_script_cmd + setup_options\n",
                    "rendered": {
                      "text": "                ordered_recipe[\"build\"][\"noarch\"] = \"python\"\n\n            recipe_script_cmd = [\n                \"{{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation\"\n            ]\n            ordered_recipe[\"build\"][\"script\"] = \" \".join(\n                recipe_script_cmd + setup_options\n",
                      "markdown": "`                ordered_recipe[\"build\"][\"noarch\"] = \"python\"\n\n            recipe_script_cmd = [\n                \"{{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation\"\n            ]\n            ordered_recipe[\"build\"][\"script\"] = \" \".join(\n                recipe_script_cmd + setup_options\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 47,
                  "endLine": 346,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            else:\n                # select the most visible version from PyPI.\n                if not versions:\n                    sys.exit(f\"Error: Could not find any versions of package {package}\")\n                if len(versions) > 1:\n                    print(f\"Warning, the following versions were found for {package}\")\n                    for ver in versions:\n",
                    "rendered": {
                      "text": "            else:\n                # select the most visible version from PyPI.\n                if not versions:\n                    sys.exit(f\"Error: Could not find any versions of package {package}\")\n                if len(versions) > 1:\n                    print(f\"Warning, the following versions were found for {package}\")\n                    for ver in versions:\n",
                      "markdown": "`            else:\n                # select the most visible version from PyPI.\n                if not versions:\n                    sys.exit(f\"Error: Could not find any versions of package {package}\")\n                if len(versions) > 1:\n                    print(f\"Warning, the following versions were found for {package}\")\n                    for ver in versions:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 19,
                  "endLine": 163,
                  "endColumn": 27,
                  "snippet": {
                    "text": "+# ======= END CONDA SKELETON PYPI PATCH ======\n \\n\n def run_setup (script_name, script_args=None, stop_after=\"run\"):\n     \"\"\"Run a setup script in a somewhat controlled environment, and\n'''\n\nINDENT = \"\\n    - \"\n",
                    "rendered": {
                      "text": "+# ======= END CONDA SKELETON PYPI PATCH ======\n \\n\n def run_setup (script_name, script_args=None, stop_after=\"run\"):\n     \"\"\"Run a setup script in a somewhat controlled environment, and\n'''\n\nINDENT = \"\\n    - \"\n",
                      "markdown": "`+# ======= END CONDA SKELETON PYPI PATCH ======\n \\n\n def run_setup (script_name, script_args=None, stop_after=\"run\"):\n     \"\"\"Run a setup script in a somewhat controlled environment, and\n'''\n\nINDENT = \"\\n    - \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 22,
                  "endLine": 121,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n\n# Note the {} formatting bits here\nDISTUTILS_PATCH = '''\\\ndiff core.py core.py\n--- core.py\n+++ core.py\n@@ -166,5 +167,40 @@ def setup (**attrs):\n",
                    "rendered": {
                      "text": "\n\n# Note the {} formatting bits here\nDISTUTILS_PATCH = '''\\\ndiff core.py core.py\n--- core.py\n+++ core.py\n@@ -166,5 +167,40 @@ def setup (**attrs):\n",
                      "markdown": "`\n\n# Note the {} formatting bits here\nDISTUTILS_PATCH = '''\\\ndiff core.py core.py\n--- core.py\n+++ core.py\n@@ -166,5 +167,40 @@ def setup (**attrs):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1159,
                  "startColumn": 16,
                  "endLine": 1159,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        return False\n\n    # We have *other* kinds of entry-points so we need\n    # setuptools at run-time\n    if set(entry_points.keys()) - {\"console_scripts\", \"gui_scripts\"}:\n        return True\n    return False\n",
                    "rendered": {
                      "text": "        return False\n\n    # We have *other* kinds of entry-points so we need\n    # setuptools at run-time\n    if set(entry_points.keys()) - {\"console_scripts\", \"gui_scripts\"}:\n        return True\n    return False\n",
                      "markdown": "`        return False\n\n    # We have *other* kinds of entry-points so we need\n    # setuptools at run-time\n    if set(entry_points.keys()) - {\"console_scripts\", \"gui_scripts\"}:\n        return True\n    return False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 1086,
                  "startColumn": 11,
                  "endLine": 1086,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n\ndef get_entry_points(pkginfo):\n    \"\"\"Look at the entry_points and construct console_script and gui_scripts entry_points for conda\n    :param pkginfo:\n    :return dict:\n    \"\"\"\n",
                    "rendered": {
                      "text": "\n\ndef get_entry_points(pkginfo):\n    \"\"\"Look at the entry_points and construct console_script and gui_scripts entry_points for conda\n    :param pkginfo:\n    :return dict:\n    \"\"\"\n",
                      "markdown": "`\n\ndef get_entry_points(pkginfo):\n    \"\"\"Look at the entry_points and construct console_script and gui_scripts entry_points for conda\n    :param pkginfo:\n    :return dict:\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 48,
                  "endLine": 703,
                  "snippet": {
                    "text": "\ndef version_compare(package, versions):\n    if not versions:\n        # PyPI is case sensitive, this will pass control\n        # to a method in main() to take care of that.\n        return\n\n    nv = normalized_version\n",
                    "rendered": {
                      "text": "\ndef version_compare(package, versions):\n    if not versions:\n        # PyPI is case sensitive, this will pass control\n        # to a method in main() to take care of that.\n        return\n\n    nv = normalized_version\n",
                      "markdown": "`\ndef version_compare(package, versions):\n    if not versions:\n        # PyPI is case sensitive, this will pass control\n        # to a method in main() to take care of that.\n        return\n\n    nv = normalized_version\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 612,
                  "startColumn": 7,
                  "endLine": 612,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    pypi_data, package, version, is_url, all_urls, noprompt, manual_url\n):\n    \"\"\"\n    Get at least one valid *source* download URL or fail.\n\n    Returns\n    -------\n",
                    "rendered": {
                      "text": "    pypi_data, package, version, is_url, all_urls, noprompt, manual_url\n):\n    \"\"\"\n    Get at least one valid *source* download URL or fail.\n\n    Returns\n    -------\n",
                      "markdown": "`    pypi_data, package, version, is_url, all_urls, noprompt, manual_url\n):\n    \"\"\"\n    Get at least one valid *source* download URL or fail.\n\n    Returns\n    -------\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 20,
                  "endLine": 523,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    pypi.add_argument(\n        \"--all-urls\",\n        action=\"store_true\",\n        help=\"\"\"Look at all URLs, not just source URLs. Use this if it can't\n                find the right URL.\"\"\",\n    )\n    pypi.add_argument(\n",
                    "rendered": {
                      "text": "    pypi.add_argument(\n        \"--all-urls\",\n        action=\"store_true\",\n        help=\"\"\"Look at all URLs, not just source URLs. Use this if it can't\n                find the right URL.\"\"\",\n    )\n    pypi.add_argument(\n",
                      "markdown": "`    pypi.add_argument(\n        \"--all-urls\",\n        action=\"store_true\",\n        help=\"\"\"Look at all URLs, not just source URLs. Use this if it can't\n                find the right URL.\"\"\",\n    )\n    pypi.add_argument(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/pypi.py"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 54,
                  "endLine": 225,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                    rendered_recipe += _print_dict(\n                        attribute_value, sorted(list(attribute_value.keys()))\n                    )\n                # assume that it's a list if it exists at all\n                elif attribute_value:\n                    rendered_recipe += __print_with_indent(\n                        attribute_name, suffix=\":\", level=level + indent\n",
                    "rendered": {
                      "text": "                    rendered_recipe += _print_dict(\n                        attribute_value, sorted(list(attribute_value.keys()))\n                    )\n                # assume that it's a list if it exists at all\n                elif attribute_value:\n                    rendered_recipe += __print_with_indent(\n                        attribute_name, suffix=\":\", level=level + indent\n",
                      "markdown": "`                    rendered_recipe += _print_dict(\n                        attribute_value, sorted(list(attribute_value.keys()))\n                    )\n                # assume that it's a list if it exists at all\n                elif attribute_value:\n                    rendered_recipe += __print_with_indent(\n                        attribute_name, suffix=\":\", level=level + indent\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/luarocks.py"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 47,
                  "endLine": 145,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    luarocks = repos.add_parser(\n        \"luarocks\",\n        help=\"\"\"\n    Create recipe skeleton for luarocks, hosted at luarocks.org\n        \"\"\",\n    )\n    luarocks.add_argument(\n",
                    "rendered": {
                      "text": "    luarocks = repos.add_parser(\n        \"luarocks\",\n        help=\"\"\"\n    Create recipe skeleton for luarocks, hosted at luarocks.org\n        \"\"\",\n    )\n    luarocks.add_argument(\n",
                      "markdown": "`    luarocks = repos.add_parser(\n        \"luarocks\",\n        help=\"\"\"\n    Create recipe skeleton for luarocks, hosted at luarocks.org\n        \"\"\",\n    )\n    luarocks.add_argument(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/luarocks.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 3,
                  "endLine": 95,
                  "endColumn": 7,
                  "snippet": {
                    "text": "{test_commands}\n\n  # You can also put a file called run_test.lua in the recipe that will be run\n  # at test time.\n\nabout:\n  {home_comment}home: {homeurl}\n",
                    "rendered": {
                      "text": "{test_commands}\n\n  # You can also put a file called run_test.lua in the recipe that will be run\n  # at test time.\n\nabout:\n  {home_comment}home: {homeurl}\n",
                      "markdown": "`{test_commands}\n\n  # You can also put a file called run_test.lua in the recipe that will be run\n  # at test time.\n\nabout:\n  {home_comment}home: {homeurl}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/luarocks.py"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 18,
                  "endLine": 378,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                [\"\"] + [f\"\"\"lua -e \"require '{r}'\\\"\"\"\" for r in modules.keys()]\n            )\n\n    # If we didn't find any modules to import, import the base name\n    if d[\"test_commands\"] == \"\":\n        d[\"test_commands\"] = INDENT.join(\n            [\"\"] + [\"\"\"lua -e \"require '{}'\" \"\"\".format(d[\"rockname\"])]\n",
                    "rendered": {
                      "text": "                [\"\"] + [f\"\"\"lua -e \"require '{r}'\\\"\"\"\" for r in modules.keys()]\n            )\n\n    # If we didn't find any modules to import, import the base name\n    if d[\"test_commands\"] == \"\":\n        d[\"test_commands\"] = INDENT.join(\n            [\"\"] + [\"\"\"lua -e \"require '{}'\" \"\"\".format(d[\"rockname\"])]\n",
                      "markdown": "`                [\"\"] + [f\"\"\"lua -e \"require '{r}'\\\"\"\"\" for r in modules.keys()]\n            )\n\n    # If we didn't find any modules to import, import the base name\n    if d[\"test_commands\"] == \"\":\n        d[\"test_commands\"] = INDENT.join(\n            [\"\"] + [\"\"\"lua -e \"require '{}'\" \"\"\".format(d[\"rockname\"])]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/luarocks.py"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 9,
                  "endLine": 292,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        if o != 0:\n            raise Exception(f\"Could not download rockspec for {package}\")\n\n        # Find the downloaded rockspec\n        fs = glob(package + \"*.rockspec\")\n        if len(fs) != 1:\n            raise Exception(\"Failed to download rockspec\")\n",
                    "rendered": {
                      "text": "        if o != 0:\n            raise Exception(f\"Could not download rockspec for {package}\")\n\n        # Find the downloaded rockspec\n        fs = glob(package + \"*.rockspec\")\n        if len(fs) != 1:\n            raise Exception(\"Failed to download rockspec\")\n",
                      "markdown": "`        if o != 0:\n            raise Exception(f\"Could not download rockspec for {package}\")\n\n        # Find the downloaded rockspec\n        fs = glob(package + \"*.rockspec\")\n        if len(fs) != 1:\n            raise Exception(\"Failed to download rockspec\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/luarocks.py"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 24,
                  "endLine": 235,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    version: str | None = None,\n    recursive: bool = False,\n) -> None:\n    # Check that we have Lua installed (any version)\n\n    # Check that we have luarocks installed\n\n",
                    "rendered": {
                      "text": "    version: str | None = None,\n    recursive: bool = False,\n) -> None:\n    # Check that we have Lua installed (any version)\n\n    # Check that we have luarocks installed\n\n",
                      "markdown": "`    version: str | None = None,\n    recursive: bool = False,\n) -> None:\n    # Check that we have Lua installed (any version)\n\n    # Check that we have luarocks installed\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/luarocks.py"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 37,
                  "endLine": 190,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    print(f\"Building a rock referenced to branch {branch}.\")\n    print(\"This is not a tag. This is dangerous, because rebuilding\")\n    print(\"at a later date may produce a different package.\")\n    print(\"Please replace with a tag, git commit, or tarball.\")\n    print(\"\")\n    print(\"=========================================\")\n\n",
                    "rendered": {
                      "text": "    print(f\"Building a rock referenced to branch {branch}.\")\n    print(\"This is not a tag. This is dangerous, because rebuilding\")\n    print(\"at a later date may produce a different package.\")\n    print(\"Please replace with a tag, git commit, or tarball.\")\n    print(\"\")\n    print(\"=========================================\")\n\n",
                      "markdown": "`    print(f\"Building a rock referenced to branch {branch}.\")\n    print(\"This is not a tag. This is dangerous, because rebuilding\")\n    print(\"at a later date may produce a different package.\")\n    print(\"Please replace with a tag, git commit, or tarball.\")\n    print(\"\")\n    print(\"=========================================\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/luarocks.py"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 22,
                  "endLine": 171,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\ndef package_exists(package_name):\n    return True\n    # TODO: no current Lua packages work for me.  Need to verify this method.\n    # subprocess.check_call(['luarocks', 'search', package_name])\n\n\n",
                    "rendered": {
                      "text": "\ndef package_exists(package_name):\n    return True\n    # TODO: no current Lua packages work for me.  Need to verify this method.\n    # subprocess.check_call(['luarocks', 'search', package_name])\n\n\n",
                      "markdown": "`\ndef package_exists(package_name):\n    return True\n    # TODO: no current Lua packages work for me.  Need to verify this method.\n    # subprocess.check_call(['luarocks', 'search', package_name])\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/luarocks.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 47,
                  "endLine": 120,
                  "endColumn": 53,
                  "snippet": {
                    "text": "# they tend to be top-level or in a rocks/ directory.\n# NOTE: we're just picking the first rock we find. If there's\n# more than one, specify it manually.\nROCK=$(find . -name \"*.rockspec\" | sort -n -r | head -n 1)\n\"${{PREFIX}}\"/bin/luarocks install \"${{ROCK}}\" --local-tree\n\n# Add more build steps here, if they are necessary.\n",
                    "rendered": {
                      "text": "# they tend to be top-level or in a rocks/ directory.\n# NOTE: we're just picking the first rock we find. If there's\n# more than one, specify it manually.\nROCK=$(find . -name \"*.rockspec\" | sort -n -r | head -n 1)\n\"${{PREFIX}}\"/bin/luarocks install \"${{ROCK}}\" --local-tree\n\n# Add more build steps here, if they are necessary.\n",
                      "markdown": "`# they tend to be top-level or in a rocks/ directory.\n# NOTE: we're just picking the first rock we find. If there's\n# more than one, specify it manually.\nROCK=$(find . -name \"*.rockspec\" | sort -n -r | head -n 1)\n\"${{PREFIX}}\"/bin/luarocks install \"${{ROCK}}\" --local-tree\n\n# Add more build steps here, if they are necessary.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/skeletons/luarocks.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 34,
                  "endLine": 120,
                  "endColumn": 40,
                  "snippet": {
                    "text": "# they tend to be top-level or in a rocks/ directory.\n# NOTE: we're just picking the first rock we find. If there's\n# more than one, specify it manually.\nROCK=$(find . -name \"*.rockspec\" | sort -n -r | head -n 1)\n\"${{PREFIX}}\"/bin/luarocks install \"${{ROCK}}\" --local-tree\n\n# Add more build steps here, if they are necessary.\n",
                    "rendered": {
                      "text": "# they tend to be top-level or in a rocks/ directory.\n# NOTE: we're just picking the first rock we find. If there's\n# more than one, specify it manually.\nROCK=$(find . -name \"*.rockspec\" | sort -n -r | head -n 1)\n\"${{PREFIX}}\"/bin/luarocks install \"${{ROCK}}\" --local-tree\n\n# Add more build steps here, if they are necessary.\n",
                      "markdown": "`# they tend to be top-level or in a rocks/ directory.\n# NOTE: we're just picking the first rock we find. If there's\n# more than one, specify it manually.\nROCK=$(find . -name \"*.rockspec\" | sort -n -r | head -n 1)\n\"${{PREFIX}}\"/bin/luarocks install \"${{ROCK}}\" --local-tree\n\n# Add more build steps here, if they are necessary.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2961,
                  "startColumn": 50,
                  "endLine": 2961,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        #    content will reflect our current name, not the top-level name. We\n        #    fix that here by replacing any PKG_NAME instances with the known\n        #    parent name\n        parent_recipe = self.meta.get(\"extra\", {}).get(\"parent_recipe\", {})\n        alt_name = parent_recipe[\"name\"] if self.is_output else None\n        if recipe_no_outputs:\n            top_no_outputs = yaml.safe_load(\n",
                    "rendered": {
                      "text": "        #    content will reflect our current name, not the top-level name. We\n        #    fix that here by replacing any PKG_NAME instances with the known\n        #    parent name\n        parent_recipe = self.meta.get(\"extra\", {}).get(\"parent_recipe\", {})\n        alt_name = parent_recipe[\"name\"] if self.is_output else None\n        if recipe_no_outputs:\n            top_no_outputs = yaml.safe_load(\n",
                      "markdown": "`        #    content will reflect our current name, not the top-level name. We\n        #    fix that here by replacing any PKG_NAME instances with the known\n        #    parent name\n        parent_recipe = self.meta.get(\"extra\", {}).get(\"parent_recipe\", {})\n        alt_name = parent_recipe[\"name\"] if self.is_output else None\n        if recipe_no_outputs:\n            top_no_outputs = yaml.safe_load(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2961,
                  "startColumn": 33,
                  "endLine": 2961,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        #    content will reflect our current name, not the top-level name. We\n        #    fix that here by replacing any PKG_NAME instances with the known\n        #    parent name\n        parent_recipe = self.meta.get(\"extra\", {}).get(\"parent_recipe\", {})\n        alt_name = parent_recipe[\"name\"] if self.is_output else None\n        if recipe_no_outputs:\n            top_no_outputs = yaml.safe_load(\n",
                    "rendered": {
                      "text": "        #    content will reflect our current name, not the top-level name. We\n        #    fix that here by replacing any PKG_NAME instances with the known\n        #    parent name\n        parent_recipe = self.meta.get(\"extra\", {}).get(\"parent_recipe\", {})\n        alt_name = parent_recipe[\"name\"] if self.is_output else None\n        if recipe_no_outputs:\n            top_no_outputs = yaml.safe_load(\n",
                      "markdown": "`        #    content will reflect our current name, not the top-level name. We\n        #    fix that here by replacing any PKG_NAME instances with the known\n        #    parent name\n        parent_recipe = self.meta.get(\"extra\", {}).get(\"parent_recipe\", {})\n        alt_name = parent_recipe[\"name\"] if self.is_output else None\n        if recipe_no_outputs:\n            top_no_outputs = yaml.safe_load(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2948,
                  "startColumn": 39,
                  "endLine": 2948,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        return manual_overrides or (\n            self.config.subdirs_same\n            and not manually_disabled\n            and \"host\" not in self.meta.get(\"requirements\", {})\n            and not self.uses_new_style_compiler_activation\n        )\n\n",
                    "rendered": {
                      "text": "        return manual_overrides or (\n            self.config.subdirs_same\n            and not manually_disabled\n            and \"host\" not in self.meta.get(\"requirements\", {})\n            and not self.uses_new_style_compiler_activation\n        )\n\n",
                      "markdown": "`        return manual_overrides or (\n            self.config.subdirs_same\n            and not manually_disabled\n            and \"host\" not in self.meta.get(\"requirements\", {})\n            and not self.uses_new_style_compiler_activation\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2739,
                  "startColumn": 22,
                  "endLine": 2739,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        for output_ in self.get_rendered_outputs_section(\n            permit_undefined_jinja=permit_undefined_jinja, variant=variant\n        ):\n            if output_.get(\"name\") == name:\n                output = output_\n                break\n        return output\n",
                    "rendered": {
                      "text": "        for output_ in self.get_rendered_outputs_section(\n            permit_undefined_jinja=permit_undefined_jinja, variant=variant\n        ):\n            if output_.get(\"name\") == name:\n                output = output_\n                break\n        return output\n",
                      "markdown": "`        for output_ in self.get_rendered_outputs_section(\n            permit_undefined_jinja=permit_undefined_jinja, variant=variant\n        ):\n            if output_.get(\"name\") == name:\n                output = output_\n                break\n        return output\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2727,
                  "startColumn": 9,
                  "endLine": 2727,
                  "endColumn": 14,
                  "snippet": {
                    "text": "                )\n            )\n            or {}\n        ).get(\"outputs\", [])\n        return get_output_dicts_from_metadata(self, outputs=outputs)\n\n    def get_rendered_output(self, name, permit_undefined_jinja=False, variant=None):\n",
                    "rendered": {
                      "text": "                )\n            )\n            or {}\n        ).get(\"outputs\", [])\n        return get_output_dicts_from_metadata(self, outputs=outputs)\n\n    def get_rendered_output(self, name, permit_undefined_jinja=False, variant=None):\n",
                      "markdown": "`                )\n            )\n            or {}\n        ).get(\"outputs\", [])\n        return get_output_dicts_from_metadata(self, outputs=outputs)\n\n    def get_rendered_output(self, name, permit_undefined_jinja=False, variant=None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2634,
                  "startColumn": 59,
                  "endLine": 2634,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                        build_reqs.extend(\n                            [\"pip\", \"python {}\".format(m.config.variant[\"python\"])]\n                        )\n                        output_d[\"requirements\"] = output_d.get(\"requirements\", {})\n                        output_d[\"requirements\"][\"build\"] = build_reqs\n                        m.meta[\"requirements\"] = m.get_section(\"requirements\")\n                        m.meta[\"requirements\"][\"build\"] = build_reqs\n",
                    "rendered": {
                      "text": "                        build_reqs.extend(\n                            [\"pip\", \"python {}\".format(m.config.variant[\"python\"])]\n                        )\n                        output_d[\"requirements\"] = output_d.get(\"requirements\", {})\n                        output_d[\"requirements\"][\"build\"] = build_reqs\n                        m.meta[\"requirements\"] = m.get_section(\"requirements\")\n                        m.meta[\"requirements\"][\"build\"] = build_reqs\n",
                      "markdown": "`                        build_reqs.extend(\n                            [\"pip\", \"python {}\".format(m.config.variant[\"python\"])]\n                        )\n                        output_d[\"requirements\"] = output_d.get(\"requirements\", {})\n                        output_d[\"requirements\"][\"build\"] = build_reqs\n                        m.meta[\"requirements\"] = m.get_section(\"requirements\")\n                        m.meta[\"requirements\"][\"build\"] = build_reqs\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2630,
                  "startColumn": 69,
                  "endLine": 2630,
                  "endColumn": 74,
                  "snippet": {
                    "text": "                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n                        build_reqs = output_d.get(\"requirements\", {}).get(\"build\", [])\n                        build_reqs.extend(\n                            [\"pip\", \"python {}\".format(m.config.variant[\"python\"])]\n                        )\n",
                    "rendered": {
                      "text": "                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n                        build_reqs = output_d.get(\"requirements\", {}).get(\"build\", [])\n                        build_reqs.extend(\n                            [\"pip\", \"python {}\".format(m.config.variant[\"python\"])]\n                        )\n",
                      "markdown": "`                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n                        build_reqs = output_d.get(\"requirements\", {}).get(\"build\", [])\n                        build_reqs.extend(\n                            [\"pip\", \"python {}\".format(m.config.variant[\"python\"])]\n                        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2630,
                  "startColumn": 45,
                  "endLine": 2630,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n                        build_reqs = output_d.get(\"requirements\", {}).get(\"build\", [])\n                        build_reqs.extend(\n                            [\"pip\", \"python {}\".format(m.config.variant[\"python\"])]\n                        )\n",
                    "rendered": {
                      "text": "                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n                        build_reqs = output_d.get(\"requirements\", {}).get(\"build\", [])\n                        build_reqs.extend(\n                            [\"pip\", \"python {}\".format(m.config.variant[\"python\"])]\n                        )\n",
                      "markdown": "`                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n                        build_reqs = output_d.get(\"requirements\", {}).get(\"build\", [])\n                        build_reqs.extend(\n                            [\"pip\", \"python {}\".format(m.config.variant[\"python\"])]\n                        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2627,
                  "startColumn": 59,
                  "endLine": 2627,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                        deepfreeze({k: m.config.variant[k] for k in m.get_used_vars()}),\n                    ] = (output_d, m)\n                elif output_d.get(\"type\") == \"wheel\":\n                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n                        build_reqs = output_d.get(\"requirements\", {}).get(\"build\", [])\n",
                    "rendered": {
                      "text": "                        deepfreeze({k: m.config.variant[k] for k in m.get_used_vars()}),\n                    ] = (output_d, m)\n                elif output_d.get(\"type\") == \"wheel\":\n                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n                        build_reqs = output_d.get(\"requirements\", {}).get(\"build\", [])\n",
                      "markdown": "`                        deepfreeze({k: m.config.variant[k] for k in m.get_used_vars()}),\n                    ] = (output_d, m)\n                elif output_d.get(\"type\") == \"wheel\":\n                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n                        build_reqs = output_d.get(\"requirements\", {}).get(\"build\", [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2627,
                  "startColumn": 35,
                  "endLine": 2627,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                        deepfreeze({k: m.config.variant[k] for k in m.get_used_vars()}),\n                    ] = (output_d, m)\n                elif output_d.get(\"type\") == \"wheel\":\n                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n                        build_reqs = output_d.get(\"requirements\", {}).get(\"build\", [])\n",
                    "rendered": {
                      "text": "                        deepfreeze({k: m.config.variant[k] for k in m.get_used_vars()}),\n                    ] = (output_d, m)\n                elif output_d.get(\"type\") == \"wheel\":\n                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n                        build_reqs = output_d.get(\"requirements\", {}).get(\"build\", [])\n",
                      "markdown": "`                        deepfreeze({k: m.config.variant[k] for k in m.get_used_vars()}),\n                    ] = (output_d, m)\n                elif output_d.get(\"type\") == \"wheel\":\n                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n                        build_reqs = output_d.get(\"requirements\", {}).get(\"build\", [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2626,
                  "startColumn": 29,
                  "endLine": 2626,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                        m.name(),\n                        deepfreeze({k: m.config.variant[k] for k in m.get_used_vars()}),\n                    ] = (output_d, m)\n                elif output_d.get(\"type\") == \"wheel\":\n                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n",
                    "rendered": {
                      "text": "                        m.name(),\n                        deepfreeze({k: m.config.variant[k] for k in m.get_used_vars()}),\n                    ] = (output_d, m)\n                elif output_d.get(\"type\") == \"wheel\":\n                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n",
                      "markdown": "`                        m.name(),\n                        deepfreeze({k: m.config.variant[k] for k in m.get_used_vars()}),\n                    ] = (output_d, m)\n                elif output_d.get(\"type\") == \"wheel\":\n                    if not output_d.get(\"requirements\", {}).get(\"build\") or not any(\n                        \"pip\" in req for req in output_d[\"requirements\"][\"build\"]\n                    ):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2618,
                  "startColumn": 31,
                  "endLine": 2618,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            non_conda_packages = []\n\n            for output_d, m in render_order:\n                if not output_d.get(\"type\") or output_d[\"type\"] in (\n                    \"conda\",\n                    \"conda_v2\",\n                ):\n",
                    "rendered": {
                      "text": "            non_conda_packages = []\n\n            for output_d, m in render_order:\n                if not output_d.get(\"type\") or output_d[\"type\"] in (\n                    \"conda\",\n                    \"conda_v2\",\n                ):\n",
                      "markdown": "`            non_conda_packages = []\n\n            for output_d, m in render_order:\n                if not output_d.get(\"type\") or output_d[\"type\"] in (\n                    \"conda\",\n                    \"conda_v2\",\n                ):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2576,
                  "startColumn": 42,
                  "endLine": 2576,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n                try:\n                    for out in outputs:\n                        requirements = out.get(\"requirements\")\n                        if requirements:\n                            requirements = utils.expand_reqs(requirements)\n                            for env in (\"build\", \"host\", \"run\"):\n",
                    "rendered": {
                      "text": "\n                try:\n                    for out in outputs:\n                        requirements = out.get(\"requirements\")\n                        if requirements:\n                            requirements = utils.expand_reqs(requirements)\n                            for env in (\"build\", \"host\", \"run\"):\n",
                      "markdown": "`\n                try:\n                    for out in outputs:\n                        requirements = out.get(\"requirements\")\n                        if requirements:\n                            requirements = utils.expand_reqs(requirements)\n                            for env in (\"build\", \"host\", \"run\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2521,
                  "startColumn": 44,
                  "endLine": 2521,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            and key not in extend_keys\n        ]\n        for key in reduce_keys:\n            values = full_collapsed_variants.get(key)\n            if (\n                values is not None\n                and len(values)\n",
                    "rendered": {
                      "text": "            and key not in extend_keys\n        ]\n        for key in reduce_keys:\n            values = full_collapsed_variants.get(key)\n            if (\n                values is not None\n                and len(values)\n",
                      "markdown": "`            and key not in extend_keys\n        ]\n        for key in reduce_keys:\n            values = full_collapsed_variants.get(key)\n            if (\n                values is not None\n                and len(values)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2513,
                  "startColumn": 45,
                  "endLine": 2513,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            group for group in zip_key_groups if any(set(group) & set(used_variables))\n        ]\n\n        extend_keys = full_collapsed_variants.get(\"extend_keys\", [])\n        reduce_keys = [\n            key\n            for key in reduce_keys\n",
                    "rendered": {
                      "text": "            group for group in zip_key_groups if any(set(group) & set(used_variables))\n        ]\n\n        extend_keys = full_collapsed_variants.get(\"extend_keys\", [])\n        reduce_keys = [\n            key\n            for key in reduce_keys\n",
                      "markdown": "`            group for group in zip_key_groups if any(set(group) & set(used_variables))\n        ]\n\n        extend_keys = full_collapsed_variants.get(\"extend_keys\", [])\n        reduce_keys = [\n            key\n            for key in reduce_keys\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2503,
                  "startColumn": 44,
                  "endLine": 2503,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        reduced_collapsed_variants = full_collapsed_variants.copy()\n        reduce_keys = set(self.config.variants[0].keys()) - set(used_variables)\n\n        zip_key_groups = self.config.variant.get(\"zip_keys\", [])\n        zip_key_groups = (\n            [zip_key_groups]\n            if zip_key_groups and isinstance(zip_key_groups[0], str)\n",
                    "rendered": {
                      "text": "        reduced_collapsed_variants = full_collapsed_variants.copy()\n        reduce_keys = set(self.config.variants[0].keys()) - set(used_variables)\n\n        zip_key_groups = self.config.variant.get(\"zip_keys\", [])\n        zip_key_groups = (\n            [zip_key_groups]\n            if zip_key_groups and isinstance(zip_key_groups[0], str)\n",
                      "markdown": "`        reduced_collapsed_variants = full_collapsed_variants.copy()\n        reduce_keys = set(self.config.variants[0].keys()) - set(used_variables)\n\n        zip_key_groups = self.config.variant.get(\"zip_keys\", [])\n        zip_key_groups = (\n            [zip_key_groups]\n            if zip_key_groups and isinstance(zip_key_groups[0], str)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2489,
                  "startColumn": 25,
                  "endLine": 2489,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        return output_metadata\n\n    def append_parent_metadata(self, out_metadata):\n        extra = self.meta.get(\"extra\", {})\n        extra[\"parent_recipe\"] = {\n            \"path\": self.path,\n            \"name\": self.name(),\n",
                    "rendered": {
                      "text": "        return output_metadata\n\n    def append_parent_metadata(self, out_metadata):\n        extra = self.meta.get(\"extra\", {})\n        extra[\"parent_recipe\"] = {\n            \"path\": self.path,\n            \"name\": self.name(),\n",
                      "markdown": "`        return output_metadata\n\n    def append_parent_metadata(self, out_metadata):\n        extra = self.meta.get(\"extra\", {})\n        extra[\"parent_recipe\"] = {\n            \"path\": self.path,\n            \"name\": self.name(),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2477,
                  "startColumn": 44,
                  "endLine": 2477,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                if build is None:\n                    build = {}\n                if \"number\" not in build:\n                    build[\"number\"] = output.get(\n                        \"number\", output_metadata.build_number()\n                    )\n            output_metadata.meta[\"build\"] = build\n",
                    "rendered": {
                      "text": "                if build is None:\n                    build = {}\n                if \"number\" not in build:\n                    build[\"number\"] = output.get(\n                        \"number\", output_metadata.build_number()\n                    )\n            output_metadata.meta[\"build\"] = build\n",
                      "markdown": "`                if build is None:\n                    build = {}\n                if \"number\" not in build:\n                    build[\"number\"] = output.get(\n                        \"number\", output_metadata.build_number()\n                    )\n            output_metadata.meta[\"build\"] = build\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2456,
                  "startColumn": 40,
                  "endLine": 2456,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            ):\n                output_metadata.config.platform = self.config.platform\n\n            build = output_metadata.meta.get(\"build\", {})\n            # legacy (conda build 2.1.x - 3.0.25). Newer stuff should just emulate\n            #   the top-level recipe, with full sections for build, test, about\n            if \"number\" in output:\n",
                    "rendered": {
                      "text": "            ):\n                output_metadata.config.platform = self.config.platform\n\n            build = output_metadata.meta.get(\"build\", {})\n            # legacy (conda build 2.1.x - 3.0.25). Newer stuff should just emulate\n            #   the top-level recipe, with full sections for build, test, about\n            if \"number\" in output:\n",
                      "markdown": "`            ):\n                output_metadata.config.platform = self.config.platform\n\n            build = output_metadata.meta.get(\"build\", {})\n            # legacy (conda build 2.1.x - 3.0.25). Newer stuff should just emulate\n            #   the top-level recipe, with full sections for build, test, about\n            if \"number\" in output:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2447,
                  "startColumn": 50,
                  "endLine": 2447,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            )\n            output_metadata.final = False\n            output_metadata.noarch = output.get(\"noarch\", False)\n            output_metadata.noarch_python = output.get(\"noarch_python\", False)\n            # primarily for tests - make sure that we keep the platform consistent (setting noarch\n            #      would reset it)\n            if (\n",
                    "rendered": {
                      "text": "            )\n            output_metadata.final = False\n            output_metadata.noarch = output.get(\"noarch\", False)\n            output_metadata.noarch_python = output.get(\"noarch_python\", False)\n            # primarily for tests - make sure that we keep the platform consistent (setting noarch\n            #      would reset it)\n            if (\n",
                      "markdown": "`            )\n            output_metadata.final = False\n            output_metadata.noarch = output.get(\"noarch\", False)\n            output_metadata.noarch_python = output.get(\"noarch_python\", False)\n            # primarily for tests - make sure that we keep the platform consistent (setting noarch\n            #      would reset it)\n            if (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2446,
                  "startColumn": 43,
                  "endLine": 2446,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                output.get(\"version\") or self.version()\n            )\n            output_metadata.final = False\n            output_metadata.noarch = output.get(\"noarch\", False)\n            output_metadata.noarch_python = output.get(\"noarch_python\", False)\n            # primarily for tests - make sure that we keep the platform consistent (setting noarch\n            #      would reset it)\n",
                    "rendered": {
                      "text": "                output.get(\"version\") or self.version()\n            )\n            output_metadata.final = False\n            output_metadata.noarch = output.get(\"noarch\", False)\n            output_metadata.noarch_python = output.get(\"noarch_python\", False)\n            # primarily for tests - make sure that we keep the platform consistent (setting noarch\n            #      would reset it)\n",
                      "markdown": "`                output.get(\"version\") or self.version()\n            )\n            output_metadata.final = False\n            output_metadata.noarch = output.get(\"noarch\", False)\n            output_metadata.noarch_python = output.get(\"noarch_python\", False)\n            # primarily for tests - make sure that we keep the platform consistent (setting noarch\n            #      would reset it)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2443,
                  "startColumn": 22,
                  "endLine": 2443,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            output_metadata.meta[\"requirements\"] = requirements\n\n            output_metadata.meta[\"package\"][\"version\"] = (\n                output.get(\"version\") or self.version()\n            )\n            output_metadata.final = False\n            output_metadata.noarch = output.get(\"noarch\", False)\n",
                    "rendered": {
                      "text": "            output_metadata.meta[\"requirements\"] = requirements\n\n            output_metadata.meta[\"package\"][\"version\"] = (\n                output.get(\"version\") or self.version()\n            )\n            output_metadata.final = False\n            output_metadata.noarch = output.get(\"noarch\", False)\n",
                      "markdown": "`            output_metadata.meta[\"requirements\"] = requirements\n\n            output_metadata.meta[\"package\"][\"version\"] = (\n                output.get(\"version\") or self.version()\n            )\n            output_metadata.final = False\n            output_metadata.noarch = output.get(\"noarch\", False)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2408,
                  "startColumn": 41,
                  "endLine": 2408,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            ):\n                self.reconcile_metadata_with_output_dict(output_metadata, output)\n\n            output_metadata.type = output.get(\n                \"type\", \"conda_v2\" if self.config.conda_pkg_format == \"2\" else \"conda\"\n            )\n\n",
                    "rendered": {
                      "text": "            ):\n                self.reconcile_metadata_with_output_dict(output_metadata, output)\n\n            output_metadata.type = output.get(\n                \"type\", \"conda_v2\" if self.config.conda_pkg_format == \"2\" else \"conda\"\n            )\n\n",
                      "markdown": "`            ):\n                self.reconcile_metadata_with_output_dict(output_metadata, output)\n\n            output_metadata.type = output.get(\n                \"type\", \"conda_v2\" if self.config.conda_pkg_format == \"2\" else \"conda\"\n            )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2404,
                  "startColumn": 46,
                  "endLine": 2404,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                output_metadata.config.target_subdir = output[\"target\"]\n\n            if self.name() != output.get(\"name\") or (\n                output.get(\"script\") or output.get(\"files\")\n            ):\n                self.reconcile_metadata_with_output_dict(output_metadata, output)\n\n",
                    "rendered": {
                      "text": "                output_metadata.config.target_subdir = output[\"target\"]\n\n            if self.name() != output.get(\"name\") or (\n                output.get(\"script\") or output.get(\"files\")\n            ):\n                self.reconcile_metadata_with_output_dict(output_metadata, output)\n\n",
                      "markdown": "`                output_metadata.config.target_subdir = output[\"target\"]\n\n            if self.name() != output.get(\"name\") or (\n                output.get(\"script\") or output.get(\"files\")\n            ):\n                self.reconcile_metadata_with_output_dict(output_metadata, output)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2404,
                  "startColumn": 22,
                  "endLine": 2404,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                output_metadata.config.target_subdir = output[\"target\"]\n\n            if self.name() != output.get(\"name\") or (\n                output.get(\"script\") or output.get(\"files\")\n            ):\n                self.reconcile_metadata_with_output_dict(output_metadata, output)\n\n",
                    "rendered": {
                      "text": "                output_metadata.config.target_subdir = output[\"target\"]\n\n            if self.name() != output.get(\"name\") or (\n                output.get(\"script\") or output.get(\"files\")\n            ):\n                self.reconcile_metadata_with_output_dict(output_metadata, output)\n\n",
                      "markdown": "`                output_metadata.config.target_subdir = output[\"target\"]\n\n            if self.name() != output.get(\"name\") or (\n                output.get(\"script\") or output.get(\"files\")\n            ):\n                self.reconcile_metadata_with_output_dict(output_metadata, output)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2403,
                  "startColumn": 36,
                  "endLine": 2403,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            if output.get(\"target\"):\n                output_metadata.config.target_subdir = output[\"target\"]\n\n            if self.name() != output.get(\"name\") or (\n                output.get(\"script\") or output.get(\"files\")\n            ):\n                self.reconcile_metadata_with_output_dict(output_metadata, output)\n",
                    "rendered": {
                      "text": "            if output.get(\"target\"):\n                output_metadata.config.target_subdir = output[\"target\"]\n\n            if self.name() != output.get(\"name\") or (\n                output.get(\"script\") or output.get(\"files\")\n            ):\n                self.reconcile_metadata_with_output_dict(output_metadata, output)\n",
                      "markdown": "`            if output.get(\"target\"):\n                output_metadata.config.target_subdir = output[\"target\"]\n\n            if self.name() != output.get(\"name\") or (\n                output.get(\"script\") or output.get(\"files\")\n            ):\n                self.reconcile_metadata_with_output_dict(output_metadata, output)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2400,
                  "startColumn": 21,
                  "endLine": 2400,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                if k not in (\"build\", \"host\", \"run\", \"run_constrained\")\n            }\n\n            if output.get(\"target\"):\n                output_metadata.config.target_subdir = output[\"target\"]\n\n            if self.name() != output.get(\"name\") or (\n",
                    "rendered": {
                      "text": "                if k not in (\"build\", \"host\", \"run\", \"run_constrained\")\n            }\n\n            if output.get(\"target\"):\n                output_metadata.config.target_subdir = output[\"target\"]\n\n            if self.name() != output.get(\"name\") or (\n",
                      "markdown": "`                if k not in (\"build\", \"host\", \"run\", \"run_constrained\")\n            }\n\n            if output.get(\"target\"):\n                output_metadata.config.target_subdir = output[\"target\"]\n\n            if self.name() != output.get(\"name\") or (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2392,
                  "startColumn": 40,
                  "endLine": 2392,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n            constrain_reqs = output_reqs.get(\"run_constrained\", [])\n            # pass through any other unrecognized req types\n            other_reqs = {\n                k: v\n",
                    "rendered": {
                      "text": "            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n            constrain_reqs = output_reqs.get(\"run_constrained\", [])\n            # pass through any other unrecognized req types\n            other_reqs = {\n                k: v\n",
                      "markdown": "`            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n            constrain_reqs = output_reqs.get(\"run_constrained\", [])\n            # pass through any other unrecognized req types\n            other_reqs = {\n                k: v\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2391,
                  "startColumn": 34,
                  "endLine": 2391,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            output_reqs = utils.expand_reqs(output.get(\"requirements\", {}))\n            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n            constrain_reqs = output_reqs.get(\"run_constrained\", [])\n            # pass through any other unrecognized req types\n            other_reqs = {\n",
                    "rendered": {
                      "text": "            output_reqs = utils.expand_reqs(output.get(\"requirements\", {}))\n            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n            constrain_reqs = output_reqs.get(\"run_constrained\", [])\n            # pass through any other unrecognized req types\n            other_reqs = {\n",
                      "markdown": "`            output_reqs = utils.expand_reqs(output.get(\"requirements\", {}))\n            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n            constrain_reqs = output_reqs.get(\"run_constrained\", [])\n            # pass through any other unrecognized req types\n            other_reqs = {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2390,
                  "startColumn": 35,
                  "endLine": 2390,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            output_metadata = self.copy()\n            output_reqs = utils.expand_reqs(output.get(\"requirements\", {}))\n            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n            constrain_reqs = output_reqs.get(\"run_constrained\", [])\n            # pass through any other unrecognized req types\n",
                    "rendered": {
                      "text": "            output_metadata = self.copy()\n            output_reqs = utils.expand_reqs(output.get(\"requirements\", {}))\n            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n            constrain_reqs = output_reqs.get(\"run_constrained\", [])\n            # pass through any other unrecognized req types\n",
                      "markdown": "`            output_metadata = self.copy()\n            output_reqs = utils.expand_reqs(output.get(\"requirements\", {}))\n            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n            constrain_reqs = output_reqs.get(\"run_constrained\", [])\n            # pass through any other unrecognized req types\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2389,
                  "startColumn": 36,
                  "endLine": 2389,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        else:\n            output_metadata = self.copy()\n            output_reqs = utils.expand_reqs(output.get(\"requirements\", {}))\n            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n            constrain_reqs = output_reqs.get(\"run_constrained\", [])\n",
                    "rendered": {
                      "text": "        else:\n            output_metadata = self.copy()\n            output_reqs = utils.expand_reqs(output.get(\"requirements\", {}))\n            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n            constrain_reqs = output_reqs.get(\"run_constrained\", [])\n",
                      "markdown": "`        else:\n            output_metadata = self.copy()\n            output_reqs = utils.expand_reqs(output.get(\"requirements\", {}))\n            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n            constrain_reqs = output_reqs.get(\"run_constrained\", [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2388,
                  "startColumn": 50,
                  "endLine": 2388,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n        else:\n            output_metadata = self.copy()\n            output_reqs = utils.expand_reqs(output.get(\"requirements\", {}))\n            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n",
                    "rendered": {
                      "text": "\n        else:\n            output_metadata = self.copy()\n            output_reqs = utils.expand_reqs(output.get(\"requirements\", {}))\n            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n",
                      "markdown": "`\n        else:\n            output_metadata = self.copy()\n            output_reqs = utils.expand_reqs(output.get(\"requirements\", {}))\n            build_reqs = output_reqs.get(\"build\", [])\n            host_reqs = output_reqs.get(\"host\", [])\n            run_reqs = output_reqs.get(\"run\", [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2382,
                  "startColumn": 41,
                  "endLine": 2382,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    def get_output_metadata(self, output):\n        if output.get(\"name\") == self.name():\n            output_metadata = self.copy()\n            output_metadata.type = output.get(\n                \"type\", \"conda_v2\" if self.config.conda_pkg_format == \"2\" else \"conda\"\n            )\n\n",
                    "rendered": {
                      "text": "    def get_output_metadata(self, output):\n        if output.get(\"name\") == self.name():\n            output_metadata = self.copy()\n            output_metadata.type = output.get(\n                \"type\", \"conda_v2\" if self.config.conda_pkg_format == \"2\" else \"conda\"\n            )\n\n",
                      "markdown": "`    def get_output_metadata(self, output):\n        if output.get(\"name\") == self.name():\n            output_metadata = self.copy()\n            output_metadata.type = output.get(\n                \"type\", \"conda_v2\" if self.config.conda_pkg_format == \"2\" else \"conda\"\n            )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2380,
                  "startColumn": 17,
                  "endLine": 2380,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        output_metadata._meta_path = \"\"\n\n    def get_output_metadata(self, output):\n        if output.get(\"name\") == self.name():\n            output_metadata = self.copy()\n            output_metadata.type = output.get(\n                \"type\", \"conda_v2\" if self.config.conda_pkg_format == \"2\" else \"conda\"\n",
                    "rendered": {
                      "text": "        output_metadata._meta_path = \"\"\n\n    def get_output_metadata(self, output):\n        if output.get(\"name\") == self.name():\n            output_metadata = self.copy()\n            output_metadata.type = output.get(\n                \"type\", \"conda_v2\" if self.config.conda_pkg_format == \"2\" else \"conda\"\n",
                      "markdown": "`        output_metadata._meta_path = \"\"\n\n    def get_output_metadata(self, output):\n        if output.get(\"name\") == self.name():\n            output_metadata = self.copy()\n            output_metadata.type = output.get(\n                \"type\", \"conda_v2\" if self.config.conda_pkg_format == \"2\" else \"conda\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2367,
                  "startColumn": 36,
                  "endLine": 2367,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                del test[\"imports\"]\n\n        # make sure that subpackages do not duplicate top-level entry-points or run_exports\n        build = output_metadata.meta.get(\"build\", {})\n        transfer_keys = \"entry_points\", \"run_exports\", \"script\"\n        for key in transfer_keys:\n            if key in output_dict:\n",
                    "rendered": {
                      "text": "                del test[\"imports\"]\n\n        # make sure that subpackages do not duplicate top-level entry-points or run_exports\n        build = output_metadata.meta.get(\"build\", {})\n        transfer_keys = \"entry_points\", \"run_exports\", \"script\"\n        for key in transfer_keys:\n            if key in output_dict:\n",
                      "markdown": "`                del test[\"imports\"]\n\n        # make sure that subpackages do not duplicate top-level entry-points or run_exports\n        build = output_metadata.meta.get(\"build\", {})\n        transfer_keys = \"entry_points\", \"run_exports\", \"script\"\n        for key in transfer_keys:\n            if key in output_dict:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2359,
                  "startColumn": 52,
                  "endLine": 2359,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n        if output_dict.get(\"name\") != self.name() or not (\n            output_dict.get(\"script\") or output_dict.get(\"files\")\n        ):\n            if \"commands\" in test:\n                del test[\"commands\"]\n",
                    "rendered": {
                      "text": "        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n        if output_dict.get(\"name\") != self.name() or not (\n            output_dict.get(\"script\") or output_dict.get(\"files\")\n        ):\n            if \"commands\" in test:\n                del test[\"commands\"]\n",
                      "markdown": "`        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n        if output_dict.get(\"name\") != self.name() or not (\n            output_dict.get(\"script\") or output_dict.get(\"files\")\n        ):\n            if \"commands\" in test:\n                del test[\"commands\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2359,
                  "startColumn": 23,
                  "endLine": 2359,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n        if output_dict.get(\"name\") != self.name() or not (\n            output_dict.get(\"script\") or output_dict.get(\"files\")\n        ):\n            if \"commands\" in test:\n                del test[\"commands\"]\n",
                    "rendered": {
                      "text": "        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n        if output_dict.get(\"name\") != self.name() or not (\n            output_dict.get(\"script\") or output_dict.get(\"files\")\n        ):\n            if \"commands\" in test:\n                del test[\"commands\"]\n",
                      "markdown": "`        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n        if output_dict.get(\"name\") != self.name() or not (\n            output_dict.get(\"script\") or output_dict.get(\"files\")\n        ):\n            if \"commands\" in test:\n                del test[\"commands\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2358,
                  "startColumn": 22,
                  "endLine": 2358,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n        if output_dict.get(\"name\") != self.name() or not (\n            output_dict.get(\"script\") or output_dict.get(\"files\")\n        ):\n            if \"commands\" in test:\n",
                    "rendered": {
                      "text": "\n        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n        if output_dict.get(\"name\") != self.name() or not (\n            output_dict.get(\"script\") or output_dict.get(\"files\")\n        ):\n            if \"commands\" in test:\n",
                      "markdown": "`\n        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n        if output_dict.get(\"name\") != self.name() or not (\n            output_dict.get(\"script\") or output_dict.get(\"files\")\n        ):\n            if \"commands\" in test:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2357,
                  "startColumn": 35,
                  "endLine": 2357,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        output_metadata.meta[\"package\"][\"name\"] = output_dict.get(\"name\", self.name())\n\n        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n        if output_dict.get(\"name\") != self.name() or not (\n            output_dict.get(\"script\") or output_dict.get(\"files\")\n        ):\n",
                    "rendered": {
                      "text": "        output_metadata.meta[\"package\"][\"name\"] = output_dict.get(\"name\", self.name())\n\n        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n        if output_dict.get(\"name\") != self.name() or not (\n            output_dict.get(\"script\") or output_dict.get(\"files\")\n        ):\n",
                      "markdown": "`        output_metadata.meta[\"package\"][\"name\"] = output_dict.get(\"name\", self.name())\n\n        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n        if output_dict.get(\"name\") != self.name() or not (\n            output_dict.get(\"script\") or output_dict.get(\"files\")\n        ):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2354,
                  "startColumn": 61,
                  "endLine": 2354,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        )\n\n    def reconcile_metadata_with_output_dict(self, output_metadata, output_dict):\n        output_metadata.meta[\"package\"][\"name\"] = output_dict.get(\"name\", self.name())\n\n        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n",
                    "rendered": {
                      "text": "        )\n\n    def reconcile_metadata_with_output_dict(self, output_metadata, output_dict):\n        output_metadata.meta[\"package\"][\"name\"] = output_dict.get(\"name\", self.name())\n\n        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n",
                      "markdown": "`        )\n\n    def reconcile_metadata_with_output_dict(self, output_metadata, output_dict):\n        output_metadata.meta[\"package\"][\"name\"] = output_dict.get(\"name\", self.name())\n\n        # make sure that subpackages do not duplicate tests from top-level recipe\n        test = output_metadata.meta.get(\"test\", {})\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2224,
                  "startColumn": 59,
                  "endLine": 2224,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                output_index = output_tuples.index(output_name)\n            output = output_matches[output_index] if output_matches else \"\"\n        except ValueError:\n            if not self.path and self.meta.get(\"extra\", {}).get(\"parent_recipe\"):\n                utils.get_logger(__name__).warning(\n                    f\"Didn't match any output in raw metadata.  Target value was: {output_name}\"\n                )\n",
                    "rendered": {
                      "text": "                output_index = output_tuples.index(output_name)\n            output = output_matches[output_index] if output_matches else \"\"\n        except ValueError:\n            if not self.path and self.meta.get(\"extra\", {}).get(\"parent_recipe\"):\n                utils.get_logger(__name__).warning(\n                    f\"Didn't match any output in raw metadata.  Target value was: {output_name}\"\n                )\n",
                      "markdown": "`                output_index = output_tuples.index(output_name)\n            output = output_matches[output_index] if output_matches else \"\"\n        except ValueError:\n            if not self.path and self.meta.get(\"extra\", {}).get(\"parent_recipe\"):\n                utils.get_logger(__name__).warning(\n                    f\"Didn't match any output in raw metadata.  Target value was: {output_name}\"\n                )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2224,
                  "startColumn": 42,
                  "endLine": 2224,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                output_index = output_tuples.index(output_name)\n            output = output_matches[output_index] if output_matches else \"\"\n        except ValueError:\n            if not self.path and self.meta.get(\"extra\", {}).get(\"parent_recipe\"):\n                utils.get_logger(__name__).warning(\n                    f\"Didn't match any output in raw metadata.  Target value was: {output_name}\"\n                )\n",
                    "rendered": {
                      "text": "                output_index = output_tuples.index(output_name)\n            output = output_matches[output_index] if output_matches else \"\"\n        except ValueError:\n            if not self.path and self.meta.get(\"extra\", {}).get(\"parent_recipe\"):\n                utils.get_logger(__name__).warning(\n                    f\"Didn't match any output in raw metadata.  Target value was: {output_name}\"\n                )\n",
                      "markdown": "`                output_index = output_tuples.index(output_name)\n            output = output_matches[output_index] if output_matches else \"\"\n        except ValueError:\n            if not self.path and self.meta.get(\"extra\", {}).get(\"parent_recipe\"):\n                utils.get_logger(__name__).warning(\n                    f\"Didn't match any output in raw metadata.  Target value was: {output_name}\"\n                )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2220,
                  "startColumn": 36,
                  "endLine": 2220,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                ]\n                output_index = output_tuples.index((output_name, output_type))\n            else:\n                output_tuples = [out.get(\"name\", self.name()) for out in outputs]\n                output_index = output_tuples.index(output_name)\n            output = output_matches[output_index] if output_matches else \"\"\n        except ValueError:\n",
                    "rendered": {
                      "text": "                ]\n                output_index = output_tuples.index((output_name, output_type))\n            else:\n                output_tuples = [out.get(\"name\", self.name()) for out in outputs]\n                output_index = output_tuples.index(output_name)\n            output = output_matches[output_index] if output_matches else \"\"\n        except ValueError:\n",
                      "markdown": "`                ]\n                output_index = output_tuples.index((output_name, output_type))\n            else:\n                output_tuples = [out.get(\"name\", self.name()) for out in outputs]\n                output_index = output_tuples.index(output_name)\n            output = output_matches[output_index] if output_matches else \"\"\n        except ValueError:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2209,
                  "startColumn": 27,
                  "endLine": 2209,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                output_tuples = [\n                    (\n                        out.get(\"name\", self.name()),\n                        out.get(\n                            \"type\",\n                            \"conda_v2\"\n                            if self.config.conda_pkg_format == \"2\"\n",
                    "rendered": {
                      "text": "                output_tuples = [\n                    (\n                        out.get(\"name\", self.name()),\n                        out.get(\n                            \"type\",\n                            \"conda_v2\"\n                            if self.config.conda_pkg_format == \"2\"\n",
                      "markdown": "`                output_tuples = [\n                    (\n                        out.get(\"name\", self.name()),\n                        out.get(\n                            \"type\",\n                            \"conda_v2\"\n                            if self.config.conda_pkg_format == \"2\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2208,
                  "startColumn": 27,
                  "endLine": 2208,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            if output_type:\n                output_tuples = [\n                    (\n                        out.get(\"name\", self.name()),\n                        out.get(\n                            \"type\",\n                            \"conda_v2\"\n",
                    "rendered": {
                      "text": "            if output_type:\n                output_tuples = [\n                    (\n                        out.get(\"name\", self.name()),\n                        out.get(\n                            \"type\",\n                            \"conda_v2\"\n",
                      "markdown": "`            if output_type:\n                output_tuples = [\n                    (\n                        out.get(\"name\", self.name()),\n                        out.get(\n                            \"type\",\n                            \"conda_v2\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2198,
                  "startColumn": 27,
                  "endLine": 2198,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        #    We have to do this on rendered data, because templates can be used in output names\n        recipe_text = self.extract_outputs_text(apply_selectors=apply_selectors)\n        output_matches = output_re.findall(recipe_text)\n        outputs = self.meta.get(\"outputs\") or (\n            self.parent_outputs if hasattr(self, \"parent_outputs\") else None\n        )\n        if not outputs:\n",
                    "rendered": {
                      "text": "        #    We have to do this on rendered data, because templates can be used in output names\n        recipe_text = self.extract_outputs_text(apply_selectors=apply_selectors)\n        output_matches = output_re.findall(recipe_text)\n        outputs = self.meta.get(\"outputs\") or (\n            self.parent_outputs if hasattr(self, \"parent_outputs\") else None\n        )\n        if not outputs:\n",
                      "markdown": "`        #    We have to do this on rendered data, because templates can be used in output names\n        recipe_text = self.extract_outputs_text(apply_selectors=apply_selectors)\n        output_matches = output_re.findall(recipe_text)\n        outputs = self.meta.get(\"outputs\") or (\n            self.parent_outputs if hasattr(self, \"parent_outputs\") else None\n        )\n        if not outputs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2041,
                  "startColumn": 56,
                  "endLine": 2041,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        meta_path = (\n            self._meta_path\n            # get the parent recipe path if this is a subpackage\n            or self.get_value(\"extra/parent_recipe\", {}).get(\"path\", \"\")\n        )\n        if meta_path and os.path.basename(meta_path) != self._meta_name:\n            meta_path = os.path.join(meta_path, self._meta_name)\n",
                    "rendered": {
                      "text": "        meta_path = (\n            self._meta_path\n            # get the parent recipe path if this is a subpackage\n            or self.get_value(\"extra/parent_recipe\", {}).get(\"path\", \"\")\n        )\n        if meta_path and os.path.basename(meta_path) != self._meta_name:\n            meta_path = os.path.join(meta_path, self._meta_name)\n",
                      "markdown": "`        meta_path = (\n            self._meta_path\n            # get the parent recipe path if this is a subpackage\n            or self.get_value(\"extra/parent_recipe\", {}).get(\"path\", \"\")\n        )\n        if meta_path and os.path.basename(meta_path) != self._meta_name:\n            meta_path = os.path.join(meta_path, self._meta_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1946,
                  "startColumn": 35,
                  "endLine": 1946,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        ]\n\n        # search relative to current conda environment directory\n        conda_env_path = os.environ.get(\n            \"CONDA_DEFAULT_ENV\"\n        )  # path to current conda environment\n        if conda_env_path and os.path.isdir(conda_env_path):\n",
                    "rendered": {
                      "text": "        ]\n\n        # search relative to current conda environment directory\n        conda_env_path = os.environ.get(\n            \"CONDA_DEFAULT_ENV\"\n        )  # path to current conda environment\n        if conda_env_path and os.path.isdir(conda_env_path):\n",
                      "markdown": "`        ]\n\n        # search relative to current conda environment directory\n        conda_env_path = os.environ.get(\n            \"CONDA_DEFAULT_ENV\"\n        )  # path to current conda environment\n        if conda_env_path and os.path.isdir(conda_env_path):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1781,
                  "startColumn": 25,
                  "endLine": 1781,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            platform=self.config.host_platform\n            if (self.config.host_platform != \"noarch\" and arch != \"noarch\")\n            else None,\n            arch=ARCH_MAP.get(arch, arch),\n            subdir=self.config.target_subdir,\n            depends=sorted(\" \".join(ms.spec.split()) for ms in self.ms_depends()),\n            timestamp=int(time.time() * 1000),\n",
                    "rendered": {
                      "text": "            platform=self.config.host_platform\n            if (self.config.host_platform != \"noarch\" and arch != \"noarch\")\n            else None,\n            arch=ARCH_MAP.get(arch, arch),\n            subdir=self.config.target_subdir,\n            depends=sorted(\" \".join(ms.spec.split()) for ms in self.ms_depends()),\n            timestamp=int(time.time() * 1000),\n",
                      "markdown": "`            platform=self.config.host_platform\n            if (self.config.host_platform != \"noarch\" and arch != \"noarch\")\n            else None,\n            arch=ARCH_MAP.get(arch, arch),\n            subdir=self.config.target_subdir,\n            depends=sorted(\" \".join(ms.spec.split()) for ms in self.ms_depends()),\n            timestamp=int(time.time() * 1000),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1683,
                  "startColumn": 52,
                  "endLine": 1683,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            hash_contents = {key: self.config.variant[key] for key in dependencies}\n\n        # include virtual packages in run\n        run_reqs = self.meta.get(\"requirements\", {}).get(\"run\", [])\n        virtual_pkgs = [req for req in run_reqs if req.startswith(\"__\")]\n\n        # add name -> match spec mapping for virtual packages\n",
                    "rendered": {
                      "text": "            hash_contents = {key: self.config.variant[key] for key in dependencies}\n\n        # include virtual packages in run\n        run_reqs = self.meta.get(\"requirements\", {}).get(\"run\", [])\n        virtual_pkgs = [req for req in run_reqs if req.startswith(\"__\")]\n\n        # add name -> match spec mapping for virtual packages\n",
                      "markdown": "`            hash_contents = {key: self.config.variant[key] for key in dependencies}\n\n        # include virtual packages in run\n        run_reqs = self.meta.get(\"requirements\", {}).get(\"run\", [])\n        virtual_pkgs = [req for req in run_reqs if req.startswith(\"__\")]\n\n        # add name -> match spec mapping for virtual packages\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1683,
                  "startColumn": 28,
                  "endLine": 1683,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            hash_contents = {key: self.config.variant[key] for key in dependencies}\n\n        # include virtual packages in run\n        run_reqs = self.meta.get(\"requirements\", {}).get(\"run\", [])\n        virtual_pkgs = [req for req in run_reqs if req.startswith(\"__\")]\n\n        # add name -> match spec mapping for virtual packages\n",
                    "rendered": {
                      "text": "            hash_contents = {key: self.config.variant[key] for key in dependencies}\n\n        # include virtual packages in run\n        run_reqs = self.meta.get(\"requirements\", {}).get(\"run\", [])\n        virtual_pkgs = [req for req in run_reqs if req.startswith(\"__\")]\n\n        # add name -> match spec mapping for virtual packages\n",
                      "markdown": "`            hash_contents = {key: self.config.variant[key] for key in dependencies}\n\n        # include virtual packages in run\n        run_reqs = self.meta.get(\"requirements\", {}).get(\"run\", [])\n        virtual_pkgs = [req for req in run_reqs if req.startswith(\"__\")]\n\n        # add name -> match spec mapping for virtual packages\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1655,
                  "startColumn": 43,
                  "endLine": 1655,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        # filter out ignored versions\n        build_string_excludes = [\"python\", \"r_base\", \"perl\", \"lua\"]\n        build_string_excludes.extend(\n            ensure_list(self.config.variant.get(\"ignore_version\", []))\n        )\n        if \"numpy\" in dependencies:\n            pin_compatible, not_xx = self.uses_numpy_pin_compatible_without_xx\n",
                    "rendered": {
                      "text": "        # filter out ignored versions\n        build_string_excludes = [\"python\", \"r_base\", \"perl\", \"lua\"]\n        build_string_excludes.extend(\n            ensure_list(self.config.variant.get(\"ignore_version\", []))\n        )\n        if \"numpy\" in dependencies:\n            pin_compatible, not_xx = self.uses_numpy_pin_compatible_without_xx\n",
                      "markdown": "`        # filter out ignored versions\n        build_string_excludes = [\"python\", \"r_base\", \"perl\", \"lua\"]\n        build_string_excludes.extend(\n            ensure_list(self.config.variant.get(\"ignore_version\", []))\n        )\n        if \"numpy\" in dependencies:\n            pin_compatible, not_xx = self.uses_numpy_pin_compatible_without_xx\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1576,
                  "startColumn": 30,
                  "endLine": 1576,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            for name in names\n            if self.config.variant.get(name)\n        ]\n        if self.config.variant.get(\"r_base\"):\n            # r is kept for legacy installations, r-base deprecates it.\n            name_ver_list.extend(\n                [\n",
                    "rendered": {
                      "text": "            for name in names\n            if self.config.variant.get(name)\n        ]\n        if self.config.variant.get(\"r_base\"):\n            # r is kept for legacy installations, r-base deprecates it.\n            name_ver_list.extend(\n                [\n",
                      "markdown": "`            for name in names\n            if self.config.variant.get(name)\n        ]\n        if self.config.variant.get(\"r_base\"):\n            # r is kept for legacy installations, r-base deprecates it.\n            name_ver_list.extend(\n                [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1574,
                  "startColumn": 34,
                  "endLine": 1574,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        name_ver_list = [\n            (name, self.config.variant[name])\n            for name in names\n            if self.config.variant.get(name)\n        ]\n        if self.config.variant.get(\"r_base\"):\n            # r is kept for legacy installations, r-base deprecates it.\n",
                    "rendered": {
                      "text": "        name_ver_list = [\n            (name, self.config.variant[name])\n            for name in names\n            if self.config.variant.get(name)\n        ]\n        if self.config.variant.get(\"r_base\"):\n            # r is kept for legacy installations, r-base deprecates it.\n",
                      "markdown": "`        name_ver_list = [\n            (name, self.config.variant[name])\n            for name in names\n            if self.config.variant.get(name)\n        ]\n        if self.config.variant.get(\"r_base\"):\n            # r is kept for legacy installations, r-base deprecates it.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1560,
                  "startColumn": 17,
                  "endLine": 1560,
                  "endColumn": 22,
                  "snippet": {
                    "text": "            if matching_output:\n                extra_reqs = utils.expand_reqs(\n                    matching_output[0].get(\"requirements\", [])\n                ).get(typ, [])\n                extra_reqs = [\n                    dep for dep in extra_reqs if dep.split()[0] not in req_names\n                ]\n",
                    "rendered": {
                      "text": "            if matching_output:\n                extra_reqs = utils.expand_reqs(\n                    matching_output[0].get(\"requirements\", [])\n                ).get(typ, [])\n                extra_reqs = [\n                    dep for dep in extra_reqs if dep.split()[0] not in req_names\n                ]\n",
                      "markdown": "`            if matching_output:\n                extra_reqs = utils.expand_reqs(\n                    matching_output[0].get(\"requirements\", [])\n                ).get(typ, [])\n                extra_reqs = [\n                    dep for dep in extra_reqs if dep.split()[0] not in req_names\n                ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1559,
                  "startColumn": 38,
                  "endLine": 1559,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            ]\n            if matching_output:\n                extra_reqs = utils.expand_reqs(\n                    matching_output[0].get(\"requirements\", [])\n                ).get(typ, [])\n                extra_reqs = [\n                    dep for dep in extra_reqs if dep.split()[0] not in req_names\n",
                    "rendered": {
                      "text": "            ]\n            if matching_output:\n                extra_reqs = utils.expand_reqs(\n                    matching_output[0].get(\"requirements\", [])\n                ).get(typ, [])\n                extra_reqs = [\n                    dep for dep in extra_reqs if dep.split()[0] not in req_names\n",
                      "markdown": "`            ]\n            if matching_output:\n                extra_reqs = utils.expand_reqs(\n                    matching_output[0].get(\"requirements\", [])\n                ).get(typ, [])\n                extra_reqs = [\n                    dep for dep in extra_reqs if dep.split()[0] not in req_names\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1555,
                  "startColumn": 22,
                  "endLine": 1555,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            matching_output = [\n                out\n                for out in self.get_section(\"outputs\")\n                if out.get(\"name\") == self.name()\n            ]\n            if matching_output:\n                extra_reqs = utils.expand_reqs(\n",
                    "rendered": {
                      "text": "            matching_output = [\n                out\n                for out in self.get_section(\"outputs\")\n                if out.get(\"name\") == self.name()\n            ]\n            if matching_output:\n                extra_reqs = utils.expand_reqs(\n",
                      "markdown": "`            matching_output = [\n                out\n                for out in self.get_section(\"outputs\")\n                if out.get(\"name\") == self.name()\n            ]\n            if matching_output:\n                extra_reqs = utils.expand_reqs(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1474,
                  "startColumn": 28,
                  "endLine": 1474,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                    section_data, dict\n                ), f\"Expected {section}/{index} to be a dict\"\n\n        value = section_data.get(key, default)\n\n        # handle yaml 1.1 boolean values\n        if isinstance(value, str):\n",
                    "rendered": {
                      "text": "                    section_data, dict\n                ), f\"Expected {section}/{index} to be a dict\"\n\n        value = section_data.get(key, default)\n\n        # handle yaml 1.1 boolean values\n        if isinstance(value, str):\n",
                      "markdown": "`                    section_data, dict\n                ), f\"Expected {section}/{index} to be a dict\"\n\n        value = section_data.get(key, default)\n\n        # handle yaml 1.1 boolean values\n        if isinstance(value, str):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1448,
                  "startColumn": 67,
                  "endLine": 1448,
                  "endColumn": 72,
                  "snippet": {
                    "text": "            index = int(index)\n\n        # get correct default\n        if autotype and default is None and FIELDS.get(section, {}).get(key):\n            default = FIELDS[section][key]()\n\n        section_data = self.get_section(section)\n",
                    "rendered": {
                      "text": "            index = int(index)\n\n        # get correct default\n        if autotype and default is None and FIELDS.get(section, {}).get(key):\n            default = FIELDS[section][key]()\n\n        section_data = self.get_section(section)\n",
                      "markdown": "`            index = int(index)\n\n        # get correct default\n        if autotype and default is None and FIELDS.get(section, {}).get(key):\n            default = FIELDS[section][key]()\n\n        section_data = self.get_section(section)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1448,
                  "startColumn": 50,
                  "endLine": 1448,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            index = int(index)\n\n        # get correct default\n        if autotype and default is None and FIELDS.get(section, {}).get(key):\n            default = FIELDS[section][key]()\n\n        section_data = self.get_section(section)\n",
                    "rendered": {
                      "text": "            index = int(index)\n\n        # get correct default\n        if autotype and default is None and FIELDS.get(section, {}).get(key):\n            default = FIELDS[section][key]()\n\n        section_data = self.get_section(section)\n",
                      "markdown": "`            index = int(index)\n\n        # get correct default\n        if autotype and default is None and FIELDS.get(section, {}).get(key):\n            default = FIELDS[section][key]()\n\n        section_data = self.get_section(section)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1409,
                  "startColumn": 27,
                  "endLine": 1409,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    ) -> dict: ...\n\n    def get_section(self, name):\n        section = self.meta.get(name)\n        if name in OPTIONALLY_ITERABLE_FIELDS:\n            if not section:\n                return []\n",
                    "rendered": {
                      "text": "    ) -> dict: ...\n\n    def get_section(self, name):\n        section = self.meta.get(name)\n        if name in OPTIONALLY_ITERABLE_FIELDS:\n            if not section:\n                return []\n",
                      "markdown": "`    ) -> dict: ...\n\n    def get_section(self, name):\n        section = self.meta.get(name)\n        if name in OPTIONALLY_ITERABLE_FIELDS:\n            if not section:\n                return []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1229,
                  "startColumn": 63,
                  "endLine": 1229,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\n    @property\n    def is_output(self) -> str:\n        parent_name = self.get_value(\"extra/parent_recipe\", {}).get(\"name\")\n        return parent_name and parent_name != self.name()\n\n    def parse_again(\n",
                    "rendered": {
                      "text": "\n    @property\n    def is_output(self) -> str:\n        parent_name = self.get_value(\"extra/parent_recipe\", {}).get(\"name\")\n        return parent_name and parent_name != self.name()\n\n    def parse_again(\n",
                      "markdown": "`\n    @property\n    def is_output(self) -> str:\n        parent_name = self.get_value(\"extra/parent_recipe\", {}).get(\"name\")\n        return parent_name and parent_name != self.name()\n\n    def parse_again(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1120,
                  "startColumn": 49,
                  "endLine": 1120,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n    to_remove = set()\n    ignore_build_only_deps = sorted(\n        utils.ensure_list(metadata.config.variant.get(\"ignore_build_only_deps\", []))\n    )\n\n    for dep in requirements_used:\n",
                    "rendered": {
                      "text": "\n    to_remove = set()\n    ignore_build_only_deps = sorted(\n        utils.ensure_list(metadata.config.variant.get(\"ignore_build_only_deps\", []))\n    )\n\n    for dep in requirements_used:\n",
                      "markdown": "`\n    to_remove = set()\n    ignore_build_only_deps = sorted(\n        utils.ensure_list(metadata.config.variant.get(\"ignore_build_only_deps\", []))\n    )\n\n    for dep in requirements_used:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1114,
                  "startColumn": 26,
                  "endLine": 1114,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    output_reqs = utils.expand_reqs(metadata.meta.get(\"requirements\", {}))\n    build_reqs = utils.ensure_list(output_reqs.get(\"build\", []))\n    host_reqs = utils.ensure_list(output_reqs.get(\"host\", []))\n    run_reqs = output_reqs.get(\"run\", [])\n    build_reqs = {req.split()[0].replace(\"-\", \"_\") for req in build_reqs if req}\n    host_reqs = {req.split()[0].replace(\"-\", \"_\") for req in host_reqs if req}\n\n",
                    "rendered": {
                      "text": "    output_reqs = utils.expand_reqs(metadata.meta.get(\"requirements\", {}))\n    build_reqs = utils.ensure_list(output_reqs.get(\"build\", []))\n    host_reqs = utils.ensure_list(output_reqs.get(\"host\", []))\n    run_reqs = output_reqs.get(\"run\", [])\n    build_reqs = {req.split()[0].replace(\"-\", \"_\") for req in build_reqs if req}\n    host_reqs = {req.split()[0].replace(\"-\", \"_\") for req in host_reqs if req}\n\n",
                      "markdown": "`    output_reqs = utils.expand_reqs(metadata.meta.get(\"requirements\", {}))\n    build_reqs = utils.ensure_list(output_reqs.get(\"build\", []))\n    host_reqs = utils.ensure_list(output_reqs.get(\"host\", []))\n    run_reqs = output_reqs.get(\"run\", [])\n    build_reqs = {req.split()[0].replace(\"-\", \"_\") for req in build_reqs if req}\n    host_reqs = {req.split()[0].replace(\"-\", \"_\") for req in host_reqs if req}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1113,
                  "startColumn": 45,
                  "endLine": 1113,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    #     outcome of the package.\n    output_reqs = utils.expand_reqs(metadata.meta.get(\"requirements\", {}))\n    build_reqs = utils.ensure_list(output_reqs.get(\"build\", []))\n    host_reqs = utils.ensure_list(output_reqs.get(\"host\", []))\n    run_reqs = output_reqs.get(\"run\", [])\n    build_reqs = {req.split()[0].replace(\"-\", \"_\") for req in build_reqs if req}\n    host_reqs = {req.split()[0].replace(\"-\", \"_\") for req in host_reqs if req}\n",
                    "rendered": {
                      "text": "    #     outcome of the package.\n    output_reqs = utils.expand_reqs(metadata.meta.get(\"requirements\", {}))\n    build_reqs = utils.ensure_list(output_reqs.get(\"build\", []))\n    host_reqs = utils.ensure_list(output_reqs.get(\"host\", []))\n    run_reqs = output_reqs.get(\"run\", [])\n    build_reqs = {req.split()[0].replace(\"-\", \"_\") for req in build_reqs if req}\n    host_reqs = {req.split()[0].replace(\"-\", \"_\") for req in host_reqs if req}\n",
                      "markdown": "`    #     outcome of the package.\n    output_reqs = utils.expand_reqs(metadata.meta.get(\"requirements\", {}))\n    build_reqs = utils.ensure_list(output_reqs.get(\"build\", []))\n    host_reqs = utils.ensure_list(output_reqs.get(\"host\", []))\n    run_reqs = output_reqs.get(\"run\", [])\n    build_reqs = {req.split()[0].replace(\"-\", \"_\") for req in build_reqs if req}\n    host_reqs = {req.split()[0].replace(\"-\", \"_\") for req in host_reqs if req}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1112,
                  "startColumn": 46,
                  "endLine": 1112,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    # filter out things that occur only in run requirements.  These don't actually affect the\n    #     outcome of the package.\n    output_reqs = utils.expand_reqs(metadata.meta.get(\"requirements\", {}))\n    build_reqs = utils.ensure_list(output_reqs.get(\"build\", []))\n    host_reqs = utils.ensure_list(output_reqs.get(\"host\", []))\n    run_reqs = output_reqs.get(\"run\", [])\n    build_reqs = {req.split()[0].replace(\"-\", \"_\") for req in build_reqs if req}\n",
                    "rendered": {
                      "text": "    # filter out things that occur only in run requirements.  These don't actually affect the\n    #     outcome of the package.\n    output_reqs = utils.expand_reqs(metadata.meta.get(\"requirements\", {}))\n    build_reqs = utils.ensure_list(output_reqs.get(\"build\", []))\n    host_reqs = utils.ensure_list(output_reqs.get(\"host\", []))\n    run_reqs = output_reqs.get(\"run\", [])\n    build_reqs = {req.split()[0].replace(\"-\", \"_\") for req in build_reqs if req}\n",
                      "markdown": "`    # filter out things that occur only in run requirements.  These don't actually affect the\n    #     outcome of the package.\n    output_reqs = utils.expand_reqs(metadata.meta.get(\"requirements\", {}))\n    build_reqs = utils.ensure_list(output_reqs.get(\"build\", []))\n    host_reqs = utils.ensure_list(output_reqs.get(\"host\", []))\n    run_reqs = output_reqs.get(\"run\", [])\n    build_reqs = {req.split()[0].replace(\"-\", \"_\") for req in build_reqs if req}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1111,
                  "startColumn": 49,
                  "endLine": 1111,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n    # filter out things that occur only in run requirements.  These don't actually affect the\n    #     outcome of the package.\n    output_reqs = utils.expand_reqs(metadata.meta.get(\"requirements\", {}))\n    build_reqs = utils.ensure_list(output_reqs.get(\"build\", []))\n    host_reqs = utils.ensure_list(output_reqs.get(\"host\", []))\n    run_reqs = output_reqs.get(\"run\", [])\n",
                    "rendered": {
                      "text": "\n    # filter out things that occur only in run requirements.  These don't actually affect the\n    #     outcome of the package.\n    output_reqs = utils.expand_reqs(metadata.meta.get(\"requirements\", {}))\n    build_reqs = utils.ensure_list(output_reqs.get(\"build\", []))\n    host_reqs = utils.ensure_list(output_reqs.get(\"host\", []))\n    run_reqs = output_reqs.get(\"run\", [])\n",
                      "markdown": "`\n    # filter out things that occur only in run requirements.  These don't actually affect the\n    #     outcome of the package.\n    output_reqs = utils.expand_reqs(metadata.meta.get(\"requirements\", {}))\n    build_reqs = utils.ensure_list(output_reqs.get(\"build\", []))\n    host_reqs = utils.ensure_list(output_reqs.get(\"host\", []))\n    run_reqs = output_reqs.get(\"run\", [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1095,
                  "startColumn": 53,
                  "endLine": 1095,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        metadata_section = metadata.meta.get(section, {}) or {}\n        output_section = output.get(section, {}) or {}\n        if section == \"requirements\":\n            output_section = utils.expand_reqs(output.get(section, {}))\n        for k, v in metadata_section.items():\n            if k not in output_section:\n                output_section[k] = v\n",
                    "rendered": {
                      "text": "        metadata_section = metadata.meta.get(section, {}) or {}\n        output_section = output.get(section, {}) or {}\n        if section == \"requirements\":\n            output_section = utils.expand_reqs(output.get(section, {}))\n        for k, v in metadata_section.items():\n            if k not in output_section:\n                output_section[k] = v\n",
                      "markdown": "`        metadata_section = metadata.meta.get(section, {}) or {}\n        output_section = output.get(section, {}) or {}\n        if section == \"requirements\":\n            output_section = utils.expand_reqs(output.get(section, {}))\n        for k, v in metadata_section.items():\n            if k not in output_section:\n                output_section[k] = v\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1093,
                  "startColumn": 31,
                  "endLine": 1093,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    sections = (\"requirements\", \"build\", \"about\")\n    for section in sections:\n        metadata_section = metadata.meta.get(section, {}) or {}\n        output_section = output.get(section, {}) or {}\n        if section == \"requirements\":\n            output_section = utils.expand_reqs(output.get(section, {}))\n        for k, v in metadata_section.items():\n",
                    "rendered": {
                      "text": "    sections = (\"requirements\", \"build\", \"about\")\n    for section in sections:\n        metadata_section = metadata.meta.get(section, {}) or {}\n        output_section = output.get(section, {}) or {}\n        if section == \"requirements\":\n            output_section = utils.expand_reqs(output.get(section, {}))\n        for k, v in metadata_section.items():\n",
                      "markdown": "`    sections = (\"requirements\", \"build\", \"about\")\n    for section in sections:\n        metadata_section = metadata.meta.get(section, {}) or {}\n        output_section = output.get(section, {}) or {}\n        if section == \"requirements\":\n            output_section = utils.expand_reqs(output.get(section, {}))\n        for k, v in metadata_section.items():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1092,
                  "startColumn": 40,
                  "endLine": 1092,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    \"\"\"Merge top-level metadata into output when output is same name as top-level\"\"\"\n    sections = (\"requirements\", \"build\", \"about\")\n    for section in sections:\n        metadata_section = metadata.meta.get(section, {}) or {}\n        output_section = output.get(section, {}) or {}\n        if section == \"requirements\":\n            output_section = utils.expand_reqs(output.get(section, {}))\n",
                    "rendered": {
                      "text": "    \"\"\"Merge top-level metadata into output when output is same name as top-level\"\"\"\n    sections = (\"requirements\", \"build\", \"about\")\n    for section in sections:\n        metadata_section = metadata.meta.get(section, {}) or {}\n        output_section = output.get(section, {}) or {}\n        if section == \"requirements\":\n            output_section = utils.expand_reqs(output.get(section, {}))\n",
                      "markdown": "`    \"\"\"Merge top-level metadata into output when output is same name as top-level\"\"\"\n    sections = (\"requirements\", \"build\", \"about\")\n    for section in sections:\n        metadata_section = metadata.meta.get(section, {}) or {}\n        output_section = output.get(section, {}) or {}\n        if section == \"requirements\":\n            output_section = utils.expand_reqs(output.get(section, {}))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 51,
                  "endLine": 1021,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                )\n            else:\n                fm = om\n            if not output_d.get(\"type\") or output_d.get(\"type\").startswith(\"conda\"):\n                outputs[\n                    fm.name(),\n                    deepfreeze({k: fm.config.variant[k] for k in fm.get_used_vars()}),\n",
                    "rendered": {
                      "text": "                )\n            else:\n                fm = om\n            if not output_d.get(\"type\") or output_d.get(\"type\").startswith(\"conda\"):\n                outputs[\n                    fm.name(),\n                    deepfreeze({k: fm.config.variant[k] for k in fm.get_used_vars()}),\n",
                      "markdown": "`                )\n            else:\n                fm = om\n            if not output_d.get(\"type\") or output_d.get(\"type\").startswith(\"conda\"):\n                outputs[\n                    fm.name(),\n                    deepfreeze({k: fm.config.variant[k] for k in fm.get_used_vars()}),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 27,
                  "endLine": 1021,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                )\n            else:\n                fm = om\n            if not output_d.get(\"type\") or output_d.get(\"type\").startswith(\"conda\"):\n                outputs[\n                    fm.name(),\n                    deepfreeze({k: fm.config.variant[k] for k in fm.get_used_vars()}),\n",
                    "rendered": {
                      "text": "                )\n            else:\n                fm = om\n            if not output_d.get(\"type\") or output_d.get(\"type\").startswith(\"conda\"):\n                outputs[\n                    fm.name(),\n                    deepfreeze({k: fm.config.variant[k] for k in fm.get_used_vars()}),\n",
                      "markdown": "`                )\n            else:\n                fm = om\n            if not output_d.get(\"type\") or output_d.get(\"type\").startswith(\"conda\"):\n                outputs[\n                    fm.name(),\n                    deepfreeze({k: fm.config.variant[k] for k in fm.get_used_vars()}),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 956,
                  "startColumn": 15,
                  "endLine": 956,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            outputs.append(OrderedDict(name=metadata.name()))\n    for out in outputs:\n        if (\n            out.get(\"name\") == metadata.name()\n            and \"package:\" in metadata.get_recipe_text()\n        ):\n            combine_top_level_metadata_with_output(metadata, out)\n",
                    "rendered": {
                      "text": "            outputs.append(OrderedDict(name=metadata.name()))\n    for out in outputs:\n        if (\n            out.get(\"name\") == metadata.name()\n            and \"package:\" in metadata.get_recipe_text()\n        ):\n            combine_top_level_metadata_with_output(metadata, out)\n",
                      "markdown": "`            outputs.append(OrderedDict(name=metadata.name()))\n    for out in outputs:\n        if (\n            out.get(\"name\") == metadata.name()\n            and \"package:\" in metadata.get_recipe_text()\n        ):\n            combine_top_level_metadata_with_output(metadata, out)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 951,
                  "startColumn": 34,
                  "endLine": 951,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        #     mention a subpackage,\n        # but only if a matching output name is not explicitly provided\n        if metadata.uses_subpackage and not any(\n            metadata.name() == out.get(\"name\", \"\") for out in outputs\n        ):\n            outputs.append(OrderedDict(name=metadata.name()))\n    for out in outputs:\n",
                    "rendered": {
                      "text": "        #     mention a subpackage,\n        # but only if a matching output name is not explicitly provided\n        if metadata.uses_subpackage and not any(\n            metadata.name() == out.get(\"name\", \"\") for out in outputs\n        ):\n            outputs.append(OrderedDict(name=metadata.name()))\n    for out in outputs:\n",
                      "markdown": "`        #     mention a subpackage,\n        # but only if a matching output name is not explicitly provided\n        if metadata.uses_subpackage and not any(\n            metadata.name() == out.get(\"name\", \"\") for out in outputs\n        ):\n            outputs.append(OrderedDict(name=metadata.name()))\n    for out in outputs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 19,
                  "endLine": 889,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    non_conda_outputs: list[OutputTuple] = []\n    for output_tuple in output_tuples:\n        output_d, _ = output_tuple\n        if output_d.get(\"type\", \"conda\").startswith(\"conda\"):\n            # conda packages must have a name\n            # the same package name may be seen multiple times (variants)\n            conda_outputs.setdefault(output_d[\"name\"], []).append(output_tuple)\n",
                    "rendered": {
                      "text": "    non_conda_outputs: list[OutputTuple] = []\n    for output_tuple in output_tuples:\n        output_d, _ = output_tuple\n        if output_d.get(\"type\", \"conda\").startswith(\"conda\"):\n            # conda packages must have a name\n            # the same package name may be seen multiple times (variants)\n            conda_outputs.setdefault(output_d[\"name\"], []).append(output_tuple)\n",
                      "markdown": "`    non_conda_outputs: list[OutputTuple] = []\n    for output_tuple in output_tuples:\n        output_d, _ = output_tuple\n        if output_d.get(\"type\", \"conda\").startswith(\"conda\"):\n            # conda packages must have a name\n            # the same package name may be seen multiple times (variants)\n            conda_outputs.setdefault(output_d[\"name\"], []).append(output_tuple)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 837,
                  "startColumn": 60,
                  "endLine": 837,
                  "endColumn": 65,
                  "snippet": {
                    "text": "                            for _n in pkg_names:\n                                variant_version = get_package_version_pin(\n                                    build_deps, _n\n                                ) or metadata.config.variant.get(\n                                    _n.replace(\"-\", \"_\"), \"\"\n                                )\n                                if variant_version:\n",
                    "rendered": {
                      "text": "                            for _n in pkg_names:\n                                variant_version = get_package_version_pin(\n                                    build_deps, _n\n                                ) or metadata.config.variant.get(\n                                    _n.replace(\"-\", \"_\"), \"\"\n                                )\n                                if variant_version:\n",
                      "markdown": "`                            for _n in pkg_names:\n                                variant_version = get_package_version_pin(\n                                    build_deps, _n\n                                ) or metadata.config.variant.get(\n                                    _n.replace(\"-\", \"_\"), \"\"\n                                )\n                                if variant_version:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 801,
                  "startColumn": 58,
                  "endLine": 801,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        res = []\n        build_or_host = \"host\" if metadata.is_cross else \"build\"\n        build_pkg_names = [ms.name for ms in metadata.ms_depends(build_or_host)]\n        build_deps = metadata.meta.get(\"requirements\", {}).get(build_or_host, [])\n        # TODO: this is the bit that puts in strings like py27np111 in the filename.  It would be\n        #    nice to get rid of this, since the hash supercedes that functionally, but not clear\n        #    whether anyone's tools depend on this file naming right now.\n",
                    "rendered": {
                      "text": "        res = []\n        build_or_host = \"host\" if metadata.is_cross else \"build\"\n        build_pkg_names = [ms.name for ms in metadata.ms_depends(build_or_host)]\n        build_deps = metadata.meta.get(\"requirements\", {}).get(build_or_host, [])\n        # TODO: this is the bit that puts in strings like py27np111 in the filename.  It would be\n        #    nice to get rid of this, since the hash supercedes that functionally, but not clear\n        #    whether anyone's tools depend on this file naming right now.\n",
                      "markdown": "`        res = []\n        build_or_host = \"host\" if metadata.is_cross else \"build\"\n        build_pkg_names = [ms.name for ms in metadata.ms_depends(build_or_host)]\n        build_deps = metadata.meta.get(\"requirements\", {}).get(build_or_host, [])\n        # TODO: this is the bit that puts in strings like py27np111 in the filename.  It would be\n        #    nice to get rid of this, since the hash supercedes that functionally, but not clear\n        #    whether anyone's tools depend on this file naming right now.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 801,
                  "startColumn": 34,
                  "endLine": 801,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        res = []\n        build_or_host = \"host\" if metadata.is_cross else \"build\"\n        build_pkg_names = [ms.name for ms in metadata.ms_depends(build_or_host)]\n        build_deps = metadata.meta.get(\"requirements\", {}).get(build_or_host, [])\n        # TODO: this is the bit that puts in strings like py27np111 in the filename.  It would be\n        #    nice to get rid of this, since the hash supercedes that functionally, but not clear\n        #    whether anyone's tools depend on this file naming right now.\n",
                    "rendered": {
                      "text": "        res = []\n        build_or_host = \"host\" if metadata.is_cross else \"build\"\n        build_pkg_names = [ms.name for ms in metadata.ms_depends(build_or_host)]\n        build_deps = metadata.meta.get(\"requirements\", {}).get(build_or_host, [])\n        # TODO: this is the bit that puts in strings like py27np111 in the filename.  It would be\n        #    nice to get rid of this, since the hash supercedes that functionally, but not clear\n        #    whether anyone's tools depend on this file naming right now.\n",
                      "markdown": "`        res = []\n        build_or_host = \"host\" if metadata.is_cross else \"build\"\n        build_pkg_names = [ms.name for ms in metadata.ms_depends(build_or_host)]\n        build_deps = metadata.meta.get(\"requirements\", {}).get(build_or_host, [])\n        # TODO: this is the bit that puts in strings like py27np111 in the filename.  It would be\n        #    nice to get rid of this, since the hash supercedes that functionally, but not clear\n        #    whether anyone's tools depend on this file naming right now.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 37,
                  "endLine": 795,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n\ndef build_string_from_metadata(metadata):\n    if metadata.meta.get(\"build\", {}).get(\"string\"):\n        build_str = metadata.get_value(\"build/string\")\n    else:\n        res = []\n",
                    "rendered": {
                      "text": "\n\ndef build_string_from_metadata(metadata):\n    if metadata.meta.get(\"build\", {}).get(\"string\"):\n        build_str = metadata.get_value(\"build/string\")\n    else:\n        res = []\n",
                      "markdown": "`\n\ndef build_string_from_metadata(metadata):\n    if metadata.meta.get(\"build\", {}).get(\"string\"):\n        build_str = metadata.get_value(\"build/string\")\n    else:\n        res = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 20,
                  "endLine": 795,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\ndef build_string_from_metadata(metadata):\n    if metadata.meta.get(\"build\", {}).get(\"string\"):\n        build_str = metadata.get_value(\"build/string\")\n    else:\n        res = []\n",
                    "rendered": {
                      "text": "\n\ndef build_string_from_metadata(metadata):\n    if metadata.meta.get(\"build\", {}).get(\"string\"):\n        build_str = metadata.get_value(\"build/string\")\n    else:\n        res = []\n",
                      "markdown": "`\n\ndef build_string_from_metadata(metadata):\n    if metadata.meta.get(\"build\", {}).get(\"string\"):\n        build_str = metadata.get_value(\"build/string\")\n    else:\n        res = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 770,
                  "startColumn": 56,
                  "endLine": 770,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    if \"version\" in package_meta:\n        package_meta[\"version\"] = str(package_meta.get(\"version\", \"\"))\n    if \"msvc_compiler\" in package_meta:\n        package_meta[\"msvc_compiler\"] = str(package_meta.get(\"msvc_compiler\", \"\"))\n    return package_meta\n\n\n",
                    "rendered": {
                      "text": "    if \"version\" in package_meta:\n        package_meta[\"version\"] = str(package_meta.get(\"version\", \"\"))\n    if \"msvc_compiler\" in package_meta:\n        package_meta[\"msvc_compiler\"] = str(package_meta.get(\"msvc_compiler\", \"\"))\n    return package_meta\n\n\n",
                      "markdown": "`    if \"version\" in package_meta:\n        package_meta[\"version\"] = str(package_meta.get(\"version\", \"\"))\n    if \"msvc_compiler\" in package_meta:\n        package_meta[\"msvc_compiler\"] = str(package_meta.get(\"msvc_compiler\", \"\"))\n    return package_meta\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 768,
                  "startColumn": 50,
                  "endLine": 768,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\ndef _str_version(package_meta):\n    if \"version\" in package_meta:\n        package_meta[\"version\"] = str(package_meta.get(\"version\", \"\"))\n    if \"msvc_compiler\" in package_meta:\n        package_meta[\"msvc_compiler\"] = str(package_meta.get(\"msvc_compiler\", \"\"))\n    return package_meta\n",
                    "rendered": {
                      "text": "\ndef _str_version(package_meta):\n    if \"version\" in package_meta:\n        package_meta[\"version\"] = str(package_meta.get(\"version\", \"\"))\n    if \"msvc_compiler\" in package_meta:\n        package_meta[\"msvc_compiler\"] = str(package_meta.get(\"msvc_compiler\", \"\"))\n    return package_meta\n",
                      "markdown": "`\ndef _str_version(package_meta):\n    if \"version\" in package_meta:\n        package_meta[\"version\"] = str(package_meta.get(\"version\", \"\"))\n    if \"msvc_compiler\" in package_meta:\n        package_meta[\"msvc_compiler\"] = str(package_meta.get(\"msvc_compiler\", \"\"))\n    return package_meta\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 41,
                  "endLine": 744,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    git_rev = \"git_rev\"\n\n    git_rev_tags = (git_rev,) + git_rev_tags_old\n    has_rev_tags = tuple(bool(source_meta.get(tag, \"\")) for tag in git_rev_tags)\n\n    keys = [key for key in (git_rev, \"git_branch\", \"git_tag\") if key in source_meta]\n    if not keys:\n",
                    "rendered": {
                      "text": "    git_rev = \"git_rev\"\n\n    git_rev_tags = (git_rev,) + git_rev_tags_old\n    has_rev_tags = tuple(bool(source_meta.get(tag, \"\")) for tag in git_rev_tags)\n\n    keys = [key for key in (git_rev, \"git_branch\", \"git_tag\") if key in source_meta]\n    if not keys:\n",
                      "markdown": "`    git_rev = \"git_rev\"\n\n    git_rev_tags = (git_rev,) + git_rev_tags_old\n    has_rev_tags = tuple(bool(source_meta.get(tag, \"\")) for tag in git_rev_tags)\n\n    keys = [key for key in (git_rev, \"git_branch\", \"git_tag\") if key in source_meta]\n    if not keys:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 73,
                  "endLine": 493,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                if hasattr(run_exports, \"keys\"):\n                    run_exports_list = []\n                    for export_type in utils.RUN_EXPORTS_TYPES:\n                        run_exports_list = run_exports_list + run_exports.get(\n                            export_type, []\n                        )\n                    run_exports = run_exports_list\n",
                    "rendered": {
                      "text": "                if hasattr(run_exports, \"keys\"):\n                    run_exports_list = []\n                    for export_type in utils.RUN_EXPORTS_TYPES:\n                        run_exports_list = run_exports_list + run_exports.get(\n                            export_type, []\n                        )\n                    run_exports = run_exports_list\n",
                      "markdown": "`                if hasattr(run_exports, \"keys\"):\n                    run_exports_list = []\n                    for export_type in utils.RUN_EXPORTS_TYPES:\n                        run_exports_list = run_exports_list + run_exports.get(\n                            export_type, []\n                        )\n                    run_exports = run_exports_list\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 57,
                  "endLine": 417,
                  "endColumn": 62,
                  "snippet": {
                    "text": "def _get_all_dependencies(metadata, envs=(\"host\", \"build\", \"run\")):\n    reqs = []\n    for _env in envs:\n        reqs.extend(metadata.meta.get(\"requirements\", {}).get(_env, []))\n    return reqs\n\n\n",
                    "rendered": {
                      "text": "def _get_all_dependencies(metadata, envs=(\"host\", \"build\", \"run\")):\n    reqs = []\n    for _env in envs:\n        reqs.extend(metadata.meta.get(\"requirements\", {}).get(_env, []))\n    return reqs\n\n\n",
                      "markdown": "`def _get_all_dependencies(metadata, envs=(\"host\", \"build\", \"run\")):\n    reqs = []\n    for _env in envs:\n        reqs.extend(metadata.meta.get(\"requirements\", {}).get(_env, []))\n    return reqs\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 33,
                  "endLine": 417,
                  "endColumn": 38,
                  "snippet": {
                    "text": "def _get_all_dependencies(metadata, envs=(\"host\", \"build\", \"run\")):\n    reqs = []\n    for _env in envs:\n        reqs.extend(metadata.meta.get(\"requirements\", {}).get(_env, []))\n    return reqs\n\n\n",
                    "rendered": {
                      "text": "def _get_all_dependencies(metadata, envs=(\"host\", \"build\", \"run\")):\n    reqs = []\n    for _env in envs:\n        reqs.extend(metadata.meta.get(\"requirements\", {}).get(_env, []))\n    return reqs\n\n\n",
                      "markdown": "`def _get_all_dependencies(metadata, envs=(\"host\", \"build\", \"run\")):\n    reqs = []\n    for _env in envs:\n        reqs.extend(metadata.meta.get(\"requirements\", {}).get(_env, []))\n    return reqs\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 40,
                  "endLine": 409,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\ndef ensure_valid_noarch_value(meta):\n    build_noarch = meta.get(\"build\", {}).get(\"noarch\")\n    if build_noarch and build_noarch not in NOARCH_TYPES:\n        raise CondaBuildException(f\"Invalid value for noarch: {build_noarch}\")\n\n",
                    "rendered": {
                      "text": "\n\ndef ensure_valid_noarch_value(meta):\n    build_noarch = meta.get(\"build\", {}).get(\"noarch\")\n    if build_noarch and build_noarch not in NOARCH_TYPES:\n        raise CondaBuildException(f\"Invalid value for noarch: {build_noarch}\")\n\n",
                      "markdown": "`\n\ndef ensure_valid_noarch_value(meta):\n    build_noarch = meta.get(\"build\", {}).get(\"noarch\")\n    if build_noarch and build_noarch not in NOARCH_TYPES:\n        raise CondaBuildException(f\"Invalid value for noarch: {build_noarch}\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 23,
                  "endLine": 409,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n\ndef ensure_valid_noarch_value(meta):\n    build_noarch = meta.get(\"build\", {}).get(\"noarch\")\n    if build_noarch and build_noarch not in NOARCH_TYPES:\n        raise CondaBuildException(f\"Invalid value for noarch: {build_noarch}\")\n\n",
                    "rendered": {
                      "text": "\n\ndef ensure_valid_noarch_value(meta):\n    build_noarch = meta.get(\"build\", {}).get(\"noarch\")\n    if build_noarch and build_noarch not in NOARCH_TYPES:\n        raise CondaBuildException(f\"Invalid value for noarch: {build_noarch}\")\n\n",
                      "markdown": "`\n\ndef ensure_valid_noarch_value(meta):\n    build_noarch = meta.get(\"build\", {}).get(\"noarch\")\n    if build_noarch and build_noarch not in NOARCH_TYPES:\n        raise CondaBuildException(f\"Invalid value for noarch: {build_noarch}\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 39,
                  "endLine": 374,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n\ndef ensure_valid_fields(meta):\n    pin_depends = meta.get(\"build\", {}).get(\"pin_depends\", \"\")\n    if pin_depends and pin_depends not in (\"\", \"record\", \"strict\"):\n        raise RuntimeError(\n            f\"build/pin_depends must be 'record' or 'strict' - not '{pin_depends}'\"\n",
                    "rendered": {
                      "text": "\n\ndef ensure_valid_fields(meta):\n    pin_depends = meta.get(\"build\", {}).get(\"pin_depends\", \"\")\n    if pin_depends and pin_depends not in (\"\", \"record\", \"strict\"):\n        raise RuntimeError(\n            f\"build/pin_depends must be 'record' or 'strict' - not '{pin_depends}'\"\n",
                      "markdown": "`\n\ndef ensure_valid_fields(meta):\n    pin_depends = meta.get(\"build\", {}).get(\"pin_depends\", \"\")\n    if pin_depends and pin_depends not in (\"\", \"record\", \"strict\"):\n        raise RuntimeError(\n            f\"build/pin_depends must be 'record' or 'strict' - not '{pin_depends}'\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 22,
                  "endLine": 374,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\ndef ensure_valid_fields(meta):\n    pin_depends = meta.get(\"build\", {}).get(\"pin_depends\", \"\")\n    if pin_depends and pin_depends not in (\"\", \"record\", \"strict\"):\n        raise RuntimeError(\n            f\"build/pin_depends must be 'record' or 'strict' - not '{pin_depends}'\"\n",
                    "rendered": {
                      "text": "\n\ndef ensure_valid_fields(meta):\n    pin_depends = meta.get(\"build\", {}).get(\"pin_depends\", \"\")\n    if pin_depends and pin_depends not in (\"\", \"record\", \"strict\"):\n        raise RuntimeError(\n            f\"build/pin_depends must be 'record' or 'strict' - not '{pin_depends}'\"\n",
                      "markdown": "`\n\ndef ensure_valid_fields(meta):\n    pin_depends = meta.get(\"build\", {}).get(\"pin_depends\", \"\")\n    if pin_depends and pin_depends not in (\"\", \"record\", \"strict\"):\n        raise RuntimeError(\n            f\"build/pin_depends must be 'record' or 'strict' - not '{pin_depends}'\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 24,
                  "endLine": 219,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    pl = config.variant.get(\"perl\", defaults[\"perl\"])\n    d[\"pl\"] = pl\n\n    lua = config.variant.get(\"lua\", defaults[\"lua\"])\n    d[\"lua\"] = lua\n    d[\"luajit\"] = bool(lua[0] == \"2\")\n\n",
                    "rendered": {
                      "text": "    pl = config.variant.get(\"perl\", defaults[\"perl\"])\n    d[\"pl\"] = pl\n\n    lua = config.variant.get(\"lua\", defaults[\"lua\"])\n    d[\"lua\"] = lua\n    d[\"luajit\"] = bool(lua[0] == \"2\")\n\n",
                      "markdown": "`    pl = config.variant.get(\"perl\", defaults[\"perl\"])\n    d[\"pl\"] = pl\n\n    lua = config.variant.get(\"lua\", defaults[\"lua\"])\n    d[\"lua\"] = lua\n    d[\"luajit\"] = bool(lua[0] == \"2\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 23,
                  "endLine": 216,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            )\n    d[\"np\"] = int(\"\".join(np.split(\".\")[:2]))\n\n    pl = config.variant.get(\"perl\", defaults[\"perl\"])\n    d[\"pl\"] = pl\n\n    lua = config.variant.get(\"lua\", defaults[\"lua\"])\n",
                    "rendered": {
                      "text": "            )\n    d[\"np\"] = int(\"\".join(np.split(\".\")[:2]))\n\n    pl = config.variant.get(\"perl\", defaults[\"perl\"])\n    d[\"pl\"] = pl\n\n    lua = config.variant.get(\"lua\", defaults[\"lua\"])\n",
                      "markdown": "`            )\n    d[\"np\"] = int(\"\".join(np.split(\".\")[:2]))\n\n    pl = config.variant.get(\"perl\", defaults[\"perl\"])\n    d[\"pl\"] = pl\n\n    lua = config.variant.get(\"lua\", defaults[\"lua\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 23,
                  "endLine": 206,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        )\n    )\n\n    np = config.variant.get(\"numpy\")\n    if not np:\n        np = defaults[\"numpy\"]\n        if config.verbose:\n",
                    "rendered": {
                      "text": "        )\n    )\n\n    np = config.variant.get(\"numpy\")\n    if not np:\n        np = defaults[\"numpy\"]\n        if config.verbose:\n",
                      "markdown": "`        )\n    )\n\n    np = config.variant.get(\"numpy\")\n    if not np:\n        np = defaults[\"numpy\"]\n        if config.verbose:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 23,
                  "endLine": 181,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            d[\"x86\"] = plat.endswith((\"-32\", \"-64\"))\n\n    defaults = get_default_variant(config)\n    py = config.variant.get(\"python\", defaults[\"python\"])\n    # there are times when python comes in as a tuple\n    if not hasattr(py, \"split\"):\n        py = py[0]\n",
                    "rendered": {
                      "text": "            d[\"x86\"] = plat.endswith((\"-32\", \"-64\"))\n\n    defaults = get_default_variant(config)\n    py = config.variant.get(\"python\", defaults[\"python\"])\n    # there are times when python comes in as a tuple\n    if not hasattr(py, \"split\"):\n        py = py[0]\n",
                      "markdown": "`            d[\"x86\"] = plat.endswith((\"-32\", \"-64\"))\n\n    defaults = get_default_variant(config)\n    py = config.variant.get(\"python\", defaults[\"python\"])\n    # there are times when python comes in as a tuple\n    if not hasattr(py, \"split\"):\n        py = py[0]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 28,
                  "endLine": 175,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        d[subdir_os] = plat.startswith(f\"{subdir_os}-\")\n\n    for arch in subdir_archs:\n        arch_full = ARCH_MAP.get(arch, arch)\n        d[arch_full] = plat.endswith(f\"-{arch}\")\n        if arch == \"32\":\n            d[\"x86\"] = plat.endswith((\"-32\", \"-64\"))\n",
                    "rendered": {
                      "text": "        d[subdir_os] = plat.startswith(f\"{subdir_os}-\")\n\n    for arch in subdir_archs:\n        arch_full = ARCH_MAP.get(arch, arch)\n        d[arch_full] = plat.endswith(f\"-{arch}\")\n        if arch == \"32\":\n            d[\"x86\"] = plat.endswith((\"-32\", \"-64\"))\n",
                      "markdown": "`        d[subdir_os] = plat.startswith(f\"{subdir_os}-\")\n\n    for arch in subdir_archs:\n        arch_full = ARCH_MAP.get(arch, arch)\n        d[arch_full] = plat.endswith(f\"-{arch}\")\n        if arch == \"32\":\n            d[\"x86\"] = plat.endswith((\"-32\", \"-64\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 33,
                  "endLine": 158,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        win64=bool(plat == \"win-64\"),\n        os=os,\n        environ=os.environ,\n        nomkl=bool(int(os.environ.get(\"FEATURE_NOMKL\", False))),\n    )\n\n    # Add the current platform to the list of subdirs to enable conda-build\n",
                    "rendered": {
                      "text": "        win64=bool(plat == \"win-64\"),\n        os=os,\n        environ=os.environ,\n        nomkl=bool(int(os.environ.get(\"FEATURE_NOMKL\", False))),\n    )\n\n    # Add the current platform to the list of subdirs to enable conda-build\n",
                      "markdown": "`        win64=bool(plat == \"win-64\"),\n        os=os,\n        environ=os.environ,\n        nomkl=bool(int(os.environ.get(\"FEATURE_NOMKL\", False))),\n    )\n\n    # Add the current platform to the list of subdirs to enable conda-build\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 13,
                  "endLine": 589,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        \"svn_rev\": None,\n        \"svn_ignore_externals\": None,\n        \"svn_username\": None,\n        \"svn_password\": None,\n        \"folder\": None,\n        \"no_hoist\": None,\n        \"patches\": list,\n",
                    "rendered": {
                      "text": "        \"svn_rev\": None,\n        \"svn_ignore_externals\": None,\n        \"svn_username\": None,\n        \"svn_password\": None,\n        \"folder\": None,\n        \"no_hoist\": None,\n        \"patches\": list,\n",
                      "markdown": "`        \"svn_rev\": None,\n        \"svn_ignore_externals\": None,\n        \"svn_username\": None,\n        \"svn_password\": None,\n        \"folder\": None,\n        \"no_hoist\": None,\n        \"patches\": list,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1998,
                  "startColumn": 27,
                  "endLine": 1998,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            if template_string:\n                template = env.from_string(template_string)\n            elif filename:\n                template = env.get_or_select_template(filename)\n            else:\n                template = env.from_string(\"\")\n\n",
                    "rendered": {
                      "text": "            if template_string:\n                template = env.from_string(template_string)\n            elif filename:\n                template = env.get_or_select_template(filename)\n            else:\n                template = env.from_string(\"\")\n\n",
                      "markdown": "`            if template_string:\n                template = env.from_string(template_string)\n            elif filename:\n                template = env.get_or_select_template(filename)\n            else:\n                template = env.from_string(\"\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1968,
                  "startColumn": 8,
                  "endLine": 1968,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        from .environ import get_dict\n\n        env.globals.update(get_selectors(self.config))\n        env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n        env.globals.update({\"CONDA_BUILD_STATE\": \"RENDER\"})\n        env.globals.update(\n            context_processor(\n",
                    "rendered": {
                      "text": "        from .environ import get_dict\n\n        env.globals.update(get_selectors(self.config))\n        env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n        env.globals.update({\"CONDA_BUILD_STATE\": \"RENDER\"})\n        env.globals.update(\n            context_processor(\n",
                      "markdown": "`        from .environ import get_dict\n\n        env.globals.update(get_selectors(self.config))\n        env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n        env.globals.update({\"CONDA_BUILD_STATE\": \"RENDER\"})\n        env.globals.update(\n            context_processor(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1967,
                  "startColumn": 8,
                  "endLine": 1967,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        from .environ import get_dict\n\n        env.globals.update(get_selectors(self.config))\n        env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n        env.globals.update({\"CONDA_BUILD_STATE\": \"RENDER\"})\n        env.globals.update(\n",
                    "rendered": {
                      "text": "\n        from .environ import get_dict\n\n        env.globals.update(get_selectors(self.config))\n        env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n        env.globals.update({\"CONDA_BUILD_STATE\": \"RENDER\"})\n        env.globals.update(\n",
                      "markdown": "`\n        from .environ import get_dict\n\n        env.globals.update(get_selectors(self.config))\n        env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n        env.globals.update({\"CONDA_BUILD_STATE\": \"RENDER\"})\n        env.globals.update(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1965,
                  "startColumn": 14,
                  "endLine": 1965,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        loader = FilteredLoader(jinja2.ChoiceLoader(loaders), config=self.config)\n        env = jinja2.Environment(loader=loader, undefined=undefined_type)\n\n        from .environ import get_dict\n\n        env.globals.update(get_selectors(self.config))\n        env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n",
                    "rendered": {
                      "text": "        loader = FilteredLoader(jinja2.ChoiceLoader(loaders), config=self.config)\n        env = jinja2.Environment(loader=loader, undefined=undefined_type)\n\n        from .environ import get_dict\n\n        env.globals.update(get_selectors(self.config))\n        env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n",
                      "markdown": "`        loader = FilteredLoader(jinja2.ChoiceLoader(loaders), config=self.config)\n        env = jinja2.Environment(loader=loader, undefined=undefined_type)\n\n        from .environ import get_dict\n\n        env.globals.update(get_selectors(self.config))\n        env.globals.update(get_dict(m=self, skip_build_id=skip_build_id))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1946,
                  "startColumn": 14,
                  "endLine": 1946,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        ]\n\n        # search relative to current conda environment directory\n        conda_env_path = os.environ.get(\n            \"CONDA_DEFAULT_ENV\"\n        )  # path to current conda environment\n        if conda_env_path and os.path.isdir(conda_env_path):\n",
                    "rendered": {
                      "text": "        ]\n\n        # search relative to current conda environment directory\n        conda_env_path = os.environ.get(\n            \"CONDA_DEFAULT_ENV\"\n        )  # path to current conda environment\n        if conda_env_path and os.path.isdir(conda_env_path):\n",
                      "markdown": "`        ]\n\n        # search relative to current conda environment directory\n        conda_env_path = os.environ.get(\n            \"CONDA_DEFAULT_ENV\"\n        )  # path to current conda environment\n        if conda_env_path and os.path.isdir(conda_env_path):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1791,
                  "startColumn": 18,
                  "endLine": 1791,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            if value:\n                d[key] = value\n\n        preferred_env = self.get_value(\"build/preferred_env\")\n        if preferred_env:\n            d[\"preferred_env\"] = preferred_env\n\n",
                    "rendered": {
                      "text": "            if value:\n                d[key] = value\n\n        preferred_env = self.get_value(\"build/preferred_env\")\n        if preferred_env:\n            d[\"preferred_env\"] = preferred_env\n\n",
                      "markdown": "`            if value:\n                d[key] = value\n\n        preferred_env = self.get_value(\"build/preferred_env\")\n        if preferred_env:\n            d[\"preferred_env\"] = preferred_env\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1167,
                  "startColumn": 58,
                  "endLine": 1167,
                  "endColumn": 69,
                  "snippet": {
                    "text": "            self.path = os.path.dirname(self.meta_path)\n        self.requirements_path = join(self.path, \"requirements.txt\")\n\n        # Start with bare-minimum contents so we can call environ.get_dict() with impunity\n        # We'll immediately replace these contents in parse_again()\n        self.meta = dict()\n\n",
                    "rendered": {
                      "text": "            self.path = os.path.dirname(self.meta_path)\n        self.requirements_path = join(self.path, \"requirements.txt\")\n\n        # Start with bare-minimum contents so we can call environ.get_dict() with impunity\n        # We'll immediately replace these contents in parse_again()\n        self.meta = dict()\n\n",
                      "markdown": "`            self.path = os.path.dirname(self.meta_path)\n        self.requirements_path = join(self.path, \"requirements.txt\")\n\n        # Start with bare-minimum contents so we can call environ.get_dict() with impunity\n        # We'll immediately replace these contents in parse_again()\n        self.meta = dict()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 26,
                  "endLine": 158,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        win64=bool(plat == \"win-64\"),\n        os=os,\n        environ=os.environ,\n        nomkl=bool(int(os.environ.get(\"FEATURE_NOMKL\", False))),\n    )\n\n    # Add the current platform to the list of subdirs to enable conda-build\n",
                    "rendered": {
                      "text": "        win64=bool(plat == \"win-64\"),\n        os=os,\n        environ=os.environ,\n        nomkl=bool(int(os.environ.get(\"FEATURE_NOMKL\", False))),\n    )\n\n    # Add the current platform to the list of subdirs to enable conda-build\n",
                      "markdown": "`        win64=bool(plat == \"win-64\"),\n        os=os,\n        environ=os.environ,\n        nomkl=bool(int(os.environ.get(\"FEATURE_NOMKL\", False))),\n    )\n\n    # Add the current platform to the list of subdirs to enable conda-build\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2640,
                  "startColumn": 79,
                  "endLine": 2640,
                  "endColumn": 83,
                  "snippet": {
                    "text": "                        m.meta[\"requirements\"][\"build\"] = build_reqs\n                    non_conda_packages.append((output_d, m))\n                else:\n                    # for wheels and other non-conda packages, just append them at the end.\n                    #    no deduplication with hashes currently.\n                    # hard part about including any part of output_d\n                    #    outside of this func is that it is harder to\n",
                    "rendered": {
                      "text": "                        m.meta[\"requirements\"][\"build\"] = build_reqs\n                    non_conda_packages.append((output_d, m))\n                else:\n                    # for wheels and other non-conda packages, just append them at the end.\n                    #    no deduplication with hashes currently.\n                    # hard part about including any part of output_d\n                    #    outside of this func is that it is harder to\n",
                      "markdown": "`                        m.meta[\"requirements\"][\"build\"] = build_reqs\n                    non_conda_packages.append((output_d, m))\n                else:\n                    # for wheels and other non-conda packages, just append them at the end.\n                    #    no deduplication with hashes currently.\n                    # hard part about including any part of output_d\n                    #    outside of this func is that it is harder to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2609,
                  "startColumn": 36,
                  "endLine": 2609,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n            assert output_tuples, (\n                \"Error: output metadata set is empty.  Please file an issue\"\n                \" on the conda-build tracker at https://github.com/conda/conda-build/issues\"\n            )\n\n            render_order: list[OutputTuple] = _toposort_outputs(output_tuples)\n",
                    "rendered": {
                      "text": "\n            assert output_tuples, (\n                \"Error: output metadata set is empty.  Please file an issue\"\n                \" on the conda-build tracker at https://github.com/conda/conda-build/issues\"\n            )\n\n            render_order: list[OutputTuple] = _toposort_outputs(output_tuples)\n",
                      "markdown": "`\n            assert output_tuples, (\n                \"Error: output metadata set is empty.  Please file an issue\"\n                \" on the conda-build tracker at https://github.com/conda/conda-build/issues\"\n            )\n\n            render_order: list[OutputTuple] = _toposort_outputs(output_tuples)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2091,
                  "startColumn": 87,
                  "endLine": 2091,
                  "endColumn": 96,
                  "snippet": {
                    "text": "\n    @property\n    def uses_vcs_in_meta(self) -> Literal[\"git\", \"svn\", \"mercurial\"] | None:\n        \"\"\"returns name of vcs used if recipe contains metadata associated with version control systems.\n        If this metadata is present, a download/copy will be forced in parse_or_try_download.\n        \"\"\"\n        vcs = None\n",
                    "rendered": {
                      "text": "\n    @property\n    def uses_vcs_in_meta(self) -> Literal[\"git\", \"svn\", \"mercurial\"] | None:\n        \"\"\"returns name of vcs used if recipe contains metadata associated with version control systems.\n        If this metadata is present, a download/copy will be forced in parse_or_try_download.\n        \"\"\"\n        vcs = None\n",
                      "markdown": "`\n    @property\n    def uses_vcs_in_meta(self) -> Literal[\"git\", \"svn\", \"mercurial\"] | None:\n        \"\"\"returns name of vcs used if recipe contains metadata associated with version control systems.\n        If this metadata is present, a download/copy will be forced in parse_or_try_download.\n        \"\"\"\n        vcs = None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1356,
                  "startColumn": 28,
                  "endLine": 1356,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            )\n            self.final = final\n\n        # always parse again at the end without permit_undefined_jinja\n        self.parse_again(\n            permit_undefined_jinja=False,\n            allow_no_other_outputs=allow_no_other_outputs,\n",
                    "rendered": {
                      "text": "            )\n            self.final = final\n\n        # always parse again at the end without permit_undefined_jinja\n        self.parse_again(\n            permit_undefined_jinja=False,\n            allow_no_other_outputs=allow_no_other_outputs,\n",
                      "markdown": "`            )\n            self.final = final\n\n        # always parse again at the end without permit_undefined_jinja\n        self.parse_again(\n            permit_undefined_jinja=False,\n            allow_no_other_outputs=allow_no_other_outputs,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1333,
                  "startColumn": 28,
                  "endLine": 1333,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        #   can reset it (to True)\n        final = self.final\n\n        # always parse again at least once\n        self.parse_again(\n            permit_undefined_jinja=True,\n            allow_no_other_outputs=allow_no_other_outputs,\n",
                    "rendered": {
                      "text": "        #   can reset it (to True)\n        final = self.final\n\n        # always parse again at least once\n        self.parse_again(\n            permit_undefined_jinja=True,\n            allow_no_other_outputs=allow_no_other_outputs,\n",
                      "markdown": "`        #   can reset it (to True)\n        final = self.final\n\n        # always parse again at least once\n        self.parse_again(\n            permit_undefined_jinja=True,\n            allow_no_other_outputs=allow_no_other_outputs,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 79,
                  "endLine": 1242,
                  "endColumn": 83,
                  "snippet": {
                    "text": "        \"\"\"Redo parsing for key-value pairs that are not initialized in the\n        first pass.\n\n        config: a conda-build Config object.  If None, the config object passed at creation\n                time is used.\n\n        permit_undefined_jinja: If True, *any* use of undefined jinja variables will\n",
                    "rendered": {
                      "text": "        \"\"\"Redo parsing for key-value pairs that are not initialized in the\n        first pass.\n\n        config: a conda-build Config object.  If None, the config object passed at creation\n                time is used.\n\n        permit_undefined_jinja: If True, *any* use of undefined jinja variables will\n",
                      "markdown": "`        \"\"\"Redo parsing for key-value pairs that are not initialized in the\n        first pass.\n\n        config: a conda-build Config object.  If None, the config object passed at creation\n                time is used.\n\n        permit_undefined_jinja: If True, *any* use of undefined jinja variables will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 757,
                  "startColumn": 9,
                  "endLine": 757,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    ret_meta = source_meta.copy()\n    # loop over the old versions\n    for key, has in zip(git_rev_tags[1:], has_rev_tags[1:]):\n        # update if needed\n        if has:\n            ret_meta[git_rev_tags[0]] = ret_meta[key]\n        # and remove\n",
                    "rendered": {
                      "text": "    ret_meta = source_meta.copy()\n    # loop over the old versions\n    for key, has in zip(git_rev_tags[1:], has_rev_tags[1:]):\n        # update if needed\n        if has:\n            ret_meta[git_rev_tags[0]] = ret_meta[key]\n        # and remove\n",
                      "markdown": "`    ret_meta = source_meta.copy()\n    # loop over the old versions\n    for key, has in zip(git_rev_tags[1:], has_rev_tags[1:]):\n        # update if needed\n        if has:\n            ret_meta[git_rev_tags[0]] = ret_meta[key]\n        # and remove\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 563,
                  "startColumn": 27,
                  "endLine": 563,
                  "endColumn": 35,
                  "snippet": {
                    "text": "TRUES = {\"y\", \"on\", \"true\", \"yes\"}\nFALSES = {\"n\", \"no\", \"false\", \"off\"}\n\n# If you update this please update the example in\n# conda-docs/docs/source/build.rst\nFIELDS = {\n    \"package\": {\n",
                    "rendered": {
                      "text": "TRUES = {\"y\", \"on\", \"true\", \"yes\"}\nFALSES = {\"n\", \"no\", \"false\", \"off\"}\n\n# If you update this please update the example in\n# conda-docs/docs/source/build.rst\nFIELDS = {\n    \"package\": {\n",
                      "markdown": "`TRUES = {\"y\", \"on\", \"true\", \"yes\"}\nFALSES = {\"n\", \"no\", \"false\", \"off\"}\n\n# If you update this please update the example in\n# conda-docs/docs/source/build.rst\nFIELDS = {\n    \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 563,
                  "startColumn": 8,
                  "endLine": 563,
                  "endColumn": 16,
                  "snippet": {
                    "text": "TRUES = {\"y\", \"on\", \"true\", \"yes\"}\nFALSES = {\"n\", \"no\", \"false\", \"off\"}\n\n# If you update this please update the example in\n# conda-docs/docs/source/build.rst\nFIELDS = {\n    \"package\": {\n",
                    "rendered": {
                      "text": "TRUES = {\"y\", \"on\", \"true\", \"yes\"}\nFALSES = {\"n\", \"no\", \"false\", \"off\"}\n\n# If you update this please update the example in\n# conda-docs/docs/source/build.rst\nFIELDS = {\n    \"package\": {\n",
                      "markdown": "`TRUES = {\"y\", \"on\", \"true\", \"yes\"}\nFALSES = {\"n\", \"no\", \"false\", \"off\"}\n\n# If you update this please update the example in\n# conda-docs/docs/source/build.rst\nFIELDS = {\n    \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 3,
                  "endLine": 251,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n\n# Selectors must be either:\n# - at end of the line\n# - embedded (anywhere) within a comment\n#\n# Notes:\n",
                    "rendered": {
                      "text": "\n\n# Selectors must be either:\n# - at end of the line\n# - embedded (anywhere) within a comment\n#\n# Notes:\n",
                      "markdown": "`\n\n# Selectors must be either:\n# - at end of the line\n# - embedded (anywhere) within a comment\n#\n# Notes:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 17,
                  "endLine": 147,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    Returns:\n        dict[str, bool]: Dictionary of on/off selectors for Jinja\n    \"\"\"\n    # Remember to update the docs of any of this changes\n    plat = config.host_subdir\n    d = dict(\n        linux32=bool(plat == \"linux-32\"),\n",
                    "rendered": {
                      "text": "    Returns:\n        dict[str, bool]: Dictionary of on/off selectors for Jinja\n    \"\"\"\n    # Remember to update the docs of any of this changes\n    plat = config.host_subdir\n    d = dict(\n        linux32=bool(plat == \"linux-32\"),\n",
                      "markdown": "`    Returns:\n        dict[str, bool]: Dictionary of on/off selectors for Jinja\n    \"\"\"\n    # Remember to update the docs of any of this changes\n    plat = config.host_subdir\n    d = dict(\n        linux32=bool(plat == \"linux-32\"),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 7,
                  "endLine": 115,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#    outputs, so our names match, then we use that numeric index with this\n#    regex, which extract all outputs in order.\n# Stop condition is one of 3 things:\n#    \\w at the start of a line (next top-level section)\n#    \\Z (end of file)\n#    next output, as delineated by \"- name\" or \"- type\"\noutput_re = re.compile(\n",
                    "rendered": {
                      "text": "#    outputs, so our names match, then we use that numeric index with this\n#    regex, which extract all outputs in order.\n# Stop condition is one of 3 things:\n#    \\w at the start of a line (next top-level section)\n#    \\Z (end of file)\n#    next output, as delineated by \"- name\" or \"- type\"\noutput_re = re.compile(\n",
                      "markdown": "`#    outputs, so our names match, then we use that numeric index with this\n#    regex, which extract all outputs in order.\n# Stop condition is one of 3 things:\n#    \\w at the start of a line (next top-level section)\n#    \\Z (end of file)\n#    next output, as delineated by \"- name\" or \"- type\"\noutput_re = re.compile(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2919,
                  "startColumn": 60,
                  "endLine": 2919,
                  "endColumn": 68,
                  "snippet": {
                    "text": "            else:\n                log = utils.get_logger(__name__)\n                log.warning(\n                    f\"Not detecting used variables in output script {script}; conda-build only knows \"\n                    \"how to search .sh and .bat files right now.\"\n                )\n        return used_vars\n",
                    "rendered": {
                      "text": "            else:\n                log = utils.get_logger(__name__)\n                log.warning(\n                    f\"Not detecting used variables in output script {script}; conda-build only knows \"\n                    \"how to search .sh and .bat files right now.\"\n                )\n        return used_vars\n",
                      "markdown": "`            else:\n                log = utils.get_logger(__name__)\n                log.warning(\n                    f\"Not detecting used variables in output script {script}; conda-build only knows \"\n                    \"how to search .sh and .bat files right now.\"\n                )\n        return used_vars\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2907,
                  "startColumn": 11,
                  "endLine": 2907,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        )\n        used_vars = set()\n        if \"script\" in this_output:\n            script = os.path.join(self.path, this_output[\"script\"])\n            if os.path.splitext(script)[1] == \".sh\":\n                used_vars.update(\n                    find_used_variables_in_shell_script(self.config.variant, script)\n",
                    "rendered": {
                      "text": "        )\n        used_vars = set()\n        if \"script\" in this_output:\n            script = os.path.join(self.path, this_output[\"script\"])\n            if os.path.splitext(script)[1] == \".sh\":\n                used_vars.update(\n                    find_used_variables_in_shell_script(self.config.variant, script)\n",
                      "markdown": "`        )\n        used_vars = set()\n        if \"script\" in this_output:\n            script = os.path.join(self.path, this_output[\"script\"])\n            if os.path.splitext(script)[1] == \".sh\":\n                used_vars.update(\n                    find_used_variables_in_shell_script(self.config.variant, script)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 2579,
                  "startColumn": 31,
                  "endLine": 2579,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                        requirements = out.get(\"requirements\")\n                        if requirements:\n                            requirements = utils.expand_reqs(requirements)\n                            for env in (\"build\", \"host\", \"run\"):\n                                insert_variant_versions(requirements, variant, env)\n                            out[\"requirements\"] = requirements\n                        out_metadata = ref_metadata.get_output_metadata(out)\n",
                    "rendered": {
                      "text": "                        requirements = out.get(\"requirements\")\n                        if requirements:\n                            requirements = utils.expand_reqs(requirements)\n                            for env in (\"build\", \"host\", \"run\"):\n                                insert_variant_versions(requirements, variant, env)\n                            out[\"requirements\"] = requirements\n                        out_metadata = ref_metadata.get_output_metadata(out)\n",
                      "markdown": "`                        requirements = out.get(\"requirements\")\n                        if requirements:\n                            requirements = utils.expand_reqs(requirements)\n                            for env in (\"build\", \"host\", \"run\"):\n                                insert_variant_versions(requirements, variant, env)\n                            out[\"requirements\"] = requirements\n                        out_metadata = ref_metadata.get_output_metadata(out)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1963,
                  "startColumn": 7,
                  "endLine": 1963,
                  "endColumn": 12,
                  "snippet": {
                    "text": "            undefined_type = UndefinedNeverFail\n\n        loader = FilteredLoader(jinja2.ChoiceLoader(loaders), config=self.config)\n        env = jinja2.Environment(loader=loader, undefined=undefined_type)\n\n        from .environ import get_dict\n\n",
                    "rendered": {
                      "text": "            undefined_type = UndefinedNeverFail\n\n        loader = FilteredLoader(jinja2.ChoiceLoader(loaders), config=self.config)\n        env = jinja2.Environment(loader=loader, undefined=undefined_type)\n\n        from .environ import get_dict\n\n",
                      "markdown": "`            undefined_type = UndefinedNeverFail\n\n        loader = FilteredLoader(jinja2.ChoiceLoader(loaders), config=self.config)\n        env = jinja2.Environment(loader=loader, undefined=undefined_type)\n\n        from .environ import get_dict\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1594,
                  "startColumn": 60,
                  "endLine": 1594,
                  "endColumn": 65,
                  "snippet": {
                    "text": "                raise RuntimeError(f\"Invalid package specification: {spec!r}\")\n            except (AttributeError, ValueError) as e:\n                raise RuntimeError(\n                    \"Received dictionary as spec.  Note that pip requirements are \"\n                    \"not supported in conda-build meta.yaml.  Error message: \" + str(e)\n                )\n            if ms.name == self.name() and not (\n",
                    "rendered": {
                      "text": "                raise RuntimeError(f\"Invalid package specification: {spec!r}\")\n            except (AttributeError, ValueError) as e:\n                raise RuntimeError(\n                    \"Received dictionary as spec.  Note that pip requirements are \"\n                    \"not supported in conda-build meta.yaml.  Error message: \" + str(e)\n                )\n            if ms.name == self.name() and not (\n",
                      "markdown": "`                raise RuntimeError(f\"Invalid package specification: {spec!r}\")\n            except (AttributeError, ValueError) as e:\n                raise RuntimeError(\n                    \"Received dictionary as spec.  Note that pip requirements are \"\n                    \"not supported in conda-build meta.yaml.  Error message: \" + str(e)\n                )\n            if ms.name == self.name() and not (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1310,
                  "startColumn": 33,
                  "endLine": 1310,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            if any(hasattr(item, \"keys\") for item in (self.get_value(key) or [])):\n                raise ValueError(\n                    \"Dictionaries are not supported as values in requirements sections\"\n                    \".  Note that pip requirements as used in conda-env \"\n                    \"environment.yml files are not supported by conda-build.\"\n                )\n\n",
                    "rendered": {
                      "text": "            if any(hasattr(item, \"keys\") for item in (self.get_value(key) or [])):\n                raise ValueError(\n                    \"Dictionaries are not supported as values in requirements sections\"\n                    \".  Note that pip requirements as used in conda-env \"\n                    \"environment.yml files are not supported by conda-build.\"\n                )\n\n",
                      "markdown": "`            if any(hasattr(item, \"keys\") for item in (self.get_value(key) or [])):\n                raise ValueError(\n                    \"Dictionaries are not supported as values in requirements sections\"\n                    \".  Note that pip requirements as used in conda-env \"\n                    \"environment.yml files are not supported by conda-build.\"\n                )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 1243,
                  "startColumn": 15,
                  "endLine": 1243,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        first pass.\n\n        config: a conda-build Config object.  If None, the config object passed at creation\n                time is used.\n\n        permit_undefined_jinja: If True, *any* use of undefined jinja variables will\n                                evaluate to an emtpy string, without emitting an error.\n",
                    "rendered": {
                      "text": "        first pass.\n\n        config: a conda-build Config object.  If None, the config object passed at creation\n                time is used.\n\n        permit_undefined_jinja: If True, *any* use of undefined jinja variables will\n                                evaluate to an emtpy string, without emitting an error.\n",
                      "markdown": "`        first pass.\n\n        config: a conda-build Config object.  If None, the config object passed at creation\n                time is used.\n\n        permit_undefined_jinja: If True, *any* use of undefined jinja variables will\n                                evaluate to an emtpy string, without emitting an error.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 12,
                  "endLine": 803,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        build_pkg_names = [ms.name for ms in metadata.ms_depends(build_or_host)]\n        build_deps = metadata.meta.get(\"requirements\", {}).get(build_or_host, [])\n        # TODO: this is the bit that puts in strings like py27np111 in the filename.  It would be\n        #    nice to get rid of this, since the hash supercedes that functionally, but not clear\n        #    whether anyone's tools depend on this file naming right now.\n        for s, names, places in (\n            (\"np\", \"numpy\", 2),\n",
                    "rendered": {
                      "text": "        build_pkg_names = [ms.name for ms in metadata.ms_depends(build_or_host)]\n        build_deps = metadata.meta.get(\"requirements\", {}).get(build_or_host, [])\n        # TODO: this is the bit that puts in strings like py27np111 in the filename.  It would be\n        #    nice to get rid of this, since the hash supercedes that functionally, but not clear\n        #    whether anyone's tools depend on this file naming right now.\n        for s, names, places in (\n            (\"np\", \"numpy\", 2),\n",
                      "markdown": "`        build_pkg_names = [ms.name for ms in metadata.ms_depends(build_or_host)]\n        build_deps = metadata.meta.get(\"requirements\", {}).get(build_or_host, [])\n        # TODO: this is the bit that puts in strings like py27np111 in the filename.  It would be\n        #    nice to get rid of this, since the hash supercedes that functionally, but not clear\n        #    whether anyone's tools depend on this file naming right now.\n        for s, names, places in (\n            (\"np\", \"numpy\", 2),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 732,
                  "startColumn": 28,
                  "endLine": 732,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\ndef _git_clean(source_meta):\n    \"\"\"\n    Reduce the redundancy in git specification by removing git_tag and\n    git_branch.\n\n    If one is specified, copy to git_rev.\n",
                    "rendered": {
                      "text": "\ndef _git_clean(source_meta):\n    \"\"\"\n    Reduce the redundancy in git specification by removing git_tag and\n    git_branch.\n\n    If one is specified, copy to git_rev.\n",
                      "markdown": "`\ndef _git_clean(source_meta):\n    \"\"\"\n    Reduce the redundancy in git specification by removing git_tag and\n    git_branch.\n\n    If one is specified, copy to git_rev.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 14,
                  "endLine": 221,
                  "snippet": {
                    "text": "    d[\"pl\"] = pl\n\n    lua = config.variant.get(\"lua\", defaults[\"lua\"])\n    d[\"lua\"] = lua\n    d[\"luajit\"] = bool(lua[0] == \"2\")\n\n    for feature, value in feature_list:\n        d[feature] = value\n",
                    "rendered": {
                      "text": "    d[\"pl\"] = pl\n\n    lua = config.variant.get(\"lua\", defaults[\"lua\"])\n    d[\"lua\"] = lua\n    d[\"luajit\"] = bool(lua[0] == \"2\")\n\n    for feature, value in feature_list:\n        d[feature] = value\n",
                      "markdown": "`    d[\"pl\"] = pl\n\n    lua = config.variant.get(\"lua\", defaults[\"lua\"])\n    d[\"lua\"] = lua\n    d[\"luajit\"] = bool(lua[0] == \"2\")\n\n    for feature, value in feature_list:\n        d[feature] = value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 3,
                  "endLine": 219,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    pl = config.variant.get(\"perl\", defaults[\"perl\"])\n    d[\"pl\"] = pl\n\n    lua = config.variant.get(\"lua\", defaults[\"lua\"])\n    d[\"lua\"] = lua\n    d[\"luajit\"] = bool(lua[0] == \"2\")\n\n",
                    "rendered": {
                      "text": "    pl = config.variant.get(\"perl\", defaults[\"perl\"])\n    d[\"pl\"] = pl\n\n    lua = config.variant.get(\"lua\", defaults[\"lua\"])\n    d[\"lua\"] = lua\n    d[\"luajit\"] = bool(lua[0] == \"2\")\n\n",
                      "markdown": "`    pl = config.variant.get(\"perl\", defaults[\"perl\"])\n    d[\"pl\"] = pl\n\n    lua = config.variant.get(\"lua\", defaults[\"lua\"])\n    d[\"lua\"] = lua\n    d[\"luajit\"] = bool(lua[0] == \"2\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/metadata.py"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 6,
                  "endLine": 12,
                  "snippet": {
                    "text": "import os\nimport re\nimport sys\nimport time\nimport warnings\nfrom collections import OrderedDict\nfrom functools import lru_cache\nfrom os.path import isdir, isfile, join\n",
                    "rendered": {
                      "text": "import os\nimport re\nimport sys\nimport time\nimport warnings\nfrom collections import OrderedDict\nfrom functools import lru_cache\nfrom os.path import isdir, isfile, join\n",
                      "markdown": "`import os\nimport re\nimport sys\nimport time\nimport warnings\nfrom collections import OrderedDict\nfrom functools import lru_cache\nfrom os.path import isdir, isfile, join\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/license_family.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 56,
                  "endLine": 63,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    \"\"\"\n\n    if isinstance(index, dict):\n        license_name = index.get(\"license_family\", index.get(\"license\"))\n    else:  # index argument is actually a string\n        license_name = index\n\n",
                    "rendered": {
                      "text": "    \"\"\"\n\n    if isinstance(index, dict):\n        license_name = index.get(\"license_family\", index.get(\"license\"))\n    else:  # index argument is actually a string\n        license_name = index\n\n",
                      "markdown": "`    \"\"\"\n\n    if isinstance(index, dict):\n        license_name = index.get(\"license_family\", index.get(\"license\"))\n    else:  # index argument is actually a string\n        license_name = index\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/license_family.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 28,
                  "endLine": 63,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    \"\"\"\n\n    if isinstance(index, dict):\n        license_name = index.get(\"license_family\", index.get(\"license\"))\n    else:  # index argument is actually a string\n        license_name = index\n\n",
                    "rendered": {
                      "text": "    \"\"\"\n\n    if isinstance(index, dict):\n        license_name = index.get(\"license_family\", index.get(\"license\"))\n    else:  # index argument is actually a string\n        license_name = index\n\n",
                      "markdown": "`    \"\"\"\n\n    if isinstance(index, dict):\n        license_name = index.get(\"license_family\", index.get(\"license\"))\n    else:  # index argument is actually a string\n        license_name = index\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/cpython-launcher-c-mods-for-setuptools"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 15,
                  "endLine": 28,
                  "snippet": {
                    "text": " #include <tchar.h>\n \n+/* To build on MSYS2 use the following script:\n+#!/usr/bin/env bash\n+\n+wget -c https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\n+patch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\n+RCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n",
                    "rendered": {
                      "text": " #include <tchar.h>\n \n+/* To build on MSYS2 use the following script:\n+#!/usr/bin/env bash\n+\n+wget -c https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\n+patch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\n+RCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n",
                      "markdown": "` #include <tchar.h>\n \n+/* To build on MSYS2 use the following script:\n+#!/usr/bin/env bash\n+\n+wget -c https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\n+patch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\n+RCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/cpython-launcher-c-mods-for-setuptools"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 32,
                  "endLine": 303,
                  "endColumn": 40,
                  "snippet": {
                    "text": "+        }\n         wcscat_s(newcommand, newlen, L\" \");\n         wcscat_s(newcommand, newlen, command);\n         debug(L\"Running wrapped script with command line '%ls'\\n\", newcommand);\n",
                    "rendered": {
                      "text": "+        }\n         wcscat_s(newcommand, newlen, L\" \");\n         wcscat_s(newcommand, newlen, command);\n         debug(L\"Running wrapped script with command line '%ls'\\n\", newcommand);\n",
                      "markdown": "`+        }\n         wcscat_s(newcommand, newlen, L\" \");\n         wcscat_s(newcommand, newlen, command);\n         debug(L\"Running wrapped script with command line '%ls'\\n\", newcommand);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/cpython-launcher-c-mods-for-setuptools"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 23,
                  "endLine": 280,
                  "endColumn": 31,
                  "snippet": {
                    "text": "@@ -1731,13 +1863,24 @@\n     locate_wrapped_script();\n \n     /* Add the wrapped script to the start of command */\n-    newlen = wcslen(wrapped_script_path) + wcslen(command) + 2; /* ' ' + NUL */\n+    p = wcsrchr(wrapped_script_path, L' ');\n+    if (p != NULL)\n",
                    "rendered": {
                      "text": "@@ -1731,13 +1863,24 @@\n     locate_wrapped_script();\n \n     /* Add the wrapped script to the start of command */\n-    newlen = wcslen(wrapped_script_path) + wcslen(command) + 2; /* ' ' + NUL */\n+    p = wcsrchr(wrapped_script_path, L' ');\n+    if (p != NULL)\n",
                      "markdown": "`@@ -1731,13 +1863,24 @@\n     locate_wrapped_script();\n \n     /* Add the wrapped script to the start of command */\n-    newlen = wcslen(wrapped_script_path) + wcslen(command) + 2; /* ' ' + NUL */\n+    p = wcsrchr(wrapped_script_path, L' ');\n+    if (p != NULL)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/cpython-launcher-c-mods-for-setuptools"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 34,
                  "endLine": 250,
                  "endColumn": 42,
                  "snippet": {
                    "text": "+Python Launcher for Windows (Anaconda/Setuptools variant) Version %ls\\n\\n\", version_text);\n     fwprintf(stdout, L\"\\\n usage:\\n\\\n %ls [launcher-args] [python-args] script [script-args]\\n\\n\", argv[0]);\n@@ -1584,6 +1711,7 @@\n     int newlen;\n     HRESULT hr;\n",
                    "rendered": {
                      "text": "+Python Launcher for Windows (Anaconda/Setuptools variant) Version %ls\\n\\n\", version_text);\n     fwprintf(stdout, L\"\\\n usage:\\n\\\n %ls [launcher-args] [python-args] script [script-args]\\n\\n\", argv[0]);\n@@ -1584,6 +1711,7 @@\n     int newlen;\n     HRESULT hr;\n",
                      "markdown": "`+Python Launcher for Windows (Anaconda/Setuptools variant) Version %ls\\n\\n\", version_text);\n     fwprintf(stdout, L\"\\\n usage:\\n\\\n %ls [launcher-args] [python-args] script [script-args]\\n\\n\", argv[0]);\n@@ -1584,6 +1711,7 @@\n     int newlen;\n     HRESULT hr;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/cpython-launcher-c-mods-for-setuptools"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 14,
                  "endLine": 68,
                  "endColumn": 22,
                  "snippet": {
                    "text": "+/* Previously BUFSIZE was used for this but 256 is not enough for even 260\n+ * ASCII characters and far too little for unicode (it is a char array, not\n+ * a wchar_t array, though it needs to be even bigger than 260 wchar_ts as\n+ * the source script file could contain UTF-8 or UTF-32 (wchar_t is 2-byte)\n+ */\n+#define SHEBANG_BUFSIZE 2048\n+\n",
                    "rendered": {
                      "text": "+/* Previously BUFSIZE was used for this but 256 is not enough for even 260\n+ * ASCII characters and far too little for unicode (it is a char array, not\n+ * a wchar_t array, though it needs to be even bigger than 260 wchar_ts as\n+ * the source script file could contain UTF-8 or UTF-32 (wchar_t is 2-byte)\n+ */\n+#define SHEBANG_BUFSIZE 2048\n+\n",
                      "markdown": "`+/* Previously BUFSIZE was used for this but 256 is not enough for even 260\n+ * ASCII characters and far too little for unicode (it is a char array, not\n+ * a wchar_t array, though it needs to be even bigger than 260 wchar_ts as\n+ * the source script file could contain UTF-8 or UTF-32 (wchar_t is 2-byte)\n+ */\n+#define SHEBANG_BUFSIZE 2048\n+\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/cpython-launcher-c-mods-for-setuptools"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 15,
                  "endLine": 28,
                  "snippet": {
                    "text": " #include <tchar.h>\n \n+/* To build on MSYS2 use the following script:\n+#!/usr/bin/env bash\n+\n+wget -c https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\n+patch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\n+RCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n",
                    "rendered": {
                      "text": " #include <tchar.h>\n \n+/* To build on MSYS2 use the following script:\n+#!/usr/bin/env bash\n+\n+wget -c https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\n+patch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\n+RCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n",
                      "markdown": "` #include <tchar.h>\n \n+/* To build on MSYS2 use the following script:\n+#!/usr/bin/env bash\n+\n+wget -c https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\n+patch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\n+RCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/cpython-launcher-c-mods-for-setuptools"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 15,
                  "endLine": 29,
                  "snippet": {
                    "text": " #include <tchar.h>\n \n+/* To build on MSYS2 use the following script:\n+#!/usr/bin/env bash\n+\n+wget -c https://raw.githubusercontent.com/python/cpython/3.6/PC/launcher.c -O launcher.c\n+patch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.patch\n+RCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n",
                    "rendered": {
                      "text": " #include <tchar.h>\n \n+/* To build on MSYS2 use the following script:\n+#!/usr/bin/env bash\n+\n+wget -c https://raw.githubusercontent.com/python/cpython/3.6/PC/launcher.c -O launcher.c\n+patch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.patch\n+RCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n",
                      "markdown": "` #include <tchar.h>\n \n+/* To build on MSYS2 use the following script:\n+#!/usr/bin/env bash\n+\n+wget -c https://raw.githubusercontent.com/python/cpython/3.6/PC/launcher.c -O launcher.c\n+patch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.patch\n+RCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/cpython-launcher-c-mods-for-setuptools"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 55,
                  "endLine": 247,
                  "endColumn": 63,
                  "snippet": {
                    "text": "-Python Launcher for Windows Version %ls\\n\\n\", version_text);\n+Python Launcher for Windows (Anaconda/Setuptools variant) Version %ls\\n\\n\", version_text);\n             fwprintf(stdout, L\"\\\n usage: %ls [ launcher-arguments ] [ python-arguments ] script [ script-arguments ]\\n\\n\", argv[0]);\n             fputws(L\"\\\n",
                    "rendered": {
                      "text": "-Python Launcher for Windows Version %ls\\n\\n\", version_text);\n+Python Launcher for Windows (Anaconda/Setuptools variant) Version %ls\\n\\n\", version_text);\n             fwprintf(stdout, L\"\\\n usage: %ls [ launcher-arguments ] [ python-arguments ] script [ script-arguments ]\\n\\n\", argv[0]);\n             fputws(L\"\\\n",
                      "markdown": "`-Python Launcher for Windows Version %ls\\n\\n\", version_text);\n+Python Launcher for Windows (Anaconda/Setuptools variant) Version %ls\\n\\n\", version_text);\n             fwprintf(stdout, L\"\\\n usage: %ls [ launcher-arguments ] [ python-arguments ] script [ script-arguments ]\\n\\n\", argv[0]);\n             fputws(L\"\\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/cpython-launcher-c-mods-for-setuptools"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 32,
                  "endLine": 239,
                  "endColumn": 40,
                  "snippet": {
                    "text": "+        }\n         wcscat_s(newcommand, newlen, L\" \");\n         wcscat_s(newcommand, newlen, command);\n         debug(L\"Running wrapped script with command line '%ls'\\n\", newcommand);\n@@ -1537,7 +1661,7 @@\n \n             get_version_info(version_text, MAX_PATH);\n",
                    "rendered": {
                      "text": "+        }\n         wcscat_s(newcommand, newlen, L\" \");\n         wcscat_s(newcommand, newlen, command);\n         debug(L\"Running wrapped script with command line '%ls'\\n\", newcommand);\n@@ -1537,7 +1661,7 @@\n \n             get_version_info(version_text, MAX_PATH);\n",
                      "markdown": "`+        }\n         wcscat_s(newcommand, newlen, L\" \");\n         wcscat_s(newcommand, newlen, command);\n         debug(L\"Running wrapped script with command line '%ls'\\n\", newcommand);\n@@ -1537,7 +1661,7 @@\n \n             get_version_info(version_text, MAX_PATH);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/cpython-launcher-c-mods-for-setuptools"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 23,
                  "endLine": 217,
                  "endColumn": 31,
                  "snippet": {
                    "text": "@@ -1466,13 +1580,23 @@\n     locate_wrapped_script();\n \n     /* Add the wrapped script to the start of command */\n-    newlen = wcslen(wrapped_script_path) + wcslen(command) + 2; /* ' ' + NUL */\n+    p = wcsrchr(wrapped_script_path, L' ');\n+    if (p != NULL)\n",
                    "rendered": {
                      "text": "@@ -1466,13 +1580,23 @@\n     locate_wrapped_script();\n \n     /* Add the wrapped script to the start of command */\n-    newlen = wcslen(wrapped_script_path) + wcslen(command) + 2; /* ' ' + NUL */\n+    p = wcsrchr(wrapped_script_path, L' ');\n+    if (p != NULL)\n",
                      "markdown": "`@@ -1466,13 +1580,23 @@\n     locate_wrapped_script();\n \n     /* Add the wrapped script to the start of command */\n-    newlen = wcslen(wrapped_script_path) + wcslen(command) + 2; /* ' ' + NUL */\n+    p = wcsrchr(wrapped_script_path, L' ');\n+    if (p != NULL)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/cpython-launcher-c-mods-for-setuptools"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 14,
                  "endLine": 69,
                  "endColumn": 22,
                  "snippet": {
                    "text": "+/* Previously BUFSIZE was used for this but 256 is not enough for even 260\n+ * ASCII characters and far too little for unicode (it is a char array, not\n+ * a wchar_t array, though it needs to be even bigger than 260 wchar_ts as\n+ * the source script file could contain UTF-8 or UTF-32 (wchar_t is 2-byte)\n+ */\n+#define SHEBANG_BUFSIZE 2048\n+\n",
                    "rendered": {
                      "text": "+/* Previously BUFSIZE was used for this but 256 is not enough for even 260\n+ * ASCII characters and far too little for unicode (it is a char array, not\n+ * a wchar_t array, though it needs to be even bigger than 260 wchar_ts as\n+ * the source script file could contain UTF-8 or UTF-32 (wchar_t is 2-byte)\n+ */\n+#define SHEBANG_BUFSIZE 2048\n+\n",
                      "markdown": "`+/* Previously BUFSIZE was used for this but 256 is not enough for even 260\n+ * ASCII characters and far too little for unicode (it is a char array, not\n+ * a wchar_t array, though it needs to be even bigger than 260 wchar_ts as\n+ * the source script file could contain UTF-8 or UTF-32 (wchar_t is 2-byte)\n+ */\n+#define SHEBANG_BUFSIZE 2048\n+\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/cpython-launcher-c-mods-for-setuptools"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 15,
                  "endLine": 29,
                  "snippet": {
                    "text": " #include <tchar.h>\n \n+/* To build on MSYS2 use the following script:\n+#!/usr/bin/env bash\n+\n+wget -c https://raw.githubusercontent.com/python/cpython/3.6/PC/launcher.c -O launcher.c\n+patch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.patch\n+RCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n",
                    "rendered": {
                      "text": " #include <tchar.h>\n \n+/* To build on MSYS2 use the following script:\n+#!/usr/bin/env bash\n+\n+wget -c https://raw.githubusercontent.com/python/cpython/3.6/PC/launcher.c -O launcher.c\n+patch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.patch\n+RCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n",
                      "markdown": "` #include <tchar.h>\n \n+/* To build on MSYS2 use the following script:\n+#!/usr/bin/env bash\n+\n+wget -c https://raw.githubusercontent.com/python/cpython/3.6/PC/launcher.c -O launcher.c\n+patch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.patch\n+RCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/build.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\ncurl -SLO https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\npatch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\nRCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\ncurl -SLO https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\npatch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\nRCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n",
                      "markdown": "`#!/usr/bin/env bash\n\ncurl -SLO https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\npatch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\nRCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/build.sh"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 3,
                  "endColumn": 5,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\ncurl -SLO https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\npatch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\nRCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n[[ -f ${RCFILE} ]] && rm -f ${RCFILE}\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\ncurl -SLO https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\npatch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\nRCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n[[ -f ${RCFILE} ]] && rm -f ${RCFILE}\n",
                      "markdown": "`#!/usr/bin/env bash\n\ncurl -SLO https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\npatch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\nRCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n[[ -f ${RCFILE} ]] && rm -f ${RCFILE}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/launcher_sources/build.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\ncurl -SLO https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\npatch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\nRCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\ncurl -SLO https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\npatch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\nRCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n",
                      "markdown": "`#!/usr/bin/env bash\n\ncurl -SLO https://raw.githubusercontent.com/python/cpython/3.7/PC/launcher.c -O launcher.c\npatch -p0 < $(dirname ${BASH_SOURCE[0]})/cpython-launcher-c-mods-for-setuptools.3.7.patch\nRCFILE=$(dirname ${BASH_SOURCE[0]})/resources.rc\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 33,
                  "endLine": 568,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        cdt_arch = \"x86_64\" if arch == \"64\" else \"i686\"\n    if config.variant:\n        cdt_name = config.variant.get(\"cdt_name\", cdt_name)\n        cdt_arch = config.variant.get(\"cdt_arch\", cdt_arch)\n    if \" \" in package_name:\n        name = package_name.split(\" \")[0]\n        ver_build = package_name.split(\" \")[1:]\n",
                    "rendered": {
                      "text": "        cdt_arch = \"x86_64\" if arch == \"64\" else \"i686\"\n    if config.variant:\n        cdt_name = config.variant.get(\"cdt_name\", cdt_name)\n        cdt_arch = config.variant.get(\"cdt_arch\", cdt_arch)\n    if \" \" in package_name:\n        name = package_name.split(\" \")[0]\n        ver_build = package_name.split(\" \")[1:]\n",
                      "markdown": "`        cdt_arch = \"x86_64\" if arch == \"64\" else \"i686\"\n    if config.variant:\n        cdt_name = config.variant.get(\"cdt_name\", cdt_name)\n        cdt_arch = config.variant.get(\"cdt_arch\", cdt_arch)\n    if \" \" in package_name:\n        name = package_name.split(\" \")[0]\n        ver_build = package_name.split(\" \")[1:]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 33,
                  "endLine": 567,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    else:\n        cdt_arch = \"x86_64\" if arch == \"64\" else \"i686\"\n    if config.variant:\n        cdt_name = config.variant.get(\"cdt_name\", cdt_name)\n        cdt_arch = config.variant.get(\"cdt_arch\", cdt_arch)\n    if \" \" in package_name:\n        name = package_name.split(\" \")[0]\n",
                    "rendered": {
                      "text": "    else:\n        cdt_arch = \"x86_64\" if arch == \"64\" else \"i686\"\n    if config.variant:\n        cdt_name = config.variant.get(\"cdt_name\", cdt_name)\n        cdt_arch = config.variant.get(\"cdt_arch\", cdt_arch)\n    if \" \" in package_name:\n        name = package_name.split(\" \")[0]\n",
                      "markdown": "`    else:\n        cdt_arch = \"x86_64\" if arch == \"64\" else \"i686\"\n    if config.variant:\n        cdt_name = config.variant.get(\"cdt_name\", cdt_name)\n        cdt_arch = config.variant.get(\"cdt_arch\", cdt_arch)\n    if \" \" in package_name:\n        name = package_name.split(\" \")[0]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 32,
                  "endLine": 489,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        language_key = f\"{language}_{component}\"\n        # fall back to native if language-key is not explicitly set in variant\n        package_prefix = config.variant.get(language_key, package_prefix)\n        version = config.variant.get(language_key + \"_version\")\n    else:\n        target_platform = config.subdir\n\n",
                    "rendered": {
                      "text": "        language_key = f\"{language}_{component}\"\n        # fall back to native if language-key is not explicitly set in variant\n        package_prefix = config.variant.get(language_key, package_prefix)\n        version = config.variant.get(language_key + \"_version\")\n    else:\n        target_platform = config.subdir\n\n",
                      "markdown": "`        language_key = f\"{language}_{component}\"\n        # fall back to native if language-key is not explicitly set in variant\n        package_prefix = config.variant.get(language_key, package_prefix)\n        version = config.variant.get(language_key + \"_version\")\n    else:\n        target_platform = config.subdir\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 39,
                  "endLine": 488,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        target_platform = config.variant.get(\"target_platform\", config.subdir)\n        language_key = f\"{language}_{component}\"\n        # fall back to native if language-key is not explicitly set in variant\n        package_prefix = config.variant.get(language_key, package_prefix)\n        version = config.variant.get(language_key + \"_version\")\n    else:\n        target_platform = config.subdir\n",
                    "rendered": {
                      "text": "        target_platform = config.variant.get(\"target_platform\", config.subdir)\n        language_key = f\"{language}_{component}\"\n        # fall back to native if language-key is not explicitly set in variant\n        package_prefix = config.variant.get(language_key, package_prefix)\n        version = config.variant.get(language_key + \"_version\")\n    else:\n        target_platform = config.subdir\n",
                      "markdown": "`        target_platform = config.variant.get(\"target_platform\", config.subdir)\n        language_key = f\"{language}_{component}\"\n        # fall back to native if language-key is not explicitly set in variant\n        package_prefix = config.variant.get(language_key, package_prefix)\n        version = config.variant.get(language_key + \"_version\")\n    else:\n        target_platform = config.subdir\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 40,
                  "endLine": 485,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n    version = None\n    if config.variant:\n        target_platform = config.variant.get(\"target_platform\", config.subdir)\n        language_key = f\"{language}_{component}\"\n        # fall back to native if language-key is not explicitly set in variant\n        package_prefix = config.variant.get(language_key, package_prefix)\n",
                    "rendered": {
                      "text": "\n    version = None\n    if config.variant:\n        target_platform = config.variant.get(\"target_platform\", config.subdir)\n        language_key = f\"{language}_{component}\"\n        # fall back to native if language-key is not explicitly set in variant\n        package_prefix = config.variant.get(language_key, package_prefix)\n",
                      "markdown": "`\n    version = None\n    if config.variant:\n        target_platform = config.variant.get(\"target_platform\", config.subdir)\n        language_key = f\"{language}_{component}\"\n        # fall back to native if language-key is not explicitly set in variant\n        package_prefix = config.variant.get(language_key, package_prefix)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 46,
                  "endLine": 465,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        except KeyError:\n            continue\n    if hasattr(compiler, \"keys\"):\n        compiler = compiler.get(config.variant.get(\"python\", \"nope\"), \"vs2017\")\n    return compiler\n\n\n",
                    "rendered": {
                      "text": "        except KeyError:\n            continue\n    if hasattr(compiler, \"keys\"):\n        compiler = compiler.get(config.variant.get(\"python\", \"nope\"), \"vs2017\")\n    return compiler\n\n\n",
                      "markdown": "`        except KeyError:\n            continue\n    if hasattr(compiler, \"keys\"):\n        compiler = compiler.get(config.variant.get(\"python\", \"nope\"), \"vs2017\")\n    return compiler\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 27,
                  "endLine": 465,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        except KeyError:\n            continue\n    if hasattr(compiler, \"keys\"):\n        compiler = compiler.get(config.variant.get(\"python\", \"nope\"), \"vs2017\")\n    return compiler\n\n\n",
                    "rendered": {
                      "text": "        except KeyError:\n            continue\n    if hasattr(compiler, \"keys\"):\n        compiler = compiler.get(config.variant.get(\"python\", \"nope\"), \"vs2017\")\n    return compiler\n\n\n",
                      "markdown": "`        except KeyError:\n            continue\n    if hasattr(compiler, \"keys\"):\n        compiler = compiler.get(config.variant.get(\"python\", \"nope\"), \"vs2017\")\n    return compiler\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 49,
                  "endLine": 323,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            if exact and versions.get(package_name):\n                compatibility = \" \".join(versions[package_name])\n            else:\n                version = lower_bound or versions.get(package_name)\n                if version:\n                    if hasattr(version, \"__iter__\") and not isinstance(version, str):\n                        version = version[0]\n",
                    "rendered": {
                      "text": "            if exact and versions.get(package_name):\n                compatibility = \" \".join(versions[package_name])\n            else:\n                version = lower_bound or versions.get(package_name)\n                if version:\n                    if hasattr(version, \"__iter__\") and not isinstance(version, str):\n                        version = version[0]\n",
                      "markdown": "`            if exact and versions.get(package_name):\n                compatibility = \" \".join(versions[package_name])\n            else:\n                version = lower_bound or versions.get(package_name)\n                if version:\n                    if hasattr(version, \"__iter__\") and not isinstance(version, str):\n                        version = version[0]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 33,
                  "endLine": 320,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            cached_env_dependencies[key] = pins\n        versions = {p.split(\" \")[0]: p.split(\" \")[1:] for p in pins}\n        if versions:\n            if exact and versions.get(package_name):\n                compatibility = \" \".join(versions[package_name])\n            else:\n                version = lower_bound or versions.get(package_name)\n",
                    "rendered": {
                      "text": "            cached_env_dependencies[key] = pins\n        versions = {p.split(\" \")[0]: p.split(\" \")[1:] for p in pins}\n        if versions:\n            if exact and versions.get(package_name):\n                compatibility = \" \".join(versions[package_name])\n            else:\n                version = lower_bound or versions.get(package_name)\n",
                      "markdown": "`            cached_env_dependencies[key] = pins\n        versions = {p.split(\" \")[0]: p.split(\" \")[1:] for p in pins}\n        if versions:\n            if exact and versions.get(package_name):\n                compatibility = \" \".join(versions[package_name])\n            else:\n                version = lower_bound or versions.get(package_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 724,
                  "startColumn": 4,
                  "endLine": 724,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        variant=variant,\n    )\n    environ = dict(os.environ)\n    environ.update(get_environ(m=initial_metadata, skip_build_id=skip_build_id))\n\n    ctx.update(\n        load_setup_py_data=partial(\n",
                    "rendered": {
                      "text": "        variant=variant,\n    )\n    environ = dict(os.environ)\n    environ.update(get_environ(m=initial_metadata, skip_build_id=skip_build_id))\n\n    ctx.update(\n        load_setup_py_data=partial(\n",
                      "markdown": "`        variant=variant,\n    )\n    environ = dict(os.environ)\n    environ.update(get_environ(m=initial_metadata, skip_build_id=skip_build_id))\n\n    ctx.update(\n        load_setup_py_data=partial(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 34,
                  "endLine": 618,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    # optimization: this is slow (requires solver), so better to bypass it\n    # until the finalization stage as done similarly in pin_compatible.\n    if not bypass_env_check and not permit_undefined_jinja:\n        package_names, _, _ = get_env_dependencies(m, env, m.config.variant)\n\n    return package_names\n\n",
                    "rendered": {
                      "text": "    # optimization: this is slow (requires solver), so better to bypass it\n    # until the finalization stage as done similarly in pin_compatible.\n    if not bypass_env_check and not permit_undefined_jinja:\n        package_names, _, _ = get_env_dependencies(m, env, m.config.variant)\n\n    return package_names\n\n",
                      "markdown": "`    # optimization: this is slow (requires solver), so better to bypass it\n    # until the finalization stage as done similarly in pin_compatible.\n    if not bypass_env_check and not permit_undefined_jinja:\n        package_names, _, _ = get_env_dependencies(m, env, m.config.variant)\n\n    return package_names\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 19,
                  "endLine": 317,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                if m.build_is_host:\n                    host_pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n                    pins.extend(host_pins)\n            cached_env_dependencies[key] = pins\n        versions = {p.split(\" \")[0]: p.split(\" \")[1:] for p in pins}\n        if versions:\n            if exact and versions.get(package_name):\n",
                    "rendered": {
                      "text": "                if m.build_is_host:\n                    host_pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n                    pins.extend(host_pins)\n            cached_env_dependencies[key] = pins\n        versions = {p.split(\" \")[0]: p.split(\" \")[1:] for p in pins}\n        if versions:\n            if exact and versions.get(package_name):\n",
                      "markdown": "`                if m.build_is_host:\n                    host_pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n                    pins.extend(host_pins)\n            cached_env_dependencies[key] = pins\n        versions = {p.split(\" \")[0]: p.split(\" \")[1:] for p in pins}\n        if versions:\n            if exact and versions.get(package_name):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 42,
                  "endLine": 315,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            else:\n                pins, _, _ = get_env_dependencies(m, \"build\", m.config.variant)\n                if m.build_is_host:\n                    host_pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n                    pins.extend(host_pins)\n            cached_env_dependencies[key] = pins\n        versions = {p.split(\" \")[0]: p.split(\" \")[1:] for p in pins}\n",
                    "rendered": {
                      "text": "            else:\n                pins, _, _ = get_env_dependencies(m, \"build\", m.config.variant)\n                if m.build_is_host:\n                    host_pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n                    pins.extend(host_pins)\n            cached_env_dependencies[key] = pins\n        versions = {p.split(\" \")[0]: p.split(\" \")[1:] for p in pins}\n",
                      "markdown": "`            else:\n                pins, _, _ = get_env_dependencies(m, \"build\", m.config.variant)\n                if m.build_is_host:\n                    host_pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n                    pins.extend(host_pins)\n            cached_env_dependencies[key] = pins\n        versions = {p.split(\" \")[0]: p.split(\" \")[1:] for p in pins}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 33,
                  "endLine": 313,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            if m.is_cross and not m.build_is_host:\n                pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n            else:\n                pins, _, _ = get_env_dependencies(m, \"build\", m.config.variant)\n                if m.build_is_host:\n                    host_pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n                    pins.extend(host_pins)\n",
                    "rendered": {
                      "text": "            if m.is_cross and not m.build_is_host:\n                pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n            else:\n                pins, _, _ = get_env_dependencies(m, \"build\", m.config.variant)\n                if m.build_is_host:\n                    host_pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n                    pins.extend(host_pins)\n",
                      "markdown": "`            if m.is_cross and not m.build_is_host:\n                pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n            else:\n                pins, _, _ = get_env_dependencies(m, \"build\", m.config.variant)\n                if m.build_is_host:\n                    host_pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n                    pins.extend(host_pins)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 33,
                  "endLine": 311,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            pins = cached_env_dependencies[key]\n        else:\n            if m.is_cross and not m.build_is_host:\n                pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n            else:\n                pins, _, _ = get_env_dependencies(m, \"build\", m.config.variant)\n                if m.build_is_host:\n",
                    "rendered": {
                      "text": "            pins = cached_env_dependencies[key]\n        else:\n            if m.is_cross and not m.build_is_host:\n                pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n            else:\n                pins, _, _ = get_env_dependencies(m, \"build\", m.config.variant)\n                if m.build_is_host:\n",
                      "markdown": "`            pins = cached_env_dependencies[key]\n        else:\n            if m.is_cross and not m.build_is_host:\n                pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n            else:\n                pins, _, _ = get_env_dependencies(m, \"build\", m.config.variant)\n                if m.build_is_host:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 26,
                  "endLine": 308,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        # 2. Evil packages that cram everything alongside a single major version.  For example, 9b\n        key = (m.name(), deepfreeze(m.config.variant))\n        if key in cached_env_dependencies:\n            pins = cached_env_dependencies[key]\n        else:\n            if m.is_cross and not m.build_is_host:\n                pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n",
                    "rendered": {
                      "text": "        # 2. Evil packages that cram everything alongside a single major version.  For example, 9b\n        key = (m.name(), deepfreeze(m.config.variant))\n        if key in cached_env_dependencies:\n            pins = cached_env_dependencies[key]\n        else:\n            if m.is_cross and not m.build_is_host:\n                pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n",
                      "markdown": "`        # 2. Evil packages that cram everything alongside a single major version.  For example, 9b\n        key = (m.name(), deepfreeze(m.config.variant))\n        if key in cached_env_dependencies:\n            pins = cached_env_dependencies[key]\n        else:\n            if m.is_cross and not m.build_is_host:\n                pins, _, _ = get_env_dependencies(m, \"host\", m.config.variant)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 25,
                  "endLine": 307,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        # 1. Good packages that follow semver style (if not philosophy).  For example, 1.2.3\n        # 2. Evil packages that cram everything alongside a single major version.  For example, 9b\n        key = (m.name(), deepfreeze(m.config.variant))\n        if key in cached_env_dependencies:\n            pins = cached_env_dependencies[key]\n        else:\n            if m.is_cross and not m.build_is_host:\n",
                    "rendered": {
                      "text": "        # 1. Good packages that follow semver style (if not philosophy).  For example, 1.2.3\n        # 2. Evil packages that cram everything alongside a single major version.  For example, 9b\n        key = (m.name(), deepfreeze(m.config.variant))\n        if key in cached_env_dependencies:\n            pins = cached_env_dependencies[key]\n        else:\n            if m.is_cross and not m.build_is_host:\n",
                      "markdown": "`        # 1. Good packages that follow semver style (if not philosophy).  For example, 1.2.3\n        # 2. Evil packages that cram everything alongside a single major version.  For example, 9b\n        key = (m.name(), deepfreeze(m.config.variant))\n        if key in cached_env_dependencies:\n            pins = cached_env_dependencies[key]\n        else:\n            if m.is_cross and not m.build_is_host:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 18,
                  "endLine": 296,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    pin expressions are of the form 'x.x' - the number of pins is the number of x's separated\n        by ``.``.\n    \"\"\"\n    global cached_env_dependencies\n    compatibility = \"\"\n\n    # optimization: this is slow (requires solver), so better to bypass it\n",
                    "rendered": {
                      "text": "    pin expressions are of the form 'x.x' - the number of pins is the number of x's separated\n        by ``.``.\n    \"\"\"\n    global cached_env_dependencies\n    compatibility = \"\"\n\n    # optimization: this is slow (requires solver), so better to bypass it\n",
                      "markdown": "`    pin expressions are of the form 'x.x' - the number of pins is the number of x's separated\n        by ``.``.\n    \"\"\"\n    global cached_env_dependencies\n    compatibility = \"\"\n\n    # optimization: this is slow (requires solver), so better to bypass it\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 7,
                  "endLine": 274,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            return re.search(regex_pattern, lfile.read())\n\n\ncached_env_dependencies = {}\n\n\ndef pin_compatible(\n",
                    "rendered": {
                      "text": "            return re.search(regex_pattern, lfile.read())\n\n\ncached_env_dependencies = {}\n\n\ndef pin_compatible(\n",
                      "markdown": "`            return re.search(regex_pattern, lfile.read())\n\n\ncached_env_dependencies = {}\n\n\ndef pin_compatible(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 4,
                  "endLine": 159,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    )\n    dest_setup_script = os.path.join(m.config.work_dir, \"_load_setup_py_data.py\")\n    copy_into(origin_setup_script, dest_setup_script)\n    env = get_environ(m)\n    env[\"CONDA_BUILD_STATE\"] = \"RENDER\"\n    if os.path.isfile(m.config.build_python):\n        args = [m.config.build_python, dest_setup_script, m.config.work_dir, setup_file]\n",
                    "rendered": {
                      "text": "    )\n    dest_setup_script = os.path.join(m.config.work_dir, \"_load_setup_py_data.py\")\n    copy_into(origin_setup_script, dest_setup_script)\n    env = get_environ(m)\n    env[\"CONDA_BUILD_STATE\"] = \"RENDER\"\n    if os.path.isfile(m.config.build_python):\n        args = [m.config.build_python, dest_setup_script, m.config.work_dir, setup_file]\n",
                      "markdown": "`    )\n    dest_setup_script = os.path.join(m.config.work_dir, \"_load_setup_py_data.py\")\n    copy_into(origin_setup_script, dest_setup_script)\n    env = get_environ(m)\n    env[\"CONDA_BUILD_STATE\"] = \"RENDER\"\n    if os.path.isfile(m.config.build_python):\n        args = [m.config.build_python, dest_setup_script, m.config.work_dir, setup_file]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 24,
                  "endLine": 24,
                  "endColumn": 37,
                  "snippet": {
                    "text": "from . import _load_setup_py_data\nfrom .environ import get_dict as get_environ\nfrom .exceptions import CondaBuildException\nfrom .render import get_env_dependencies\nfrom .utils import (\n    apply_pin_expressions,\n    check_call_env,\n",
                    "rendered": {
                      "text": "from . import _load_setup_py_data\nfrom .environ import get_dict as get_environ\nfrom .exceptions import CondaBuildException\nfrom .render import get_env_dependencies\nfrom .utils import (\n    apply_pin_expressions,\n    check_call_env,\n",
                      "markdown": "`from . import _load_setup_py_data\nfrom .environ import get_dict as get_environ\nfrom .exceptions import CondaBuildException\nfrom .render import get_env_dependencies\nfrom .utils import (\n    apply_pin_expressions,\n    check_call_env,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 6,
                  "endLine": 22,
                  "endColumn": 36,
                  "snippet": {
                    "text": "from frozendict import deepfreeze\n\nfrom . import _load_setup_py_data\nfrom .environ import get_dict as get_environ\nfrom .exceptions import CondaBuildException\nfrom .render import get_env_dependencies\nfrom .utils import (\n",
                    "rendered": {
                      "text": "from frozendict import deepfreeze\n\nfrom . import _load_setup_py_data\nfrom .environ import get_dict as get_environ\nfrom .exceptions import CondaBuildException\nfrom .render import get_env_dependencies\nfrom .utils import (\n",
                      "markdown": "`from frozendict import deepfreeze\n\nfrom . import _load_setup_py_data\nfrom .environ import get_dict as get_environ\nfrom .exceptions import CondaBuildException\nfrom .render import get_env_dependencies\nfrom .utils import (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 26,
                  "endLine": 474,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n    Native compilers/stdlib never list their host - it is always implied.  Generally, they are\n    metapackages, pointing at a package that does specify the host.  These in turn may be\n    metapackages, pointing at a package where the host is the same as the target (both being the\n    native architecture).\n    \"\"\"\n\n",
                    "rendered": {
                      "text": "\n    Native compilers/stdlib never list their host - it is always implied.  Generally, they are\n    metapackages, pointing at a package that does specify the host.  These in turn may be\n    metapackages, pointing at a package where the host is the same as the target (both being the\n    native architecture).\n    \"\"\"\n\n",
                      "markdown": "`\n    Native compilers/stdlib never list their host - it is always implied.  Generally, they are\n    metapackages, pointing at a package that does specify the host.  These in turn may be\n    metapackages, pointing at a package where the host is the same as the target (both being the\n    native architecture).\n    \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 26,
                  "endLine": 473,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    \"\"\"Support configuration of compilers/stdlib.  This is somewhat platform specific.\n\n    Native compilers/stdlib never list their host - it is always implied.  Generally, they are\n    metapackages, pointing at a package that does specify the host.  These in turn may be\n    metapackages, pointing at a package where the host is the same as the target (both being the\n    native architecture).\n    \"\"\"\n",
                    "rendered": {
                      "text": "    \"\"\"Support configuration of compilers/stdlib.  This is somewhat platform specific.\n\n    Native compilers/stdlib never list their host - it is always implied.  Generally, they are\n    metapackages, pointing at a package that does specify the host.  These in turn may be\n    metapackages, pointing at a package where the host is the same as the target (both being the\n    native architecture).\n    \"\"\"\n",
                      "markdown": "`    \"\"\"Support configuration of compilers/stdlib.  This is somewhat platform specific.\n\n    Native compilers/stdlib never list their host - it is always implied.  Generally, they are\n    metapackages, pointing at a package that does specify the host.  These in turn may be\n    metapackages, pointing at a package where the host is the same as the target (both being the\n    native architecture).\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 18,
                  "endLine": 684,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    else:\n        with open(file_path) as f:\n            return _load_data(\n                f, fmt or pathlib.Path(filename).suffix.lstrip(\".\"), *args, **kwargs\n            )\n\n\n",
                    "rendered": {
                      "text": "    else:\n        with open(file_path) as f:\n            return _load_data(\n                f, fmt or pathlib.Path(filename).suffix.lstrip(\".\"), *args, **kwargs\n            )\n\n\n",
                      "markdown": "`    else:\n        with open(file_path) as f:\n            return _load_data(\n                f, fmt or pathlib.Path(filename).suffix.lstrip(\".\"), *args, **kwargs\n            )\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 610,
                  "startColumn": 6,
                  "endLine": 610,
                  "endColumn": 11,
                  "snippet": {
                    "text": "                - openssl 1.0.2n hb7f436b_0\n                - zlib 1.2.11 ha838bed_2\n    \"\"\"\n    if env not in (\"host\", \"build\"):\n        raise ValueError(\"Only host and build dependencies are supported.\")\n\n    package_names = []\n",
                    "rendered": {
                      "text": "                - openssl 1.0.2n hb7f436b_0\n                - zlib 1.2.11 ha838bed_2\n    \"\"\"\n    if env not in (\"host\", \"build\"):\n        raise ValueError(\"Only host and build dependencies are supported.\")\n\n    package_names = []\n",
                      "markdown": "`                - openssl 1.0.2n hb7f436b_0\n                - zlib 1.2.11 ha838bed_2\n    \"\"\"\n    if env not in (\"host\", \"build\"):\n        raise ValueError(\"Only host and build dependencies are supported.\")\n\n    package_names = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 607,
                  "startColumn": 17,
                  "endLine": 607,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                - curl 7.55.1 h78862de_4\n                - libgcc-ng 7.2.0 h7cc24e2_2\n                - libssh2 1.8.0 h9cfc8f7_4\n                - openssl 1.0.2n hb7f436b_0\n                - zlib 1.2.11 ha838bed_2\n    \"\"\"\n    if env not in (\"host\", \"build\"):\n",
                    "rendered": {
                      "text": "                - curl 7.55.1 h78862de_4\n                - libgcc-ng 7.2.0 h7cc24e2_2\n                - libssh2 1.8.0 h9cfc8f7_4\n                - openssl 1.0.2n hb7f436b_0\n                - zlib 1.2.11 ha838bed_2\n    \"\"\"\n    if env not in (\"host\", \"build\"):\n",
                      "markdown": "`                - curl 7.55.1 h78862de_4\n                - libgcc-ng 7.2.0 h7cc24e2_2\n                - libssh2 1.8.0 h9cfc8f7_4\n                - openssl 1.0.2n hb7f436b_0\n                - zlib 1.2.11 ha838bed_2\n    \"\"\"\n    if env not in (\"host\", \"build\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 17,
                  "endLine": 604,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                - zlib 1.2.11 ha838bed_2\n            run_constrained:\n                - ca-certificates 2017.08.26 h1d4fec5_0\n                - curl 7.55.1 h78862de_4\n                - libgcc-ng 7.2.0 h7cc24e2_2\n                - libssh2 1.8.0 h9cfc8f7_4\n                - openssl 1.0.2n hb7f436b_0\n",
                    "rendered": {
                      "text": "                - zlib 1.2.11 ha838bed_2\n            run_constrained:\n                - ca-certificates 2017.08.26 h1d4fec5_0\n                - curl 7.55.1 h78862de_4\n                - libgcc-ng 7.2.0 h7cc24e2_2\n                - libssh2 1.8.0 h9cfc8f7_4\n                - openssl 1.0.2n hb7f436b_0\n",
                      "markdown": "`                - zlib 1.2.11 ha838bed_2\n            run_constrained:\n                - ca-certificates 2017.08.26 h1d4fec5_0\n                - curl 7.55.1 h78862de_4\n                - libgcc-ng 7.2.0 h7cc24e2_2\n                - libssh2 1.8.0 h9cfc8f7_4\n                - openssl 1.0.2n hb7f436b_0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 600,
                  "startColumn": 17,
                  "endLine": 600,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                - curl 7.55.1 h78862de_4\n                - libgcc-ng 7.2.0 h7cc24e2_2\n                - libssh2 1.8.0 h9cfc8f7_4\n                - openssl 1.0.2n hb7f436b_0\n                - zlib 1.2.11 ha838bed_2\n            run_constrained:\n                - ca-certificates 2017.08.26 h1d4fec5_0\n",
                    "rendered": {
                      "text": "                - curl 7.55.1 h78862de_4\n                - libgcc-ng 7.2.0 h7cc24e2_2\n                - libssh2 1.8.0 h9cfc8f7_4\n                - openssl 1.0.2n hb7f436b_0\n                - zlib 1.2.11 ha838bed_2\n            run_constrained:\n                - ca-certificates 2017.08.26 h1d4fec5_0\n",
                      "markdown": "`                - curl 7.55.1 h78862de_4\n                - libgcc-ng 7.2.0 h7cc24e2_2\n                - libssh2 1.8.0 h9cfc8f7_4\n                - openssl 1.0.2n hb7f436b_0\n                - zlib 1.2.11 ha838bed_2\n            run_constrained:\n                - ca-certificates 2017.08.26 h1d4fec5_0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 17,
                  "endLine": 597,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        requirements:\n            host:\n                - ca-certificates 2017.08.26 h1d4fec5_0\n                - curl 7.55.1 h78862de_4\n                - libgcc-ng 7.2.0 h7cc24e2_2\n                - libssh2 1.8.0 h9cfc8f7_4\n                - openssl 1.0.2n hb7f436b_0\n",
                    "rendered": {
                      "text": "        requirements:\n            host:\n                - ca-certificates 2017.08.26 h1d4fec5_0\n                - curl 7.55.1 h78862de_4\n                - libgcc-ng 7.2.0 h7cc24e2_2\n                - libssh2 1.8.0 h9cfc8f7_4\n                - openssl 1.0.2n hb7f436b_0\n",
                      "markdown": "`        requirements:\n            host:\n                - ca-certificates 2017.08.26 h1d4fec5_0\n                - curl 7.55.1 h78862de_4\n                - libgcc-ng 7.2.0 h7cc24e2_2\n                - libssh2 1.8.0 h9cfc8f7_4\n                - openssl 1.0.2n hb7f436b_0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 586,
                  "startColumn": 13,
                  "endLine": 586,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n        requirements:\n          host:\n            - curl 7.55.1\n          run_constrained:\n          {% for package in resolved_packages('host') %}\n            - {{ package }}\n",
                    "rendered": {
                      "text": "\n        requirements:\n          host:\n            - curl 7.55.1\n          run_constrained:\n          {% for package in resolved_packages('host') %}\n            - {{ package }}\n",
                      "markdown": "`\n        requirements:\n          host:\n            - curl 7.55.1\n          run_constrained:\n          {% for package in resolved_packages('host') %}\n            - {{ package }}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 24,
                  "endLine": 448,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        pin = subpackage_name\n        if not permit_undefined_jinja and not allow_no_other_outputs:\n            raise ValueError(\n                f\"Didn't find subpackage version info for '{subpackage_name}', which is used in a\"\n                \" pin_subpackage expression.  Is it actually a subpackage?  If not, \"\n                \"you want pin_compatible instead.\"\n            )\n",
                    "rendered": {
                      "text": "        pin = subpackage_name\n        if not permit_undefined_jinja and not allow_no_other_outputs:\n            raise ValueError(\n                f\"Didn't find subpackage version info for '{subpackage_name}', which is used in a\"\n                \" pin_subpackage expression.  Is it actually a subpackage?  If not, \"\n                \"you want pin_compatible instead.\"\n            )\n",
                      "markdown": "`        pin = subpackage_name\n        if not permit_undefined_jinja and not allow_no_other_outputs:\n            raise ValueError(\n                f\"Didn't find subpackage version info for '{subpackage_name}', which is used in a\"\n                \" pin_subpackage expression.  Is it actually a subpackage?  If not, \"\n                \"you want pin_compatible instead.\"\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 59,
                  "endLine": 196,
                  "endColumn": 66,
                  "snippet": {
                    "text": "            if permit_undefined_jinja:\n                log.debug(\n                    \"Reading setup.py failed due to missing modules.  This is probably OK, \"\n                    \"since it may succeed in later passes.  Watch for incomplete recipe \"\n                    \"info, though.\"\n                )\n            else:\n",
                    "rendered": {
                      "text": "            if permit_undefined_jinja:\n                log.debug(\n                    \"Reading setup.py failed due to missing modules.  This is probably OK, \"\n                    \"since it may succeed in later passes.  Watch for incomplete recipe \"\n                    \"info, though.\"\n                )\n            else:\n",
                      "markdown": "`            if permit_undefined_jinja:\n                log.debug(\n                    \"Reading setup.py failed due to missing modules.  This is probably OK, \"\n                    \"since it may succeed in later passes.  Watch for incomplete recipe \"\n                    \"info, though.\"\n                )\n            else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 3,
                  "endLine": 159,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    )\n    dest_setup_script = os.path.join(m.config.work_dir, \"_load_setup_py_data.py\")\n    copy_into(origin_setup_script, dest_setup_script)\n    env = get_environ(m)\n    env[\"CONDA_BUILD_STATE\"] = \"RENDER\"\n    if os.path.isfile(m.config.build_python):\n        args = [m.config.build_python, dest_setup_script, m.config.work_dir, setup_file]\n",
                    "rendered": {
                      "text": "    )\n    dest_setup_script = os.path.join(m.config.work_dir, \"_load_setup_py_data.py\")\n    copy_into(origin_setup_script, dest_setup_script)\n    env = get_environ(m)\n    env[\"CONDA_BUILD_STATE\"] = \"RENDER\"\n    if os.path.isfile(m.config.build_python):\n        args = [m.config.build_python, dest_setup_script, m.config.work_dir, setup_file]\n",
                      "markdown": "`    )\n    dest_setup_script = os.path.join(m.config.work_dir, \"_load_setup_py_data.py\")\n    copy_into(origin_setup_script, dest_setup_script)\n    env = get_environ(m)\n    env[\"CONDA_BUILD_STATE\"] = \"RENDER\"\n    if os.path.isfile(m.config.build_python):\n        args = [m.config.build_python, dest_setup_script, m.config.work_dir, setup_file]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 22,
                  "endLine": 153,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    permit_undefined_jinja=True,\n):\n    _setuptools_data = None\n    # we must copy the script into the work folder to avoid incompatible pyc files\n    origin_setup_script = os.path.join(\n        os.path.dirname(__file__), \"_load_setup_py_data.py\"\n    )\n",
                    "rendered": {
                      "text": "    permit_undefined_jinja=True,\n):\n    _setuptools_data = None\n    # we must copy the script into the work folder to avoid incompatible pyc files\n    origin_setup_script = os.path.join(\n        os.path.dirname(__file__), \"_load_setup_py_data.py\"\n    )\n",
                      "markdown": "`    permit_undefined_jinja=True,\n):\n    _setuptools_data = None\n    # we must copy the script into the work folder to avoid incompatible pyc files\n    origin_setup_script = os.path.join(\n        os.path.dirname(__file__), \"_load_setup_py_data.py\"\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/jinja_context.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 6,
                  "endLine": 11,
                  "snippet": {
                    "text": "import os\nimport pathlib\nimport re\nimport time\nfrom functools import partial\nfrom io import StringIO, TextIOBase\nfrom subprocess import CalledProcessError\nfrom typing import TYPE_CHECKING\n",
                    "rendered": {
                      "text": "import os\nimport pathlib\nimport re\nimport time\nfrom functools import partial\nfrom io import StringIO, TextIOBase\nfrom subprocess import CalledProcessError\nfrom typing import TYPE_CHECKING\n",
                      "markdown": "`import os\nimport pathlib\nimport re\nimport time\nfrom functools import partial\nfrom io import StringIO, TextIOBase\nfrom subprocess import CalledProcessError\nfrom typing import TYPE_CHECKING\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/inspect_pkg.py"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 27,
                  "endLine": 133,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        key=(\n            lambda key: (0, key[0].name)\n            if isinstance(key[0], PrefixRecord)\n            else sort_order.get(key[0], (4, key[0]))\n        ),\n    ):\n        output_string += f\"{prec}:\\n\"\n",
                    "rendered": {
                      "text": "        key=(\n            lambda key: (0, key[0].name)\n            if isinstance(key[0], PrefixRecord)\n            else sort_order.get(key[0], (4, key[0]))\n        ),\n    ):\n        output_string += f\"{prec}:\\n\"\n",
                      "markdown": "`        key=(\n            lambda key: (0, key[0].name)\n            if isinstance(key[0], PrefixRecord)\n            else sort_order.get(key[0], (4, key[0]))\n        ),\n    ):\n        output_string += f\"{prec}:\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/index.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 29,
                  "endLine": 60,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    if not output_folder:\n        output_folder = dirname(bldpkgs_dir)\n\n    # check file modification time - this is the age of our local index.\n    index_file = os.path.join(output_folder, subdir, \"repodata.json\")\n    if os.path.isfile(index_file):\n        mtime = os.path.getmtime(index_file)\n",
                    "rendered": {
                      "text": "    if not output_folder:\n        output_folder = dirname(bldpkgs_dir)\n\n    # check file modification time - this is the age of our local index.\n    index_file = os.path.join(output_folder, subdir, \"repodata.json\")\n    if os.path.isfile(index_file):\n        mtime = os.path.getmtime(index_file)\n",
                      "markdown": "`    if not output_folder:\n        output_folder = dirname(bldpkgs_dir)\n\n    # check file modification time - this is the age of our local index.\n    index_file = os.path.join(output_folder, subdir, \"repodata.json\")\n    if os.path.isfile(index_file):\n        mtime = os.path.getmtime(index_file)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/features.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 32,
                  "endLine": 19,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    if key in env_vars:\n        if value not in (\"0\", \"1\"):\n            sys.exit(\n                f\"Error: did not expect environment variable '{key}' \"\n                f\"being set to '{value}' (not '0' or '1')\"\n            )\n        feature_list.append((key[8:].lower(), bool(int(value))))\n",
                    "rendered": {
                      "text": "    if key in env_vars:\n        if value not in (\"0\", \"1\"):\n            sys.exit(\n                f\"Error: did not expect environment variable '{key}' \"\n                f\"being set to '{value}' (not '0' or '1')\"\n            )\n        feature_list.append((key[8:].lower(), bool(int(value))))\n",
                      "markdown": "`    if key in env_vars:\n        if value not in (\"0\", \"1\"):\n            sys.exit(\n                f\"Error: did not expect environment variable '{key}' \"\n                f\"being set to '{value}' (not '0' or '1')\"\n            )\n        feature_list.append((key[8:].lower(), bool(int(value))))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/exceptions.py"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 21,
                  "endLine": 70,
                  "snippet": {
                    "text": "class VerifyError(CondaBuildException):\n    def __init__(self, error, script, *args):\n        self.error = error\n        self.script = script\n        self.msg = f\"{script} failed to verify\\n{error}\"\n        super().__init__(self.msg)\n\n\n",
                    "rendered": {
                      "text": "class VerifyError(CondaBuildException):\n    def __init__(self, error, script, *args):\n        self.error = error\n        self.script = script\n        self.msg = f\"{script} failed to verify\\n{error}\"\n        super().__init__(self.msg)\n\n\n",
                      "markdown": "`class VerifyError(CondaBuildException):\n    def __init__(self, error, script, *args):\n        self.error = error\n        self.script = script\n        self.msg = f\"{script} failed to verify\\n{error}\"\n        super().__init__(self.msg)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 1380,
                  "startColumn": 37,
                  "endLine": 1380,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        pkg = prec[\"name\"]\n        channels[pkg] = channel_filt(channel_str(prec))\n        packages[pkg] = prec[\"version\"] + \"-\" + prec[\"build\"]\n        features[pkg] = \",\".join(prec.get(\"features\") or ())\n\n    fmt = {}\n    if packages:\n",
                    "rendered": {
                      "text": "        pkg = prec[\"name\"]\n        channels[pkg] = channel_filt(channel_str(prec))\n        packages[pkg] = prec[\"version\"] + \"-\" + prec[\"build\"]\n        features[pkg] = \",\".join(prec.get(\"features\") or ())\n\n    fmt = {}\n    if packages:\n",
                      "markdown": "`        pkg = prec[\"name\"]\n        channels[pkg] = channel_filt(channel_str(prec))\n        packages[pkg] = prec[\"version\"] + \"-\" + prec[\"build\"]\n        features[pkg] = \",\".join(prec.get(\"features\") or ())\n\n    fmt = {}\n    if packages:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 1360,
                  "startColumn": 14,
                  "endLine": 1360,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            return rec[\"schannel\"]\n        if rec.get(\"url\"):\n            return Channel(rec[\"url\"]).canonical_name\n        if rec.get(\"channel\"):\n            return Channel(rec[\"channel\"]).canonical_name\n        return UNKNOWN_CHANNEL\n\n",
                    "rendered": {
                      "text": "            return rec[\"schannel\"]\n        if rec.get(\"url\"):\n            return Channel(rec[\"url\"]).canonical_name\n        if rec.get(\"channel\"):\n            return Channel(rec[\"channel\"]).canonical_name\n        return UNKNOWN_CHANNEL\n\n",
                      "markdown": "`            return rec[\"schannel\"]\n        if rec.get(\"url\"):\n            return Channel(rec[\"url\"]).canonical_name\n        if rec.get(\"channel\"):\n            return Channel(rec[\"channel\"]).canonical_name\n        return UNKNOWN_CHANNEL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 1358,
                  "startColumn": 14,
                  "endLine": 1358,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    def channel_str(rec):\n        if rec.get(\"schannel\"):\n            return rec[\"schannel\"]\n        if rec.get(\"url\"):\n            return Channel(rec[\"url\"]).canonical_name\n        if rec.get(\"channel\"):\n            return Channel(rec[\"channel\"]).canonical_name\n",
                    "rendered": {
                      "text": "    def channel_str(rec):\n        if rec.get(\"schannel\"):\n            return rec[\"schannel\"]\n        if rec.get(\"url\"):\n            return Channel(rec[\"url\"]).canonical_name\n        if rec.get(\"channel\"):\n            return Channel(rec[\"channel\"]).canonical_name\n",
                      "markdown": "`    def channel_str(rec):\n        if rec.get(\"schannel\"):\n            return rec[\"schannel\"]\n        if rec.get(\"url\"):\n            return Channel(rec[\"url\"]).canonical_name\n        if rec.get(\"channel\"):\n            return Channel(rec[\"channel\"]).canonical_name\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 1356,
                  "startColumn": 14,
                  "endLine": 1356,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    show_channel_urls = context.show_channel_urls\n\n    def channel_str(rec):\n        if rec.get(\"schannel\"):\n            return rec[\"schannel\"]\n        if rec.get(\"url\"):\n            return Channel(rec[\"url\"]).canonical_name\n",
                    "rendered": {
                      "text": "    show_channel_urls = context.show_channel_urls\n\n    def channel_str(rec):\n        if rec.get(\"schannel\"):\n            return rec[\"schannel\"]\n        if rec.get(\"url\"):\n            return Channel(rec[\"url\"]).canonical_name\n",
                      "markdown": "`    show_channel_urls = context.show_channel_urls\n\n    def channel_str(rec):\n        if rec.get(\"schannel\"):\n            return rec[\"schannel\"]\n        if rec.get(\"url\"):\n            return Channel(rec[\"url\"]).canonical_name\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 772,
                  "startColumn": 23,
                  "endLine": 772,
                  "endColumn": 28,
                  "snippet": {
                    "text": "def set_from_os_or_variant(out_dict, key, variant, default):\n    value = os.getenv(key)\n    if not value:\n        value = variant.get(key, default)\n    if value:\n        out_dict[key] = value\n\n",
                    "rendered": {
                      "text": "def set_from_os_or_variant(out_dict, key, variant, default):\n    value = os.getenv(key)\n    if not value:\n        value = variant.get(key, default)\n    if value:\n        out_dict[key] = value\n\n",
                      "markdown": "`def set_from_os_or_variant(out_dict, key, variant, default):\n    value = os.getenv(key)\n    if not value:\n        value = variant.get(key, default)\n    if value:\n        out_dict[key] = value\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 450,
                  "startColumn": 36,
                  "endLine": 450,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            }\n        )\n\n    np_ver = metadata.config.variant.get(\n        \"numpy\", get_default_variant(metadata.config)[\"numpy\"]\n    )\n    vars_[\"NPY_VER\"] = \".\".join(np_ver.split(\".\")[:2])\n",
                    "rendered": {
                      "text": "            }\n        )\n\n    np_ver = metadata.config.variant.get(\n        \"numpy\", get_default_variant(metadata.config)[\"numpy\"]\n    )\n    vars_[\"NPY_VER\"] = \".\".join(np_ver.split(\".\")[:2])\n",
                      "markdown": "`            }\n        )\n\n    np_ver = metadata.config.variant.get(\n        \"numpy\", get_default_variant(metadata.config)[\"numpy\"]\n    )\n    vars_[\"NPY_VER\"] = \".\".join(np_ver.split(\".\")[:2])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 26,
                  "endLine": 109,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\ndef get_npy_ver(config):\n    conda_npy = \"\".join(\n        str(config.variant.get(\"numpy\") or get_default_variant(config)[\"numpy\"]).split(\n            \".\"\n        )\n    )\n",
                    "rendered": {
                      "text": "\ndef get_npy_ver(config):\n    conda_npy = \"\".join(\n        str(config.variant.get(\"numpy\") or get_default_variant(config)[\"numpy\"]).split(\n            \".\"\n        )\n    )\n",
                      "markdown": "`\ndef get_npy_ver(config):\n    conda_npy = \"\".join(\n        str(config.variant.get(\"numpy\") or get_default_variant(config)[\"numpy\"]).split(\n            \".\"\n        )\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 22,
                  "endLine": 101,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\ndef get_r_ver(config):\n    return \".\".join(\n        config.variant.get(\"r_base\", get_default_variant(config)[\"r_base\"]).split(\".\")[\n            :3\n        ]\n    )\n",
                    "rendered": {
                      "text": "\ndef get_r_ver(config):\n    return \".\".join(\n        config.variant.get(\"r_base\", get_default_variant(config)[\"r_base\"]).split(\".\")[\n            :3\n        ]\n    )\n",
                      "markdown": "`\ndef get_r_ver(config):\n    return \".\".join(\n        config.variant.get(\"r_base\", get_default_variant(config)[\"r_base\"]).split(\".\")[\n            :3\n        ]\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 23,
                  "endLine": 93,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n\ndef get_py_ver(config):\n    py = config.variant.get(\"python\", get_default_variant(config)[\"python\"])\n    if not hasattr(py, \"split\"):\n        py = py[0]\n    return \".\".join(py.split(\".\")[:2])\n",
                    "rendered": {
                      "text": "\n\ndef get_py_ver(config):\n    py = config.variant.get(\"python\", get_default_variant(config)[\"python\"])\n    if not hasattr(py, \"split\"):\n        py = py[0]\n    return \".\".join(py.split(\".\")[:2])\n",
                      "markdown": "`\n\ndef get_py_ver(config):\n    py = config.variant.get(\"python\", get_default_variant(config)[\"python\"])\n    if not hasattr(py, \"split\"):\n        py = py[0]\n    return \".\".join(py.split(\".\")[:2])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 22,
                  "endLine": 88,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\ndef get_lua_ver(config):\n    return \".\".join(\n        config.variant.get(\"lua\", get_default_variant(config)[\"lua\"]).split(\".\")[:2]\n    )\n\n\n",
                    "rendered": {
                      "text": "\ndef get_lua_ver(config):\n    return \".\".join(\n        config.variant.get(\"lua\", get_default_variant(config)[\"lua\"]).split(\".\")[:2]\n    )\n\n\n",
                      "markdown": "`\ndef get_lua_ver(config):\n    return \".\".join(\n        config.variant.get(\"lua\", get_default_variant(config)[\"lua\"]).split(\".\")[:2]\n    )\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 22,
                  "endLine": 82,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\ndef get_perl_ver(config):\n    return \".\".join(\n        config.variant.get(\"perl\", get_default_variant(config)[\"perl\"]).split(\".\")[:2]\n    )\n\n\n",
                    "rendered": {
                      "text": "\ndef get_perl_ver(config):\n    return \".\".join(\n        config.variant.get(\"perl\", get_default_variant(config)[\"perl\"]).split(\".\")[:2]\n    )\n\n\n",
                      "markdown": "`\ndef get_perl_ver(config):\n    return \".\".join(\n        config.variant.get(\"perl\", get_default_variant(config)[\"perl\"]).split(\".\")[:2]\n    )\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 548,
                  "startColumn": 54,
                  "endLine": 548,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                f\"The environment variable '{var_name}' is being passed through with value \"\n                f\"'{'<hidden>' if meta.config.suppress_variables else value}'.  \"\n                \"If you are splitting build and test phases with --no-test, please ensure \"\n                \"that this value is also set similarly at test time.\",\n                UserWarning,\n            )\n\n",
                    "rendered": {
                      "text": "                f\"The environment variable '{var_name}' is being passed through with value \"\n                f\"'{'<hidden>' if meta.config.suppress_variables else value}'.  \"\n                \"If you are splitting build and test phases with --no-test, please ensure \"\n                \"that this value is also set similarly at test time.\",\n                UserWarning,\n            )\n\n",
                      "markdown": "`                f\"The environment variable '{var_name}' is being passed through with value \"\n                f\"'{'<hidden>' if meta.config.suppress_variables else value}'.  \"\n                \"If you are splitting build and test phases with --no-test, please ensure \"\n                \"that this value is also set similarly at test time.\",\n                UserWarning,\n            )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 60,
                  "endLine": 399,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        #     1. Build prefix - when host requirements are not explicitly set,\n        #        then prefix = build prefix = host prefix\n        #     2. Host prefix - when host requirements are explicitly set, prefix = host prefix\n        #     3. Test prefix - during test runs, this points at the test prefix\n        \"PREFIX\": prefix,\n        # This is for things that are specifically build tools.  Things that run on the build\n        #    platform, but probably should not be linked against, since they may not run on the\n",
                    "rendered": {
                      "text": "        #     1. Build prefix - when host requirements are not explicitly set,\n        #        then prefix = build prefix = host prefix\n        #     2. Host prefix - when host requirements are explicitly set, prefix = host prefix\n        #     3. Test prefix - during test runs, this points at the test prefix\n        \"PREFIX\": prefix,\n        # This is for things that are specifically build tools.  Things that run on the build\n        #    platform, but probably should not be linked against, since they may not run on the\n",
                      "markdown": "`        #     1. Build prefix - when host requirements are not explicitly set,\n        #        then prefix = build prefix = host prefix\n        #     2. Host prefix - when host requirements are explicitly set, prefix = host prefix\n        #     3. Test prefix - during test runs, this points at the test prefix\n        \"PREFIX\": prefix,\n        # This is for things that are specifically build tools.  Things that run on the build\n        #    platform, but probably should not be linked against, since they may not run on the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 3,
                  "endLine": 324,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    env = {str(key): str(value) for key, value in env.items()}\n\n    d = {}\n    cmd = [\n        \"hg\",\n        \"log\",\n        \"--template\",\n",
                    "rendered": {
                      "text": "    env = {str(key): str(value) for key, value in env.items()}\n\n    d = {}\n    cmd = [\n        \"hg\",\n        \"log\",\n        \"--template\",\n",
                      "markdown": "`    env = {str(key): str(value) for key, value in env.items()}\n\n    d = {}\n    cmd = [\n        \"hg\",\n        \"log\",\n        \"--template\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 61,
                  "endLine": 199,
                  "endColumn": 65,
                  "snippet": {
                    "text": "            remote_url = normpath(remote_url)\n\n        # If the current source directory in conda-bld/work doesn't match the user's\n        # metadata git_url or git_rev, then we aren't looking at the right source.\n        if not os.path.isdir(remote_url) and remote_url.lower() != git_url.lower():\n            log.debug(\"remote does not match git_url\")\n            log.debug(\"Remote: \" + remote_url.lower())\n",
                    "rendered": {
                      "text": "            remote_url = normpath(remote_url)\n\n        # If the current source directory in conda-bld/work doesn't match the user's\n        # metadata git_url or git_rev, then we aren't looking at the right source.\n        if not os.path.isdir(remote_url) and remote_url.lower() != git_url.lower():\n            log.debug(\"remote does not match git_url\")\n            log.debug(\"Remote: \" + remote_url.lower())\n",
                      "markdown": "`            remote_url = normpath(remote_url)\n\n        # If the current source directory in conda-bld/work doesn't match the user's\n        # metadata git_url or git_rev, then we aren't looking at the right source.\n        if not os.path.isdir(remote_url) and remote_url.lower() != git_url.lower():\n            log.debug(\"remote does not match git_url\")\n            log.debug(\"Remote: \" + remote_url.lower())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 1382,
                  "startColumn": 3,
                  "endLine": 1382,
                  "endColumn": 8,
                  "snippet": {
                    "text": "        packages[pkg] = prec[\"version\"] + \"-\" + prec[\"build\"]\n        features[pkg] = \",\".join(prec.get(\"features\") or ())\n\n    fmt = {}\n    if packages:\n        maxpkg = max(len(p) for p in packages) + 1\n        maxver = max(len(p) for p in packages.values())\n",
                    "rendered": {
                      "text": "        packages[pkg] = prec[\"version\"] + \"-\" + prec[\"build\"]\n        features[pkg] = \",\".join(prec.get(\"features\") or ())\n\n    fmt = {}\n    if packages:\n        maxpkg = max(len(p) for p in packages) + 1\n        maxver = max(len(p) for p in packages.values())\n",
                      "markdown": "`        packages[pkg] = prec[\"version\"] + \"-\" + prec[\"build\"]\n        features[pkg] = \",\".join(prec.get(\"features\") or ())\n\n    fmt = {}\n    if packages:\n        maxpkg = max(len(p) for p in packages) + 1\n        maxver = max(len(p) for p in packages.values())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 1007,
                  "startColumn": 41,
                  "endLine": 1007,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        #     utils.rm_rf(prefix)\n\n        specs_or_precs = tuple(ensure_list(specs_or_precs))\n        if specs_or_precs:  # Don't waste time if there is nothing to do\n            log.debug(\"Creating environment in %s\", prefix)\n            log.debug(str(specs_or_precs))\n\n",
                    "rendered": {
                      "text": "        #     utils.rm_rf(prefix)\n\n        specs_or_precs = tuple(ensure_list(specs_or_precs))\n        if specs_or_precs:  # Don't waste time if there is nothing to do\n            log.debug(\"Creating environment in %s\", prefix)\n            log.debug(str(specs_or_precs))\n\n",
                      "markdown": "`        #     utils.rm_rf(prefix)\n\n        specs_or_precs = tuple(ensure_list(specs_or_precs))\n        if specs_or_precs:  # Don't waste time if there is nothing to do\n            log.debug(\"Creating environment in %s\", prefix)\n            log.debug(str(specs_or_precs))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 962,
                  "startColumn": 38,
                  "endLine": 962,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        if disable_pip:\n            for pkg in (\"pip\", \"setuptools\", \"wheel\"):\n                # specs are the raw specifications, not the conda-derived actual specs\n                #   We're testing that pip etc. are manually specified\n                if not any(\n                    re.match(rf\"^{pkg}(?:$|[\\s=].*)\", str(dep)) for dep in specs\n                ):\n",
                    "rendered": {
                      "text": "        if disable_pip:\n            for pkg in (\"pip\", \"setuptools\", \"wheel\"):\n                # specs are the raw specifications, not the conda-derived actual specs\n                #   We're testing that pip etc. are manually specified\n                if not any(\n                    re.match(rf\"^{pkg}(?:$|[\\s=].*)\", str(dep)) for dep in specs\n                ):\n",
                      "markdown": "`        if disable_pip:\n            for pkg in (\"pip\", \"setuptools\", \"wheel\"):\n                # specs are the raw specifications, not the conda-derived actual specs\n                #   We're testing that pip etc. are manually specified\n                if not any(\n                    re.match(rf\"^{pkg}(?:$|[\\s=].*)\", str(dep)) for dep in specs\n                ):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 915,
                  "startColumn": 50,
                  "endLine": 916,
                  "snippet": {
                    "text": "                        or isinstance(exc, AssertionError)\n                    ):\n                        locks = utils.get_conda_operation_locks(\n                            locking, bldpkgs_dirs, timeout\n                        )\n                        with utils.try_acquire_locks(locks, timeout=timeout):\n                            pkg_dir = str(exc)\n                            folder = 0\n",
                    "rendered": {
                      "text": "                        or isinstance(exc, AssertionError)\n                    ):\n                        locks = utils.get_conda_operation_locks(\n                            locking, bldpkgs_dirs, timeout\n                        )\n                        with utils.try_acquire_locks(locks, timeout=timeout):\n                            pkg_dir = str(exc)\n                            folder = 0\n",
                      "markdown": "`                        or isinstance(exc, AssertionError)\n                    ):\n                        locks = utils.get_conda_operation_locks(\n                            locking, bldpkgs_dirs, timeout\n                        )\n                        with utils.try_acquire_locks(locks, timeout=timeout):\n                            pkg_dir = str(exc)\n                            folder = 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 757,
                  "startColumn": 25,
                  "endLine": 757,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    # There is also QEMU_SET_ENV, but that needs to be\n    # filtered so it only contains the result of `linux_vars`\n    # which, before this change was empty, and after it only\n    # contains other QEMU env vars.\n    get_default(\"CFLAGS\")\n    get_default(\"CXXFLAGS\")\n    get_default(\"LDFLAGS\")\n",
                    "rendered": {
                      "text": "    # There is also QEMU_SET_ENV, but that needs to be\n    # filtered so it only contains the result of `linux_vars`\n    # which, before this change was empty, and after it only\n    # contains other QEMU env vars.\n    get_default(\"CFLAGS\")\n    get_default(\"CXXFLAGS\")\n    get_default(\"LDFLAGS\")\n",
                      "markdown": "`    # There is also QEMU_SET_ENV, but that needs to be\n    # filtered so it only contains the result of `linux_vars`\n    # which, before this change was empty, and after it only\n    # contains other QEMU env vars.\n    get_default(\"CFLAGS\")\n    get_default(\"CXXFLAGS\")\n    get_default(\"LDFLAGS\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 10,
                  "endLine": 643,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    win_arch = \"i386\" if str(m.config.host_arch) == \"32\" else \"amd64\"\n    win_msvc = \"19.0.0\"\n    library_prefix = join(prefix, \"Library\")\n    drive, tail = m.config.host_prefix.split(\":\")\n    get_default(\"SCRIPTS\", join(prefix, \"Scripts\"))\n    get_default(\"LIBRARY_PREFIX\", library_prefix)\n    get_default(\"LIBRARY_BIN\", join(library_prefix, \"bin\"))\n",
                    "rendered": {
                      "text": "    win_arch = \"i386\" if str(m.config.host_arch) == \"32\" else \"amd64\"\n    win_msvc = \"19.0.0\"\n    library_prefix = join(prefix, \"Library\")\n    drive, tail = m.config.host_prefix.split(\":\")\n    get_default(\"SCRIPTS\", join(prefix, \"Scripts\"))\n    get_default(\"LIBRARY_PREFIX\", library_prefix)\n    get_default(\"LIBRARY_BIN\", join(library_prefix, \"bin\"))\n",
                      "markdown": "`    win_arch = \"i386\" if str(m.config.host_arch) == \"32\" else \"amd64\"\n    win_msvc = \"19.0.0\"\n    library_prefix = join(prefix, \"Library\")\n    drive, tail = m.config.host_prefix.split(\":\")\n    get_default(\"SCRIPTS\", join(prefix, \"Scripts\"))\n    get_default(\"LIBRARY_PREFIX\", library_prefix)\n    get_default(\"LIBRARY_BIN\", join(library_prefix, \"bin\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 32,
                  "endLine": 558,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    hg_dir = join(repo_dir, \".hg\")\n\n    if not isinstance(git_dir, str):\n        # On Windows, subprocess env can't handle unicode.\n        git_dir = git_dir.encode(sys.getfilesystemencoding() or \"utf-8\")\n\n    git_exe = external.find_executable(\"git\", meta.config.build_prefix)\n",
                    "rendered": {
                      "text": "    hg_dir = join(repo_dir, \".hg\")\n\n    if not isinstance(git_dir, str):\n        # On Windows, subprocess env can't handle unicode.\n        git_dir = git_dir.encode(sys.getfilesystemencoding() or \"utf-8\")\n\n    git_exe = external.find_executable(\"git\", meta.config.build_prefix)\n",
                      "markdown": "`    hg_dir = join(repo_dir, \".hg\")\n\n    if not isinstance(git_dir, str):\n        # On Windows, subprocess env can't handle unicode.\n        git_dir = git_dir.encode(sys.getfilesystemencoding() or \"utf-8\")\n\n    git_exe = external.find_executable(\"git\", meta.config.build_prefix)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 3,
                  "endLine": 321,
                  "endColumn": 8,
                  "snippet": {
                    "text": "def get_hg_build_info(repo):\n    env = os.environ.copy()\n    env[\"HG_DIR\"] = repo\n    env = {str(key): str(value) for key, value in env.items()}\n\n    d = {}\n    cmd = [\n",
                    "rendered": {
                      "text": "def get_hg_build_info(repo):\n    env = os.environ.copy()\n    env[\"HG_DIR\"] = repo\n    env = {str(key): str(value) for key, value in env.items()}\n\n    d = {}\n    cmd = [\n",
                      "markdown": "`def get_hg_build_info(repo):\n    env = os.environ.copy()\n    env[\"HG_DIR\"] = repo\n    env = {str(key): str(value) for key, value in env.items()}\n\n    d = {}\n    cmd = [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 3,
                  "endLine": 319,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\ndef get_hg_build_info(repo):\n    env = os.environ.copy()\n    env[\"HG_DIR\"] = repo\n    env = {str(key): str(value) for key, value in env.items()}\n\n",
                    "rendered": {
                      "text": "\n\ndef get_hg_build_info(repo):\n    env = os.environ.copy()\n    env[\"HG_DIR\"] = repo\n    env = {str(key): str(value) for key, value in env.items()}\n\n",
                      "markdown": "`\n\ndef get_hg_build_info(repo):\n    env = os.environ.copy()\n    env[\"HG_DIR\"] = repo\n    env = {str(key): str(value) for key, value in env.items()}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 34,
                  "endLine": 304,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n        d[\"GIT_FULL_HASH\"] = output\n    except subprocess.CalledProcessError as error:\n        log.debug(\"Error obtaining git commit information.  Error was: \")\n        log.debug(str(error))\n\n    # set up the build string\n",
                    "rendered": {
                      "text": "\n        d[\"GIT_FULL_HASH\"] = output\n    except subprocess.CalledProcessError as error:\n        log.debug(\"Error obtaining git commit information.  Error was: \")\n        log.debug(str(error))\n\n    # set up the build string\n",
                      "markdown": "`\n        d[\"GIT_FULL_HASH\"] = output\n    except subprocess.CalledProcessError as error:\n        log.debug(\"Error obtaining git commit information.  Error was: \")\n        log.debug(str(error))\n\n    # set up the build string\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 44,
                  "endLine": 294,
                  "snippet": {
                    "text": "            log.debug(str(error))\n\n    try:\n        # get the _full_ hash of the current HEAD\n        output = utils.check_output_env(\n            [git_exe, \"rev-parse\", \"HEAD\"],\n            env=env,\n            cwd=os.path.dirname(repo),\n",
                    "rendered": {
                      "text": "            log.debug(str(error))\n\n    try:\n        # get the _full_ hash of the current HEAD\n        output = utils.check_output_env(\n            [git_exe, \"rev-parse\", \"HEAD\"],\n            env=env,\n            cwd=os.path.dirname(repo),\n",
                      "markdown": "`            log.debug(str(error))\n\n    try:\n        # get the _full_ hash of the current HEAD\n        output = utils.check_output_env(\n            [git_exe, \"rev-parse\", \"HEAD\"],\n            env=env,\n            cwd=os.path.dirname(repo),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 38,
                  "endLine": 289,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                # described a branch. We just want to save the short hash.\n                d[\"GIT_DESCRIBE_HASH\"] = parts[-1]\n        except subprocess.CalledProcessError as error:\n            log.debug(\"Error obtaining git commit information.  Error was: \")\n            log.debug(str(error))\n\n    try:\n",
                    "rendered": {
                      "text": "                # described a branch. We just want to save the short hash.\n                d[\"GIT_DESCRIBE_HASH\"] = parts[-1]\n        except subprocess.CalledProcessError as error:\n            log.debug(\"Error obtaining git commit information.  Error was: \")\n            log.debug(str(error))\n\n    try:\n",
                      "markdown": "`                # described a branch. We just want to save the short hash.\n                d[\"GIT_DESCRIBE_HASH\"] = parts[-1]\n        except subprocess.CalledProcessError as error:\n            log.debug(\"Error obtaining git commit information.  Error was: \")\n            log.debug(str(error))\n\n    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 77,
                  "endLine": 285,
                  "endColumn": 82,
                  "snippet": {
                    "text": "            output = output.decode(\"utf-8\")\n            parts = output.rsplit(\"-\", 2)\n            if len(parts) == 3:\n                # Don't save GIT_DESCRIBE_TAG and GIT_DESCRIBE_NUMBER because git (probably)\n                # described a branch. We just want to save the short hash.\n                d[\"GIT_DESCRIBE_HASH\"] = parts[-1]\n        except subprocess.CalledProcessError as error:\n",
                    "rendered": {
                      "text": "            output = output.decode(\"utf-8\")\n            parts = output.rsplit(\"-\", 2)\n            if len(parts) == 3:\n                # Don't save GIT_DESCRIBE_TAG and GIT_DESCRIBE_NUMBER because git (probably)\n                # described a branch. We just want to save the short hash.\n                d[\"GIT_DESCRIBE_HASH\"] = parts[-1]\n        except subprocess.CalledProcessError as error:\n",
                      "markdown": "`            output = output.decode(\"utf-8\")\n            parts = output.rsplit(\"-\", 2)\n            if len(parts) == 3:\n                # Don't save GIT_DESCRIBE_TAG and GIT_DESCRIBE_NUMBER because git (probably)\n                # described a branch. We just want to save the short hash.\n                d[\"GIT_DESCRIBE_HASH\"] = parts[-1]\n        except subprocess.CalledProcessError as error:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 53,
                  "endLine": 268,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        msg = (\n            \"Failed to obtain git tag information.\\n\"\n            \"Consider using annotated tags if you are not already \"\n            \"as they are more reliable when used with git describe.\"\n        )\n        log.debug(msg)\n\n",
                    "rendered": {
                      "text": "        msg = (\n            \"Failed to obtain git tag information.\\n\"\n            \"Consider using annotated tags if you are not already \"\n            \"as they are more reliable when used with git describe.\"\n        )\n        log.debug(msg)\n\n",
                      "markdown": "`        msg = (\n            \"Failed to obtain git tag information.\\n\"\n            \"Consider using annotated tags if you are not already \"\n            \"as they are more reliable when used with git describe.\"\n        )\n        log.debug(msg)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 29,
                  "endLine": 266,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        d[\"GIT_DESCRIBE_TAG_PEP440\"] = str(get_version_from_git_tag(output))\n    except subprocess.CalledProcessError:\n        msg = (\n            \"Failed to obtain git tag information.\\n\"\n            \"Consider using annotated tags if you are not already \"\n            \"as they are more reliable when used with git describe.\"\n        )\n",
                    "rendered": {
                      "text": "        d[\"GIT_DESCRIBE_TAG_PEP440\"] = str(get_version_from_git_tag(output))\n    except subprocess.CalledProcessError:\n        msg = (\n            \"Failed to obtain git tag information.\\n\"\n            \"Consider using annotated tags if you are not already \"\n            \"as they are more reliable when used with git describe.\"\n        )\n",
                      "markdown": "`        d[\"GIT_DESCRIBE_TAG_PEP440\"] = str(get_version_from_git_tag(output))\n    except subprocess.CalledProcessError:\n        msg = (\n            \"Failed to obtain git tag information.\\n\"\n            \"Consider using annotated tags if you are not already \"\n            \"as they are more reliable when used with git describe.\"\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 3,
                  "endLine": 248,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    stderr = None if debug else subprocess.DEVNULL\n\n    # grab information from describe\n    env = os.environ.copy()\n    env[\"GIT_DIR\"] = repo\n    keys = [\"GIT_DESCRIBE_TAG\", \"GIT_DESCRIBE_NUMBER\", \"GIT_DESCRIBE_HASH\"]\n\n",
                    "rendered": {
                      "text": "    stderr = None if debug else subprocess.DEVNULL\n\n    # grab information from describe\n    env = os.environ.copy()\n    env[\"GIT_DIR\"] = repo\n    keys = [\"GIT_DESCRIBE_TAG\", \"GIT_DESCRIBE_NUMBER\", \"GIT_DESCRIBE_HASH\"]\n\n",
                      "markdown": "`    stderr = None if debug else subprocess.DEVNULL\n\n    # grab information from describe\n    env = os.environ.copy()\n    env[\"GIT_DIR\"] = repo\n    keys = [\"GIT_DESCRIBE_TAG\", \"GIT_DESCRIBE_NUMBER\", \"GIT_DESCRIBE_HASH\"]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 22,
                  "endLine": 239,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      GIT_DESCRIBE_HASH\n      GIT_FULL_HASH\n      GIT_BUILD_STR\n    from the output of git describe.\n    :return:\n    \"\"\"\n    d = {}\n",
                    "rendered": {
                      "text": "      GIT_DESCRIBE_HASH\n      GIT_FULL_HASH\n      GIT_BUILD_STR\n    from the output of git describe.\n    :return:\n    \"\"\"\n    d = {}\n",
                      "markdown": "`      GIT_DESCRIBE_HASH\n      GIT_FULL_HASH\n      GIT_BUILD_STR\n    from the output of git describe.\n    :return:\n    \"\"\"\n    d = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 21,
                  "endLine": 232,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\ndef get_git_info(git_exe, repo, debug):\n    \"\"\"\n    Given a repo to a git repo, return a dictionary of:\n      GIT_DESCRIBE_TAG\n      GIT_DESCRIBE_TAG_PEP440\n      GIT_DESCRIBE_NUMBER\n",
                    "rendered": {
                      "text": "\ndef get_git_info(git_exe, repo, debug):\n    \"\"\"\n    Given a repo to a git repo, return a dictionary of:\n      GIT_DESCRIBE_TAG\n      GIT_DESCRIBE_TAG_PEP440\n      GIT_DESCRIBE_NUMBER\n",
                      "markdown": "`\ndef get_git_info(git_exe, repo, debug):\n    \"\"\"\n    Given a repo to a git repo, return a dictionary of:\n      GIT_DESCRIBE_TAG\n      GIT_DESCRIBE_TAG_PEP440\n      GIT_DESCRIBE_NUMBER\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 57,
                  "endLine": 220,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n\ndef get_version_from_git_tag(tag):\n    \"\"\"Return a PEP440-compliant version derived from the git status.\n    If that fails for any reason, return the changeset hash.\n    \"\"\"\n    m = GIT_DESCRIBE_REGEX.match(tag)\n",
                    "rendered": {
                      "text": "\n\ndef get_version_from_git_tag(tag):\n    \"\"\"Return a PEP440-compliant version derived from the git status.\n    If that fails for any reason, return the changeset hash.\n    \"\"\"\n    m = GIT_DESCRIBE_REGEX.match(tag)\n",
                      "markdown": "`\n\ndef get_version_from_git_tag(tag):\n    \"\"\"Return a PEP440-compliant version derived from the git status.\n    If that fails for any reason, return the changeset hash.\n    \"\"\"\n    m = GIT_DESCRIBE_REGEX.match(tag)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 34,
                  "endLine": 206,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            log.debug(\"git_url: \" + git_url.lower())\n            OK = False\n    except subprocess.CalledProcessError as error:\n        log.debug(\"Error obtaining git information in verify_git_repo.  Error was: \")\n        log.debug(str(error))\n        OK = False\n    return OK\n",
                    "rendered": {
                      "text": "            log.debug(\"git_url: \" + git_url.lower())\n            OK = False\n    except subprocess.CalledProcessError as error:\n        log.debug(\"Error obtaining git information in verify_git_repo.  Error was: \")\n        log.debug(str(error))\n        OK = False\n    return OK\n",
                      "markdown": "`            log.debug(\"git_url: \" + git_url.lower())\n            OK = False\n    except subprocess.CalledProcessError as error:\n        log.debug(\"Error obtaining git information in verify_git_repo.  Error was: \")\n        log.debug(str(error))\n        OK = False\n    return OK\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 36,
                  "endLine": 169,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        cache_dir = cache_details.split(\"\\n\")[0].split()[1]\n\n        if not isinstance(cache_dir, str):\n            # On Windows, subprocess env can't handle unicode.\n            cache_dir = cache_dir.encode(sys.getfilesystemencoding() or \"utf-8\")\n\n        try:\n",
                    "rendered": {
                      "text": "        cache_dir = cache_details.split(\"\\n\")[0].split()[1]\n\n        if not isinstance(cache_dir, str):\n            # On Windows, subprocess env can't handle unicode.\n            cache_dir = cache_dir.encode(sys.getfilesystemencoding() or \"utf-8\")\n\n        try:\n",
                      "markdown": "`        cache_dir = cache_details.split(\"\\n\")[0].split()[1]\n\n        if not isinstance(cache_dir, str):\n            # On Windows, subprocess env can't handle unicode.\n            cache_dir = cache_dir.encode(sys.getfilesystemencoding() or \"utf-8\")\n\n        try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 53,
                  "endLine": 160,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        if current_commit != expected_tag_commit:\n            return False\n\n        # Verify correct remote url. Need to find the git cache directory,\n        # and check the remote from there.\n        cache_details = utils.check_output_env(\n            [git_exe, \"remote\", \"-v\"], env=env, stderr=stderr\n",
                    "rendered": {
                      "text": "        if current_commit != expected_tag_commit:\n            return False\n\n        # Verify correct remote url. Need to find the git cache directory,\n        # and check the remote from there.\n        cache_details = utils.check_output_env(\n            [git_exe, \"remote\", \"-v\"], env=env, stderr=stderr\n",
                      "markdown": "`        if current_commit != expected_tag_commit:\n            return False\n\n        # Verify correct remote url. Need to find the git cache directory,\n        # and check the remote from there.\n        cache_details = utils.check_output_env(\n            [git_exe, \"remote\", \"-v\"], env=env, stderr=stderr\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 44,
                  "endLine": 160,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        if current_commit != expected_tag_commit:\n            return False\n\n        # Verify correct remote url. Need to find the git cache directory,\n        # and check the remote from there.\n        cache_details = utils.check_output_env(\n            [git_exe, \"remote\", \"-v\"], env=env, stderr=stderr\n",
                    "rendered": {
                      "text": "        if current_commit != expected_tag_commit:\n            return False\n\n        # Verify correct remote url. Need to find the git cache directory,\n        # and check the remote from there.\n        cache_details = utils.check_output_env(\n            [git_exe, \"remote\", \"-v\"], env=env, stderr=stderr\n",
                      "markdown": "`        if current_commit != expected_tag_commit:\n            return False\n\n        # Verify correct remote url. Need to find the git cache directory,\n        # and check the remote from there.\n        cache_details = utils.check_output_env(\n            [git_exe, \"remote\", \"-v\"], env=env, stderr=stderr\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 3,
                  "endLine": 127,
                  "endColumn": 8,
                  "snippet": {
                    "text": "def verify_git_repo(\n    git_exe, git_dir, git_url, git_commits_since_tag, debug=False, expected_rev=\"HEAD\"\n):\n    env = os.environ.copy()\n    log = utils.get_logger(__name__)\n\n    stderr = None if debug else subprocess.DEVNULL\n",
                    "rendered": {
                      "text": "def verify_git_repo(\n    git_exe, git_dir, git_url, git_commits_since_tag, debug=False, expected_rev=\"HEAD\"\n):\n    env = os.environ.copy()\n    log = utils.get_logger(__name__)\n\n    stderr = None if debug else subprocess.DEVNULL\n",
                      "markdown": "`def verify_git_repo(\n    git_exe, git_dir, git_url, git_commits_since_tag, debug=False, expected_rev=\"HEAD\"\n):\n    env = os.environ.copy()\n    log = utils.get_logger(__name__)\n\n    stderr = None if debug else subprocess.DEVNULL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 38,
                  "endLine": 75,
                  "endColumn": 43,
                  "snippet": {
                    "text": "log = getLogger(__name__)\n\n# these are things that we provide env vars for more explicitly.  This list disables the\n#    pass-through of variant values to env vars for these keys.\nLANGUAGES = (\"PERL\", \"LUA\", \"R\", \"NUMPY\", \"PYTHON\")\nR_PACKAGES = (\"r-base\", \"mro-base\", \"r-impl\")\n\n",
                    "rendered": {
                      "text": "log = getLogger(__name__)\n\n# these are things that we provide env vars for more explicitly.  This list disables the\n#    pass-through of variant values to env vars for these keys.\nLANGUAGES = (\"PERL\", \"LUA\", \"R\", \"NUMPY\", \"PYTHON\")\nR_PACKAGES = (\"r-base\", \"mro-base\", \"r-impl\")\n\n",
                      "markdown": "`log = getLogger(__name__)\n\n# these are things that we provide env vars for more explicitly.  This list disables the\n#    pass-through of variant values to env vars for these keys.\nLANGUAGES = (\"PERL\", \"LUA\", \"R\", \"NUMPY\", \"PYTHON\")\nR_PACKAGES = (\"r-base\", \"mro-base\", \"r-impl\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/environ.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 34,
                  "endLine": 74,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\nlog = getLogger(__name__)\n\n# these are things that we provide env vars for more explicitly.  This list disables the\n#    pass-through of variant values to env vars for these keys.\nLANGUAGES = (\"PERL\", \"LUA\", \"R\", \"NUMPY\", \"PYTHON\")\nR_PACKAGES = (\"r-base\", \"mro-base\", \"r-impl\")\n",
                    "rendered": {
                      "text": "\nlog = getLogger(__name__)\n\n# these are things that we provide env vars for more explicitly.  This list disables the\n#    pass-through of variant values to env vars for these keys.\nLANGUAGES = (\"PERL\", \"LUA\", \"R\", \"NUMPY\", \"PYTHON\")\nR_PACKAGES = (\"r-base\", \"mro-base\", \"r-impl\")\n",
                      "markdown": "`\nlog = getLogger(__name__)\n\n# these are things that we provide env vars for more explicitly.  This list disables the\n#    pass-through of variant values to env vars for these keys.\nLANGUAGES = (\"PERL\", \"LUA\", \"R\", \"NUMPY\", \"PYTHON\")\nR_PACKAGES = (\"r-base\", \"mro-base\", \"r-impl\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/develop.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 30,
                  "endLine": 14,
                  "endColumn": 38,
                  "snippet": {
                    "text": "from .exceptions import CondaBuildUserError\nfrom .os_utils.external import find_executable\nfrom .post import mk_relative_osx\nfrom .utils import check_call_env, get_site_packages, on_mac, rec_glob\n\nif TYPE_CHECKING:\n    from pathlib import Path\n",
                    "rendered": {
                      "text": "from .exceptions import CondaBuildUserError\nfrom .os_utils.external import find_executable\nfrom .post import mk_relative_osx\nfrom .utils import check_call_env, get_site_packages, on_mac, rec_glob\n\nif TYPE_CHECKING:\n    from pathlib import Path\n",
                      "markdown": "`from .exceptions import CondaBuildUserError\nfrom .os_utils.external import find_executable\nfrom .post import mk_relative_osx\nfrom .utils import check_call_env, get_site_packages, on_mac, rec_glob\n\nif TYPE_CHECKING:\n    from pathlib import Path\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/develop.py"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 62,
                  "endLine": 184,
                  "endColumn": 66,
                  "snippet": {
                    "text": "            write_to_conda_pth(sp_dir, pkg_path)\n\n        # go through the source looking for compiled extensions and make sure\n        # they use the conda environment for loading libraries at runtime\n        relink_sharedobjects(pkg_path, prefix)\n        print(\"completed operation for: \" + pkg_path)\n",
                    "rendered": {
                      "text": "            write_to_conda_pth(sp_dir, pkg_path)\n\n        # go through the source looking for compiled extensions and make sure\n        # they use the conda environment for loading libraries at runtime\n        relink_sharedobjects(pkg_path, prefix)\n        print(\"completed operation for: \" + pkg_path)\n",
                      "markdown": "`            write_to_conda_pth(sp_dir, pkg_path)\n\n        # go through the source looking for compiled extensions and make sure\n        # they use the conda environment for loading libraries at runtime\n        relink_sharedobjects(pkg_path, prefix)\n        print(\"completed operation for: \" + pkg_path)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/develop.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 3,
                  "endLine": 102,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    \"\"\"\n\n    # next call setup.py develop\n    cmd = [\"python\", setup_py, \"build_ext\", \"--inplace\"]\n    check_call_env(cmd)\n    print(\"Completed: \" + \" \".join(cmd))\n    print(\"===============================================\")\n",
                    "rendered": {
                      "text": "    \"\"\"\n\n    # next call setup.py develop\n    cmd = [\"python\", setup_py, \"build_ext\", \"--inplace\"]\n    check_call_env(cmd)\n    print(\"Completed: \" + \" \".join(cmd))\n    print(\"===============================================\")\n",
                      "markdown": "`    \"\"\"\n\n    # next call setup.py develop\n    cmd = [\"python\", setup_py, \"build_ext\", \"--inplace\"]\n    check_call_env(cmd)\n    print(\"Completed: \" + \" \".join(cmd))\n    print(\"===============================================\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/develop.py"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 3,
                  "endLine": 84,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    :param setup_py: path to setup.py\n    \"\"\"\n    # first call setup.py clean\n    cmd = [\"python\", setup_py, \"clean\"]\n    check_call_env(cmd)\n    print(\"Completed: \" + \" \".join(cmd))\n    print(\"===============================================\")\n",
                    "rendered": {
                      "text": "    :param setup_py: path to setup.py\n    \"\"\"\n    # first call setup.py clean\n    cmd = [\"python\", setup_py, \"clean\"]\n    check_call_env(cmd)\n    print(\"Completed: \" + \" \".join(cmd))\n    print(\"===============================================\")\n",
                      "markdown": "`    :param setup_py: path to setup.py\n    \"\"\"\n    # first call setup.py clean\n    cmd = [\"python\", setup_py, \"clean\"]\n    check_call_env(cmd)\n    print(\"Completed: \" + \" \".join(cmd))\n    print(\"===============================================\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/develop.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 60,
                  "endLine": 54,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        with open(c_file) as cf:\n            # make sure file exists, before we try to read from it hence nested\n            # in append with block\n            # expect conda.pth to be small so read it all in at once\n            pkgs_in_dev_mode = cf.readlines()\n\n        # only append pkg_path if it doesn't already exist in conda.pth\n",
                    "rendered": {
                      "text": "        with open(c_file) as cf:\n            # make sure file exists, before we try to read from it hence nested\n            # in append with block\n            # expect conda.pth to be small so read it all in at once\n            pkgs_in_dev_mode = cf.readlines()\n\n        # only append pkg_path if it doesn't already exist in conda.pth\n",
                      "markdown": "`        with open(c_file) as cf:\n            # make sure file exists, before we try to read from it hence nested\n            # in append with block\n            # expect conda.pth to be small so read it all in at once\n            pkgs_in_dev_mode = cf.readlines()\n\n        # only append pkg_path if it doesn't already exist in conda.pth\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/develop.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 13,
                  "endLine": 54,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        with open(c_file) as cf:\n            # make sure file exists, before we try to read from it hence nested\n            # in append with block\n            # expect conda.pth to be small so read it all in at once\n            pkgs_in_dev_mode = cf.readlines()\n\n        # only append pkg_path if it doesn't already exist in conda.pth\n",
                    "rendered": {
                      "text": "        with open(c_file) as cf:\n            # make sure file exists, before we try to read from it hence nested\n            # in append with block\n            # expect conda.pth to be small so read it all in at once\n            pkgs_in_dev_mode = cf.readlines()\n\n        # only append pkg_path if it doesn't already exist in conda.pth\n",
                      "markdown": "`        with open(c_file) as cf:\n            # make sure file exists, before we try to read from it hence nested\n            # in append with block\n            # expect conda.pth to be small so read it all in at once\n            pkgs_in_dev_mode = cf.readlines()\n\n        # only append pkg_path if it doesn't already exist in conda.pth\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/develop.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        package in site-packages/. The build_prefix points to conda environment\n        since runtime libraries should be loaded from environment's lib/. first\n    \"\"\"\n    # find binaries in package dir and make them relocatable\n    bin_files = rec_glob(pkg_path, [\".so\"])\n    for b_file in bin_files:\n        if on_mac:\n",
                    "rendered": {
                      "text": "        package in site-packages/. The build_prefix points to conda environment\n        since runtime libraries should be loaded from environment's lib/. first\n    \"\"\"\n    # find binaries in package dir and make them relocatable\n    bin_files = rec_glob(pkg_path, [\".so\"])\n    for b_file in bin_files:\n        if on_mac:\n",
                      "markdown": "`        package in site-packages/. The build_prefix points to conda environment\n        since runtime libraries should be loaded from environment's lib/. first\n    \"\"\"\n    # find binaries in package dir and make them relocatable\n    bin_files = rec_glob(pkg_path, [\".so\"])\n    for b_file in bin_files:\n        if on_mac:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/develop.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 74,
                  "endLine": 26,
                  "snippet": {
                    "text": "    invokes functions in post module to relink to libraries in conda env\n\n    :param pkg_path: look for shared objects to relink in pkg_path\n    :param build_prefix: path to conda environment which contains lib/. to find\n        runtime libraries.\n\n    .. note:: develop mode builds the extensions in place and makes a link to\n        package in site-packages/. The build_prefix points to conda environment\n",
                    "rendered": {
                      "text": "    invokes functions in post module to relink to libraries in conda env\n\n    :param pkg_path: look for shared objects to relink in pkg_path\n    :param build_prefix: path to conda environment which contains lib/. to find\n        runtime libraries.\n\n    .. note:: develop mode builds the extensions in place and makes a link to\n        package in site-packages/. The build_prefix points to conda environment\n",
                      "markdown": "`    invokes functions in post module to relink to libraries in conda env\n\n    :param pkg_path: look for shared objects to relink in pkg_path\n    :param build_prefix: path to conda environment which contains lib/. to find\n        runtime libraries.\n\n    .. note:: develop mode builds the extensions in place and makes a link to\n        package in site-packages/. The build_prefix points to conda environment\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/develop.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 68,
                  "endLine": 23,
                  "snippet": {
                    "text": "\ndef relink_sharedobjects(pkg_path, build_prefix):\n    \"\"\"\n    invokes functions in post module to relink to libraries in conda env\n\n    :param pkg_path: look for shared objects to relink in pkg_path\n    :param build_prefix: path to conda environment which contains lib/. to find\n        runtime libraries.\n",
                    "rendered": {
                      "text": "\ndef relink_sharedobjects(pkg_path, build_prefix):\n    \"\"\"\n    invokes functions in post module to relink to libraries in conda env\n\n    :param pkg_path: look for shared objects to relink in pkg_path\n    :param build_prefix: path to conda environment which contains lib/. to find\n        runtime libraries.\n",
                      "markdown": "`\ndef relink_sharedobjects(pkg_path, build_prefix):\n    \"\"\"\n    invokes functions in post module to relink to libraries in conda env\n\n    :param pkg_path: look for shared objects to relink in pkg_path\n    :param build_prefix: path to conda environment which contains lib/. to find\n        runtime libraries.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/deprecations.py"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 30,
                  "endLine": 343,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        if not category:\n            raise DeprecatedError(message)\n\n        # alert user that it's time to remove something\n        warnings.warn(message, category, stacklevel=2 + stack)\n\n    def _get_module(self: Self, stack: int) -> tuple[ModuleType, str]:\n",
                    "rendered": {
                      "text": "        if not category:\n            raise DeprecatedError(message)\n\n        # alert user that it's time to remove something\n        warnings.warn(message, category, stacklevel=2 + stack)\n\n    def _get_module(self: Self, stack: int) -> tuple[ModuleType, str]:\n",
                      "markdown": "`        if not category:\n            raise DeprecatedError(message)\n\n        # alert user that it's time to remove something\n        warnings.warn(message, category, stacklevel=2 + stack)\n\n    def _get_module(self: Self, stack: int) -> tuple[ModuleType, str]:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/deprecations.py"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 35,
                  "endLine": 339,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            deprecation_type=deprecation_type,\n        )\n\n        # alert developer that it's time to remove something\n        if not category:\n            raise DeprecatedError(message)\n\n",
                    "rendered": {
                      "text": "            deprecation_type=deprecation_type,\n        )\n\n        # alert developer that it's time to remove something\n        if not category:\n            raise DeprecatedError(message)\n\n",
                      "markdown": "`            deprecation_type=deprecation_type,\n        )\n\n        # alert developer that it's time to remove something\n        if not category:\n            raise DeprecatedError(message)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/deprecations.py"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 64,
                  "endLine": 297,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        if not category:\n            raise DeprecatedError(message)\n\n        # patch module level __getattr__ to alert user that it's time to remove something\n        super_getattr = getattr(module, \"__getattr__\", None)\n\n        def __getattr__(name: str) -> Any:\n",
                    "rendered": {
                      "text": "        if not category:\n            raise DeprecatedError(message)\n\n        # patch module level __getattr__ to alert user that it's time to remove something\n        super_getattr = getattr(module, \"__getattr__\", None)\n\n        def __getattr__(name: str) -> Any:\n",
                      "markdown": "`        if not category:\n            raise DeprecatedError(message)\n\n        # patch module level __getattr__ to alert user that it's time to remove something\n        super_getattr = getattr(module, \"__getattr__\", None)\n\n        def __getattr__(name: str) -> Any:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/deprecations.py"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 35,
                  "endLine": 293,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            deprecation_type=deprecation_type,\n        )\n\n        # alert developer that it's time to remove something\n        if not category:\n            raise DeprecatedError(message)\n\n",
                    "rendered": {
                      "text": "            deprecation_type=deprecation_type,\n        )\n\n        # alert developer that it's time to remove something\n        if not category:\n            raise DeprecatedError(message)\n\n",
                      "markdown": "`            deprecation_type=deprecation_type,\n        )\n\n        # alert developer that it's time to remove something\n        if not category:\n            raise DeprecatedError(message)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/deprecations.py"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 38,
                  "endLine": 228,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                values: Any,\n                option_string: str | None = None,\n            ) -> None:\n                # alert user that it's time to remove something\n                warnings.warn(\n                    inner_self.help,\n                    inner_self.category,\n",
                    "rendered": {
                      "text": "                values: Any,\n                option_string: str | None = None,\n            ) -> None:\n                # alert user that it's time to remove something\n                warnings.warn(\n                    inner_self.help,\n                    inner_self.category,\n",
                      "markdown": "`                values: Any,\n                option_string: str | None = None,\n            ) -> None:\n                # alert user that it's time to remove something\n                warnings.warn(\n                    inner_self.help,\n                    inner_self.category,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/deprecations.py"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 43,
                  "endLine": 214,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                    deprecation_type=deprecation_type,\n                )\n\n                # alert developer that it's time to remove something\n                if not category:\n                    raise DeprecatedError(message)\n\n",
                    "rendered": {
                      "text": "                    deprecation_type=deprecation_type,\n                )\n\n                # alert developer that it's time to remove something\n                if not category:\n                    raise DeprecatedError(message)\n\n",
                      "markdown": "`                    deprecation_type=deprecation_type,\n                )\n\n                # alert developer that it's time to remove something\n                if not category:\n                    raise DeprecatedError(message)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/deprecations.py"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 34,
                  "endLine": 162,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            if not category:\n                raise DeprecatedError(message)\n\n            # alert user that it's time to remove something\n            @wraps(func)\n            def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n                # only warn about argument deprecations if the argument is used\n",
                    "rendered": {
                      "text": "            if not category:\n                raise DeprecatedError(message)\n\n            # alert user that it's time to remove something\n            @wraps(func)\n            def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n                # only warn about argument deprecations if the argument is used\n",
                      "markdown": "`            if not category:\n                raise DeprecatedError(message)\n\n            # alert user that it's time to remove something\n            @wraps(func)\n            def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n                # only warn about argument deprecations if the argument is used\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/deprecations.py"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 39,
                  "endLine": 158,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                deprecation_type=deprecation_type,\n            )\n\n            # alert developer that it's time to remove something\n            if not category:\n                raise DeprecatedError(message)\n\n",
                    "rendered": {
                      "text": "                deprecation_type=deprecation_type,\n            )\n\n            # alert developer that it's time to remove something\n            if not category:\n                raise DeprecatedError(message)\n\n",
                      "markdown": "`                deprecation_type=deprecation_type,\n            )\n\n            # alert developer that it's time to remove something\n            if not category:\n                raise DeprecatedError(message)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/deprecations.py"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 34,
                  "endLine": 113,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            if not category:\n                raise DeprecatedError(message)\n\n            # alert user that it's time to remove something\n            @wraps(func)\n            def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n                warnings.warn(message, category, stacklevel=2 + stack)\n",
                    "rendered": {
                      "text": "            if not category:\n                raise DeprecatedError(message)\n\n            # alert user that it's time to remove something\n            @wraps(func)\n            def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n                warnings.warn(message, category, stacklevel=2 + stack)\n",
                      "markdown": "`            if not category:\n                raise DeprecatedError(message)\n\n            # alert user that it's time to remove something\n            @wraps(func)\n            def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n                warnings.warn(message, category, stacklevel=2 + stack)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/deprecations.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 39,
                  "endLine": 109,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                deprecation_type=deprecation_type,\n            )\n\n            # alert developer that it's time to remove something\n            if not category:\n                raise DeprecatedError(message)\n\n",
                    "rendered": {
                      "text": "                deprecation_type=deprecation_type,\n            )\n\n            # alert developer that it's time to remove something\n            if not category:\n                raise DeprecatedError(message)\n\n",
                      "markdown": "`                deprecation_type=deprecation_type,\n            )\n\n            # alert developer that it's time to remove something\n            if not category:\n                raise DeprecatedError(message)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/deprecations.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 54,
                  "endLine": 71,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n        # If self._version or version could not be represented by a simple\n        # tuple[int, ...], do a more elaborate version parsing and comparison.\n        # Avoid this import otherwise to reduce import time for conda activate.\n        from packaging.version import parse\n\n        if self._version_object is None:\n",
                    "rendered": {
                      "text": "\n        # If self._version or version could not be represented by a simple\n        # tuple[int, ...], do a more elaborate version parsing and comparison.\n        # Avoid this import otherwise to reduce import time for conda activate.\n        from packaging.version import parse\n\n        if self._version_object is None:\n",
                      "markdown": "`\n        # If self._version or version could not be represented by a simple\n        # tuple[int, ...], do a more elaborate version parsing and comparison.\n        # Avoid this import otherwise to reduce import time for conda activate.\n        from packaging.version import parse\n\n        if self._version_object is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_render.py"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 35,
                  "endLine": 149,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        \"--old-build-string\",\n        dest=\"filename_hashing\",\n        action=\"store_false\",\n        default=context.conda_build.get(\"filename_hashing\", \"true\").lower() == \"true\",\n        help=(\n            \"Disable hash additions to filenames to distinguish package \"\n            \"variants from one another. NOTE: any filename collisions are \"\n",
                    "rendered": {
                      "text": "        \"--old-build-string\",\n        dest=\"filename_hashing\",\n        action=\"store_false\",\n        default=context.conda_build.get(\"filename_hashing\", \"true\").lower() == \"true\",\n        help=(\n            \"Disable hash additions to filenames to distinguish package \"\n            \"variants from one another. NOTE: any filename collisions are \"\n",
                      "markdown": "`        \"--old-build-string\",\n        dest=\"filename_hashing\",\n        action=\"store_false\",\n        default=context.conda_build.get(\"filename_hashing\", \"true\").lower() == \"true\",\n        help=(\n            \"Disable hash additions to filenames to distinguish package \"\n            \"variants from one another. NOTE: any filename collisions are \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_render.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 83,
                  "endLine": 140,
                  "endColumn": 87,
                  "snippet": {
                    "text": "        \"--exclusive-config-file\",\n        action=\"append\",\n        help=\"\"\"Exclusive variant config files to add. Providing files here disables\n        searching in your home directory and in cwd.  The files specified here come at the\n        start of the order, as opposed to the end with --variant-config-files.  Any config\n        files in recipes and any config files specified with --variant-config-files will\n        override values from these files.\"\"\",\n",
                    "rendered": {
                      "text": "        \"--exclusive-config-file\",\n        action=\"append\",\n        help=\"\"\"Exclusive variant config files to add. Providing files here disables\n        searching in your home directory and in cwd.  The files specified here come at the\n        start of the order, as opposed to the end with --variant-config-files.  Any config\n        files in recipes and any config files specified with --variant-config-files will\n        override values from these files.\"\"\",\n",
                      "markdown": "`        \"--exclusive-config-file\",\n        action=\"append\",\n        help=\"\"\"Exclusive variant config files to add. Providing files here disables\n        searching in your home directory and in cwd.  The files specified here come at the\n        start of the order, as opposed to the end with --variant-config-files.  Any config\n        files in recipes and any config files specified with --variant-config-files will\n        override values from these files.\"\"\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_render.py"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 21,
                  "endLine": 107,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    p.add_argument(\n        \"--lua\",\n        action=\"append\",\n        help=\"Set the Lua version used by conda build.\",\n    )\n    p.add_argument(\n        \"--bootstrap\",\n",
                    "rendered": {
                      "text": "    p.add_argument(\n        \"--lua\",\n        action=\"append\",\n        help=\"Set the Lua version used by conda build.\",\n    )\n    p.add_argument(\n        \"--bootstrap\",\n",
                      "markdown": "`    p.add_argument(\n        \"--lua\",\n        action=\"append\",\n        help=\"Set the Lua version used by conda build.\",\n    )\n    p.add_argument(\n        \"--bootstrap\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_render.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 21,
                  "endLine": 91,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    p.add_argument(\n        \"--perl\",\n        action=\"append\",\n        help=\"Set the Perl version used by conda build.\",\n    )\n    p.add_argument(\n        \"--numpy\",\n",
                    "rendered": {
                      "text": "    p.add_argument(\n        \"--perl\",\n        action=\"append\",\n        help=\"Set the Perl version used by conda build.\",\n    )\n    p.add_argument(\n        \"--numpy\",\n",
                      "markdown": "`    p.add_argument(\n        \"--perl\",\n        action=\"append\",\n        help=\"Set the Perl version used by conda build.\",\n    )\n    p.add_argument(\n        \"--numpy\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_debug.py"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 97,
                  "endLine": 55,
                  "endColumn": 101,
                  "snippet": {
                    "text": "        \"--output-id\",\n        help=(\n            \"fnmatch pattern that is associated with the output that you want to create an env for.  \"\n            \"Must match only one file, as we don't support creating envs for more than one output at a time. \"\n            \"The top-level recipe can be specified by passing 'TOPLEVEL' here\"\n        ),\n    )\n",
                    "rendered": {
                      "text": "        \"--output-id\",\n        help=(\n            \"fnmatch pattern that is associated with the output that you want to create an env for.  \"\n            \"Must match only one file, as we don't support creating envs for more than one output at a time. \"\n            \"The top-level recipe can be specified by passing 'TOPLEVEL' here\"\n        ),\n    )\n",
                      "markdown": "`        \"--output-id\",\n        help=(\n            \"fnmatch pattern that is associated with the output that you want to create an env for.  \"\n            \"Must match only one file, as we don't support creating envs for more than one output at a time. \"\n            \"The top-level recipe can be specified by passing 'TOPLEVEL' here\"\n        ),\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_debug.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 5,
                  "endLine": 67,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        \"environments.\",\n    )\n\n    # cut out some args from render that don't make sense here\n    #    https://stackoverflow.com/a/32809642/1170370\n    p._handle_conflict_resolve(\n        None,\n",
                    "rendered": {
                      "text": "        \"environments.\",\n    )\n\n    # cut out some args from render that don't make sense here\n    #    https://stackoverflow.com/a/32809642/1170370\n    p._handle_conflict_resolve(\n        None,\n",
                      "markdown": "`        \"environments.\",\n    )\n\n    # cut out some args from render that don't make sense here\n    #    https://stackoverflow.com/a/32809642/1170370\n    p._handle_conflict_resolve(\n        None,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_debug.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 90,
                  "endLine": 54,
                  "endColumn": 95,
                  "snippet": {
                    "text": "        \"-o\",\n        \"--output-id\",\n        help=(\n            \"fnmatch pattern that is associated with the output that you want to create an env for.  \"\n            \"Must match only one file, as we don't support creating envs for more than one output at a time. \"\n            \"The top-level recipe can be specified by passing 'TOPLEVEL' here\"\n        ),\n",
                    "rendered": {
                      "text": "        \"-o\",\n        \"--output-id\",\n        help=(\n            \"fnmatch pattern that is associated with the output that you want to create an env for.  \"\n            \"Must match only one file, as we don't support creating envs for more than one output at a time. \"\n            \"The top-level recipe can be specified by passing 'TOPLEVEL' here\"\n        ),\n",
                      "markdown": "`        \"-o\",\n        \"--output-id\",\n        help=(\n            \"fnmatch pattern that is associated with the output that you want to create an env for.  \"\n            \"Must match only one file, as we don't support creating envs for more than one output at a time. \"\n            \"The top-level recipe can be specified by passing 'TOPLEVEL' here\"\n        ),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/cli/main_debug.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 56,
                  "endLine": 37,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        \"recipe_or_package_file_path\",\n        help=(\n            \"Path to recipe directory or package file to use for dependency and source information. \"\n            \"If you use a recipe, you get the build/host env and source work directory.  If you use \"\n            \"a package file, you get the test environments and the test_tmp folder.\"\n        ),\n        type=valid.validate_is_conda_pkg_or_recipe_dir,\n",
                    "rendered": {
                      "text": "        \"recipe_or_package_file_path\",\n        help=(\n            \"Path to recipe directory or package file to use for dependency and source information. \"\n            \"If you use a recipe, you get the build/host env and source work directory.  If you use \"\n            \"a package file, you get the test environments and the test_tmp folder.\"\n        ),\n        type=valid.validate_is_conda_pkg_or_recipe_dir,\n",
                      "markdown": "`        \"recipe_or_package_file_path\",\n        help=(\n            \"Path to recipe directory or package file to use for dependency and source information. \"\n            \"If you use a recipe, you get the build/host env and source work directory.  If you use \"\n            \"a package file, you get the test environments and the test_tmp folder.\"\n        ),\n        type=valid.validate_is_conda_pkg_or_recipe_dir,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/__init__.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 59,
                  "endLine": 41,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n    from conda.base.context import reset_context\n\n    # Disallow softlinks. This avoids a lot of dumb issues, at the potential cost of disk space.\n    os.environ[\"CONDA_ALLOW_SOFTLINKS\"] = \"false\"\n    reset_context()\n\n",
                    "rendered": {
                      "text": "\n    from conda.base.context import reset_context\n\n    # Disallow softlinks. This avoids a lot of dumb issues, at the potential cost of disk space.\n    os.environ[\"CONDA_ALLOW_SOFTLINKS\"] = \"false\"\n    reset_context()\n\n",
                      "markdown": "`\n    from conda.base.context import reset_context\n\n    # Disallow softlinks. This avoids a lot of dumb issues, at the potential cost of disk space.\n    os.environ[\"CONDA_ALLOW_SOFTLINKS\"] = \"false\"\n    reset_context()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/conda-build-24.9.0-r0.apk/conda-build-24.9.0-r0/usr/lib/python3.12/site-packages/conda_build/__init__.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        __version__ = get_version(root=\"..\", relative_to=__file__)\n    except (ImportError, OSError, LookupError):\n        # ImportError: setuptools_scm isn't installed\n        # OSError: git isn't installed\n        # LookupError: setuptools_scm unable to detect version\n        # Conda-build abides by CEP-8 which specifies using CalVer, so the dev version is:\n        #     YY.MM.MICRO.devN+gHASH[.dirty]\n",
                    "rendered": {
                      "text": "        __version__ = get_version(root=\"..\", relative_to=__file__)\n    except (ImportError, OSError, LookupError):\n        # ImportError: setuptools_scm isn't installed\n        # OSError: git isn't installed\n        # LookupError: setuptools_scm unable to detect version\n        # Conda-build abides by CEP-8 which specifies using CalVer, so the dev version is:\n        #     YY.MM.MICRO.devN+gHASH[.dirty]\n",
                      "markdown": "`        __version__ = get_version(root=\"..\", relative_to=__file__)\n    except (ImportError, OSError, LookupError):\n        # ImportError: setuptools_scm isn't installed\n        # OSError: git isn't installed\n        # LookupError: setuptools_scm unable to detect version\n        # Conda-build abides by CEP-8 which specifies using CalVer, so the dev version is:\n        #     YY.MM.MICRO.devN+gHASH[.dirty]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}