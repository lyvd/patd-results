{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 26,
                  "endLine": 315,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                return None\n\n        with dbm.open(self.dbm_path, 'c', 0o600) as db:\n            stored_pw = db.get(username.encode(\"utf8\"), None)\n\n            if stored_pw is not None:\n                # for existing passwords: ensure password hash match\n",
                    "rendered": {
                      "text": "                return None\n\n        with dbm.open(self.dbm_path, 'c', 0o600) as db:\n            stored_pw = db.get(username.encode(\"utf8\"), None)\n\n            if stored_pw is not None:\n                # for existing passwords: ensure password hash match\n",
                      "markdown": "`                return None\n\n        with dbm.open(self.dbm_path, 'c', 0o600) as db:\n            stored_pw = db.get(username.encode(\"utf8\"), None)\n\n            if stored_pw is not None:\n                # for existing passwords: ensure password hash match\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 44,
                  "endLine": 368,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    def get_handlers(self, app):\n        return [\n            (r\"/login\", CustomLoginHandler),\n            (r\"/auth/change-password\", ResetPasswordHandler),\n        ]\n",
                    "rendered": {
                      "text": "    def get_handlers(self, app):\n        return [\n            (r\"/login\", CustomLoginHandler),\n            (r\"/auth/change-password\", ResetPasswordHandler),\n        ]\n",
                      "markdown": "`    def get_handlers(self, app):\n        return [\n            (r\"/login\", CustomLoginHandler),\n            (r\"/auth/change-password\", ResetPasswordHandler),\n        ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 28,
                  "endLine": 368,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    def get_handlers(self, app):\n        return [\n            (r\"/login\", CustomLoginHandler),\n            (r\"/auth/change-password\", ResetPasswordHandler),\n        ]\n",
                    "rendered": {
                      "text": "    def get_handlers(self, app):\n        return [\n            (r\"/login\", CustomLoginHandler),\n            (r\"/auth/change-password\", ResetPasswordHandler),\n        ]\n",
                      "markdown": "`    def get_handlers(self, app):\n        return [\n            (r\"/login\", CustomLoginHandler),\n            (r\"/auth/change-password\", ResetPasswordHandler),\n        ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 26,
                  "endLine": 361,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            return login_err\n        with dbm.open(self.dbm_path, \"c\", 0o600) as db:\n            db[username] = bcrypt.hashpw(new_password.encode(\"utf8\"), bcrypt.gensalt())\n        login_msg = \"Your password has been changed successfully!\"\n        self.log.info(login_msg)\n        return login_msg\n\n",
                    "rendered": {
                      "text": "            return login_err\n        with dbm.open(self.dbm_path, \"c\", 0o600) as db:\n            db[username] = bcrypt.hashpw(new_password.encode(\"utf8\"), bcrypt.gensalt())\n        login_msg = \"Your password has been changed successfully!\"\n        self.log.info(login_msg)\n        return login_msg\n\n",
                      "markdown": "`            return login_err\n        with dbm.open(self.dbm_path, \"c\", 0o600) as db:\n            db[username] = bcrypt.hashpw(new_password.encode(\"utf8\"), bcrypt.gensalt())\n        login_msg = \"Your password has been changed successfully!\"\n        self.log.info(login_msg)\n        return login_msg\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 45,
                  "endLine": 360,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            # Resetting the password will fail if the new password is too short.\n            return login_err\n        with dbm.open(self.dbm_path, \"c\", 0o600) as db:\n            db[username] = bcrypt.hashpw(new_password.encode(\"utf8\"), bcrypt.gensalt())\n        login_msg = \"Your password has been changed successfully!\"\n        self.log.info(login_msg)\n        return login_msg\n",
                    "rendered": {
                      "text": "            # Resetting the password will fail if the new password is too short.\n            return login_err\n        with dbm.open(self.dbm_path, \"c\", 0o600) as db:\n            db[username] = bcrypt.hashpw(new_password.encode(\"utf8\"), bcrypt.gensalt())\n        login_msg = \"Your password has been changed successfully!\"\n        self.log.info(login_msg)\n        return login_msg\n",
                      "markdown": "`            # Resetting the password will fail if the new password is too short.\n            return login_err\n        with dbm.open(self.dbm_path, \"c\", 0o600) as db:\n            db[username] = bcrypt.hashpw(new_password.encode(\"utf8\"), bcrypt.gensalt())\n        login_msg = \"Your password has been changed successfully!\"\n        self.log.info(login_msg)\n        return login_msg\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 58,
                  "endLine": 357,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                % self.min_password_length\n            )\n            self.log.error(login_err)\n            # Resetting the password will fail if the new password is too short.\n            return login_err\n        with dbm.open(self.dbm_path, \"c\", 0o600) as db:\n            db[username] = bcrypt.hashpw(new_password.encode(\"utf8\"), bcrypt.gensalt())\n",
                    "rendered": {
                      "text": "                % self.min_password_length\n            )\n            self.log.error(login_err)\n            # Resetting the password will fail if the new password is too short.\n            return login_err\n        with dbm.open(self.dbm_path, \"c\", 0o600) as db:\n            db[username] = bcrypt.hashpw(new_password.encode(\"utf8\"), bcrypt.gensalt())\n",
                      "markdown": "`                % self.min_password_length\n            )\n            self.log.error(login_err)\n            # Resetting the password will fail if the new password is too short.\n            return login_err\n        with dbm.open(self.dbm_path, \"c\", 0o600) as db:\n            db[username] = bcrypt.hashpw(new_password.encode(\"utf8\"), bcrypt.gensalt())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 28,
                  "endLine": 357,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                % self.min_password_length\n            )\n            self.log.error(login_err)\n            # Resetting the password will fail if the new password is too short.\n            return login_err\n        with dbm.open(self.dbm_path, \"c\", 0o600) as db:\n            db[username] = bcrypt.hashpw(new_password.encode(\"utf8\"), bcrypt.gensalt())\n",
                    "rendered": {
                      "text": "                % self.min_password_length\n            )\n            self.log.error(login_err)\n            # Resetting the password will fail if the new password is too short.\n            return login_err\n        with dbm.open(self.dbm_path, \"c\", 0o600) as db:\n            db[username] = bcrypt.hashpw(new_password.encode(\"utf8\"), bcrypt.gensalt())\n",
                      "markdown": "`                % self.min_password_length\n            )\n            self.log.error(login_err)\n            # Resetting the password will fail if the new password is too short.\n            return login_err\n        with dbm.open(self.dbm_path, \"c\", 0o600) as db:\n            db[username] = bcrypt.hashpw(new_password.encode(\"utf8\"), bcrypt.gensalt())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 27,
                  "endLine": 354,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n            )\n            self.log.error(login_err)\n            # Resetting the password will fail if the new password is too short.\n",
                    "rendered": {
                      "text": "        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n            )\n            self.log.error(login_err)\n            # Resetting the password will fail if the new password is too short.\n",
                      "markdown": "`        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n            )\n            self.log.error(login_err)\n            # Resetting the password will fail if the new password is too short.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 53,
                  "endLine": 353,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n            )\n            self.log.error(login_err)\n",
                    "rendered": {
                      "text": "        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n            )\n            self.log.error(login_err)\n",
                      "markdown": "`        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n            )\n            self.log.error(login_err)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 17,
                  "endLine": 353,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n            )\n            self.log.error(login_err)\n",
                    "rendered": {
                      "text": "        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n            )\n            self.log.error(login_err)\n",
                      "markdown": "`        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n            )\n            self.log.error(login_err)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 43,
                  "endLine": 351,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n",
                    "rendered": {
                      "text": "        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n",
                      "markdown": "`        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 30,
                  "endLine": 351,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n",
                    "rendered": {
                      "text": "        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n",
                      "markdown": "`        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 33,
                  "endLine": 349,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    def reset_password(self, username, new_password):\n        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n",
                    "rendered": {
                      "text": "\n    def reset_password(self, username, new_password):\n        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n",
                      "markdown": "`\n    def reset_password(self, username, new_password):\n        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 43,
                  "endLine": 347,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        except KeyError:\n            pass\n\n    def reset_password(self, username, new_password):\n        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n",
                    "rendered": {
                      "text": "        except KeyError:\n            pass\n\n    def reset_password(self, username, new_password):\n        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n",
                      "markdown": "`        except KeyError:\n            pass\n\n    def reset_password(self, username, new_password):\n        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 14,
                  "endLine": 347,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        except KeyError:\n            pass\n\n    def reset_password(self, username, new_password):\n        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n",
                    "rendered": {
                      "text": "        except KeyError:\n            pass\n\n    def reset_password(self, username, new_password):\n        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n",
                      "markdown": "`        except KeyError:\n            pass\n\n    def reset_password(self, username, new_password):\n        \"\"\"\n        This allows changing the password of a logged user.\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 18,
                  "endLine": 339,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        \"\"\"\n        When user is deleted, remove their entry from password db.\n\n        This lets passwords be reset by deleting users.\n        \"\"\"\n        try:\n            with dbm.open(self.dbm_path, 'c', 0o600) as db:\n",
                    "rendered": {
                      "text": "        \"\"\"\n        When user is deleted, remove their entry from password db.\n\n        This lets passwords be reset by deleting users.\n        \"\"\"\n        try:\n            with dbm.open(self.dbm_path, 'c', 0o600) as db:\n",
                      "markdown": "`        \"\"\"\n        When user is deleted, remove their entry from password db.\n\n        This lets passwords be reset by deleting users.\n        \"\"\"\n        try:\n            with dbm.open(self.dbm_path, 'c', 0o600) as db:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 54,
                  "endLine": 337,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n    def delete_user(self, user):\n        \"\"\"\n        When user is deleted, remove their entry from password db.\n\n        This lets passwords be reset by deleting users.\n        \"\"\"\n",
                    "rendered": {
                      "text": "\n    def delete_user(self, user):\n        \"\"\"\n        When user is deleted, remove their entry from password db.\n\n        This lets passwords be reset by deleting users.\n        \"\"\"\n",
                      "markdown": "`\n    def delete_user(self, user):\n        \"\"\"\n        When user is deleted, remove their entry from password db.\n\n        This lets passwords be reset by deleting users.\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 45,
                  "endLine": 330,
                  "endColumn": 53,
                  "snippet": {
                    "text": "                    )\n                    self.log.error(handler.custom_login_error)\n                    return None\n                db[username] = bcrypt.hashpw(password.encode(\"utf8\"), bcrypt.gensalt())\n\n        return username\n\n",
                    "rendered": {
                      "text": "                    )\n                    self.log.error(handler.custom_login_error)\n                    return None\n                db[username] = bcrypt.hashpw(password.encode(\"utf8\"), bcrypt.gensalt())\n\n        return username\n\n",
                      "markdown": "`                    )\n                    self.log.error(handler.custom_login_error)\n                    return None\n                db[username] = bcrypt.hashpw(password.encode(\"utf8\"), bcrypt.gensalt())\n\n        return username\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 35,
                  "endLine": 326,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n                    )\n                    self.log.error(handler.custom_login_error)\n                    return None\n",
                    "rendered": {
                      "text": "                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n                    )\n                    self.log.error(handler.custom_login_error)\n                    return None\n",
                      "markdown": "`                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n                    )\n                    self.log.error(handler.custom_login_error)\n                    return None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 61,
                  "endLine": 325,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n                    )\n                    self.log.error(handler.custom_login_error)\n",
                    "rendered": {
                      "text": "                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n                    )\n                    self.log.error(handler.custom_login_error)\n",
                      "markdown": "`                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n                    )\n                    self.log.error(handler.custom_login_error)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 25,
                  "endLine": 325,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n                    )\n                    self.log.error(handler.custom_login_error)\n",
                    "rendered": {
                      "text": "                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n                    )\n                    self.log.error(handler.custom_login_error)\n",
                      "markdown": "`                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n                    )\n                    self.log.error(handler.custom_login_error)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 47,
                  "endLine": 323,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n",
                    "rendered": {
                      "text": "                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n",
                      "markdown": "`                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 38,
                  "endLine": 323,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n",
                    "rendered": {
                      "text": "                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n",
                      "markdown": "`                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 68,
                  "endLine": 322,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n",
                    "rendered": {
                      "text": "                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n",
                      "markdown": "`                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 40,
                  "endLine": 322,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n",
                    "rendered": {
                      "text": "                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n",
                      "markdown": "`                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 33,
                  "endLine": 319,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n            if stored_pw is not None:\n                # for existing passwords: ensure password hash match\n                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n",
                    "rendered": {
                      "text": "\n            if stored_pw is not None:\n                # for existing passwords: ensure password hash match\n                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n",
                      "markdown": "`\n            if stored_pw is not None:\n                # for existing passwords: ensure password hash match\n                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n                # for new users: ensure password validity and store password hash\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 49,
                  "endLine": 318,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            stored_pw = db.get(username.encode(\"utf8\"), None)\n\n            if stored_pw is not None:\n                # for existing passwords: ensure password hash match\n                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n",
                    "rendered": {
                      "text": "            stored_pw = db.get(username.encode(\"utf8\"), None)\n\n            if stored_pw is not None:\n                # for existing passwords: ensure password hash match\n                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n",
                      "markdown": "`            stored_pw = db.get(username.encode(\"utf8\"), None)\n\n            if stored_pw is not None:\n                # for existing passwords: ensure password hash match\n                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 31,
                  "endLine": 318,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            stored_pw = db.get(username.encode(\"utf8\"), None)\n\n            if stored_pw is not None:\n                # for existing passwords: ensure password hash match\n                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n",
                    "rendered": {
                      "text": "            stored_pw = db.get(username.encode(\"utf8\"), None)\n\n            if stored_pw is not None:\n                # for existing passwords: ensure password hash match\n                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n",
                      "markdown": "`            stored_pw = db.get(username.encode(\"utf8\"), None)\n\n            if stored_pw is not None:\n                # for existing passwords: ensure password hash match\n                if bcrypt.hashpw(password.encode(\"utf8\"), stored_pw) != stored_pw:\n                    return None\n            else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 25,
                  "endLine": 308,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n    async def authenticate(self, handler, data):\n        username = self.normalize_username(data[\"username\"])\n        password = data[\"password\"]\n\n        if not self.create_users:\n            if not self._user_exists(username):\n",
                    "rendered": {
                      "text": "\n    async def authenticate(self, handler, data):\n        username = self.normalize_username(data[\"username\"])\n        password = data[\"password\"]\n\n        if not self.create_users:\n            if not self._user_exists(username):\n",
                      "markdown": "`\n    async def authenticate(self, handler, data):\n        username = self.normalize_username(data[\"username\"])\n        password = data[\"password\"]\n\n        if not self.create_users:\n            if not self._user_exists(username):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 8,
                  "endLine": 308,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    async def authenticate(self, handler, data):\n        username = self.normalize_username(data[\"username\"])\n        password = data[\"password\"]\n\n        if not self.create_users:\n            if not self._user_exists(username):\n",
                    "rendered": {
                      "text": "\n    async def authenticate(self, handler, data):\n        username = self.normalize_username(data[\"username\"])\n        password = data[\"password\"]\n\n        if not self.create_users:\n            if not self._user_exists(username):\n",
                      "markdown": "`\n    async def authenticate(self, handler, data):\n        username = self.normalize_username(data[\"username\"])\n        password = data[\"password\"]\n\n        if not self.create_users:\n            if not self._user_exists(username):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 41,
                  "endLine": 290,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n\n    def _validate_password(self, password):\n        return len(password) >= self.min_password_length\n\n\n    def validate_username(self, name):\n",
                    "rendered": {
                      "text": "\n\n    def _validate_password(self, password):\n        return len(password) >= self.min_password_length\n\n\n    def validate_username(self, name):\n",
                      "markdown": "`\n\n    def _validate_password(self, password):\n        return len(password) >= self.min_password_length\n\n\n    def validate_username(self, name):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 19,
                  "endLine": 290,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\n    def _validate_password(self, password):\n        return len(password) >= self.min_password_length\n\n\n    def validate_username(self, name):\n",
                    "rendered": {
                      "text": "\n\n    def _validate_password(self, password):\n        return len(password) >= self.min_password_length\n\n\n    def validate_username(self, name):\n",
                      "markdown": "`\n\n    def _validate_password(self, password):\n        return len(password) >= self.min_password_length\n\n\n    def validate_username(self, name):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 33,
                  "endLine": 289,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        return self.db.query(User).filter_by(name=username).first() is not None\n\n\n    def _validate_password(self, password):\n        return len(password) >= self.min_password_length\n\n\n",
                    "rendered": {
                      "text": "        return self.db.query(User).filter_by(name=username).first() is not None\n\n\n    def _validate_password(self, password):\n        return len(password) >= self.min_password_length\n\n\n",
                      "markdown": "`        return self.db.query(User).filter_by(name=username).first() is not None\n\n\n    def _validate_password(self, password):\n        return len(password) >= self.min_password_length\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 18,
                  "endLine": 289,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        return self.db.query(User).filter_by(name=username).first() is not None\n\n\n    def _validate_password(self, password):\n        return len(password) >= self.min_password_length\n\n\n",
                    "rendered": {
                      "text": "        return self.db.query(User).filter_by(name=username).first() is not None\n\n\n    def _validate_password(self, password):\n        return len(password) >= self.min_password_length\n\n\n",
                      "markdown": "`        return self.db.query(User).filter_by(name=username).first() is not None\n\n\n    def _validate_password(self, password):\n        return len(password) >= self.min_password_length\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 71,
                  "endLine": 264,
                  "endColumn": 79,
                  "snippet": {
                    "text": "                    for username in usernames:\n                        if username != normalized_username:\n                            self.log.warning(\n                                f\"Removing un-normalized username from password db {username}\"\n                            )\n                            del db[username]\n\n",
                    "rendered": {
                      "text": "                    for username in usernames:\n                        if username != normalized_username:\n                            self.log.warning(\n                                f\"Removing un-normalized username from password db {username}\"\n                            )\n                            del db[username]\n\n",
                      "markdown": "`                    for username in usernames:\n                        if username != normalized_username:\n                            self.log.warning(\n                                f\"Removing un-normalized username from password db {username}\"\n                            )\n                            del db[username]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 65,
                  "endLine": 260,
                  "endColumn": 73,
                  "snippet": {
                    "text": "                        self.log.warning(\n                            f\"Normalizing username in password db {username}->{normalized_username}\"\n                        )\n                        db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    for username in usernames:\n                        if username != normalized_username:\n                            self.log.warning(\n",
                    "rendered": {
                      "text": "                        self.log.warning(\n                            f\"Normalizing username in password db {username}->{normalized_username}\"\n                        )\n                        db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    for username in usernames:\n                        if username != normalized_username:\n                            self.log.warning(\n",
                      "markdown": "`                        self.log.warning(\n                            f\"Normalizing username in password db {username}->{normalized_username}\"\n                        )\n                        db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    for username in usernames:\n                        if username != normalized_username:\n                            self.log.warning(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 54,
                  "endLine": 258,
                  "endColumn": 62,
                  "snippet": {
                    "text": "                        # this isn't guaranteed, but it's the best information we have\n                        username = usernames[0]\n                        self.log.warning(\n                            f\"Normalizing username in password db {username}->{normalized_username}\"\n                        )\n                        db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    for username in usernames:\n",
                    "rendered": {
                      "text": "                        # this isn't guaranteed, but it's the best information we have\n                        username = usernames[0]\n                        self.log.warning(\n                            f\"Normalizing username in password db {username}->{normalized_username}\"\n                        )\n                        db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    for username in usernames:\n",
                      "markdown": "`                        # this isn't guaranteed, but it's the best information we have\n                        username = usernames[0]\n                        self.log.warning(\n                            f\"Normalizing username in password db {username}->{normalized_username}\"\n                        )\n                        db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    for username in usernames:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 50,
                  "endLine": 253,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                        f\" Only the password stored for the normalized {normalized_username} will be used.\"\n                    )\n                    collision_found = True\n                    if normalized_username not in passwords:\n                        # we choose usernames[0] as most likely to be the first entry\n                        # this isn't guaranteed, but it's the best information we have\n                        username = usernames[0]\n",
                    "rendered": {
                      "text": "                        f\" Only the password stored for the normalized {normalized_username} will be used.\"\n                    )\n                    collision_found = True\n                    if normalized_username not in passwords:\n                        # we choose usernames[0] as most likely to be the first entry\n                        # this isn't guaranteed, but it's the best information we have\n                        username = usernames[0]\n",
                      "markdown": "`                        f\" Only the password stored for the normalized {normalized_username} will be used.\"\n                    )\n                    collision_found = True\n                    if normalized_username not in passwords:\n                        # we choose usernames[0] as most likely to be the first entry\n                        # this isn't guaranteed, but it's the best information we have\n                        username = usernames[0]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 36,
                  "endLine": 250,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                    # after jupyterhub-firstuseauthenticator 1.0\n                    self.log.warning(\n                        f\"{len(usernames)} variations of the username {normalized_username} present in password database: {usernames}.\"\n                        f\" Only the password stored for the normalized {normalized_username} will be used.\"\n                    )\n                    collision_found = True\n                    if normalized_username not in passwords:\n",
                    "rendered": {
                      "text": "                    # after jupyterhub-firstuseauthenticator 1.0\n                    self.log.warning(\n                        f\"{len(usernames)} variations of the username {normalized_username} present in password database: {usernames}.\"\n                        f\" Only the password stored for the normalized {normalized_username} will be used.\"\n                    )\n                    collision_found = True\n                    if normalized_username not in passwords:\n",
                      "markdown": "`                    # after jupyterhub-firstuseauthenticator 1.0\n                    self.log.warning(\n                        f\"{len(usernames)} variations of the username {normalized_username} present in password database: {usernames}.\"\n                        f\" Only the password stored for the normalized {normalized_username} will be used.\"\n                    )\n                    collision_found = True\n                    if normalized_username not in passwords:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 103,
                  "endLine": 249,
                  "endColumn": 111,
                  "snippet": {
                    "text": "                    # the non-normalized username passwords will never be used\n                    # after jupyterhub-firstuseauthenticator 1.0\n                    self.log.warning(\n                        f\"{len(usernames)} variations of the username {normalized_username} present in password database: {usernames}.\"\n                        f\" Only the password stored for the normalized {normalized_username} will be used.\"\n                    )\n                    collision_found = True\n",
                    "rendered": {
                      "text": "                    # the non-normalized username passwords will never be used\n                    # after jupyterhub-firstuseauthenticator 1.0\n                    self.log.warning(\n                        f\"{len(usernames)} variations of the username {normalized_username} present in password database: {usernames}.\"\n                        f\" Only the password stored for the normalized {normalized_username} will be used.\"\n                    )\n                    collision_found = True\n",
                      "markdown": "`                    # the non-normalized username passwords will never be used\n                    # after jupyterhub-firstuseauthenticator 1.0\n                    self.log.warning(\n                        f\"{len(usernames)} variations of the username {normalized_username} present in password database: {usernames}.\"\n                        f\" Only the password stored for the normalized {normalized_username} will be used.\"\n                    )\n                    collision_found = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 50,
                  "endLine": 246,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                    # do not clear these automatically because the 'right' answer is ambiguous,\n                    # but make sure the normalized_username is set,\n                    # so that after upgrade, there is always a password set\n                    # the non-normalized username passwords will never be used\n                    # after jupyterhub-firstuseauthenticator 1.0\n                    self.log.warning(\n                        f\"{len(usernames)} variations of the username {normalized_username} present in password database: {usernames}.\"\n",
                    "rendered": {
                      "text": "                    # do not clear these automatically because the 'right' answer is ambiguous,\n                    # but make sure the normalized_username is set,\n                    # so that after upgrade, there is always a password set\n                    # the non-normalized username passwords will never be used\n                    # after jupyterhub-firstuseauthenticator 1.0\n                    self.log.warning(\n                        f\"{len(usernames)} variations of the username {normalized_username} present in password database: {usernames}.\"\n",
                      "markdown": "`                    # do not clear these automatically because the 'right' answer is ambiguous,\n                    # but make sure the normalized_username is set,\n                    # so that after upgrade, there is always a password set\n                    # the non-normalized username passwords will never be used\n                    # after jupyterhub-firstuseauthenticator 1.0\n                    self.log.warning(\n                        f\"{len(usernames)} variations of the username {normalized_username} present in password database: {usernames}.\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 63,
                  "endLine": 245,
                  "endColumn": 71,
                  "snippet": {
                    "text": "                    # collision! Multiple passwords for the same Hub user with different normalization\n                    # do not clear these automatically because the 'right' answer is ambiguous,\n                    # but make sure the normalized_username is set,\n                    # so that after upgrade, there is always a password set\n                    # the non-normalized username passwords will never be used\n                    # after jupyterhub-firstuseauthenticator 1.0\n                    self.log.warning(\n",
                    "rendered": {
                      "text": "                    # collision! Multiple passwords for the same Hub user with different normalization\n                    # do not clear these automatically because the 'right' answer is ambiguous,\n                    # but make sure the normalized_username is set,\n                    # so that after upgrade, there is always a password set\n                    # the non-normalized username passwords will never be used\n                    # after jupyterhub-firstuseauthenticator 1.0\n                    self.log.warning(\n",
                      "markdown": "`                    # collision! Multiple passwords for the same Hub user with different normalization\n                    # do not clear these automatically because the 'right' answer is ambiguous,\n                    # but make sure the normalized_username is set,\n                    # so that after upgrade, there is always a password set\n                    # the non-normalized username passwords will never be used\n                    # after jupyterhub-firstuseauthenticator 1.0\n                    self.log.warning(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 42,
                  "endLine": 242,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                    db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    del db[username]\n                else:\n                    # collision! Multiple passwords for the same Hub user with different normalization\n                    # do not clear these automatically because the 'right' answer is ambiguous,\n                    # but make sure the normalized_username is set,\n                    # so that after upgrade, there is always a password set\n",
                    "rendered": {
                      "text": "                    db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    del db[username]\n                else:\n                    # collision! Multiple passwords for the same Hub user with different normalization\n                    # do not clear these automatically because the 'right' answer is ambiguous,\n                    # but make sure the normalized_username is set,\n                    # so that after upgrade, there is always a password set\n",
                      "markdown": "`                    db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    del db[username]\n                else:\n                    # collision! Multiple passwords for the same Hub user with different normalization\n                    # do not clear these automatically because the 'right' answer is ambiguous,\n                    # but make sure the normalized_username is set,\n                    # so that after upgrade, there is always a password set\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 61,
                  "endLine": 239,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                    self.log.warning(\n                        f\"Normalizing username in password db {username}->{normalized_username}\"\n                    )\n                    db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    del db[username]\n                else:\n                    # collision! Multiple passwords for the same Hub user with different normalization\n",
                    "rendered": {
                      "text": "                    self.log.warning(\n                        f\"Normalizing username in password db {username}->{normalized_username}\"\n                    )\n                    db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    del db[username]\n                else:\n                    # collision! Multiple passwords for the same Hub user with different normalization\n",
                      "markdown": "`                    self.log.warning(\n                        f\"Normalizing username in password db {username}->{normalized_username}\"\n                    )\n                    db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    del db[username]\n                else:\n                    # collision! Multiple passwords for the same Hub user with different normalization\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 50,
                  "endLine": 237,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                    # 1.b only one form, not normalized. Unambiguous to fix.\n                    # move password from non-normalized to normalized.\n                    self.log.warning(\n                        f\"Normalizing username in password db {username}->{normalized_username}\"\n                    )\n                    db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    del db[username]\n",
                    "rendered": {
                      "text": "                    # 1.b only one form, not normalized. Unambiguous to fix.\n                    # move password from non-normalized to normalized.\n                    self.log.warning(\n                        f\"Normalizing username in password db {username}->{normalized_username}\"\n                    )\n                    db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    del db[username]\n",
                      "markdown": "`                    # 1.b only one form, not normalized. Unambiguous to fix.\n                    # move password from non-normalized to normalized.\n                    self.log.warning(\n                        f\"Normalizing username in password db {username}->{normalized_username}\"\n                    )\n                    db[normalized_username.encode(\"utf8\")] = passwords[username]\n                    del db[username]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 27,
                  "endLine": 235,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                    if username == normalized_username:\n                        continue\n                    # 1.b only one form, not normalized. Unambiguous to fix.\n                    # move password from non-normalized to normalized.\n                    self.log.warning(\n                        f\"Normalizing username in password db {username}->{normalized_username}\"\n                    )\n",
                    "rendered": {
                      "text": "                    if username == normalized_username:\n                        continue\n                    # 1.b only one form, not normalized. Unambiguous to fix.\n                    # move password from non-normalized to normalized.\n                    self.log.warning(\n                        f\"Normalizing username in password db {username}->{normalized_username}\"\n                    )\n",
                      "markdown": "`                    if username == normalized_username:\n                        continue\n                    # 1.b only one form, not normalized. Unambiguous to fix.\n                    # move password from non-normalized to normalized.\n                    self.log.warning(\n                        f\"Normalizing username in password db {username}->{normalized_username}\"\n                    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 28,
                  "endLine": 220,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            # values are lists of all names present in the db\n            # which normalize to the same user\n            normalized_usernames = {}\n            for username in passwords:\n                normalized_username = self.normalize_username(username)\n                normalized_usernames.setdefault(normalized_username, []).append(\n                    username\n",
                    "rendered": {
                      "text": "            # values are lists of all names present in the db\n            # which normalize to the same user\n            normalized_usernames = {}\n            for username in passwords:\n                normalized_username = self.normalize_username(username)\n                normalized_usernames.setdefault(normalized_username, []).append(\n                    username\n",
                      "markdown": "`            # values are lists of all names present in the db\n            # which normalize to the same user\n            normalized_usernames = {}\n            for username in passwords:\n                normalized_username = self.normalize_username(username)\n                normalized_usernames.setdefault(normalized_username, []).append(\n                    username\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 16,
                  "endLine": 212,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            # load the username:hashed_password dict\n            passwords = {}\n            for key in db.keys():\n                passwords[key.decode(\"utf8\")] = db[key]\n\n            # normalization map\n            # compute the full map before checking in case two non-normalized forms are used\n",
                    "rendered": {
                      "text": "            # load the username:hashed_password dict\n            passwords = {}\n            for key in db.keys():\n                passwords[key.decode(\"utf8\")] = db[key]\n\n            # normalization map\n            # compute the full map before checking in case two non-normalized forms are used\n",
                      "markdown": "`            # load the username:hashed_password dict\n            passwords = {}\n            for key in db.keys():\n                passwords[key.decode(\"utf8\")] = db[key]\n\n            # normalization map\n            # compute the full map before checking in case two non-normalized forms are used\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 12,
                  "endLine": 210,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n        with dbm.open(self.dbm_path, \"w\") as db:\n            # load the username:hashed_password dict\n            passwords = {}\n            for key in db.keys():\n                passwords[key.decode(\"utf8\")] = db[key]\n\n",
                    "rendered": {
                      "text": "\n        with dbm.open(self.dbm_path, \"w\") as db:\n            # load the username:hashed_password dict\n            passwords = {}\n            for key in db.keys():\n                passwords[key.decode(\"utf8\")] = db[key]\n\n",
                      "markdown": "`\n        with dbm.open(self.dbm_path, \"w\") as db:\n            # load the username:hashed_password dict\n            passwords = {}\n            for key in db.keys():\n                passwords[key.decode(\"utf8\")] = db[key]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 39,
                  "endLine": 209,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        collision_found = False\n\n        with dbm.open(self.dbm_path, \"w\") as db:\n            # load the username:hashed_password dict\n            passwords = {}\n            for key in db.keys():\n                passwords[key.decode(\"utf8\")] = db[key]\n",
                    "rendered": {
                      "text": "        collision_found = False\n\n        with dbm.open(self.dbm_path, \"w\") as db:\n            # load the username:hashed_password dict\n            passwords = {}\n            for key in db.keys():\n                passwords[key.decode(\"utf8\")] = db[key]\n",
                      "markdown": "`        collision_found = False\n\n        with dbm.open(self.dbm_path, \"w\") as db:\n            # load the username:hashed_password dict\n            passwords = {}\n            for key in db.keys():\n                passwords[key.decode(\"utf8\")] = db[key]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 43,
                  "endLine": 192,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            self.log.warning(collision_warning)\n            return\n\n        # create a temporary backup of the passwords db\n        # to be retained only if collisions are detected\n        # or deleted if no collisions are detected\n        backup_files = []\n",
                    "rendered": {
                      "text": "            self.log.warning(collision_warning)\n            return\n\n        # create a temporary backup of the passwords db\n        # to be retained only if collisions are detected\n        # or deleted if no collisions are detected\n        backup_files = []\n",
                      "markdown": "`            self.log.warning(collision_warning)\n            return\n\n        # create a temporary backup of the passwords db\n        # to be retained only if collisions are detected\n        # or deleted if no collisions are detected\n        backup_files = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 24,
                  "endLine": 178,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        )\n\n        collision_warning = (\n            f\"Duplicate password entries have been found, and stored in {backup_path!r}.\"\n            f\" Duplicate entries have been removed from {self.dbm_path!r}.\"\n            f\" If you are happy with the solution, you can delete the backup file(s): {' '.join(backup_files)}.\"\n            \" Or you can inspect the backup database with:\\n\"\n",
                    "rendered": {
                      "text": "        )\n\n        collision_warning = (\n            f\"Duplicate password entries have been found, and stored in {backup_path!r}.\"\n            f\" Duplicate entries have been removed from {self.dbm_path!r}.\"\n            f\" If you are happy with the solution, you can delete the backup file(s): {' '.join(backup_files)}.\"\n            \" Or you can inspect the backup database with:\\n\"\n",
                      "markdown": "`        )\n\n        collision_warning = (\n            f\"Duplicate password entries have been found, and stored in {backup_path!r}.\"\n            f\" Duplicate entries have been removed from {self.dbm_path!r}.\"\n            f\" If you are happy with the solution, you can delete the backup file(s): {' '.join(backup_files)}.\"\n            \" Or you can inspect the backup database with:\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n\n        Mainly checks for the presence of passwords for non-normalized usernames\n\n        If a username is present only in one non-normalized form,\n        it will be renamed to the normalized form.\n",
                    "rendered": {
                      "text": "    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n\n        Mainly checks for the presence of passwords for non-normalized usernames\n\n        If a username is present only in one non-normalized form,\n        it will be renamed to the normalized form.\n",
                      "markdown": "`    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n\n        Mainly checks for the presence of passwords for non-normalized usernames\n\n        If a username is present only in one non-normalized form,\n        it will be renamed to the normalized form.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 36,
                  "endLine": 146,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            self._check_passwords()\n\n    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n\n        Mainly checks for the presence of passwords for non-normalized usernames\n\n",
                    "rendered": {
                      "text": "            self._check_passwords()\n\n    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n\n        Mainly checks for the presence of passwords for non-normalized usernames\n\n",
                      "markdown": "`            self._check_passwords()\n\n    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n\n        Mainly checks for the presence of passwords for non-normalized usernames\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 15,
                  "endLine": 145,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        if self.check_passwords_on_startup:\n            self._check_passwords()\n\n    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n\n        Mainly checks for the presence of passwords for non-normalized usernames\n",
                    "rendered": {
                      "text": "        if self.check_passwords_on_startup:\n            self._check_passwords()\n\n    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n\n        Mainly checks for the presence of passwords for non-normalized usernames\n",
                      "markdown": "`        if self.check_passwords_on_startup:\n            self._check_passwords()\n\n    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n\n        Mainly checks for the presence of passwords for non-normalized usernames\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 24,
                  "endLine": 143,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        if self.check_passwords_on_startup:\n            self._check_passwords()\n\n    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n",
                    "rendered": {
                      "text": "    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        if self.check_passwords_on_startup:\n            self._check_passwords()\n\n    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n",
                      "markdown": "`    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        if self.check_passwords_on_startup:\n            self._check_passwords()\n\n    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 22,
                  "endLine": 142,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        if self.check_passwords_on_startup:\n            self._check_passwords()\n\n    def _check_passwords(self):\n",
                    "rendered": {
                      "text": "\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        if self.check_passwords_on_startup:\n            self._check_passwords()\n\n    def _check_passwords(self):\n",
                      "markdown": "`\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        if self.check_passwords_on_startup:\n            self._check_passwords()\n\n    def _check_passwords(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 31,
                  "endLine": 127,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        help=\"\"\"\n        Check for non-normalized-username passwords on startup.\n\n        Prior to 1.0, multiple passwords could be set for the same username,\n        without normalization.\n\n        When True, duplicate usernames will be detected and removed,\n",
                    "rendered": {
                      "text": "        help=\"\"\"\n        Check for non-normalized-username passwords on startup.\n\n        Prior to 1.0, multiple passwords could be set for the same username,\n        without normalization.\n\n        When True, duplicate usernames will be detected and removed,\n",
                      "markdown": "`        help=\"\"\"\n        Check for non-normalized-username passwords on startup.\n\n        Prior to 1.0, multiple passwords could be set for the same username,\n        without normalization.\n\n        When True, duplicate usernames will be detected and removed,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 42,
                  "endLine": 125,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        True,\n        config=True,\n        help=\"\"\"\n        Check for non-normalized-username passwords on startup.\n\n        Prior to 1.0, multiple passwords could be set for the same username,\n        without normalization.\n",
                    "rendered": {
                      "text": "        True,\n        config=True,\n        help=\"\"\"\n        Check for non-normalized-username passwords on startup.\n\n        Prior to 1.0, multiple passwords could be set for the same username,\n        without normalization.\n",
                      "markdown": "`        True,\n        config=True,\n        help=\"\"\"\n        Check for non-normalized-username passwords on startup.\n\n        Prior to 1.0, multiple passwords could be set for the same username,\n        without normalization.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 10,
                  "endLine": 121,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        \"\"\"\n    )\n\n    check_passwords_on_startup = Bool(\n        True,\n        config=True,\n        help=\"\"\"\n",
                    "rendered": {
                      "text": "        \"\"\"\n    )\n\n    check_passwords_on_startup = Bool(\n        True,\n        config=True,\n        help=\"\"\"\n",
                      "markdown": "`        \"\"\"\n    )\n\n    check_passwords_on_startup = Bool(\n        True,\n        config=True,\n        help=\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 61,
                  "endLine": 117,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        config=True,\n        help=\"\"\"\n        The minimum length of the password when user is created.\n        When set to 0, users will be allowed to set 0 length passwords.\n        \"\"\"\n    )\n\n",
                    "rendered": {
                      "text": "        config=True,\n        help=\"\"\"\n        The minimum length of the password when user is created.\n        When set to 0, users will be allowed to set 0 length passwords.\n        \"\"\"\n    )\n\n",
                      "markdown": "`        config=True,\n        help=\"\"\"\n        The minimum length of the password when user is created.\n        When set to 0, users will be allowed to set 0 length passwords.\n        \"\"\"\n    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 34,
                  "endLine": 116,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        7,\n        config=True,\n        help=\"\"\"\n        The minimum length of the password when user is created.\n        When set to 0, users will be allowed to set 0 length passwords.\n        \"\"\"\n    )\n",
                    "rendered": {
                      "text": "        7,\n        config=True,\n        help=\"\"\"\n        The minimum length of the password when user is created.\n        When set to 0, users will be allowed to set 0 length passwords.\n        \"\"\"\n    )\n",
                      "markdown": "`        7,\n        config=True,\n        help=\"\"\"\n        The minimum length of the password when user is created.\n        When set to 0, users will be allowed to set 0 length passwords.\n        \"\"\"\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 8,
                  "endLine": 112,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        \"\"\"\n    )\n\n    min_password_length = Integer(\n        7,\n        config=True,\n        help=\"\"\"\n",
                    "rendered": {
                      "text": "        \"\"\"\n    )\n\n    min_password_length = Integer(\n        7,\n        config=True,\n        help=\"\"\"\n",
                      "markdown": "`        \"\"\"\n    )\n\n    min_password_length = Integer(\n        7,\n        config=True,\n        help=\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 9,
                  "endLine": 93,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    JupyterHub authenticator that lets users set password on first use.\n    \"\"\"\n    dbm_path = Unicode(\n        'passwords.dbm',\n        config=True,\n        help=\"\"\"\n        Path to store the db file with username / pwd hash in\n",
                    "rendered": {
                      "text": "    JupyterHub authenticator that lets users set password on first use.\n    \"\"\"\n    dbm_path = Unicode(\n        'passwords.dbm',\n        config=True,\n        help=\"\"\"\n        Path to store the db file with username / pwd hash in\n",
                      "markdown": "`    JupyterHub authenticator that lets users set password on first use.\n    \"\"\"\n    dbm_path = Unicode(\n        'passwords.dbm',\n        config=True,\n        help=\"\"\"\n        Path to store the db file with username / pwd hash in\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 49,
                  "endLine": 90,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\nclass FirstUseAuthenticator(Authenticator):\n    \"\"\"\n    JupyterHub authenticator that lets users set password on first use.\n    \"\"\"\n    dbm_path = Unicode(\n        'passwords.dbm',\n",
                    "rendered": {
                      "text": "\nclass FirstUseAuthenticator(Authenticator):\n    \"\"\"\n    JupyterHub authenticator that lets users set password on first use.\n    \"\"\"\n    dbm_path = Unicode(\n        'passwords.dbm',\n",
                      "markdown": "`\nclass FirstUseAuthenticator(Authenticator):\n    \"\"\"\n    JupyterHub authenticator that lets users set password on first use.\n    \"\"\"\n    dbm_path = Unicode(\n        'passwords.dbm',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 63,
                  "endLine": 72,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    async def post(self):\n        user = self.current_user\n        new_password = self.get_body_argument('password', strip=False)\n        msg = self.authenticator.reset_password(user.name, new_password)\n\n        if \"success\" in msg:\n            alert = \"success\"\n",
                    "rendered": {
                      "text": "    async def post(self):\n        user = self.current_user\n        new_password = self.get_body_argument('password', strip=False)\n        msg = self.authenticator.reset_password(user.name, new_password)\n\n        if \"success\" in msg:\n            alert = \"success\"\n",
                      "markdown": "`    async def post(self):\n        user = self.current_user\n        new_password = self.get_body_argument('password', strip=False)\n        msg = self.authenticator.reset_password(user.name, new_password)\n\n        if \"success\" in msg:\n            alert = \"success\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 39,
                  "endLine": 72,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    async def post(self):\n        user = self.current_user\n        new_password = self.get_body_argument('password', strip=False)\n        msg = self.authenticator.reset_password(user.name, new_password)\n\n        if \"success\" in msg:\n            alert = \"success\"\n",
                    "rendered": {
                      "text": "    async def post(self):\n        user = self.current_user\n        new_password = self.get_body_argument('password', strip=False)\n        msg = self.authenticator.reset_password(user.name, new_password)\n\n        if \"success\" in msg:\n            alert = \"success\"\n",
                      "markdown": "`    async def post(self):\n        user = self.current_user\n        new_password = self.get_body_argument('password', strip=False)\n        msg = self.authenticator.reset_password(user.name, new_password)\n\n        if \"success\" in msg:\n            alert = \"success\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 47,
                  "endLine": 71,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    @web.authenticated\n    async def post(self):\n        user = self.current_user\n        new_password = self.get_body_argument('password', strip=False)\n        msg = self.authenticator.reset_password(user.name, new_password)\n\n        if \"success\" in msg:\n",
                    "rendered": {
                      "text": "    @web.authenticated\n    async def post(self):\n        user = self.current_user\n        new_password = self.get_body_argument('password', strip=False)\n        msg = self.authenticator.reset_password(user.name, new_password)\n\n        if \"success\" in msg:\n",
                      "markdown": "`    @web.authenticated\n    async def post(self):\n        user = self.current_user\n        new_password = self.get_body_argument('password', strip=False)\n        msg = self.authenticator.reset_password(user.name, new_password)\n\n        if \"success\" in msg:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 12,
                  "endLine": 71,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    @web.authenticated\n    async def post(self):\n        user = self.current_user\n        new_password = self.get_body_argument('password', strip=False)\n        msg = self.authenticator.reset_password(user.name, new_password)\n\n        if \"success\" in msg:\n",
                    "rendered": {
                      "text": "    @web.authenticated\n    async def post(self):\n        user = self.current_user\n        new_password = self.get_body_argument('password', strip=False)\n        msg = self.authenticator.reset_password(user.name, new_password)\n\n        if \"success\" in msg:\n",
                      "markdown": "`    @web.authenticated\n    async def post(self):\n        user = self.current_user\n        new_password = self.get_body_argument('password', strip=False)\n        msg = self.authenticator.reset_password(user.name, new_password)\n\n        if \"success\" in msg:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 24,
                  "endLine": 44,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n\nclass ResetPasswordHandler(BaseHandler):\n    \"\"\"Render the reset password page.\"\"\"\n    def __init__(self, *args, **kwargs):\n        self._loaded = False\n        super().__init__(*args, **kwargs)\n",
                    "rendered": {
                      "text": "\n\nclass ResetPasswordHandler(BaseHandler):\n    \"\"\"Render the reset password page.\"\"\"\n    def __init__(self, *args, **kwargs):\n        self._loaded = False\n        super().__init__(*args, **kwargs)\n",
                      "markdown": "`\n\nclass ResetPasswordHandler(BaseHandler):\n    \"\"\"Render the reset password page.\"\"\"\n    def __init__(self, *args, **kwargs):\n        self._loaded = False\n        super().__init__(*args, **kwargs)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 11,
                  "endLine": 43,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        return super()._render(login_error, username)\n\n\nclass ResetPasswordHandler(BaseHandler):\n    \"\"\"Render the reset password page.\"\"\"\n    def __init__(self, *args, **kwargs):\n        self._loaded = False\n",
                    "rendered": {
                      "text": "        return super()._render(login_error, username)\n\n\nclass ResetPasswordHandler(BaseHandler):\n    \"\"\"Render the reset password page.\"\"\"\n    def __init__(self, *args, **kwargs):\n        self._loaded = False\n",
                      "markdown": "`        return super()._render(login_error, username)\n\n\nclass ResetPasswordHandler(BaseHandler):\n    \"\"\"Render the reset password page.\"\"\"\n    def __init__(self, *args, **kwargs):\n        self._loaded = False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5,
                  "endColumn": 8,
                  "snippet": {
                    "text": "JupyterHub Authenticator that lets users set password on first use.\n\nWhen users first log in, the password they use becomes their\npassword for that account. It is hashed with bcrypt & stored\nlocally in a dbm file, and checked next time they log in.\n\"\"\"\nimport os\n",
                    "rendered": {
                      "text": "JupyterHub Authenticator that lets users set password on first use.\n\nWhen users first log in, the password they use becomes their\npassword for that account. It is hashed with bcrypt & stored\nlocally in a dbm file, and checked next time they log in.\n\"\"\"\nimport os\n",
                      "markdown": "`JupyterHub Authenticator that lets users set password on first use.\n\nWhen users first log in, the password they use becomes their\npassword for that account. It is hashed with bcrypt & stored\nlocally in a dbm file, and checked next time they log in.\n\"\"\"\nimport os\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 29,
                  "endLine": 4,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\"\"\"\nJupyterHub Authenticator that lets users set password on first use.\n\nWhen users first log in, the password they use becomes their\npassword for that account. It is hashed with bcrypt & stored\nlocally in a dbm file, and checked next time they log in.\n\"\"\"\n",
                    "rendered": {
                      "text": "\"\"\"\nJupyterHub Authenticator that lets users set password on first use.\n\nWhen users first log in, the password they use becomes their\npassword for that account. It is hashed with bcrypt & stored\nlocally in a dbm file, and checked next time they log in.\n\"\"\"\n",
                      "markdown": "`\"\"\"\nJupyterHub Authenticator that lets users set password on first use.\n\nWhen users first log in, the password they use becomes their\npassword for that account. It is hashed with bcrypt & stored\nlocally in a dbm file, and checked next time they log in.\n\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 45,
                  "endLine": 2,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\"\"\"\nJupyterHub Authenticator that lets users set password on first use.\n\nWhen users first log in, the password they use becomes their\npassword for that account. It is hashed with bcrypt & stored\n",
                    "rendered": {
                      "text": "\"\"\"\nJupyterHub Authenticator that lets users set password on first use.\n\nWhen users first log in, the password they use becomes their\npassword for that account. It is hashed with bcrypt & stored\n",
                      "markdown": "`\"\"\"\nJupyterHub Authenticator that lets users set password on first use.\n\nWhen users first log in, the password they use becomes their\npassword for that account. It is hashed with bcrypt & stored\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 61,
                  "endLine": 353,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n            )\n            self.log.error(login_err)\n",
                    "rendered": {
                      "text": "        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n            )\n            self.log.error(login_err)\n",
                      "markdown": "`        \"\"\"\n        if not self._validate_password(new_password):\n            login_err = (\n                'Password too short! Please choose a password at least %d characters long.'\n                % self.min_password_length\n            )\n            self.log.error(login_err)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 69,
                  "endLine": 325,
                  "endColumn": 73,
                  "snippet": {
                    "text": "                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n                    )\n                    self.log.error(handler.custom_login_error)\n",
                    "rendered": {
                      "text": "                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n                    )\n                    self.log.error(handler.custom_login_error)\n",
                      "markdown": "`                # for new users: ensure password validity and store password hash\n                if not self._validate_password(password):\n                    handler.custom_login_error = (\n                        'Password too short! Please choose a password at least %d characters long.'\n                        % self.min_password_length\n                    )\n                    self.log.error(handler.custom_login_error)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 19,
                  "endLine": 154,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        it will be renamed to the normalized form.\n\n        If multiple forms of the same normalized username are present,\n        ensure that at least the normalized form is also present.\n        It will continue to produce warnings until manual intervention removes the non-normalized entries.\n\n        Non-normalized entries will never be used during login.\n",
                    "rendered": {
                      "text": "        it will be renamed to the normalized form.\n\n        If multiple forms of the same normalized username are present,\n        ensure that at least the normalized form is also present.\n        It will continue to produce warnings until manual intervention removes the non-normalized entries.\n\n        Non-normalized entries will never be used during login.\n",
                      "markdown": "`        it will be renamed to the normalized form.\n\n        If multiple forms of the same normalized username are present,\n        ensure that at least the normalized form is also present.\n        It will continue to produce warnings until manual intervention removes the non-normalized entries.\n\n        Non-normalized entries will never be used during login.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 53,
                  "endLine": 146,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            self._check_passwords()\n\n    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n\n        Mainly checks for the presence of passwords for non-normalized usernames\n\n",
                    "rendered": {
                      "text": "            self._check_passwords()\n\n    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n\n        Mainly checks for the presence of passwords for non-normalized usernames\n\n",
                      "markdown": "`            self._check_passwords()\n\n    def _check_passwords(self):\n        \"\"\"Validation checks on the password database at startup\n\n        Mainly checks for the presence of passwords for non-normalized usernames\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 47,
                  "endLine": 271,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        if collision_found:\n            self.log.warning(collision_warning)\n        else:\n            # remove backup files, if we didn't find anything to backup\n            self.log.debug(f\"No collisions found, removing backup files {backup_files}\")\n            for path in backup_files:\n                try:\n",
                    "rendered": {
                      "text": "        if collision_found:\n            self.log.warning(collision_warning)\n        else:\n            # remove backup files, if we didn't find anything to backup\n            self.log.debug(f\"No collisions found, removing backup files {backup_files}\")\n            for path in backup_files:\n                try:\n",
                      "markdown": "`        if collision_found:\n            self.log.warning(collision_warning)\n        else:\n            # remove backup files, if we didn't find anything to backup\n            self.log.debug(f\"No collisions found, removing backup files {backup_files}\")\n            for path in backup_files:\n                try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 7,
                  "endLine": 56,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        self.log.debug('Adding %s to template path', TEMPLATE_DIR)\n        loader = FileSystemLoader([TEMPLATE_DIR])\n\n        env = self.settings['jinja2_env']\n        previous_loader = env.loader\n        env.loader = ChoiceLoader([previous_loader, loader])\n\n",
                    "rendered": {
                      "text": "        self.log.debug('Adding %s to template path', TEMPLATE_DIR)\n        loader = FileSystemLoader([TEMPLATE_DIR])\n\n        env = self.settings['jinja2_env']\n        previous_loader = env.loader\n        env.loader = ChoiceLoader([previous_loader, loader])\n\n",
                      "markdown": "`        self.log.debug('Adding %s to template path', TEMPLATE_DIR)\n        loader = FileSystemLoader([TEMPLATE_DIR])\n\n        env = self.settings['jinja2_env']\n        previous_loader = env.loader\n        env.loader = ChoiceLoader([previous_loader, loader])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/firstuseauthenticator.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 39,
                  "endLine": 6,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\nWhen users first log in, the password they use becomes their\npassword for that account. It is hashed with bcrypt & stored\nlocally in a dbm file, and checked next time they log in.\n\"\"\"\nimport os\nimport shutil\n",
                    "rendered": {
                      "text": "\nWhen users first log in, the password they use becomes their\npassword for that account. It is hashed with bcrypt & stored\nlocally in a dbm file, and checked next time they log in.\n\"\"\"\nimport os\nimport shutil\n",
                      "markdown": "`\nWhen users first log in, the password they use becomes their\npassword for that account. It is hashed with bcrypt & stored\nlocally in a dbm file, and checked next time they log in.\n\"\"\"\nimport os\nimport shutil\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/__init__.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 48,
                  "endLine": 2,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\"\"\"\nJupyterHub Authenticator to let users set their password on first use.\n\nAfter installation, you can enable this with:\n\n",
                    "rendered": {
                      "text": "\"\"\"\nJupyterHub Authenticator to let users set their password on first use.\n\nAfter installation, you can enable this with:\n\n",
                      "markdown": "`\"\"\"\nJupyterHub Authenticator to let users set their password on first use.\n\nAfter installation, you can enable this with:\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 65,
                  "endLine": 73,
                  "endColumn": 73,
                  "snippet": {
                    "text": "### How can I change my password?\n\nTo change your password, you should login in your jupyterhub account, \ngo to `<your_server_ip>/hub/auth/change-password` and change the password. \n\n### I'm getting an error when creating my username\n\n",
                    "rendered": {
                      "text": "### How can I change my password?\n\nTo change your password, you should login in your jupyterhub account, \ngo to `<your_server_ip>/hub/auth/change-password` and change the password. \n\n### I'm getting an error when creating my username\n\n",
                      "markdown": "`### How can I change my password?\n\nTo change your password, you should login in your jupyterhub account, \ngo to `<your_server_ip>/hub/auth/change-password` and change the password. \n\n### I'm getting an error when creating my username\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 40,
                  "endLine": 73,
                  "endColumn": 48,
                  "snippet": {
                    "text": "### How can I change my password?\n\nTo change your password, you should login in your jupyterhub account, \ngo to `<your_server_ip>/hub/auth/change-password` and change the password. \n\n### I'm getting an error when creating my username\n\n",
                    "rendered": {
                      "text": "### How can I change my password?\n\nTo change your password, you should login in your jupyterhub account, \ngo to `<your_server_ip>/hub/auth/change-password` and change the password. \n\n### I'm getting an error when creating my username\n\n",
                      "markdown": "`### How can I change my password?\n\nTo change your password, you should login in your jupyterhub account, \ngo to `<your_server_ip>/hub/auth/change-password` and change the password. \n\n### I'm getting an error when creating my username\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 15,
                  "endLine": 72,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n### How can I change my password?\n\nTo change your password, you should login in your jupyterhub account, \ngo to `<your_server_ip>/hub/auth/change-password` and change the password. \n\n### I'm getting an error when creating my username\n",
                    "rendered": {
                      "text": "\n### How can I change my password?\n\nTo change your password, you should login in your jupyterhub account, \ngo to `<your_server_ip>/hub/auth/change-password` and change the password. \n\n### I'm getting an error when creating my username\n",
                      "markdown": "`\n### How can I change my password?\n\nTo change your password, you should login in your jupyterhub account, \ngo to `<your_server_ip>/hub/auth/change-password` and change the password. \n\n### I'm getting an error when creating my username\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 24,
                  "endLine": 70,
                  "endColumn": 32,
                  "snippet": {
                    "text": "login time, and you do not want a brute-force/dictionary attack to manage to\nlogin by attacking via ssh or another mean.\n\n### How can I change my password?\n\nTo change your password, you should login in your jupyterhub account, \ngo to `<your_server_ip>/hub/auth/change-password` and change the password. \n",
                    "rendered": {
                      "text": "login time, and you do not want a brute-force/dictionary attack to manage to\nlogin by attacking via ssh or another mean.\n\n### How can I change my password?\n\nTo change your password, you should login in your jupyterhub account, \ngo to `<your_server_ip>/hub/auth/change-password` and change the password. \n",
                      "markdown": "`login time, and you do not want a brute-force/dictionary attack to manage to\nlogin by attacking via ssh or another mean.\n\n### How can I change my password?\n\nTo change your password, you should login in your jupyterhub account, \ngo to `<your_server_ip>/hub/auth/change-password` and change the password. \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 59,
                  "endLine": 66,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n### Why have a password DB and not use PAM ?\n\nFor security Reasons. Users are likely to set an, insecure password at\nlogin time, and you do not want a brute-force/dictionary attack to manage to\nlogin by attacking via ssh or another mean.\n\n",
                    "rendered": {
                      "text": "\n### Why have a password DB and not use PAM ?\n\nFor security Reasons. Users are likely to set an, insecure password at\nlogin time, and you do not want a brute-force/dictionary attack to manage to\nlogin by attacking via ssh or another mean.\n\n",
                      "markdown": "`\n### Why have a password DB and not use PAM ?\n\nFor security Reasons. Users are likely to set an, insecure password at\nlogin time, and you do not want a brute-force/dictionary attack to manage to\nlogin by attacking via ssh or another mean.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 15,
                  "endLine": 64,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n## FAQ\n\n### Why have a password DB and not use PAM ?\n\nFor security Reasons. Users are likely to set an, insecure password at\nlogin time, and you do not want a brute-force/dictionary attack to manage to\n",
                    "rendered": {
                      "text": "\n## FAQ\n\n### Why have a password DB and not use PAM ?\n\nFor security Reasons. Users are likely to set an, insecure password at\nlogin time, and you do not want a brute-force/dictionary attack to manage to\n",
                      "markdown": "`\n## FAQ\n\n### Why have a password DB and not use PAM ?\n\nFor security Reasons. Users are likely to set an, insecure password at\nlogin time, and you do not want a brute-force/dictionary attack to manage to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 58,
                  "endLine": 50,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\nPath to the [dbm](https://docs.python.org/3.5/library/dbm.html) file, or a UNIX database file such as `passwords.dbm`, used to store usernames and passwords. The dbm file should be put where regular users do not have read/write access to it.\n\nThis authenticator's default setting for the path to the `passwords.dbm` is the current directory from which JupyterHub is spawned.\n\n### FirstUseAuthenticator.create_users\n\n",
                    "rendered": {
                      "text": "\nPath to the [dbm](https://docs.python.org/3.5/library/dbm.html) file, or a UNIX database file such as `passwords.dbm`, used to store usernames and passwords. The dbm file should be put where regular users do not have read/write access to it.\n\nThis authenticator's default setting for the path to the `passwords.dbm` is the current directory from which JupyterHub is spawned.\n\n### FirstUseAuthenticator.create_users\n\n",
                      "markdown": "`\nPath to the [dbm](https://docs.python.org/3.5/library/dbm.html) file, or a UNIX database file such as `passwords.dbm`, used to store usernames and passwords. The dbm file should be put where regular users do not have read/write access to it.\n\nThis authenticator's default setting for the path to the `passwords.dbm` is the current directory from which JupyterHub is spawned.\n\n### FirstUseAuthenticator.create_users\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 147,
                  "endLine": 48,
                  "endColumn": 155,
                  "snippet": {
                    "text": "\n### FirstUseAuthenticator.dbm_path\n\nPath to the [dbm](https://docs.python.org/3.5/library/dbm.html) file, or a UNIX database file such as `passwords.dbm`, used to store usernames and passwords. The dbm file should be put where regular users do not have read/write access to it.\n\nThis authenticator's default setting for the path to the `passwords.dbm` is the current directory from which JupyterHub is spawned.\n\n",
                    "rendered": {
                      "text": "\n### FirstUseAuthenticator.dbm_path\n\nPath to the [dbm](https://docs.python.org/3.5/library/dbm.html) file, or a UNIX database file such as `passwords.dbm`, used to store usernames and passwords. The dbm file should be put where regular users do not have read/write access to it.\n\nThis authenticator's default setting for the path to the `passwords.dbm` is the current directory from which JupyterHub is spawned.\n\n",
                      "markdown": "`\n### FirstUseAuthenticator.dbm_path\n\nPath to the [dbm](https://docs.python.org/3.5/library/dbm.html) file, or a UNIX database file such as `passwords.dbm`, used to store usernames and passwords. The dbm file should be put where regular users do not have read/write access to it.\n\nThis authenticator's default setting for the path to the `passwords.dbm` is the current directory from which JupyterHub is spawned.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 103,
                  "endLine": 48,
                  "endColumn": 111,
                  "snippet": {
                    "text": "\n### FirstUseAuthenticator.dbm_path\n\nPath to the [dbm](https://docs.python.org/3.5/library/dbm.html) file, or a UNIX database file such as `passwords.dbm`, used to store usernames and passwords. The dbm file should be put where regular users do not have read/write access to it.\n\nThis authenticator's default setting for the path to the `passwords.dbm` is the current directory from which JupyterHub is spawned.\n\n",
                    "rendered": {
                      "text": "\n### FirstUseAuthenticator.dbm_path\n\nPath to the [dbm](https://docs.python.org/3.5/library/dbm.html) file, or a UNIX database file such as `passwords.dbm`, used to store usernames and passwords. The dbm file should be put where regular users do not have read/write access to it.\n\nThis authenticator's default setting for the path to the `passwords.dbm` is the current directory from which JupyterHub is spawned.\n\n",
                      "markdown": "`\n### FirstUseAuthenticator.dbm_path\n\nPath to the [dbm](https://docs.python.org/3.5/library/dbm.html) file, or a UNIX database file such as `passwords.dbm`, used to store usernames and passwords. The dbm file should be put where regular users do not have read/write access to it.\n\nThis authenticator's default setting for the path to the `passwords.dbm` is the current directory from which JupyterHub is spawned.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 213,
                  "endLine": 28,
                  "endColumn": 221,
                  "snippet": {
                    "text": "**Are you running a workshop from a single physical location, such as a university seminar or a user group?**\n\nJupyterHub First Use Authenticator can simplify the user set up for you. It's very useful when using transient\nJupyterHub instances in a single physical location. It allows multiple users to log in, but you do not have install a pre-existing authentication setup. With this authenticator, users can just pick a username and password and get to work!\n\n## Installation\n\n",
                    "rendered": {
                      "text": "**Are you running a workshop from a single physical location, such as a university seminar or a user group?**\n\nJupyterHub First Use Authenticator can simplify the user set up for you. It's very useful when using transient\nJupyterHub instances in a single physical location. It allows multiple users to log in, but you do not have install a pre-existing authentication setup. With this authenticator, users can just pick a username and password and get to work!\n\n## Installation\n\n",
                      "markdown": "`**Are you running a workshop from a single physical location, such as a university seminar or a user group?**\n\nJupyterHub First Use Authenticator can simplify the user set up for you. It's very useful when using transient\nJupyterHub instances in a single physical location. It allows multiple users to log in, but you do not have install a pre-existing authentication setup. With this authenticator, users can just pick a username and password and get to work!\n\n## Installation\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 95,
                  "endLine": 23,
                  "endColumn": 103,
                  "snippet": {
                    "text": "\n# JupyterHub First Use Authenticator\n\nA [JupyterHub](https://jupyterhub.readthedocs.io) authenticator that helps new users set their password on their first login to JupyterHub.\n\n**Are you running a workshop from a single physical location, such as a university seminar or a user group?**\n\n",
                    "rendered": {
                      "text": "\n# JupyterHub First Use Authenticator\n\nA [JupyterHub](https://jupyterhub.readthedocs.io) authenticator that helps new users set their password on their first login to JupyterHub.\n\n**Are you running a workshop from a single physical location, such as a university seminar or a user group?**\n\n",
                      "markdown": "`\n# JupyterHub First Use Authenticator\n\nA [JupyterHub](https://jupyterhub.readthedocs.io) authenticator that helps new users set their password on their first login to JupyterHub.\n\n**Are you running a workshop from a single physical location, such as a university seminar or a user group?**\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 54,
                  "endLine": 4,
                  "endColumn": 62,
                  "snippet": {
                    "text": "Metadata-Version: 2.1\nName: jupyterhub-firstuseauthenticator\nVersion: 1.1.0\nSummary: JupyterHub Authenticator that lets users set passwords on first use\nHome-page: https://github.com/jupyterhub/firstuseauthenticator\nAuthor: Yuvi Panda, Project Jupyter Contributors\nAuthor-email: yuvipanda@gmail.com\n",
                    "rendered": {
                      "text": "Metadata-Version: 2.1\nName: jupyterhub-firstuseauthenticator\nVersion: 1.1.0\nSummary: JupyterHub Authenticator that lets users set passwords on first use\nHome-page: https://github.com/jupyterhub/firstuseauthenticator\nAuthor: Yuvi Panda, Project Jupyter Contributors\nAuthor-email: yuvipanda@gmail.com\n",
                      "markdown": "`Metadata-Version: 2.1\nName: jupyterhub-firstuseauthenticator\nVersion: 1.1.0\nSummary: JupyterHub Authenticator that lets users set passwords on first use\nHome-page: https://github.com/jupyterhub/firstuseauthenticator\nAuthor: Yuvi Panda, Project Jupyter Contributors\nAuthor-email: yuvipanda@gmail.com\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 67,
                  "endLine": 67,
                  "snippet": {
                    "text": "\n### Why have a password DB and not use PAM ?\n\nFor security Reasons. Users are likely to set an, insecure password at\nlogin time, and you do not want a brute-force/dictionary attack to manage to\nlogin by attacking via ssh or another mean.\n\n### How can I change my password?\n",
                    "rendered": {
                      "text": "\n### Why have a password DB and not use PAM ?\n\nFor security Reasons. Users are likely to set an, insecure password at\nlogin time, and you do not want a brute-force/dictionary attack to manage to\nlogin by attacking via ssh or another mean.\n\n### How can I change my password?\n",
                      "markdown": "`\n### Why have a password DB and not use PAM ?\n\nFor security Reasons. Users are likely to set an, insecure password at\nlogin time, and you do not want a brute-force/dictionary attack to manage to\nlogin by attacking via ssh or another mean.\n\n### How can I change my password?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 22,
                  "endLine": 68,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nFor security Reasons. Users are likely to set an, insecure password at\nlogin time, and you do not want a brute-force/dictionary attack to manage to\nlogin by attacking via ssh or another mean.\n\n### How can I change my password?\n\n",
                    "rendered": {
                      "text": "\nFor security Reasons. Users are likely to set an, insecure password at\nlogin time, and you do not want a brute-force/dictionary attack to manage to\nlogin by attacking via ssh or another mean.\n\n### How can I change my password?\n\n",
                      "markdown": "`\nFor security Reasons. Users are likely to set an, insecure password at\nlogin time, and you do not want a brute-force/dictionary attack to manage to\nlogin by attacking via ssh or another mean.\n\n### How can I change my password?\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/jupyterhub_firstuseauthenticator-1.1.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 7,
                  "endLine": 35,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nYou can install this authenticator with:\n\n```bash\npip install jupyterhub-firstuseauthenticator\n```\n\nOnce installed, configure JupyterHub to use it by adding the following to your `jupyterhub_config.py` file:\n",
                    "rendered": {
                      "text": "\nYou can install this authenticator with:\n\n```bash\npip install jupyterhub-firstuseauthenticator\n```\n\nOnce installed, configure JupyterHub to use it by adding the following to your `jupyterhub_config.py` file:\n",
                      "markdown": "`\nYou can install this authenticator with:\n\n```bash\npip install jupyterhub-firstuseauthenticator\n```\n\nOnce installed, configure JupyterHub to use it by adding the following to your `jupyterhub_config.py` file:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/templates/reset.html"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 24,
                  "endLine": 24,
                  "endColumn": 32,
                  "snippet": {
                    "text": "          type=\"submit\"\n          id=\"login_submit\"\n          class='btn btn-jupyter'\n          value='Change Password'\n          tabindex=\"3\"\n          />\n        </div>\n",
                    "rendered": {
                      "text": "          type=\"submit\"\n          id=\"login_submit\"\n          class='btn btn-jupyter'\n          value='Change Password'\n          tabindex=\"3\"\n          />\n        </div>\n",
                      "markdown": "`          type=\"submit\"\n          id=\"login_submit\"\n          class='btn btn-jupyter'\n          value='Change Password'\n          tabindex=\"3\"\n          />\n        </div>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/templates/reset.html"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 14,
                  "endLine": 15,
                  "endColumn": 22,
                  "snippet": {
                    "text": "          type=\"password\"\n          class=\"form-control\"\n          name=\"password\"\n          id=\"password_input\"\n          tabindex=\"2\"\n          />\n        </div>\n",
                    "rendered": {
                      "text": "          type=\"password\"\n          class=\"form-control\"\n          name=\"password\"\n          id=\"password_input\"\n          tabindex=\"2\"\n          />\n        </div>\n",
                      "markdown": "`          type=\"password\"\n          class=\"form-control\"\n          name=\"password\"\n          id=\"password_input\"\n          tabindex=\"2\"\n          />\n        </div>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/templates/reset.html"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 16,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "          <input\n          type=\"password\"\n          class=\"form-control\"\n          name=\"password\"\n          id=\"password_input\"\n          tabindex=\"2\"\n          />\n",
                    "rendered": {
                      "text": "          <input\n          type=\"password\"\n          class=\"form-control\"\n          name=\"password\"\n          id=\"password_input\"\n          tabindex=\"2\"\n          />\n",
                      "markdown": "`          <input\n          type=\"password\"\n          class=\"form-control\"\n          name=\"password\"\n          id=\"password_input\"\n          tabindex=\"2\"\n          />\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/templates/reset.html"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 16,
                  "endLine": 12,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        <div class=\"form-group\">\n          <label for='password_input'>New Password:</label>\n          <input\n          type=\"password\"\n          class=\"form-control\"\n          name=\"password\"\n          id=\"password_input\"\n",
                    "rendered": {
                      "text": "        <div class=\"form-group\">\n          <label for='password_input'>New Password:</label>\n          <input\n          type=\"password\"\n          class=\"form-control\"\n          name=\"password\"\n          id=\"password_input\"\n",
                      "markdown": "`        <div class=\"form-group\">\n          <label for='password_input'>New Password:</label>\n          <input\n          type=\"password\"\n          class=\"form-control\"\n          name=\"password\"\n          id=\"password_input\"\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/templates/reset.html"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 42,
                  "endLine": 10,
                  "endColumn": 50,
                  "snippet": {
                    "text": "      </h2>\n      <div>\n        <div class=\"form-group\">\n          <label for='password_input'>New Password:</label>\n          <input\n          type=\"password\"\n          class=\"form-control\"\n",
                    "rendered": {
                      "text": "      </h2>\n      <div>\n        <div class=\"form-group\">\n          <label for='password_input'>New Password:</label>\n          <input\n          type=\"password\"\n          class=\"form-control\"\n",
                      "markdown": "`      </h2>\n      <div>\n        <div class=\"form-group\">\n          <label for='password_input'>New Password:</label>\n          <input\n          type=\"password\"\n          class=\"form-control\"\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/templates/reset.html"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 22,
                  "endLine": 10,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      </h2>\n      <div>\n        <div class=\"form-group\">\n          <label for='password_input'>New Password:</label>\n          <input\n          type=\"password\"\n          class=\"form-control\"\n",
                    "rendered": {
                      "text": "      </h2>\n      <div>\n        <div class=\"form-group\">\n          <label for='password_input'>New Password:</label>\n          <input\n          type=\"password\"\n          class=\"form-control\"\n",
                      "markdown": "`      </h2>\n      <div>\n        <div class=\"form-group\">\n          <label for='password_input'>New Password:</label>\n          <input\n          type=\"password\"\n          class=\"form-control\"\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/usr/lib/python3.12/site-packages/firstuseauthenticator/templates/reset.html"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 13,
                  "endLine": 6,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  <div class=\"container\">\n    <form action=\"{{post_url}}\" method=\"post\" role=\"form\">\n      <h2>\n      Change Password\n      </h2>\n      <div>\n        <div class=\"form-group\">\n",
                    "rendered": {
                      "text": "  <div class=\"container\">\n    <form action=\"{{post_url}}\" method=\"post\" role=\"form\">\n      <h2>\n      Change Password\n      </h2>\n      <div>\n        <div class=\"form-group\">\n",
                      "markdown": "`  <div class=\"container\">\n    <form action=\"{{post_url}}\" method=\"post\" role=\"form\">\n      <h2>\n      Change Password\n      </h2>\n      <div>\n        <div class=\"form-group\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-jupyterhub-firstuseauthenticator-1.1.0-r0.apk/py3-jupyterhub-firstuseauthenticator-1.1.0-r0/.PKGINFO"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 55,
                  "endLine": 7,
                  "endColumn": 63,
                  "snippet": {
                    "text": "arch = x86_64\nsize = 81211\norigin = py3-jupyterhub-firstuseauthenticator\npkgdesc = JupyterHub Authenticator that lets users set passwords on first use\nurl = \ncommit = 8209c345d45647c997668eb8e2db71dc462b09f4\nbuilddate = 1726614801\n",
                    "rendered": {
                      "text": "arch = x86_64\nsize = 81211\norigin = py3-jupyterhub-firstuseauthenticator\npkgdesc = JupyterHub Authenticator that lets users set passwords on first use\nurl = \ncommit = 8209c345d45647c997668eb8e2db71dc462b09f4\nbuilddate = 1726614801\n",
                      "markdown": "`arch = x86_64\nsize = 81211\norigin = py3-jupyterhub-firstuseauthenticator\npkgdesc = JupyterHub Authenticator that lets users set passwords on first use\nurl = \ncommit = 8209c345d45647c997668eb8e2db71dc462b09f4\nbuilddate = 1726614801\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}