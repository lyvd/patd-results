{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 897,
                  "startColumn": 29,
                  "endLine": 897,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n        .. versionadded:: 2.0\n        \"\"\"\n        return Transfer(self).get(*args, **kwargs)\n\n    def put(self, *args, **kwargs):\n        \"\"\"\n",
                    "rendered": {
                      "text": "\n        .. versionadded:: 2.0\n        \"\"\"\n        return Transfer(self).get(*args, **kwargs)\n\n    def put(self, *args, **kwargs):\n        \"\"\"\n",
                      "markdown": "`\n        .. versionadded:: 2.0\n        \"\"\"\n        return Transfer(self).get(*args, **kwargs)\n\n    def put(self, *args, **kwargs):\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 41,
                  "endLine": 481,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        config_kwargs = self.config.connect_kwargs\n        constructor_keys = constructor_kwargs.get(\"key_filename\", [])\n        config_keys = config_kwargs.get(\"key_filename\", [])\n        ssh_config_keys = self.ssh_config.get(\"identityfile\", [])\n\n        # Default data: constructor if given, config otherwise\n        final_kwargs = constructor_kwargs or config_kwargs\n",
                    "rendered": {
                      "text": "        config_kwargs = self.config.connect_kwargs\n        constructor_keys = constructor_kwargs.get(\"key_filename\", [])\n        config_keys = config_kwargs.get(\"key_filename\", [])\n        ssh_config_keys = self.ssh_config.get(\"identityfile\", [])\n\n        # Default data: constructor if given, config otherwise\n        final_kwargs = constructor_kwargs or config_kwargs\n",
                      "markdown": "`        config_kwargs = self.config.connect_kwargs\n        constructor_keys = constructor_kwargs.get(\"key_filename\", [])\n        config_keys = config_kwargs.get(\"key_filename\", [])\n        ssh_config_keys = self.ssh_config.get(\"identityfile\", [])\n\n        # Default data: constructor if given, config otherwise\n        final_kwargs = constructor_kwargs or config_kwargs\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 35,
                  "endLine": 480,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        constructor_kwargs = connect_kwargs or {}\n        config_kwargs = self.config.connect_kwargs\n        constructor_keys = constructor_kwargs.get(\"key_filename\", [])\n        config_keys = config_kwargs.get(\"key_filename\", [])\n        ssh_config_keys = self.ssh_config.get(\"identityfile\", [])\n\n        # Default data: constructor if given, config otherwise\n",
                    "rendered": {
                      "text": "        constructor_kwargs = connect_kwargs or {}\n        config_kwargs = self.config.connect_kwargs\n        constructor_keys = constructor_kwargs.get(\"key_filename\", [])\n        config_keys = config_kwargs.get(\"key_filename\", [])\n        ssh_config_keys = self.ssh_config.get(\"identityfile\", [])\n\n        # Default data: constructor if given, config otherwise\n",
                      "markdown": "`        constructor_kwargs = connect_kwargs or {}\n        config_kwargs = self.config.connect_kwargs\n        constructor_keys = constructor_kwargs.get(\"key_filename\", [])\n        config_keys = config_kwargs.get(\"key_filename\", [])\n        ssh_config_keys = self.ssh_config.get(\"identityfile\", [])\n\n        # Default data: constructor if given, config otherwise\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 45,
                  "endLine": 479,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        # early instead of late.\n        constructor_kwargs = connect_kwargs or {}\n        config_kwargs = self.config.connect_kwargs\n        constructor_keys = constructor_kwargs.get(\"key_filename\", [])\n        config_keys = config_kwargs.get(\"key_filename\", [])\n        ssh_config_keys = self.ssh_config.get(\"identityfile\", [])\n\n",
                    "rendered": {
                      "text": "        # early instead of late.\n        constructor_kwargs = connect_kwargs or {}\n        config_kwargs = self.config.connect_kwargs\n        constructor_keys = constructor_kwargs.get(\"key_filename\", [])\n        config_keys = config_kwargs.get(\"key_filename\", [])\n        ssh_config_keys = self.ssh_config.get(\"identityfile\", [])\n\n",
                      "markdown": "`        # early instead of late.\n        constructor_kwargs = connect_kwargs or {}\n        config_kwargs = self.config.connect_kwargs\n        constructor_keys = constructor_kwargs.get(\"key_filename\", [])\n        config_keys = config_kwargs.get(\"key_filename\", [])\n        ssh_config_keys = self.ssh_config.get(\"identityfile\", [])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 45,
                  "endLine": 444,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        self.forward_agent = forward_agent\n\n        if connect_timeout is None:\n            connect_timeout = self.ssh_config.get(\n                \"connecttimeout\", self.config.timeouts.connect\n            )\n        if connect_timeout is not None:\n",
                    "rendered": {
                      "text": "        self.forward_agent = forward_agent\n\n        if connect_timeout is None:\n            connect_timeout = self.ssh_config.get(\n                \"connecttimeout\", self.config.timeouts.connect\n            )\n        if connect_timeout is not None:\n",
                      "markdown": "`        self.forward_agent = forward_agent\n\n        if connect_timeout is None:\n            connect_timeout = self.ssh_config.get(\n                \"connecttimeout\", self.config.timeouts.connect\n            )\n        if connect_timeout is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 47,
                  "endLine": 420,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        # user='')? E.g. do some SSH server specs allow for that?\n\n        #: The network port to connect on.\n        self.port = port or int(self.ssh_config.get(\"port\", self.config.port))\n\n        # Gateway/proxy/bastion/jump setting: non-None values - string,\n        # Connection, even eg False - get set directly; None triggers seek in\n",
                    "rendered": {
                      "text": "        # user='')? E.g. do some SSH server specs allow for that?\n\n        #: The network port to connect on.\n        self.port = port or int(self.ssh_config.get(\"port\", self.config.port))\n\n        # Gateway/proxy/bastion/jump setting: non-None values - string,\n        # Connection, even eg False - get set directly; None triggers seek in\n",
                      "markdown": "`        # user='')? E.g. do some SSH server specs allow for that?\n\n        #: The network port to connect on.\n        self.port = port or int(self.ssh_config.get(\"port\", self.config.port))\n\n        # Gateway/proxy/bastion/jump setting: non-None values - string,\n        # Connection, even eg False - get set directly; None triggers seek in\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 43,
                  "endLine": 415,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            self.host = self.ssh_config[\"hostname\"]\n\n        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n        # TODO: is it _ever_ possible to give an empty user value (e.g.\n        # user='')? E.g. do some SSH server specs allow for that?\n\n",
                    "rendered": {
                      "text": "            self.host = self.ssh_config[\"hostname\"]\n\n        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n        # TODO: is it _ever_ possible to give an empty user value (e.g.\n        # user='')? E.g. do some SSH server specs allow for that?\n\n",
                      "markdown": "`            self.host = self.ssh_config[\"hostname\"]\n\n        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n        # TODO: is it _ever_ possible to give an empty user value (e.g.\n        # user='')? E.g. do some SSH server specs allow for that?\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 773,
                  "startColumn": 35,
                  "endLine": 773,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        This method is identical to `invoke.context.Context.sudo` in every way,\n        except in that -- like `run` -- it honors per-host/per-connection\n        configuration overrides in addition to the generic/global ones. Thus,\n        for example, per-host sudo passwords may be configured.\n\n        .. versionadded:: 2.0\n        \"\"\"\n",
                    "rendered": {
                      "text": "        This method is identical to `invoke.context.Context.sudo` in every way,\n        except in that -- like `run` -- it honors per-host/per-connection\n        configuration overrides in addition to the generic/global ones. Thus,\n        for example, per-host sudo passwords may be configured.\n\n        .. versionadded:: 2.0\n        \"\"\"\n",
                      "markdown": "`        This method is identical to `invoke.context.Context.sudo` in every way,\n        except in that -- like `run` -- it honors per-host/per-connection\n        configuration overrides in addition to the generic/global ones. Thus,\n        for example, per-host sudo passwords may be configured.\n\n        .. versionadded:: 2.0\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 660,
                  "startColumn": 31,
                  "endLine": 660,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                kwargs.pop(key, None)\n\n            kwargs[\"auth_strategy\"] = auth_strategy_class(\n                ssh_config=self.ssh_config,\n                fabric_config=self.config,\n                username=self.user,\n            )\n",
                    "rendered": {
                      "text": "                kwargs.pop(key, None)\n\n            kwargs[\"auth_strategy\"] = auth_strategy_class(\n                ssh_config=self.ssh_config,\n                fabric_config=self.config,\n                username=self.user,\n            )\n",
                      "markdown": "`                kwargs.pop(key, None)\n\n            kwargs[\"auth_strategy\"] = auth_strategy_class(\n                ssh_config=self.ssh_config,\n                fabric_config=self.config,\n                username=self.user,\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 653,
                  "startColumn": 17,
                  "endLine": 653,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                \"key_filename\",\n                \"look_for_keys\",\n                \"passphrase\",\n                \"password\",\n                \"pkey\",\n                \"username\",\n            ):\n",
                    "rendered": {
                      "text": "                \"key_filename\",\n                \"look_for_keys\",\n                \"passphrase\",\n                \"password\",\n                \"pkey\",\n                \"username\",\n            ):\n",
                      "markdown": "`                \"key_filename\",\n                \"look_for_keys\",\n                \"passphrase\",\n                \"password\",\n                \"pkey\",\n                \"username\",\n            ):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 48,
                  "endLine": 604,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        see :doc:`the configuration docs </concepts/configuration>`.)\n\n        :returns:\n            The result of the internal call to `.SSHClient.connect`, if\n            performing an initial connection; ``None`` otherwise.\n\n        .. versionadded:: 2.0\n",
                    "rendered": {
                      "text": "        see :doc:`the configuration docs </concepts/configuration>`.)\n\n        :returns:\n            The result of the internal call to `.SSHClient.connect`, if\n            performing an initial connection; ``None`` otherwise.\n\n        .. versionadded:: 2.0\n",
                      "markdown": "`        see :doc:`the configuration docs </concepts/configuration>`.)\n\n        :returns:\n            The result of the internal call to `.SSHClient.connect`, if\n            performing an initial connection; ``None`` otherwise.\n\n        .. versionadded:: 2.0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 600,
                  "startColumn": 43,
                  "endLine": 600,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n        Various connect-time settings (and/or their corresponding :ref:`SSH\n        config options <ssh-config>`) are utilized here in the call to\n        `SSHClient.connect <paramiko.client.SSHClient.connect>`. (For details,\n        see :doc:`the configuration docs </concepts/configuration>`.)\n\n        :returns:\n",
                    "rendered": {
                      "text": "\n        Various connect-time settings (and/or their corresponding :ref:`SSH\n        config options <ssh-config>`) are utilized here in the call to\n        `SSHClient.connect <paramiko.client.SSHClient.connect>`. (For details,\n        see :doc:`the configuration docs </concepts/configuration>`.)\n\n        :returns:\n",
                      "markdown": "`\n        Various connect-time settings (and/or their corresponding :ref:`SSH\n        config options <ssh-config>`) are utilized here in the call to\n        `SSHClient.connect <paramiko.client.SSHClient.connect>`. (For details,\n        see :doc:`the configuration docs </concepts/configuration>`.)\n\n        :returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 23,
                  "endLine": 526,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            return prev_gw\n        elif \"proxycommand\" in self.ssh_config:\n            # Just a string, which we interpret as a proxy command..\n            return self.ssh_config[\"proxycommand\"]\n        # Fallback: config value (may be None).\n        return self.config.gateway\n\n",
                    "rendered": {
                      "text": "            return prev_gw\n        elif \"proxycommand\" in self.ssh_config:\n            # Just a string, which we interpret as a proxy command..\n            return self.ssh_config[\"proxycommand\"]\n        # Fallback: config value (may be None).\n        return self.config.gateway\n\n",
                      "markdown": "`            return prev_gw\n        elif \"proxycommand\" in self.ssh_config:\n            # Just a string, which we interpret as a proxy command..\n            return self.ssh_config[\"proxycommand\"]\n        # Fallback: config value (may be None).\n        return self.config.gateway\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 35,
                  "endLine": 524,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                cxn = Connection(hop, **kwargs)\n                prev_gw = cxn\n            return prev_gw\n        elif \"proxycommand\" in self.ssh_config:\n            # Just a string, which we interpret as a proxy command..\n            return self.ssh_config[\"proxycommand\"]\n        # Fallback: config value (may be None).\n",
                    "rendered": {
                      "text": "                cxn = Connection(hop, **kwargs)\n                prev_gw = cxn\n            return prev_gw\n        elif \"proxycommand\" in self.ssh_config:\n            # Just a string, which we interpret as a proxy command..\n            return self.ssh_config[\"proxycommand\"]\n        # Fallback: config value (may be None).\n",
                      "markdown": "`                cxn = Connection(hop, **kwargs)\n                prev_gw = cxn\n            return prev_gw\n        elif \"proxycommand\" in self.ssh_config:\n            # Just a string, which we interpret as a proxy command..\n            return self.ssh_config[\"proxycommand\"]\n        # Fallback: config value (may be None).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 32,
                  "endLine": 506,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            # Reverse hop1,hop2,hop3 style ProxyJump directive so we start\n            # with the final (itself non-gatewayed) hop and work up to\n            # the front (actual, supplied as our own gateway) hop\n            hops = reversed(self.ssh_config[\"proxyjump\"].split(\",\"))\n            prev_gw = None\n            for hop in hops:\n                # Short-circuit if we appear to be our own proxy, which would\n",
                    "rendered": {
                      "text": "            # Reverse hop1,hop2,hop3 style ProxyJump directive so we start\n            # with the final (itself non-gatewayed) hop and work up to\n            # the front (actual, supplied as our own gateway) hop\n            hops = reversed(self.ssh_config[\"proxyjump\"].split(\",\"))\n            prev_gw = None\n            for hop in hops:\n                # Short-circuit if we appear to be our own proxy, which would\n",
                      "markdown": "`            # Reverse hop1,hop2,hop3 style ProxyJump directive so we start\n            # with the final (itself non-gatewayed) hop and work up to\n            # the front (actual, supplied as our own gateway) hop\n            hops = reversed(self.ssh_config[\"proxyjump\"].split(\",\"))\n            prev_gw = None\n            for hop in hops:\n                # Short-circuit if we appear to be our own proxy, which would\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 502,
                  "startColumn": 30,
                  "endLine": 502,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n    def get_gateway(self):\n        # SSH config wins over Invoke-style config\n        if \"proxyjump\" in self.ssh_config:\n            # Reverse hop1,hop2,hop3 style ProxyJump directive so we start\n            # with the final (itself non-gatewayed) hop and work up to\n            # the front (actual, supplied as our own gateway) hop\n",
                    "rendered": {
                      "text": "\n    def get_gateway(self):\n        # SSH config wins over Invoke-style config\n        if \"proxyjump\" in self.ssh_config:\n            # Reverse hop1,hop2,hop3 style ProxyJump directive so we start\n            # with the final (itself non-gatewayed) hop and work up to\n            # the front (actual, supplied as our own gateway) hop\n",
                      "markdown": "`\n    def get_gateway(self):\n        # SSH config wins over Invoke-style config\n        if \"proxyjump\" in self.ssh_config:\n            # Reverse hop1,hop2,hop3 style ProxyJump directive so we start\n            # with the final (itself non-gatewayed) hop and work up to\n            # the front (actual, supplied as our own gateway) hop\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 30,
                  "endLine": 481,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        config_kwargs = self.config.connect_kwargs\n        constructor_keys = constructor_kwargs.get(\"key_filename\", [])\n        config_keys = config_kwargs.get(\"key_filename\", [])\n        ssh_config_keys = self.ssh_config.get(\"identityfile\", [])\n\n        # Default data: constructor if given, config otherwise\n        final_kwargs = constructor_kwargs or config_kwargs\n",
                    "rendered": {
                      "text": "        config_kwargs = self.config.connect_kwargs\n        constructor_keys = constructor_kwargs.get(\"key_filename\", [])\n        config_keys = config_kwargs.get(\"key_filename\", [])\n        ssh_config_keys = self.ssh_config.get(\"identityfile\", [])\n\n        # Default data: constructor if given, config otherwise\n        final_kwargs = constructor_kwargs or config_kwargs\n",
                      "markdown": "`        config_kwargs = self.config.connect_kwargs\n        constructor_keys = constructor_kwargs.get(\"key_filename\", [])\n        config_keys = config_kwargs.get(\"key_filename\", [])\n        ssh_config_keys = self.ssh_config.get(\"identityfile\", [])\n\n        # Default data: constructor if given, config otherwise\n        final_kwargs = constructor_kwargs or config_kwargs\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 31,
                  "endLine": 456,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        #: `open` is called.\n        self.connect_kwargs = self.resolve_connect_kwargs(connect_kwargs)\n\n        #: The `paramiko.client.SSHClient` instance this connection wraps.\n        client = SSHClient()\n        client.set_missing_host_key_policy(AutoAddPolicy())\n        self.client = client\n",
                    "rendered": {
                      "text": "        #: `open` is called.\n        self.connect_kwargs = self.resolve_connect_kwargs(connect_kwargs)\n\n        #: The `paramiko.client.SSHClient` instance this connection wraps.\n        client = SSHClient()\n        client.set_missing_host_key_policy(AutoAddPolicy())\n        self.client = client\n",
                      "markdown": "`        #: `open` is called.\n        self.connect_kwargs = self.resolve_connect_kwargs(connect_kwargs)\n\n        #: The `paramiko.client.SSHClient` instance this connection wraps.\n        client = SSHClient()\n        client.set_missing_host_key_policy(AutoAddPolicy())\n        self.client = client\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 54,
                  "endLine": 452,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        #: Connection timeout\n        self.connect_timeout = connect_timeout\n\n        #: Keyword arguments given to `paramiko.client.SSHClient.connect` when\n        #: `open` is called.\n        self.connect_kwargs = self.resolve_connect_kwargs(connect_kwargs)\n\n",
                    "rendered": {
                      "text": "        #: Connection timeout\n        self.connect_timeout = connect_timeout\n\n        #: Keyword arguments given to `paramiko.client.SSHClient.connect` when\n        #: `open` is called.\n        self.connect_kwargs = self.resolve_connect_kwargs(connect_kwargs)\n\n",
                      "markdown": "`        #: Connection timeout\n        self.connect_timeout = connect_timeout\n\n        #: Keyword arguments given to `paramiko.client.SSHClient.connect` when\n        #: `open` is called.\n        self.connect_kwargs = self.resolve_connect_kwargs(connect_kwargs)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 34,
                  "endLine": 444,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        self.forward_agent = forward_agent\n\n        if connect_timeout is None:\n            connect_timeout = self.ssh_config.get(\n                \"connecttimeout\", self.config.timeouts.connect\n            )\n        if connect_timeout is not None:\n",
                    "rendered": {
                      "text": "        self.forward_agent = forward_agent\n\n        if connect_timeout is None:\n            connect_timeout = self.ssh_config.get(\n                \"connecttimeout\", self.config.timeouts.connect\n            )\n        if connect_timeout is not None:\n",
                      "markdown": "`        self.forward_agent = forward_agent\n\n        if connect_timeout is None:\n            connect_timeout = self.ssh_config.get(\n                \"connecttimeout\", self.config.timeouts.connect\n            )\n        if connect_timeout is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 41,
                  "endLine": 439,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            if \"forwardagent\" in self.ssh_config:\n                # TODO: SSHConfig really, seriously needs some love here, god\n                map_ = {\"yes\": True, \"no\": False}\n                forward_agent = map_[self.ssh_config[\"forwardagent\"]]\n        #: Whether agent forwarding is enabled.\n        self.forward_agent = forward_agent\n\n",
                    "rendered": {
                      "text": "            if \"forwardagent\" in self.ssh_config:\n                # TODO: SSHConfig really, seriously needs some love here, god\n                map_ = {\"yes\": True, \"no\": False}\n                forward_agent = map_[self.ssh_config[\"forwardagent\"]]\n        #: Whether agent forwarding is enabled.\n        self.forward_agent = forward_agent\n\n",
                      "markdown": "`            if \"forwardagent\" in self.ssh_config:\n                # TODO: SSHConfig really, seriously needs some love here, god\n                map_ = {\"yes\": True, \"no\": False}\n                forward_agent = map_[self.ssh_config[\"forwardagent\"]]\n        #: Whether agent forwarding is enabled.\n        self.forward_agent = forward_agent\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 37,
                  "endLine": 436,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            # Default to config...\n            forward_agent = self.config.forward_agent\n            # But if ssh_config is present, it wins\n            if \"forwardagent\" in self.ssh_config:\n                # TODO: SSHConfig really, seriously needs some love here, god\n                map_ = {\"yes\": True, \"no\": False}\n                forward_agent = map_[self.ssh_config[\"forwardagent\"]]\n",
                    "rendered": {
                      "text": "            # Default to config...\n            forward_agent = self.config.forward_agent\n            # But if ssh_config is present, it wins\n            if \"forwardagent\" in self.ssh_config:\n                # TODO: SSHConfig really, seriously needs some love here, god\n                map_ = {\"yes\": True, \"no\": False}\n                forward_agent = map_[self.ssh_config[\"forwardagent\"]]\n",
                      "markdown": "`            # Default to config...\n            forward_agent = self.config.forward_agent\n            # But if ssh_config is present, it wins\n            if \"forwardagent\" in self.ssh_config:\n                # TODO: SSHConfig really, seriously needs some love here, god\n                map_ = {\"yes\": True, \"no\": False}\n                forward_agent = map_[self.ssh_config[\"forwardagent\"]]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 36,
                  "endLine": 420,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        # user='')? E.g. do some SSH server specs allow for that?\n\n        #: The network port to connect on.\n        self.port = port or int(self.ssh_config.get(\"port\", self.config.port))\n\n        # Gateway/proxy/bastion/jump setting: non-None values - string,\n        # Connection, even eg False - get set directly; None triggers seek in\n",
                    "rendered": {
                      "text": "        # user='')? E.g. do some SSH server specs allow for that?\n\n        #: The network port to connect on.\n        self.port = port or int(self.ssh_config.get(\"port\", self.config.port))\n\n        # Gateway/proxy/bastion/jump setting: non-None values - string,\n        # Connection, even eg False - get set directly; None triggers seek in\n",
                      "markdown": "`        # user='')? E.g. do some SSH server specs allow for that?\n\n        #: The network port to connect on.\n        self.port = port or int(self.ssh_config.get(\"port\", self.config.port))\n\n        # Gateway/proxy/bastion/jump setting: non-None values - string,\n        # Connection, even eg False - get set directly; None triggers seek in\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 32,
                  "endLine": 415,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            self.host = self.ssh_config[\"hostname\"]\n\n        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n        # TODO: is it _ever_ possible to give an empty user value (e.g.\n        # user='')? E.g. do some SSH server specs allow for that?\n\n",
                    "rendered": {
                      "text": "            self.host = self.ssh_config[\"hostname\"]\n\n        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n        # TODO: is it _ever_ possible to give an empty user value (e.g.\n        # user='')? E.g. do some SSH server specs allow for that?\n\n",
                      "markdown": "`            self.host = self.ssh_config[\"hostname\"]\n\n        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n        # TODO: is it _ever_ possible to give an empty user value (e.g.\n        # user='')? E.g. do some SSH server specs allow for that?\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 28,
                  "endLine": 412,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n            self.host = self.ssh_config[\"hostname\"]\n\n        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n",
                    "rendered": {
                      "text": "        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n            self.host = self.ssh_config[\"hostname\"]\n\n        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n",
                      "markdown": "`        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n            self.host = self.ssh_config[\"hostname\"]\n\n        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 29,
                  "endLine": 410,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        self.original_host = host\n        #: The hostname of the target server.\n        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n            self.host = self.ssh_config[\"hostname\"]\n\n",
                    "rendered": {
                      "text": "        self.original_host = host\n        #: The hostname of the target server.\n        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n            self.host = self.ssh_config[\"hostname\"]\n\n",
                      "markdown": "`        self.original_host = host\n        #: The hostname of the target server.\n        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n            self.host = self.ssh_config[\"hostname\"]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 12,
                  "endLine": 405,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        # NOTE: we load SSH config data as early as possible as it has\n        # potential to affect nearly every other attribute.\n        #: The per-host SSH config data, if any. (See :ref:`ssh-config`.)\n        self.ssh_config = self.config.base_ssh_config.lookup(host)\n\n        self.original_host = host\n        #: The hostname of the target server.\n",
                    "rendered": {
                      "text": "        # NOTE: we load SSH config data as early as possible as it has\n        # potential to affect nearly every other attribute.\n        #: The per-host SSH config data, if any. (See :ref:`ssh-config`.)\n        self.ssh_config = self.config.base_ssh_config.lookup(host)\n\n        self.original_host = host\n        #: The hostname of the target server.\n",
                      "markdown": "`        # NOTE: we load SSH config data as early as possible as it has\n        # potential to affect nearly every other attribute.\n        #: The per-host SSH config data, if any. (See :ref:`ssh-config`.)\n        self.ssh_config = self.config.base_ssh_config.lookup(host)\n\n        self.original_host = host\n        #: The hostname of the target server.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 54,
                  "endLine": 315,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                    host=\"hostname\",\n                    user=\"admin\",\n                    connect_kwargs={\n                        \"key_filename\": \"/home/myuser/.ssh/private.key\",\n                    },\n                )\n\n",
                    "rendered": {
                      "text": "                    host=\"hostname\",\n                    user=\"admin\",\n                    connect_kwargs={\n                        \"key_filename\": \"/home/myuser/.ssh/private.key\",\n                    },\n                )\n\n",
                      "markdown": "`                    host=\"hostname\",\n                    user=\"admin\",\n                    connect_kwargs={\n                        \"key_filename\": \"/home/myuser/.ssh/private.key\",\n                    },\n                )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 47,
                  "endLine": 302,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            .. _connect_kwargs-arg:\n\n            Keyword arguments handed verbatim to\n            `SSHClient.connect <paramiko.client.SSHClient.connect>` (when\n            `.open` is called).\n\n            `.Connection` tries not to grow additional settings/kwargs of its\n",
                    "rendered": {
                      "text": "            .. _connect_kwargs-arg:\n\n            Keyword arguments handed verbatim to\n            `SSHClient.connect <paramiko.client.SSHClient.connect>` (when\n            `.open` is called).\n\n            `.Connection` tries not to grow additional settings/kwargs of its\n",
                      "markdown": "`            .. _connect_kwargs-arg:\n\n            Keyword arguments handed verbatim to\n            `SSHClient.connect <paramiko.client.SSHClient.connect>` (when\n            `.open` is called).\n\n            `.Connection` tries not to grow additional settings/kwargs of its\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 48,
                  "endLine": 58,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    This class inherits from Invoke's `~invoke.context.Context`, as it is a\n    context within which commands, tasks etc can operate. It also encapsulates\n    a Paramiko `~paramiko.client.SSHClient` instance, performing useful high\n    level operations with that `~paramiko.client.SSHClient` and\n    `~paramiko.channel.Channel` instances generated from it.\n\n    .. _connect_kwargs:\n",
                    "rendered": {
                      "text": "    This class inherits from Invoke's `~invoke.context.Context`, as it is a\n    context within which commands, tasks etc can operate. It also encapsulates\n    a Paramiko `~paramiko.client.SSHClient` instance, performing useful high\n    level operations with that `~paramiko.client.SSHClient` and\n    `~paramiko.channel.Channel` instances generated from it.\n\n    .. _connect_kwargs:\n",
                      "markdown": "`    This class inherits from Invoke's `~invoke.context.Context`, as it is a\n    context within which commands, tasks etc can operate. It also encapsulates\n    a Paramiko `~paramiko.client.SSHClient` instance, performing useful high\n    level operations with that `~paramiko.client.SSHClient` and\n    `~paramiko.channel.Channel` instances generated from it.\n\n    .. _connect_kwargs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 32,
                  "endLine": 57,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    This class inherits from Invoke's `~invoke.context.Context`, as it is a\n    context within which commands, tasks etc can operate. It also encapsulates\n    a Paramiko `~paramiko.client.SSHClient` instance, performing useful high\n    level operations with that `~paramiko.client.SSHClient` and\n    `~paramiko.channel.Channel` instances generated from it.\n\n",
                    "rendered": {
                      "text": "\n    This class inherits from Invoke's `~invoke.context.Context`, as it is a\n    context within which commands, tasks etc can operate. It also encapsulates\n    a Paramiko `~paramiko.client.SSHClient` instance, performing useful high\n    level operations with that `~paramiko.client.SSHClient` and\n    `~paramiko.channel.Channel` instances generated from it.\n\n",
                      "markdown": "`\n    This class inherits from Invoke's `~invoke.context.Context`, as it is a\n    context within which commands, tasks etc can operate. It also encapsulates\n    a Paramiko `~paramiko.client.SSHClient` instance, performing useful high\n    level operations with that `~paramiko.client.SSHClient` and\n    `~paramiko.channel.Channel` instances generated from it.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 786,
                  "startColumn": 8,
                  "endLine": 786,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n        This method is intended strictly for use cases where you can't know\n        what remote shell to invoke, or are connecting to a non-POSIX-server\n        environment such as a network appliance or other custom SSH server.\n        Nearly every other use case, including interactively-focused ones, will\n        be better served by using `run` plus an explicit remote shell command\n        (eg ``bash``).\n",
                    "rendered": {
                      "text": "\n        This method is intended strictly for use cases where you can't know\n        what remote shell to invoke, or are connecting to a non-POSIX-server\n        environment such as a network appliance or other custom SSH server.\n        Nearly every other use case, including interactively-focused ones, will\n        be better served by using `run` plus an explicit remote shell command\n        (eg ``bash``).\n",
                      "markdown": "`\n        This method is intended strictly for use cases where you can't know\n        what remote shell to invoke, or are connecting to a non-POSIX-server\n        environment such as a network appliance or other custom SSH server.\n        Nearly every other use case, including interactively-focused ones, will\n        be better served by using `run` plus an explicit remote shell command\n        (eg ``bash``).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 1051,
                  "startColumn": 22,
                  "endLine": 1051,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            ``remote_port``.\n\n        :param str local_host:\n            The local hostname/interface the forwarded connection talks to.\n            Default: ``localhost``.\n\n        :param str remote_host:\n",
                    "rendered": {
                      "text": "            ``remote_port``.\n\n        :param str local_host:\n            The local hostname/interface the forwarded connection talks to.\n            Default: ``localhost``.\n\n        :param str remote_host:\n",
                      "markdown": "`            ``remote_port``.\n\n        :param str local_host:\n            The local hostname/interface the forwarded connection talks to.\n            Default: ``localhost``.\n\n        :param str remote_host:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 953,
                  "startColumn": 23,
                  "endLine": 953,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            ``localhost``.\n\n        :param str remote_host:\n            The remote hostname serving the forwarded remote port. Default:\n            ``localhost`` (i.e., the host this `.Connection` is connected to.)\n\n        :returns:\n",
                    "rendered": {
                      "text": "            ``localhost``.\n\n        :param str remote_host:\n            The remote hostname serving the forwarded remote port. Default:\n            ``localhost`` (i.e., the host this `.Connection` is connected to.)\n\n        :returns:\n",
                      "markdown": "`            ``localhost``.\n\n        :param str remote_host:\n            The remote hostname serving the forwarded remote port. Default:\n            ``localhost`` (i.e., the host this `.Connection` is connected to.)\n\n        :returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 949,
                  "startColumn": 22,
                  "endLine": 949,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            ``local_port``.\n\n        :param str local_host:\n            The local hostname/interface on which to listen. Default:\n            ``localhost``.\n\n        :param str remote_host:\n",
                    "rendered": {
                      "text": "            ``local_port``.\n\n        :param str local_host:\n            The local hostname/interface on which to listen. Default:\n            ``localhost``.\n\n        :param str remote_host:\n",
                      "markdown": "`            ``local_port``.\n\n        :param str local_host:\n            The local hostname/interface on which to listen. Default:\n            ``localhost``.\n\n        :param str remote_host:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 12,
                  "endLine": 634,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        kwargs = dict(\n            self.connect_kwargs,\n            username=self.user,\n            hostname=self.host,\n            port=self.port,\n        )\n        if self.gateway:\n",
                    "rendered": {
                      "text": "        kwargs = dict(\n            self.connect_kwargs,\n            username=self.user,\n            hostname=self.host,\n            port=self.port,\n        )\n        if self.gateway:\n",
                      "markdown": "`        kwargs = dict(\n            self.connect_kwargs,\n            username=self.user,\n            hostname=self.host,\n            port=self.port,\n        )\n        if self.gateway:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 12,
                  "endLine": 618,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        err = \"Refusing to be ambiguous: connect() kwarg '{}' was given both via regular arg and via connect_kwargs!\"  # noqa\n        # These may not be given, period\n        for key in \"\"\"\n            hostname\n            port\n            username\n        \"\"\".split():\n",
                    "rendered": {
                      "text": "        err = \"Refusing to be ambiguous: connect() kwarg '{}' was given both via regular arg and via connect_kwargs!\"  # noqa\n        # These may not be given, period\n        for key in \"\"\"\n            hostname\n            port\n            username\n        \"\"\".split():\n",
                      "markdown": "`        err = \"Refusing to be ambiguous: connect() kwarg '{}' was given both via regular arg and via connect_kwargs!\"  # noqa\n        # These may not be given, period\n        for key in \"\"\"\n            hostname\n            port\n            username\n        \"\"\".split():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 28,
                  "endLine": 473,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    def resolve_connect_kwargs(self, connect_kwargs):\n        # TODO: is it better to pre-empt conflicts w/ manually-handled\n        # connect() kwargs (hostname, username, etc) here or in open()? We're\n        # doing open() for now in case e.g. someone manually modifies\n        # .connect_kwargs attributewise, but otherwise it feels better to do it\n        # early instead of late.\n",
                    "rendered": {
                      "text": "\n    def resolve_connect_kwargs(self, connect_kwargs):\n        # TODO: is it better to pre-empt conflicts w/ manually-handled\n        # connect() kwargs (hostname, username, etc) here or in open()? We're\n        # doing open() for now in case e.g. someone manually modifies\n        # .connect_kwargs attributewise, but otherwise it feels better to do it\n        # early instead of late.\n",
                      "markdown": "`\n    def resolve_connect_kwargs(self, connect_kwargs):\n        # TODO: is it better to pre-empt conflicts w/ manually-handled\n        # connect() kwargs (hostname, username, etc) here or in open()? We're\n        # doing open() for now in case e.g. someone manually modifies\n        # .connect_kwargs attributewise, but otherwise it feels better to do it\n        # early instead of late.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 41,
                  "endLine": 412,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n            self.host = self.ssh_config[\"hostname\"]\n\n        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n",
                    "rendered": {
                      "text": "        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n            self.host = self.ssh_config[\"hostname\"]\n\n        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n",
                      "markdown": "`        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n            self.host = self.ssh_config[\"hostname\"]\n\n        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 12,
                  "endLine": 410,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        self.original_host = host\n        #: The hostname of the target server.\n        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n            self.host = self.ssh_config[\"hostname\"]\n\n",
                    "rendered": {
                      "text": "        self.original_host = host\n        #: The hostname of the target server.\n        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n            self.host = self.ssh_config[\"hostname\"]\n\n",
                      "markdown": "`        self.original_host = host\n        #: The hostname of the target server.\n        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n            self.host = self.ssh_config[\"hostname\"]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 15,
                  "endLine": 408,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        self.ssh_config = self.config.base_ssh_config.lookup(host)\n\n        self.original_host = host\n        #: The hostname of the target server.\n        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n",
                    "rendered": {
                      "text": "        self.ssh_config = self.config.base_ssh_config.lookup(host)\n\n        self.original_host = host\n        #: The hostname of the target server.\n        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n",
                      "markdown": "`        self.ssh_config = self.config.base_ssh_config.lookup(host)\n\n        self.original_host = host\n        #: The hostname of the target server.\n        self.host = host\n        if \"hostname\" in self.ssh_config:\n            # TODO: log that this occurred?\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 26,
                  "endLine": 312,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            example::\n\n                c = Connection(\n                    host=\"hostname\",\n                    user=\"admin\",\n                    connect_kwargs={\n                        \"key_filename\": \"/home/myuser/.ssh/private.key\",\n",
                    "rendered": {
                      "text": "            example::\n\n                c = Connection(\n                    host=\"hostname\",\n                    user=\"admin\",\n                    connect_kwargs={\n                        \"key_filename\": \"/home/myuser/.ssh/private.key\",\n",
                      "markdown": "`            example::\n\n                c = Connection(\n                    host=\"hostname\",\n                    user=\"admin\",\n                    connect_kwargs={\n                        \"key_filename\": \"/home/myuser/.ssh/private.key\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 16,
                  "endLine": 225,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        Set up a new object representing a server connection.\n\n        :param str host:\n            the hostname (or IP address) of this connection.\n\n            May include shorthand for the ``user`` and/or ``port`` parameters,\n            of the form ``user@host``, ``host:port``, or ``user@host:port``.\n",
                    "rendered": {
                      "text": "        Set up a new object representing a server connection.\n\n        :param str host:\n            the hostname (or IP address) of this connection.\n\n            May include shorthand for the ``user`` and/or ``port`` parameters,\n            of the form ``user@host``, ``host:port``, or ``user@host:port``.\n",
                      "markdown": "`        Set up a new object representing a server connection.\n\n        :param str host:\n            the hostname (or IP address) of this connection.\n\n            May include shorthand for the ``user`` and/or ``port`` parameters,\n            of the form ``user@host``, ``host:port``, or ``user@host:port``.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 1108,
                  "startColumn": 40,
                  "endLine": 1108,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            # TODO: see above re: lack of a TunnelManager\n            # TODO: and/or also refactor with TunnelManager re: shutdown logic.\n            # E.g. maybe have a non-thread TunnelManager-alike with a method\n            # that acts as the callback? At least then there's a tiny bit more\n            # encapsulation...meh.\n            for tunnel in tunnels:\n                tunnel.finished.set()\n",
                    "rendered": {
                      "text": "            # TODO: see above re: lack of a TunnelManager\n            # TODO: and/or also refactor with TunnelManager re: shutdown logic.\n            # E.g. maybe have a non-thread TunnelManager-alike with a method\n            # that acts as the callback? At least then there's a tiny bit more\n            # encapsulation...meh.\n            for tunnel in tunnels:\n                tunnel.finished.set()\n",
                      "markdown": "`            # TODO: see above re: lack of a TunnelManager\n            # TODO: and/or also refactor with TunnelManager re: shutdown logic.\n            # E.g. maybe have a non-thread TunnelManager-alike with a method\n            # that acts as the callback? At least then there's a tiny bit more\n            # encapsulation...meh.\n            for tunnel in tunnels:\n                tunnel.finished.set()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 1088,
                  "startColumn": 65,
                  "endLine": 1088,
                  "endColumn": 69,
                  "snippet": {
                    "text": "            sock = socket.socket()\n            # TODO: handle connection failure such that channel, etc get closed\n            sock.connect((local_host, local_port))\n            # TODO: we don't actually need to generate the Events at our level,\n            # do we? Just let Tunnel.__init__ do it; all we do is \"press its\n            # button\" on shutdown...\n            tunnel = Tunnel(channel=channel, sock=sock, finished=Event())\n",
                    "rendered": {
                      "text": "            sock = socket.socket()\n            # TODO: handle connection failure such that channel, etc get closed\n            sock.connect((local_host, local_port))\n            # TODO: we don't actually need to generate the Events at our level,\n            # do we? Just let Tunnel.__init__ do it; all we do is \"press its\n            # button\" on shutdown...\n            tunnel = Tunnel(channel=channel, sock=sock, finished=Event())\n",
                      "markdown": "`            sock = socket.socket()\n            # TODO: handle connection failure such that channel, etc get closed\n            sock.connect((local_host, local_port))\n            # TODO: we don't actually need to generate the Events at our level,\n            # do we? Just let Tunnel.__init__ do it; all we do is \"press its\n            # button\" on shutdown...\n            tunnel = Tunnel(channel=channel, sock=sock, finished=Event())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 1069,
                  "startColumn": 37,
                  "endLine": 1069,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            local_port = remote_port\n        # Callback executes on each connection to the remote port and is given\n        # a Channel hooked up to said port. (We don't actually care about the\n        # source/dest host/port pairs at all; only whether the channel has data\n        # to read and suchlike.)\n        # We then pair that channel with a new 'outbound' socket connection to\n        # the local host/port being forwarded, in a new Tunnel.\n",
                    "rendered": {
                      "text": "            local_port = remote_port\n        # Callback executes on each connection to the remote port and is given\n        # a Channel hooked up to said port. (We don't actually care about the\n        # source/dest host/port pairs at all; only whether the channel has data\n        # to read and suchlike.)\n        # We then pair that channel with a new 'outbound' socket connection to\n        # the local host/port being forwarded, in a new Tunnel.\n",
                      "markdown": "`            local_port = remote_port\n        # Callback executes on each connection to the remote port and is given\n        # a Channel hooked up to said port. (We don't actually care about the\n        # source/dest host/port pairs at all; only whether the channel has data\n        # to read and suchlike.)\n        # We then pair that channel with a new 'outbound' socket connection to\n        # the local host/port being forwarded, in a new Tunnel.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 1025,
                  "startColumn": 19,
                  "endLine": 1025,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        Open a tunnel connecting ``remote_port`` to the local environment.\n\n        For example, say you're running a daemon in development mode on your\n        workstation at port 8080, and want to funnel traffic to it from a\n        production or staging environment.\n\n        In most situations this isn't possible as your office/home network\n",
                    "rendered": {
                      "text": "        Open a tunnel connecting ``remote_port`` to the local environment.\n\n        For example, say you're running a daemon in development mode on your\n        workstation at port 8080, and want to funnel traffic to it from a\n        production or staging environment.\n\n        In most situations this isn't possible as your office/home network\n",
                      "markdown": "`        Open a tunnel connecting ``remote_port`` to the local environment.\n\n        For example, say you're running a daemon in development mode on your\n        workstation at port 8080, and want to funnel traffic to it from a\n        production or staging environment.\n\n        In most situations this isn't possible as your office/home network\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 980,
                  "startColumn": 16,
                  "endLine": 980,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        )\n        manager.start()\n\n        # Return control to caller now that things ought to be operational\n        try:\n            yield\n        # Teardown once user exits block\n",
                    "rendered": {
                      "text": "        )\n        manager.start()\n\n        # Return control to caller now that things ought to be operational\n        try:\n            yield\n        # Teardown once user exits block\n",
                      "markdown": "`        )\n        manager.start()\n\n        # Return control to caller now that things ought to be operational\n        try:\n            yield\n        # Teardown once user exits block\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 853,
                  "startColumn": 9,
                  "endLine": 853,
                  "endColumn": 13,
                  "snippet": {
                    "text": "            else:\n                new_kwargs[key] = value\n        new_kwargs.update(pty=True)\n        # At this point, any leftover kwargs would be ignored, so yell instead\n        if kwargs:\n            err = \"shell() got unexpected keyword arguments: {!r}\"\n            raise TypeError(err.format(list(kwargs.keys())))\n",
                    "rendered": {
                      "text": "            else:\n                new_kwargs[key] = value\n        new_kwargs.update(pty=True)\n        # At this point, any leftover kwargs would be ignored, so yell instead\n        if kwargs:\n            err = \"shell() got unexpected keyword arguments: {!r}\"\n            raise TypeError(err.format(list(kwargs.keys())))\n",
                      "markdown": "`            else:\n                new_kwargs[key] = value\n        new_kwargs.update(pty=True)\n        # At this point, any leftover kwargs would be ignored, so yell instead\n        if kwargs:\n            err = \"shell() got unexpected keyword arguments: {!r}\"\n            raise TypeError(err.format(list(kwargs.keys())))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 37,
                  "endLine": 429,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        #: if any.\n        self.gateway = gateway if gateway is not None else self.get_gateway()\n        # NOTE: we use string above, vs ProxyCommand obj, to avoid spinning up\n        # the ProxyCommand subprocess at init time, vs open() time.\n        # TODO: make paramiko.proxy.ProxyCommand lazy instead?\n\n        if forward_agent is None:\n",
                    "rendered": {
                      "text": "        #: if any.\n        self.gateway = gateway if gateway is not None else self.get_gateway()\n        # NOTE: we use string above, vs ProxyCommand obj, to avoid spinning up\n        # the ProxyCommand subprocess at init time, vs open() time.\n        # TODO: make paramiko.proxy.ProxyCommand lazy instead?\n\n        if forward_agent is None:\n",
                      "markdown": "`        #: if any.\n        self.gateway = gateway if gateway is not None else self.get_gateway()\n        # NOTE: we use string above, vs ProxyCommand obj, to avoid spinning up\n        # the ProxyCommand subprocess at init time, vs open() time.\n        # TODO: make paramiko.proxy.ProxyCommand lazy instead?\n\n        if forward_agent is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 11,
                  "endLine": 282,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n            Default: ``None``, meaning no gatewaying will occur (unless\n            otherwise configured; if one wants to override a configured gateway\n            at runtime, specify ``gateway=False``.)\n\n            .. seealso:: :ref:`ssh-gateways`\n\n",
                    "rendered": {
                      "text": "\n            Default: ``None``, meaning no gatewaying will occur (unless\n            otherwise configured; if one wants to override a configured gateway\n            at runtime, specify ``gateway=False``.)\n\n            .. seealso:: :ref:`ssh-gateways`\n\n",
                      "markdown": "`\n            Default: ``None``, meaning no gatewaying will occur (unless\n            otherwise configured; if one wants to override a configured gateway\n            at runtime, specify ``gateway=False``.)\n\n            .. seealso:: :ref:`ssh-gateways`\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 63,
                  "endLine": 205,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    # TODO: should \"reopening\" an existing Connection object that has been\n    # closed, be allowed? (See e.g. how v1 detects closed/semi-closed\n    # connections & nukes them before creating a new client to the same host.)\n    # TODO: push some of this into paramiko.client.Client? e.g. expand what\n    # Client.exec_command does, it already allows configuring a subset of what\n    # we do / will eventually do / did in 1.x. It's silly to have to do\n    # .get_transport().open_session().\n",
                    "rendered": {
                      "text": "    # TODO: should \"reopening\" an existing Connection object that has been\n    # closed, be allowed? (See e.g. how v1 detects closed/semi-closed\n    # connections & nukes them before creating a new client to the same host.)\n    # TODO: push some of this into paramiko.client.Client? e.g. expand what\n    # Client.exec_command does, it already allows configuring a subset of what\n    # we do / will eventually do / did in 1.x. It's silly to have to do\n    # .get_transport().open_session().\n",
                      "markdown": "`    # TODO: should \"reopening\" an existing Connection object that has been\n    # closed, be allowed? (See e.g. how v1 detects closed/semi-closed\n    # connections & nukes them before creating a new client to the same host.)\n    # TODO: push some of this into paramiko.client.Client? e.g. expand what\n    # Client.exec_command does, it already allows configuring a subset of what\n    # we do / will eventually do / did in 1.x. It's silly to have to do\n    # .get_transport().open_session().\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 1029,
                  "startColumn": 53,
                  "endLine": 1029,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        production or staging environment.\n\n        In most situations this isn't possible as your office/home network\n        probably blocks inbound traffic. But you have SSH access to this\n        server, so you can temporarily make port 8080 on that server act like\n        port 8080 on your workstation::\n\n",
                    "rendered": {
                      "text": "        production or staging environment.\n\n        In most situations this isn't possible as your office/home network\n        probably blocks inbound traffic. But you have SSH access to this\n        server, so you can temporarily make port 8080 on that server act like\n        port 8080 on your workstation::\n\n",
                      "markdown": "`        production or staging environment.\n\n        In most situations this isn't possible as your office/home network\n        probably blocks inbound traffic. But you have SSH access to this\n        server, so you can temporarily make port 8080 on that server act like\n        port 8080 on your workstation::\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 47,
                  "endLine": 966,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            remote_port = local_port\n\n        # TunnelManager does all of the work, sitting in the background (so we\n        # can yield) and spawning threads every time somebody connects to our\n        # local port.\n        finished = Event()\n        manager = TunnelManager(\n",
                    "rendered": {
                      "text": "            remote_port = local_port\n\n        # TunnelManager does all of the work, sitting in the background (so we\n        # can yield) and spawning threads every time somebody connects to our\n        # local port.\n        finished = Event()\n        manager = TunnelManager(\n",
                      "markdown": "`            remote_port = local_port\n\n        # TunnelManager does all of the work, sitting in the background (so we\n        # can yield) and spawning threads every time somebody connects to our\n        # local port.\n        finished = Event()\n        manager = TunnelManager(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 927,
                  "startColumn": 20,
                  "endLine": 927,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n        For example, say you want to connect to a remote PostgreSQL database\n        which is locked down and only accessible via the system it's running\n        on. You have SSH access to this server, so you can temporarily make\n        port 5432 on your local system act like port 5432 on the server::\n\n            import psycopg2\n",
                    "rendered": {
                      "text": "\n        For example, say you want to connect to a remote PostgreSQL database\n        which is locked down and only accessible via the system it's running\n        on. You have SSH access to this server, so you can temporarily make\n        port 5432 on your local system act like port 5432 on the server::\n\n            import psycopg2\n",
                      "markdown": "`\n        For example, say you want to connect to a remote PostgreSQL database\n        which is locked down and only accessible via the system it's running\n        on. You have SSH access to this server, so you can temporarily make\n        port 5432 on your local system act like port 5432 on the server::\n\n            import psycopg2\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 878,
                  "startColumn": 65,
                  "endLine": 878,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        Return a `~paramiko.sftp_client.SFTPClient` object.\n\n        If called more than one time, memoizes the first result; thus, any\n        given `.Connection` instance will only ever have a single SFTP client,\n        and state (such as that managed by\n        `~paramiko.sftp_client.SFTPClient.chdir`) will be preserved.\n\n",
                    "rendered": {
                      "text": "        Return a `~paramiko.sftp_client.SFTPClient` object.\n\n        If called more than one time, memoizes the first result; thus, any\n        given `.Connection` instance will only ever have a single SFTP client,\n        and state (such as that managed by\n        `~paramiko.sftp_client.SFTPClient.chdir`) will be preserved.\n\n",
                      "markdown": "`        Return a `~paramiko.sftp_client.SFTPClient` object.\n\n        If called more than one time, memoizes the first result; thus, any\n        given `.Connection` instance will only ever have a single SFTP client,\n        and state (such as that managed by\n        `~paramiko.sftp_client.SFTPClient.chdir`) will be preserved.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 786,
                  "startColumn": 63,
                  "endLine": 786,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\n        This method is intended strictly for use cases where you can't know\n        what remote shell to invoke, or are connecting to a non-POSIX-server\n        environment such as a network appliance or other custom SSH server.\n        Nearly every other use case, including interactively-focused ones, will\n        be better served by using `run` plus an explicit remote shell command\n        (eg ``bash``).\n",
                    "rendered": {
                      "text": "\n        This method is intended strictly for use cases where you can't know\n        what remote shell to invoke, or are connecting to a non-POSIX-server\n        environment such as a network appliance or other custom SSH server.\n        Nearly every other use case, including interactively-focused ones, will\n        be better served by using `run` plus an explicit remote shell command\n        (eg ``bash``).\n",
                      "markdown": "`\n        This method is intended strictly for use cases where you can't know\n        what remote shell to invoke, or are connecting to a non-POSIX-server\n        environment such as a network appliance or other custom SSH server.\n        Nearly every other use case, including interactively-focused ones, will\n        be better served by using `run` plus an explicit remote shell command\n        (eg ``bash``).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 719,
                  "startColumn": 22,
                  "endLine": 719,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n        .. versionadded:: 2.0\n        .. versionchanged:: 3.0\n            Now closes SFTP sessions too (2.x required manually doing so).\n        \"\"\"\n        if self._sftp is not None:\n            self._sftp.close()\n",
                    "rendered": {
                      "text": "\n        .. versionadded:: 2.0\n        .. versionchanged:: 3.0\n            Now closes SFTP sessions too (2.x required manually doing so).\n        \"\"\"\n        if self._sftp is not None:\n            self._sftp.close()\n",
                      "markdown": "`\n        .. versionadded:: 2.0\n        .. versionchanged:: 3.0\n            Now closes SFTP sessions too (2.x required manually doing so).\n        \"\"\"\n        if self._sftp is not None:\n            self._sftp.close()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 27,
                  "endLine": 715,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n        If any SFTP sessions are open, they will also be closed.\n\n        If no connection or SFTP session is open, this method does nothing.\n\n        .. versionadded:: 2.0\n        .. versionchanged:: 3.0\n",
                    "rendered": {
                      "text": "\n        If any SFTP sessions are open, they will also be closed.\n\n        If no connection or SFTP session is open, this method does nothing.\n\n        .. versionadded:: 2.0\n        .. versionchanged:: 3.0\n",
                      "markdown": "`\n        If any SFTP sessions are open, they will also be closed.\n\n        If no connection or SFTP session is open, this method does nothing.\n\n        .. versionadded:: 2.0\n        .. versionchanged:: 3.0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 14,
                  "endLine": 713,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        \"\"\"\n        Terminate the network connection to the remote end, if open.\n\n        If any SFTP sessions are open, they will also be closed.\n\n        If no connection or SFTP session is open, this method does nothing.\n\n",
                    "rendered": {
                      "text": "        \"\"\"\n        Terminate the network connection to the remote end, if open.\n\n        If any SFTP sessions are open, they will also be closed.\n\n        If no connection or SFTP session is open, this method does nothing.\n\n",
                      "markdown": "`        \"\"\"\n        Terminate the network connection to the remote end, if open.\n\n        If any SFTP sessions are open, they will also be closed.\n\n        If no connection or SFTP session is open, this method does nothing.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 699,
                  "startColumn": 9,
                  "endLine": 699,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # TODO: and the inverse? allow users to supply their own socket/like\n        # object they got via $WHEREEVER?\n        # TODO: how best to expose timeout param? reuse general connection\n        # timeout from config?\n        return self.gateway.transport.open_channel(\n            kind=\"direct-tcpip\",\n            dest_addr=(self.host, int(self.port)),\n",
                    "rendered": {
                      "text": "        # TODO: and the inverse? allow users to supply their own socket/like\n        # object they got via $WHEREEVER?\n        # TODO: how best to expose timeout param? reuse general connection\n        # timeout from config?\n        return self.gateway.transport.open_channel(\n            kind=\"direct-tcpip\",\n            dest_addr=(self.host, int(self.port)),\n",
                      "markdown": "`        # TODO: and the inverse? allow users to supply their own socket/like\n        # object they got via $WHEREEVER?\n        # TODO: how best to expose timeout param? reuse general connection\n        # timeout from config?\n        return self.gateway.transport.open_channel(\n            kind=\"direct-tcpip\",\n            dest_addr=(self.host, int(self.port)),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 34,
                  "endLine": 698,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        # needs...\n        # TODO: and the inverse? allow users to supply their own socket/like\n        # object they got via $WHEREEVER?\n        # TODO: how best to expose timeout param? reuse general connection\n        # timeout from config?\n        return self.gateway.transport.open_channel(\n            kind=\"direct-tcpip\",\n",
                    "rendered": {
                      "text": "        # needs...\n        # TODO: and the inverse? allow users to supply their own socket/like\n        # object they got via $WHEREEVER?\n        # TODO: how best to expose timeout param? reuse general connection\n        # timeout from config?\n        return self.gateway.transport.open_channel(\n            kind=\"direct-tcpip\",\n",
                      "markdown": "`        # needs...\n        # TODO: and the inverse? allow users to supply their own socket/like\n        # object they got via $WHEREEVER?\n        # TODO: how best to expose timeout param? reuse general connection\n        # timeout from config?\n        return self.gateway.transport.open_channel(\n            kind=\"direct-tcpip\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 683,
                  "startColumn": 28,
                  "endLine": 683,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        # ProxyCommand is faster to set up, so do it first.\n        if isinstance(self.gateway, str):\n            # Leverage a dummy SSHConfig to ensure %h/%p/etc are parsed.\n            # TODO: use real SSH config once loading one properly is\n            # implemented.\n            ssh_conf = SSHConfig()\n            dummy = \"Host {}\\n    ProxyCommand {}\"\n",
                    "rendered": {
                      "text": "        # ProxyCommand is faster to set up, so do it first.\n        if isinstance(self.gateway, str):\n            # Leverage a dummy SSHConfig to ensure %h/%p/etc are parsed.\n            # TODO: use real SSH config once loading one properly is\n            # implemented.\n            ssh_conf = SSHConfig()\n            dummy = \"Host {}\\n    ProxyCommand {}\"\n",
                      "markdown": "`        # ProxyCommand is faster to set up, so do it first.\n        if isinstance(self.gateway, str):\n            # Leverage a dummy SSHConfig to ensure %h/%p/etc are parsed.\n            # TODO: use real SSH config once loading one properly is\n            # implemented.\n            ssh_conf = SSHConfig()\n            dummy = \"Host {}\\n    ProxyCommand {}\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 591,
                  "startColumn": 19,
                  "endLine": 591,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    def open(self):\n        \"\"\"\n        Initiate an SSH connection to the host/port this object is bound to.\n\n        This may include activating the configured gateway connection, if one\n        is set.\n",
                    "rendered": {
                      "text": "\n    def open(self):\n        \"\"\"\n        Initiate an SSH connection to the host/port this object is bound to.\n\n        This may include activating the configured gateway connection, if one\n        is set.\n",
                      "markdown": "`\n    def open(self):\n        \"\"\"\n        Initiate an SSH connection to the host/port this object is bound to.\n\n        This may include activating the configured gateway connection, if one\n        is set.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 46,
                  "endLine": 510,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            prev_gw = None\n            for hop in hops:\n                # Short-circuit if we appear to be our own proxy, which would\n                # be a RecursionError. Implies SSH config wildcards.\n                # TODO: in an ideal world we'd check user/port too in case they\n                # differ, but...seriously? They can file a PR with those extra\n                # half dozen test cases in play, E_NOTIME\n",
                    "rendered": {
                      "text": "            prev_gw = None\n            for hop in hops:\n                # Short-circuit if we appear to be our own proxy, which would\n                # be a RecursionError. Implies SSH config wildcards.\n                # TODO: in an ideal world we'd check user/port too in case they\n                # differ, but...seriously? They can file a PR with those extra\n                # half dozen test cases in play, E_NOTIME\n",
                      "markdown": "`            prev_gw = None\n            for hop in hops:\n                # Short-circuit if we appear to be our own proxy, which would\n                # be a RecursionError. Implies SSH config wildcards.\n                # TODO: in an ideal world we'd check user/port too in case they\n                # differ, but...seriously? They can file a PR with those extra\n                # half dozen test cases in play, E_NOTIME\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 9,
                  "endLine": 501,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        return final_kwargs\n\n    def get_gateway(self):\n        # SSH config wins over Invoke-style config\n        if \"proxyjump\" in self.ssh_config:\n            # Reverse hop1,hop2,hop3 style ProxyJump directive so we start\n            # with the final (itself non-gatewayed) hop and work up to\n",
                    "rendered": {
                      "text": "        return final_kwargs\n\n    def get_gateway(self):\n        # SSH config wins over Invoke-style config\n        if \"proxyjump\" in self.ssh_config:\n            # Reverse hop1,hop2,hop3 style ProxyJump directive so we start\n            # with the final (itself non-gatewayed) hop and work up to\n",
                      "markdown": "`        return final_kwargs\n\n    def get_gateway(self):\n        # SSH config wins over Invoke-style config\n        if \"proxyjump\" in self.ssh_config:\n            # Reverse hop1,hop2,hop3 style ProxyJump directive so we start\n            # with the final (itself non-gatewayed) hop and work up to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 46,
                  "endLine": 487,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        final_kwargs = constructor_kwargs or config_kwargs\n\n        # Key filename: merge, in order, config (which includes CLI flags),\n        # then constructor kwargs, and finally SSH config file data.\n        # Make sure all are normalized to list as well!\n        final_keys = []\n        for value in (config_keys, constructor_keys, ssh_config_keys):\n",
                    "rendered": {
                      "text": "        final_kwargs = constructor_kwargs or config_kwargs\n\n        # Key filename: merge, in order, config (which includes CLI flags),\n        # then constructor kwargs, and finally SSH config file data.\n        # Make sure all are normalized to list as well!\n        final_keys = []\n        for value in (config_keys, constructor_keys, ssh_config_keys):\n",
                      "markdown": "`        final_kwargs = constructor_kwargs or config_kwargs\n\n        # Key filename: merge, in order, config (which includes CLI flags),\n        # then constructor kwargs, and finally SSH config file data.\n        # Make sure all are normalized to list as well!\n        final_keys = []\n        for value in (config_keys, constructor_keys, ssh_config_keys):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 57,
                  "endLine": 467,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        if inline_ssh_env is None:\n            inline_ssh_env = self.config.inline_ssh_env\n        #: Whether to construct remote command lines with env vars prefixed\n        #: inline.\n        self.inline_ssh_env = inline_ssh_env\n\n",
                    "rendered": {
                      "text": "\n        if inline_ssh_env is None:\n            inline_ssh_env = self.config.inline_ssh_env\n        #: Whether to construct remote command lines with env vars prefixed\n        #: inline.\n        self.inline_ssh_env = inline_ssh_env\n\n",
                      "markdown": "`\n        if inline_ssh_env is None:\n            inline_ssh_env = self.config.inline_ssh_env\n        #: Whether to construct remote command lines with env vars prefixed\n        #: inline.\n        self.inline_ssh_env = inline_ssh_env\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 21,
                  "endLine": 450,
                  "snippet": {
                    "text": "            )\n        if connect_timeout is not None:\n            connect_timeout = int(connect_timeout)\n        #: Connection timeout\n        self.connect_timeout = connect_timeout\n\n        #: Keyword arguments given to `paramiko.client.SSHClient.connect` when\n        #: `open` is called.\n",
                    "rendered": {
                      "text": "            )\n        if connect_timeout is not None:\n            connect_timeout = int(connect_timeout)\n        #: Connection timeout\n        self.connect_timeout = connect_timeout\n\n        #: Keyword arguments given to `paramiko.client.SSHClient.connect` when\n        #: `open` is called.\n",
                      "markdown": "`            )\n        if connect_timeout is not None:\n            connect_timeout = int(connect_timeout)\n        #: Connection timeout\n        self.connect_timeout = connect_timeout\n\n        #: Keyword arguments given to `paramiko.client.SSHClient.connect` when\n        #: `open` is called.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 32,
                  "endLine": 417,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n        # TODO: is it _ever_ possible to give an empty user value (e.g.\n        # user='')? E.g. do some SSH server specs allow for that?\n\n        #: The network port to connect on.\n        self.port = port or int(self.ssh_config.get(\"port\", self.config.port))\n",
                    "rendered": {
                      "text": "        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n        # TODO: is it _ever_ possible to give an empty user value (e.g.\n        # user='')? E.g. do some SSH server specs allow for that?\n\n        #: The network port to connect on.\n        self.port = port or int(self.ssh_config.get(\"port\", self.config.port))\n",
                      "markdown": "`        #: The username this connection will use to connect to the remote end.\n        self.user = user or self.ssh_config.get(\"user\", self.config.user)\n        # TODO: is it _ever_ possible to give an empty user value (e.g.\n        # user='')? E.g. do some SSH server specs allow for that?\n\n        #: The network port to connect on.\n        self.port = port or int(self.ssh_config.get(\"port\", self.config.port))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 23,
                  "endLine": 404,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n        # NOTE: we load SSH config data as early as possible as it has\n        # potential to affect nearly every other attribute.\n        #: The per-host SSH config data, if any. (See :ref:`ssh-config`.)\n        self.ssh_config = self.config.base_ssh_config.lookup(host)\n\n        self.original_host = host\n",
                    "rendered": {
                      "text": "\n        # NOTE: we load SSH config data as early as possible as it has\n        # potential to affect nearly every other attribute.\n        #: The per-host SSH config data, if any. (See :ref:`ssh-config`.)\n        self.ssh_config = self.config.base_ssh_config.lookup(host)\n\n        self.original_host = host\n",
                      "markdown": "`\n        # NOTE: we load SSH config data as early as possible as it has\n        # potential to affect nearly every other attribute.\n        #: The per-host SSH config data, if any. (See :ref:`ssh-config`.)\n        self.ssh_config = self.config.base_ssh_config.lookup(host)\n\n        self.original_host = host\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 23,
                  "endLine": 402,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                raise ValueError(err.format(\"port\"))\n            port = shorthand[\"port\"]\n\n        # NOTE: we load SSH config data as early as possible as it has\n        # potential to affect nearly every other attribute.\n        #: The per-host SSH config data, if any. (See :ref:`ssh-config`.)\n        self.ssh_config = self.config.base_ssh_config.lookup(host)\n",
                    "rendered": {
                      "text": "                raise ValueError(err.format(\"port\"))\n            port = shorthand[\"port\"]\n\n        # NOTE: we load SSH config data as early as possible as it has\n        # potential to affect nearly every other attribute.\n        #: The per-host SSH config data, if any. (See :ref:`ssh-config`.)\n        self.ssh_config = self.config.base_ssh_config.lookup(host)\n",
                      "markdown": "`                raise ValueError(err.format(\"port\"))\n            port = shorthand[\"port\"]\n\n        # NOTE: we load SSH config data as early as possible as it has\n        # potential to affect nearly every other attribute.\n        #: The per-host SSH config data, if any. (See :ref:`ssh-config`.)\n        self.ssh_config = self.config.base_ssh_config.lookup(host)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 48,
                  "endLine": 348,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n            .. note::\n                When serializing into prefixed ``FOO=bar`` format, we apply the\n                builtin `sorted` function to the env dictionary's keys, to\n                remove what would otherwise be ambiguous/arbitrary ordering.\n\n            .. note::\n",
                    "rendered": {
                      "text": "\n            .. note::\n                When serializing into prefixed ``FOO=bar`` format, we apply the\n                builtin `sorted` function to the env dictionary's keys, to\n                remove what would otherwise be ambiguous/arbitrary ordering.\n\n            .. note::\n",
                      "markdown": "`\n            .. note::\n                When serializing into prefixed ``FOO=bar`` format, we apply the\n                builtin `sorted` function to the env dictionary's keys, to\n                remove what would otherwise be ambiguous/arbitrary ordering.\n\n            .. note::\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 69,
                  "endLine": 325,
                  "snippet": {
                    "text": "        :param bool inline_ssh_env:\n            Whether to send environment variables \"inline\" as prefixes in front\n            of command strings (``export VARNAME=value && mycommand here``;\n            this is the default behavior), or submit them through the SSH\n            protocol itself.\n\n            In Fabric 2.x this defaulted to ``False`` (try using the protocol\n            behavior), but in 3.x it changed to ``True`` due to the simple fact\n",
                    "rendered": {
                      "text": "        :param bool inline_ssh_env:\n            Whether to send environment variables \"inline\" as prefixes in front\n            of command strings (``export VARNAME=value && mycommand here``;\n            this is the default behavior), or submit them through the SSH\n            protocol itself.\n\n            In Fabric 2.x this defaulted to ``False`` (try using the protocol\n            behavior), but in 3.x it changed to ``True`` due to the simple fact\n",
                      "markdown": "`        :param bool inline_ssh_env:\n            Whether to send environment variables \"inline\" as prefixes in front\n            of command strings (``export VARNAME=value && mycommand here``;\n            this is the default behavior), or submit them through the SSH\n            protocol itself.\n\n            In Fabric 2.x this defaulted to ``False`` (try using the protocol\n            behavior), but in 3.x it changed to ``True`` due to the simple fact\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 29,
                  "endLine": 287,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            .. seealso:: :ref:`ssh-gateways`\n\n        :param bool forward_agent:\n            Whether to enable SSH agent forwarding.\n\n            Default: ``config.forward_agent``.\n\n",
                    "rendered": {
                      "text": "            .. seealso:: :ref:`ssh-gateways`\n\n        :param bool forward_agent:\n            Whether to enable SSH agent forwarding.\n\n            Default: ``config.forward_agent``.\n\n",
                      "markdown": "`            .. seealso:: :ref:`ssh-gateways`\n\n        :param bool forward_agent:\n            Whether to enable SSH agent forwarding.\n\n            Default: ``config.forward_agent``.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 39,
                  "endLine": 264,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n        :param config:\n            configuration settings to use when executing methods on this\n            `.Connection` (e.g. default SSH port and so forth).\n\n            Should be a `.Config` or an `invoke.config.Config`\n            (which will be turned into a `.Config`).\n",
                    "rendered": {
                      "text": "\n        :param config:\n            configuration settings to use when executing methods on this\n            `.Connection` (e.g. default SSH port and so forth).\n\n            Should be a `.Config` or an `invoke.config.Config`\n            (which will be turned into a `.Config`).\n",
                      "markdown": "`\n        :param config:\n            configuration settings to use when executing methods on this\n            `.Connection` (e.g. default SSH port and so forth).\n\n            Should be a `.Config` or an `invoke.config.Config`\n            (which will be turned into a `.Config`).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 27,
                  "endLine": 246,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                In all cases, the original value of ``host`` is preserved as\n                the ``original_host`` attribute.\n\n                Thus, given SSH config like so::\n\n                    Host myalias\n                        Hostname realhostname\n",
                    "rendered": {
                      "text": "                In all cases, the original value of ``host`` is preserved as\n                the ``original_host`` attribute.\n\n                Thus, given SSH config like so::\n\n                    Host myalias\n                        Hostname realhostname\n",
                      "markdown": "`                In all cases, the original value of ``host`` is preserved as\n                the ``original_host`` attribute.\n\n                Thus, given SSH config like so::\n\n                    Host myalias\n                        Hostname realhostname\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 63,
                  "endLine": 238,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                explicit ``port`` parameter instead.\n\n            .. note::\n                If ``host`` matches a ``Host`` clause in loaded SSH config\n                data, and that ``Host`` clause contains a ``Hostname``\n                directive, the resulting `.Connection` object will behave as if\n                ``host`` is equal to that ``Hostname`` value.\n",
                    "rendered": {
                      "text": "                explicit ``port`` parameter instead.\n\n            .. note::\n                If ``host`` matches a ``Host`` clause in loaded SSH config\n                data, and that ``Host`` clause contains a ``Hostname``\n                directive, the resulting `.Connection` object will behave as if\n                ``host`` is equal to that ``Hostname`` value.\n",
                      "markdown": "`                explicit ``port`` parameter instead.\n\n            .. note::\n                If ``host`` matches a ``Host`` clause in loaded SSH config\n                data, and that ``Host`` clause contains a ``Hostname``\n                directive, the resulting `.Connection` object will behave as if\n                ``host`` is equal to that ``Hostname`` value.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 28,
                  "endLine": 225,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        Set up a new object representing a server connection.\n\n        :param str host:\n            the hostname (or IP address) of this connection.\n\n            May include shorthand for the ``user`` and/or ``port`` parameters,\n            of the form ``user@host``, ``host:port``, or ``user@host:port``.\n",
                    "rendered": {
                      "text": "        Set up a new object representing a server connection.\n\n        :param str host:\n            the hostname (or IP address) of this connection.\n\n            May include shorthand for the ``user`` and/or ``port`` parameters,\n            of the form ``user@host``, ``host:port``, or ``user@host:port``.\n",
                      "markdown": "`        Set up a new object representing a server connection.\n\n        :param str host:\n            the hostname (or IP address) of this connection.\n\n            May include shorthand for the ``user`` and/or ``port`` parameters,\n            of the form ``user@host``, ``host:port``, or ``user@host:port``.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 63,
                  "endLine": 205,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    # TODO: should \"reopening\" an existing Connection object that has been\n    # closed, be allowed? (See e.g. how v1 detects closed/semi-closed\n    # connections & nukes them before creating a new client to the same host.)\n    # TODO: push some of this into paramiko.client.Client? e.g. expand what\n    # Client.exec_command does, it already allows configuring a subset of what\n    # we do / will eventually do / did in 1.x. It's silly to have to do\n    # .get_transport().open_session().\n",
                    "rendered": {
                      "text": "    # TODO: should \"reopening\" an existing Connection object that has been\n    # closed, be allowed? (See e.g. how v1 detects closed/semi-closed\n    # connections & nukes them before creating a new client to the same host.)\n    # TODO: push some of this into paramiko.client.Client? e.g. expand what\n    # Client.exec_command does, it already allows configuring a subset of what\n    # we do / will eventually do / did in 1.x. It's silly to have to do\n    # .get_transport().open_session().\n",
                      "markdown": "`    # TODO: should \"reopening\" an existing Connection object that has been\n    # closed, be allowed? (See e.g. how v1 detects closed/semi-closed\n    # connections & nukes them before creating a new client to the same host.)\n    # TODO: push some of this into paramiko.client.Client? e.g. expand what\n    # Client.exec_command does, it already allows configuring a subset of what\n    # we do / will eventually do / did in 1.x. It's silly to have to do\n    # .get_transport().open_session().\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 60,
                  "endLine": 190,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        if not shorthand[\"port\"]:\n            # Run port through int(); v1 inexplicably has a string default...\n            kwargs.setdefault(\"port\", int(env.port))\n        # key_filename defaults to None in v1, but in v2, we expect it to be\n        # either unset, or set to a list. Thus, we only pull it over if it is\n        # not None.\n        if env.key_filename is not None:\n",
                    "rendered": {
                      "text": "        if not shorthand[\"port\"]:\n            # Run port through int(); v1 inexplicably has a string default...\n            kwargs.setdefault(\"port\", int(env.port))\n        # key_filename defaults to None in v1, but in v2, we expect it to be\n        # either unset, or set to a list. Thus, we only pull it over if it is\n        # not None.\n        if env.key_filename is not None:\n",
                      "markdown": "`        if not shorthand[\"port\"]:\n            # Run port through int(); v1 inexplicably has a string default...\n            kwargs.setdefault(\"port\", int(env.port))\n        # key_filename defaults to None in v1, but in v2, we expect it to be\n        # either unset, or set to a list. Thus, we only pull it over if it is\n        # not None.\n        if env.key_filename is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 28,
                  "endLine": 174,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        # Our only requirement is a non-empty host_string\n        if not env.host_string:\n            raise InvalidV1Env(\n                \"Supplied v1 env has an empty `host_string` value! Please make sure you're calling Connection.from_v1 within a connected Fabric 1 session.\"  # noqa\n            )\n        # TODO: detect collisions with kwargs & except instead of overwriting?\n        # (More Zen of Python compliant, but also, effort, and also, makes it\n",
                    "rendered": {
                      "text": "        # Our only requirement is a non-empty host_string\n        if not env.host_string:\n            raise InvalidV1Env(\n                \"Supplied v1 env has an empty `host_string` value! Please make sure you're calling Connection.from_v1 within a connected Fabric 1 session.\"  # noqa\n            )\n        # TODO: detect collisions with kwargs & except instead of overwriting?\n        # (More Zen of Python compliant, but also, effort, and also, makes it\n",
                      "markdown": "`        # Our only requirement is a non-empty host_string\n        if not env.host_string:\n            raise InvalidV1Env(\n                \"Supplied v1 env has an empty `host_string` value! Please make sure you're calling Connection.from_v1 within a connected Fabric 1 session.\"  # noqa\n            )\n        # TODO: detect collisions with kwargs & except instead of overwriting?\n        # (More Zen of Python compliant, but also, effort, and also, makes it\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 12,
                  "endLine": 112,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      stating ``user: admin`` (or ``{\"user\": \"admin\"}``, depending on config\n      format.) Then ``Connection('myhost')`` would implicitly have a ``user``\n      of ``admin``.\n    - Use an SSH config file containing ``User admin`` within any applicable\n      ``Host`` header (``Host myhost``, ``Host *``, etc.) Again,\n      ``Connection('myhost')`` will default to an ``admin`` user.\n    - Leverage host-parameter shorthand (described in `.Config.__init__`), i.e.\n",
                    "rendered": {
                      "text": "      stating ``user: admin`` (or ``{\"user\": \"admin\"}``, depending on config\n      format.) Then ``Connection('myhost')`` would implicitly have a ``user``\n      of ``admin``.\n    - Use an SSH config file containing ``User admin`` within any applicable\n      ``Host`` header (``Host myhost``, ``Host *``, etc.) Again,\n      ``Connection('myhost')`` will default to an ``admin`` user.\n    - Leverage host-parameter shorthand (described in `.Config.__init__`), i.e.\n",
                      "markdown": "`      stating ``user: admin`` (or ``{\"user\": \"admin\"}``, depending on config\n      format.) Then ``Connection('myhost')`` would implicitly have a ``user``\n      of ``admin``.\n    - Use an SSH config file containing ``User admin`` within any applicable\n      ``Host`` header (``Host myhost``, ``Host *``, etc.) Again,\n      ``Connection('myhost')`` will default to an ``admin`` user.\n    - Leverage host-parameter shorthand (described in `.Config.__init__`), i.e.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 58,
                  "endLine": 108,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    connection to ``admin@myhost``, one could:\n\n    - Use any built-in config mechanism, such as ``/etc/fabric.yml``,\n      ``~/.fabric.json``, collection-driven configuration, env vars, etc,\n      stating ``user: admin`` (or ``{\"user\": \"admin\"}``, depending on config\n      format.) Then ``Connection('myhost')`` would implicitly have a ``user``\n      of ``admin``.\n",
                    "rendered": {
                      "text": "    connection to ``admin@myhost``, one could:\n\n    - Use any built-in config mechanism, such as ``/etc/fabric.yml``,\n      ``~/.fabric.json``, collection-driven configuration, env vars, etc,\n      stating ``user: admin`` (or ``{\"user\": \"admin\"}``, depending on config\n      format.) Then ``Connection('myhost')`` would implicitly have a ``user``\n      of ``admin``.\n",
                      "markdown": "`    connection to ``admin@myhost``, one could:\n\n    - Use any built-in config mechanism, such as ``/etc/fabric.yml``,\n      ``~/.fabric.json``, collection-driven configuration, env vars, etc,\n      stating ``user: admin`` (or ``{\"user\": \"admin\"}``, depending on config\n      format.) Then ``Connection('myhost')`` would implicitly have a ``user``\n      of ``admin``.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 40,
                  "endLine": 65,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n    .. note::\n        Many SSH specific options -- such as specifying private keys and\n        passphrases, timeouts, disabling SSH agents, etc -- are handled\n        directly by Paramiko and should be specified via the\n        :ref:`connect_kwargs argument <connect_kwargs-arg>` of the constructor.\n\n",
                    "rendered": {
                      "text": "\n    .. note::\n        Many SSH specific options -- such as specifying private keys and\n        passphrases, timeouts, disabling SSH agents, etc -- are handled\n        directly by Paramiko and should be specified via the\n        :ref:`connect_kwargs argument <connect_kwargs-arg>` of the constructor.\n\n",
                      "markdown": "`\n    .. note::\n        Many SSH specific options -- such as specifying private keys and\n        passphrases, timeouts, disabling SSH agents, etc -- are handled\n        directly by Paramiko and should be specified via the\n        :ref:`connect_kwargs argument <connect_kwargs-arg>` of the constructor.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 12,
                  "endLine": 64,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    .. _connect_kwargs:\n\n    .. note::\n        Many SSH specific options -- such as specifying private keys and\n        passphrases, timeouts, disabling SSH agents, etc -- are handled\n        directly by Paramiko and should be specified via the\n        :ref:`connect_kwargs argument <connect_kwargs-arg>` of the constructor.\n",
                    "rendered": {
                      "text": "    .. _connect_kwargs:\n\n    .. note::\n        Many SSH specific options -- such as specifying private keys and\n        passphrases, timeouts, disabling SSH agents, etc -- are handled\n        directly by Paramiko and should be specified via the\n        :ref:`connect_kwargs argument <connect_kwargs-arg>` of the constructor.\n",
                      "markdown": "`    .. _connect_kwargs:\n\n    .. note::\n        Many SSH specific options -- such as specifying private keys and\n        passphrases, timeouts, disabling SSH agents, etc -- are handled\n        directly by Paramiko and should be specified via the\n        :ref:`connect_kwargs argument <connect_kwargs-arg>` of the constructor.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/connection.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 22,
                  "endLine": 51,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nclass Connection(Context):\n    \"\"\"\n    A connection to an SSH daemon, with methods for commands and file transfer.\n\n    **Basics**\n\n",
                    "rendered": {
                      "text": "\nclass Connection(Context):\n    \"\"\"\n    A connection to an SSH daemon, with methods for commands and file transfer.\n\n    **Basics**\n\n",
                      "markdown": "`\nclass Connection(Context):\n    \"\"\"\n    A connection to an SSH daemon, with methods for commands and file transfer.\n\n    **Basics**\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 21,
                  "endLine": 139,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        # TODO: consider moving more stuff out of __init__ and into methods so\n        # there's less of this sort of splat-args + pop thing? Eh.\n        ssh_config = kwargs.pop(\"ssh_config\", None)\n        lazy = kwargs.get(\"lazy\", False)\n        self.set_runtime_ssh_path(kwargs.pop(\"runtime_ssh_path\", None))\n        system_path = kwargs.pop(\"system_ssh_path\", \"/etc/ssh/ssh_config\")\n        self._set(_system_ssh_path=system_path)\n",
                    "rendered": {
                      "text": "        # TODO: consider moving more stuff out of __init__ and into methods so\n        # there's less of this sort of splat-args + pop thing? Eh.\n        ssh_config = kwargs.pop(\"ssh_config\", None)\n        lazy = kwargs.get(\"lazy\", False)\n        self.set_runtime_ssh_path(kwargs.pop(\"runtime_ssh_path\", None))\n        system_path = kwargs.pop(\"system_ssh_path\", \"/etc/ssh/ssh_config\")\n        self._set(_system_ssh_path=system_path)\n",
                      "markdown": "`        # TODO: consider moving more stuff out of __init__ and into methods so\n        # there's less of this sort of splat-args + pop thing? Eh.\n        ssh_config = kwargs.pop(\"ssh_config\", None)\n        lazy = kwargs.get(\"lazy\", False)\n        self.set_runtime_ssh_path(kwargs.pop(\"runtime_ssh_path\", None))\n        system_path = kwargs.pop(\"system_ssh_path\", \"/etc/ssh/ssh_config\")\n        self._set(_system_ssh_path=system_path)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 25,
                  "endLine": 239,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        Trigger loading of configured SSH config file paths.\n\n        Expects that ``base_ssh_config`` has already been set to an\n        `~paramiko.config.SSHConfig` object.\n\n        :returns: ``None``.\n        \"\"\"\n",
                    "rendered": {
                      "text": "        Trigger loading of configured SSH config file paths.\n\n        Expects that ``base_ssh_config`` has already been set to an\n        `~paramiko.config.SSHConfig` object.\n\n        :returns: ``None``.\n        \"\"\"\n",
                      "markdown": "`        Trigger loading of configured SSH config file paths.\n\n        Expects that ``base_ssh_config`` has already been set to an\n        `~paramiko.config.SSHConfig` object.\n\n        :returns: ``None``.\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 41,
                  "endLine": 189,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        # levels have been loaded that anyone wanting to transmit this info\n        # from a 'vanilla' Invoke config, has gotten it set.)\n        if self.ssh_config_path:\n            self._runtime_ssh_path = self.ssh_config_path\n        # Load files from disk if we weren't given an explicit SSHConfig in\n        # __init__\n        if not self._given_explicit_object:\n",
                    "rendered": {
                      "text": "        # levels have been loaded that anyone wanting to transmit this info\n        # from a 'vanilla' Invoke config, has gotten it set.)\n        if self.ssh_config_path:\n            self._runtime_ssh_path = self.ssh_config_path\n        # Load files from disk if we weren't given an explicit SSHConfig in\n        # __init__\n        if not self._given_explicit_object:\n",
                      "markdown": "`        # levels have been loaded that anyone wanting to transmit this info\n        # from a 'vanilla' Invoke config, has gotten it set.)\n        if self.ssh_config_path:\n            self._runtime_ssh_path = self.ssh_config_path\n        # Load files from disk if we weren't given an explicit SSHConfig in\n        # __init__\n        if not self._given_explicit_object:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 15,
                  "endLine": 188,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        # Update the runtime SSH config path (assumes enough regular config\n        # levels have been loaded that anyone wanting to transmit this info\n        # from a 'vanilla' Invoke config, has gotten it set.)\n        if self.ssh_config_path:\n            self._runtime_ssh_path = self.ssh_config_path\n        # Load files from disk if we weren't given an explicit SSHConfig in\n        # __init__\n",
                    "rendered": {
                      "text": "        # Update the runtime SSH config path (assumes enough regular config\n        # levels have been loaded that anyone wanting to transmit this info\n        # from a 'vanilla' Invoke config, has gotten it set.)\n        if self.ssh_config_path:\n            self._runtime_ssh_path = self.ssh_config_path\n        # Load files from disk if we weren't given an explicit SSHConfig in\n        # __init__\n",
                      "markdown": "`        # Update the runtime SSH config path (assumes enough regular config\n        # levels have been loaded that anyone wanting to transmit this info\n        # from a 'vanilla' Invoke config, has gotten it set.)\n        if self.ssh_config_path:\n            self._runtime_ssh_path = self.ssh_config_path\n        # Load files from disk if we weren't given an explicit SSHConfig in\n        # __init__\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 64,
                  "endLine": 143,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        self.set_runtime_ssh_path(kwargs.pop(\"runtime_ssh_path\", None))\n        system_path = kwargs.pop(\"system_ssh_path\", \"/etc/ssh/ssh_config\")\n        self._set(_system_ssh_path=system_path)\n        self._set(_user_ssh_path=kwargs.pop(\"user_ssh_path\", \"~/.ssh/config\"))\n\n        # Record whether we were given an explicit object (so other steps know\n        # whether to bother loading from disk or not)\n",
                    "rendered": {
                      "text": "        self.set_runtime_ssh_path(kwargs.pop(\"runtime_ssh_path\", None))\n        system_path = kwargs.pop(\"system_ssh_path\", \"/etc/ssh/ssh_config\")\n        self._set(_system_ssh_path=system_path)\n        self._set(_user_ssh_path=kwargs.pop(\"user_ssh_path\", \"~/.ssh/config\"))\n\n        # Record whether we were given an explicit object (so other steps know\n        # whether to bother loading from disk or not)\n",
                      "markdown": "`        self.set_runtime_ssh_path(kwargs.pop(\"runtime_ssh_path\", None))\n        system_path = kwargs.pop(\"system_ssh_path\", \"/etc/ssh/ssh_config\")\n        self._set(_system_ssh_path=system_path)\n        self._set(_user_ssh_path=kwargs.pop(\"user_ssh_path\", \"~/.ssh/config\"))\n\n        # Record whether we were given an explicit object (so other steps know\n        # whether to bother loading from disk or not)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 16,
                  "endLine": 125,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n        :param str user_ssh_path:\n            Location of the user-level SSH config file. Default:\n            ``~/.ssh/config``.\n\n        :param bool lazy:\n            Has the same meaning as the parent class' ``lazy``, but\n",
                    "rendered": {
                      "text": "\n        :param str user_ssh_path:\n            Location of the user-level SSH config file. Default:\n            ``~/.ssh/config``.\n\n        :param bool lazy:\n            Has the same meaning as the parent class' ``lazy``, but\n",
                      "markdown": "`\n        :param str user_ssh_path:\n            Location of the user-level SSH config file. Default:\n            ``~/.ssh/config``.\n\n        :param bool lazy:\n            Has the same meaning as the parent class' ``lazy``, but\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 44,
                  "endLine": 112,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        new to this subclass are listed below.\n\n        :param ssh_config:\n            Custom/explicit `paramiko.config.SSHConfig` object. If given,\n            prevents loading of any SSH config files. Default: ``None``.\n\n        :param str runtime_ssh_path:\n",
                    "rendered": {
                      "text": "        new to this subclass are listed below.\n\n        :param ssh_config:\n            Custom/explicit `paramiko.config.SSHConfig` object. If given,\n            prevents loading of any SSH config files. Default: ``None``.\n\n        :param str runtime_ssh_path:\n",
                      "markdown": "`        new to this subclass are listed below.\n\n        :param ssh_config:\n            Custom/explicit `paramiko.config.SSHConfig` object. If given,\n            prevents loading of any SSH config files. Default: ``None``.\n\n        :param str runtime_ssh_path:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 26,
                  "endLine": 95,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n            data[\"sudo\"][\"password\"] = passwd\n        data[\"sudo\"].setdefault(\"prompt\", env.sudo_prompt)\n        data[\"timeouts\"].setdefault(\"connect\", env.timeout)\n        data.setdefault(\"load_ssh_configs\", env.use_ssh_config)\n",
                    "rendered": {
                      "text": "        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n            data[\"sudo\"][\"password\"] = passwd\n        data[\"sudo\"].setdefault(\"prompt\", env.sudo_prompt)\n        data[\"timeouts\"].setdefault(\"connect\", env.timeout)\n        data.setdefault(\"load_ssh_configs\", env.use_ssh_config)\n",
                      "markdown": "`        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n            data[\"sudo\"][\"password\"] = passwd\n        data[\"sudo\"].setdefault(\"prompt\", env.sudo_prompt)\n        data[\"timeouts\"].setdefault(\"connect\", env.timeout)\n        data.setdefault(\"load_ssh_configs\", env.use_ssh_config)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 29,
                  "endLine": 94,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n            data[\"sudo\"][\"password\"] = passwd\n        data[\"sudo\"].setdefault(\"prompt\", env.sudo_prompt)\n        data[\"timeouts\"].setdefault(\"connect\", env.timeout)\n",
                    "rendered": {
                      "text": "        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n            data[\"sudo\"][\"password\"] = passwd\n        data[\"sudo\"].setdefault(\"prompt\", env.sudo_prompt)\n        data[\"timeouts\"].setdefault(\"connect\", env.timeout)\n",
                      "markdown": "`        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n            data[\"sudo\"][\"password\"] = passwd\n        data[\"sudo\"].setdefault(\"prompt\", env.sudo_prompt)\n        data[\"timeouts\"].setdefault(\"connect\", env.timeout)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 43,
                  "endLine": 93,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n            data[\"sudo\"][\"password\"] = passwd\n        data[\"sudo\"].setdefault(\"prompt\", env.sudo_prompt)\n",
                    "rendered": {
                      "text": "        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n            data[\"sudo\"][\"password\"] = passwd\n        data[\"sudo\"].setdefault(\"prompt\", env.sudo_prompt)\n",
                      "markdown": "`        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n            data[\"sudo\"][\"password\"] = passwd\n        data[\"sudo\"].setdefault(\"prompt\", env.sudo_prompt)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 21,
                  "endLine": 92,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n            data[\"sudo\"][\"password\"] = passwd\n",
                    "rendered": {
                      "text": "        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n            data[\"sudo\"][\"password\"] = passwd\n",
                      "markdown": "`        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n            data[\"sudo\"][\"password\"] = passwd\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 18,
                  "endLine": 91,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n",
                    "rendered": {
                      "text": "        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n",
                      "markdown": "`        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n        if not data[\"sudo\"][\"password\"]:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 53,
                  "endLine": 90,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        data[\"connect_kwargs\"].setdefault(\"allow_agent\", not env.no_agent)\n        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n",
                    "rendered": {
                      "text": "        data[\"connect_kwargs\"].setdefault(\"allow_agent\", not env.no_agent)\n        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n",
                      "markdown": "`        data[\"connect_kwargs\"].setdefault(\"allow_agent\", not env.no_agent)\n        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 33,
                  "endLine": 90,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        data[\"connect_kwargs\"].setdefault(\"allow_agent\", not env.no_agent)\n        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n",
                    "rendered": {
                      "text": "        data[\"connect_kwargs\"].setdefault(\"allow_agent\", not env.no_agent)\n        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n",
                      "markdown": "`        data[\"connect_kwargs\"].setdefault(\"allow_agent\", not env.no_agent)\n        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n        data[\"connect_kwargs\"].setdefault(\"password\", passwd)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 15,
                  "endLine": 89,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        # Load keys from agent?\n        data[\"connect_kwargs\"].setdefault(\"allow_agent\", not env.no_agent)\n        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n",
                    "rendered": {
                      "text": "        # Load keys from agent?\n        data[\"connect_kwargs\"].setdefault(\"allow_agent\", not env.no_agent)\n        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n",
                      "markdown": "`        # Load keys from agent?\n        data[\"connect_kwargs\"].setdefault(\"allow_agent\", not env.no_agent)\n        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n        passwd = env.password\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 46,
                  "endLine": 88,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            data[\"connect_kwargs\"].setdefault(\"key_filename\", env.key_filename)\n        # Load keys from agent?\n        data[\"connect_kwargs\"].setdefault(\"allow_agent\", not env.no_agent)\n        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n",
                    "rendered": {
                      "text": "            data[\"connect_kwargs\"].setdefault(\"key_filename\", env.key_filename)\n        # Load keys from agent?\n        data[\"connect_kwargs\"].setdefault(\"allow_agent\", not env.no_agent)\n        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n",
                      "markdown": "`            data[\"connect_kwargs\"].setdefault(\"key_filename\", env.key_filename)\n        # Load keys from agent?\n        data[\"connect_kwargs\"].setdefault(\"allow_agent\", not env.no_agent)\n        data.setdefault(\"ssh_config_path\", env.ssh_config_path)\n        # Sudo password\n        data[\"sudo\"].setdefault(\"password\", env.sudo_password)\n        # Vanilla password (may be used for regular and/or sudo, depending)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 41,
                  "endLine": 287,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        controlling behavior of ``run`` or how ``tasks`` behave.\n\n        For Fabric-specific modifications and additions to the Invoke-level\n        defaults, see our own config docs at :ref:`default-values`.\n\n        .. versionadded:: 2.0\n        .. versionchanged:: 3.1\n",
                    "rendered": {
                      "text": "        controlling behavior of ``run`` or how ``tasks`` behave.\n\n        For Fabric-specific modifications and additions to the Invoke-level\n        defaults, see our own config docs at :ref:`default-values`.\n\n        .. versionadded:: 2.0\n        .. versionchanged:: 3.1\n",
                      "markdown": "`        controlling behavior of ``run`` or how ``tasks`` behave.\n\n        For Fabric-specific modifications and additions to the Invoke-level\n        defaults, see our own config docs at :ref:`default-values`.\n\n        .. versionadded:: 2.0\n        .. versionchanged:: 3.1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 52,
                  "endLine": 260,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n    def _load_ssh_file(self, path):\n        \"\"\"\n        Attempt to open and parse an SSH config file at ``path``.\n\n        Does nothing if ``path`` is not a path to a valid file.\n\n",
                    "rendered": {
                      "text": "\n    def _load_ssh_file(self, path):\n        \"\"\"\n        Attempt to open and parse an SSH config file at ``path``.\n\n        Does nothing if ``path`` is not a path to a valid file.\n\n",
                      "markdown": "`\n    def _load_ssh_file(self, path):\n        \"\"\"\n        Attempt to open and parse an SSH config file at ``path``.\n\n        Does nothing if ``path`` is not a path to a valid file.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 27,
                  "endLine": 200,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        # __reduce__ and the related (un)pickling stuff...\n        # Get cloned obj.\n        # NOTE: Because we also extend .init_kwargs, the actual core SSHConfig\n        # data is passed in at init time (ensuring no files get loaded a 2nd,\n        # etc time) and will already be present, so we don't need to set\n        # .base_ssh_config ourselves. Similarly, there's no need to worry about\n        # how the SSH config paths may be inaccurate until below; nothing will\n",
                    "rendered": {
                      "text": "        # __reduce__ and the related (un)pickling stuff...\n        # Get cloned obj.\n        # NOTE: Because we also extend .init_kwargs, the actual core SSHConfig\n        # data is passed in at init time (ensuring no files get loaded a 2nd,\n        # etc time) and will already be present, so we don't need to set\n        # .base_ssh_config ourselves. Similarly, there's no need to worry about\n        # how the SSH config paths may be inaccurate until below; nothing will\n",
                      "markdown": "`        # __reduce__ and the related (un)pickling stuff...\n        # Get cloned obj.\n        # NOTE: Because we also extend .init_kwargs, the actual core SSHConfig\n        # data is passed in at init time (ensuring no files get loaded a 2nd,\n        # etc time) and will already be present, so we don't need to set\n        # .base_ssh_config ourselves. Similarly, there's no need to worry about\n        # how the SSH config paths may be inaccurate until below; nothing will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 23,
                  "endLine": 196,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            self._load_ssh_files()\n\n    def clone(self, *args, **kwargs):\n        # TODO: clone() at this point kinda-sorta feels like it's retreading\n        # __reduce__ and the related (un)pickling stuff...\n        # Get cloned obj.\n        # NOTE: Because we also extend .init_kwargs, the actual core SSHConfig\n",
                    "rendered": {
                      "text": "            self._load_ssh_files()\n\n    def clone(self, *args, **kwargs):\n        # TODO: clone() at this point kinda-sorta feels like it's retreading\n        # __reduce__ and the related (un)pickling stuff...\n        # Get cloned obj.\n        # NOTE: Because we also extend .init_kwargs, the actual core SSHConfig\n",
                      "markdown": "`            self._load_ssh_files()\n\n    def clone(self, *args, **kwargs):\n        # TODO: clone() at this point kinda-sorta feels like it's retreading\n        # __reduce__ and the related (un)pickling stuff...\n        # Get cloned obj.\n        # NOTE: Because we also extend .init_kwargs, the actual core SSHConfig\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 9,
                  "endLine": 185,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n        .. versionadded:: 2.0\n        \"\"\"\n        # Update the runtime SSH config path (assumes enough regular config\n        # levels have been loaded that anyone wanting to transmit this info\n        # from a 'vanilla' Invoke config, has gotten it set.)\n        if self.ssh_config_path:\n",
                    "rendered": {
                      "text": "\n        .. versionadded:: 2.0\n        \"\"\"\n        # Update the runtime SSH config path (assumes enough regular config\n        # levels have been loaded that anyone wanting to transmit this info\n        # from a 'vanilla' Invoke config, has gotten it set.)\n        if self.ssh_config_path:\n",
                      "markdown": "`\n        .. versionadded:: 2.0\n        \"\"\"\n        # Update the runtime SSH config path (assumes enough regular config\n        # levels have been loaded that anyone wanting to transmit this info\n        # from a 'vanilla' Invoke config, has gotten it set.)\n        if self.ssh_config_path:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 16,
                  "endLine": 151,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        explicit = ssh_config is not None\n        self._set(_given_explicit_object=explicit)\n\n        # Arrive at some non-None SSHConfig object (upon which to run .parse()\n        # later, in _load_ssh_file())\n        if ssh_config is None:\n            ssh_config = SSHConfig()\n",
                    "rendered": {
                      "text": "        explicit = ssh_config is not None\n        self._set(_given_explicit_object=explicit)\n\n        # Arrive at some non-None SSHConfig object (upon which to run .parse()\n        # later, in _load_ssh_file())\n        if ssh_config is None:\n            ssh_config = SSHConfig()\n",
                      "markdown": "`        explicit = ssh_config is not None\n        self._set(_given_explicit_object=explicit)\n\n        # Arrive at some non-None SSHConfig object (upon which to run .parse()\n        # later, in _load_ssh_file())\n        if ssh_config is None:\n            ssh_config = SSHConfig()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 36,
                  "endLine": 260,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    def _load_ssh_file(self, path):\n        \"\"\"\n        Attempt to open and parse an SSH config file at ``path``.\n\n        Does nothing if ``path`` is not a path to a valid file.\n\n",
                    "rendered": {
                      "text": "\n    def _load_ssh_file(self, path):\n        \"\"\"\n        Attempt to open and parse an SSH config file at ``path``.\n\n        Does nothing if ``path`` is not a path to a valid file.\n\n",
                      "markdown": "`\n    def _load_ssh_file(self, path):\n        \"\"\"\n        Attempt to open and parse an SSH config file at ``path``.\n\n        Does nothing if ``path`` is not a path to a valid file.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 37,
                  "endLine": 236,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n    def _load_ssh_files(self):\n        \"\"\"\n        Trigger loading of configured SSH config file paths.\n\n        Expects that ``base_ssh_config`` has already been set to an\n        `~paramiko.config.SSHConfig` object.\n",
                    "rendered": {
                      "text": "\n    def _load_ssh_files(self):\n        \"\"\"\n        Trigger loading of configured SSH config file paths.\n\n        Expects that ``base_ssh_config`` has already been set to an\n        `~paramiko.config.SSHConfig` object.\n",
                      "markdown": "`\n    def _load_ssh_files(self):\n        \"\"\"\n        Trigger loading of configured SSH config file paths.\n\n        Expects that ``base_ssh_config`` has already been set to an\n        `~paramiko.config.SSHConfig` object.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 14,
                  "endLine": 215,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            \"_user_ssh_path\",\n        ):\n            setattr(new, attr, getattr(self, attr))\n        # Load SSH configs, in case they weren't prior to now (e.g. a vanilla\n        # Invoke clone(into), instead of a us-to-us clone.)\n        self.load_ssh_config()\n        # All done\n",
                    "rendered": {
                      "text": "            \"_user_ssh_path\",\n        ):\n            setattr(new, attr, getattr(self, attr))\n        # Load SSH configs, in case they weren't prior to now (e.g. a vanilla\n        # Invoke clone(into), instead of a us-to-us clone.)\n        self.load_ssh_config()\n        # All done\n",
                      "markdown": "`            \"_user_ssh_path\",\n        ):\n            setattr(new, attr, getattr(self, attr))\n        # Load SSH configs, in case they weren't prior to now (e.g. a vanilla\n        # Invoke clone(into), instead of a us-to-us clone.)\n        self.load_ssh_config()\n        # All done\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 17,
                  "endLine": 203,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        # data is passed in at init time (ensuring no files get loaded a 2nd,\n        # etc time) and will already be present, so we don't need to set\n        # .base_ssh_config ourselves. Similarly, there's no need to worry about\n        # how the SSH config paths may be inaccurate until below; nothing will\n        # be referencing them.\n        new = super().clone(*args, **kwargs)\n        # Copy over our custom attributes, so that the clone still resembles us\n",
                    "rendered": {
                      "text": "        # data is passed in at init time (ensuring no files get loaded a 2nd,\n        # etc time) and will already be present, so we don't need to set\n        # .base_ssh_config ourselves. Similarly, there's no need to worry about\n        # how the SSH config paths may be inaccurate until below; nothing will\n        # be referencing them.\n        new = super().clone(*args, **kwargs)\n        # Copy over our custom attributes, so that the clone still resembles us\n",
                      "markdown": "`        # data is passed in at init time (ensuring no files get loaded a 2nd,\n        # etc time) and will already be present, so we don't need to set\n        # .base_ssh_config ourselves. Similarly, there's no need to worry about\n        # how the SSH config paths may be inaccurate until below; nothing will\n        # be referencing them.\n        new = super().clone(*args, **kwargs)\n        # Copy over our custom attributes, so that the clone still resembles us\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 35,
                  "endLine": 200,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        # __reduce__ and the related (un)pickling stuff...\n        # Get cloned obj.\n        # NOTE: Because we also extend .init_kwargs, the actual core SSHConfig\n        # data is passed in at init time (ensuring no files get loaded a 2nd,\n        # etc time) and will already be present, so we don't need to set\n        # .base_ssh_config ourselves. Similarly, there's no need to worry about\n        # how the SSH config paths may be inaccurate until below; nothing will\n",
                    "rendered": {
                      "text": "        # __reduce__ and the related (un)pickling stuff...\n        # Get cloned obj.\n        # NOTE: Because we also extend .init_kwargs, the actual core SSHConfig\n        # data is passed in at init time (ensuring no files get loaded a 2nd,\n        # etc time) and will already be present, so we don't need to set\n        # .base_ssh_config ourselves. Similarly, there's no need to worry about\n        # how the SSH config paths may be inaccurate until below; nothing will\n",
                      "markdown": "`        # __reduce__ and the related (un)pickling stuff...\n        # Get cloned obj.\n        # NOTE: Because we also extend .init_kwargs, the actual core SSHConfig\n        # data is passed in at init time (ensuring no files get loaded a 2nd,\n        # etc time) and will already be present, so we don't need to set\n        # .base_ssh_config ourselves. Similarly, there's no need to worry about\n        # how the SSH config paths may be inaccurate until below; nothing will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 28,
                  "endLine": 185,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n        .. versionadded:: 2.0\n        \"\"\"\n        # Update the runtime SSH config path (assumes enough regular config\n        # levels have been loaded that anyone wanting to transmit this info\n        # from a 'vanilla' Invoke config, has gotten it set.)\n        if self.ssh_config_path:\n",
                    "rendered": {
                      "text": "\n        .. versionadded:: 2.0\n        \"\"\"\n        # Update the runtime SSH config path (assumes enough regular config\n        # levels have been loaded that anyone wanting to transmit this info\n        # from a 'vanilla' Invoke config, has gotten it set.)\n        if self.ssh_config_path:\n",
                      "markdown": "`\n        .. versionadded:: 2.0\n        \"\"\"\n        # Update the runtime SSH config path (assumes enough regular config\n        # levels have been loaded that anyone wanting to transmit this info\n        # from a 'vanilla' Invoke config, has gotten it set.)\n        if self.ssh_config_path:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 70,
                  "endLine": 181,
                  "snippet": {
                    "text": "        \"\"\"\n        Load SSH config file(s) from disk.\n\n        Also (beforehand) ensures that Invoke-level config re: runtime SSH\n        config file paths, is accounted for.\n\n        .. versionadded:: 2.0\n        \"\"\"\n",
                    "rendered": {
                      "text": "        \"\"\"\n        Load SSH config file(s) from disk.\n\n        Also (beforehand) ensures that Invoke-level config re: runtime SSH\n        config file paths, is accounted for.\n\n        .. versionadded:: 2.0\n        \"\"\"\n",
                      "markdown": "`        \"\"\"\n        Load SSH config file(s) from disk.\n\n        Also (beforehand) ensures that Invoke-level config re: runtime SSH\n        config file paths, is accounted for.\n\n        .. versionadded:: 2.0\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 12,
                  "endLine": 178,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n    def load_ssh_config(self):\n        \"\"\"\n        Load SSH config file(s) from disk.\n\n        Also (beforehand) ensures that Invoke-level config re: runtime SSH\n        config file paths, is accounted for.\n",
                    "rendered": {
                      "text": "\n    def load_ssh_config(self):\n        \"\"\"\n        Load SSH config file(s) from disk.\n\n        Also (beforehand) ensures that Invoke-level config re: runtime SSH\n        config file paths, is accounted for.\n",
                      "markdown": "`\n    def load_ssh_config(self):\n        \"\"\"\n        Load SSH config file(s) from disk.\n\n        Also (beforehand) ensures that Invoke-level config re: runtime SSH\n        config file paths, is accounted for.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 33,
                  "endLine": 167,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    def set_runtime_ssh_path(self, path):\n        \"\"\"\n        Configure a runtime-level SSH config file path.\n\n        If set, this will cause `load_ssh_config` to skip system and user\n        files, as OpenSSH does.\n",
                    "rendered": {
                      "text": "\n    def set_runtime_ssh_path(self, path):\n        \"\"\"\n        Configure a runtime-level SSH config file path.\n\n        If set, this will cause `load_ssh_config` to skip system and user\n        files, as OpenSSH does.\n",
                      "markdown": "`\n    def set_runtime_ssh_path(self, path):\n        \"\"\"\n        Configure a runtime-level SSH config file path.\n\n        If set, this will cause `load_ssh_config` to skip system and user\n        files, as OpenSSH does.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 30,
                  "endLine": 137,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        \"\"\"\n        # Tease out our own kwargs.\n        # TODO: consider moving more stuff out of __init__ and into methods so\n        # there's less of this sort of splat-args + pop thing? Eh.\n        ssh_config = kwargs.pop(\"ssh_config\", None)\n        lazy = kwargs.get(\"lazy\", False)\n        self.set_runtime_ssh_path(kwargs.pop(\"runtime_ssh_path\", None))\n",
                    "rendered": {
                      "text": "        \"\"\"\n        # Tease out our own kwargs.\n        # TODO: consider moving more stuff out of __init__ and into methods so\n        # there's less of this sort of splat-args + pop thing? Eh.\n        ssh_config = kwargs.pop(\"ssh_config\", None)\n        lazy = kwargs.get(\"lazy\", False)\n        self.set_runtime_ssh_path(kwargs.pop(\"runtime_ssh_path\", None))\n",
                      "markdown": "`        \"\"\"\n        # Tease out our own kwargs.\n        # TODO: consider moving more stuff out of __init__ and into methods so\n        # there's less of this sort of splat-args + pop thing? Eh.\n        ssh_config = kwargs.pop(\"ssh_config\", None)\n        lazy = kwargs.get(\"lazy\", False)\n        self.set_runtime_ssh_path(kwargs.pop(\"runtime_ssh_path\", None))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 41,
                  "endLine": 129,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n        :param bool lazy:\n            Has the same meaning as the parent class' ``lazy``, but\n            additionally controls whether SSH config file loading is deferred\n            (requires manually calling `load_ssh_config` sometime.) For\n            example, one may need to wait for user input before calling\n            `set_runtime_ssh_path`, which will inform exactly what\n",
                    "rendered": {
                      "text": "\n        :param bool lazy:\n            Has the same meaning as the parent class' ``lazy``, but\n            additionally controls whether SSH config file loading is deferred\n            (requires manually calling `load_ssh_config` sometime.) For\n            example, one may need to wait for user input before calling\n            `set_runtime_ssh_path`, which will inform exactly what\n",
                      "markdown": "`\n        :param bool lazy:\n            Has the same meaning as the parent class' ``lazy``, but\n            additionally controls whether SSH config file loading is deferred\n            (requires manually calling `load_ssh_config` sometime.) For\n            example, one may need to wait for user input before calling\n            `set_runtime_ssh_path`, which will inform exactly what\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 38,
                  "endLine": 124,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            ``/etc/ssh/ssh_config``.\n\n        :param str user_ssh_path:\n            Location of the user-level SSH config file. Default:\n            ``~/.ssh/config``.\n\n        :param bool lazy:\n",
                    "rendered": {
                      "text": "            ``/etc/ssh/ssh_config``.\n\n        :param str user_ssh_path:\n            Location of the user-level SSH config file. Default:\n            ``~/.ssh/config``.\n\n        :param bool lazy:\n",
                      "markdown": "`            ``/etc/ssh/ssh_config``.\n\n        :param str user_ssh_path:\n            Location of the user-level SSH config file. Default:\n            ``~/.ssh/config``.\n\n        :param bool lazy:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 40,
                  "endLine": 120,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            files if given. Default: ``None``.\n\n        :param str system_ssh_path:\n            Location of the system-level SSH config file. Default:\n            ``/etc/ssh/ssh_config``.\n\n        :param str user_ssh_path:\n",
                    "rendered": {
                      "text": "            files if given. Default: ``None``.\n\n        :param str system_ssh_path:\n            Location of the system-level SSH config file. Default:\n            ``/etc/ssh/ssh_config``.\n\n        :param str user_ssh_path:\n",
                      "markdown": "`            files if given. Default: ``None``.\n\n        :param str system_ssh_path:\n            Location of the system-level SSH config file. Default:\n            ``/etc/ssh/ssh_config``.\n\n        :param str user_ssh_path:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 19,
                  "endLine": 116,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            prevents loading of any SSH config files. Default: ``None``.\n\n        :param str runtime_ssh_path:\n            Runtime SSH config path to load. Prevents loading of system/user\n            files if given. Default: ``None``.\n\n        :param str system_ssh_path:\n",
                    "rendered": {
                      "text": "            prevents loading of any SSH config files. Default: ``None``.\n\n        :param str runtime_ssh_path:\n            Runtime SSH config path to load. Prevents loading of system/user\n            files if given. Default: ``None``.\n\n        :param str system_ssh_path:\n",
                      "markdown": "`            prevents loading of any SSH config files. Default: ``None``.\n\n        :param str runtime_ssh_path:\n            Runtime SSH config path to load. Prevents loading of system/user\n            files if given. Default: ``None``.\n\n        :param str system_ssh_path:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 35,
                  "endLine": 113,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n        :param ssh_config:\n            Custom/explicit `paramiko.config.SSHConfig` object. If given,\n            prevents loading of any SSH config files. Default: ``None``.\n\n        :param str runtime_ssh_path:\n            Runtime SSH config path to load. Prevents loading of system/user\n",
                    "rendered": {
                      "text": "\n        :param ssh_config:\n            Custom/explicit `paramiko.config.SSHConfig` object. If given,\n            prevents loading of any SSH config files. Default: ``None``.\n\n        :param str runtime_ssh_path:\n            Runtime SSH config path to load. Prevents loading of system/user\n",
                      "markdown": "`\n        :param ssh_config:\n            Custom/explicit `paramiko.config.SSHConfig` object. If given,\n            prevents loading of any SSH config files. Default: ``None``.\n\n        :param str runtime_ssh_path:\n            Runtime SSH config path to load. Prevents loading of system/user\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 43,
                  "endLine": 66,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n        .. versionadded:: 2.4\n        \"\"\"\n        # TODO: automagic import, if we can find a way to test that\n        # Use overrides level (and preserve whatever the user may have given)\n        # TODO: we really do want arbitrary number of config levels, don't we?\n        # TODO: most of these need more care re: only filling in when they\n",
                    "rendered": {
                      "text": "\n        .. versionadded:: 2.4\n        \"\"\"\n        # TODO: automagic import, if we can find a way to test that\n        # Use overrides level (and preserve whatever the user may have given)\n        # TODO: we really do want arbitrary number of config levels, don't we?\n        # TODO: most of these need more care re: only filling in when they\n",
                      "markdown": "`\n        .. versionadded:: 2.4\n        \"\"\"\n        # TODO: automagic import, if we can find a way to test that\n        # Use overrides level (and preserve whatever the user may have given)\n        # TODO: we really do want arbitrary number of config levels, don't we?\n        # TODO: most of these need more care re: only filling in when they\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/config.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 44,
                  "endLine": 21,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n    - its `global_defaults` staticmethod has been extended to add/modify some\n      default settings (see its documentation, below, for details);\n    - it triggers loading of Fabric-specific env vars (e.g.\n      ``FABRIC_RUN_HIDE=true`` instead of ``INVOKE_RUN_HIDE=true``) and\n      filenames (e.g. ``/etc/fabric.yaml`` instead of ``/etc/invoke.yaml``).\n    - it extends the API to account for loading ``ssh_config`` files (which are\n",
                    "rendered": {
                      "text": "\n    - its `global_defaults` staticmethod has been extended to add/modify some\n      default settings (see its documentation, below, for details);\n    - it triggers loading of Fabric-specific env vars (e.g.\n      ``FABRIC_RUN_HIDE=true`` instead of ``INVOKE_RUN_HIDE=true``) and\n      filenames (e.g. ``/etc/fabric.yaml`` instead of ``/etc/invoke.yaml``).\n    - it extends the API to account for loading ``ssh_config`` files (which are\n",
                      "markdown": "`\n    - its `global_defaults` staticmethod has been extended to add/modify some\n      default settings (see its documentation, below, for details);\n    - it triggers loading of Fabric-specific env vars (e.g.\n      ``FABRIC_RUN_HIDE=true`` instead of ``INVOKE_RUN_HIDE=true``) and\n      filenames (e.g. ``/etc/fabric.yaml`` instead of ``/etc/invoke.yaml``).\n    - it extends the API to account for loading ``ssh_config`` files (which are\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/util.py"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 55,
                  "endLine": 23,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    .. versionadded:: 2.0\n    \"\"\"\n    # TODO: I don't understand why these lines were added outside the\n    # try/except, since presumably it means the attempt at catching ImportError\n    # wouldn't work. However, that's how the contributing user committed it.\n    # Need an older Windows box to test it out, most likely.\n    import getpass\n",
                    "rendered": {
                      "text": "    .. versionadded:: 2.0\n    \"\"\"\n    # TODO: I don't understand why these lines were added outside the\n    # try/except, since presumably it means the attempt at catching ImportError\n    # wouldn't work. However, that's how the contributing user committed it.\n    # Need an older Windows box to test it out, most likely.\n    import getpass\n",
                      "markdown": "`    .. versionadded:: 2.0\n    \"\"\"\n    # TODO: I don't understand why these lines were added outside the\n    # try/except, since presumably it means the attempt at catching ImportError\n    # wouldn't work. However, that's how the contributing user committed it.\n    # Need an older Windows box to test it out, most likely.\n    import getpass\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/group.py"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 31,
                  "endLine": 262,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        # Get non-exception results from queue\n        while not queue.empty():\n            # TODO: io-sleep? shouldn't matter if all threads are now joined\n            cxn, result = queue.get(block=False)\n            # TODO: outstanding musings about how exactly aggregate results\n            # ought to ideally operate...heterogenous obj like this, multiple\n            # objs, ??\n",
                    "rendered": {
                      "text": "        # Get non-exception results from queue\n        while not queue.empty():\n            # TODO: io-sleep? shouldn't matter if all threads are now joined\n            cxn, result = queue.get(block=False)\n            # TODO: outstanding musings about how exactly aggregate results\n            # ought to ideally operate...heterogenous obj like this, multiple\n            # objs, ??\n",
                      "markdown": "`        # Get non-exception results from queue\n        while not queue.empty():\n            # TODO: io-sleep? shouldn't matter if all threads are now joined\n            cxn, result = queue.get(block=False)\n            # TODO: outstanding musings about how exactly aggregate results\n            # ought to ideally operate...heterogenous obj like this, multiple\n            # objs, ??\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/group.py"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 46,
                  "endLine": 164,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            `.Connection.get` on a ``for`` loop of connections; the biggest is\n            that the implied default value for the ``local`` parameter is\n            ``\"{host}/\"``, which triggers use of local path parameterization\n            based on each connection's target hostname.\n\n            Thus, unless you override ``local`` yourself, a copy of the\n            downloaded file will be stored in (relative) directories named\n",
                    "rendered": {
                      "text": "            `.Connection.get` on a ``for`` loop of connections; the biggest is\n            that the implied default value for the ``local`` parameter is\n            ``\"{host}/\"``, which triggers use of local path parameterization\n            based on each connection's target hostname.\n\n            Thus, unless you override ``local`` yourself, a copy of the\n            downloaded file will be stored in (relative) directories named\n",
                      "markdown": "`            `.Connection.get` on a ``for`` loop of connections; the biggest is\n            that the implied default value for the ``local`` parameter is\n            ``\"{host}/\"``, which triggers use of local path parameterization\n            based on each connection's target hostname.\n\n            Thus, unless you override ``local`` yourself, a copy of the\n            downloaded file will be stored in (relative) directories named\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/group.py"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 26,
                  "endLine": 316,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        # Short-circuit to avoid reprocessing every access.\n        if self._successes or self._failures:\n            return\n        # TODO: if we ever expect .succeeded/.failed to be useful before a\n        # GroupResult is fully initialized, this needs to become smarter.\n        for key, value in self.items():\n            if isinstance(value, BaseException):\n",
                    "rendered": {
                      "text": "        # Short-circuit to avoid reprocessing every access.\n        if self._successes or self._failures:\n            return\n        # TODO: if we ever expect .succeeded/.failed to be useful before a\n        # GroupResult is fully initialized, this needs to become smarter.\n        for key, value in self.items():\n            if isinstance(value, BaseException):\n",
                      "markdown": "`        # Short-circuit to avoid reprocessing every access.\n        if self._successes or self._failures:\n            return\n        # TODO: if we ever expect .succeeded/.failed to be useful before a\n        # GroupResult is fully initialized, this needs to become smarter.\n        for key, value in self.items():\n            if isinstance(value, BaseException):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/group.py"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 37,
                  "endLine": 258,
                  "snippet": {
                    "text": "        for thread in threads:\n            thread.start()\n        for thread in threads:\n            # TODO: configurable join timeout\n            thread.join()\n        # Get non-exception results from queue\n        while not queue.empty():\n            # TODO: io-sleep? shouldn't matter if all threads are now joined\n",
                    "rendered": {
                      "text": "        for thread in threads:\n            thread.start()\n        for thread in threads:\n            # TODO: configurable join timeout\n            thread.join()\n        # Get non-exception results from queue\n        while not queue.empty():\n            # TODO: io-sleep? shouldn't matter if all threads are now joined\n",
                      "markdown": "`        for thread in threads:\n            thread.start()\n        for thread in threads:\n            # TODO: configurable join timeout\n            thread.join()\n        # Get non-exception results from queue\n        while not queue.empty():\n            # TODO: io-sleep? shouldn't matter if all threads are now joined\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/group.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 62,
                  "endLine": 74,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        Any keyword arguments given will be forwarded directly to those\n        `.Connection` constructors as well. For example, to get a serially\n        executing group object that connects to ``admin@host1``,\n        ``admin@host2`` and ``admin@host3``, and forwards your SSH agent too::\n\n            group = SerialGroup(\n                \"host1\", \"host2\", \"host3\", user=\"admin\", forward_agent=True,\n",
                    "rendered": {
                      "text": "        Any keyword arguments given will be forwarded directly to those\n        `.Connection` constructors as well. For example, to get a serially\n        executing group object that connects to ``admin@host1``,\n        ``admin@host2`` and ``admin@host3``, and forwards your SSH agent too::\n\n            group = SerialGroup(\n                \"host1\", \"host2\", \"host3\", user=\"admin\", forward_agent=True,\n",
                      "markdown": "`        Any keyword arguments given will be forwarded directly to those\n        `.Connection` constructors as well. For example, to get a serially\n        executing group object that connects to ``admin@host1``,\n        ``admin@host2`` and ``admin@host3``, and forwards your SSH agent too::\n\n            group = SerialGroup(\n                \"host1\", \"host2\", \"host3\", user=\"admin\", forward_agent=True,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric-3.2.2.dist-info/METADATA"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 2,
                  "endLine": 77,
                  "endColumn": 8,
                  "snippet": {
                    "text": "implementation), extending their APIs to complement one another and provide\nadditional functionality.\n\nTo find out what's new in this version of Fabric, please see `the changelog\n<https://fabfile.org/changelog.html#{}>`_.\n\nThe project maintainer keeps a `roadmap\n",
                    "rendered": {
                      "text": "implementation), extending their APIs to complement one another and provide\nadditional functionality.\n\nTo find out what's new in this version of Fabric, please see `the changelog\n<https://fabfile.org/changelog.html#{}>`_.\n\nThe project maintainer keeps a `roadmap\n",
                      "markdown": "`implementation), extending their APIs to complement one another and provide\nadditional functionality.\n\nTo find out what's new in this version of Fabric, please see `the changelog\n<https://fabfile.org/changelog.html#{}>`_.\n\nThe project maintainer keeps a `roadmap\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric-3.2.2.dist-info/METADATA"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 2,
                  "endLine": 72,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nFabric is a high level Python (2.7, 3.4+) library designed to execute shell\ncommands remotely over SSH, yielding useful Python objects in return. It builds\non top of `Invoke <https://pyinvoke.org>`_ (subprocess command execution and\ncommand-line features) and `Paramiko <https://paramiko.org>`_ (SSH protocol\nimplementation), extending their APIs to complement one another and provide\nadditional functionality.\n",
                    "rendered": {
                      "text": "\nFabric is a high level Python (2.7, 3.4+) library designed to execute shell\ncommands remotely over SSH, yielding useful Python objects in return. It builds\non top of `Invoke <https://pyinvoke.org>`_ (subprocess command execution and\ncommand-line features) and `Paramiko <https://paramiko.org>`_ (SSH protocol\nimplementation), extending their APIs to complement one another and provide\nadditional functionality.\n",
                      "markdown": "`\nFabric is a high level Python (2.7, 3.4+) library designed to execute shell\ncommands remotely over SSH, yielding useful Python objects in return. It builds\non top of `Invoke <https://pyinvoke.org>`_ (subprocess command execution and\ncommand-line features) and `Paramiko <https://paramiko.org>`_ (SSH protocol\nimplementation), extending their APIs to complement one another and provide\nadditional functionality.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric-3.2.2.dist-info/METADATA"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 19,
                  "endLine": 4,
                  "endColumn": 24,
                  "snippet": {
                    "text": "Metadata-Version: 2.1\nName: fabric\nVersion: 3.2.2\nSummary: High level SSH command execution\nHome-page: https://fabfile.org\nAuthor: Jeff Forcier\nAuthor-email: jeff@bitprophet.org\n",
                    "rendered": {
                      "text": "Metadata-Version: 2.1\nName: fabric\nVersion: 3.2.2\nSummary: High level SSH command execution\nHome-page: https://fabfile.org\nAuthor: Jeff Forcier\nAuthor-email: jeff@bitprophet.org\n",
                      "markdown": "`Metadata-Version: 2.1\nName: fabric\nVersion: 3.2.2\nSummary: High level SSH command execution\nHome-page: https://fabfile.org\nAuthor: Jeff Forcier\nAuthor-email: jeff@bitprophet.org\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/fixtures.py"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 33,
                  "endLine": 187,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    .. versionadded:: 2.1\n    \"\"\"\n    with patch(\"fabric.connection.SSHClient\") as SSHClient:\n        client = SSHClient.return_value\n        client.get_transport.return_value = Mock(active=True)\n        yield client\n",
                    "rendered": {
                      "text": "\n    .. versionadded:: 2.1\n    \"\"\"\n    with patch(\"fabric.connection.SSHClient\") as SSHClient:\n        client = SSHClient.return_value\n        client.get_transport.return_value = Mock(active=True)\n        yield client\n",
                      "markdown": "`\n    .. versionadded:: 2.1\n    \"\"\"\n    with patch(\"fabric.connection.SSHClient\") as SSHClient:\n        client = SSHClient.return_value\n        client.get_transport.return_value = Mock(active=True)\n        yield client\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/fixtures.py"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 42,
                  "endLine": 154,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    Yields a mocked ``SSHClient`` instance.\n\n    This fixture updates `~paramiko.client.SSHClient.get_transport` to return a\n    mock that appears active on first check, then inactive after, matching most\n    tests' needs by default:\n\n",
                    "rendered": {
                      "text": "\n    Yields a mocked ``SSHClient`` instance.\n\n    This fixture updates `~paramiko.client.SSHClient.get_transport` to return a\n    mock that appears active on first check, then inactive after, matching most\n    tests' needs by default:\n\n",
                      "markdown": "`\n    Yields a mocked ``SSHClient`` instance.\n\n    This fixture updates `~paramiko.client.SSHClient.get_transport` to return a\n    mock that appears active on first check, then inactive after, matching most\n    tests' needs by default:\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/fixtures.py"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 27,
                  "endLine": 150,
                  "endColumn": 31,
                  "snippet": {
                    "text": "@fixture\ndef client():\n    \"\"\"\n    Mocks `~paramiko.client.SSHClient` for testing calls to ``connect()``.\n\n    Yields a mocked ``SSHClient`` instance.\n\n",
                    "rendered": {
                      "text": "@fixture\ndef client():\n    \"\"\"\n    Mocks `~paramiko.client.SSHClient` for testing calls to ``connect()``.\n\n    Yields a mocked ``SSHClient`` instance.\n\n",
                      "markdown": "`@fixture\ndef client():\n    \"\"\"\n    Mocks `~paramiko.client.SSHClient` for testing calls to ``connect()``.\n\n    Yields a mocked ``SSHClient`` instance.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/fixtures.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n    Specifically:\n\n    - the hostname is set to ``\"host\"`` and the username to ``\"user\"``;\n    - the primary API members (`.Connection.run`, `.Connection.local`, etc) are\n      replaced with ``mock.Mock`` instances;\n    - the ``run.in_stream`` config option is set to ``False`` to avoid attempts\n",
                    "rendered": {
                      "text": "\n    Specifically:\n\n    - the hostname is set to ``\"host\"`` and the username to ``\"user\"``;\n    - the primary API members (`.Connection.run`, `.Connection.local`, etc) are\n      replaced with ``mock.Mock`` instances;\n    - the ``run.in_stream`` config option is set to ``False`` to avoid attempts\n",
                      "markdown": "`\n    Specifically:\n\n    - the hostname is set to ``\"host\"`` and the username to ``\"user\"``;\n    - the primary API members (`.Connection.run`, `.Connection.local`, etc) are\n      replaced with ``mock.Mock`` instances;\n    - the ``run.in_stream`` config option is set to ``False`` to avoid attempts\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/fixtures.py"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 38,
                  "endLine": 122,
                  "snippet": {
                    "text": "    \"\"\"\n    mock = MockSFTP(autostart=False)\n    client, mock_os = mock.start()\n    # Regular ol transfer to save some time\n    transfer = Transfer(Connection(\"host\"))\n    yield transfer, client, mock_os\n    # TODO: old mock_sftp() lacked any 'stop'...why? feels bad man\n\n",
                    "rendered": {
                      "text": "    \"\"\"\n    mock = MockSFTP(autostart=False)\n    client, mock_os = mock.start()\n    # Regular ol transfer to save some time\n    transfer = Transfer(Connection(\"host\"))\n    yield transfer, client, mock_os\n    # TODO: old mock_sftp() lacked any 'stop'...why? feels bad man\n\n",
                      "markdown": "`    \"\"\"\n    mock = MockSFTP(autostart=False)\n    client, mock_os = mock.start()\n    # Regular ol transfer to save some time\n    transfer = Transfer(Connection(\"host\"))\n    yield transfer, client, mock_os\n    # TODO: old mock_sftp() lacked any 'stop'...why? feels bad man\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/fixtures.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 45,
                  "endLine": 109,
                  "endColumn": 51,
                  "snippet": {
                    "text": "@fixture\ndef sftp():\n    \"\"\"\n    Fixture allowing setup of a mocked remote SFTP session.\n\n    Yields a 3-tuple of: Transfer() object, SFTPClient object, and mocked OS\n    module.\n",
                    "rendered": {
                      "text": "@fixture\ndef sftp():\n    \"\"\"\n    Fixture allowing setup of a mocked remote SFTP session.\n\n    Yields a 3-tuple of: Transfer() object, SFTPClient object, and mocked OS\n    module.\n",
                      "markdown": "`@fixture\ndef sftp():\n    \"\"\"\n    Fixture allowing setup of a mocked remote SFTP session.\n\n    Yields a 3-tuple of: Transfer() object, SFTPClient object, and mocked OS\n    module.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/fixtures.py"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 63,
                  "endLine": 78,
                  "snippet": {
                    "text": "    \"\"\"\n    Like `remote`, but with ``enable_sftp=True``.\n\n    To access the internal mocked SFTP client (eg for asserting SFTP\n    functionality was called), note that the returned `MockRemote` object has a\n    ``.sftp`` attribute when created in this mode.\n    \"\"\"\n    # NOTE: recall that by default an instantiated MockRemote has a single\n",
                    "rendered": {
                      "text": "    \"\"\"\n    Like `remote`, but with ``enable_sftp=True``.\n\n    To access the internal mocked SFTP client (eg for asserting SFTP\n    functionality was called), note that the returned `MockRemote` object has a\n    ``.sftp`` attribute when created in this mode.\n    \"\"\"\n    # NOTE: recall that by default an instantiated MockRemote has a single\n",
                      "markdown": "`    \"\"\"\n    Like `remote`, but with ``enable_sftp=True``.\n\n    To access the internal mocked SFTP client (eg for asserting SFTP\n    functionality was called), note that the returned `MockRemote` object has a\n    ``.sftp`` attribute when created in this mode.\n    \"\"\"\n    # NOTE: recall that by default an instantiated MockRemote has a single\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/fixtures.py"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 33,
                  "endLine": 77,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    \"\"\"\n    Like `remote`, but with ``enable_sftp=True``.\n\n    To access the internal mocked SFTP client (eg for asserting SFTP\n    functionality was called), note that the returned `MockRemote` object has a\n    ``.sftp`` attribute when created in this mode.\n    \"\"\"\n",
                    "rendered": {
                      "text": "    \"\"\"\n    Like `remote`, but with ``enable_sftp=True``.\n\n    To access the internal mocked SFTP client (eg for asserting SFTP\n    functionality was called), note that the returned `MockRemote` object has a\n    ``.sftp`` attribute when created in this mode.\n    \"\"\"\n",
                      "markdown": "`    \"\"\"\n    Like `remote`, but with ``enable_sftp=True``.\n\n    To access the internal mocked SFTP client (eg for asserting SFTP\n    functionality was called), note that the returned `MockRemote` object has a\n    ``.sftp`` attribute when created in this mode.\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/fixtures.py"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 22,
                  "endLine": 59,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    c.run = Mock()\n    c.local = Mock()\n    # TODO: rest of API should get mocked too\n    # TODO: is there a nice way to mesh with MockRemote et al? Is that ever\n    # really that useful for code that just wants to assert about how run() and\n    # friends were called?\n    yield c\n",
                    "rendered": {
                      "text": "    c.run = Mock()\n    c.local = Mock()\n    # TODO: rest of API should get mocked too\n    # TODO: is there a nice way to mesh with MockRemote et al? Is that ever\n    # really that useful for code that just wants to assert about how run() and\n    # friends were called?\n    yield c\n",
                      "markdown": "`    c.run = Mock()\n    c.local = Mock()\n    # TODO: rest of API should get mocked too\n    # TODO: is there a nice way to mesh with MockRemote et al? Is that ever\n    # really that useful for code that just wants to assert about how run() and\n    # friends were called?\n    yield c\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/executor.py"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 33,
                  "endLine": 117,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        msg = \"Parameterizing {!r} with Connection kwargs {!r}\"\n        debug(msg.format(call, connection_init_kwargs))\n        # Generate a custom ConnectionCall that has init_kwargs (used for\n        # creating the Connection at runtime) set to the requested params.\n        new_call_kwargs = dict(init_kwargs=connection_init_kwargs)\n        clone = call.clone(into=ConnectionCall, with_=new_call_kwargs)\n        return clone\n",
                    "rendered": {
                      "text": "        msg = \"Parameterizing {!r} with Connection kwargs {!r}\"\n        debug(msg.format(call, connection_init_kwargs))\n        # Generate a custom ConnectionCall that has init_kwargs (used for\n        # creating the Connection at runtime) set to the requested params.\n        new_call_kwargs = dict(init_kwargs=connection_init_kwargs)\n        clone = call.clone(into=ConnectionCall, with_=new_call_kwargs)\n        return clone\n",
                      "markdown": "`        msg = \"Parameterizing {!r} with Connection kwargs {!r}\"\n        debug(msg.format(call, connection_init_kwargs))\n        # Generate a custom ConnectionCall that has init_kwargs (used for\n        # creating the Connection at runtime) set to the requested params.\n        new_call_kwargs = dict(init_kwargs=connection_init_kwargs)\n        clone = call.clone(into=ConnectionCall, with_=new_call_kwargs)\n        return clone\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/executor.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 19,
                  "endLine": 60,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        for call in calls:\n            if isinstance(call, Task):\n                call = Call(task=call)\n            # TODO: expand this to allow multiple types of execution plans,\n            # pending outcome of invoke#461 (which, if flexible enough to\n            # handle intersect of dependencies+parameterization, just becomes\n            # 'honor that new feature of Invoke')\n",
                    "rendered": {
                      "text": "        for call in calls:\n            if isinstance(call, Task):\n                call = Call(task=call)\n            # TODO: expand this to allow multiple types of execution plans,\n            # pending outcome of invoke#461 (which, if flexible enough to\n            # handle intersect of dependencies+parameterization, just becomes\n            # 'honor that new feature of Invoke')\n",
                      "markdown": "`        for call in calls:\n            if isinstance(call, Task):\n                call = Call(task=call)\n            # TODO: expand this to allow multiple types of execution plans,\n            # pending outcome of invoke#461 (which, if flexible enough to\n            # handle intersect of dependencies+parameterization, just becomes\n            # 'honor that new feature of Invoke')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/executor.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 19,
                  "endLine": 60,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        for call in calls:\n            if isinstance(call, Task):\n                call = Call(task=call)\n            # TODO: expand this to allow multiple types of execution plans,\n            # pending outcome of invoke#461 (which, if flexible enough to\n            # handle intersect of dependencies+parameterization, just becomes\n            # 'honor that new feature of Invoke')\n",
                    "rendered": {
                      "text": "        for call in calls:\n            if isinstance(call, Task):\n                call = Call(task=call)\n            # TODO: expand this to allow multiple types of execution plans,\n            # pending outcome of invoke#461 (which, if flexible enough to\n            # handle intersect of dependencies+parameterization, just becomes\n            # 'honor that new feature of Invoke')\n",
                      "markdown": "`        for call in calls:\n            if isinstance(call, Task):\n                call = Call(task=call)\n            # TODO: expand this to allow multiple types of execution plans,\n            # pending outcome of invoke#461 (which, if flexible enough to\n            # handle intersect of dependencies+parameterization, just becomes\n            # 'honor that new feature of Invoke')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/executor.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 22,
                  "endLine": 32,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        strings) or decorator arguments (may be strings or kwarg dicts) into\n        kwargs suitable for creating Connection instances.\n\n        Subclasses may wish to override or extend this to perform, for example,\n        database or custom config file lookups (vs this default behavior, which\n        is to simply assume that strings are 'host' kwargs).\n\n",
                    "rendered": {
                      "text": "        strings) or decorator arguments (may be strings or kwarg dicts) into\n        kwargs suitable for creating Connection instances.\n\n        Subclasses may wish to override or extend this to perform, for example,\n        database or custom config file lookups (vs this default behavior, which\n        is to simply assume that strings are 'host' kwargs).\n\n",
                      "markdown": "`        strings) or decorator arguments (may be strings or kwarg dicts) into\n        kwargs suitable for creating Connection instances.\n\n        Subclasses may wish to override or extend this to perform, for example,\n        database or custom config file lookups (vs this default behavior, which\n        is to simply assume that strings are 'host' kwargs).\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 54,
                  "endLine": 512,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    def start(self):\n        # Set up mocks\n        self.os_patcher = patch(\"fabric.transfer.os\")\n        self.client_patcher = patch(\"fabric.connection.SSHClient\")\n        self.path_patcher = patch(\"fabric.transfer.Path\")\n        mock_os = self.os_patcher.start()\n        Client = self.client_patcher.start()\n",
                    "rendered": {
                      "text": "    def start(self):\n        # Set up mocks\n        self.os_patcher = patch(\"fabric.transfer.os\")\n        self.client_patcher = patch(\"fabric.connection.SSHClient\")\n        self.path_patcher = patch(\"fabric.transfer.Path\")\n        mock_os = self.os_patcher.start()\n        Client = self.client_patcher.start()\n",
                      "markdown": "`    def start(self):\n        # Set up mocks\n        self.os_patcher = patch(\"fabric.transfer.os\")\n        self.client_patcher = patch(\"fabric.connection.SSHClient\")\n        self.path_patcher = patch(\"fabric.transfer.Path\")\n        mock_os = self.os_patcher.start()\n        Client = self.client_patcher.start()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 57,
                  "endLine": 429,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        \"\"\"\n        # Patch SSHClient so the sessions' generated mocks can be set as its\n        # return values\n        self.patcher = patcher = patch(\"fabric.connection.SSHClient\")\n        SSHClient = patcher.start()\n        # Mock clients, to be inspected afterwards during safety-checks\n        clients = []\n",
                    "rendered": {
                      "text": "        \"\"\"\n        # Patch SSHClient so the sessions' generated mocks can be set as its\n        # return values\n        self.patcher = patcher = patch(\"fabric.connection.SSHClient\")\n        SSHClient = patcher.start()\n        # Mock clients, to be inspected afterwards during safety-checks\n        clients = []\n",
                      "markdown": "`        \"\"\"\n        # Patch SSHClient so the sessions' generated mocks can be set as its\n        # return values\n        self.patcher = patcher = patch(\"fabric.connection.SSHClient\")\n        SSHClient = patcher.start()\n        # Mock clients, to be inspected afterwards during safety-checks\n        clients = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 31,
                  "endLine": 214,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    def generate_mocks(self):\n        \"\"\"\n        Mocks `~paramiko.client.SSHClient` and `~paramiko.channel.Channel`.\n\n        Specifically, the client will expect itself to be connected to\n        ``self.host`` (if given), the channels will be associated with the\n",
                    "rendered": {
                      "text": "\n    def generate_mocks(self):\n        \"\"\"\n        Mocks `~paramiko.client.SSHClient` and `~paramiko.channel.Channel`.\n\n        Specifically, the client will expect itself to be connected to\n        ``self.host`` (if given), the channels will be associated with the\n",
                      "markdown": "`\n    def generate_mocks(self):\n        \"\"\"\n        Mocks `~paramiko.client.SSHClient` and `~paramiko.channel.Channel`.\n\n        Specifically, the client will expect itself to be connected to\n        ``self.host`` (if given), the channels will be associated with the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 12,
                  "endLine": 320,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        # And a single connect to our target host.\n        self.client.connect.assert_called_once_with(\n            username=self.user or ANY,\n            hostname=self.host or ANY,\n            port=self.port or ANY,\n        )\n\n",
                    "rendered": {
                      "text": "        # And a single connect to our target host.\n        self.client.connect.assert_called_once_with(\n            username=self.user or ANY,\n            hostname=self.host or ANY,\n            port=self.port or ANY,\n        )\n\n",
                      "markdown": "`        # And a single connect to our target host.\n        self.client.connect.assert_called_once_with(\n            username=self.user or ANY,\n            hostname=self.host or ANY,\n            port=self.port or ANY,\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 9,
                  "endLine": 414,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        # First, stop the default session to clean up its state, if it seems to\n        # be running.\n        self.stop()\n        # Update sessions list with new session(s)\n        self.sessions = sessions\n        # And start patching again, returning mocked channels\n        return self.start()\n",
                    "rendered": {
                      "text": "        # First, stop the default session to clean up its state, if it seems to\n        # be running.\n        self.stop()\n        # Update sessions list with new session(s)\n        self.sessions = sessions\n        # And start patching again, returning mocked channels\n        return self.start()\n",
                      "markdown": "`        # First, stop the default session to clean up its state, if it seems to\n        # be running.\n        self.stop()\n        # Update sessions list with new session(s)\n        self.sessions = sessions\n        # And start patching again, returning mocked channels\n        return self.start()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 12,
                  "endLine": 381,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    .. versionadded:: 2.1\n    .. versionchanged:: 3.2\n        Added the ``enable_sftp`` init kwarg to enable mocking both SSH and\n        SFTP at the same time.\n    .. versionchanged:: 3.2\n        Added contextmanager semantics to the class, so you don't have to\n        remember to call `safety`/`stop`.\n",
                    "rendered": {
                      "text": "    .. versionadded:: 2.1\n    .. versionchanged:: 3.2\n        Added the ``enable_sftp`` init kwarg to enable mocking both SSH and\n        SFTP at the same time.\n    .. versionchanged:: 3.2\n        Added contextmanager semantics to the class, so you don't have to\n        remember to call `safety`/`stop`.\n",
                      "markdown": "`    .. versionadded:: 2.1\n    .. versionchanged:: 3.2\n        Added the ``enable_sftp`` init kwarg to enable mocking both SSH and\n        SFTP at the same time.\n    .. versionchanged:: 3.2\n        Added contextmanager semantics to the class, so you don't have to\n        remember to call `safety`/`stop`.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 31,
                  "endLine": 196,
                  "snippet": {
                    "text": "            # default kwarg values in this method's signature...sigh\n            kwargs = {}\n            if cmd is not None:\n                kwargs[\"cmd\"] = cmd\n            if out is not None:\n                kwargs[\"out\"] = out\n            if err is not None:\n                kwargs[\"err\"] = err\n",
                    "rendered": {
                      "text": "            # default kwarg values in this method's signature...sigh\n            kwargs = {}\n            if cmd is not None:\n                kwargs[\"cmd\"] = cmd\n            if out is not None:\n                kwargs[\"out\"] = out\n            if err is not None:\n                kwargs[\"err\"] = err\n",
                      "markdown": "`            # default kwarg values in this method's signature...sigh\n            kwargs = {}\n            if cmd is not None:\n                kwargs[\"cmd\"] = cmd\n            if out is not None:\n                kwargs[\"out\"] = out\n            if err is not None:\n                kwargs[\"err\"] = err\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 14,
                  "endLine": 194,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            # Honestly dunno which is dumber, this or duplicating Command's\n            # default kwarg values in this method's signature...sigh\n            kwargs = {}\n            if cmd is not None:\n                kwargs[\"cmd\"] = cmd\n            if out is not None:\n                kwargs[\"out\"] = out\n",
                    "rendered": {
                      "text": "            # Honestly dunno which is dumber, this or duplicating Command's\n            # default kwarg values in this method's signature...sigh\n            kwargs = {}\n            if cmd is not None:\n                kwargs[\"cmd\"] = cmd\n            if out is not None:\n                kwargs[\"out\"] = out\n",
                      "markdown": "`            # Honestly dunno which is dumber, this or duplicating Command's\n            # default kwarg values in this method's signature...sigh\n            kwargs = {}\n            if cmd is not None:\n                kwargs[\"cmd\"] = cmd\n            if out is not None:\n                kwargs[\"out\"] = out\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 42,
                  "endLine": 184,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                \"Command parameters!\"\n            )  # noqa\n        # Early test for \"did user actually request expectations?\"\n        self.guard_only = not (commands or cmd or transfers)\n        # Fill in values\n        self.host = host\n        self.user = user\n",
                    "rendered": {
                      "text": "                \"Command parameters!\"\n            )  # noqa\n        # Early test for \"did user actually request expectations?\"\n        self.guard_only = not (commands or cmd or transfers)\n        # Fill in values\n        self.host = host\n        self.user = user\n",
                      "markdown": "`                \"Command parameters!\"\n            )  # noqa\n        # Early test for \"did user actually request expectations?\"\n        self.guard_only = not (commands or cmd or transfers)\n        # Fill in values\n        self.host = host\n        self.user = user\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 16,
                  "endLine": 177,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        transfers=None,\n    ):\n        # Safety check\n        params = cmd or out or err or exit or waits\n        if commands and params:\n            raise ValueError(\n                \"You can't give both 'commands' and individual \"\n",
                    "rendered": {
                      "text": "        transfers=None,\n    ):\n        # Safety check\n        params = cmd or out or err or exit or waits\n        if commands and params:\n            raise ValueError(\n                \"You can't give both 'commands' and individual \"\n",
                      "markdown": "`        transfers=None,\n    ):\n        # Safety check\n        params = cmd or out or err or exit or waits\n        if commands and params:\n            raise ValueError(\n                \"You can't give both 'commands' and individual \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 18,
                  "endLine": 55,
                  "snippet": {
                    "text": "    \"\"\"\n\n    def __init__(self, cmd=None, out=b\"\", err=b\"\", in_=None, exit=0, waits=0):\n        self.cmd = cmd\n        self.out = out\n        self.err = err\n        self.in_ = in_\n        self.exit = exit\n",
                    "rendered": {
                      "text": "    \"\"\"\n\n    def __init__(self, cmd=None, out=b\"\", err=b\"\", in_=None, exit=0, waits=0):\n        self.cmd = cmd\n        self.out = out\n        self.err = err\n        self.in_ = in_\n        self.exit = exit\n",
                      "markdown": "`    \"\"\"\n\n    def __init__(self, cmd=None, out=b\"\", err=b\"\", in_=None, exit=0, waits=0):\n        self.cmd = cmd\n        self.out = out\n        self.err = err\n        self.in_ = in_\n        self.exit = exit\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 20,
                  "endLine": 537,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        mock_os.sep = os.sep\n        for name in (\"basename\", \"split\", \"join\", \"normpath\"):\n            getattr(mock_os.path, name).side_effect = getattr(os.path, name)\n        # Return the sftp and OS mocks for use by decorator use case.\n        return sftp, mock_os\n\n    def stop(self):\n",
                    "rendered": {
                      "text": "        mock_os.sep = os.sep\n        for name in (\"basename\", \"split\", \"join\", \"normpath\"):\n            getattr(mock_os.path, name).side_effect = getattr(os.path, name)\n        # Return the sftp and OS mocks for use by decorator use case.\n        return sftp, mock_os\n\n    def stop(self):\n",
                      "markdown": "`        mock_os.sep = os.sep\n        for name in (\"basename\", \"split\", \"join\", \"normpath\"):\n            getattr(mock_os.path, name).side_effect = getattr(os.path, name)\n        # Return the sftp and OS mocks for use by decorator use case.\n        return sftp, mock_os\n\n    def stop(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 7,
                  "endLine": 517,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        mock_os = self.os_patcher.start()\n        Client = self.client_patcher.start()\n        self.path_patcher.start()\n        sftp = Client.return_value.open_sftp.return_value\n\n        # Handle common filepath massage actions; tests will assume these.\n        def fake_abspath(path):\n",
                    "rendered": {
                      "text": "        mock_os = self.os_patcher.start()\n        Client = self.client_patcher.start()\n        self.path_patcher.start()\n        sftp = Client.return_value.open_sftp.return_value\n\n        # Handle common filepath massage actions; tests will assume these.\n        def fake_abspath(path):\n",
                      "markdown": "`        mock_os = self.os_patcher.start()\n        Client = self.client_patcher.start()\n        self.path_patcher.start()\n        sftp = Client.return_value.open_sftp.return_value\n\n        # Handle common filepath massage actions; tests will assume these.\n        def fake_abspath(path):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 61,
                  "endLine": 499,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    \"\"\"\n    Class managing mocked SFTP remote state.\n\n    Used in start/stop fashion in eg doctests; wrapped in the SFTP fixtures in\n    conftest.py for main use.\n\n    .. versionadded:: 2.1\n",
                    "rendered": {
                      "text": "    \"\"\"\n    Class managing mocked SFTP remote state.\n\n    Used in start/stop fashion in eg doctests; wrapped in the SFTP fixtures in\n    conftest.py for main use.\n\n    .. versionadded:: 2.1\n",
                      "markdown": "`    \"\"\"\n    Class managing mocked SFTP remote state.\n\n    Used in start/stop fashion in eg doctests; wrapped in the SFTP fixtures in\n    conftest.py for main use.\n\n    .. versionadded:: 2.1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 25,
                  "endLine": 497,
                  "endColumn": 31,
                  "snippet": {
                    "text": ")\nclass MockSFTP:\n    \"\"\"\n    Class managing mocked SFTP remote state.\n\n    Used in start/stop fashion in eg doctests; wrapped in the SFTP fixtures in\n    conftest.py for main use.\n",
                    "rendered": {
                      "text": ")\nclass MockSFTP:\n    \"\"\"\n    Class managing mocked SFTP remote state.\n\n    Used in start/stop fashion in eg doctests; wrapped in the SFTP fixtures in\n    conftest.py for main use.\n",
                      "markdown": "`)\nclass MockSFTP:\n    \"\"\"\n    Class managing mocked SFTP remote state.\n\n    Used in start/stop fashion in eg doctests; wrapped in the SFTP fixtures in\n    conftest.py for main use.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 77,
                  "endLine": 493,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n@deprecated(\n    version=\"3.2\",\n    reason=\"This class has been merged with `MockRemote` which can now handle SFTP mocking too. Please switch to it!\",  # noqa\n)\nclass MockSFTP:\n    \"\"\"\n",
                    "rendered": {
                      "text": "\n@deprecated(\n    version=\"3.2\",\n    reason=\"This class has been merged with `MockRemote` which can now handle SFTP mocking too. Please switch to it!\",  # noqa\n)\nclass MockSFTP:\n    \"\"\"\n",
                      "markdown": "`\n@deprecated(\n    version=\"3.2\",\n    reason=\"This class has been merged with `MockRemote` which can now handle SFTP mocking too. Please switch to it!\",  # noqa\n)\nclass MockSFTP:\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 68,
                  "endLine": 441,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        # optionally SFTP subclient) generated above.\n        SSHClient.side_effect = clients\n        sessions = list(chain.from_iterable(x.channels for x in self.sessions))\n        # TODO: in future we _may_ want to change this so it returns SFTP file\n        # data as well?\n        return sessions\n\n",
                    "rendered": {
                      "text": "        # optionally SFTP subclient) generated above.\n        SSHClient.side_effect = clients\n        sessions = list(chain.from_iterable(x.channels for x in self.sessions))\n        # TODO: in future we _may_ want to change this so it returns SFTP file\n        # data as well?\n        return sessions\n\n",
                      "markdown": "`        # optionally SFTP subclient) generated above.\n        SSHClient.side_effect = clients\n        sessions = list(chain.from_iterable(x.channels for x in self.sessions))\n        # TODO: in future we _may_ want to change this so it returns SFTP file\n        # data as well?\n        return sessions\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 20,
                  "endLine": 438,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            clients.append(session.client)\n        # Each time the mocked SSHClient class is instantiated, it will\n        # yield one of our mocked clients (w/ mocked transport & channel, and\n        # optionally SFTP subclient) generated above.\n        SSHClient.side_effect = clients\n        sessions = list(chain.from_iterable(x.channels for x in self.sessions))\n        # TODO: in future we _may_ want to change this so it returns SFTP file\n",
                    "rendered": {
                      "text": "            clients.append(session.client)\n        # Each time the mocked SSHClient class is instantiated, it will\n        # yield one of our mocked clients (w/ mocked transport & channel, and\n        # optionally SFTP subclient) generated above.\n        SSHClient.side_effect = clients\n        sessions = list(chain.from_iterable(x.channels for x in self.sessions))\n        # TODO: in future we _may_ want to change this so it returns SFTP file\n",
                      "markdown": "`            clients.append(session.client)\n        # Each time the mocked SSHClient class is instantiated, it will\n        # yield one of our mocked clients (w/ mocked transport & channel, and\n        # optionally SFTP subclient) generated above.\n        SSHClient.side_effect = clients\n        sessions = list(chain.from_iterable(x.channels for x in self.sessions))\n        # TODO: in future we _may_ want to change this so it returns SFTP file\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 14,
                  "endLine": 436,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        for session in self.sessions:\n            session.generate_mocks()\n            clients.append(session.client)\n        # Each time the mocked SSHClient class is instantiated, it will\n        # yield one of our mocked clients (w/ mocked transport & channel, and\n        # optionally SFTP subclient) generated above.\n        SSHClient.side_effect = clients\n",
                    "rendered": {
                      "text": "        for session in self.sessions:\n            session.generate_mocks()\n            clients.append(session.client)\n        # Each time the mocked SSHClient class is instantiated, it will\n        # yield one of our mocked clients (w/ mocked transport & channel, and\n        # optionally SFTP subclient) generated above.\n        SSHClient.side_effect = clients\n",
                      "markdown": "`        for session in self.sessions:\n            session.generate_mocks()\n            clients.append(session.client)\n        # Each time the mocked SSHClient class is instantiated, it will\n        # yield one of our mocked clients (w/ mocked transport & channel, and\n        # optionally SFTP subclient) generated above.\n        SSHClient.side_effect = clients\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 49,
                  "endLine": 419,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        # And start patching again, returning mocked channels\n        return self.start()\n\n    # TODO 4.0: definitely clean this up once the SFTP bit isn't opt-in, doing\n    # that backwards compatibly was real gross\n    def start(self):\n        \"\"\"\n",
                    "rendered": {
                      "text": "        # And start patching again, returning mocked channels\n        return self.start()\n\n    # TODO 4.0: definitely clean this up once the SFTP bit isn't opt-in, doing\n    # that backwards compatibly was real gross\n    def start(self):\n        \"\"\"\n",
                      "markdown": "`        # And start patching again, returning mocked channels\n        return self.start()\n\n    # TODO 4.0: definitely clean this up once the SFTP bit isn't opt-in, doing\n    # that backwards compatibly was real gross\n    def start(self):\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 45,
                  "endLine": 405,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n    def expect_sessions(self, *sessions):\n        \"\"\"\n        Sets the mocked remote environment to expect the given ``sessions``.\n\n        Returns a list of `MockChannel` objects, one per input `Session`.\n\n",
                    "rendered": {
                      "text": "\n    def expect_sessions(self, *sessions):\n        \"\"\"\n        Sets the mocked remote environment to expect the given ``sessions``.\n\n        Returns a list of `MockChannel` objects, one per input `Session`.\n\n",
                      "markdown": "`\n    def expect_sessions(self, *sessions):\n        \"\"\"\n        Sets the mocked remote environment to expect the given ``sessions``.\n\n        Returns a list of `MockChannel` objects, one per input `Session`.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 7,
                  "endLine": 381,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    .. versionadded:: 2.1\n    .. versionchanged:: 3.2\n        Added the ``enable_sftp`` init kwarg to enable mocking both SSH and\n        SFTP at the same time.\n    .. versionchanged:: 3.2\n        Added contextmanager semantics to the class, so you don't have to\n        remember to call `safety`/`stop`.\n",
                    "rendered": {
                      "text": "    .. versionadded:: 2.1\n    .. versionchanged:: 3.2\n        Added the ``enable_sftp`` init kwarg to enable mocking both SSH and\n        SFTP at the same time.\n    .. versionchanged:: 3.2\n        Added contextmanager semantics to the class, so you don't have to\n        remember to call `safety`/`stop`.\n",
                      "markdown": "`    .. versionadded:: 2.1\n    .. versionchanged:: 3.2\n        Added the ``enable_sftp`` init kwarg to enable mocking both SSH and\n        SFTP at the same time.\n    .. versionchanged:: 3.2\n        Added contextmanager semantics to the class, so you don't have to\n        remember to call `safety`/`stop`.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 67,
                  "endLine": 380,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    .. versionadded:: 2.1\n    .. versionchanged:: 3.2\n        Added the ``enable_sftp`` init kwarg to enable mocking both SSH and\n        SFTP at the same time.\n    .. versionchanged:: 3.2\n        Added contextmanager semantics to the class, so you don't have to\n",
                    "rendered": {
                      "text": "\n    .. versionadded:: 2.1\n    .. versionchanged:: 3.2\n        Added the ``enable_sftp`` init kwarg to enable mocking both SSH and\n        SFTP at the same time.\n    .. versionchanged:: 3.2\n        Added contextmanager semantics to the class, so you don't have to\n",
                      "markdown": "`\n    .. versionadded:: 2.1\n    .. versionchanged:: 3.2\n        Added the ``enable_sftp`` init kwarg to enable mocking both SSH and\n        SFTP at the same time.\n    .. versionchanged:: 3.2\n        Added contextmanager semantics to the class, so you don't have to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 31,
                  "endLine": 373,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    `start`, so you won't normally need to do so by hand.\n\n    By default, a single anonymous/internal `Session` is created, for\n    convenience (eg mocking out SSH functionality as a safety measure). Users\n    requiring detailed remote session expectations can call methods like\n    `expect` or `expect_sessions`, which wipe that anonymous Session & set up a\n    new one instead.\n",
                    "rendered": {
                      "text": "    `start`, so you won't normally need to do so by hand.\n\n    By default, a single anonymous/internal `Session` is created, for\n    convenience (eg mocking out SSH functionality as a safety measure). Users\n    requiring detailed remote session expectations can call methods like\n    `expect` or `expect_sessions`, which wipe that anonymous Session & set up a\n    new one instead.\n",
                      "markdown": "`    `start`, so you won't normally need to do so by hand.\n\n    By default, a single anonymous/internal `Session` is created, for\n    convenience (eg mocking out SSH functionality as a safety measure). Users\n    requiring detailed remote session expectations can call methods like\n    `expect` or `expect_sessions`, which wipe that anonymous Session & set up a\n    new one instead.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 9,
                  "endLine": 342,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        calls = transport.return_value.open_session.call_args_list\n        assert calls == session_opens\n\n        # SFTP transfers\n        for transfer in self.transfers or []:\n            method_name = transfer.pop(\"method\")\n            method = getattr(self.sftp, method_name)\n",
                    "rendered": {
                      "text": "        calls = transport.return_value.open_session.call_args_list\n        assert calls == session_opens\n\n        # SFTP transfers\n        for transfer in self.transfers or []:\n            method_name = transfer.pop(\"method\")\n            method = getattr(self.sftp, method_name)\n",
                      "markdown": "`        calls = transport.return_value.open_session.call_args_list\n        assert calls == session_opens\n\n        # SFTP transfers\n        for transfer in self.transfers or []:\n            method_name = transfer.pop(\"method\")\n            method = getattr(self.sftp, method_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 13,
                  "endLine": 334,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            session_opens.append(call())\n            # Expect that the channel gets an exec_command or etc\n            command.expect_execution(channel=channel)\n            # Expect written stdin, if given\n            if command.in_:\n                assert channel._stdin.getvalue() == command.in_\n\n",
                    "rendered": {
                      "text": "            session_opens.append(call())\n            # Expect that the channel gets an exec_command or etc\n            command.expect_execution(channel=channel)\n            # Expect written stdin, if given\n            if command.in_:\n                assert channel._stdin.getvalue() == command.in_\n\n",
                      "markdown": "`            session_opens.append(call())\n            # Expect that the channel gets an exec_command or etc\n            command.expect_execution(channel=channel)\n            # Expect written stdin, if given\n            if command.in_:\n                assert channel._stdin.getvalue() == command.in_\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 13,
                  "endLine": 332,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        for channel, command in zip(self.channels, self.commands):\n            # Expect an open_session for each command exec\n            session_opens.append(call())\n            # Expect that the channel gets an exec_command or etc\n            command.expect_execution(channel=channel)\n            # Expect written stdin, if given\n            if command.in_:\n",
                    "rendered": {
                      "text": "        for channel, command in zip(self.channels, self.commands):\n            # Expect an open_session for each command exec\n            session_opens.append(call())\n            # Expect that the channel gets an exec_command or etc\n            command.expect_execution(channel=channel)\n            # Expect written stdin, if given\n            if command.in_:\n",
                      "markdown": "`        for channel, command in zip(self.channels, self.commands):\n            # Expect an open_session for each command exec\n            session_opens.append(call())\n            # Expect that the channel gets an exec_command or etc\n            command.expect_execution(channel=channel)\n            # Expect written stdin, if given\n            if command.in_:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 13,
                  "endLine": 330,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        session_opens = []\n\n        for channel, command in zip(self.channels, self.commands):\n            # Expect an open_session for each command exec\n            session_opens.append(call())\n            # Expect that the channel gets an exec_command or etc\n            command.expect_execution(channel=channel)\n",
                    "rendered": {
                      "text": "        session_opens = []\n\n        for channel, command in zip(self.channels, self.commands):\n            # Expect an open_session for each command exec\n            session_opens.append(call())\n            # Expect that the channel gets an exec_command or etc\n            command.expect_execution(channel=channel)\n",
                      "markdown": "`        session_opens = []\n\n        for channel, command in zip(self.channels, self.commands):\n            # Expect an open_session for each command exec\n            session_opens.append(call())\n            # Expect that the channel gets an exec_command or etc\n            command.expect_execution(channel=channel)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 24,
                  "endLine": 314,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if self.guard_only:\n            return\n\n        # Per-session we expect a single transport get\n        transport = self.client.get_transport\n        transport.assert_called_once_with()\n        # And a single connect to our target host.\n",
                    "rendered": {
                      "text": "        if self.guard_only:\n            return\n\n        # Per-session we expect a single transport get\n        transport = self.client.get_transport\n        transport.assert_called_once_with()\n        # And a single connect to our target host.\n",
                      "markdown": "`        if self.guard_only:\n            return\n\n        # Per-session we expect a single transport get\n        transport = self.client.get_transport\n        transport.assert_called_once_with()\n        # And a single connect to our target host.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 19,
                  "endLine": 280,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        # Patch Path class inside transfer.py to prevent real fs touchery\n        self.path_patcher = patch(\"fabric.transfer.Path\")\n        self.path_patcher.start()\n        self.sftp = sftp = client.open_sftp.return_value\n\n        # Handle common filepath massage actions; tests will assume these.\n        def fake_abspath(path):\n",
                    "rendered": {
                      "text": "        # Patch Path class inside transfer.py to prevent real fs touchery\n        self.path_patcher = patch(\"fabric.transfer.Path\")\n        self.path_patcher.start()\n        self.sftp = sftp = client.open_sftp.return_value\n\n        # Handle common filepath massage actions; tests will assume these.\n        def fake_abspath(path):\n",
                      "markdown": "`        # Patch Path class inside transfer.py to prevent real fs touchery\n        self.path_patcher = patch(\"fabric.transfer.Path\")\n        self.path_patcher.start()\n        self.sftp = sftp = client.open_sftp.return_value\n\n        # Handle common filepath massage actions; tests will assume these.\n        def fake_abspath(path):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 37,
                  "endLine": 216,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        \"\"\"\n        Mocks `~paramiko.client.SSHClient` and `~paramiko.channel.Channel`.\n\n        Specifically, the client will expect itself to be connected to\n        ``self.host`` (if given), the channels will be associated with the\n        client's `~paramiko.transport.Transport`, and the channels will\n        expect/provide command-execution behavior as specified on the\n",
                    "rendered": {
                      "text": "        \"\"\"\n        Mocks `~paramiko.client.SSHClient` and `~paramiko.channel.Channel`.\n\n        Specifically, the client will expect itself to be connected to\n        ``self.host`` (if given), the channels will be associated with the\n        client's `~paramiko.transport.Transport`, and the channels will\n        expect/provide command-execution behavior as specified on the\n",
                      "markdown": "`        \"\"\"\n        Mocks `~paramiko.client.SSHClient` and `~paramiko.channel.Channel`.\n\n        Specifically, the client will expect itself to be connected to\n        ``self.host`` (if given), the channels will be associated with the\n        client's `~paramiko.transport.Transport`, and the channels will\n        expect/provide command-execution behavior as specified on the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/testing/base.py"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 52,
                  "endLine": 148,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            Giving ``cmd``, ``out`` etc alongside explicit ``commands`` is not\n            allowed and will result in an error.\n\n    :param bool enable_sftp: Whether to enable basic SFTP mocking support.\n\n    :param transfers:\n        None if no transfers to expect; otherwise, should be a list of dicts of\n",
                    "rendered": {
                      "text": "            Giving ``cmd``, ``out`` etc alongside explicit ``commands`` is not\n            allowed and will result in an error.\n\n    :param bool enable_sftp: Whether to enable basic SFTP mocking support.\n\n    :param transfers:\n        None if no transfers to expect; otherwise, should be a list of dicts of\n",
                      "markdown": "`            Giving ``cmd``, ``out`` etc alongside explicit ``commands`` is not\n            allowed and will result in an error.\n\n    :param bool enable_sftp: Whether to enable basic SFTP mocking support.\n\n    :param transfers:\n        None if no transfers to expect; otherwise, should be a list of dicts of\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 35,
                  "endLine": 118,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        # one loaded; otherwise, it loads and merges the user and system paths.\n        # TODO: CertificateFile support? Most people seem to rely on the\n        # implicit cert loading of IdentityFile...\n        for path in self.ssh_config.get(\"identityfile\", []):\n            try:\n                key = PKey.from_path(path)\n            except FileNotFoundError:\n",
                    "rendered": {
                      "text": "        # one loaded; otherwise, it loads and merges the user and system paths.\n        # TODO: CertificateFile support? Most people seem to rely on the\n        # implicit cert loading of IdentityFile...\n        for path in self.ssh_config.get(\"identityfile\", []):\n            try:\n                key = PKey.from_path(path)\n            except FileNotFoundError:\n",
                      "markdown": "`        # one loaded; otherwise, it loads and merges the user and system paths.\n        # TODO: CertificateFile support? Most people seem to rely on the\n        # implicit cert loading of IdentityFile...\n        for path in self.ssh_config.get(\"identityfile\", []):\n            try:\n                key = PKey.from_path(path)\n            except FileNotFoundError:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 47,
                  "endLine": 193,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        user = self.username\n        prompter = partial(getpass, f\"{user}'s password: \")\n        # Then password.\n        yield Password(username=self.username, password_getter=prompter)\n\n    def authenticate(self, *args, **kwargs):\n        # Just do what our parent would, except make sure we close() after.\n",
                    "rendered": {
                      "text": "        user = self.username\n        prompter = partial(getpass, f\"{user}'s password: \")\n        # Then password.\n        yield Password(username=self.username, password_getter=prompter)\n\n    def authenticate(self, *args, **kwargs):\n        # Just do what our parent would, except make sure we close() after.\n",
                      "markdown": "`        user = self.username\n        prompter = partial(getpass, f\"{user}'s password: \")\n        # Then password.\n        yield Password(username=self.username, password_getter=prompter)\n\n    def authenticate(self, *args, **kwargs):\n        # Just do what our parent would, except make sure we close() after.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 14,
                  "endLine": 193,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        user = self.username\n        prompter = partial(getpass, f\"{user}'s password: \")\n        # Then password.\n        yield Password(username=self.username, password_getter=prompter)\n\n    def authenticate(self, *args, **kwargs):\n        # Just do what our parent would, except make sure we close() after.\n",
                    "rendered": {
                      "text": "        user = self.username\n        prompter = partial(getpass, f\"{user}'s password: \")\n        # Then password.\n        yield Password(username=self.username, password_getter=prompter)\n\n    def authenticate(self, *args, **kwargs):\n        # Just do what our parent would, except make sure we close() after.\n",
                      "markdown": "`        user = self.username\n        prompter = partial(getpass, f\"{user}'s password: \")\n        # Then password.\n        yield Password(username=self.username, password_getter=prompter)\n\n    def authenticate(self, *args, **kwargs):\n        # Just do what our parent would, except make sure we close() after.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 15,
                  "endLine": 192,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        yield from self.get_pubkeys()\n        user = self.username\n        prompter = partial(getpass, f\"{user}'s password: \")\n        # Then password.\n        yield Password(username=self.username, password_getter=prompter)\n\n    def authenticate(self, *args, **kwargs):\n",
                    "rendered": {
                      "text": "        yield from self.get_pubkeys()\n        user = self.username\n        prompter = partial(getpass, f\"{user}'s password: \")\n        # Then password.\n        yield Password(username=self.username, password_getter=prompter)\n\n    def authenticate(self, *args, **kwargs):\n",
                      "markdown": "`        yield from self.get_pubkeys()\n        user = self.username\n        prompter = partial(getpass, f\"{user}'s password: \")\n        # Then password.\n        yield Password(username=self.username, password_getter=prompter)\n\n    def authenticate(self, *args, **kwargs):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 47,
                  "endLine": 191,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        # Public keys of all kinds typically first.\n        yield from self.get_pubkeys()\n        user = self.username\n        prompter = partial(getpass, f\"{user}'s password: \")\n        # Then password.\n        yield Password(username=self.username, password_getter=prompter)\n\n",
                    "rendered": {
                      "text": "        # Public keys of all kinds typically first.\n        yield from self.get_pubkeys()\n        user = self.username\n        prompter = partial(getpass, f\"{user}'s password: \")\n        # Then password.\n        yield Password(username=self.username, password_getter=prompter)\n\n",
                      "markdown": "`        # Public keys of all kinds typically first.\n        yield from self.get_pubkeys()\n        user = self.username\n        prompter = partial(getpass, f\"{user}'s password: \")\n        # Then password.\n        yield Password(username=self.username, password_getter=prompter)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 26,
                  "endLine": 177,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            else:\n                deferred_agent_keys.append(key)\n        for key in deferred_agent_keys:\n            yield InMemoryPrivateKey(username=self.username, pkey=key)\n        for source in cli_keys:\n            yield source\n        # This will now be just the config-borne keys that were NOT in agent\n",
                    "rendered": {
                      "text": "            else:\n                deferred_agent_keys.append(key)\n        for key in deferred_agent_keys:\n            yield InMemoryPrivateKey(username=self.username, pkey=key)\n        for source in cli_keys:\n            yield source\n        # This will now be just the config-borne keys that were NOT in agent\n",
                      "markdown": "`            else:\n                deferred_agent_keys.append(key)\n        for key in deferred_agent_keys:\n            yield InMemoryPrivateKey(username=self.username, pkey=key)\n        for source in cli_keys:\n            yield source\n        # This will now be just the config-borne keys that were NOT in agent\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 30,
                  "endLine": 171,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                    config_index = i\n                    break\n            if config_index:\n                yield InMemoryPrivateKey(username=self.username, pkey=key)\n                # Nuke so it doesn't get re-yielded by regular conf keys bit\n                del config_keys[config_index]\n            else:\n",
                    "rendered": {
                      "text": "                    config_index = i\n                    break\n            if config_index:\n                yield InMemoryPrivateKey(username=self.username, pkey=key)\n                # Nuke so it doesn't get re-yielded by regular conf keys bit\n                del config_keys[config_index]\n            else:\n",
                      "markdown": "`                    config_index = i\n                    break\n            if config_index:\n                yield InMemoryPrivateKey(username=self.username, pkey=key)\n                # Nuke so it doesn't get re-yielded by regular conf keys bit\n                del config_keys[config_index]\n            else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 31,
                  "endLine": 141,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                    key = PKey.from_path(path)\n                except FileNotFoundError:\n                    continue\n                source = OnDiskPrivateKey(\n                    username=self.username,\n                    source=\"implicit-home\",\n                    path=path,\n",
                    "rendered": {
                      "text": "                    key = PKey.from_path(path)\n                except FileNotFoundError:\n                    continue\n                source = OnDiskPrivateKey(\n                    username=self.username,\n                    source=\"implicit-home\",\n                    path=path,\n",
                      "markdown": "`                    key = PKey.from_path(path)\n                except FileNotFoundError:\n                    continue\n                source = OnDiskPrivateKey(\n                    username=self.username,\n                    source=\"implicit-home\",\n                    path=path,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 27,
                  "endLine": 123,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                key = PKey.from_path(path)\n            except FileNotFoundError:\n                continue\n            source = OnDiskPrivateKey(\n                username=self.username,\n                source=\"ssh-config\",\n                path=path,\n",
                    "rendered": {
                      "text": "                key = PKey.from_path(path)\n            except FileNotFoundError:\n                continue\n            source = OnDiskPrivateKey(\n                username=self.username,\n                source=\"ssh-config\",\n                path=path,\n",
                      "markdown": "`                key = PKey.from_path(path)\n            except FileNotFoundError:\n                continue\n            source = OnDiskPrivateKey(\n                username=self.username,\n                source=\"ssh-config\",\n                path=path,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 24,
                  "endLine": 118,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        # one loaded; otherwise, it loads and merges the user and system paths.\n        # TODO: CertificateFile support? Most people seem to rely on the\n        # implicit cert loading of IdentityFile...\n        for path in self.ssh_config.get(\"identityfile\", []):\n            try:\n                key = PKey.from_path(path)\n            except FileNotFoundError:\n",
                    "rendered": {
                      "text": "        # one loaded; otherwise, it loads and merges the user and system paths.\n        # TODO: CertificateFile support? Most people seem to rely on the\n        # implicit cert loading of IdentityFile...\n        for path in self.ssh_config.get(\"identityfile\", []):\n            try:\n                key = PKey.from_path(path)\n            except FileNotFoundError:\n",
                      "markdown": "`        # one loaded; otherwise, it loads and merges the user and system paths.\n        # TODO: CertificateFile support? Most people seem to rely on the\n        # implicit cert loading of IdentityFile...\n        for path in self.ssh_config.get(\"identityfile\", []):\n            try:\n                key = PKey.from_path(path)\n            except FileNotFoundError:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 27,
                  "endLine": 104,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                key = PKey.from_path(path)\n            except FileNotFoundError:\n                continue\n            source = OnDiskPrivateKey(\n                username=self.username,\n                source=\"python-config\",\n                path=path,\n",
                    "rendered": {
                      "text": "                key = PKey.from_path(path)\n            except FileNotFoundError:\n                continue\n            source = OnDiskPrivateKey(\n                username=self.username,\n                source=\"python-config\",\n                path=path,\n",
                      "markdown": "`                key = PKey.from_path(path)\n            except FileNotFoundError:\n                continue\n            source = OnDiskPrivateKey(\n                username=self.username,\n                source=\"python-config\",\n                path=path,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 6,
                  "endLine": 67,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    # ends might start with 'publickey,password,keyboard-interactive'; so it'll\n    # try all pubkeys found above before eventually trying a password prompt,\n    # and then if THAT fails, it will try kbdint call-and-response (similar to\n    # password but where server sends you the prompt(s) it wants displayed)\n\n    def __init__(self, ssh_config, fabric_config, username):\n        \"\"\"\n",
                    "rendered": {
                      "text": "    # ends might start with 'publickey,password,keyboard-interactive'; so it'll\n    # try all pubkeys found above before eventually trying a password prompt,\n    # and then if THAT fails, it will try kbdint call-and-response (similar to\n    # password but where server sends you the prompt(s) it wants displayed)\n\n    def __init__(self, ssh_config, fabric_config, username):\n        \"\"\"\n",
                      "markdown": "`    # ends might start with 'publickey,password,keyboard-interactive'; so it'll\n    # try all pubkeys found above before eventually trying a password prompt,\n    # and then if THAT fails, it will try kbdint call-and-response (similar to\n    # password but where server sends you the prompt(s) it wants displayed)\n\n    def __init__(self, ssh_config, fabric_config, username):\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 61,
                  "endLine": 65,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    # - while-loops along that, or next returned, list of acceptable\n    # authmethods, using a handler table, so eg a 'standard' openssh on both\n    # ends might start with 'publickey,password,keyboard-interactive'; so it'll\n    # try all pubkeys found above before eventually trying a password prompt,\n    # and then if THAT fails, it will try kbdint call-and-response (similar to\n    # password but where server sends you the prompt(s) it wants displayed)\n\n",
                    "rendered": {
                      "text": "    # - while-loops along that, or next returned, list of acceptable\n    # authmethods, using a handler table, so eg a 'standard' openssh on both\n    # ends might start with 'publickey,password,keyboard-interactive'; so it'll\n    # try all pubkeys found above before eventually trying a password prompt,\n    # and then if THAT fails, it will try kbdint call-and-response (similar to\n    # password but where server sends you the prompt(s) it wants displayed)\n\n",
                      "markdown": "`    # - while-loops along that, or next returned, list of acceptable\n    # authmethods, using a handler table, so eg a 'standard' openssh on both\n    # ends might start with 'publickey,password,keyboard-interactive'; so it'll\n    # try all pubkeys found above before eventually trying a password prompt,\n    # and then if THAT fails, it will try kbdint call-and-response (similar to\n    # password but where server sends you the prompt(s) it wants displayed)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 39,
                  "endLine": 64,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    # - auth_none to get list of acceptable authmethods\n    # - while-loops along that, or next returned, list of acceptable\n    # authmethods, using a handler table, so eg a 'standard' openssh on both\n    # ends might start with 'publickey,password,keyboard-interactive'; so it'll\n    # try all pubkeys found above before eventually trying a password prompt,\n    # and then if THAT fails, it will try kbdint call-and-response (similar to\n    # password but where server sends you the prompt(s) it wants displayed)\n",
                    "rendered": {
                      "text": "    # - auth_none to get list of acceptable authmethods\n    # - while-loops along that, or next returned, list of acceptable\n    # authmethods, using a handler table, so eg a 'standard' openssh on both\n    # ends might start with 'publickey,password,keyboard-interactive'; so it'll\n    # try all pubkeys found above before eventually trying a password prompt,\n    # and then if THAT fails, it will try kbdint call-and-response (similar to\n    # password but where server sends you the prompt(s) it wants displayed)\n",
                      "markdown": "`    # - auth_none to get list of acceptable authmethods\n    # - while-loops along that, or next returned, list of acceptable\n    # authmethods, using a handler table, so eg a 'standard' openssh on both\n    # ends might start with 'publickey,password,keyboard-interactive'; so it'll\n    # try all pubkeys found above before eventually trying a password prompt,\n    # and then if THAT fails, it will try kbdint call-and-response (similar to\n    # password but where server sends you the prompt(s) it wants displayed)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 70,
                  "endLine": 47,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    # path; this will also add to identity_files if any IdentityFile found\n    # (after the CLI ones)\n    # - lots of value init, string interpolation, etc\n    # - if no other identity_files exist at this point, fill in the ~/.ssh/\n    # defaults:\n    #   - in order: rsa, dsa, ecdsa, ecdsa_sk, ed25519, xmss (???)\n    # - initial connection (ssh_connect() - presumably handshake/hostkey/kex)\n",
                    "rendered": {
                      "text": "    # path; this will also add to identity_files if any IdentityFile found\n    # (after the CLI ones)\n    # - lots of value init, string interpolation, etc\n    # - if no other identity_files exist at this point, fill in the ~/.ssh/\n    # defaults:\n    #   - in order: rsa, dsa, ecdsa, ecdsa_sk, ed25519, xmss (???)\n    # - initial connection (ssh_connect() - presumably handshake/hostkey/kex)\n",
                      "markdown": "`    # path; this will also add to identity_files if any IdentityFile found\n    # (after the CLI ones)\n    # - lots of value init, string interpolation, etc\n    # - if no other identity_files exist at this point, fill in the ~/.ssh/\n    # defaults:\n    #   - in order: rsa, dsa, ecdsa, ecdsa_sk, ed25519, xmss (???)\n    # - initial connection (ssh_connect() - presumably handshake/hostkey/kex)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 47,
                  "endLine": 25,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        It works best with passphraseless (eg ssh-agent) private key auth for\n        now and will grow more features in future releases.\n\n    For example, it accepts a `~paramiko.config.SSHConfig` and uses any\n    relevant ``IdentityFile`` directives from that object, along with keys from\n    your home directory and any local SSH agent. Keys specified at runtime are\n    tried last, just as with ``ssh -i /path/to/key`` (this is one departure\n",
                    "rendered": {
                      "text": "        It works best with passphraseless (eg ssh-agent) private key auth for\n        now and will grow more features in future releases.\n\n    For example, it accepts a `~paramiko.config.SSHConfig` and uses any\n    relevant ``IdentityFile`` directives from that object, along with keys from\n    your home directory and any local SSH agent. Keys specified at runtime are\n    tried last, just as with ``ssh -i /path/to/key`` (this is one departure\n",
                      "markdown": "`        It works best with passphraseless (eg ssh-agent) private key auth for\n        now and will grow more features in future releases.\n\n    For example, it accepts a `~paramiko.config.SSHConfig` and uses any\n    relevant ``IdentityFile`` directives from that object, along with keys from\n    your home directory and any local SSH agent. Keys specified at runtime are\n    tried last, just as with ``ssh -i /path/to/key`` (this is one departure\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 10,
                  "endLine": 10,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    AuthStrategy,\n    Password,\n    InMemoryPrivateKey,\n    OnDiskPrivateKey,\n)\n\nfrom .util import win32\n",
                    "rendered": {
                      "text": "    AuthStrategy,\n    Password,\n    InMemoryPrivateKey,\n    OnDiskPrivateKey,\n)\n\nfrom .util import win32\n",
                      "markdown": "`    AuthStrategy,\n    Password,\n    InMemoryPrivateKey,\n    OnDiskPrivateKey,\n)\n\nfrom .util import win32\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 12,
                  "endLine": 9,
                  "endColumn": 22,
                  "snippet": {
                    "text": "from paramiko.auth_strategy import (\n    AuthStrategy,\n    Password,\n    InMemoryPrivateKey,\n    OnDiskPrivateKey,\n)\n\n",
                    "rendered": {
                      "text": "from paramiko.auth_strategy import (\n    AuthStrategy,\n    Password,\n    InMemoryPrivateKey,\n    OnDiskPrivateKey,\n)\n\n",
                      "markdown": "`from paramiko.auth_strategy import (\n    AuthStrategy,\n    Password,\n    InMemoryPrivateKey,\n    OnDiskPrivateKey,\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 12,
                  "snippet": {
                    "text": "from paramiko import Agent, PKey\nfrom paramiko.auth_strategy import (\n    AuthStrategy,\n    Password,\n    InMemoryPrivateKey,\n    OnDiskPrivateKey,\n)\n",
                    "rendered": {
                      "text": "from paramiko import Agent, PKey\nfrom paramiko.auth_strategy import (\n    AuthStrategy,\n    Password,\n    InMemoryPrivateKey,\n    OnDiskPrivateKey,\n)\n",
                      "markdown": "`from paramiko import Agent, PKey\nfrom paramiko.auth_strategy import (\n    AuthStrategy,\n    Password,\n    InMemoryPrivateKey,\n    OnDiskPrivateKey,\n)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 9,
                  "endLine": 130,
                  "endColumn": 13,
                  "snippet": {
                    "text": "                pkey=key,\n            )\n            (config_certs if key.public_blob else config_keys).append(source)\n        # At this point, if we've still got no keys or certs, look in the\n        # default user locations.\n        if not any((config_certs, config_keys, cli_certs, cli_keys)):\n            user_ssh = Path.home() / f\"{'' if win32 else '.'}ssh\"\n",
                    "rendered": {
                      "text": "                pkey=key,\n            )\n            (config_certs if key.public_blob else config_keys).append(source)\n        # At this point, if we've still got no keys or certs, look in the\n        # default user locations.\n        if not any((config_certs, config_keys, cli_certs, cli_keys)):\n            user_ssh = Path.home() / f\"{'' if win32 else '.'}ssh\"\n",
                      "markdown": "`                pkey=key,\n            )\n            (config_certs if key.public_blob else config_keys).append(source)\n        # At this point, if we've still got no keys or certs, look in the\n        # default user locations.\n        if not any((config_certs, config_keys, cli_certs, cli_keys)):\n            user_ssh = Path.home() / f\"{'' if win32 else '.'}ssh\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 40,
                  "endLine": 47,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    # path; this will also add to identity_files if any IdentityFile found\n    # (after the CLI ones)\n    # - lots of value init, string interpolation, etc\n    # - if no other identity_files exist at this point, fill in the ~/.ssh/\n    # defaults:\n    #   - in order: rsa, dsa, ecdsa, ecdsa_sk, ed25519, xmss (???)\n    # - initial connection (ssh_connect() - presumably handshake/hostkey/kex)\n",
                    "rendered": {
                      "text": "    # path; this will also add to identity_files if any IdentityFile found\n    # (after the CLI ones)\n    # - lots of value init, string interpolation, etc\n    # - if no other identity_files exist at this point, fill in the ~/.ssh/\n    # defaults:\n    #   - in order: rsa, dsa, ecdsa, ecdsa_sk, ed25519, xmss (???)\n    # - initial connection (ssh_connect() - presumably handshake/hostkey/kex)\n",
                      "markdown": "`    # path; this will also add to identity_files if any IdentityFile found\n    # (after the CLI ones)\n    # - lots of value init, string interpolation, etc\n    # - if no other identity_files exist at this point, fill in the ~/.ssh/\n    # defaults:\n    #   - in order: rsa, dsa, ecdsa, ecdsa_sk, ed25519, xmss (???)\n    # - initial connection (ssh_connect() - presumably handshake/hostkey/kex)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 63,
                  "endLine": 27,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n    For example, it accepts a `~paramiko.config.SSHConfig` and uses any\n    relevant ``IdentityFile`` directives from that object, along with keys from\n    your home directory and any local SSH agent. Keys specified at runtime are\n    tried last, just as with ``ssh -i /path/to/key`` (this is one departure\n    from the legacy/off-spec auth behavior observed in older Paramiko and\n    Fabric versions).\n",
                    "rendered": {
                      "text": "\n    For example, it accepts a `~paramiko.config.SSHConfig` and uses any\n    relevant ``IdentityFile`` directives from that object, along with keys from\n    your home directory and any local SSH agent. Keys specified at runtime are\n    tried last, just as with ``ssh -i /path/to/key`` (this is one departure\n    from the legacy/off-spec auth behavior observed in older Paramiko and\n    Fabric versions).\n",
                      "markdown": "`\n    For example, it accepts a `~paramiko.config.SSHConfig` and uses any\n    relevant ``IdentityFile`` directives from that object, along with keys from\n    your home directory and any local SSH agent. Keys specified at runtime are\n    tried last, just as with ``ssh -i /path/to/key`` (this is one departure\n    from the legacy/off-spec auth behavior observed in older Paramiko and\n    Fabric versions).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 51,
                  "endLine": 152,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        # TODO: set agent_keys to empty list if IdentitiesOnly is true\n        agent_keys = self.agent.get_keys()\n\n        # We've finally loaded everything; now it's time to throw them upwards\n        # in the intended order...\n        # TODO: define subroutine that dedupes (& honors\n        # PubkeyAcceptedAlgorithms) then rub that on all of the below.\n",
                    "rendered": {
                      "text": "        # TODO: set agent_keys to empty list if IdentitiesOnly is true\n        agent_keys = self.agent.get_keys()\n\n        # We've finally loaded everything; now it's time to throw them upwards\n        # in the intended order...\n        # TODO: define subroutine that dedupes (& honors\n        # PubkeyAcceptedAlgorithms) then rub that on all of the below.\n",
                      "markdown": "`        # TODO: set agent_keys to empty list if IdentitiesOnly is true\n        agent_keys = self.agent.get_keys()\n\n        # We've finally loaded everything; now it's time to throw them upwards\n        # in the intended order...\n        # TODO: define subroutine that dedupes (& honors\n        # PubkeyAcceptedAlgorithms) then rub that on all of the below.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 37,
                  "endLine": 81,
                  "endColumn": 42,
                  "snippet": {
                    "text": "          have to - it's a synthesis of CLI, runtime,\n          invoke/fabric-configuration, and ssh_config configuration.\n\n        Also handles connecting to an SSH agent, if possible, for easier\n        lifecycle tracking.\n        \"\"\"\n        super().__init__(ssh_config=ssh_config)\n",
                    "rendered": {
                      "text": "          have to - it's a synthesis of CLI, runtime,\n          invoke/fabric-configuration, and ssh_config configuration.\n\n        Also handles connecting to an SSH agent, if possible, for easier\n        lifecycle tracking.\n        \"\"\"\n        super().__init__(ssh_config=ssh_config)\n",
                      "markdown": "`          have to - it's a synthesis of CLI, runtime,\n          invoke/fabric-configuration, and ssh_config configuration.\n\n        Also handles connecting to an SSH agent, if possible, for easier\n        lifecycle tracking.\n        \"\"\"\n        super().__init__(ssh_config=ssh_config)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/auth.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 37,
                  "endLine": 27,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n    For example, it accepts a `~paramiko.config.SSHConfig` and uses any\n    relevant ``IdentityFile`` directives from that object, along with keys from\n    your home directory and any local SSH agent. Keys specified at runtime are\n    tried last, just as with ``ssh -i /path/to/key`` (this is one departure\n    from the legacy/off-spec auth behavior observed in older Paramiko and\n    Fabric versions).\n",
                    "rendered": {
                      "text": "\n    For example, it accepts a `~paramiko.config.SSHConfig` and uses any\n    relevant ``IdentityFile`` directives from that object, along with keys from\n    your home directory and any local SSH agent. Keys specified at runtime are\n    tried last, just as with ``ssh -i /path/to/key`` (this is one departure\n    from the legacy/off-spec auth behavior observed in older Paramiko and\n    Fabric versions).\n",
                      "markdown": "`\n    For example, it accepts a `~paramiko.config.SSHConfig` and uses any\n    relevant ``IdentityFile`` directives from that object, along with keys from\n    your home directory and any local SSH agent. Keys specified at runtime are\n    tried last, just as with ``ssh -i /path/to/key`` (this is one departure\n    from the legacy/off-spec auth behavior observed in older Paramiko and\n    Fabric versions).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/tunnels.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 52,
                  "endLine": 91,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n        exceptions = []\n        # Propogate shutdown signal to all tunnels & wait for closure\n        # TODO: would be nice to have some output or at least logging here,\n        # especially for \"sets up a handful of tunnels\" use cases like\n        # forwarding nontrivial HTTP traffic.\n        for tunnel in tunnels:\n",
                    "rendered": {
                      "text": "\n        exceptions = []\n        # Propogate shutdown signal to all tunnels & wait for closure\n        # TODO: would be nice to have some output or at least logging here,\n        # especially for \"sets up a handful of tunnels\" use cases like\n        # forwarding nontrivial HTTP traffic.\n        for tunnel in tunnels:\n",
                      "markdown": "`\n        exceptions = []\n        # Propogate shutdown signal to all tunnels & wait for closure\n        # TODO: would be nice to have some output or at least logging here,\n        # especially for \"sets up a handful of tunnels\" use cases like\n        # forwarding nontrivial HTTP traffic.\n        for tunnel in tunnels:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/tunnels.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 21,
                  "endLine": 65,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        while not self.finished.is_set():\n            # Main loop-wait: accept connections on the local listener\n            # NOTE: EAGAIN means \"you're nonblocking and nobody happened to\n            # connect at this point in time\"\n            try:\n                tun_sock, local_addr = sock.accept()\n                # Set TCP_NODELAY to match OpenSSH's forwarding socket behavior\n",
                    "rendered": {
                      "text": "        while not self.finished.is_set():\n            # Main loop-wait: accept connections on the local listener\n            # NOTE: EAGAIN means \"you're nonblocking and nobody happened to\n            # connect at this point in time\"\n            try:\n                tun_sock, local_addr = sock.accept()\n                # Set TCP_NODELAY to match OpenSSH's forwarding socket behavior\n",
                      "markdown": "`        while not self.finished.is_set():\n            # Main loop-wait: accept connections on the local listener\n            # NOTE: EAGAIN means \"you're nonblocking and nobody happened to\n            # connect at this point in time\"\n            try:\n                tun_sock, local_addr = sock.accept()\n                # Set TCP_NODELAY to match OpenSSH's forwarding socket behavior\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/tunnels.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 43,
                  "endLine": 111,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\nclass Tunnel(ExceptionHandlingThread):\n    \"\"\"\n    Bidirectionally forward data between an SSH channel and local socket.\n\n    .. versionadded:: 2.0\n    \"\"\"\n",
                    "rendered": {
                      "text": "\nclass Tunnel(ExceptionHandlingThread):\n    \"\"\"\n    Bidirectionally forward data between an SSH channel and local socket.\n\n    .. versionadded:: 2.0\n    \"\"\"\n",
                      "markdown": "`\nclass Tunnel(ExceptionHandlingThread):\n    \"\"\"\n    Bidirectionally forward data between an SSH channel and local socket.\n\n    .. versionadded:: 2.0\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/tunnels.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 24,
                  "endLine": 91,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        exceptions = []\n        # Propogate shutdown signal to all tunnels & wait for closure\n        # TODO: would be nice to have some output or at least logging here,\n        # especially for \"sets up a handful of tunnels\" use cases like\n        # forwarding nontrivial HTTP traffic.\n        for tunnel in tunnels:\n",
                    "rendered": {
                      "text": "\n        exceptions = []\n        # Propogate shutdown signal to all tunnels & wait for closure\n        # TODO: would be nice to have some output or at least logging here,\n        # especially for \"sets up a handful of tunnels\" use cases like\n        # forwarding nontrivial HTTP traffic.\n        for tunnel in tunnels:\n",
                      "markdown": "`\n        exceptions = []\n        # Propogate shutdown signal to all tunnels & wait for closure\n        # TODO: would be nice to have some output or at least logging here,\n        # especially for \"sets up a handful of tunnels\" use cases like\n        # forwarding nontrivial HTTP traffic.\n        for tunnel in tunnels:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/tunnels.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 51,
                  "endLine": 19,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\nclass TunnelManager(ExceptionHandlingThread):\n    \"\"\"\n    Thread subclass for tunnelling connections over SSH between two endpoints.\n\n    Specifically, one instance of this class is sufficient to sit around\n    forwarding any number of individual connections made to one end of the\n",
                    "rendered": {
                      "text": "\nclass TunnelManager(ExceptionHandlingThread):\n    \"\"\"\n    Thread subclass for tunnelling connections over SSH between two endpoints.\n\n    Specifically, one instance of this class is sufficient to sit around\n    forwarding any number of individual connections made to one end of the\n",
                      "markdown": "`\nclass TunnelManager(ExceptionHandlingThread):\n    \"\"\"\n    Thread subclass for tunnelling connections over SSH between two endpoints.\n\n    Specifically, one instance of this class is sufficient to sit around\n    forwarding any number of individual connections made to one end of the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/tunnels.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 6,
                  "endLine": 11,
                  "snippet": {
                    "text": "\nimport select\nimport socket\nimport time\nfrom threading import Event\n\nfrom invoke.exceptions import ThreadException\nfrom invoke.util import ExceptionHandlingThread\n",
                    "rendered": {
                      "text": "\nimport select\nimport socket\nimport time\nfrom threading import Event\n\nfrom invoke.exceptions import ThreadException\nfrom invoke.util import ExceptionHandlingThread\n",
                      "markdown": "`\nimport select\nimport socket\nimport time\nfrom threading import Event\n\nfrom invoke.exceptions import ThreadException\nfrom invoke.util import ExceptionHandlingThread\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/tasks.py"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 52,
                  "endLine": 48,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n        - A string appropriate for being the first positional argument to\n          `.Connection` - see its docs for details, but these are typically\n          shorthand-only convenience strings like ``hostname.example.com`` or\n          ``user@host:port``.\n        - A dictionary appropriate for use as keyword arguments when\n          instantiating a `.Connection`. Useful for values that don't mesh well\n",
                    "rendered": {
                      "text": "\n        - A string appropriate for being the first positional argument to\n          `.Connection` - see its docs for details, but these are typically\n          shorthand-only convenience strings like ``hostname.example.com`` or\n          ``user@host:port``.\n        - A dictionary appropriate for use as keyword arguments when\n          instantiating a `.Connection`. Useful for values that don't mesh well\n",
                      "markdown": "`\n        - A string appropriate for being the first positional argument to\n          `.Connection` - see its docs for details, but these are typically\n          shorthand-only convenience strings like ``hostname.example.com`` or\n          ``user@host:port``.\n        - A dictionary appropriate for use as keyword arguments when\n          instantiating a `.Connection`. Useful for values that don't mesh well\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/exceptions.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 49,
                  "endLine": 1,
                  "endColumn": 55,
                  "snippet": {
                    "text": "# TODO: this may want to move to Invoke if we can find a use for it there too?\n# Or make it _more_ narrowly focused and stay here?\nclass NothingToDo(Exception):\n    pass\n",
                    "rendered": {
                      "text": "# TODO: this may want to move to Invoke if we can find a use for it there too?\n# Or make it _more_ narrowly focused and stay here?\nclass NothingToDo(Exception):\n    pass\n",
                      "markdown": "`# TODO: this may want to move to Invoke if we can find a use for it there too?\n# Or make it _more_ narrowly focused and stay here?\nclass NothingToDo(Exception):\n    pass\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/runners.py"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 15,
                  "endLine": 156,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    # hooked up; we cannot do that.\n    # * output prefixing\n    # * agent forwarding\n    # * reading at 4096 bytes/time instead of whatever inv defaults to (also,\n    # document why we are doing that, iirc it changed recentlyish via ticket)\n    # * TODO: oh god so much more, go look it up\n\n",
                    "rendered": {
                      "text": "    # hooked up; we cannot do that.\n    # * output prefixing\n    # * agent forwarding\n    # * reading at 4096 bytes/time instead of whatever inv defaults to (also,\n    # document why we are doing that, iirc it changed recentlyish via ticket)\n    # * TODO: oh god so much more, go look it up\n\n",
                      "markdown": "`    # hooked up; we cannot do that.\n    # * output prefixing\n    # * agent forwarding\n    # * reading at 4096 bytes/time instead of whatever inv defaults to (also,\n    # document why we are doing that, iirc it changed recentlyish via ticket)\n    # * TODO: oh god so much more, go look it up\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/runners.py"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 57,
                  "endLine": 56,
                  "snippet": {
                    "text": "            cols, rows = pty_size()\n            self.channel.get_pty(width=cols, height=rows)\n            # If platform supports, also respond to SIGWINCH (window change) by\n            # sending the sshd a window-change message to update\n            if cares_about_SIGWINCH():\n                signal.signal(signal.SIGWINCH, self.handle_window_change)\n        if env:\n            # TODO: honor SendEnv from ssh_config (but if we do, _should_ we\n",
                    "rendered": {
                      "text": "            cols, rows = pty_size()\n            self.channel.get_pty(width=cols, height=rows)\n            # If platform supports, also respond to SIGWINCH (window change) by\n            # sending the sshd a window-change message to update\n            if cares_about_SIGWINCH():\n                signal.signal(signal.SIGWINCH, self.handle_window_change)\n        if env:\n            # TODO: honor SendEnv from ssh_config (but if we do, _should_ we\n",
                      "markdown": "`            cols, rows = pty_size()\n            self.channel.get_pty(width=cols, height=rows)\n            # If platform supports, also respond to SIGWINCH (window change) by\n            # sending the sshd a window-change message to update\n            if cares_about_SIGWINCH():\n                signal.signal(signal.SIGWINCH, self.handle_window_change)\n        if env:\n            # TODO: honor SendEnv from ssh_config (but if we do, _should_ we\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/runners.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 43,
                  "endLine": 63,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            # honor it even when prefixing? That would depart from OpenSSH\n            # somewhat (albeit as a \"what we can do that it cannot\" feature...)\n            if self.inline_env:\n                # TODO: escaping, if we can find a FOOLPROOF THIRD PARTY METHOD\n                # for doing so!\n                # TODO: switch to using a higher-level generic command\n                # prefixing functionality, when implemented.\n",
                    "rendered": {
                      "text": "            # honor it even when prefixing? That would depart from OpenSSH\n            # somewhat (albeit as a \"what we can do that it cannot\" feature...)\n            if self.inline_env:\n                # TODO: escaping, if we can find a FOOLPROOF THIRD PARTY METHOD\n                # for doing so!\n                # TODO: switch to using a higher-level generic command\n                # prefixing functionality, when implemented.\n",
                      "markdown": "`            # honor it even when prefixing? That would depart from OpenSSH\n            # somewhat (albeit as a \"what we can do that it cannot\" feature...)\n            if self.inline_env:\n                # TODO: escaping, if we can find a FOOLPROOF THIRD PARTY METHOD\n                # for doing so!\n                # TODO: switch to using a higher-level generic command\n                # prefixing functionality, when implemented.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/runners.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 37,
                  "endLine": 35,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        Additional keyword arguments defined here are listed below.\n\n        :param bool inline_env:\n            Whether to 'inline' shell env vars as prefixed parameters, instead\n            of trying to submit them via `.Channel.update_environment`.\n            Default: ``True``.\n\n",
                    "rendered": {
                      "text": "        Additional keyword arguments defined here are listed below.\n\n        :param bool inline_env:\n            Whether to 'inline' shell env vars as prefixed parameters, instead\n            of trying to submit them via `.Channel.update_environment`.\n            Default: ``True``.\n\n",
                      "markdown": "`        Additional keyword arguments defined here are listed below.\n\n        :param bool inline_env:\n            Whether to 'inline' shell env vars as prefixed parameters, instead\n            of trying to submit them via `.Channel.update_environment`.\n            Default: ``True``.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/runners.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 31,
                  "endLine": 16,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\nclass Remote(Runner):\n    \"\"\"\n    Run a shell command over an SSH connection.\n\n    This class subclasses `invoke.runners.Runner`; please see its documentation\n    for most public API details.\n",
                    "rendered": {
                      "text": "\nclass Remote(Runner):\n    \"\"\"\n    Run a shell command over an SSH connection.\n\n    This class subclasses `invoke.runners.Runner`; please see its documentation\n    for most public API details.\n",
                      "markdown": "`\nclass Remote(Runner):\n    \"\"\"\n    Run a shell command over an SSH connection.\n\n    This class subclasses `invoke.runners.Runner`; please see its documentation\n    for most public API details.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/.PKGINFO"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "arch = x86_64\nsize = 226038\norigin = py3-fabric\npkgdesc = High level SSH command execution\nurl = \ncommit = e7d125f8c00c4ea1c0ce15fc64515e8248c2c662\nbuilddate = 1720641378\n",
                    "rendered": {
                      "text": "arch = x86_64\nsize = 226038\norigin = py3-fabric\npkgdesc = High level SSH command execution\nurl = \ncommit = e7d125f8c00c4ea1c0ce15fc64515e8248c2c662\nbuilddate = 1720641378\n",
                      "markdown": "`arch = x86_64\nsize = 226038\norigin = py3-fabric\npkgdesc = High level SSH command execution\nurl = \ncommit = e7d125f8c00c4ea1c0ce15fc64515e8248c2c662\nbuilddate = 1720641378\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 21,
                  "endLine": 170,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        if is_file_like:\n            self.sftp.getfo(remotepath=remote, fl=local)\n        else:\n            self.sftp.get(remotepath=remote, localpath=local)\n            # Set mode to same as remote end\n            # TODO: Push this down into SFTPClient sometime (requires backwards\n            # incompat release.)\n",
                    "rendered": {
                      "text": "        if is_file_like:\n            self.sftp.getfo(remotepath=remote, fl=local)\n        else:\n            self.sftp.get(remotepath=remote, localpath=local)\n            # Set mode to same as remote end\n            # TODO: Push this down into SFTPClient sometime (requires backwards\n            # incompat release.)\n",
                      "markdown": "`        if is_file_like:\n            self.sftp.getfo(remotepath=remote, fl=local)\n        else:\n            self.sftp.get(remotepath=remote, localpath=local)\n            # Set mode to same as remote end\n            # TODO: Push this down into SFTPClient sometime (requires backwards\n            # incompat release.)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 29,
                  "endLine": 160,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            # TODO: Alternately, transfer to temp location and then move, but\n            # that's basically inverse of v1's sudo-put which gets messy\n\n        # Run Paramiko-level .get() (side-effects only. womp.)\n        # TODO: push some of the path handling into Paramiko; it should be\n        # responsible for dealing with path cleaning etc.\n        # TODO: probably preserve warning message from v1 when overwriting\n",
                    "rendered": {
                      "text": "            # TODO: Alternately, transfer to temp location and then move, but\n            # that's basically inverse of v1's sudo-put which gets messy\n\n        # Run Paramiko-level .get() (side-effects only. womp.)\n        # TODO: push some of the path handling into Paramiko; it should be\n        # responsible for dealing with path cleaning etc.\n        # TODO: probably preserve warning message from v1 when overwriting\n",
                      "markdown": "`            # TODO: Alternately, transfer to temp location and then move, but\n            # that's basically inverse of v1's sudo-put which gets messy\n\n        # Run Paramiko-level .get() (side-effects only. womp.)\n        # TODO: push some of the path handling into Paramiko; it should be\n        # responsible for dealing with path cleaning etc.\n        # TODO: probably preserve warning message from v1 when overwriting\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 21,
                  "endLine": 212,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n                For example, instead of saying ``put(\"archive.tgz\",\n                \"~/tmp/\")``, say ``put(\"archive.tgz\", \"tmp/\")``.\n",
                    "rendered": {
                      "text": "            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n                For example, instead of saying ``put(\"archive.tgz\",\n                \"~/tmp/\")``, say ``put(\"archive.tgz\", \"tmp/\")``.\n",
                      "markdown": "`            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n                For example, instead of saying ``put(\"archive.tgz\",\n                \"~/tmp/\")``, say ``put(\"archive.tgz\", \"tmp/\")``.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 21,
                  "endLine": 55,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n                For example, instead of saying ``get(\"~/tmp/archive.tgz\")``,\n                say ``get(\"tmp/archive.tgz\")``.\n",
                    "rendered": {
                      "text": "            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n                For example, instead of saying ``get(\"~/tmp/archive.tgz\")``,\n                say ``get(\"tmp/archive.tgz\")``.\n",
                      "markdown": "`            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n                For example, instead of saying ``get(\"~/tmp/archive.tgz\")``,\n                say ``get(\"tmp/archive.tgz\")``.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 21,
                  "endLine": 212,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n                For example, instead of saying ``put(\"archive.tgz\",\n                \"~/tmp/\")``, say ``put(\"archive.tgz\", \"tmp/\")``.\n",
                    "rendered": {
                      "text": "            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n                For example, instead of saying ``put(\"archive.tgz\",\n                \"~/tmp/\")``, say ``put(\"archive.tgz\", \"tmp/\")``.\n",
                      "markdown": "`            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n                For example, instead of saying ``put(\"archive.tgz\",\n                \"~/tmp/\")``, say ``put(\"archive.tgz\", \"tmp/\")``.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 20,
                  "endLine": 210,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            Remote path to which the local file will be written.\n\n            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n",
                    "rendered": {
                      "text": "            Remote path to which the local file will be written.\n\n            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n",
                      "markdown": "`            Remote path to which the local file will be written.\n\n            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 13,
                  "endLine": 86,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            - The ``basename`` and ``dirname`` of the ``remote`` path, as\n              derived by `os.path` (specifically, its ``posixpath`` flavor, so\n              that the resulting values are useful on remote POSIX-compatible\n              SFTP servers even if the local client is Windows).\n            - Thus, for example, ``\"/some/path/{user}@{host}/{basename}\"`` will\n              yield different local paths depending on the properties of both\n              the connection and the remote path.\n",
                    "rendered": {
                      "text": "            - The ``basename`` and ``dirname`` of the ``remote`` path, as\n              derived by `os.path` (specifically, its ``posixpath`` flavor, so\n              that the resulting values are useful on remote POSIX-compatible\n              SFTP servers even if the local client is Windows).\n            - Thus, for example, ``\"/some/path/{user}@{host}/{basename}\"`` will\n              yield different local paths depending on the properties of both\n              the connection and the remote path.\n",
                      "markdown": "`            - The ``basename`` and ``dirname`` of the ``remote`` path, as\n              derived by `os.path` (specifically, its ``posixpath`` flavor, so\n              that the resulting values are useful on remote POSIX-compatible\n              SFTP servers even if the local client is Windows).\n            - Thus, for example, ``\"/some/path/{user}@{host}/{basename}\"`` will\n              yield different local paths depending on the properties of both\n              the connection and the remote path.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 21,
                  "endLine": 55,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n                For example, instead of saying ``get(\"~/tmp/archive.tgz\")``,\n                say ``get(\"tmp/archive.tgz\")``.\n",
                    "rendered": {
                      "text": "            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n                For example, instead of saying ``get(\"~/tmp/archive.tgz\")``,\n                say ``get(\"tmp/archive.tgz\")``.\n",
                      "markdown": "`            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n                For example, instead of saying ``get(\"~/tmp/archive.tgz\")``,\n                say ``get(\"tmp/archive.tgz\")``.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 20,
                  "endLine": 53,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            May be absolute, or relative to the remote working directory.\n\n            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n",
                    "rendered": {
                      "text": "            May be absolute, or relative to the remote working directory.\n\n            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n",
                      "markdown": "`            May be absolute, or relative to the remote working directory.\n\n            .. note::\n                Most SFTP servers set the remote working directory to the\n                connecting user's home directory, and (unlike most shells) do\n                *not* expand tildes (``~``).\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 11,
                  "endLine": 28,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    .. versionadded:: 2.0\n    \"\"\"\n\n    # TODO: SFTP clear default, but how to do SCP? subclass? init kwarg?\n\n    def __init__(self, connection):\n        self.connection = connection\n",
                    "rendered": {
                      "text": "    .. versionadded:: 2.0\n    \"\"\"\n\n    # TODO: SFTP clear default, but how to do SCP? subclass? init kwarg?\n\n    def __init__(self, connection):\n        self.connection = connection\n",
                      "markdown": "`    .. versionadded:: 2.0\n    \"\"\"\n\n    # TODO: SFTP clear default, but how to do SCP? subclass? init kwarg?\n\n    def __init__(self, connection):\n        self.connection = connection\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 53,
                  "endLine": 17,
                  "endColumn": 60,
                  "snippet": {
                    "text": "# call (which needs updating to use invoke.run() & fab 2 connection methods,\n# but is otherwise suitable).\n# UNLESS we want to try and shoehorn it into this module after all? Delegate\n# any recursive get/put to it? Requires users to have rsync available of\n# course.\n\n\n",
                    "rendered": {
                      "text": "# call (which needs updating to use invoke.run() & fab 2 connection methods,\n# but is otherwise suitable).\n# UNLESS we want to try and shoehorn it into this module after all? Delegate\n# any recursive get/put to it? Requires users to have rsync available of\n# course.\n\n\n",
                      "markdown": "`# call (which needs updating to use invoke.run() & fab 2 connection methods,\n# but is otherwise suitable).\n# UNLESS we want to try and shoehorn it into this module after all? Delegate\n# any recursive get/put to it? Requires users to have rsync available of\n# course.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 73,
                  "endLine": 14,
                  "snippet": {
                    "text": "\nfrom .util import debug  # TODO: actual logging! LOL\n\n# TODO: figure out best way to direct folks seeking rsync, to patchwork's rsync\n# call (which needs updating to use invoke.run() & fab 2 connection methods,\n# but is otherwise suitable).\n# UNLESS we want to try and shoehorn it into this module after all? Delegate\n# any recursive get/put to it? Requires users to have rsync available of\n",
                    "rendered": {
                      "text": "\nfrom .util import debug  # TODO: actual logging! LOL\n\n# TODO: figure out best way to direct folks seeking rsync, to patchwork's rsync\n# call (which needs updating to use invoke.run() & fab 2 connection methods,\n# but is otherwise suitable).\n# UNLESS we want to try and shoehorn it into this module after all? Delegate\n# any recursive get/put to it? Requires users to have rsync available of\n",
                      "markdown": "`\nfrom .util import debug  # TODO: actual logging! LOL\n\n# TODO: figure out best way to direct folks seeking rsync, to patchwork's rsync\n# call (which needs updating to use invoke.run() & fab 2 connection methods,\n# but is otherwise suitable).\n# UNLESS we want to try and shoehorn it into this module after all? Delegate\n# any recursive get/put to it? Requires users to have rsync available of\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/transfer.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 17,
                  "endLine": 2,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\"\"\"\nFile transfer via SFTP and/or SCP.\n\"\"\"\n\nimport os\n",
                    "rendered": {
                      "text": "\"\"\"\nFile transfer via SFTP and/or SCP.\n\"\"\"\n\nimport os\n",
                      "markdown": "`\"\"\"\nFile transfer via SFTP and/or SCP.\n\"\"\"\n\nimport os\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 28,
                  "endLine": 147,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n            prompt = \"Enter passphrase for use unlocking SSH keys: \"\n            connect_kwargs[\"passphrase\"] = getpass.getpass(prompt)\n",
                    "rendered": {
                      "text": "        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n            prompt = \"Enter passphrase for use unlocking SSH keys: \"\n            connect_kwargs[\"passphrase\"] = getpass.getpass(prompt)\n",
                      "markdown": "`        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n            prompt = \"Enter passphrase for use unlocking SSH keys: \"\n            connect_kwargs[\"passphrase\"] = getpass.getpass(prompt)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 34,
                  "endLine": 146,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n            prompt = \"Enter passphrase for use unlocking SSH keys: \"\n",
                    "rendered": {
                      "text": "        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n            prompt = \"Enter passphrase for use unlocking SSH keys: \"\n",
                      "markdown": "`        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n            prompt = \"Enter passphrase for use unlocking SSH keys: \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 39,
                  "endLine": 145,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n",
                    "rendered": {
                      "text": "        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n",
                      "markdown": "`        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 55,
                  "endLine": 144,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        # later/at user-time.\n        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n",
                    "rendered": {
                      "text": "        # later/at user-time.\n        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n",
                      "markdown": "`        # later/at user-time.\n        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 50,
                  "endLine": 47,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            Argument(\n                names=(\"prompt-for-login-password\",),\n                kind=bool,\n                help=\"Request an upfront SSH-auth password prompt.\",\n            ),\n            Argument(\n                names=(\"prompt-for-passphrase\",),\n",
                    "rendered": {
                      "text": "            Argument(\n                names=(\"prompt-for-login-password\",),\n                kind=bool,\n                help=\"Request an upfront SSH-auth password prompt.\",\n            ),\n            Argument(\n                names=(\"prompt-for-passphrase\",),\n",
                      "markdown": "`            Argument(\n                names=(\"prompt-for-login-password\",),\n                kind=bool,\n                help=\"Request an upfront SSH-auth password prompt.\",\n            ),\n            Argument(\n                names=(\"prompt-for-passphrase\",),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 41,
                  "endLine": 45,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            ),\n            # TODO: worth having short flags for these prompt args?\n            Argument(\n                names=(\"prompt-for-login-password\",),\n                kind=bool,\n                help=\"Request an upfront SSH-auth password prompt.\",\n            ),\n",
                    "rendered": {
                      "text": "            ),\n            # TODO: worth having short flags for these prompt args?\n            Argument(\n                names=(\"prompt-for-login-password\",),\n                kind=bool,\n                help=\"Request an upfront SSH-auth password prompt.\",\n            ),\n",
                      "markdown": "`            ),\n            # TODO: worth having short flags for these prompt args?\n            Argument(\n                names=(\"prompt-for-login-password\",),\n                kind=bool,\n                help=\"Request an upfront SSH-auth password prompt.\",\n            ),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 19,
                  "endLine": 162,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        self.config.merge()\n\n    # TODO: make this an explicit hookpoint in Invoke, i.e. some default-noop\n    # method called at the end of parse_core() that we can override here\n    # instead of doing this.\n    def parse_core(self, *args, **kwargs):\n        super().parse_core(*args, **kwargs)\n",
                    "rendered": {
                      "text": "        self.config.merge()\n\n    # TODO: make this an explicit hookpoint in Invoke, i.e. some default-noop\n    # method called at the end of parse_core() that we can override here\n    # instead of doing this.\n    def parse_core(self, *args, **kwargs):\n        super().parse_core(*args, **kwargs)\n",
                      "markdown": "`        self.config.merge()\n\n    # TODO: make this an explicit hookpoint in Invoke, i.e. some default-noop\n    # method called at the end of parse_core() that we can override here\n    # instead of doing this.\n    def parse_core(self, *args, **kwargs):\n        super().parse_core(*args, **kwargs)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 45,
                  "endLine": 140,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n        # later/at user-time.\n        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n",
                    "rendered": {
                      "text": "        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n        # later/at user-time.\n        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n",
                      "markdown": "`        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n        # later/at user-time.\n        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 63,
                  "endLine": 124,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        super().update_config(merge=False)\n        self.config.set_runtime_ssh_path(self.args[\"ssh-config\"].value)\n        self.config.load_ssh_config()\n        # Load -i identity file, if given, into connect_kwargs, at overrides\n        # level.\n        connect_kwargs = {}\n        paths = self.args[\"identity\"].value\n",
                    "rendered": {
                      "text": "        super().update_config(merge=False)\n        self.config.set_runtime_ssh_path(self.args[\"ssh-config\"].value)\n        self.config.load_ssh_config()\n        # Load -i identity file, if given, into connect_kwargs, at overrides\n        # level.\n        connect_kwargs = {}\n        paths = self.args[\"identity\"].value\n",
                      "markdown": "`        super().update_config(merge=False)\n        self.config.set_runtime_ssh_path(self.args[\"ssh-config\"].value)\n        self.config.load_ssh_config()\n        # Load -i identity file, if given, into connect_kwargs, at overrides\n        # level.\n        connect_kwargs = {}\n        paths = self.args[\"identity\"].value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 66,
                  "endLine": 154,
                  "endColumn": 72,
                  "snippet": {
                    "text": "        # TODO: this (directly manipulating _overrides) feels a little gross,\n        # but since the parent has already called load_overrides, this is best\n        # we can do for now w/o losing data. Still feels correct; just might be\n        # cleaner to have even more Config API members around this sort of\n        # thing. Shrug.\n        self.config._overrides[\"connect_kwargs\"] = connect_kwargs\n        # Since we gave merge=False above, we must do it ourselves here. (Also\n",
                    "rendered": {
                      "text": "        # TODO: this (directly manipulating _overrides) feels a little gross,\n        # but since the parent has already called load_overrides, this is best\n        # we can do for now w/o losing data. Still feels correct; just might be\n        # cleaner to have even more Config API members around this sort of\n        # thing. Shrug.\n        self.config._overrides[\"connect_kwargs\"] = connect_kwargs\n        # Since we gave merge=False above, we must do it ourselves here. (Also\n",
                      "markdown": "`        # TODO: this (directly manipulating _overrides) feels a little gross,\n        # but since the parent has already called load_overrides, this is best\n        # we can do for now w/o losing data. Still feels correct; just might be\n        # cleaner to have even more Config API members around this sort of\n        # thing. Shrug.\n        self.config._overrides[\"connect_kwargs\"] = connect_kwargs\n        # Since we gave merge=False above, we must do it ourselves here. (Also\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 56,
                  "endLine": 149,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n            prompt = \"Enter passphrase for use unlocking SSH keys: \"\n            connect_kwargs[\"passphrase\"] = getpass.getpass(prompt)\n        # TODO: this (directly manipulating _overrides) feels a little gross,\n        # but since the parent has already called load_overrides, this is best\n",
                    "rendered": {
                      "text": "            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n            prompt = \"Enter passphrase for use unlocking SSH keys: \"\n            connect_kwargs[\"passphrase\"] = getpass.getpass(prompt)\n        # TODO: this (directly manipulating _overrides) feels a little gross,\n        # but since the parent has already called load_overrides, this is best\n",
                      "markdown": "`            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n            prompt = \"Enter passphrase for use unlocking SSH keys: \"\n            connect_kwargs[\"passphrase\"] = getpass.getpass(prompt)\n        # TODO: this (directly manipulating _overrides) feels a little gross,\n        # but since the parent has already called load_overrides, this is best\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 55,
                  "endLine": 146,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n            prompt = \"Enter passphrase for use unlocking SSH keys: \"\n",
                    "rendered": {
                      "text": "        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n            prompt = \"Enter passphrase for use unlocking SSH keys: \"\n",
                      "markdown": "`        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n        # already doing a similar thing there for sudo password...\n        if self.args[\"prompt-for-login-password\"].value:\n            prompt = \"Enter login password for use with SSH auth: \"\n            connect_kwargs[\"password\"] = getpass.getpass(prompt)\n        if self.args[\"prompt-for-passphrase\"].value:\n            prompt = \"Enter passphrase for use unlocking SSH keys: \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 56,
                  "endLine": 140,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n        # later/at user-time.\n        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n",
                    "rendered": {
                      "text": "        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n        # later/at user-time.\n        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n",
                      "markdown": "`        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n        # later/at user-time.\n        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 39,
                  "endLine": 140,
                  "snippet": {
                    "text": "        # Ditto for connect timeout\n        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n        # later/at user-time.\n        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n",
                    "rendered": {
                      "text": "        # Ditto for connect timeout\n        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n        # later/at user-time.\n        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n",
                      "markdown": "`        # Ditto for connect timeout\n        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n        # later/at user-time.\n        # TODO: should this become part of Invoke proper in case other\n        # downstreams have need of it? E.g. a prompt Argument 'type'? We're\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 7,
                  "endLine": 137,
                  "endColumn": 16,
                  "snippet": {
                    "text": "                identities=[Path(x) for x in paths]\n            )\n        # Ditto for connect timeout\n        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n",
                    "rendered": {
                      "text": "                identities=[Path(x) for x in paths]\n            )\n        # Ditto for connect timeout\n        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n",
                      "markdown": "`                identities=[Path(x) for x in paths]\n            )\n        # Ditto for connect timeout\n        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 27,
                  "endLine": 137,
                  "snippet": {
                    "text": "            self.config._overrides[\"authentication\"] = dict(\n                identities=[Path(x) for x in paths]\n            )\n        # Ditto for connect timeout\n        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n",
                    "rendered": {
                      "text": "            self.config._overrides[\"authentication\"] = dict(\n                identities=[Path(x) for x in paths]\n            )\n        # Ditto for connect timeout\n        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n",
                      "markdown": "`            self.config._overrides[\"authentication\"] = dict(\n                identities=[Path(x) for x in paths]\n            )\n        # Ditto for connect timeout\n        timeout = self.args[\"connect-timeout\"].value\n        if timeout:\n            connect_kwargs[\"timeout\"] = timeout\n        # Secrets prompts that want to happen at handoff time instead of\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 9,
                  "endLine": 120,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    def update_config(self):\n        # Note runtime SSH path, if given, and load SSH configurations.\n        # NOTE: must do parent before our work, in case users want to disable\n        # SSH config loading within a runtime-level conf file/flag.\n        super().update_config(merge=False)\n        self.config.set_runtime_ssh_path(self.args[\"ssh-config\"].value)\n        self.config.load_ssh_config()\n",
                    "rendered": {
                      "text": "    def update_config(self):\n        # Note runtime SSH path, if given, and load SSH configurations.\n        # NOTE: must do parent before our work, in case users want to disable\n        # SSH config loading within a runtime-level conf file/flag.\n        super().update_config(merge=False)\n        self.config.set_runtime_ssh_path(self.args[\"ssh-config\"].value)\n        self.config.load_ssh_config()\n",
                      "markdown": "`    def update_config(self):\n        # Note runtime SSH path, if given, and load SSH configurations.\n        # NOTE: must do parent before our work, in case users want to disable\n        # SSH config loading within a runtime-level conf file/flag.\n        super().update_config(merge=False)\n        self.config.set_runtime_ssh_path(self.args[\"ssh-config\"].value)\n        self.config.load_ssh_config()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 51,
                  "endLine": 118,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        self.config.merge()\n\n    def update_config(self):\n        # Note runtime SSH path, if given, and load SSH configurations.\n        # NOTE: must do parent before our work, in case users want to disable\n        # SSH config loading within a runtime-level conf file/flag.\n        super().update_config(merge=False)\n",
                    "rendered": {
                      "text": "        self.config.merge()\n\n    def update_config(self):\n        # Note runtime SSH path, if given, and load SSH configurations.\n        # NOTE: must do parent before our work, in case users want to disable\n        # SSH config loading within a runtime-level conf file/flag.\n        super().update_config(merge=False)\n",
                      "markdown": "`        self.config.merge()\n\n    def update_config(self):\n        # Note runtime SSH path, if given, and load SSH configurations.\n        # NOTE: must do parent before our work, in case users want to disable\n        # SSH config loading within a runtime-level conf file/flag.\n        super().update_config(merge=False)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 22,
                  "endLine": 118,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        self.config.merge()\n\n    def update_config(self):\n        # Note runtime SSH path, if given, and load SSH configurations.\n        # NOTE: must do parent before our work, in case users want to disable\n        # SSH config loading within a runtime-level conf file/flag.\n        super().update_config(merge=False)\n",
                    "rendered": {
                      "text": "        self.config.merge()\n\n    def update_config(self):\n        # Note runtime SSH path, if given, and load SSH configurations.\n        # NOTE: must do parent before our work, in case users want to disable\n        # SSH config loading within a runtime-level conf file/flag.\n        super().update_config(merge=False)\n",
                      "markdown": "`        self.config.merge()\n\n    def update_config(self):\n        # Note runtime SSH path, if given, and load SSH configurations.\n        # NOTE: must do parent before our work, in case users want to disable\n        # SSH config loading within a runtime-level conf file/flag.\n        super().update_config(merge=False)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 9,
                  "endLine": 103,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n    def create_config(self):\n        # Create config, as parent does, but with lazy=True to avoid our own\n        # SSH config autoload. (Otherwise, we can't correctly load _just_ the\n        # runtime file if one's being given later.)\n        self.config = self.config_class(lazy=True)\n        # However, we don't really want the parent class' lazy behavior (which\n",
                    "rendered": {
                      "text": "\n    def create_config(self):\n        # Create config, as parent does, but with lazy=True to avoid our own\n        # SSH config autoload. (Otherwise, we can't correctly load _just_ the\n        # runtime file if one's being given later.)\n        self.config = self.config_class(lazy=True)\n        # However, we don't really want the parent class' lazy behavior (which\n",
                      "markdown": "`\n    def create_config(self):\n        # Create config, as parent does, but with lazy=True to avoid our own\n        # SSH config autoload. (Otherwise, we can't correctly load _just_ the\n        # runtime file if one's being given later.)\n        self.config = self.config_class(lazy=True)\n        # However, we don't really want the parent class' lazy behavior (which\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 52,
                  "endLine": 71,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        # No 'unparsed' (i.e. tokens intended for task contexts), and remainder\n        # (text after a double-dash) implies a contextless/taskless remainder\n        # execution of the style 'fab -H host -- command'.\n        # NOTE: must ALSO check to ensure the double dash isn't being used for\n        # tab completion machinery...\n        return (\n            not self.core.unparsed\n",
                    "rendered": {
                      "text": "        # No 'unparsed' (i.e. tokens intended for task contexts), and remainder\n        # (text after a double-dash) implies a contextless/taskless remainder\n        # execution of the style 'fab -H host -- command'.\n        # NOTE: must ALSO check to ensure the double dash isn't being used for\n        # tab completion machinery...\n        return (\n            not self.core.unparsed\n",
                      "markdown": "`        # No 'unparsed' (i.e. tokens intended for task contexts), and remainder\n        # (text after a double-dash) implies a contextless/taskless remainder\n        # execution of the style 'fab -H host -- command'.\n        # NOTE: must ALSO check to ensure the double dash isn't being used for\n        # tab completion machinery...\n        return (\n            not self.core.unparsed\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 37,
                  "endLine": 56,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            ),\n            Argument(\n                names=(\"S\", \"ssh-config\"),\n                help=\"Path to runtime SSH config file.\",\n            ),\n            Argument(\n                names=(\"t\", \"connect-timeout\"),\n",
                    "rendered": {
                      "text": "            ),\n            Argument(\n                names=(\"S\", \"ssh-config\"),\n                help=\"Path to runtime SSH config file.\",\n            ),\n            Argument(\n                names=(\"t\", \"connect-timeout\"),\n",
                      "markdown": "`            ),\n            Argument(\n                names=(\"S\", \"ssh-config\"),\n                help=\"Path to runtime SSH config file.\",\n            ),\n            Argument(\n                names=(\"t\", \"connect-timeout\"),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 40,
                  "endLine": 52,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            Argument(\n                names=(\"prompt-for-passphrase\",),\n                kind=bool,\n                help=\"Request an upfront SSH key passphrase prompt.\",\n            ),\n            Argument(\n                names=(\"S\", \"ssh-config\"),\n",
                    "rendered": {
                      "text": "            Argument(\n                names=(\"prompt-for-passphrase\",),\n                kind=bool,\n                help=\"Request an upfront SSH key passphrase prompt.\",\n            ),\n            Argument(\n                names=(\"S\", \"ssh-config\"),\n",
                      "markdown": "`            Argument(\n                names=(\"prompt-for-passphrase\",),\n                kind=bool,\n                help=\"Request an upfront SSH key passphrase prompt.\",\n            ),\n            Argument(\n                names=(\"S\", \"ssh-config\"),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 37,
                  "endLine": 36,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                kind=list,  # Same as OpenSSH, can give >1 key\n                # TODO: automatically add hint about iterable-ness to Invoke\n                # help display machinery?\n                help=\"Path to runtime SSH identity (key) file. May be given multiple times.\",  # noqa\n            ),\n            Argument(\n                names=(\"list-agent-keys\",),\n",
                    "rendered": {
                      "text": "                kind=list,  # Same as OpenSSH, can give >1 key\n                # TODO: automatically add hint about iterable-ness to Invoke\n                # help display machinery?\n                help=\"Path to runtime SSH identity (key) file. May be given multiple times.\",  # noqa\n            ),\n            Argument(\n                names=(\"list-agent-keys\",),\n",
                      "markdown": "`                kind=list,  # Same as OpenSSH, can give >1 key\n                # TODO: automatically add hint about iterable-ness to Invoke\n                # help display machinery?\n                help=\"Path to runtime SSH identity (key) file. May be given multiple times.\",  # noqa\n            ),\n            Argument(\n                names=(\"list-agent-keys\",),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/main.py"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 9,
                  "endLine": 4,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\"\"\"\nCLI entrypoint & parser configuration.\n\nBuilds on top of Invoke's core functionality for same.\n\"\"\"\n\nimport getpass\n",
                    "rendered": {
                      "text": "\"\"\"\nCLI entrypoint & parser configuration.\n\nBuilds on top of Invoke's core functionality for same.\n\"\"\"\n\nimport getpass\n",
                      "markdown": "`\"\"\"\nCLI entrypoint & parser configuration.\n\nBuilds on top of Invoke's core functionality for same.\n\"\"\"\n\nimport getpass\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-fabric-3.2.2-r2.apk/py3-fabric-3.2.2-r2/usr/lib/python3.12/site-packages/fabric/__main__.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 12,
                  "endLine": 4,
                  "snippet": {
                    "text": "\"\"\"\nThis code provides the ability to run fabric\npackage as a script\nUsage: python -m fabric\n\"\"\"\n\nfrom .main import program\n",
                    "rendered": {
                      "text": "\"\"\"\nThis code provides the ability to run fabric\npackage as a script\nUsage: python -m fabric\n\"\"\"\n\nfrom .main import program\n",
                      "markdown": "`\"\"\"\nThis code provides the ability to run fabric\npackage as a script\nUsage: python -m fabric\n\"\"\"\n\nfrom .main import program\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}