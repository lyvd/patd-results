{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/byteman-4.0.23-r0.apk/byteman-4.0.23-r0/usr/share/java/byteman/byteman.jar/META-INF/maven/org.jboss.byteman/byteman-agent/pom.xml"
                },
                "region": {
                  "startLine": 2450,
                  "startColumn": 50,
                  "endLine": 2450,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            <!--\n                verify stage ensures each test generated a report file\n                this catches cases where the VMfails to start because the\n                agent fails to load or cannot read script files\n            -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n",
                    "rendered": {
                      "text": "            <!--\n                verify stage ensures each test generated a report file\n                this catches cases where the VMfails to start because the\n                agent fails to load or cannot read script files\n            -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n",
                      "markdown": "`            <!--\n                verify stage ensures each test generated a report file\n                this catches cases where the VMfails to start because the\n                agent fails to load or cannot read script files\n            -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/byteman-4.0.23-r0.apk/byteman-4.0.23-r0/usr/share/java/byteman/byteman.jar/META-INF/maven/org.jboss.byteman/byteman-agent/pom.xml"
                },
                "region": {
                  "startLine": 2441,
                  "startColumn": 39,
                  "endLine": 2441,
                  "endColumn": 47,
                  "snippet": {
                    "text": "s>true</reuseForks>\n                            <test>TestScriptFromJar</test>\n                            <includes>\n                                <include>org/jboss/byteman/tests/jar/TestScriptFromJar.class</include>\n                            </includes>\n                            <!-- access script from  jar:file://...target/byteman-x.y.z-tests.jar!/scripts/jar/TestScriptFromJar.btm -->\n                            <argLine>-Dorg.jboss.byteman.compile.to.bytecode -javaagent:${project.build.directory}/byteman-agent-${project.version}.jar=script:jar:file://${project.build.directory}/byteman-agent",
                    "rendered": {
                      "text": "s>true</reuseForks>\n                            <test>TestScriptFromJar</test>\n                            <includes>\n                                <include>org/jboss/byteman/tests/jar/TestScriptFromJar.class</include>\n                            </includes>\n                            <!-- access script from  jar:file://...target/byteman-x.y.z-tests.jar!/scripts/jar/TestScriptFromJar.btm -->\n                            <argLine>-Dorg.jboss.byteman.compile.to.bytecode -javaagent:${project.build.directory}/byteman-agent-${project.version}.jar=script:jar:file://${project.build.directory}/byteman-agent",
                      "markdown": "`s>true</reuseForks>\n                            <test>TestScriptFromJar</test>\n                            <includes>\n                                <include>org/jboss/byteman/tests/jar/TestScriptFromJar.class</include>\n                            </includes>\n                            <!-- access script from  jar:file://...target/byteman-x.y.z-tests.jar!/scripts/jar/TestScriptFromJar.btm -->\n                            <argLine>-Dorg.jboss.byteman.compile.to.bytecode -javaagent:${project.build.directory}/byteman-agent-${project.version}.jar=script:jar:file://${project.build.directory}/byteman-agent`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/byteman-4.0.23-r0.apk/byteman-4.0.23-r0/usr/share/java/byteman/byteman.jar/META-INF/maven/org.jboss.byteman/byteman-agent/pom.xml"
                },
                "region": {
                  "startLine": 2426,
                  "startColumn": 43,
                  "endLine": 2426,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\t\t\t\t\t\t<argLine>-Dorg.jboss.byteman.compile.to.bytecode -javaagent:${project.build.directory}/byteman-agent-${project.version}.jar=listener:true</argLine>\n                        </configuration>\n\t\t\t\t\t</execution>\n                    <!-- Test accessing the script from a jar url -->\n                    <execution>\n                        <id>jar.TestScriptFromJar</id>\n                        <phase>integration-test</phase>\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\t\t<argLine>-Dorg.jboss.byteman.compile.to.bytecode -javaagent:${project.build.directory}/byteman-agent-${project.version}.jar=listener:true</argLine>\n                        </configuration>\n\t\t\t\t\t</execution>\n                    <!-- Test accessing the script from a jar url -->\n                    <execution>\n                        <id>jar.TestScriptFromJar</id>\n                        <phase>integration-test</phase>\n",
                      "markdown": "`\t\t\t\t\t\t\t<argLine>-Dorg.jboss.byteman.compile.to.bytecode -javaagent:${project.build.directory}/byteman-agent-${project.version}.jar=listener:true</argLine>\n                        </configuration>\n\t\t\t\t\t</execution>\n                    <!-- Test accessing the script from a jar url -->\n                    <execution>\n                        <id>jar.TestScriptFromJar</id>\n                        <phase>integration-test</phase>\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/byteman-4.0.23-r0.apk/byteman-4.0.23-r0/usr/share/java/byteman/byteman.jar/META-INF/maven/org.jboss.byteman/byteman-agent/pom.xml"
                },
                "region": {
                  "startLine": 2389,
                  "startColumn": 48,
                  "endLine": 2389,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                      </configuration>\n                    </execution>\n                    <!-- dynamic rule submission compiled\n                      submit test does not use a script on the command line\n                      instead it sets listener true and uplaods the rules from the test program\n                    -->\n                    <execution>\n",
                    "rendered": {
                      "text": "                      </configuration>\n                    </execution>\n                    <!-- dynamic rule submission compiled\n                      submit test does not use a script on the command line\n                      instead it sets listener true and uplaods the rules from the test program\n                    -->\n                    <execution>\n",
                      "markdown": "`                      </configuration>\n                    </execution>\n                    <!-- dynamic rule submission compiled\n                      submit test does not use a script on the command line\n                      instead it sets listener true and uplaods the rules from the test program\n                    -->\n                    <execution>\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/byteman-4.0.23-r0.apk/byteman-4.0.23-r0/usr/share/java/byteman/byteman.jar/META-INF/maven/org.jboss.byteman/byteman-agent/pom.xml"
                },
                "region": {
                  "startLine": 1291,
                  "startColumn": 55,
                  "endLine": 1291,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                        </configuration>\n                    </execution>\n                    <!-- dynamic rule submission\n                        n.b. submit test does not use a script on the command line\n                        instead it sets listener true and uplaods the rules from the test program\n                    -->\n                    <execution>\n",
                    "rendered": {
                      "text": "                        </configuration>\n                    </execution>\n                    <!-- dynamic rule submission\n                        n.b. submit test does not use a script on the command line\n                        instead it sets listener true and uplaods the rules from the test program\n                    -->\n                    <execution>\n",
                      "markdown": "`                        </configuration>\n                    </execution>\n                    <!-- dynamic rule submission\n                        n.b. submit test does not use a script on the command line\n                        instead it sets listener true and uplaods the rules from the test program\n                    -->\n                    <execution>\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/byteman-4.0.23-r0.apk/byteman-4.0.23-r0/usr/share/java/byteman/byteman.jar/META-INF/maven/org.jboss.byteman/byteman-agent/pom.xml"
                },
                "region": {
                  "startLine": 817,
                  "startColumn": 53,
                  "endLine": 817,
                  "endColumn": 61,
                  "snippet": {
                    "text": "                      </configuration>\n                    </execution>\n                    <!-- dynamic rule submission\n                        n.b. this test does not use a script on the command line\n                        instead it sets listener true and uplaods the rules from the test program\n                        this is because the test needs to load the rule after the test class is loaded\n                        in order to create the conditions for the bug to occur\n",
                    "rendered": {
                      "text": "                      </configuration>\n                    </execution>\n                    <!-- dynamic rule submission\n                        n.b. this test does not use a script on the command line\n                        instead it sets listener true and uplaods the rules from the test program\n                        this is because the test needs to load the rule after the test class is loaded\n                        in order to create the conditions for the bug to occur\n",
                      "markdown": "`                      </configuration>\n                    </execution>\n                    <!-- dynamic rule submission\n                        n.b. this test does not use a script on the command line\n                        instead it sets listener true and uplaods the rules from the test program\n                        this is because the test needs to load the rule after the test class is loaded\n                        in order to create the conditions for the bug to occur\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/byteman-4.0.23-r0.apk/byteman-4.0.23-r0/usr/share/java/byteman/byteman.jar/META-INF/maven/org.jboss.byteman/byteman-agent/pom.xml"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 65,
                  "endLine": 166,
                  "snippet": {
                    "text": "                </configuration>\n                <!--\n                    we have to do this the hard way by forking each test in a separate VM\n                    running the byteman agent and the appropriate script\n\n                    first we run each test interpreted. then we repeat them all setting\n                    -Dorg.jboss.byteman.compile.to.bytecode so we also test the rules when compiled\n                 -->\n",
                    "rendered": {
                      "text": "                </configuration>\n                <!--\n                    we have to do this the hard way by forking each test in a separate VM\n                    running the byteman agent and the appropriate script\n\n                    first we run each test interpreted. then we repeat them all setting\n                    -Dorg.jboss.byteman.compile.to.bytecode so we also test the rules when compiled\n                 -->\n",
                      "markdown": "`                </configuration>\n                <!--\n                    we have to do this the hard way by forking each test in a separate VM\n                    running the byteman agent and the appropriate script\n\n                    first we run each test interpreted. then we repeat them all setting\n                    -Dorg.jboss.byteman.compile.to.bytecode so we also test the rules when compiled\n                 -->\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/byteman-4.0.23-r0.apk/byteman-4.0.23-r0/usr/share/java/byteman/byteman.jar/META-INF/maven/org.jboss.byteman/byteman-agent/pom.xml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 19,
                  "endLine": 3,
                  "endColumn": 24,
                  "snippet": {
                    "text": "<!--\n  ~ JBoss, Home of Professional Open Source.\n  ~ Copyright 2011, Red Hat and individual contributors\n  ~ as indicated by the @author tags. See the copyright.txt file in the\n  ~ distribution for a full listing of individual contributors.\n  ~\n",
                    "rendered": {
                      "text": "<!--\n  ~ JBoss, Home of Professional Open Source.\n  ~ Copyright 2011, Red Hat and individual contributors\n  ~ as indicated by the @author tags. See the copyright.txt file in the\n  ~ distribution for a full listing of individual contributors.\n  ~\n",
                      "markdown": "`<!--\n  ~ JBoss, Home of Professional Open Source.\n  ~ Copyright 2011, Red Hat and individual contributors\n  ~ as indicated by the @author tags. See the copyright.txt file in the\n  ~ distribution for a full listing of individual contributors.\n  ~\n`"
                    }
                  },
                  "sourceLanguage": "pom.xml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}