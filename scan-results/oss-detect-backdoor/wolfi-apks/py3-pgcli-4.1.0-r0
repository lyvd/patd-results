{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1902,
                  "startColumn": 38,
                  "endLine": 1902,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            raise err\n    if service not in service_file_config:\n        return None, service_file\n    service_conf = service_file_config.get(service)\n    return service_conf, service_file\n\n\n",
                    "rendered": {
                      "text": "            raise err\n    if service not in service_file_config:\n        return None, service_file\n    service_conf = service_file_config.get(service)\n    return service_conf, service_file\n\n\n",
                      "markdown": "`            raise err\n    if service not in service_file_config:\n        return None, service_file\n    service_conf = service_file_config.get(service)\n    return service_conf, service_file\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1839,
                  "startColumn": 45,
                  "endLine": 1839,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        if hasattr(cur, \"description\"):\n            column_types = []\n            for d in cur.description:\n                col_type = cur.adapters.types.get(d.type_code)\n                type_name = col_type.name if col_type else None\n                if type_name in (\"numeric\", \"float4\", \"float8\"):\n                    column_types.append(float)\n",
                    "rendered": {
                      "text": "        if hasattr(cur, \"description\"):\n            column_types = []\n            for d in cur.description:\n                col_type = cur.adapters.types.get(d.type_code)\n                type_name = col_type.name if col_type else None\n                if type_name in (\"numeric\", \"float4\", \"float8\"):\n                    column_types.append(float)\n",
                      "markdown": "`        if hasattr(cur, \"description\"):\n            column_types = []\n            for d in cur.description:\n                col_type = cur.adapters.types.get(d.type_code)\n                type_name = col_type.name if col_type else None\n                if type_name in (\"numeric\", \"float4\", \"float8\"):\n                    column_types.append(float)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 31,
                  "endLine": 644,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n",
                    "rendered": {
                      "text": "        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n",
                      "markdown": "`        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 625,
                  "startColumn": 23,
                  "endLine": 625,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    def connect_uri(self, uri):\n        kwargs = conninfo_to_dict(uri)\n        remap = {\"dbname\": \"database\", \"password\": \"passwd\"}\n        kwargs = {remap.get(k, k): v for k, v in kwargs.items()}\n        self.connect(**kwargs)\n\n    def connect(\n",
                    "rendered": {
                      "text": "    def connect_uri(self, uri):\n        kwargs = conninfo_to_dict(uri)\n        remap = {\"dbname\": \"database\", \"password\": \"passwd\"}\n        kwargs = {remap.get(k, k): v for k, v in kwargs.items()}\n        self.connect(**kwargs)\n\n    def connect(\n",
                      "markdown": "`    def connect_uri(self, uri):\n        kwargs = conninfo_to_dict(uri)\n        remap = {\"dbname\": \"database\", \"password\": \"passwd\"}\n        kwargs = {remap.get(k, k): v for k, v in kwargs.items()}\n        self.connect(**kwargs)\n\n    def connect(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 619,
                  "startColumn": 33,
                  "endLine": 619,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n        )\n\n    def connect_uri(self, uri):\n",
                    "rendered": {
                      "text": "            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n        )\n\n    def connect_uri(self, uri):\n",
                      "markdown": "`            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n        )\n\n    def connect_uri(self, uri):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 31,
                  "endLine": 618,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            database=service_config.get(\"dbname\"),\n            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n        )\n\n",
                    "rendered": {
                      "text": "            database=service_config.get(\"dbname\"),\n            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n        )\n\n",
                      "markdown": "`            database=service_config.get(\"dbname\"),\n            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 617,
                  "startColumn": 39,
                  "endLine": 617,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        self.connect(\n            database=service_config.get(\"dbname\"),\n            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n        )\n",
                    "rendered": {
                      "text": "        self.connect(\n            database=service_config.get(\"dbname\"),\n            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n        )\n",
                      "markdown": "`        self.connect(\n            database=service_config.get(\"dbname\"),\n            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 31,
                  "endLine": 616,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            exit(1)\n        self.connect(\n            database=service_config.get(\"dbname\"),\n            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n",
                    "rendered": {
                      "text": "            exit(1)\n        self.connect(\n            database=service_config.get(\"dbname\"),\n            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n",
                      "markdown": "`            exit(1)\n        self.connect(\n            database=service_config.get(\"dbname\"),\n            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 615,
                  "startColumn": 35,
                  "endLine": 615,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            )\n            exit(1)\n        self.connect(\n            database=service_config.get(\"dbname\"),\n            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n",
                    "rendered": {
                      "text": "            )\n            exit(1)\n        self.connect(\n            database=service_config.get(\"dbname\"),\n            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n",
                      "markdown": "`            )\n            exit(1)\n        self.connect(\n            database=service_config.get(\"dbname\"),\n            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 34,
                  "endLine": 311,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n        self.prompt_app = None\n\n        self.ssh_tunnel_config = c.get(\"ssh tunnels\")\n        self.ssh_tunnel_url = ssh_tunnel_url\n        self.ssh_tunnel = None\n\n",
                    "rendered": {
                      "text": "\n        self.prompt_app = None\n\n        self.ssh_tunnel_config = c.get(\"ssh tunnels\")\n        self.ssh_tunnel_url = ssh_tunnel_url\n        self.ssh_tunnel = None\n\n",
                      "markdown": "`\n        self.prompt_app = None\n\n        self.ssh_tunnel_config = c.get(\"ssh tunnels\")\n        self.ssh_tunnel_url = ssh_tunnel_url\n        self.ssh_tunnel = None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 26,
                  "endLine": 261,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        self.prompt_format = (\n            prompt\n            if prompt is not None\n            else c[\"main\"].get(\"prompt\", self.default_prompt)\n        )\n        self.prompt_dsn_format = prompt_dsn\n        self.on_error = c[\"main\"][\"on_error\"].upper()\n",
                    "rendered": {
                      "text": "        self.prompt_format = (\n            prompt\n            if prompt is not None\n            else c[\"main\"].get(\"prompt\", self.default_prompt)\n        )\n        self.prompt_dsn_format = prompt_dsn\n        self.on_error = c[\"main\"][\"on_error\"].upper()\n",
                      "markdown": "`        self.prompt_format = (\n            prompt\n            if prompt is not None\n            else c[\"main\"].get(\"prompt\", self.default_prompt)\n        )\n        self.prompt_dsn_format = prompt_dsn\n        self.on_error = c[\"main\"][\"on_error\"].upper()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 36,
                  "endLine": 257,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        self.verbose_errors = \"verbose_errors\" in c[\"main\"] and c[\"main\"].as_bool(\n            \"verbose_errors\"\n        )\n        self.null_string = c[\"main\"].get(\"null_string\", \"<null>\")\n        self.prompt_format = (\n            prompt\n            if prompt is not None\n",
                    "rendered": {
                      "text": "        self.verbose_errors = \"verbose_errors\" in c[\"main\"] and c[\"main\"].as_bool(\n            \"verbose_errors\"\n        )\n        self.null_string = c[\"main\"].get(\"null_string\", \"<null>\")\n        self.prompt_format = (\n            prompt\n            if prompt is not None\n",
                      "markdown": "`        self.verbose_errors = \"verbose_errors\" in c[\"main\"] and c[\"main\"].as_bool(\n            \"verbose_errors\"\n        )\n        self.null_string = c[\"main\"].get(\"null_string\", \"<null>\")\n        self.prompt_format = (\n            prompt\n            if prompt is not None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 35,
                  "endLine": 230,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        # if not specified, set to DEFAULT_MAX_FIELD_WIDTH\n        # if specified but empty, set to None to disable truncation\n        # ellipsis will take at least 3 symbols, so this can't be less than 3 if specified and > 0\n        max_field_width = c[\"main\"].get(\"max_field_width\", DEFAULT_MAX_FIELD_WIDTH)\n        if max_field_width and max_field_width.lower() != \"none\":\n            max_field_width = max(3, abs(int(max_field_width)))\n        else:\n",
                    "rendered": {
                      "text": "        # if not specified, set to DEFAULT_MAX_FIELD_WIDTH\n        # if specified but empty, set to None to disable truncation\n        # ellipsis will take at least 3 symbols, so this can't be less than 3 if specified and > 0\n        max_field_width = c[\"main\"].get(\"max_field_width\", DEFAULT_MAX_FIELD_WIDTH)\n        if max_field_width and max_field_width.lower() != \"none\":\n            max_field_width = max(3, abs(int(max_field_width)))\n        else:\n",
                      "markdown": "`        # if not specified, set to DEFAULT_MAX_FIELD_WIDTH\n        # if specified but empty, set to None to disable truncation\n        # ellipsis will take at least 3 symbols, so this can't be less than 3 if specified and > 0\n        max_field_width = c[\"main\"].get(\"max_field_width\", DEFAULT_MAX_FIELD_WIDTH)\n        if max_field_width and max_field_width.lower() != \"none\":\n            max_field_width = max(3, abs(int(max_field_width)))\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 39,
                  "endLine": 212,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n        self.explain_mode = False\n        self.multi_line = c[\"main\"].as_bool(\"multi_line\")\n        self.multiline_mode = c[\"main\"].get(\"multi_line_mode\", \"psql\")\n        self.vi_mode = c[\"main\"].as_bool(\"vi\")\n        self.auto_expand = auto_vertical_output or c[\"main\"].as_bool(\"auto_expand\")\n        self.auto_retry_closed_connection = c[\"main\"].as_bool(\n",
                    "rendered": {
                      "text": "\n        self.explain_mode = False\n        self.multi_line = c[\"main\"].as_bool(\"multi_line\")\n        self.multiline_mode = c[\"main\"].get(\"multi_line_mode\", \"psql\")\n        self.vi_mode = c[\"main\"].as_bool(\"vi\")\n        self.auto_expand = auto_vertical_output or c[\"main\"].as_bool(\"auto_expand\")\n        self.auto_retry_closed_connection = c[\"main\"].as_bool(\n",
                      "markdown": "`\n        self.explain_mode = False\n        self.multi_line = c[\"main\"].as_bool(\"multi_line\")\n        self.multiline_mode = c[\"main\"].get(\"multi_line_mode\", \"psql\")\n        self.vi_mode = c[\"main\"].as_bool(\"vi\")\n        self.auto_expand = auto_vertical_output or c[\"main\"].as_bool(\"auto_expand\")\n        self.auto_retry_closed_connection = c[\"main\"].as_bool(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 25,
                  "endLine": 168,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        # Set default set of less recommended options, if they are not already set.\n        # They are ignored if pager is different than less.\n        if not os.environ.get(\"LESS\"):\n            os.environ[\"LESS\"] = \"-SRXF\"\n\n    def __init__(\n",
                    "rendered": {
                      "text": "\n        # Set default set of less recommended options, if they are not already set.\n        # They are ignored if pager is different than less.\n        if not os.environ.get(\"LESS\"):\n            os.environ[\"LESS\"] = \"-SRXF\"\n\n    def __init__(\n",
                      "markdown": "`\n        # Set default set of less recommended options, if they are not already set.\n        # They are ignored if pager is different than less.\n        if not os.environ.get(\"LESS\"):\n            os.environ[\"LESS\"] = \"-SRXF\"\n\n    def __init__(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 37,
                  "endLine": 148,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n    def set_default_pager(self, config):\n        configured_pager = config[\"main\"].get(\"pager\")\n        os_environ_pager = os.environ.get(\"PAGER\")\n\n        if configured_pager:\n            self.logger.info(\n",
                    "rendered": {
                      "text": "\n    def set_default_pager(self, config):\n        configured_pager = config[\"main\"].get(\"pager\")\n        os_environ_pager = os.environ.get(\"PAGER\")\n\n        if configured_pager:\n            self.logger.info(\n",
                      "markdown": "`\n    def set_default_pager(self, config):\n        configured_pager = config[\"main\"].get(\"pager\")\n        os_environ_pager = os.environ.get(\"PAGER\")\n\n        if configured_pager:\n            self.logger.info(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 41,
                  "endLine": 147,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    max_len_prompt = 30\n\n    def set_default_pager(self, config):\n        configured_pager = config[\"main\"].get(\"pager\")\n        os_environ_pager = os.environ.get(\"PAGER\")\n\n        if configured_pager:\n",
                    "rendered": {
                      "text": "    max_len_prompt = 30\n\n    def set_default_pager(self, config):\n        configured_pager = config[\"main\"].get(\"pager\")\n        os_environ_pager = os.environ.get(\"PAGER\")\n\n        if configured_pager:\n",
                      "markdown": "`    max_len_prompt = 30\n\n    def set_default_pager(self, config):\n        configured_pager = config[\"main\"].get(\"pager\")\n        os_environ_pager = os.environ.get(\"PAGER\")\n\n        if configured_pager:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1649,
                  "startColumn": 51,
                  "endLine": 1649,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        process_title = re.sub(r\":(.*):(.*)@\", r\":\\1:xxxx@\", process_title)\n    elif \"=\" in process_title:\n        process_title = re.sub(\n            r\"password=(.+?)((\\s[a-zA-Z]+=)|$)\", r\"password=xxxx\\2\", process_title\n        )\n\n    setproctitle.setproctitle(process_title)\n",
                    "rendered": {
                      "text": "        process_title = re.sub(r\":(.*):(.*)@\", r\":\\1:xxxx@\", process_title)\n    elif \"=\" in process_title:\n        process_title = re.sub(\n            r\"password=(.+?)((\\s[a-zA-Z]+=)|$)\", r\"password=xxxx\\2\", process_title\n        )\n\n    setproctitle.setproctitle(process_title)\n",
                      "markdown": "`        process_title = re.sub(r\":(.*):(.*)@\", r\":\\1:xxxx@\", process_title)\n    elif \"=\" in process_title:\n        process_title = re.sub(\n            r\"password=(.+?)((\\s[a-zA-Z]+=)|$)\", r\"password=xxxx\\2\", process_title\n        )\n\n    setproctitle.setproctitle(process_title)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1649,
                  "startColumn": 14,
                  "endLine": 1649,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        process_title = re.sub(r\":(.*):(.*)@\", r\":\\1:xxxx@\", process_title)\n    elif \"=\" in process_title:\n        process_title = re.sub(\n            r\"password=(.+?)((\\s[a-zA-Z]+=)|$)\", r\"password=xxxx\\2\", process_title\n        )\n\n    setproctitle.setproctitle(process_title)\n",
                    "rendered": {
                      "text": "        process_title = re.sub(r\":(.*):(.*)@\", r\":\\1:xxxx@\", process_title)\n    elif \"=\" in process_title:\n        process_title = re.sub(\n            r\"password=(.+?)((\\s[a-zA-Z]+=)|$)\", r\"password=xxxx\\2\", process_title\n        )\n\n    setproctitle.setproctitle(process_title)\n",
                      "markdown": "`        process_title = re.sub(r\":(.*):(.*)@\", r\":\\1:xxxx@\", process_title)\n    elif \"=\" in process_title:\n        process_title = re.sub(\n            r\"password=(.+?)((\\s[a-zA-Z]+=)|$)\", r\"password=xxxx\\2\", process_title\n        )\n\n    setproctitle.setproctitle(process_title)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1643,
                  "startColumn": 22,
                  "endLine": 1643,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    pgcli.run_cli()\n\n\ndef obfuscate_process_password():\n    process_title = setproctitle.getproctitle()\n    if \"://\" in process_title:\n        process_title = re.sub(r\":(.*):(.*)@\", r\":\\1:xxxx@\", process_title)\n",
                    "rendered": {
                      "text": "    pgcli.run_cli()\n\n\ndef obfuscate_process_password():\n    process_title = setproctitle.getproctitle()\n    if \"://\" in process_title:\n        process_title = re.sub(r\":(.*):(.*)@\", r\":\\1:xxxx@\", process_title)\n",
                      "markdown": "`    pgcli.run_cli()\n\n\ndef obfuscate_process_password():\n    process_title = setproctitle.getproctitle()\n    if \"://\" in process_title:\n        process_title = re.sub(r\":(.*):(.*)@\", r\":\\1:xxxx@\", process_title)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1638,
                  "startColumn": 26,
                  "endLine": 1638,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    )\n\n    if setproctitle:\n        obfuscate_process_password()\n\n    pgcli.run_cli()\n\n",
                    "rendered": {
                      "text": "    )\n\n    if setproctitle:\n        obfuscate_process_password()\n\n    pgcli.run_cli()\n\n",
                      "markdown": "`    )\n\n    if setproctitle:\n        obfuscate_process_password()\n\n    pgcli.run_cli()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1403,
                  "startColumn": 27,
                  "endLine": 1403,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    \"never_prompt\",\n    is_flag=True,\n    default=False,\n    help=\"Never prompt for password.\",\n)\n@click.option(\n    \"--single-connection\",\n",
                    "rendered": {
                      "text": "    \"never_prompt\",\n    is_flag=True,\n    default=False,\n    help=\"Never prompt for password.\",\n)\n@click.option(\n    \"--single-connection\",\n",
                      "markdown": "`    \"never_prompt\",\n    is_flag=True,\n    default=False,\n    help=\"Never prompt for password.\",\n)\n@click.option(\n    \"--single-connection\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1399,
                  "startColumn": 10,
                  "endLine": 1399,
                  "endColumn": 18,
                  "snippet": {
                    "text": ")\n@click.option(\n    \"-w\",\n    \"--no-password\",\n    \"never_prompt\",\n    is_flag=True,\n    default=False,\n",
                    "rendered": {
                      "text": ")\n@click.option(\n    \"-w\",\n    \"--no-password\",\n    \"never_prompt\",\n    is_flag=True,\n    default=False,\n",
                      "markdown": "`)\n@click.option(\n    \"-w\",\n    \"--no-password\",\n    \"never_prompt\",\n    is_flag=True,\n    default=False,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1395,
                  "startColumn": 16,
                  "endLine": 1395,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    \"prompt_passwd\",\n    is_flag=True,\n    default=False,\n    help=\"Force password prompt.\",\n)\n@click.option(\n    \"-w\",\n",
                    "rendered": {
                      "text": "    \"prompt_passwd\",\n    is_flag=True,\n    default=False,\n    help=\"Force password prompt.\",\n)\n@click.option(\n    \"-w\",\n",
                      "markdown": "`    \"prompt_passwd\",\n    is_flag=True,\n    default=False,\n    help=\"Force password prompt.\",\n)\n@click.option(\n    \"-w\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1391,
                  "startColumn": 7,
                  "endLine": 1391,
                  "endColumn": 15,
                  "snippet": {
                    "text": ")\n@click.option(\n    \"-W\",\n    \"--password\",\n    \"prompt_passwd\",\n    is_flag=True,\n    default=False,\n",
                    "rendered": {
                      "text": ")\n@click.option(\n    \"-W\",\n    \"--password\",\n    \"prompt_passwd\",\n    is_flag=True,\n    default=False,\n",
                      "markdown": "`)\n@click.option(\n    \"-W\",\n    \"--password\",\n    \"prompt_passwd\",\n    is_flag=True,\n    default=False,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 33,
                  "endLine": 760,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                else:\n                    raise e\n            if passwd and auth.keyring:\n                auth.keyring_set_password(key, passwd)\n\n        except Exception as e:  # Connecting to a database could fail.\n            self.logger.debug(\"Database connection failed: %r.\", e)\n",
                    "rendered": {
                      "text": "                else:\n                    raise e\n            if passwd and auth.keyring:\n                auth.keyring_set_password(key, passwd)\n\n        except Exception as e:  # Connecting to a database could fail.\n            self.logger.debug(\"Database connection failed: %r.\", e)\n",
                      "markdown": "`                else:\n                    raise e\n            if passwd and auth.keyring:\n                auth.keyring_set_password(key, passwd)\n\n        except Exception as e:  # Connecting to a database could fail.\n            self.logger.debug(\"Database connection failed: %r.\", e)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 742,
                  "startColumn": 25,
                  "endLine": 742,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            except (OperationalError, InterfaceError) as e:\n                if should_ask_for_password(e):\n                    passwd = click.prompt(\n                        \"Password for %s\" % user,\n                        hide_input=True,\n                        show_default=False,\n                        type=str,\n",
                    "rendered": {
                      "text": "            except (OperationalError, InterfaceError) as e:\n                if should_ask_for_password(e):\n                    passwd = click.prompt(\n                        \"Password for %s\" % user,\n                        hide_input=True,\n                        show_default=False,\n                        type=str,\n",
                      "markdown": "`            except (OperationalError, InterfaceError) as e:\n                if should_ask_for_password(e):\n                    passwd = click.prompt(\n                        \"Password for %s\" % user,\n                        hide_input=True,\n                        show_default=False,\n                        type=str,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 34,
                  "endLine": 740,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                    **kwargs,\n                )\n            except (OperationalError, InterfaceError) as e:\n                if should_ask_for_password(e):\n                    passwd = click.prompt(\n                        \"Password for %s\" % user,\n                        hide_input=True,\n",
                    "rendered": {
                      "text": "                    **kwargs,\n                )\n            except (OperationalError, InterfaceError) as e:\n                if should_ask_for_password(e):\n                    passwd = click.prompt(\n                        \"Password for %s\" % user,\n                        hide_input=True,\n",
                      "markdown": "`                    **kwargs,\n                )\n            except (OperationalError, InterfaceError) as e:\n                if should_ask_for_password(e):\n                    passwd = click.prompt(\n                        \"Password for %s\" % user,\n                        hide_input=True,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 23,
                  "endLine": 726,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        # Attempt to connect to the database.\n        # Note that passwd may be empty on the first attempt. If connection\n        # fails because of a missing or incorrect password, but we're allowed to\n        # prompt for a password (no -w flag), prompt for a passwd and try again.\n        try:\n            try:\n                pgexecute = PGExecute(\n",
                    "rendered": {
                      "text": "        # Attempt to connect to the database.\n        # Note that passwd may be empty on the first attempt. If connection\n        # fails because of a missing or incorrect password, but we're allowed to\n        # prompt for a password (no -w flag), prompt for a passwd and try again.\n        try:\n            try:\n                pgexecute = PGExecute(\n",
                      "markdown": "`        # Attempt to connect to the database.\n        # Note that passwd may be empty on the first attempt. If connection\n        # fails because of a missing or incorrect password, but we're allowed to\n        # prompt for a password (no -w flag), prompt for a passwd and try again.\n        try:\n            try:\n                pgexecute = PGExecute(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 725,
                  "startColumn": 50,
                  "endLine": 725,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n        # Attempt to connect to the database.\n        # Note that passwd may be empty on the first attempt. If connection\n        # fails because of a missing or incorrect password, but we're allowed to\n        # prompt for a password (no -w flag), prompt for a passwd and try again.\n        try:\n            try:\n",
                    "rendered": {
                      "text": "\n        # Attempt to connect to the database.\n        # Note that passwd may be empty on the first attempt. If connection\n        # fails because of a missing or incorrect password, but we're allowed to\n        # prompt for a password (no -w flag), prompt for a passwd and try again.\n        try:\n            try:\n",
                      "markdown": "`\n        # Attempt to connect to the database.\n        # Note that passwd may be empty on the first attempt. If connection\n        # fails because of a missing or incorrect password, but we're allowed to\n        # prompt for a password (no -w flag), prompt for a passwd and try again.\n        try:\n            try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 718,
                  "startColumn": 23,
                  "endLine": 718,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n            atexit.register(self.ssh_tunnel.stop)\n            host = \"127.0.0.1\"\n            port = self.ssh_tunnel.local_bind_ports[0]\n\n            if dsn:\n                dsn = make_conninfo(dsn, host=host, port=port)\n",
                    "rendered": {
                      "text": "\n            atexit.register(self.ssh_tunnel.stop)\n            host = \"127.0.0.1\"\n            port = self.ssh_tunnel.local_bind_ports[0]\n\n            if dsn:\n                dsn = make_conninfo(dsn, host=host, port=port)\n",
                      "markdown": "`\n            atexit.register(self.ssh_tunnel.stop)\n            host = \"127.0.0.1\"\n            port = self.ssh_tunnel.local_bind_ports[0]\n\n            if dsn:\n                dsn = make_conninfo(dsn, host=host, port=port)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 32,
                  "endLine": 716,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                exit(1)\n            self.logger.handlers = logger_handlers\n\n            atexit.register(self.ssh_tunnel.stop)\n            host = \"127.0.0.1\"\n            port = self.ssh_tunnel.local_bind_ports[0]\n\n",
                    "rendered": {
                      "text": "                exit(1)\n            self.logger.handlers = logger_handlers\n\n            atexit.register(self.ssh_tunnel.stop)\n            host = \"127.0.0.1\"\n            port = self.ssh_tunnel.local_bind_ports[0]\n\n",
                      "markdown": "`                exit(1)\n            self.logger.handlers = logger_handlers\n\n            atexit.register(self.ssh_tunnel.stop)\n            host = \"127.0.0.1\"\n            port = self.ssh_tunnel.local_bind_ports[0]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 20,
                  "endLine": 708,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            logger_handlers = self.logger.handlers.copy()\n            try:\n                self.ssh_tunnel = sshtunnel.SSHTunnelForwarder(**params)\n                self.ssh_tunnel.start()\n            except Exception as e:\n                self.logger.handlers = logger_handlers\n                self.logger.error(\"traceback: %r\", traceback.format_exc())\n",
                    "rendered": {
                      "text": "            logger_handlers = self.logger.handlers.copy()\n            try:\n                self.ssh_tunnel = sshtunnel.SSHTunnelForwarder(**params)\n                self.ssh_tunnel.start()\n            except Exception as e:\n                self.logger.handlers = logger_handlers\n                self.logger.error(\"traceback: %r\", traceback.format_exc())\n",
                      "markdown": "`            logger_handlers = self.logger.handlers.copy()\n            try:\n                self.ssh_tunnel = sshtunnel.SSHTunnelForwarder(**params)\n                self.ssh_tunnel.start()\n            except Exception as e:\n                self.logger.handlers = logger_handlers\n                self.logger.error(\"traceback: %r\", traceback.format_exc())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 707,
                  "startColumn": 43,
                  "endLine": 707,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            # We can remove this when https://github.com/pahaz/sshtunnel/pull/250 is merged.\n            logger_handlers = self.logger.handlers.copy()\n            try:\n                self.ssh_tunnel = sshtunnel.SSHTunnelForwarder(**params)\n                self.ssh_tunnel.start()\n            except Exception as e:\n                self.logger.handlers = logger_handlers\n",
                    "rendered": {
                      "text": "            # We can remove this when https://github.com/pahaz/sshtunnel/pull/250 is merged.\n            logger_handlers = self.logger.handlers.copy()\n            try:\n                self.ssh_tunnel = sshtunnel.SSHTunnelForwarder(**params)\n                self.ssh_tunnel.start()\n            except Exception as e:\n                self.logger.handlers = logger_handlers\n",
                      "markdown": "`            # We can remove this when https://github.com/pahaz/sshtunnel/pull/250 is merged.\n            logger_handlers = self.logger.handlers.copy()\n            try:\n                self.ssh_tunnel = sshtunnel.SSHTunnelForwarder(**params)\n                self.ssh_tunnel.start()\n            except Exception as e:\n                self.logger.handlers = logger_handlers\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 707,
                  "startColumn": 20,
                  "endLine": 707,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            # We can remove this when https://github.com/pahaz/sshtunnel/pull/250 is merged.\n            logger_handlers = self.logger.handlers.copy()\n            try:\n                self.ssh_tunnel = sshtunnel.SSHTunnelForwarder(**params)\n                self.ssh_tunnel.start()\n            except Exception as e:\n                self.logger.handlers = logger_handlers\n",
                    "rendered": {
                      "text": "            # We can remove this when https://github.com/pahaz/sshtunnel/pull/250 is merged.\n            logger_handlers = self.logger.handlers.copy()\n            try:\n                self.ssh_tunnel = sshtunnel.SSHTunnelForwarder(**params)\n                self.ssh_tunnel.start()\n            except Exception as e:\n                self.logger.handlers = logger_handlers\n",
                      "markdown": "`            # We can remove this when https://github.com/pahaz/sshtunnel/pull/250 is merged.\n            logger_handlers = self.logger.handlers.copy()\n            try:\n                self.ssh_tunnel = sshtunnel.SSHTunnelForwarder(**params)\n                self.ssh_tunnel.start()\n            except Exception as e:\n                self.logger.handlers = logger_handlers\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 53,
                  "endLine": 701,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            if tunnel_info.username:\n                params[\"ssh_username\"] = tunnel_info.username\n            if tunnel_info.password:\n                params[\"ssh_password\"] = tunnel_info.password\n\n            # Hack: sshtunnel adds a console handler to the logger, so we revert handlers.\n            # We can remove this when https://github.com/pahaz/sshtunnel/pull/250 is merged.\n",
                    "rendered": {
                      "text": "            if tunnel_info.username:\n                params[\"ssh_username\"] = tunnel_info.username\n            if tunnel_info.password:\n                params[\"ssh_password\"] = tunnel_info.password\n\n            # Hack: sshtunnel adds a console handler to the logger, so we revert handlers.\n            # We can remove this when https://github.com/pahaz/sshtunnel/pull/250 is merged.\n",
                      "markdown": "`            if tunnel_info.username:\n                params[\"ssh_username\"] = tunnel_info.username\n            if tunnel_info.password:\n                params[\"ssh_password\"] = tunnel_info.password\n\n            # Hack: sshtunnel adds a console handler to the logger, so we revert handlers.\n            # We can remove this when https://github.com/pahaz/sshtunnel/pull/250 is merged.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 28,
                  "endLine": 701,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            if tunnel_info.username:\n                params[\"ssh_username\"] = tunnel_info.username\n            if tunnel_info.password:\n                params[\"ssh_password\"] = tunnel_info.password\n\n            # Hack: sshtunnel adds a console handler to the logger, so we revert handlers.\n            # We can remove this when https://github.com/pahaz/sshtunnel/pull/250 is merged.\n",
                    "rendered": {
                      "text": "            if tunnel_info.username:\n                params[\"ssh_username\"] = tunnel_info.username\n            if tunnel_info.password:\n                params[\"ssh_password\"] = tunnel_info.password\n\n            # Hack: sshtunnel adds a console handler to the logger, so we revert handlers.\n            # We can remove this when https://github.com/pahaz/sshtunnel/pull/250 is merged.\n",
                      "markdown": "`            if tunnel_info.username:\n                params[\"ssh_username\"] = tunnel_info.username\n            if tunnel_info.password:\n                params[\"ssh_password\"] = tunnel_info.password\n\n            # Hack: sshtunnel adds a console handler to the logger, so we revert handlers.\n            # We can remove this when https://github.com/pahaz/sshtunnel/pull/250 is merged.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 700,
                  "startColumn": 27,
                  "endLine": 700,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            }\n            if tunnel_info.username:\n                params[\"ssh_username\"] = tunnel_info.username\n            if tunnel_info.password:\n                params[\"ssh_password\"] = tunnel_info.password\n\n            # Hack: sshtunnel adds a console handler to the logger, so we revert handlers.\n",
                    "rendered": {
                      "text": "            }\n            if tunnel_info.username:\n                params[\"ssh_username\"] = tunnel_info.username\n            if tunnel_info.password:\n                params[\"ssh_password\"] = tunnel_info.password\n\n            # Hack: sshtunnel adds a console handler to the logger, so we revert handlers.\n",
                      "markdown": "`            }\n            if tunnel_info.username:\n                params[\"ssh_username\"] = tunnel_info.username\n            if tunnel_info.password:\n                params[\"ssh_password\"] = tunnel_info.password\n\n            # Hack: sshtunnel adds a console handler to the logger, so we revert handlers.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 691,
                  "startColumn": 39,
                  "endLine": 691,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n            tunnel_info = urlparse(self.ssh_tunnel_url)\n            params = {\n                \"local_bind_address\": (\"127.0.0.1\",),\n                \"remote_bind_address\": (host, int(port or 5432)),\n",
                    "rendered": {
                      "text": "            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n            tunnel_info = urlparse(self.ssh_tunnel_url)\n            params = {\n                \"local_bind_address\": (\"127.0.0.1\",),\n                \"remote_bind_address\": (host, int(port or 5432)),\n",
                      "markdown": "`            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n            tunnel_info = urlparse(self.ssh_tunnel_url)\n            params = {\n                \"local_bind_address\": (\"127.0.0.1\",),\n                \"remote_bind_address\": (host, int(port or 5432)),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 51,
                  "endLine": 689,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n            tunnel_info = urlparse(self.ssh_tunnel_url)\n            params = {\n",
                    "rendered": {
                      "text": "        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n            tunnel_info = urlparse(self.ssh_tunnel_url)\n            params = {\n",
                      "markdown": "`        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n            tunnel_info = urlparse(self.ssh_tunnel_url)\n            params = {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 20,
                  "endLine": 689,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n            tunnel_info = urlparse(self.ssh_tunnel_url)\n            params = {\n",
                    "rendered": {
                      "text": "        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n            tunnel_info = urlparse(self.ssh_tunnel_url)\n            params = {\n",
                      "markdown": "`        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n            tunnel_info = urlparse(self.ssh_tunnel_url)\n            params = {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 32,
                  "endLine": 688,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n            tunnel_info = urlparse(self.ssh_tunnel_url)\n",
                    "rendered": {
                      "text": "\n        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n            tunnel_info = urlparse(self.ssh_tunnel_url)\n",
                      "markdown": "`\n        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n            tunnel_info = urlparse(self.ssh_tunnel_url)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 15,
                  "endLine": 686,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                    self.ssh_tunnel_url = tunnel_url\n                    break\n\n        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n",
                    "rendered": {
                      "text": "                    self.ssh_tunnel_url = tunnel_url\n                    break\n\n        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n",
                      "markdown": "`                    self.ssh_tunnel_url = tunnel_url\n                    break\n\n        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 683,
                  "startColumn": 24,
                  "endLine": 683,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        if self.ssh_tunnel_config and not self.ssh_tunnel_url:\n            for db_host_regex, tunnel_url in self.ssh_tunnel_config.items():\n                if re.search(db_host_regex, host):\n                    self.ssh_tunnel_url = tunnel_url\n                    break\n\n        if self.ssh_tunnel_url:\n",
                    "rendered": {
                      "text": "        if self.ssh_tunnel_config and not self.ssh_tunnel_url:\n            for db_host_regex, tunnel_url in self.ssh_tunnel_config.items():\n                if re.search(db_host_regex, host):\n                    self.ssh_tunnel_url = tunnel_url\n                    break\n\n        if self.ssh_tunnel_url:\n",
                      "markdown": "`        if self.ssh_tunnel_config and not self.ssh_tunnel_url:\n            for db_host_regex, tunnel_url in self.ssh_tunnel_config.items():\n                if re.search(db_host_regex, host):\n                    self.ssh_tunnel_url = tunnel_url\n                    break\n\n        if self.ssh_tunnel_url:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 681,
                  "startColumn": 49,
                  "endLine": 681,
                  "endColumn": 53,
                  "snippet": {
                    "text": "                port = parsed_dsn[\"port\"]\n\n        if self.ssh_tunnel_config and not self.ssh_tunnel_url:\n            for db_host_regex, tunnel_url in self.ssh_tunnel_config.items():\n                if re.search(db_host_regex, host):\n                    self.ssh_tunnel_url = tunnel_url\n                    break\n",
                    "rendered": {
                      "text": "                port = parsed_dsn[\"port\"]\n\n        if self.ssh_tunnel_config and not self.ssh_tunnel_url:\n            for db_host_regex, tunnel_url in self.ssh_tunnel_config.items():\n                if re.search(db_host_regex, host):\n                    self.ssh_tunnel_url = tunnel_url\n                    break\n",
                      "markdown": "`                port = parsed_dsn[\"port\"]\n\n        if self.ssh_tunnel_config and not self.ssh_tunnel_url:\n            for db_host_regex, tunnel_url in self.ssh_tunnel_config.items():\n                if re.search(db_host_regex, host):\n                    self.ssh_tunnel_url = tunnel_url\n                    break\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 680,
                  "startColumn": 46,
                  "endLine": 680,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            if \"port\" in parsed_dsn:\n                port = parsed_dsn[\"port\"]\n\n        if self.ssh_tunnel_config and not self.ssh_tunnel_url:\n            for db_host_regex, tunnel_url in self.ssh_tunnel_config.items():\n                if re.search(db_host_regex, host):\n                    self.ssh_tunnel_url = tunnel_url\n",
                    "rendered": {
                      "text": "            if \"port\" in parsed_dsn:\n                port = parsed_dsn[\"port\"]\n\n        if self.ssh_tunnel_config and not self.ssh_tunnel_url:\n            for db_host_regex, tunnel_url in self.ssh_tunnel_config.items():\n                if re.search(db_host_regex, host):\n                    self.ssh_tunnel_url = tunnel_url\n",
                      "markdown": "`            if \"port\" in parsed_dsn:\n                port = parsed_dsn[\"port\"]\n\n        if self.ssh_tunnel_config and not self.ssh_tunnel_url:\n            for db_host_regex, tunnel_url in self.ssh_tunnel_config.items():\n                if re.search(db_host_regex, host):\n                    self.ssh_tunnel_url = tunnel_url\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 680,
                  "startColumn": 15,
                  "endLine": 680,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            if \"port\" in parsed_dsn:\n                port = parsed_dsn[\"port\"]\n\n        if self.ssh_tunnel_config and not self.ssh_tunnel_url:\n            for db_host_regex, tunnel_url in self.ssh_tunnel_config.items():\n                if re.search(db_host_regex, host):\n                    self.ssh_tunnel_url = tunnel_url\n",
                    "rendered": {
                      "text": "            if \"port\" in parsed_dsn:\n                port = parsed_dsn[\"port\"]\n\n        if self.ssh_tunnel_config and not self.ssh_tunnel_url:\n            for db_host_regex, tunnel_url in self.ssh_tunnel_config.items():\n                if re.search(db_host_regex, host):\n                    self.ssh_tunnel_url = tunnel_url\n",
                      "markdown": "`            if \"port\" in parsed_dsn:\n                port = parsed_dsn[\"port\"]\n\n        if self.ssh_tunnel_config and not self.ssh_tunnel_url:\n            for db_host_regex, tunnel_url in self.ssh_tunnel_config.items():\n                if re.search(db_host_regex, host):\n                    self.ssh_tunnel_url = tunnel_url\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 16,
                  "endLine": 669,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            error_msg = exc.args[0]\n            if \"no password supplied\" in error_msg:\n                return True\n            if \"password authentication failed\" in error_msg:\n                return True\n            return False\n\n",
                    "rendered": {
                      "text": "            error_msg = exc.args[0]\n            if \"no password supplied\" in error_msg:\n                return True\n            if \"password authentication failed\" in error_msg:\n                return True\n            return False\n\n",
                      "markdown": "`            error_msg = exc.args[0]\n            if \"no password supplied\" in error_msg:\n                return True\n            if \"password authentication failed\" in error_msg:\n                return True\n            return False\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 19,
                  "endLine": 667,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            if self.never_passwd_prompt:\n                return False\n            error_msg = exc.args[0]\n            if \"no password supplied\" in error_msg:\n                return True\n            if \"password authentication failed\" in error_msg:\n                return True\n",
                    "rendered": {
                      "text": "            if self.never_passwd_prompt:\n                return False\n            error_msg = exc.args[0]\n            if \"no password supplied\" in error_msg:\n                return True\n            if \"password authentication failed\" in error_msg:\n                return True\n",
                      "markdown": "`            if self.never_passwd_prompt:\n                return False\n            error_msg = exc.args[0]\n            if \"no password supplied\" in error_msg:\n                return True\n            if \"password authentication failed\" in error_msg:\n                return True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 662,
                  "startColumn": 27,
                  "endLine": 662,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            passwd = auth.keyring_get_password(key)\n\n        def should_ask_for_password(exc):\n            # Prompt for a password after 1st attempt to connect\n            # fails. Don't prompt if the -w flag is supplied\n            if self.never_passwd_prompt:\n                return False\n",
                    "rendered": {
                      "text": "            passwd = auth.keyring_get_password(key)\n\n        def should_ask_for_password(exc):\n            # Prompt for a password after 1st attempt to connect\n            # fails. Don't prompt if the -w flag is supplied\n            if self.never_passwd_prompt:\n                return False\n",
                      "markdown": "`            passwd = auth.keyring_get_password(key)\n\n        def should_ask_for_password(exc):\n            # Prompt for a password after 1st attempt to connect\n            # fails. Don't prompt if the -w flag is supplied\n            if self.never_passwd_prompt:\n                return False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 27,
                  "endLine": 661,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        if not passwd and auth.keyring:\n            passwd = auth.keyring_get_password(key)\n\n        def should_ask_for_password(exc):\n            # Prompt for a password after 1st attempt to connect\n            # fails. Don't prompt if the -w flag is supplied\n            if self.never_passwd_prompt:\n",
                    "rendered": {
                      "text": "        if not passwd and auth.keyring:\n            passwd = auth.keyring_get_password(key)\n\n        def should_ask_for_password(exc):\n            # Prompt for a password after 1st attempt to connect\n            # fails. Don't prompt if the -w flag is supplied\n            if self.never_passwd_prompt:\n",
                      "markdown": "`        if not passwd and auth.keyring:\n            passwd = auth.keyring_get_password(key)\n\n        def should_ask_for_password(exc):\n            # Prompt for a password after 1st attempt to connect\n            # fails. Don't prompt if the -w flag is supplied\n            if self.never_passwd_prompt:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 38,
                  "endLine": 659,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        key = f\"{user}@{host}\"\n\n        if not passwd and auth.keyring:\n            passwd = auth.keyring_get_password(key)\n\n        def should_ask_for_password(exc):\n            # Prompt for a password after 1st attempt to connect\n",
                    "rendered": {
                      "text": "        key = f\"{user}@{host}\"\n\n        if not passwd and auth.keyring:\n            passwd = auth.keyring_get_password(key)\n\n        def should_ask_for_password(exc):\n            # Prompt for a password after 1st attempt to connect\n",
                      "markdown": "`        key = f\"{user}@{host}\"\n\n        if not passwd and auth.keyring:\n            passwd = auth.keyring_get_password(key)\n\n        def should_ask_for_password(exc):\n            # Prompt for a password after 1st attempt to connect\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 653,
                  "startColumn": 17,
                  "endLine": 653,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        # prompt for it, even with the -W flag\n        if self.force_passwd_prompt and not passwd:\n            passwd = click.prompt(\n                \"Password for %s\" % user, hide_input=True, show_default=False, type=str\n            )\n\n        key = f\"{user}@{host}\"\n",
                    "rendered": {
                      "text": "        # prompt for it, even with the -W flag\n        if self.force_passwd_prompt and not passwd:\n            passwd = click.prompt(\n                \"Password for %s\" % user, hide_input=True, show_default=False, type=str\n            )\n\n        key = f\"{user}@{host}\"\n",
                      "markdown": "`        # prompt for it, even with the -W flag\n        if self.force_passwd_prompt and not passwd:\n            passwd = click.prompt(\n                \"Password for %s\" % user, hide_input=True, show_default=False, type=str\n            )\n\n        key = f\"{user}@{host}\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 38,
                  "endLine": 649,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n        # no-password exception.\n        # If we successfully parsed a password from a URI, there's no need to\n        # prompt for it, even with the -W flag\n        if self.force_passwd_prompt and not passwd:\n            passwd = click.prompt(\n",
                    "rendered": {
                      "text": "        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n        # no-password exception.\n        # If we successfully parsed a password from a URI, there's no need to\n        # prompt for it, even with the -W flag\n        if self.force_passwd_prompt and not passwd:\n            passwd = click.prompt(\n",
                      "markdown": "`        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n        # no-password exception.\n        # If we successfully parsed a password from a URI, there's no need to\n        # prompt for it, even with the -W flag\n        if self.force_passwd_prompt and not passwd:\n            passwd = click.prompt(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 648,
                  "startColumn": 13,
                  "endLine": 648,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n        # no-password exception.\n        # If we successfully parsed a password from a URI, there's no need to\n        # prompt for it, even with the -W flag\n        if self.force_passwd_prompt and not passwd:\n",
                    "rendered": {
                      "text": "\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n        # no-password exception.\n        # If we successfully parsed a password from a URI, there's no need to\n        # prompt for it, even with the -W flag\n        if self.force_passwd_prompt and not passwd:\n",
                      "markdown": "`\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n        # no-password exception.\n        # If we successfully parsed a password from a URI, there's no need to\n        # prompt for it, even with the -W flag\n        if self.force_passwd_prompt and not passwd:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 646,
                  "startColumn": 23,
                  "endLine": 646,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n        # no-password exception.\n        # If we successfully parsed a password from a URI, there's no need to\n",
                    "rendered": {
                      "text": "        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n        # no-password exception.\n        # If we successfully parsed a password from a URI, there's no need to\n",
                      "markdown": "`        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n        # no-password exception.\n        # If we successfully parsed a password from a URI, there's no need to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 39,
                  "endLine": 644,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n",
                    "rendered": {
                      "text": "        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n",
                      "markdown": "`        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 50,
                  "endLine": 641,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n        kwargs.setdefault(\"application_name\", self.application_name)\n\n        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n",
                    "rendered": {
                      "text": "\n        kwargs.setdefault(\"application_name\", self.application_name)\n\n        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n",
                      "markdown": "`\n        kwargs.setdefault(\"application_name\", self.application_name)\n\n        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 13,
                  "endLine": 641,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n        kwargs.setdefault(\"application_name\", self.application_name)\n\n        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n",
                    "rendered": {
                      "text": "\n        kwargs.setdefault(\"application_name\", self.application_name)\n\n        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n",
                      "markdown": "`\n        kwargs.setdefault(\"application_name\", self.application_name)\n\n        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 40,
                  "endLine": 624,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    def connect_uri(self, uri):\n        kwargs = conninfo_to_dict(uri)\n        remap = {\"dbname\": \"database\", \"password\": \"passwd\"}\n        kwargs = {remap.get(k, k): v for k, v in kwargs.items()}\n        self.connect(**kwargs)\n\n",
                    "rendered": {
                      "text": "\n    def connect_uri(self, uri):\n        kwargs = conninfo_to_dict(uri)\n        remap = {\"dbname\": \"database\", \"password\": \"passwd\"}\n        kwargs = {remap.get(k, k): v for k, v in kwargs.items()}\n        self.connect(**kwargs)\n\n",
                      "markdown": "`\n    def connect_uri(self, uri):\n        kwargs = conninfo_to_dict(uri)\n        remap = {\"dbname\": \"database\", \"password\": \"passwd\"}\n        kwargs = {remap.get(k, k): v for k, v in kwargs.items()}\n        self.connect(**kwargs)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 619,
                  "startColumn": 39,
                  "endLine": 619,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n        )\n\n    def connect_uri(self, uri):\n",
                    "rendered": {
                      "text": "            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n        )\n\n    def connect_uri(self, uri):\n",
                      "markdown": "`            host=service_config.get(\"host\"),\n            user=user or service_config.get(\"user\"),\n            port=service_config.get(\"port\"),\n            passwd=service_config.get(\"password\"),\n        )\n\n    def connect_uri(self, uri):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 12,
                  "endLine": 313,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n        self.ssh_tunnel_config = c.get(\"ssh tunnels\")\n        self.ssh_tunnel_url = ssh_tunnel_url\n        self.ssh_tunnel = None\n\n        if log_file:\n            with open(log_file, \"a+\"):\n",
                    "rendered": {
                      "text": "\n        self.ssh_tunnel_config = c.get(\"ssh tunnels\")\n        self.ssh_tunnel_url = ssh_tunnel_url\n        self.ssh_tunnel = None\n\n        if log_file:\n            with open(log_file, \"a+\"):\n",
                      "markdown": "`\n        self.ssh_tunnel_config = c.get(\"ssh tunnels\")\n        self.ssh_tunnel_url = ssh_tunnel_url\n        self.ssh_tunnel = None\n\n        if log_file:\n            with open(log_file, \"a+\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 12,
                  "endLine": 312,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        self.prompt_app = None\n\n        self.ssh_tunnel_config = c.get(\"ssh tunnels\")\n        self.ssh_tunnel_url = ssh_tunnel_url\n        self.ssh_tunnel = None\n\n        if log_file:\n",
                    "rendered": {
                      "text": "        self.prompt_app = None\n\n        self.ssh_tunnel_config = c.get(\"ssh tunnels\")\n        self.ssh_tunnel_url = ssh_tunnel_url\n        self.ssh_tunnel = None\n\n        if log_file:\n",
                      "markdown": "`        self.prompt_app = None\n\n        self.ssh_tunnel_config = c.get(\"ssh tunnels\")\n        self.ssh_tunnel_url = ssh_tunnel_url\n        self.ssh_tunnel = None\n\n        if log_file:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 12,
                  "endLine": 311,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n        self.prompt_app = None\n\n        self.ssh_tunnel_config = c.get(\"ssh tunnels\")\n        self.ssh_tunnel_url = ssh_tunnel_url\n        self.ssh_tunnel = None\n\n",
                    "rendered": {
                      "text": "\n        self.prompt_app = None\n\n        self.ssh_tunnel_config = c.get(\"ssh tunnels\")\n        self.ssh_tunnel_url = ssh_tunnel_url\n        self.ssh_tunnel = None\n\n",
                      "markdown": "`\n        self.prompt_app = None\n\n        self.ssh_tunnel_config = c.get(\"ssh tunnels\")\n        self.ssh_tunnel_url = ssh_tunnel_url\n        self.ssh_tunnel = None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 24,
                  "endLine": 644,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n",
                    "rendered": {
                      "text": "        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n",
                      "markdown": "`        # If password prompt is not forced but no password is provided, try\n        # getting it from environment variable.\n        if not self.force_passwd_prompt and not passwd:\n            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 18,
                  "endLine": 168,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n        # Set default set of less recommended options, if they are not already set.\n        # They are ignored if pager is different than less.\n        if not os.environ.get(\"LESS\"):\n            os.environ[\"LESS\"] = \"-SRXF\"\n\n    def __init__(\n",
                    "rendered": {
                      "text": "\n        # Set default set of less recommended options, if they are not already set.\n        # They are ignored if pager is different than less.\n        if not os.environ.get(\"LESS\"):\n            os.environ[\"LESS\"] = \"-SRXF\"\n\n    def __init__(\n",
                      "markdown": "`\n        # Set default set of less recommended options, if they are not already set.\n        # They are ignored if pager is different than less.\n        if not os.environ.get(\"LESS\"):\n            os.environ[\"LESS\"] = \"-SRXF\"\n\n    def __init__(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 11,
                  "endLine": 148,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    def set_default_pager(self, config):\n        configured_pager = config[\"main\"].get(\"pager\")\n        os_environ_pager = os.environ.get(\"PAGER\")\n\n        if configured_pager:\n            self.logger.info(\n",
                    "rendered": {
                      "text": "\n    def set_default_pager(self, config):\n        configured_pager = config[\"main\"].get(\"pager\")\n        os_environ_pager = os.environ.get(\"PAGER\")\n\n        if configured_pager:\n            self.logger.info(\n",
                      "markdown": "`\n    def set_default_pager(self, config):\n        configured_pager = config[\"main\"].get(\"pager\")\n        os_environ_pager = os.environ.get(\"PAGER\")\n\n        if configured_pager:\n            self.logger.info(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 52,
                  "endLine": 695,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            params = {\n                \"local_bind_address\": (\"127.0.0.1\",),\n                \"remote_bind_address\": (host, int(port or 5432)),\n                \"ssh_address_or_host\": (tunnel_info.hostname, tunnel_info.port or 22),\n                \"logger\": self.logger,\n            }\n            if tunnel_info.username:\n",
                    "rendered": {
                      "text": "            params = {\n                \"local_bind_address\": (\"127.0.0.1\",),\n                \"remote_bind_address\": (host, int(port or 5432)),\n                \"ssh_address_or_host\": (tunnel_info.hostname, tunnel_info.port or 22),\n                \"logger\": self.logger,\n            }\n            if tunnel_info.username:\n",
                      "markdown": "`            params = {\n                \"local_bind_address\": (\"127.0.0.1\",),\n                \"remote_bind_address\": (host, int(port or 5432)),\n                \"ssh_address_or_host\": (tunnel_info.hostname, tunnel_info.port or 22),\n                \"logger\": self.logger,\n            }\n            if tunnel_info.username:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1376,
                  "startColumn": 21,
                  "endLine": 1376,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    \"-p\",\n    \"--port\",\n    default=5432,\n    help=\"Port number at which the \" \"postgres instance is listening.\",\n    envvar=\"PGPORT\",\n    type=click.INT,\n)\n",
                    "rendered": {
                      "text": "    \"-p\",\n    \"--port\",\n    default=5432,\n    help=\"Port number at which the \" \"postgres instance is listening.\",\n    envvar=\"PGPORT\",\n    type=click.INT,\n)\n",
                      "markdown": "`    \"-p\",\n    \"--port\",\n    default=5432,\n    help=\"Port number at which the \" \"postgres instance is listening.\",\n    envvar=\"PGPORT\",\n    type=click.INT,\n)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 909,
                  "startColumn": 33,
                  "endLine": 909,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                else:\n                    print(\"Time: %0.03fs\" % query.total_time)\n\n            # Check if we need to update completions, in order of most\n            # to least drastic changes\n            if query.db_changed:\n                with self._completer_lock:\n",
                    "rendered": {
                      "text": "                else:\n                    print(\"Time: %0.03fs\" % query.total_time)\n\n            # Check if we need to update completions, in order of most\n            # to least drastic changes\n            if query.db_changed:\n                with self._completer_lock:\n",
                      "markdown": "`                else:\n                    print(\"Time: %0.03fs\" % query.total_time)\n\n            # Check if we need to update completions, in order of most\n            # to least drastic changes\n            if query.db_changed:\n                with self._completer_lock:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 23,
                  "endLine": 456,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            None,\n            None,\n            'You are connected to database \"%s\" as user '\n            '\"%s\" on %s at port \"%s\".'\n            % (self.pgexecute.dbname, self.pgexecute.user, host, self.pgexecute.port),\n        )\n\n",
                    "rendered": {
                      "text": "            None,\n            None,\n            'You are connected to database \"%s\" as user '\n            '\"%s\" on %s at port \"%s\".'\n            % (self.pgexecute.dbname, self.pgexecute.user, host, self.pgexecute.port),\n        )\n\n",
                      "markdown": "`            None,\n            None,\n            'You are connected to database \"%s\" as user '\n            '\"%s\" on %s at port \"%s\".'\n            % (self.pgexecute.dbname, self.pgexecute.user, host, self.pgexecute.port),\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 28,
                  "endLine": 229,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        # if not specified, set to DEFAULT_MAX_FIELD_WIDTH\n        # if specified but empty, set to None to disable truncation\n        # ellipsis will take at least 3 symbols, so this can't be less than 3 if specified and > 0\n        max_field_width = c[\"main\"].get(\"max_field_width\", DEFAULT_MAX_FIELD_WIDTH)\n        if max_field_width and max_field_width.lower() != \"none\":\n            max_field_width = max(3, abs(int(max_field_width)))\n",
                    "rendered": {
                      "text": "\n        # if not specified, set to DEFAULT_MAX_FIELD_WIDTH\n        # if specified but empty, set to None to disable truncation\n        # ellipsis will take at least 3 symbols, so this can't be less than 3 if specified and > 0\n        max_field_width = c[\"main\"].get(\"max_field_width\", DEFAULT_MAX_FIELD_WIDTH)\n        if max_field_width and max_field_width.lower() != \"none\":\n            max_field_width = max(3, abs(int(max_field_width)))\n",
                      "markdown": "`\n        # if not specified, set to DEFAULT_MAX_FIELD_WIDTH\n        # if specified but empty, set to None to disable truncation\n        # ellipsis will take at least 3 symbols, so this can't be less than 3 if specified and > 0\n        max_field_width = c[\"main\"].get(\"max_field_width\", DEFAULT_MAX_FIELD_WIDTH)\n        if max_field_width and max_field_width.lower() != \"none\":\n            max_field_width = max(3, abs(int(max_field_width)))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 9,
                  "endLine": 197,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        # Load config.\n        c = self.config = get_config(pgclirc_file)\n\n        # at this point, config should be written to pgclirc_file if it did not exist. Read it.\n        self.config_writer = load_config(get_config_filename(pgclirc_file))\n\n        # make sure to use self.config_writer, not self.config\n",
                    "rendered": {
                      "text": "        # Load config.\n        c = self.config = get_config(pgclirc_file)\n\n        # at this point, config should be written to pgclirc_file if it did not exist. Read it.\n        self.config_writer = load_config(get_config_filename(pgclirc_file))\n\n        # make sure to use self.config_writer, not self.config\n",
                      "markdown": "`        # Load config.\n        c = self.config = get_config(pgclirc_file)\n\n        # at this point, config should be written to pgclirc_file if it did not exist. Read it.\n        self.config_writer = load_config(get_config_filename(pgclirc_file))\n\n        # make sure to use self.config_writer, not self.config\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1900,
                  "startColumn": 6,
                  "endLine": 1900,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        except ParseError as err:\n            err.line_number += skipped_lines\n            raise err\n    if service not in service_file_config:\n        return None, service_file\n    service_conf = service_file_config.get(service)\n    return service_conf, service_file\n",
                    "rendered": {
                      "text": "        except ParseError as err:\n            err.line_number += skipped_lines\n            raise err\n    if service not in service_file_config:\n        return None, service_file\n    service_conf = service_file_config.get(service)\n    return service_conf, service_file\n",
                      "markdown": "`        except ParseError as err:\n            err.line_number += skipped_lines\n            raise err\n    if service not in service_file_config:\n        return None, service_file\n    service_conf = service_file_config.get(service)\n    return service_conf, service_file\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1890,
                  "startColumn": 10,
                  "endLine": 1890,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            service_file = os.path.join(os.getenv(\"PGSYSCONFDIR\"), \".pg_service.conf\")\n        else:\n            service_file = os.path.expanduser(\"~/.pg_service.conf\")\n    if not service or not os.path.exists(service_file):\n        # nothing to do\n        return None, service_file\n    with open(service_file, newline=\"\") as f:\n",
                    "rendered": {
                      "text": "            service_file = os.path.join(os.getenv(\"PGSYSCONFDIR\"), \".pg_service.conf\")\n        else:\n            service_file = os.path.expanduser(\"~/.pg_service.conf\")\n    if not service or not os.path.exists(service_file):\n        # nothing to do\n        return None, service_file\n    with open(service_file, newline=\"\") as f:\n",
                      "markdown": "`            service_file = os.path.join(os.getenv(\"PGSYSCONFDIR\"), \".pg_service.conf\")\n        else:\n            service_file = os.path.expanduser(\"~/.pg_service.conf\")\n    if not service or not os.path.exists(service_file):\n        # nothing to do\n        return None, service_file\n    with open(service_file, newline=\"\") as f:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1880,
                  "startColumn": 13,
                  "endLine": 1880,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\ndef parse_service_info(service):\n    service = service or os.getenv(\"PGSERVICE\")\n    service_file = os.getenv(\"PGSERVICEFILE\")\n    if not service_file:\n        # try ~/.pg_service.conf (if that exists)\n",
                    "rendered": {
                      "text": "\n\ndef parse_service_info(service):\n    service = service or os.getenv(\"PGSERVICE\")\n    service_file = os.getenv(\"PGSERVICEFILE\")\n    if not service_file:\n        # try ~/.pg_service.conf (if that exists)\n",
                      "markdown": "`\n\ndef parse_service_info(service):\n    service = service or os.getenv(\"PGSERVICE\")\n    service_file = os.getenv(\"PGSERVICEFILE\")\n    if not service_file:\n        # try ~/.pg_service.conf (if that exists)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1880,
                  "startColumn": 3,
                  "endLine": 1880,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n\ndef parse_service_info(service):\n    service = service or os.getenv(\"PGSERVICE\")\n    service_file = os.getenv(\"PGSERVICEFILE\")\n    if not service_file:\n        # try ~/.pg_service.conf (if that exists)\n",
                    "rendered": {
                      "text": "\n\ndef parse_service_info(service):\n    service = service or os.getenv(\"PGSERVICE\")\n    service_file = os.getenv(\"PGSERVICEFILE\")\n    if not service_file:\n        # try ~/.pg_service.conf (if that exists)\n",
                      "markdown": "`\n\ndef parse_service_info(service):\n    service = service or os.getenv(\"PGSERVICE\")\n    service_file = os.getenv(\"PGSERVICEFILE\")\n    if not service_file:\n        # try ~/.pg_service.conf (if that exists)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1614,
                  "startColumn": 8,
                  "endLine": 1614,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        pgcli.connect_uri(database)\n    elif \"=\" in database and service is None:\n        pgcli.connect_dsn(database, user=user)\n    elif service is not None:\n        pgcli.connect_service(service, user)\n    else:\n        pgcli.connect(database, host, user, port)\n",
                    "rendered": {
                      "text": "        pgcli.connect_uri(database)\n    elif \"=\" in database and service is None:\n        pgcli.connect_dsn(database, user=user)\n    elif service is not None:\n        pgcli.connect_service(service, user)\n    else:\n        pgcli.connect(database, host, user, port)\n",
                      "markdown": "`        pgcli.connect_uri(database)\n    elif \"=\" in database and service is None:\n        pgcli.connect_dsn(database, user=user)\n    elif service is not None:\n        pgcli.connect_service(service, user)\n    else:\n        pgcli.connect(database, host, user, port)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1612,
                  "startColumn": 28,
                  "endLine": 1612,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        pgcli.dsn_alias = dsn\n    elif \"://\" in database:\n        pgcli.connect_uri(database)\n    elif \"=\" in database and service is None:\n        pgcli.connect_dsn(database, user=user)\n    elif service is not None:\n        pgcli.connect_service(service, user)\n",
                    "rendered": {
                      "text": "        pgcli.dsn_alias = dsn\n    elif \"://\" in database:\n        pgcli.connect_uri(database)\n    elif \"=\" in database and service is None:\n        pgcli.connect_dsn(database, user=user)\n    elif service is not None:\n        pgcli.connect_service(service, user)\n",
                      "markdown": "`        pgcli.dsn_alias = dsn\n    elif \"://\" in database:\n        pgcli.connect_uri(database)\n    elif \"=\" in database and service is None:\n        pgcli.connect_dsn(database, user=user)\n    elif service is not None:\n        pgcli.connect_service(service, user)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1594,
                  "startColumn": 27,
                  "endLine": 1594,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            dsn_config = cfg[\"alias_dsn\"][dsn]\n        except KeyError:\n            click.secho(\n                f\"Could not find a DSN with alias {dsn}. \"\n                'Please check the \"[alias_dsn]\" section in pgclirc.',\n                err=True,\n                fg=\"red\",\n",
                    "rendered": {
                      "text": "            dsn_config = cfg[\"alias_dsn\"][dsn]\n        except KeyError:\n            click.secho(\n                f\"Could not find a DSN with alias {dsn}. \"\n                'Please check the \"[alias_dsn]\" section in pgclirc.',\n                err=True,\n                fg=\"red\",\n",
                      "markdown": "`            dsn_config = cfg[\"alias_dsn\"][dsn]\n        except KeyError:\n            click.secho(\n                f\"Could not find a DSN with alias {dsn}. \"\n                'Please check the \"[alias_dsn]\" section in pgclirc.',\n                err=True,\n                fg=\"red\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1583,
                  "startColumn": 7,
                  "endLine": 1583,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    if database.startswith(\"service=\"):\n        service = database[8:]\n    elif os.getenv(\"PGSERVICE\") is not None:\n        service = os.getenv(\"PGSERVICE\")\n    # because option --list or -l are not supposed to have a db name\n    if list_databases:\n        database = \"postgres\"\n",
                    "rendered": {
                      "text": "    if database.startswith(\"service=\"):\n        service = database[8:]\n    elif os.getenv(\"PGSERVICE\") is not None:\n        service = os.getenv(\"PGSERVICE\")\n    # because option --list or -l are not supposed to have a db name\n    if list_databases:\n        database = \"postgres\"\n",
                      "markdown": "`    if database.startswith(\"service=\"):\n        service = database[8:]\n    elif os.getenv(\"PGSERVICE\") is not None:\n        service = os.getenv(\"PGSERVICE\")\n    # because option --list or -l are not supposed to have a db name\n    if list_databases:\n        database = \"postgres\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1581,
                  "startColumn": 7,
                  "endLine": 1581,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    user = username_opt or username\n    service = None\n    if database.startswith(\"service=\"):\n        service = database[8:]\n    elif os.getenv(\"PGSERVICE\") is not None:\n        service = os.getenv(\"PGSERVICE\")\n    # because option --list or -l are not supposed to have a db name\n",
                    "rendered": {
                      "text": "    user = username_opt or username\n    service = None\n    if database.startswith(\"service=\"):\n        service = database[8:]\n    elif os.getenv(\"PGSERVICE\") is not None:\n        service = os.getenv(\"PGSERVICE\")\n    # because option --list or -l are not supposed to have a db name\n",
                      "markdown": "`    user = username_opt or username\n    service = None\n    if database.startswith(\"service=\"):\n        service = database[8:]\n    elif os.getenv(\"PGSERVICE\") is not None:\n        service = os.getenv(\"PGSERVICE\")\n    # because option --list or -l are not supposed to have a db name\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1579,
                  "startColumn": 3,
                  "endLine": 1579,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        username = dbname\n    database = dbname_opt or dbname or \"\"\n    user = username_opt or username\n    service = None\n    if database.startswith(\"service=\"):\n        service = database[8:]\n    elif os.getenv(\"PGSERVICE\") is not None:\n",
                    "rendered": {
                      "text": "        username = dbname\n    database = dbname_opt or dbname or \"\"\n    user = username_opt or username\n    service = None\n    if database.startswith(\"service=\"):\n        service = database[8:]\n    elif os.getenv(\"PGSERVICE\") is not None:\n",
                      "markdown": "`        username = dbname\n    database = dbname_opt or dbname or \"\"\n    user = username_opt or username\n    service = None\n    if database.startswith(\"service=\"):\n        service = database[8:]\n    elif os.getenv(\"PGSERVICE\") is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1551,
                  "startColumn": 81,
                  "endLine": 1551,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    if ssh_tunnel and not SSH_TUNNEL_SUPPORT:\n        click.secho(\n            'Cannot open SSH tunnel, \"sshtunnel\" package was not found. '\n            \"Please install pgcli with `pip install pgcli[sshtunnel]` if you want SSH tunnel support.\",\n            err=True,\n            fg=\"red\",\n        )\n",
                    "rendered": {
                      "text": "    if ssh_tunnel and not SSH_TUNNEL_SUPPORT:\n        click.secho(\n            'Cannot open SSH tunnel, \"sshtunnel\" package was not found. '\n            \"Please install pgcli with `pip install pgcli[sshtunnel]` if you want SSH tunnel support.\",\n            err=True,\n            fg=\"red\",\n        )\n",
                      "markdown": "`    if ssh_tunnel and not SSH_TUNNEL_SUPPORT:\n        click.secho(\n            'Cannot open SSH tunnel, \"sshtunnel\" package was not found. '\n            \"Please install pgcli with `pip install pgcli[sshtunnel]` if you want SSH tunnel support.\",\n            err=True,\n            fg=\"red\",\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1550,
                  "startColumn": 24,
                  "endLine": 1550,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    if ssh_tunnel and not SSH_TUNNEL_SUPPORT:\n        click.secho(\n            'Cannot open SSH tunnel, \"sshtunnel\" package was not found. '\n            \"Please install pgcli with `pip install pgcli[sshtunnel]` if you want SSH tunnel support.\",\n            err=True,\n            fg=\"red\",\n",
                    "rendered": {
                      "text": "\n    if ssh_tunnel and not SSH_TUNNEL_SUPPORT:\n        click.secho(\n            'Cannot open SSH tunnel, \"sshtunnel\" package was not found. '\n            \"Please install pgcli with `pip install pgcli[sshtunnel]` if you want SSH tunnel support.\",\n            err=True,\n            fg=\"red\",\n",
                      "markdown": "`\n    if ssh_tunnel and not SSH_TUNNEL_SUPPORT:\n        click.secho(\n            'Cannot open SSH tunnel, \"sshtunnel\" package was not found. '\n            \"Please install pgcli with `pip install pgcli[sshtunnel]` if you want SSH tunnel support.\",\n            err=True,\n            fg=\"red\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 1479,
                  "startColumn": 17,
                  "endLine": 1479,
                  "endColumn": 22,
                  "snippet": {
                    "text": "@click.option(\n    \"--ssh-tunnel\",\n    default=None,\n    help=\"Open an SSH tunnel to the given address and connect to the database from it.\",\n)\n@click.option(\n    \"--log-file\",\n",
                    "rendered": {
                      "text": "@click.option(\n    \"--ssh-tunnel\",\n    default=None,\n    help=\"Open an SSH tunnel to the given address and connect to the database from it.\",\n)\n@click.option(\n    \"--log-file\",\n",
                      "markdown": "`@click.option(\n    \"--ssh-tunnel\",\n    default=None,\n    help=\"Open an SSH tunnel to the given address and connect to the database from it.\",\n)\n@click.option(\n    \"--log-file\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 895,
                  "startColumn": 36,
                  "endLine": 895,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                pass\n\n            if self.pgspecial.timing_enabled:\n                # Only add humanized time display if > 1 second\n                if query.total_time > 1:\n                    print(\n                        \"Time: %0.03fs (%s), executed in: %0.03fs (%s)\"\n",
                    "rendered": {
                      "text": "                pass\n\n            if self.pgspecial.timing_enabled:\n                # Only add humanized time display if > 1 second\n                if query.total_time > 1:\n                    print(\n                        \"Time: %0.03fs (%s), executed in: %0.03fs (%s)\"\n",
                      "markdown": "`                pass\n\n            if self.pgspecial.timing_enabled:\n                # Only add humanized time display if > 1 second\n                if query.total_time > 1:\n                    print(\n                        \"Time: %0.03fs (%s), executed in: %0.03fs (%s)\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 687,
                  "startColumn": 53,
                  "endLine": 687,
                  "endColumn": 59,
                  "snippet": {
                    "text": "                    break\n\n        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n",
                    "rendered": {
                      "text": "                    break\n\n        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n",
                      "markdown": "`                    break\n\n        if self.ssh_tunnel_url:\n            # We add the protocol as urlparse doesn't find it by itself\n            if \"://\" not in self.ssh_tunnel_url:\n                self.ssh_tunnel_url = f\"ssh://{self.ssh_tunnel_url}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 24,
                  "endLine": 647,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n        # no-password exception.\n        # If we successfully parsed a password from a URI, there's no need to\n        # prompt for it, even with the -W flag\n",
                    "rendered": {
                      "text": "            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n        # no-password exception.\n        # If we successfully parsed a password from a URI, there's no need to\n        # prompt for it, even with the -W flag\n",
                      "markdown": "`            passwd = os.environ.get(\"PGPASSWORD\", \"\")\n\n        # Prompt for a password immediately if requested via the -W flag. This\n        # avoids wasting time trying to connect to the database and catching a\n        # no-password exception.\n        # If we successfully parsed a password from a URI, there's no need to\n        # prompt for it, even with the -W flag\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 28,
                  "endLine": 102,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        \"query\",  # The entire text of the command\n        \"successful\",  # True If all subqueries were successful\n        \"total_time\",  # Time elapsed executing the query and formatting results\n        \"execution_time\",  # Time elapsed executing the query\n        \"meta_changed\",  # True if any subquery executed create/alter/drop\n        \"db_changed\",  # True if any subquery changed the database\n        \"path_changed\",  # True if any subquery changed the search path\n",
                    "rendered": {
                      "text": "        \"query\",  # The entire text of the command\n        \"successful\",  # True If all subqueries were successful\n        \"total_time\",  # Time elapsed executing the query and formatting results\n        \"execution_time\",  # Time elapsed executing the query\n        \"meta_changed\",  # True if any subquery executed create/alter/drop\n        \"db_changed\",  # True if any subquery changed the database\n        \"path_changed\",  # True if any subquery changed the search path\n",
                      "markdown": "`        \"query\",  # The entire text of the command\n        \"successful\",  # True If all subqueries were successful\n        \"total_time\",  # Time elapsed executing the query and formatting results\n        \"execution_time\",  # Time elapsed executing the query\n        \"meta_changed\",  # True if any subquery executed create/alter/drop\n        \"db_changed\",  # True if any subquery changed the database\n        \"path_changed\",  # True if any subquery changed the search path\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 24,
                  "endLine": 101,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    [\n        \"query\",  # The entire text of the command\n        \"successful\",  # True If all subqueries were successful\n        \"total_time\",  # Time elapsed executing the query and formatting results\n        \"execution_time\",  # Time elapsed executing the query\n        \"meta_changed\",  # True if any subquery executed create/alter/drop\n        \"db_changed\",  # True if any subquery changed the database\n",
                    "rendered": {
                      "text": "    [\n        \"query\",  # The entire text of the command\n        \"successful\",  # True If all subqueries were successful\n        \"total_time\",  # Time elapsed executing the query and formatting results\n        \"execution_time\",  # Time elapsed executing the query\n        \"meta_changed\",  # True if any subquery executed create/alter/drop\n        \"db_changed\",  # True if any subquery changed the database\n",
                      "markdown": "`    [\n        \"query\",  # The entire text of the command\n        \"successful\",  # True If all subqueries were successful\n        \"total_time\",  # Time elapsed executing the query and formatting results\n        \"execution_time\",  # Time elapsed executing the query\n        \"meta_changed\",  # True if any subquery executed create/alter/drop\n        \"db_changed\",  # True if any subquery changed the database\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/main.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 4,
                  "endLine": 18,
                  "endColumn": 10,
                  "snippet": {
                    "text": "import itertools\nimport pathlib\nimport platform\nfrom time import time, sleep\nfrom typing import Optional\n\nfrom cli_helpers.tabular_output import TabularOutputFormatter\n",
                    "rendered": {
                      "text": "import itertools\nimport pathlib\nimport platform\nfrom time import time, sleep\nfrom typing import Optional\n\nfrom cli_helpers.tabular_output import TabularOutputFormatter\n",
                      "markdown": "`import itertools\nimport pathlib\nimport platform\nfrom time import time, sleep\nfrom typing import Optional\n\nfrom cli_helpers.tabular_output import TabularOutputFormatter\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/parseutils/utils.py"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 13,
                  "endLine": 85,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        if t.value == \"(\" or (\n            t.is_keyword and (t.value.upper() not in logical_operators)\n        ):\n            # Find the location of token t in the original parsed statement\n            # We can't use parsed.token_index(t) because t may be a child token\n            # inside a TokenList, in which case token_index throws an error\n            # Minimal example:\n",
                    "rendered": {
                      "text": "        if t.value == \"(\" or (\n            t.is_keyword and (t.value.upper() not in logical_operators)\n        ):\n            # Find the location of token t in the original parsed statement\n            # We can't use parsed.token_index(t) because t may be a child token\n            # inside a TokenList, in which case token_index throws an error\n            # Minimal example:\n",
                      "markdown": "`        if t.value == \"(\" or (\n            t.is_keyword and (t.value.upper() not in logical_operators)\n        ):\n            # Find the location of token t in the original parsed statement\n            # We can't use parsed.token_index(t) because t may be a child token\n            # inside a TokenList, in which case token_index throws an error\n            # Minimal example:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/parseutils/utils.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 3,
                  "endLine": 20,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\ndef last_word(text, include=\"alphanum_underscore\"):\n    r\"\"\"\n    Find the last word in a sentence.\n\n    >>> last_word('abc')\n    'abc'\n",
                    "rendered": {
                      "text": "\ndef last_word(text, include=\"alphanum_underscore\"):\n    r\"\"\"\n    Find the last word in a sentence.\n\n    >>> last_word('abc')\n    'abc'\n",
                      "markdown": "`\ndef last_word(text, include=\"alphanum_underscore\"):\n    r\"\"\"\n    Find the last word in a sentence.\n\n    >>> last_word('abc')\n    'abc'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 36,
                  "endLine": 235,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# Here's where you can provide a list of connection string aliases.\n# You can use it by passing the -D option. `pgcli -D example_dsn`\n[alias_dsn]\n# example_dsn = postgresql://[user[:password]@][netloc][:port][/dbname]\n\n# Format for number representation\n# for decimal \"d\" - 12345678, \",d\" - 12,345,678\n",
                    "rendered": {
                      "text": "# Here's where you can provide a list of connection string aliases.\n# You can use it by passing the -D option. `pgcli -D example_dsn`\n[alias_dsn]\n# example_dsn = postgresql://[user[:password]@][netloc][:port][/dbname]\n\n# Format for number representation\n# for decimal \"d\" - 12345678, \",d\" - 12,345,678\n",
                      "markdown": "`# Here's where you can provide a list of connection string aliases.\n# You can use it by passing the -D option. `pgcli -D example_dsn`\n[alias_dsn]\n# example_dsn = postgresql://[user[:password]@][netloc][:port][/dbname]\n\n# Format for number representation\n# for decimal \"d\" - 12345678, \",d\" - 12,345,678\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 45,
                  "endLine": 191,
                  "endColumn": 53,
                  "snippet": {
                    "text": "# manage pager on startup\nenable_pager = True\n\n# Use keyring to automatically save and load password in a secure manner\nkeyring = True\n\n# Custom colors for the completion menu, toolbar, etc.\n",
                    "rendered": {
                      "text": "# manage pager on startup\nenable_pager = True\n\n# Use keyring to automatically save and load password in a secure manner\nkeyring = True\n\n# Custom colors for the completion menu, toolbar, etc.\n",
                      "markdown": "`# manage pager on startup\nenable_pager = True\n\n# Use keyring to automatically save and load password in a secure manner\nkeyring = True\n\n# Custom colors for the completion menu, toolbar, etc.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 13,
                  "endLine": 167,
                  "endColumn": 21,
                  "snippet": {
                    "text": "# Postgres prompt\n# \\t - Current date and time\n# \\u - Username\n# \\h - Short hostname of the server (up to first '.')\n# \\H - Hostname of the server\n# \\d - Database name\n# \\p - Database port\n",
                    "rendered": {
                      "text": "# Postgres prompt\n# \\t - Current date and time\n# \\u - Username\n# \\h - Short hostname of the server (up to first '.')\n# \\H - Hostname of the server\n# \\d - Database name\n# \\p - Database port\n",
                      "markdown": "`# Postgres prompt\n# \\t - Current date and time\n# \\u - Username\n# \\h - Short hostname of the server (up to first '.')\n# \\H - Hostname of the server\n# \\d - Database name\n# \\p - Database port\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 58,
                  "endLine": 119,
                  "endColumn": 62,
                  "snippet": {
                    "text": "# Timing of sql statements and table rendering.\ntiming = True\n\n# Show/hide the informational toolbar with function keymap at the footer.\nshow_bottom_toolbar = True\n\n# Table format. Possible values: psql, plain, simple, grid, fancy_grid, pipe,\n",
                    "rendered": {
                      "text": "# Timing of sql statements and table rendering.\ntiming = True\n\n# Show/hide the informational toolbar with function keymap at the footer.\nshow_bottom_toolbar = True\n\n# Table format. Possible values: psql, plain, simple, grid, fancy_grid, pipe,\n",
                      "markdown": "`# Timing of sql statements and table rendering.\ntiming = True\n\n# Show/hide the informational toolbar with function keymap at the footer.\nshow_bottom_toolbar = True\n\n# Table format. Possible values: psql, plain, simple, grid, fancy_grid, pipe,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 14,
                  "endLine": 50,
                  "endColumn": 22,
                  "snippet": {
                    "text": "# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\nauto_expand = False\n\n# Auto-retry queries on connection failures and other operational errors. If\n",
                    "rendered": {
                      "text": "# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\nauto_expand = False\n\n# Auto-retry queries on connection failures and other operational errors. If\n",
                      "markdown": "`# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\nauto_expand = False\n\n# Auto-retry queries on connection failures and other operational errors. If\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 56,
                  "endLine": 48,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# destructive statements are not executed when outside of a transaction.\ndestructive_statements_require_transaction = False\n\n# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\nauto_expand = False\n",
                    "rendered": {
                      "text": "# destructive statements are not executed when outside of a transaction.\ndestructive_statements_require_transaction = False\n\n# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\nauto_expand = False\n",
                      "markdown": "`# destructive statements are not executed when outside of a transaction.\ndestructive_statements_require_transaction = False\n\n# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\nauto_expand = False\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "endLine": 47,
                  "endColumn": 17,
                  "snippet": {
                    "text": "# destructive statements are not executed when outside of a transaction.\ndestructive_statements_require_transaction = False\n\n# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\n",
                    "rendered": {
                      "text": "# destructive statements are not executed when outside of a transaction.\ndestructive_statements_require_transaction = False\n\n# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\n",
                      "markdown": "`# destructive statements are not executed when outside of a transaction.\ndestructive_statements_require_transaction = False\n\n# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 41,
                  "endLine": 33,
                  "endColumn": 49,
                  "snippet": {
                    "text": "# that may cause harm to the database such as \"drop table\", \"drop database\",\n# \"shutdown\", \"delete\", or \"update\".\n# You can pass a list of destructive commands or leave it empty if you want to skip all warnings.\n# \"unconditional_update\" will warn you of update statements that don't have a where clause\ndestructive_warning = drop, shutdown, delete, truncate, alter, update, unconditional_update\n\n# When `destructive_warning` is on and the user declines to proceed with a\n",
                    "rendered": {
                      "text": "# that may cause harm to the database such as \"drop table\", \"drop database\",\n# \"shutdown\", \"delete\", or \"update\".\n# You can pass a list of destructive commands or leave it empty if you want to skip all warnings.\n# \"unconditional_update\" will warn you of update statements that don't have a where clause\ndestructive_warning = drop, shutdown, delete, truncate, alter, update, unconditional_update\n\n# When `destructive_warning` is on and the user declines to proceed with a\n",
                      "markdown": "`# that may cause harm to the database such as \"drop table\", \"drop database\",\n# \"shutdown\", \"delete\", or \"update\".\n# You can pass a list of destructive commands or leave it empty if you want to skip all warnings.\n# \"unconditional_update\" will warn you of update statements that don't have a where clause\ndestructive_warning = drop, shutdown, delete, truncate, alter, update, unconditional_update\n\n# When `destructive_warning` is on and the user declines to proceed with a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 23,
                  "endLine": 166,
                  "snippet": {
                    "text": "verbose_errors = False\n\n# Postgres prompt\n# \\t - Current date and time\n# \\u - Username\n# \\h - Short hostname of the server (up to first '.')\n# \\H - Hostname of the server\n# \\d - Database name\n",
                    "rendered": {
                      "text": "verbose_errors = False\n\n# Postgres prompt\n# \\t - Current date and time\n# \\u - Username\n# \\h - Short hostname of the server (up to first '.')\n# \\H - Hostname of the server\n# \\d - Database name\n",
                      "markdown": "`verbose_errors = False\n\n# Postgres prompt\n# \\t - Current date and time\n# \\u - Username\n# \\h - Short hostname of the server (up to first '.')\n# \\H - Hostname of the server\n# \\d - Database name\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 36,
                  "endLine": 139,
                  "endColumn": 3,
                  "snippet": {
                    "text": "# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n\n# Error handling\n# When one of multiple SQL statements causes an error, choose to either\n",
                    "rendered": {
                      "text": "# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n\n# Error handling\n# When one of multiple SQL statements causes an error, choose to either\n",
                      "markdown": "`# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n\n# Error handling\n# When one of multiple SQL statements causes an error, choose to either\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 26,
                  "endLine": 137,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n\n",
                    "rendered": {
                      "text": "\n# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n\n",
                      "markdown": "`\n# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 6,
                  "endLine": 137,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n\n",
                    "rendered": {
                      "text": "\n# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n\n",
                      "markdown": "`\n# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 71,
                  "endLine": 136,
                  "endColumn": 75,
                  "snippet": {
                    "text": "syntax_style = default\n\n# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n",
                    "rendered": {
                      "text": "syntax_style = default\n\n# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n",
                      "markdown": "`syntax_style = default\n\n# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 6,
                  "endLine": 136,
                  "endColumn": 10,
                  "snippet": {
                    "text": "syntax_style = default\n\n# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n",
                    "rendered": {
                      "text": "syntax_style = default\n\n# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n",
                      "markdown": "`syntax_style = default\n\n# Keybindings:\n# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.\n# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E\n# for end are available in the REPL.\nvi = False\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 14,
                  "endLine": 50,
                  "endColumn": 22,
                  "snippet": {
                    "text": "# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\nauto_expand = False\n\n# Auto-retry queries on connection failures and other operational errors. If\n",
                    "rendered": {
                      "text": "# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\nauto_expand = False\n\n# Auto-retry queries on connection failures and other operational errors. If\n",
                      "markdown": "`# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\nauto_expand = False\n\n# Auto-retry queries on connection failures and other operational errors. If\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 56,
                  "endLine": 48,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# destructive statements are not executed when outside of a transaction.\ndestructive_statements_require_transaction = False\n\n# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\nauto_expand = False\n",
                    "rendered": {
                      "text": "# destructive statements are not executed when outside of a transaction.\ndestructive_statements_require_transaction = False\n\n# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\nauto_expand = False\n",
                      "markdown": "`# destructive statements are not executed when outside of a transaction.\ndestructive_statements_require_transaction = False\n\n# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\nauto_expand = False\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgclirc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "endLine": 47,
                  "endColumn": 17,
                  "snippet": {
                    "text": "# destructive statements are not executed when outside of a transaction.\ndestructive_statements_require_transaction = False\n\n# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\n",
                    "rendered": {
                      "text": "# destructive statements are not executed when outside of a transaction.\ndestructive_statements_require_transaction = False\n\n# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\n",
                      "markdown": "`# destructive statements are not executed when outside of a transaction.\ndestructive_statements_require_transaction = False\n\n# Enables expand mode, which is similar to `\\x` in psql.\nexpand = False\n\n# Enables auto expand mode, which is similar to `\\x auto` in psql.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgbuffer.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 43,
                  "endLine": 57,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            or _is_complete(text)  # A complete SQL command\n            or (text == \"exit\")  # Exit doesn't need semi-colon\n            or (text == \"quit\")  # Quit doesn't need semi-colon\n            or (text == \":q\")  # To all the vim fans out there\n            or (text == \"\")  # Just a plain enter without any text\n        )\n\n",
                    "rendered": {
                      "text": "            or _is_complete(text)  # A complete SQL command\n            or (text == \"exit\")  # Exit doesn't need semi-colon\n            or (text == \"quit\")  # Quit doesn't need semi-colon\n            or (text == \":q\")  # To all the vim fans out there\n            or (text == \"\")  # Just a plain enter without any text\n        )\n\n",
                      "markdown": "`            or _is_complete(text)  # A complete SQL command\n            or (text == \"exit\")  # Exit doesn't need semi-colon\n            or (text == \"quit\")  # Quit doesn't need semi-colon\n            or (text == \":q\")  # To all the vim fans out there\n            or (text == \"\")  # Just a plain enter without any text\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/magic.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 40,
                  "endLine": 26,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    # \"get\" was renamed to \"set\" in ipython-sql:\n    # https://github.com/catherinedevlin/ipython-sql/commit/f4283c65aaf68f961e84019e8b939e4a3c501d43\n    if hasattr(sql.connection.Connection, \"get\"):\n        conn = sql.connection.Connection.get(parsed[\"connection\"])\n    else:\n        try:\n            conn = sql.connection.Connection.set(parsed[\"connection\"])\n",
                    "rendered": {
                      "text": "    # \"get\" was renamed to \"set\" in ipython-sql:\n    # https://github.com/catherinedevlin/ipython-sql/commit/f4283c65aaf68f961e84019e8b939e4a3c501d43\n    if hasattr(sql.connection.Connection, \"get\"):\n        conn = sql.connection.Connection.get(parsed[\"connection\"])\n    else:\n        try:\n            conn = sql.connection.Connection.set(parsed[\"connection\"])\n",
                      "markdown": "`    # \"get\" was renamed to \"set\" in ipython-sql:\n    # https://github.com/catherinedevlin/ipython-sql/commit/f4283c65aaf68f961e84019e8b939e4a3c501d43\n    if hasattr(sql.connection.Connection, \"get\"):\n        conn = sql.connection.Connection.get(parsed[\"connection\"])\n    else:\n        try:\n            conn = sql.connection.Connection.set(parsed[\"connection\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/sqlcompletion.py"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 6,
                  "endLine": 286,
                  "endColumn": 11,
                  "snippet": {
                    "text": "                return (Schema(), Function(schema=None, usage=\"special\"))\n            return (Schema(), rel_type(schema=None))\n\n    if cmd in [\"\\\\n\", \"\\\\ns\", \"\\\\nd\"]:\n        return (NamedQuery(),)\n\n    return (Keyword(), Special())\n",
                    "rendered": {
                      "text": "                return (Schema(), Function(schema=None, usage=\"special\"))\n            return (Schema(), rel_type(schema=None))\n\n    if cmd in [\"\\\\n\", \"\\\\ns\", \"\\\\nd\"]:\n        return (NamedQuery(),)\n\n    return (Keyword(), Special())\n",
                      "markdown": "`                return (Schema(), Function(schema=None, usage=\"special\"))\n            return (Schema(), rel_type(schema=None))\n\n    if cmd in [\"\\\\n\", \"\\\\ns\", \"\\\\nd\"]:\n        return (NamedQuery(),)\n\n    return (Keyword(), Special())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/sqlcompletion.py"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 6,
                  "endLine": 254,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    if cmd == \"\\\\T\":\n        return (TableFormat(),)\n\n    if cmd == \"\\\\dn\":\n        return (Schema(),)\n\n    if arg:\n",
                    "rendered": {
                      "text": "    if cmd == \"\\\\T\":\n        return (TableFormat(),)\n\n    if cmd == \"\\\\dn\":\n        return (Schema(),)\n\n    if arg:\n",
                      "markdown": "`    if cmd == \"\\\\T\":\n        return (TableFormat(),)\n\n    if cmd == \"\\\\dn\":\n        return (Schema(),)\n\n    if arg:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/sqlcompletion.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 6,
                  "endLine": 251,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    if cmd in (\"\\\\c\", \"\\\\connect\"):\n        return (Database(),)\n\n    if cmd == \"\\\\T\":\n        return (TableFormat(),)\n\n    if cmd == \"\\\\dn\":\n",
                    "rendered": {
                      "text": "    if cmd in (\"\\\\c\", \"\\\\connect\"):\n        return (Database(),)\n\n    if cmd == \"\\\\T\":\n        return (TableFormat(),)\n\n    if cmd == \"\\\\dn\":\n",
                      "markdown": "`    if cmd in (\"\\\\c\", \"\\\\connect\"):\n        return (Database(),)\n\n    if cmd == \"\\\\T\":\n        return (TableFormat(),)\n\n    if cmd == \"\\\\dn\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/sqlcompletion.py"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 6,
                  "endLine": 248,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        # Trying to complete the special command itself\n        return (Special(),)\n\n    if cmd in (\"\\\\c\", \"\\\\connect\"):\n        return (Database(),)\n\n    if cmd == \"\\\\T\":\n",
                    "rendered": {
                      "text": "        # Trying to complete the special command itself\n        return (Special(),)\n\n    if cmd in (\"\\\\c\", \"\\\\connect\"):\n        return (Database(),)\n\n    if cmd == \"\\\\T\":\n",
                      "markdown": "`        # Trying to complete the special command itself\n        return (Special(),)\n\n    if cmd in (\"\\\\c\", \"\\\\connect\"):\n        return (Database(),)\n\n    if cmd == \"\\\\T\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/sqlcompletion.py"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 6,
                  "endLine": 244,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    text = text.lstrip()\n    cmd, _, arg = parse_special_command(text)\n\n    if cmd == text:\n        # Trying to complete the special command itself\n        return (Special(),)\n\n",
                    "rendered": {
                      "text": "    text = text.lstrip()\n    cmd, _, arg = parse_special_command(text)\n\n    if cmd == text:\n        # Trying to complete the special command itself\n        return (Special(),)\n\n",
                      "markdown": "`    text = text.lstrip()\n    cmd, _, arg = parse_special_command(text)\n\n    if cmd == text:\n        # Trying to complete the special command itself\n        return (Special(),)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/sqlcompletion.py"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 44,
                  "endLine": 522,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        return (Keyword(token_v.upper()),)\n    elif token.is_keyword:\n        # token is a keyword we haven't implemented any special handling for\n        # go backwards in the query until we find one we do recognize\n        prev_keyword = stmt.reduce_to_prev_keyword(n_skip=1)\n        if prev_keyword:\n            return suggest_based_on_last_token(prev_keyword, stmt)\n",
                    "rendered": {
                      "text": "        return (Keyword(token_v.upper()),)\n    elif token.is_keyword:\n        # token is a keyword we haven't implemented any special handling for\n        # go backwards in the query until we find one we do recognize\n        prev_keyword = stmt.reduce_to_prev_keyword(n_skip=1)\n        if prev_keyword:\n            return suggest_based_on_last_token(prev_keyword, stmt)\n",
                      "markdown": "`        return (Keyword(token_v.upper()),)\n    elif token.is_keyword:\n        # token is a keyword we haven't implemented any special handling for\n        # go backwards in the query until we find one we do recognize\n        prev_keyword = stmt.reduce_to_prev_keyword(n_skip=1)\n        if prev_keyword:\n            return suggest_based_on_last_token(prev_keyword, stmt)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/sqlcompletion.py"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 51,
                  "endLine": 197,
                  "endColumn": 57,
                  "snippet": {
                    "text": "def _split_multiple_statements(full_text, text_before_cursor, parsed):\n    if len(parsed) > 1:\n        # Multiple statements being edited -- isolate the current one by\n        # cumulatively summing statement lengths to find the one that bounds\n        # the current position\n        current_pos = len(text_before_cursor)\n        stmt_start, stmt_end = 0, 0\n",
                    "rendered": {
                      "text": "def _split_multiple_statements(full_text, text_before_cursor, parsed):\n    if len(parsed) > 1:\n        # Multiple statements being edited -- isolate the current one by\n        # cumulatively summing statement lengths to find the one that bounds\n        # the current position\n        current_pos = len(text_before_cursor)\n        stmt_start, stmt_end = 0, 0\n",
                      "markdown": "`def _split_multiple_statements(full_text, text_before_cursor, parsed):\n    if len(parsed) > 1:\n        # Multiple statements being edited -- isolate the current one by\n        # cumulatively summing statement lengths to find the one that bounds\n        # the current position\n        current_pos = len(text_before_cursor)\n        stmt_start, stmt_end = 0, 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/auth.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 46,
                  "endLine": 57,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        keyring.set_password(\"pgcli\", key, passwd)\n    except Exception as e:\n        click.secho(\n            keyring_error_message.format(\"Set password in keyring returned:\", str(e)),\n            err=True,\n            fg=\"red\",\n        )\n",
                    "rendered": {
                      "text": "        keyring.set_password(\"pgcli\", key, passwd)\n    except Exception as e:\n        click.secho(\n            keyring_error_message.format(\"Set password in keyring returned:\", str(e)),\n            err=True,\n            fg=\"red\",\n        )\n",
                      "markdown": "`        keyring.set_password(\"pgcli\", key, passwd)\n    except Exception as e:\n        click.secho(\n            keyring_error_message.format(\"Set password in keyring returned:\", str(e)),\n            err=True,\n            fg=\"red\",\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/auth.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 20,
                  "endLine": 54,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\ndef keyring_set_password(key, passwd):\n    try:\n        keyring.set_password(\"pgcli\", key, passwd)\n    except Exception as e:\n        click.secho(\n            keyring_error_message.format(\"Set password in keyring returned:\", str(e)),\n",
                    "rendered": {
                      "text": "\ndef keyring_set_password(key, passwd):\n    try:\n        keyring.set_password(\"pgcli\", key, passwd)\n    except Exception as e:\n        click.secho(\n            keyring_error_message.format(\"Set password in keyring returned:\", str(e)),\n",
                      "markdown": "`\ndef keyring_set_password(key, passwd):\n    try:\n        keyring.set_password(\"pgcli\", key, passwd)\n    except Exception as e:\n        click.secho(\n            keyring_error_message.format(\"Set password in keyring returned:\", str(e)),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/auth.py"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 16,
                  "endLine": 52,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    return passwd\n\n\ndef keyring_set_password(key, passwd):\n    try:\n        keyring.set_password(\"pgcli\", key, passwd)\n    except Exception as e:\n",
                    "rendered": {
                      "text": "    return passwd\n\n\ndef keyring_set_password(key, passwd):\n    try:\n        keyring.set_password(\"pgcli\", key, passwd)\n    except Exception as e:\n",
                      "markdown": "`    return passwd\n\n\ndef keyring_set_password(key, passwd):\n    try:\n        keyring.set_password(\"pgcli\", key, passwd)\n    except Exception as e:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/auth.py"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 27,
                  "endLine": 44,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    except Exception as e:\n        click.secho(\n            keyring_error_message.format(\n                \"Load your password from keyring returned:\", str(e)\n            ),\n            err=True,\n            fg=\"red\",\n",
                    "rendered": {
                      "text": "    except Exception as e:\n        click.secho(\n            keyring_error_message.format(\n                \"Load your password from keyring returned:\", str(e)\n            ),\n            err=True,\n            fg=\"red\",\n",
                      "markdown": "`    except Exception as e:\n        click.secho(\n            keyring_error_message.format(\n                \"Load your password from keyring returned:\", str(e)\n            ),\n            err=True,\n            fg=\"red\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/auth.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 29,
                  "endLine": 40,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    # Find password from store\n    passwd = \"\"\n    try:\n        passwd = keyring.get_password(\"pgcli\", key) or \"\"\n    except Exception as e:\n        click.secho(\n            keyring_error_message.format(\n",
                    "rendered": {
                      "text": "    # Find password from store\n    passwd = \"\"\n    try:\n        passwd = keyring.get_password(\"pgcli\", key) or \"\"\n    except Exception as e:\n        click.secho(\n            keyring_error_message.format(\n",
                      "markdown": "`    # Find password from store\n    passwd = \"\"\n    try:\n        passwd = keyring.get_password(\"pgcli\", key) or \"\"\n    except Exception as e:\n        click.secho(\n            keyring_error_message.format(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/auth.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 11,
                  "endLine": 37,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\ndef keyring_get_password(key):\n    \"\"\"Attempt to get password from keyring\"\"\"\n    # Find password from store\n    passwd = \"\"\n    try:\n        passwd = keyring.get_password(\"pgcli\", key) or \"\"\n",
                    "rendered": {
                      "text": "\ndef keyring_get_password(key):\n    \"\"\"Attempt to get password from keyring\"\"\"\n    # Find password from store\n    passwd = \"\"\n    try:\n        passwd = keyring.get_password(\"pgcli\", key) or \"\"\n",
                      "markdown": "`\ndef keyring_get_password(key):\n    \"\"\"Attempt to get password from keyring\"\"\"\n    # Find password from store\n    passwd = \"\"\n    try:\n        passwd = keyring.get_password(\"pgcli\", key) or \"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/auth.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 22,
                  "endLine": 36,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n\ndef keyring_get_password(key):\n    \"\"\"Attempt to get password from keyring\"\"\"\n    # Find password from store\n    passwd = \"\"\n    try:\n",
                    "rendered": {
                      "text": "\n\ndef keyring_get_password(key):\n    \"\"\"Attempt to get password from keyring\"\"\"\n    # Find password from store\n    passwd = \"\"\n    try:\n",
                      "markdown": "`\n\ndef keyring_get_password(key):\n    \"\"\"Attempt to get password from keyring\"\"\"\n    # Find password from store\n    passwd = \"\"\n    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/auth.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 16,
                  "endLine": 35,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            logger.warning(\"import keyring failed: %r.\", e)\n\n\ndef keyring_get_password(key):\n    \"\"\"Attempt to get password from keyring\"\"\"\n    # Find password from store\n    passwd = \"\"\n",
                    "rendered": {
                      "text": "            logger.warning(\"import keyring failed: %r.\", e)\n\n\ndef keyring_get_password(key):\n    \"\"\"Attempt to get password from keyring\"\"\"\n    # Find password from store\n    passwd = \"\"\n",
                      "markdown": "`            logger.warning(\"import keyring failed: %r.\", e)\n\n\ndef keyring_get_password(key):\n    \"\"\"Attempt to get password from keyring\"\"\"\n    # Find password from store\n    passwd = \"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/auth.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "endLine": 37,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\ndef keyring_get_password(key):\n    \"\"\"Attempt to get password from keyring\"\"\"\n    # Find password from store\n    passwd = \"\"\n    try:\n        passwd = keyring.get_password(\"pgcli\", key) or \"\"\n",
                    "rendered": {
                      "text": "\ndef keyring_get_password(key):\n    \"\"\"Attempt to get password from keyring\"\"\"\n    # Find password from store\n    passwd = \"\"\n    try:\n        passwd = keyring.get_password(\"pgcli\", key) or \"\"\n",
                      "markdown": "`\ndef keyring_get_password(key):\n    \"\"\"Attempt to get password from keyring\"\"\"\n    # Find password from store\n    passwd = \"\"\n    try:\n        passwd = keyring.get_password(\"pgcli\", key) or \"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/auth.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 24,
                  "endLine": 14,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    {}\n    To remove this message do one of the following:\n    - prepare keyring as described at: https://keyring.readthedocs.io/en/stable/\n    - uninstall keyring: pip uninstall keyring\n    - disable keyring in our configuration: add keyring = False to [main]\"\"\"\n)\n\n",
                    "rendered": {
                      "text": "    {}\n    To remove this message do one of the following:\n    - prepare keyring as described at: https://keyring.readthedocs.io/en/stable/\n    - uninstall keyring: pip uninstall keyring\n    - disable keyring in our configuration: add keyring = False to [main]\"\"\"\n)\n\n",
                      "markdown": "`    {}\n    To remove this message do one of the following:\n    - prepare keyring as described at: https://keyring.readthedocs.io/en/stable/\n    - uninstall keyring: pip uninstall keyring\n    - disable keyring in our configuration: add keyring = False to [main]\"\"\"\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 35,
                  "endLine": 259,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n        self.password = password\n        self.extra_args = kwargs\n",
                    "rendered": {
                      "text": "            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n        self.password = password\n        self.extra_args = kwargs\n",
                      "markdown": "`            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n        self.password = password\n        self.extra_args = kwargs\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 35,
                  "endLine": 258,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        else:\n            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n        self.password = password\n",
                    "rendered": {
                      "text": "        else:\n            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n        self.password = password\n",
                      "markdown": "`        else:\n            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n        self.password = password\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 35,
                  "endLine": 257,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            self.port = dsn_parameters.get(\"port\")\n        else:\n            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n",
                    "rendered": {
                      "text": "            self.port = dsn_parameters.get(\"port\")\n        else:\n            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n",
                      "markdown": "`            self.port = dsn_parameters.get(\"port\")\n        else:\n            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 37,
                  "endLine": 256,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n        else:\n            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n",
                    "rendered": {
                      "text": "            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n        else:\n            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n",
                      "markdown": "`            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n        else:\n            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 38,
                  "endLine": 254,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            self.dbname = dsn_parameters.get(\"dbname\")\n            self.user = dsn_parameters.get(\"user\")\n            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n        else:\n            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n",
                    "rendered": {
                      "text": "            self.dbname = dsn_parameters.get(\"dbname\")\n            self.user = dsn_parameters.get(\"user\")\n            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n        else:\n            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n",
                      "markdown": "`            self.dbname = dsn_parameters.get(\"dbname\")\n            self.user = dsn_parameters.get(\"user\")\n            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n        else:\n            self.dbname = conn_params.get(\"database\")\n            self.user = conn_params.get(\"user\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 38,
                  "endLine": 253,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        if dsn_parameters:\n            self.dbname = dsn_parameters.get(\"dbname\")\n            self.user = dsn_parameters.get(\"user\")\n            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n        else:\n            self.dbname = conn_params.get(\"database\")\n",
                    "rendered": {
                      "text": "        if dsn_parameters:\n            self.dbname = dsn_parameters.get(\"dbname\")\n            self.user = dsn_parameters.get(\"user\")\n            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n        else:\n            self.dbname = conn_params.get(\"database\")\n",
                      "markdown": "`        if dsn_parameters:\n            self.dbname = dsn_parameters.get(\"dbname\")\n            self.user = dsn_parameters.get(\"user\")\n            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n        else:\n            self.dbname = conn_params.get(\"database\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 38,
                  "endLine": 252,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n        if dsn_parameters:\n            self.dbname = dsn_parameters.get(\"dbname\")\n            self.user = dsn_parameters.get(\"user\")\n            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n        else:\n",
                    "rendered": {
                      "text": "\n        if dsn_parameters:\n            self.dbname = dsn_parameters.get(\"dbname\")\n            self.user = dsn_parameters.get(\"user\")\n            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n        else:\n",
                      "markdown": "`\n        if dsn_parameters:\n            self.dbname = dsn_parameters.get(\"dbname\")\n            self.user = dsn_parameters.get(\"user\")\n            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 40,
                  "endLine": 251,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        dsn_parameters = conn.info.get_parameters()\n\n        if dsn_parameters:\n            self.dbname = dsn_parameters.get(\"dbname\")\n            self.user = dsn_parameters.get(\"user\")\n            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n",
                    "rendered": {
                      "text": "        dsn_parameters = conn.info.get_parameters()\n\n        if dsn_parameters:\n            self.dbname = dsn_parameters.get(\"dbname\")\n            self.user = dsn_parameters.get(\"user\")\n            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n",
                      "markdown": "`        dsn_parameters = conn.info.get_parameters()\n\n        if dsn_parameters:\n            self.dbname = dsn_parameters.get(\"dbname\")\n            self.user = dsn_parameters.get(\"user\")\n            self.host = dsn_parameters.get(\"host\")\n            self.port = dsn_parameters.get(\"port\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 24,
                  "endLine": 261,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n        self.password = password\n        self.extra_args = kwargs\n\n        if not self.host:\n",
                    "rendered": {
                      "text": "            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n        self.password = password\n        self.extra_args = kwargs\n\n        if not self.host:\n",
                      "markdown": "`            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n        self.password = password\n        self.extra_args = kwargs\n\n        if not self.host:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 13,
                  "endLine": 261,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n        self.password = password\n        self.extra_args = kwargs\n\n        if not self.host:\n",
                    "rendered": {
                      "text": "            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n        self.password = password\n        self.extra_args = kwargs\n\n        if not self.host:\n",
                      "markdown": "`            self.host = conn_params.get(\"host\")\n            self.port = conn_params.get(\"port\")\n\n        self.password = password\n        self.extra_args = kwargs\n\n        if not self.host:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 64,
                  "endLine": 223,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n                    new_params[\"dsn\"], password=new_params.pop(\"password\")\n                )\n\n        conn_params.update({k: v for k, v in new_params.items() if v})\n",
                    "rendered": {
                      "text": "\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n                    new_params[\"dsn\"], password=new_params.pop(\"password\")\n                )\n\n        conn_params.update({k: v for k, v in new_params.items() if v})\n",
                      "markdown": "`\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n                    new_params[\"dsn\"], password=new_params.pop(\"password\")\n                )\n\n        conn_params.update({k: v for k, v in new_params.items() if v})\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 39,
                  "endLine": 223,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n                    new_params[\"dsn\"], password=new_params.pop(\"password\")\n                )\n\n        conn_params.update({k: v for k, v in new_params.items() if v})\n",
                    "rendered": {
                      "text": "\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n                    new_params[\"dsn\"], password=new_params.pop(\"password\")\n                )\n\n        conn_params.update({k: v for k, v in new_params.items() if v})\n",
                      "markdown": "`\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n                    new_params[\"dsn\"], password=new_params.pop(\"password\")\n                )\n\n        conn_params.update({k: v for k, v in new_params.items() if v})\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 27,
                  "endLine": 221,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        if new_params[\"dsn\"]:\n            new_params = {\"dsn\": new_params[\"dsn\"], \"password\": new_params[\"password\"]}\n\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n                    new_params[\"dsn\"], password=new_params.pop(\"password\")\n                )\n",
                    "rendered": {
                      "text": "        if new_params[\"dsn\"]:\n            new_params = {\"dsn\": new_params[\"dsn\"], \"password\": new_params[\"password\"]}\n\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n                    new_params[\"dsn\"], password=new_params.pop(\"password\")\n                )\n",
                      "markdown": "`        if new_params[\"dsn\"]:\n            new_params = {\"dsn\": new_params[\"dsn\"], \"password\": new_params[\"password\"]}\n\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n                    new_params[\"dsn\"], password=new_params.pop(\"password\")\n                )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 76,
                  "endLine": 219,
                  "endColumn": 84,
                  "snippet": {
                    "text": "        new_params.update(kwargs)\n\n        if new_params[\"dsn\"]:\n            new_params = {\"dsn\": new_params[\"dsn\"], \"password\": new_params[\"password\"]}\n\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n",
                    "rendered": {
                      "text": "        new_params.update(kwargs)\n\n        if new_params[\"dsn\"]:\n            new_params = {\"dsn\": new_params[\"dsn\"], \"password\": new_params[\"password\"]}\n\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n",
                      "markdown": "`        new_params.update(kwargs)\n\n        if new_params[\"dsn\"]:\n            new_params = {\"dsn\": new_params[\"dsn\"], \"password\": new_params[\"password\"]}\n\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 53,
                  "endLine": 219,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        new_params.update(kwargs)\n\n        if new_params[\"dsn\"]:\n            new_params = {\"dsn\": new_params[\"dsn\"], \"password\": new_params[\"password\"]}\n\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n",
                    "rendered": {
                      "text": "        new_params.update(kwargs)\n\n        if new_params[\"dsn\"]:\n            new_params = {\"dsn\": new_params[\"dsn\"], \"password\": new_params[\"password\"]}\n\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n",
                      "markdown": "`        new_params.update(kwargs)\n\n        if new_params[\"dsn\"]:\n            new_params = {\"dsn\": new_params[\"dsn\"], \"password\": new_params[\"password\"]}\n\n            if new_params[\"password\"]:\n                new_params[\"dsn\"] = make_conninfo(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 24,
                  "endLine": 211,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        new_params = {\n            \"dbname\": database,\n            \"user\": user,\n            \"password\": password,\n            \"host\": host,\n            \"port\": port,\n            \"dsn\": dsn,\n",
                    "rendered": {
                      "text": "        new_params = {\n            \"dbname\": database,\n            \"user\": user,\n            \"password\": password,\n            \"host\": host,\n            \"port\": port,\n            \"dsn\": dsn,\n",
                      "markdown": "`        new_params = {\n            \"dbname\": database,\n            \"user\": user,\n            \"password\": password,\n            \"host\": host,\n            \"port\": port,\n            \"dsn\": dsn,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 13,
                  "endLine": 211,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        new_params = {\n            \"dbname\": database,\n            \"user\": user,\n            \"password\": password,\n            \"host\": host,\n            \"port\": port,\n            \"dsn\": dsn,\n",
                    "rendered": {
                      "text": "        new_params = {\n            \"dbname\": database,\n            \"user\": user,\n            \"password\": password,\n            \"host\": host,\n            \"port\": port,\n            \"dsn\": dsn,\n",
                      "markdown": "`        new_params = {\n            \"dbname\": database,\n            \"user\": user,\n            \"password\": password,\n            \"host\": host,\n            \"port\": port,\n            \"dsn\": dsn,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 8,
                  "endLine": 200,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        self,\n        database=None,\n        user=None,\n        password=None,\n        host=None,\n        port=None,\n        dsn=None,\n",
                    "rendered": {
                      "text": "        self,\n        database=None,\n        user=None,\n        password=None,\n        host=None,\n        port=None,\n        dsn=None,\n",
                      "markdown": "`        self,\n        database=None,\n        user=None,\n        password=None,\n        host=None,\n        port=None,\n        dsn=None,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 37,
                  "endLine": 184,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        self.server_version = None\n        self.extra_args = None\n        self.notify_callback = notify_callback\n        self.connect(database, user, password, host, port, dsn, **kwargs)\n        self.reset_expanded = None\n\n    def is_virtual_database(self):\n",
                    "rendered": {
                      "text": "        self.server_version = None\n        self.extra_args = None\n        self.notify_callback = notify_callback\n        self.connect(database, user, password, host, port, dsn, **kwargs)\n        self.reset_expanded = None\n\n    def is_virtual_database(self):\n",
                      "markdown": "`        self.server_version = None\n        self.extra_args = None\n        self.notify_callback = notify_callback\n        self.connect(database, user, password, host, port, dsn, **kwargs)\n        self.reset_expanded = None\n\n    def is_virtual_database(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 13,
                  "endLine": 178,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        self.conn = None\n        self.dbname = None\n        self.user = None\n        self.password = None\n        self.host = None\n        self.port = None\n        self.server_version = None\n",
                    "rendered": {
                      "text": "        self.conn = None\n        self.dbname = None\n        self.user = None\n        self.password = None\n        self.host = None\n        self.port = None\n        self.server_version = None\n",
                      "markdown": "`        self.conn = None\n        self.dbname = None\n        self.user = None\n        self.password = None\n        self.host = None\n        self.port = None\n        self.server_version = None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 8,
                  "endLine": 166,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        self,\n        database=None,\n        user=None,\n        password=None,\n        host=None,\n        port=None,\n        dsn=None,\n",
                    "rendered": {
                      "text": "        self,\n        database=None,\n        user=None,\n        password=None,\n        host=None,\n        port=None,\n        dsn=None,\n",
                      "markdown": "`        self,\n        database=None,\n        user=None,\n        password=None,\n        host=None,\n        port=None,\n        dsn=None,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgexecute.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 5,
                  "endLine": 30,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    # Regular expression pattern to match comments\n    pattern = r\"^(/\\*.*?\\*/|--.*?)(?:\\n|$)\"\n\n    # Find and remove all comments from the beginning\n    cleaned_command = command\n    comments = []\n    match = re.match(pattern, cleaned_command, re.DOTALL)\n",
                    "rendered": {
                      "text": "    # Regular expression pattern to match comments\n    pattern = r\"^(/\\*.*?\\*/|--.*?)(?:\\n|$)\"\n\n    # Find and remove all comments from the beginning\n    cleaned_command = command\n    comments = []\n    match = re.match(pattern, cleaned_command, re.DOTALL)\n",
                      "markdown": "`    # Regular expression pattern to match comments\n    pattern = r\"^(/\\*.*?\\*/|--.*?)(?:\\n|$)\"\n\n    # Find and remove all comments from the beginning\n    cleaned_command = command\n    comments = []\n    match = re.match(pattern, cleaned_command, re.DOTALL)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 1012,
                  "startColumn": 60,
                  "endLine": 1012,
                  "endColumn": 65,
                  "snippet": {
                    "text": "                        addcols(schema, relname, tbl.alias, \"functions\", cols)\n                else:\n                    for reltype in (\"tables\", \"views\"):\n                        cols = meta[reltype].get(schema, {}).get(relname)\n                        if cols:\n                            cols = cols.values()\n                            addcols(schema, relname, tbl.alias, reltype, cols)\n",
                    "rendered": {
                      "text": "                        addcols(schema, relname, tbl.alias, \"functions\", cols)\n                else:\n                    for reltype in (\"tables\", \"views\"):\n                        cols = meta[reltype].get(schema, {}).get(relname)\n                        if cols:\n                            cols = cols.values()\n                            addcols(schema, relname, tbl.alias, reltype, cols)\n",
                      "markdown": "`                        addcols(schema, relname, tbl.alias, \"functions\", cols)\n                else:\n                    for reltype in (\"tables\", \"views\"):\n                        cols = meta[reltype].get(schema, {}).get(relname)\n                        if cols:\n                            cols = cols.values()\n                            addcols(schema, relname, tbl.alias, reltype, cols)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 1012,
                  "startColumn": 44,
                  "endLine": 1012,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                        addcols(schema, relname, tbl.alias, \"functions\", cols)\n                else:\n                    for reltype in (\"tables\", \"views\"):\n                        cols = meta[reltype].get(schema, {}).get(relname)\n                        if cols:\n                            cols = cols.values()\n                            addcols(schema, relname, tbl.alias, reltype, cols)\n",
                    "rendered": {
                      "text": "                        addcols(schema, relname, tbl.alias, \"functions\", cols)\n                else:\n                    for reltype in (\"tables\", \"views\"):\n                        cols = meta[reltype].get(schema, {}).get(relname)\n                        if cols:\n                            cols = cols.values()\n                            addcols(schema, relname, tbl.alias, reltype, cols)\n",
                      "markdown": "`                        addcols(schema, relname, tbl.alias, \"functions\", cols)\n                else:\n                    for reltype in (\"tables\", \"views\"):\n                        cols = meta[reltype].get(schema, {}).get(relname)\n                        if cols:\n                            cols = cols.values()\n                            addcols(schema, relname, tbl.alias, reltype, cols)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 1005,
                  "startColumn": 65,
                  "endLine": 1005,
                  "endColumn": 70,
                  "snippet": {
                    "text": "                if tbl.is_function:\n                    # Return column names from a set-returning function\n                    # Get an array of FunctionMetadata objects\n                    functions = meta[\"functions\"].get(schema, {}).get(relname)\n                    for func in functions or []:\n                        # func is a FunctionMetadata object\n                        cols = func.fields()\n",
                    "rendered": {
                      "text": "                if tbl.is_function:\n                    # Return column names from a set-returning function\n                    # Get an array of FunctionMetadata objects\n                    functions = meta[\"functions\"].get(schema, {}).get(relname)\n                    for func in functions or []:\n                        # func is a FunctionMetadata object\n                        cols = func.fields()\n",
                      "markdown": "`                if tbl.is_function:\n                    # Return column names from a set-returning function\n                    # Get an array of FunctionMetadata objects\n                    functions = meta[\"functions\"].get(schema, {}).get(relname)\n                    for func in functions or []:\n                        # func is a FunctionMetadata object\n                        cols = func.fields()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 1005,
                  "startColumn": 49,
                  "endLine": 1005,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                if tbl.is_function:\n                    # Return column names from a set-returning function\n                    # Get an array of FunctionMetadata objects\n                    functions = meta[\"functions\"].get(schema, {}).get(relname)\n                    for func in functions or []:\n                        # func is a FunctionMetadata object\n                        cols = func.fields()\n",
                    "rendered": {
                      "text": "                if tbl.is_function:\n                    # Return column names from a set-returning function\n                    # Get an array of FunctionMetadata objects\n                    functions = meta[\"functions\"].get(schema, {}).get(relname)\n                    for func in functions or []:\n                        # func is a FunctionMetadata object\n                        cols = func.fields()\n",
                      "markdown": "`                if tbl.is_function:\n                    # Return column names from a set-returning function\n                    # Get an array of FunctionMetadata objects\n                    functions = meta[\"functions\"].get(schema, {}).get(relname)\n                    for func in functions or []:\n                        # func is a FunctionMetadata object\n                        cols = func.fields()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 897,
                  "startColumn": 42,
                  "endLine": 897,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        keywords = self.keywords_tree.keys()\n        # Get well known following keywords for the last token. If any, narrow\n        # candidates to this list.\n        next_keywords = self.keywords_tree.get(suggestion.last_token, [])\n        if next_keywords:\n            keywords = next_keywords\n\n",
                    "rendered": {
                      "text": "        keywords = self.keywords_tree.keys()\n        # Get well known following keywords for the last token. If any, narrow\n        # candidates to this list.\n        next_keywords = self.keywords_tree.get(suggestion.last_token, [])\n        if next_keywords:\n            keywords = next_keywords\n\n",
                      "markdown": "`        keywords = self.keywords_tree.keys()\n        # Get well known following keywords for the last token. If any, narrow\n        # candidates to this list.\n        next_keywords = self.keywords_tree.get(suggestion.last_token, [])\n        if next_keywords:\n            keywords = next_keywords\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 745,
                  "startColumn": 62,
                  "endLine": 745,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                    f.is_public or f.schema_name == suggestion.schema\n                )\n\n        arg_mode = {\"signature\": \"signature\", \"special\": None}.get(\n            suggestion.usage, \"call\"\n        )\n\n",
                    "rendered": {
                      "text": "                    f.is_public or f.schema_name == suggestion.schema\n                )\n\n        arg_mode = {\"signature\": \"signature\", \"special\": None}.get(\n            suggestion.usage, \"call\"\n        )\n\n",
                      "markdown": "`                    f.is_public or f.schema_name == suggestion.schema\n                )\n\n        arg_mode = {\"signature\": \"signature\", \"special\": None}.get(\n            suggestion.usage, \"call\"\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 26,
                  "endLine": 480,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        return matches\n\n    def case(self, word):\n        return self.casing.get(word, word)\n\n    def get_completions(self, document, complete_event, smart_completion=None):\n        word_before_cursor = document.get_word_before_cursor(WORD=True)\n",
                    "rendered": {
                      "text": "        return matches\n\n    def case(self, word):\n        return self.casing.get(word, word)\n\n    def get_completions(self, document, complete_event, smart_completion=None):\n        word_before_cursor = document.get_word_before_cursor(WORD=True)\n",
                      "markdown": "`        return matches\n\n    def case(self, word):\n        return self.casing.get(word, word)\n\n    def get_completions(self, document, complete_event, smart_completion=None):\n        word_before_cursor = document.get_word_before_cursor(WORD=True)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 33,
                  "endLine": 142,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            \"asterisk_column_order\", \"table_order\"\n        )\n\n        keyword_casing = settings.get(\"keyword_casing\", \"upper\").lower()\n        if keyword_casing not in (\"upper\", \"lower\", \"auto\"):\n            keyword_casing = \"upper\"\n        self.keyword_casing = keyword_casing\n",
                    "rendered": {
                      "text": "            \"asterisk_column_order\", \"table_order\"\n        )\n\n        keyword_casing = settings.get(\"keyword_casing\", \"upper\").lower()\n        if keyword_casing not in (\"upper\", \"lower\", \"auto\"):\n            keyword_casing = \"upper\"\n        self.keyword_casing = keyword_casing\n",
                      "markdown": "`            \"asterisk_column_order\", \"table_order\"\n        )\n\n        keyword_casing = settings.get(\"keyword_casing\", \"upper\").lower()\n        if keyword_casing not in (\"upper\", \"lower\", \"auto\"):\n            keyword_casing = \"upper\"\n        self.keyword_casing = keyword_casing\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 45,
                  "endLine": 138,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        ]\n        self.generate_casing_file = settings.get(\"generate_casing_file\")\n        self.qualify_columns = settings.get(\"qualify_columns\", \"if_more_than_one_table\")\n        self.asterisk_column_order = settings.get(\n            \"asterisk_column_order\", \"table_order\"\n        )\n\n",
                    "rendered": {
                      "text": "        ]\n        self.generate_casing_file = settings.get(\"generate_casing_file\")\n        self.qualify_columns = settings.get(\"qualify_columns\", \"if_more_than_one_table\")\n        self.asterisk_column_order = settings.get(\n            \"asterisk_column_order\", \"table_order\"\n        )\n\n",
                      "markdown": "`        ]\n        self.generate_casing_file = settings.get(\"generate_casing_file\")\n        self.qualify_columns = settings.get(\"qualify_columns\", \"if_more_than_one_table\")\n        self.asterisk_column_order = settings.get(\n            \"asterisk_column_order\", \"table_order\"\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 39,
                  "endLine": 137,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            )\n        ]\n        self.generate_casing_file = settings.get(\"generate_casing_file\")\n        self.qualify_columns = settings.get(\"qualify_columns\", \"if_more_than_one_table\")\n        self.asterisk_column_order = settings.get(\n            \"asterisk_column_order\", \"table_order\"\n        )\n",
                    "rendered": {
                      "text": "            )\n        ]\n        self.generate_casing_file = settings.get(\"generate_casing_file\")\n        self.qualify_columns = settings.get(\"qualify_columns\", \"if_more_than_one_table\")\n        self.asterisk_column_order = settings.get(\n            \"asterisk_column_order\", \"table_order\"\n        )\n",
                      "markdown": "`            )\n        ]\n        self.generate_casing_file = settings.get(\"generate_casing_file\")\n        self.qualify_columns = settings.get(\"qualify_columns\", \"if_more_than_one_table\")\n        self.asterisk_column_order = settings.get(\n            \"asterisk_column_order\", \"table_order\"\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 44,
                  "endLine": 136,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                \"insert_col_skip_patterns\", [r\"^now\\(\\)$\", r\"^nextval\\(\"]\n            )\n        ]\n        self.generate_casing_file = settings.get(\"generate_casing_file\")\n        self.qualify_columns = settings.get(\"qualify_columns\", \"if_more_than_one_table\")\n        self.asterisk_column_order = settings.get(\n            \"asterisk_column_order\", \"table_order\"\n",
                    "rendered": {
                      "text": "                \"insert_col_skip_patterns\", [r\"^now\\(\\)$\", r\"^nextval\\(\"]\n            )\n        ]\n        self.generate_casing_file = settings.get(\"generate_casing_file\")\n        self.qualify_columns = settings.get(\"qualify_columns\", \"if_more_than_one_table\")\n        self.asterisk_column_order = settings.get(\n            \"asterisk_column_order\", \"table_order\"\n",
                      "markdown": "`                \"insert_col_skip_patterns\", [r\"^now\\(\\)$\", r\"^nextval\\(\"]\n            )\n        ]\n        self.generate_casing_file = settings.get(\"generate_casing_file\")\n        self.qualify_columns = settings.get(\"qualify_columns\", \"if_more_than_one_table\")\n        self.asterisk_column_order = settings.get(\n            \"asterisk_column_order\", \"table_order\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 35,
                  "endLine": 132,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        self.casing_file = settings.get(\"casing_file\")\n        self.insert_col_skip_patterns = [\n            re.compile(pattern)\n            for pattern in settings.get(\n                \"insert_col_skip_patterns\", [r\"^now\\(\\)$\", r\"^nextval\\(\"]\n            )\n        ]\n",
                    "rendered": {
                      "text": "        self.casing_file = settings.get(\"casing_file\")\n        self.insert_col_skip_patterns = [\n            re.compile(pattern)\n            for pattern in settings.get(\n                \"insert_col_skip_patterns\", [r\"^now\\(\\)$\", r\"^nextval\\(\"]\n            )\n        ]\n",
                      "markdown": "`        self.casing_file = settings.get(\"casing_file\")\n        self.insert_col_skip_patterns = [\n            re.compile(pattern)\n            for pattern in settings.get(\n                \"insert_col_skip_patterns\", [r\"^now\\(\\)$\", r\"^nextval\\(\"]\n            )\n        ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 35,
                  "endLine": 129,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            self.alias_map = load_alias_map_file(alias_map_file)\n        else:\n            self.alias_map = None\n        self.casing_file = settings.get(\"casing_file\")\n        self.insert_col_skip_patterns = [\n            re.compile(pattern)\n            for pattern in settings.get(\n",
                    "rendered": {
                      "text": "            self.alias_map = load_alias_map_file(alias_map_file)\n        else:\n            self.alias_map = None\n        self.casing_file = settings.get(\"casing_file\")\n        self.insert_col_skip_patterns = [\n            re.compile(pattern)\n            for pattern in settings.get(\n",
                      "markdown": "`            self.alias_map = load_alias_map_file(alias_map_file)\n        else:\n            self.alias_map = None\n        self.casing_file = settings.get(\"casing_file\")\n        self.insert_col_skip_patterns = [\n            re.compile(pattern)\n            for pattern in settings.get(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 33,
                  "endLine": 124,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n        self.search_path_filter = settings.get(\"search_path_filter\")\n        self.generate_aliases = settings.get(\"generate_aliases\")\n        alias_map_file = settings.get(\"alias_map_file\")\n        if alias_map_file is not None:\n            self.alias_map = load_alias_map_file(alias_map_file)\n        else:\n",
                    "rendered": {
                      "text": "        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n        self.search_path_filter = settings.get(\"search_path_filter\")\n        self.generate_aliases = settings.get(\"generate_aliases\")\n        alias_map_file = settings.get(\"alias_map_file\")\n        if alias_map_file is not None:\n            self.alias_map = load_alias_map_file(alias_map_file)\n        else:\n",
                      "markdown": "`        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n        self.search_path_filter = settings.get(\"search_path_filter\")\n        self.generate_aliases = settings.get(\"generate_aliases\")\n        alias_map_file = settings.get(\"alias_map_file\")\n        if alias_map_file is not None:\n            self.alias_map = load_alias_map_file(alias_map_file)\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 40,
                  "endLine": 123,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        )\n        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n        self.search_path_filter = settings.get(\"search_path_filter\")\n        self.generate_aliases = settings.get(\"generate_aliases\")\n        alias_map_file = settings.get(\"alias_map_file\")\n        if alias_map_file is not None:\n            self.alias_map = load_alias_map_file(alias_map_file)\n",
                    "rendered": {
                      "text": "        )\n        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n        self.search_path_filter = settings.get(\"search_path_filter\")\n        self.generate_aliases = settings.get(\"generate_aliases\")\n        alias_map_file = settings.get(\"alias_map_file\")\n        if alias_map_file is not None:\n            self.alias_map = load_alias_map_file(alias_map_file)\n",
                      "markdown": "`        )\n        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n        self.search_path_filter = settings.get(\"search_path_filter\")\n        self.generate_aliases = settings.get(\"generate_aliases\")\n        alias_map_file = settings.get(\"alias_map_file\")\n        if alias_map_file is not None:\n            self.alias_map = load_alias_map_file(alias_map_file)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 42,
                  "endLine": 122,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            \"call_arg_display_style\", \"{arg_name}\"\n        )\n        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n        self.search_path_filter = settings.get(\"search_path_filter\")\n        self.generate_aliases = settings.get(\"generate_aliases\")\n        alias_map_file = settings.get(\"alias_map_file\")\n        if alias_map_file is not None:\n",
                    "rendered": {
                      "text": "            \"call_arg_display_style\", \"{arg_name}\"\n        )\n        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n        self.search_path_filter = settings.get(\"search_path_filter\")\n        self.generate_aliases = settings.get(\"generate_aliases\")\n        alias_map_file = settings.get(\"alias_map_file\")\n        if alias_map_file is not None:\n",
                      "markdown": "`            \"call_arg_display_style\", \"{arg_name}\"\n        )\n        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n        self.search_path_filter = settings.get(\"search_path_filter\")\n        self.generate_aliases = settings.get(\"generate_aliases\")\n        alias_map_file = settings.get(\"alias_map_file\")\n        if alias_map_file is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 45,
                  "endLine": 121,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        self.call_arg_display_style = settings.get(\n            \"call_arg_display_style\", \"{arg_name}\"\n        )\n        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n        self.search_path_filter = settings.get(\"search_path_filter\")\n        self.generate_aliases = settings.get(\"generate_aliases\")\n        alias_map_file = settings.get(\"alias_map_file\")\n",
                    "rendered": {
                      "text": "        self.call_arg_display_style = settings.get(\n            \"call_arg_display_style\", \"{arg_name}\"\n        )\n        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n        self.search_path_filter = settings.get(\"search_path_filter\")\n        self.generate_aliases = settings.get(\"generate_aliases\")\n        alias_map_file = settings.get(\"alias_map_file\")\n",
                      "markdown": "`        self.call_arg_display_style = settings.get(\n            \"call_arg_display_style\", \"{arg_name}\"\n        )\n        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n        self.search_path_filter = settings.get(\"search_path_filter\")\n        self.generate_aliases = settings.get(\"generate_aliases\")\n        alias_map_file = settings.get(\"alias_map_file\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 46,
                  "endLine": 118,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        self.call_arg_style = settings.get(\n            \"call_arg_style\", \"{arg_name: <{max_arg_len}} := {arg_default}\"\n        )\n        self.call_arg_display_style = settings.get(\n            \"call_arg_display_style\", \"{arg_name}\"\n        )\n        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n",
                    "rendered": {
                      "text": "        self.call_arg_style = settings.get(\n            \"call_arg_style\", \"{arg_name: <{max_arg_len}} := {arg_default}\"\n        )\n        self.call_arg_display_style = settings.get(\n            \"call_arg_display_style\", \"{arg_name}\"\n        )\n        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n",
                      "markdown": "`        self.call_arg_style = settings.get(\n            \"call_arg_style\", \"{arg_name: <{max_arg_len}} := {arg_default}\"\n        )\n        self.call_arg_display_style = settings.get(\n            \"call_arg_display_style\", \"{arg_name}\"\n        )\n        self.call_arg_oneliner_max = settings.get(\"call_arg_oneliner_max\", 2)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 38,
                  "endLine": 115,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        self.signature_arg_style = settings.get(\n            \"signature_arg_style\", \"{arg_name} {arg_type}\"\n        )\n        self.call_arg_style = settings.get(\n            \"call_arg_style\", \"{arg_name: <{max_arg_len}} := {arg_default}\"\n        )\n        self.call_arg_display_style = settings.get(\n",
                    "rendered": {
                      "text": "        self.signature_arg_style = settings.get(\n            \"signature_arg_style\", \"{arg_name} {arg_type}\"\n        )\n        self.call_arg_style = settings.get(\n            \"call_arg_style\", \"{arg_name: <{max_arg_len}} := {arg_default}\"\n        )\n        self.call_arg_display_style = settings.get(\n",
                      "markdown": "`        self.signature_arg_style = settings.get(\n            \"signature_arg_style\", \"{arg_name} {arg_type}\"\n        )\n        self.call_arg_style = settings.get(\n            \"call_arg_style\", \"{arg_name: <{max_arg_len}} := {arg_default}\"\n        )\n        self.call_arg_display_style = settings.get(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 43,
                  "endLine": 112,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        self.pgspecial = pgspecial\n        self.prioritizer = PrevalenceCounter()\n        settings = settings or {}\n        self.signature_arg_style = settings.get(\n            \"signature_arg_style\", \"{arg_name} {arg_type}\"\n        )\n        self.call_arg_style = settings.get(\n",
                    "rendered": {
                      "text": "        self.pgspecial = pgspecial\n        self.prioritizer = PrevalenceCounter()\n        settings = settings or {}\n        self.signature_arg_style = settings.get(\n            \"signature_arg_style\", \"{arg_name} {arg_type}\"\n        )\n        self.call_arg_style = settings.get(\n",
                      "markdown": "`        self.pgspecial = pgspecial\n        self.prioritizer = PrevalenceCounter()\n        settings = settings or {}\n        self.signature_arg_style = settings.get(\n            \"signature_arg_style\", \"{arg_name} {arg_type}\"\n        )\n        self.call_arg_style = settings.get(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 931,
                  "startColumn": 64,
                  "endLine": 931,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n        commands = self.pgspecial.commands\n        cmds = commands.keys()\n        cmds = [Candidate(cmd, 0, commands[cmd].description) for cmd in cmds]\n        return self.find_matches(word_before_cursor, cmds, mode=\"strict\")\n\n    def get_datatype_matches(self, suggestion, word_before_cursor):\n",
                    "rendered": {
                      "text": "\n        commands = self.pgspecial.commands\n        cmds = commands.keys()\n        cmds = [Candidate(cmd, 0, commands[cmd].description) for cmd in cmds]\n        return self.find_matches(word_before_cursor, cmds, mode=\"strict\")\n\n    def get_datatype_matches(self, suggestion, word_before_cursor):\n",
                      "markdown": "`\n        commands = self.pgspecial.commands\n        cmds = commands.keys()\n        cmds = [Candidate(cmd, 0, commands[cmd].description) for cmd in cmds]\n        return self.find_matches(word_before_cursor, cmds, mode=\"strict\")\n\n    def get_datatype_matches(self, suggestion, word_before_cursor):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 14,
                  "endLine": 750,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        )\n\n        # Function overloading means we way have multiple functions of the same\n        # name at this point, so keep unique names only\n        all_functions = self.populate_functions(suggestion.schema, filt)\n        funcs = {self._make_cand(f, alias, suggestion, arg_mode) for f in all_functions}\n\n",
                    "rendered": {
                      "text": "        )\n\n        # Function overloading means we way have multiple functions of the same\n        # name at this point, so keep unique names only\n        all_functions = self.populate_functions(suggestion.schema, filt)\n        funcs = {self._make_cand(f, alias, suggestion, arg_mode) for f in all_functions}\n\n",
                      "markdown": "`        )\n\n        # Function overloading means we way have multiple functions of the same\n        # name at this point, so keep unique names only\n        all_functions = self.populate_functions(suggestion.schema, filt)\n        funcs = {self._make_cand(f, alias, suggestion, arg_mode) for f in all_functions}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 9,
                  "endLine": 713,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        # For name matching, use a {(colname, coltype): TableReference} dict\n        coltyp = namedtuple(\"coltyp\", \"name datatype\")\n        col_table = list_dict((coltyp(c.name, c.datatype), t) for t, c in cols)\n        # Find all name-match join conditions\n        for c in (coltyp(c.name, c.datatype) for c in lcols):\n            for rtbl in (t for t in col_table[c] if t.ref != ltbl.ref):\n                prio = 1000 if c.datatype in (\"integer\", \"bigint\", \"smallint\") else 0\n",
                    "rendered": {
                      "text": "        # For name matching, use a {(colname, coltype): TableReference} dict\n        coltyp = namedtuple(\"coltyp\", \"name datatype\")\n        col_table = list_dict((coltyp(c.name, c.datatype), t) for t, c in cols)\n        # Find all name-match join conditions\n        for c in (coltyp(c.name, c.datatype) for c in lcols):\n            for rtbl in (t for t in col_table[c] if t.ref != ltbl.ref):\n                prio = 1000 if c.datatype in (\"integer\", \"bigint\", \"smallint\") else 0\n",
                      "markdown": "`        # For name matching, use a {(colname, coltype): TableReference} dict\n        coltyp = namedtuple(\"coltyp\", \"name datatype\")\n        col_table = list_dict((coltyp(c.name, c.datatype), t) for t, c in cols)\n        # Find all name-match join conditions\n        for c in (coltyp(c.name, c.datatype) for c in lcols):\n            for rtbl in (t for t in col_table[c] if t.ref != ltbl.ref):\n                prio = 1000 if c.datatype in (\"integer\", \"bigint\", \"smallint\") else 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 48,
                  "endLine": 622,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        refs = {normalize_ref(t.ref) for t in tbls}\n        other_tbls = {(t.schema, t.name) for t in list(cols)[:-1]}\n        joins = []\n        # Iterate over FKs in existing tables to find potential joins\n        fks = (\n            (fk, rtbl, rcol)\n            for rtbl, rcols in cols.items()\n",
                    "rendered": {
                      "text": "        refs = {normalize_ref(t.ref) for t in tbls}\n        other_tbls = {(t.schema, t.name) for t in list(cols)[:-1]}\n        joins = []\n        # Iterate over FKs in existing tables to find potential joins\n        fks = (\n            (fk, rtbl, rcol)\n            for rtbl, rcols in cols.items()\n",
                      "markdown": "`        refs = {normalize_ref(t.ref) for t in tbls}\n        other_tbls = {(t.schema, t.name) for t in list(cols)[:-1]}\n        joins = []\n        # Iterate over FKs in existing tables to find potential joins\n        fks = (\n            (fk, rtbl, rcol)\n            for rtbl, rcols in cols.items()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 9,
                  "endLine": 509,
                  "endColumn": 15,
                  "snippet": {
                    "text": "            matcher = self.suggestion_matchers[suggestion_type]\n            matches.extend(matcher(self, suggestion, word_before_cursor))\n\n        # Sort matches so highest priorities are first\n        matches = sorted(matches, key=operator.attrgetter(\"priority\"), reverse=True)\n\n        return [m.completion for m in matches]\n",
                    "rendered": {
                      "text": "            matcher = self.suggestion_matchers[suggestion_type]\n            matches.extend(matcher(self, suggestion, word_before_cursor))\n\n        # Sort matches so highest priorities are first\n        matches = sorted(matches, key=operator.attrgetter(\"priority\"), reverse=True)\n\n        return [m.completion for m in matches]\n",
                      "markdown": "`            matcher = self.suggestion_matchers[suggestion_type]\n            matches.extend(matcher(self, suggestion, word_before_cursor))\n\n        # Sort matches so highest priorities are first\n        matches = sorted(matches, key=operator.attrgetter(\"priority\"), reverse=True)\n\n        return [m.completion for m in matches]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 48,
                  "endLine": 443,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                # position. Since we use *higher* priority to mean \"more\n                # important,\" we use -ord(c) to prioritize \"aa\" > \"ab\" and end\n                # with 1 to prioritize shorter strings (ie \"user\" > \"users\").\n                # We first do a case-insensitive sort and then a\n                # case-sensitive one as a tie breaker.\n                # We also use the unescape_name to make sure quoted names have\n                # the same priority as unquoted names.\n",
                    "rendered": {
                      "text": "                # position. Since we use *higher* priority to mean \"more\n                # important,\" we use -ord(c) to prioritize \"aa\" > \"ab\" and end\n                # with 1 to prioritize shorter strings (ie \"user\" > \"users\").\n                # We first do a case-insensitive sort and then a\n                # case-sensitive one as a tie breaker.\n                # We also use the unescape_name to make sure quoted names have\n                # the same priority as unquoted names.\n",
                      "markdown": "`                # position. Since we use *higher* priority to mean \"more\n                # important,\" we use -ord(c) to prioritize \"aa\" > \"ab\" and end\n                # with 1 to prioritize shorter strings (ie \"user\" > \"users\").\n                # We first do a case-insensitive sort and then a\n                # case-sensitive one as a tie breaker.\n                # We also use the unescape_name to make sure quoted names have\n                # the same priority as unquoted names.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 64,
                  "endLine": 415,
                  "endColumn": 70,
                  "snippet": {
                    "text": "            def _match(item):\n                match_point = item.lower().find(text, 0, match_end_limit)\n                if match_point >= 0:\n                    # Use negative infinity to force keywords to sort after all\n                    # fuzzy matches\n                    return -float(\"Infinity\"), -match_point\n\n",
                    "rendered": {
                      "text": "            def _match(item):\n                match_point = item.lower().find(text, 0, match_end_limit)\n                if match_point >= 0:\n                    # Use negative infinity to force keywords to sort after all\n                    # fuzzy matches\n                    return -float(\"Infinity\"), -match_point\n\n",
                      "markdown": "`            def _match(item):\n                match_point = item.lower().find(text, 0, match_end_limit)\n                if match_point >= 0:\n                    # Use negative infinity to force keywords to sort after all\n                    # fuzzy matches\n                    return -float(\"Infinity\"), -match_point\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 66,
                  "endLine": 403,
                  "snippet": {
                    "text": "                if item.lower()[: len(text) + 1] in (text, text + \" \"):\n                    # Exact match of first word in suggestion\n                    # This is to get exact alias matches to the top\n                    # E.g. for input `e`, 'Entries E' should be on top\n                    # (before e.g. `EndUsers EU`)\n                    return float(\"Infinity\"), -1\n                r = pat.search(self.unescape_name(item.lower()))\n                if r:\n",
                    "rendered": {
                      "text": "                if item.lower()[: len(text) + 1] in (text, text + \" \"):\n                    # Exact match of first word in suggestion\n                    # This is to get exact alias matches to the top\n                    # E.g. for input `e`, 'Entries E' should be on top\n                    # (before e.g. `EndUsers EU`)\n                    return float(\"Infinity\"), -1\n                r = pat.search(self.unescape_name(item.lower()))\n                if r:\n",
                      "markdown": "`                if item.lower()[: len(text) + 1] in (text, text + \" \"):\n                    # Exact match of first word in suggestion\n                    # This is to get exact alias matches to the top\n                    # E.g. for input `e`, 'Entries E' should be on top\n                    # (before e.g. `EndUsers EU`)\n                    return float(\"Infinity\"), -1\n                r = pat.search(self.unescape_name(item.lower()))\n                if r:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 63,
                  "endLine": 402,
                  "snippet": {
                    "text": "            def _match(item):\n                if item.lower()[: len(text) + 1] in (text, text + \" \"):\n                    # Exact match of first word in suggestion\n                    # This is to get exact alias matches to the top\n                    # E.g. for input `e`, 'Entries E' should be on top\n                    # (before e.g. `EndUsers EU`)\n                    return float(\"Infinity\"), -1\n                r = pat.search(self.unescape_name(item.lower()))\n",
                    "rendered": {
                      "text": "            def _match(item):\n                if item.lower()[: len(text) + 1] in (text, text + \" \"):\n                    # Exact match of first word in suggestion\n                    # This is to get exact alias matches to the top\n                    # E.g. for input `e`, 'Entries E' should be on top\n                    # (before e.g. `EndUsers EU`)\n                    return float(\"Infinity\"), -1\n                r = pat.search(self.unescape_name(item.lower()))\n",
                      "markdown": "`            def _match(item):\n                if item.lower()[: len(text) + 1] in (text, text + \" \"):\n                    # Exact match of first word in suggestion\n                    # This is to get exact alias matches to the top\n                    # E.g. for input `e`, 'Entries E' should be on top\n                    # (before e.g. `EndUsers EU`)\n                    return float(\"Infinity\"), -1\n                r = pat.search(self.unescape_name(item.lower()))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 20,
                  "endLine": 341,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        \"\"\"Find completion matches for the given text.\n\n        Given the user's input text and a collection of available\n        completions, find completions matching the last word of the\n        text.\n\n        `collection` can be either a list of strings or a list of Candidate\n",
                    "rendered": {
                      "text": "        \"\"\"Find completion matches for the given text.\n\n        Given the user's input text and a collection of available\n        completions, find completions matching the last word of the\n        text.\n\n        `collection` can be either a list of strings or a list of Candidate\n",
                      "markdown": "`        \"\"\"Find completion matches for the given text.\n\n        Given the user's input text and a collection of available\n        completions, find completions matching the last word of the\n        text.\n\n        `collection` can be either a list of strings or a list of Candidate\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgcompleter.py"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 48,
                  "endLine": 275,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    def _refresh_arg_list_cache(self):\n        # We keep a cache of {function_usage:{function_metadata: function_arg_list_string}}\n        # This is used when suggesting functions, to avoid the latency that would result\n        # if we'd recalculate the arg lists each time we suggest functions (in large DBs)\n        self._arg_list_cache = {\n            usage: {\n                meta: self._arg_list(meta, usage)\n",
                    "rendered": {
                      "text": "    def _refresh_arg_list_cache(self):\n        # We keep a cache of {function_usage:{function_metadata: function_arg_list_string}}\n        # This is used when suggesting functions, to avoid the latency that would result\n        # if we'd recalculate the arg lists each time we suggest functions (in large DBs)\n        self._arg_list_cache = {\n            usage: {\n                meta: self._arg_list(meta, usage)\n",
                      "markdown": "`    def _refresh_arg_list_cache(self):\n        # We keep a cache of {function_usage:{function_metadata: function_arg_list_string}}\n        # This is used when suggesting functions, to avoid the latency that would result\n        # if we'd recalculate the arg lists each time we suggest functions (in large DBs)\n        self._arg_list_cache = {\n            usage: {\n                meta: self._arg_list(meta, usage)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/completion_refresher.py"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 23,
                  "endLine": 89,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        for callback in callbacks:\n            callback(completer)\n\n        if not settings.get(\"single_connection\") and executor.conn:\n            # close connection established with pgexecute.copy()\n            executor.conn.close()\n\n",
                    "rendered": {
                      "text": "        for callback in callbacks:\n            callback(completer)\n\n        if not settings.get(\"single_connection\") and executor.conn:\n            # close connection established with pgexecute.copy()\n            executor.conn.close()\n\n",
                      "markdown": "`        for callback in callbacks:\n            callback(completer)\n\n        if not settings.get(\"single_connection\") and executor.conn:\n            # close connection established with pgexecute.copy()\n            executor.conn.close()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/completion_refresher.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 19,
                  "endLine": 56,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            smart_completion=True, pgspecial=special, settings=settings\n        )\n\n        if settings.get(\"single_connection\"):\n            executor = pgexecute\n        else:\n            # Create a new pgexecute method to populate the completions.\n",
                    "rendered": {
                      "text": "            smart_completion=True, pgspecial=special, settings=settings\n        )\n\n        if settings.get(\"single_connection\"):\n            executor = pgexecute\n        else:\n            # Create a new pgexecute method to populate the completions.\n",
                      "markdown": "`            smart_completion=True, pgspecial=special, settings=settings\n        )\n\n        if settings.get(\"single_connection\"):\n            executor = pgexecute\n        else:\n            # Create a new pgexecute method to populate the completions.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 25,
                  "endLine": 431,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            \"\",\n            0,\n            self.terminal_width,\n            len(self.plan.get(\"Plans\", [])) == 1,\n        )\n\n    def get_list(self):\n",
                    "rendered": {
                      "text": "            \"\",\n            0,\n            self.terminal_width,\n            len(self.plan.get(\"Plans\", [])) == 1,\n        )\n\n    def get_list(self):\n",
                      "markdown": "`            \"\",\n            0,\n            self.terminal_width,\n            len(self.plan.get(\"Plans\", [])) == 1,\n        )\n\n    def get_list(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 48,
                  "endLine": 412,
                  "endColumn": 53,
                  "snippet": {
                    "text": "                    )\n                )\n\n        for index, nested_plan in enumerate(plan.get(\"Plans\", [])):\n            self.create_lines(\n                nested_plan, prefix, depth + 1, width, index == len(plan[\"Plans\"]) - 1\n            )\n",
                    "rendered": {
                      "text": "                    )\n                )\n\n        for index, nested_plan in enumerate(plan.get(\"Plans\", [])):\n            self.create_lines(\n                nested_plan, prefix, depth + 1, width, index == len(plan[\"Plans\"]) - 1\n            )\n",
                      "markdown": "`                    )\n                )\n\n        for index, nested_plan in enumerate(plan.get(\"Plans\", [])):\n            self.create_lines(\n                nested_plan, prefix, depth + 1, width, index == len(plan[\"Plans\"]) - 1\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 19,
                  "endLine": 400,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n        current_prefix = prefix\n\n        if len(plan.get(\"Output\", [])) > 0:\n            for index, line in enumerate(\n                self.wrap_string(\" + \".join(plan[\"Output\"]), cols)\n            ):\n",
                    "rendered": {
                      "text": "\n        current_prefix = prefix\n\n        if len(plan.get(\"Output\", [])) > 0:\n            for index, line in enumerate(\n                self.wrap_string(\" + \".join(plan[\"Output\"]), cols)\n            ):\n",
                      "markdown": "`\n        current_prefix = prefix\n\n        if len(plan.get(\"Output\", [])) > 0:\n            for index, line in enumerate(\n                self.wrap_string(\" + \".join(plan[\"Output\"]), cols)\n            ):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 15,
                  "endLine": 384,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                self.output_fn(current_prefix, \"CTE %s\" % plan[\"CTE Name\"])\n            )\n\n        if plan.get(\"Planner Row Estimate Factor\") != 0:\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                    "rendered": {
                      "text": "                self.output_fn(current_prefix, \"CTE %s\" % plan[\"CTE Name\"])\n            )\n\n        if plan.get(\"Planner Row Estimate Factor\") != 0:\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                      "markdown": "`                self.output_fn(current_prefix, \"CTE %s\" % plan[\"CTE Name\"])\n            )\n\n        if plan.get(\"Planner Row Estimate Factor\") != 0:\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 15,
                  "endLine": 379,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                )\n            )\n\n        if plan.get(\"CTE Name\"):\n            self.string_lines.append(\n                self.output_fn(current_prefix, \"CTE %s\" % plan[\"CTE Name\"])\n            )\n",
                    "rendered": {
                      "text": "                )\n            )\n\n        if plan.get(\"CTE Name\"):\n            self.string_lines.append(\n                self.output_fn(current_prefix, \"CTE %s\" % plan[\"CTE Name\"])\n            )\n",
                      "markdown": "`                )\n            )\n\n        if plan.get(\"CTE Name\"):\n            self.string_lines.append(\n                self.output_fn(current_prefix, \"CTE %s\" % plan[\"CTE Name\"])\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 15,
                  "endLine": 371,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                )\n            )\n\n        if plan.get(\"Hash Condition\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                    "rendered": {
                      "text": "                )\n            )\n\n        if plan.get(\"Hash Condition\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                      "markdown": "`                )\n            )\n\n        if plan.get(\"Hash Condition\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 15,
                  "endLine": 356,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                )\n            )\n\n        if plan.get(\"Filter\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                    "rendered": {
                      "text": "                )\n            )\n\n        if plan.get(\"Filter\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                      "markdown": "`                )\n            )\n\n        if plan.get(\"Filter\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 15,
                  "endLine": 348,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                )\n            )\n\n        if plan.get(\"Index Condition\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                    "rendered": {
                      "text": "                )\n            )\n\n        if plan.get(\"Index Condition\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                      "markdown": "`                )\n            )\n\n        if plan.get(\"Index Condition\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 15,
                  "endLine": 340,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                )\n            )\n\n        if plan.get(\"Index Name\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                    "rendered": {
                      "text": "                )\n            )\n\n        if plan.get(\"Index Name\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                      "markdown": "`                )\n            )\n\n        if plan.get(\"Index Name\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 28,
                  "endLine": 334,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                    \"%s %s.%s\"\n                    % (\n                        self.muted_format(\"on\"),\n                        plan.get(\"Schema\", \"unknown\"),\n                        plan[\"Relation Name\"],\n                    ),\n                )\n",
                    "rendered": {
                      "text": "                    \"%s %s.%s\"\n                    % (\n                        self.muted_format(\"on\"),\n                        plan.get(\"Schema\", \"unknown\"),\n                        plan[\"Relation Name\"],\n                    ),\n                )\n",
                      "markdown": "`                    \"%s %s.%s\"\n                    % (\n                        self.muted_format(\"on\"),\n                        plan.get(\"Schema\", \"unknown\"),\n                        plan[\"Relation Name\"],\n                    ),\n                )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 15,
                  "endLine": 327,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                )\n            )\n\n        if plan.get(\"Relation Name\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                    "rendered": {
                      "text": "                )\n            )\n\n        if plan.get(\"Relation Name\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                      "markdown": "`                )\n            )\n\n        if plan.get(\"Relation Name\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 15,
                  "endLine": 319,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n        current_prefix = current_prefix + \"  \"\n\n        if plan.get(\"Join Type\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                    "rendered": {
                      "text": "\n        current_prefix = current_prefix + \"  \"\n\n        if plan.get(\"Join Type\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                      "markdown": "`\n        current_prefix = current_prefix + \"  \"\n\n        if plan.get(\"Join Type\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 15,
                  "endLine": 284,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                self.output_fn(current_prefix, \"%s\" % self.muted_format(line))\n            )\n        #\n        if plan.get(\"Actual Duration\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                    "rendered": {
                      "text": "                self.output_fn(current_prefix, \"%s\" % self.muted_format(line))\n            )\n        #\n        if plan.get(\"Actual Duration\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n",
                      "markdown": "`                self.output_fn(current_prefix, \"%s\" % self.muted_format(line))\n            )\n        #\n        if plan.get(\"Actual Duration\"):\n            self.string_lines.append(\n                self.output_fn(\n                    current_prefix,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 24,
                  "endLine": 277,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        cols = width - len(current_prefix)\n\n        for line in self.wrap_string(\n            DESCRIPTIONS.get(plan[\"Node Type\"], \"Not found : %s\" % plan[\"Node Type\"]),\n            cols,\n        ):\n            self.string_lines.append(\n",
                    "rendered": {
                      "text": "        cols = width - len(current_prefix)\n\n        for line in self.wrap_string(\n            DESCRIPTIONS.get(plan[\"Node Type\"], \"Not found : %s\" % plan[\"Node Type\"]),\n            cols,\n        ):\n            self.string_lines.append(\n",
                      "markdown": "`        cols = width - len(current_prefix)\n\n        for line in self.wrap_string(\n            DESCRIPTIONS.get(plan[\"Node Type\"], \"Not found : %s\" % plan[\"Node Type\"]),\n            cols,\n        ):\n            self.string_lines.append(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 23,
                  "endLine": 218,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            else:\n                return \"├►  \"\n        else:\n            if len(plan.get(\"Plans\", [])) == 0:\n                return \"   \"\n            else:\n                return \"│  \"\n",
                    "rendered": {
                      "text": "            else:\n                return \"├►  \"\n        else:\n            if len(plan.get(\"Plans\", [])) == 0:\n                return \"   \"\n            else:\n                return \"│  \"\n",
                      "markdown": "`            else:\n                return \"├►  \"\n        else:\n            if len(plan.get(\"Plans\", [])) == 0:\n                return \"   \"\n            else:\n                return \"│  \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 23,
                  "endLine": 213,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n    def get_terminator(self, index, plan):\n        if index == 0:\n            if len(plan.get(\"Plans\", [])) == 0:\n                return \"⌡► \"\n            else:\n                return \"├►  \"\n",
                    "rendered": {
                      "text": "\n    def get_terminator(self, index, plan):\n        if index == 0:\n            if len(plan.get(\"Plans\", [])) == 0:\n                return \"⌡► \"\n            else:\n                return \"├►  \"\n",
                      "markdown": "`\n    def get_terminator(self, index, plan):\n        if index == 0:\n            if len(plan.get(\"Plans\", [])) == 0:\n                return \"⌡► \"\n            else:\n                return \"├►  \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 15,
                  "endLine": 206,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            tags.append(self.tag_format(\"costliest\"))\n        if plan[\"Largest\"]:\n            tags.append(self.tag_format(\"largest\"))\n        if plan.get(\"Planner Row Estimate Factor\", 0) >= 100:\n            tags.append(self.tag_format(\"bad estimate\"))\n\n        return \" \".join(tags)\n",
                    "rendered": {
                      "text": "            tags.append(self.tag_format(\"costliest\"))\n        if plan[\"Largest\"]:\n            tags.append(self.tag_format(\"largest\"))\n        if plan.get(\"Planner Row Estimate Factor\", 0) >= 100:\n            tags.append(self.tag_format(\"bad estimate\"))\n\n        return \" \".join(tags)\n",
                      "markdown": "`            tags.append(self.tag_format(\"costliest\"))\n        if plan[\"Largest\"]:\n            tags.append(self.tag_format(\"largest\"))\n        if plan.get(\"Planner Row Estimate Factor\", 0) >= 100:\n            tags.append(self.tag_format(\"bad estimate\"))\n\n        return \" \".join(tags)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 15,
                  "endLine": 189,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        if plan.get(\"Scan Direction\"):\n            details.append(plan[\"Scan Direction\"])\n\n        if plan.get(\"Strategy\"):\n            details.append(plan[\"Strategy\"])\n\n        if len(details) > 0:\n",
                    "rendered": {
                      "text": "        if plan.get(\"Scan Direction\"):\n            details.append(plan[\"Scan Direction\"])\n\n        if plan.get(\"Strategy\"):\n            details.append(plan[\"Strategy\"])\n\n        if len(details) > 0:\n",
                      "markdown": "`        if plan.get(\"Scan Direction\"):\n            details.append(plan[\"Scan Direction\"])\n\n        if plan.get(\"Strategy\"):\n            details.append(plan[\"Strategy\"])\n\n        if len(details) > 0:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 15,
                  "endLine": 186,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    def format_details(self, plan):\n        details = []\n\n        if plan.get(\"Scan Direction\"):\n            details.append(plan[\"Scan Direction\"])\n\n        if plan.get(\"Strategy\"):\n",
                    "rendered": {
                      "text": "    def format_details(self, plan):\n        details = []\n\n        if plan.get(\"Scan Direction\"):\n            details.append(plan[\"Scan Direction\"])\n\n        if plan.get(\"Strategy\"):\n",
                      "markdown": "`    def format_details(self, plan):\n        details = []\n\n        if plan.get(\"Scan Direction\"):\n            details.append(plan[\"Scan Direction\"])\n\n        if plan.get(\"Strategy\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 25,
                  "endLine": 161,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        if not self.explain.get(\"Total Cost\"):\n            self.explain[\"Total Cost\"] = plan[\"Actual Cost\"]\n        elif self.explain.get(\"Total Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Total Cost\"] = plan[\"Actual Cost\"]\n\n    #\n",
                    "rendered": {
                      "text": "\n        if not self.explain.get(\"Total Cost\"):\n            self.explain[\"Total Cost\"] = plan[\"Actual Cost\"]\n        elif self.explain.get(\"Total Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Total Cost\"] = plan[\"Actual Cost\"]\n\n    #\n",
                      "markdown": "`\n        if not self.explain.get(\"Total Cost\"):\n            self.explain[\"Total Cost\"] = plan[\"Actual Cost\"]\n        elif self.explain.get(\"Total Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Total Cost\"] = plan[\"Actual Cost\"]\n\n    #\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 27,
                  "endLine": 159,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        elif self.explain.get(\"Max Duration\") < plan[\"Actual Duration\"]:\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n\n        if not self.explain.get(\"Total Cost\"):\n            self.explain[\"Total Cost\"] = plan[\"Actual Cost\"]\n        elif self.explain.get(\"Total Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Total Cost\"] = plan[\"Actual Cost\"]\n",
                    "rendered": {
                      "text": "        elif self.explain.get(\"Max Duration\") < plan[\"Actual Duration\"]:\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n\n        if not self.explain.get(\"Total Cost\"):\n            self.explain[\"Total Cost\"] = plan[\"Actual Cost\"]\n        elif self.explain.get(\"Total Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Total Cost\"] = plan[\"Actual Cost\"]\n",
                      "markdown": "`        elif self.explain.get(\"Max Duration\") < plan[\"Actual Duration\"]:\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n\n        if not self.explain.get(\"Total Cost\"):\n            self.explain[\"Total Cost\"] = plan[\"Actual Cost\"]\n        elif self.explain.get(\"Total Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Total Cost\"] = plan[\"Actual Cost\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 25,
                  "endLine": 156,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        if not self.explain.get(\"Max Duration\"):\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n        elif self.explain.get(\"Max Duration\") < plan[\"Actual Duration\"]:\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n\n        if not self.explain.get(\"Total Cost\"):\n",
                    "rendered": {
                      "text": "\n        if not self.explain.get(\"Max Duration\"):\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n        elif self.explain.get(\"Max Duration\") < plan[\"Actual Duration\"]:\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n\n        if not self.explain.get(\"Total Cost\"):\n",
                      "markdown": "`\n        if not self.explain.get(\"Max Duration\"):\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n        elif self.explain.get(\"Max Duration\") < plan[\"Actual Duration\"]:\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n\n        if not self.explain.get(\"Total Cost\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 27,
                  "endLine": 154,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        elif self.explain.get(\"Max Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n\n        if not self.explain.get(\"Max Duration\"):\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n        elif self.explain.get(\"Max Duration\") < plan[\"Actual Duration\"]:\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n",
                    "rendered": {
                      "text": "        elif self.explain.get(\"Max Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n\n        if not self.explain.get(\"Max Duration\"):\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n        elif self.explain.get(\"Max Duration\") < plan[\"Actual Duration\"]:\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n",
                      "markdown": "`        elif self.explain.get(\"Max Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n\n        if not self.explain.get(\"Max Duration\"):\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n        elif self.explain.get(\"Max Duration\") < plan[\"Actual Duration\"]:\n            self.explain[\"Max Duration\"] = plan[\"Actual Duration\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 25,
                  "endLine": 151,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        if not self.explain.get(\"Max Cost\"):\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n        elif self.explain.get(\"Max Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n\n        if not self.explain.get(\"Max Duration\"):\n",
                    "rendered": {
                      "text": "\n        if not self.explain.get(\"Max Cost\"):\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n        elif self.explain.get(\"Max Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n\n        if not self.explain.get(\"Max Duration\"):\n",
                      "markdown": "`\n        if not self.explain.get(\"Max Cost\"):\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n        elif self.explain.get(\"Max Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n\n        if not self.explain.get(\"Max Duration\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 27,
                  "endLine": 149,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        elif self.explain.get(\"Max Rows\") < plan[\"Actual Rows\"]:\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n\n        if not self.explain.get(\"Max Cost\"):\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n        elif self.explain.get(\"Max Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n",
                    "rendered": {
                      "text": "        elif self.explain.get(\"Max Rows\") < plan[\"Actual Rows\"]:\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n\n        if not self.explain.get(\"Max Cost\"):\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n        elif self.explain.get(\"Max Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n",
                      "markdown": "`        elif self.explain.get(\"Max Rows\") < plan[\"Actual Rows\"]:\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n\n        if not self.explain.get(\"Max Cost\"):\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n        elif self.explain.get(\"Max Cost\") < plan[\"Actual Cost\"]:\n            self.explain[\"Max Cost\"] = plan[\"Actual Cost\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 25,
                  "endLine": 146,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    def calculate_maximums(self, plan):\n        if not self.explain.get(\"Max Rows\"):\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n        elif self.explain.get(\"Max Rows\") < plan[\"Actual Rows\"]:\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n\n        if not self.explain.get(\"Max Cost\"):\n",
                    "rendered": {
                      "text": "    def calculate_maximums(self, plan):\n        if not self.explain.get(\"Max Rows\"):\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n        elif self.explain.get(\"Max Rows\") < plan[\"Actual Rows\"]:\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n\n        if not self.explain.get(\"Max Cost\"):\n",
                      "markdown": "`    def calculate_maximums(self, plan):\n        if not self.explain.get(\"Max Rows\"):\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n        elif self.explain.get(\"Max Rows\") < plan[\"Actual Rows\"]:\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n\n        if not self.explain.get(\"Max Cost\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 27,
                  "endLine": 144,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        return plan\n\n    def calculate_maximums(self, plan):\n        if not self.explain.get(\"Max Rows\"):\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n        elif self.explain.get(\"Max Rows\") < plan[\"Actual Rows\"]:\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n",
                    "rendered": {
                      "text": "        return plan\n\n    def calculate_maximums(self, plan):\n        if not self.explain.get(\"Max Rows\"):\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n        elif self.explain.get(\"Max Rows\") < plan[\"Actual Rows\"]:\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n",
                      "markdown": "`        return plan\n\n    def calculate_maximums(self, plan):\n        if not self.explain.get(\"Max Rows\"):\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n        elif self.explain.get(\"Max Rows\") < plan[\"Actual Rows\"]:\n            self.explain[\"Max Rows\"] = plan[\"Actual Rows\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 35,
                  "endLine": 138,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        plan[\"Largest\"] = plan[\"Actual Rows\"] == self.explain[\"Max Rows\"]\n        plan[\"Slowest\"] = plan[\"Actual Duration\"] == self.explain[\"Max Duration\"]\n\n        for index in range(len(plan.get(\"Plans\", []))):\n            _plan = plan[\"Plans\"][index]\n            plan[\"Plans\"][index] = self.calculate_outlier_nodes(_plan)\n        return plan\n",
                    "rendered": {
                      "text": "        plan[\"Largest\"] = plan[\"Actual Rows\"] == self.explain[\"Max Rows\"]\n        plan[\"Slowest\"] = plan[\"Actual Duration\"] == self.explain[\"Max Duration\"]\n\n        for index in range(len(plan.get(\"Plans\", []))):\n            _plan = plan[\"Plans\"][index]\n            plan[\"Plans\"][index] = self.calculate_outlier_nodes(_plan)\n        return plan\n",
                      "markdown": "`        plan[\"Largest\"] = plan[\"Actual Rows\"] == self.explain[\"Max Rows\"]\n        plan[\"Slowest\"] = plan[\"Actual Duration\"] == self.explain[\"Max Duration\"]\n\n        for index in range(len(plan.get(\"Plans\", []))):\n            _plan = plan[\"Plans\"][index]\n            plan[\"Plans\"][index] = self.calculate_outlier_nodes(_plan)\n        return plan\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 25,
                  "endLine": 120,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        plan[\"Actual Duration\"] = plan[\"Actual Total Time\"]\n        plan[\"Actual Cost\"] = plan[\"Total Cost\"]\n\n        for child in plan.get(\"Plans\", []):\n            if child[\"Node Type\"] != \"CTEScan\":\n                plan[\"Actual Duration\"] = (\n                    plan[\"Actual Duration\"] - child[\"Actual Total Time\"]\n",
                    "rendered": {
                      "text": "        plan[\"Actual Duration\"] = plan[\"Actual Total Time\"]\n        plan[\"Actual Cost\"] = plan[\"Total Cost\"]\n\n        for child in plan.get(\"Plans\", []):\n            if child[\"Node Type\"] != \"CTEScan\":\n                plan[\"Actual Duration\"] = (\n                    plan[\"Actual Duration\"] - child[\"Actual Total Time\"]\n",
                      "markdown": "`        plan[\"Actual Duration\"] = plan[\"Actual Total Time\"]\n        plan[\"Actual Cost\"] = plan[\"Total Cost\"]\n\n        for child in plan.get(\"Plans\", []):\n            if child[\"Node Type\"] != \"CTEScan\":\n                plan[\"Actual Duration\"] = (\n                    plan[\"Actual Duration\"] - child[\"Actual Total Time\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 35,
                  "endLine": 49,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        plan = self.calculate_actuals(plan)\n        self.calculate_maximums(plan)\n        #\n        for index in range(len(plan.get(\"Plans\", []))):\n            _plan = plan[\"Plans\"][index]\n            plan[\"Plans\"][index] = self.process_plan(_plan)\n        return plan\n",
                    "rendered": {
                      "text": "        plan = self.calculate_actuals(plan)\n        self.calculate_maximums(plan)\n        #\n        for index in range(len(plan.get(\"Plans\", []))):\n            _plan = plan[\"Plans\"][index]\n            plan[\"Plans\"][index] = self.process_plan(_plan)\n        return plan\n",
                      "markdown": "`        plan = self.calculate_actuals(plan)\n        self.calculate_maximums(plan)\n        #\n        for index in range(len(plan.get(\"Plans\", []))):\n            _plan = plan[\"Plans\"][index]\n            plan[\"Plans\"][index] = self.process_plan(_plan)\n        return plan\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 123,
                  "endLine": 20,
                  "endColumn": 129,
                  "snippet": {
                    "text": "ration from the index and do not read from the corresponding table.\",\n    \"Bitmap Heap Scan\": \"Searches through the pages returned by the Bitmap Index Scan for relevant rows.\",\n    \"Bitmap Index Scan\": \"Uses a Bitmap Index (index which uses 1 bit per page) to find all relevant pages. Results of this node are fed to the Bitmap Heap Scan.\",\n    \"CTEScan\": \"Performs a sequential scan of Common Table Expression (CTE) query results. Note that results of a CTE are materialized (calculated and temporarily stored).\",\n    \"ProjectSet\": \"ProjectSet appears when the SELECT or ORDER BY clause of the query.  The",
                    "rendered": {
                      "text": "ration from the index and do not read from the corresponding table.\",\n    \"Bitmap Heap Scan\": \"Searches through the pages returned by the Bitmap Index Scan for relevant rows.\",\n    \"Bitmap Index Scan\": \"Uses a Bitmap Index (index which uses 1 bit per page) to find all relevant pages. Results of this node are fed to the Bitmap Heap Scan.\",\n    \"CTEScan\": \"Performs a sequential scan of Common Table Expression (CTE) query results. Note that results of a CTE are materialized (calculated and temporarily stored).\",\n    \"ProjectSet\": \"ProjectSet appears when the SELECT or ORDER BY clause of the query.  The",
                      "markdown": "`ration from the index and do not read from the corresponding table.\",\n    \"Bitmap Heap Scan\": \"Searches through the pages returned by the Bitmap Index Scan for relevant rows.\",\n    \"Bitmap Index Scan\": \"Uses a Bitmap Index (index which uses 1 bit per page) to find all relevant pages. Results of this node are fed to the Bitmap Heap Scan.\",\n    \"CTEScan\": \"Performs a sequential scan of Common Table Expression (CTE) query results. Note that results of a CTE are materialized (calculated and temporarily stored).\",\n    \"ProjectSet\": \"ProjectSet appears when the SELECT or ORDER BY clause of the query.  The`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 82,
                  "endLine": 20,
                  "endColumn": 88,
                  "snippet": {
                    "text": "ndex Only Scans perform a single read operation from the index and do not read from the corresponding table.\",\n    \"Bitmap Heap Scan\": \"Searches through the pages returned by the Bitmap Index Scan for relevant rows.\",\n    \"Bitmap Index Scan\": \"Uses a Bitmap Index (index which uses 1 bit per page) to find all relevant pages. Results of this node are fed to the Bitmap Heap Scan.\",\n    \"CTEScan\": \"Performs a sequential scan of Common Table Expression (CTE) query results. Note that results of a CTE are materialized (calculated and temporarily stored).\",\n    \"ProjectSet\": \"ProjectSet appears when the SEL",
                    "rendered": {
                      "text": "ndex Only Scans perform a single read operation from the index and do not read from the corresponding table.\",\n    \"Bitmap Heap Scan\": \"Searches through the pages returned by the Bitmap Index Scan for relevant rows.\",\n    \"Bitmap Index Scan\": \"Uses a Bitmap Index (index which uses 1 bit per page) to find all relevant pages. Results of this node are fed to the Bitmap Heap Scan.\",\n    \"CTEScan\": \"Performs a sequential scan of Common Table Expression (CTE) query results. Note that results of a CTE are materialized (calculated and temporarily stored).\",\n    \"ProjectSet\": \"ProjectSet appears when the SEL",
                      "markdown": "`ndex Only Scans perform a single read operation from the index and do not read from the corresponding table.\",\n    \"Bitmap Heap Scan\": \"Searches through the pages returned by the Bitmap Index Scan for relevant rows.\",\n    \"Bitmap Index Scan\": \"Uses a Bitmap Index (index which uses 1 bit per page) to find all relevant pages. Results of this node are fed to the Bitmap Heap Scan.\",\n    \"CTEScan\": \"Performs a sequential scan of Common Table Expression (CTE) query results. Note that results of a CTE are materialized (calculated and temporarily stored).\",\n    \"ProjectSet\": \"ProjectSet appears when the SEL`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 105,
                  "endLine": 9,
                  "endColumn": 111,
                  "snippet": {
                    "text": " merge multiple record sets by appending them together.\",\n    \"Limit\": \"Returns a specified number of rows from a record set.\",\n    \"Sort\": \"Sorts a record set based on the specified sort key.\",\n    \"Nested Loop\": \"Merges two record sets by looping through every record in the first set and trying to find a match in the second set. All matching records are returned.\",\n    \"Merge Join\": \"Merges two record sets by first sorting them on a join key.\",\n    \"Hash\": \"Generates a hash table from the records in the input recordset. Hash is used by Hash Join.\",\n    \"Hash Join\": \"Joins to record sets by hashing",
                    "rendered": {
                      "text": " merge multiple record sets by appending them together.\",\n    \"Limit\": \"Returns a specified number of rows from a record set.\",\n    \"Sort\": \"Sorts a record set based on the specified sort key.\",\n    \"Nested Loop\": \"Merges two record sets by looping through every record in the first set and trying to find a match in the second set. All matching records are returned.\",\n    \"Merge Join\": \"Merges two record sets by first sorting them on a join key.\",\n    \"Hash\": \"Generates a hash table from the records in the input recordset. Hash is used by Hash Join.\",\n    \"Hash Join\": \"Joins to record sets by hashing",
                      "markdown": "` merge multiple record sets by appending them together.\",\n    \"Limit\": \"Returns a specified number of rows from a record set.\",\n    \"Sort\": \"Sorts a record set based on the specified sort key.\",\n    \"Nested Loop\": \"Merges two record sets by looping through every record in the first set and trying to find a match in the second set. All matching records are returned.\",\n    \"Merge Join\": \"Merges two record sets by first sorting them on a join key.\",\n    \"Hash\": \"Generates a hash table from the records in the input recordset. Hash is used by Hash Join.\",\n    \"Hash Join\": \"Joins to record sets by hashing`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pyev.py"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 54,
                  "endLine": 8,
                  "endColumn": 60,
                  "snippet": {
                    "text": "import textwrap\nimport re\nfrom click import style as color\n\nDESCRIPTIONS = {\n    \"Append\": \"Used in a UNION to merge multiple record sets by appending them together.\",\n    \"Limit\": \"Returns a specified number of rows from a record set.\",\n    \"Sort\": \"Sorts a record set based on the specified sort key.\",\n    \"Nested Loop\": \"Merges two record sets by looping through every record in the first set and trying to find a match in the second set. All matching records are returned.\",\n    \"Merge Join\": \"Merges two record sets by first sorting them on a join key.\",\n    \"Hash\": \"Generates a hash table f",
                    "rendered": {
                      "text": "import textwrap\nimport re\nfrom click import style as color\n\nDESCRIPTIONS = {\n    \"Append\": \"Used in a UNION to merge multiple record sets by appending them together.\",\n    \"Limit\": \"Returns a specified number of rows from a record set.\",\n    \"Sort\": \"Sorts a record set based on the specified sort key.\",\n    \"Nested Loop\": \"Merges two record sets by looping through every record in the first set and trying to find a match in the second set. All matching records are returned.\",\n    \"Merge Join\": \"Merges two record sets by first sorting them on a join key.\",\n    \"Hash\": \"Generates a hash table f",
                      "markdown": "`import textwrap\nimport re\nfrom click import style as color\n\nDESCRIPTIONS = {\n    \"Append\": \"Used in a UNION to merge multiple record sets by appending them together.\",\n    \"Limit\": \"Returns a specified number of rows from a record set.\",\n    \"Sort\": \"Sorts a record set based on the specified sort key.\",\n    \"Nested Loop\": \"Merges two record sets by looping through every record in the first set and trying to find a match in the second set. All matching records are returned.\",\n    \"Merge Join\": \"Merges two record sets by first sorting them on a join key.\",\n    \"Hash\": \"Generates a hash table f`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/parseutils/ctes.py"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 5,
                  "endLine": 114,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\ndef extract_column_names(parsed):\n    # Find the first DML token to check if it's a SELECT or INSERT/UPDATE/DELETE\n    idx, tok = parsed.token_next_by(t=DML)\n    tok_val = tok and tok.value.lower()\n\n",
                    "rendered": {
                      "text": "\n\ndef extract_column_names(parsed):\n    # Find the first DML token to check if it's a SELECT or INSERT/UPDATE/DELETE\n    idx, tok = parsed.token_next_by(t=DML)\n    tok_val = tok and tok.value.lower()\n\n",
                      "markdown": "`\n\ndef extract_column_names(parsed):\n    # Find the first DML token to check if it's a SELECT or INSERT/UPDATE/DELETE\n    idx, tok = parsed.token_next_by(t=DML)\n    tok_val = tok and tok.value.lower()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/parseutils/ctes.py"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 5,
                  "endLine": 99,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    if not cte_name:\n        return None\n\n    # Find the start position of the opening parens enclosing the cte body\n    idx, parens = tok.token_next_by(Parenthesis)\n    if not parens:\n        return None\n",
                    "rendered": {
                      "text": "    if not cte_name:\n        return None\n\n    # Find the start position of the opening parens enclosing the cte body\n    idx, parens = tok.token_next_by(Parenthesis)\n    if not parens:\n        return None\n",
                      "markdown": "`    if not cte_name:\n        return None\n\n    # Find the start position of the opening parens enclosing the cte body\n    idx, parens = tok.token_next_by(Parenthesis)\n    if not parens:\n        return None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/parseutils/__init__.py"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "endLine": 58,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        \"moderate\": BASE_KEYWORDS,\n        \"off\": [],\n        \"\": [],\n    }.get(warning_level[0], warning_level)\n",
                    "rendered": {
                      "text": "        \"moderate\": BASE_KEYWORDS,\n        \"off\": [],\n        \"\": [],\n    }.get(warning_level[0], warning_level)\n",
                      "markdown": "`        \"moderate\": BASE_KEYWORDS,\n        \"off\": [],\n        \"\": [],\n    }.get(warning_level[0], warning_level)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/parseutils/__init__.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 37,
                  "endLine": 22,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\ndef query_is_unconditional_update(formatted_sql):\n    \"\"\"Check if the query starts with UPDATE and contains no WHERE.\"\"\"\n    tokens = formatted_sql.split()\n    return bool(tokens) and tokens[0] == \"update\" and \"where\" not in tokens\n\n",
                    "rendered": {
                      "text": "\n\ndef query_is_unconditional_update(formatted_sql):\n    \"\"\"Check if the query starts with UPDATE and contains no WHERE.\"\"\"\n    tokens = formatted_sql.split()\n    return bool(tokens) and tokens[0] == \"update\" and \"where\" not in tokens\n\n",
                      "markdown": "`\n\ndef query_is_unconditional_update(formatted_sql):\n    \"\"\"Check if the query starts with UPDATE and contains no WHERE.\"\"\"\n    tokens = formatted_sql.split()\n    return bool(tokens) and tokens[0] == \"update\" and \"where\" not in tokens\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 142,
                  "endLine": 153,
                  "endColumn": 150,
                  "snippet": {
                    "text": "      --warn [all|moderate|off]  Warn before running a destructive query.\n      --help                     Show this message and exit.\n\n``pgcli`` also supports many of the same `environment variables`_ as ``psql`` for login options (e.g. ``PGHOST``, ``PGPORT``, ``PGUSER``, ``PGPASSWORD``, ``PGDATABASE``).\n\nThe SSL-related environment variables are also supported, so if you need to connect a postgres database via ssl connection, you can set set environment like this:\n\n",
                    "rendered": {
                      "text": "      --warn [all|moderate|off]  Warn before running a destructive query.\n      --help                     Show this message and exit.\n\n``pgcli`` also supports many of the same `environment variables`_ as ``psql`` for login options (e.g. ``PGHOST``, ``PGPORT``, ``PGUSER``, ``PGPASSWORD``, ``PGDATABASE``).\n\nThe SSL-related environment variables are also supported, so if you need to connect a postgres database via ssl connection, you can set set environment like this:\n\n",
                      "markdown": "`      --warn [all|moderate|off]  Warn before running a destructive query.\n      --help                     Show this message and exit.\n\n``pgcli`` also supports many of the same `environment variables`_ as ``psql`` for login options (e.g. ``PGHOST``, ``PGPORT``, ``PGUSER``, ``PGPASSWORD``, ``PGDATABASE``).\n\nThe SSL-related environment variables are also supported, so if you need to connect a postgres database via ssl connection, you can set set environment like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 50,
                  "endLine": 132,
                  "endColumn": 58,
                  "snippet": {
                    "text": "      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n      -d, --dbname TEXT          database name to connect to.\n",
                    "rendered": {
                      "text": "      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n      -d, --dbname TEXT          database name to connect to.\n",
                      "markdown": "`      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n      -d, --dbname TEXT          database name to connect to.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 15,
                  "endLine": 132,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n      -d, --dbname TEXT          database name to connect to.\n",
                    "rendered": {
                      "text": "      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n      -d, --dbname TEXT          database name to connect to.\n",
                      "markdown": "`      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n      -d, --dbname TEXT          database name to connect to.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 39,
                  "endLine": 131,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                                 listening.\n      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n",
                    "rendered": {
                      "text": "                                 listening.\n      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n",
                      "markdown": "`                                 listening.\n      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 12,
                  "endLine": 131,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                                 listening.\n      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n",
                    "rendered": {
                      "text": "                                 listening.\n      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n",
                      "markdown": "`                                 listening.\n      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 32,
                  "endLine": 107,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n    or\n\n    $ pgcli postgresql://[user[:password]@][netloc][:port][/dbname][?extra=value[&other=other-value]]\n\nExamples:\n\n",
                    "rendered": {
                      "text": "\n    or\n\n    $ pgcli postgresql://[user[:password]@][netloc][:port][/dbname][?extra=value[&other=other-value]]\n\nExamples:\n\n",
                      "markdown": "`\n    or\n\n    $ pgcli postgresql://[user[:password]@][netloc][:port][/dbname][?extra=value[&other=other-value]]\n\nExamples:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 4,
                  "endLine": 165,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    export PGSSLROOTCERT=\"/your-path-to-ca/ca.crt\"\n    pgcli -h localhost -p 5432 -U username postgres\n\n.. _environment variables: https://www.postgresql.org/docs/current/libpq-envars.html\n\nFeatures\n--------\n",
                    "rendered": {
                      "text": "    export PGSSLROOTCERT=\"/your-path-to-ca/ca.crt\"\n    pgcli -h localhost -p 5432 -U username postgres\n\n.. _environment variables: https://www.postgresql.org/docs/current/libpq-envars.html\n\nFeatures\n--------\n",
                      "markdown": "`    export PGSSLROOTCERT=\"/your-path-to-ca/ca.crt\"\n    pgcli -h localhost -p 5432 -U username postgres\n\n.. _environment variables: https://www.postgresql.org/docs/current/libpq-envars.html\n\nFeatures\n--------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 68,
                  "endLine": 189,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\nConfig\n------\nA config file is automatically created at ``~/.config/pgcli/config`` at first launch.\nSee the file itself for a description of all available options.\n\nContributions:\n",
                    "rendered": {
                      "text": "\nConfig\n------\nA config file is automatically created at ``~/.config/pgcli/config`` at first launch.\nSee the file itself for a description of all available options.\n\nContributions:\n",
                      "markdown": "`\nConfig\n------\nA config file is automatically created at ``~/.config/pgcli/config`` at first launch.\nSee the file itself for a description of all available options.\n\nContributions:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 38,
                  "endLine": 189,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nConfig\n------\nA config file is automatically created at ``~/.config/pgcli/config`` at first launch.\nSee the file itself for a description of all available options.\n\nContributions:\n",
                    "rendered": {
                      "text": "\nConfig\n------\nA config file is automatically created at ``~/.config/pgcli/config`` at first launch.\nSee the file itself for a description of all available options.\n\nContributions:\n",
                      "markdown": "`\nConfig\n------\nA config file is automatically created at ``~/.config/pgcli/config`` at first launch.\nSee the file itself for a description of all available options.\n\nContributions:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 44,
                  "endLine": 127,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    Options:\n      -h, --host TEXT            Host address of the postgres database.\n      -p, --port INTEGER         Port number at which the postgres instance is\n                                 listening.\n      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n",
                    "rendered": {
                      "text": "\n    Options:\n      -h, --host TEXT            Host address of the postgres database.\n      -p, --port INTEGER         Port number at which the postgres instance is\n                                 listening.\n      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n",
                      "markdown": "`\n    Options:\n      -h, --host TEXT            Host address of the postgres database.\n      -p, --port INTEGER         Port number at which the postgres instance is\n                                 listening.\n      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 56,
                  "endLine": 413,
                  "endColumn": 62,
                  "snippet": {
                    "text": "Thanks to `psycopg <https://www.psycopg.org/>`_ for providing a rock solid\ninterface to Postgres database.\n\nThanks to all the beta testers and contributors for your time and patience. :)\n\n\n.. |Build Status| image:: https://github.com/dbcli/pgcli/actions/workflows/ci.yml/badge.svg?branch=main\n",
                    "rendered": {
                      "text": "Thanks to `psycopg <https://www.psycopg.org/>`_ for providing a rock solid\ninterface to Postgres database.\n\nThanks to all the beta testers and contributors for your time and patience. :)\n\n\n.. |Build Status| image:: https://github.com/dbcli/pgcli/actions/workflows/ci.yml/badge.svg?branch=main\n",
                      "markdown": "`Thanks to `psycopg <https://www.psycopg.org/>`_ for providing a rock solid\ninterface to Postgres database.\n\nThanks to all the beta testers and contributors for your time and patience. :)\n\n\n.. |Build Status| image:: https://github.com/dbcli/pgcli/actions/workflows/ci.yml/badge.svg?branch=main\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 47,
                  "endLine": 371,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    Time: 0.003s\n\n\nExit out of pgcli session with ``Ctrl + D`` and find the query results:\n\n::\n\n",
                    "rendered": {
                      "text": "    Time: 0.003s\n\n\nExit out of pgcli session with ``Ctrl + D`` and find the query results:\n\n::\n\n",
                      "markdown": "`    Time: 0.003s\n\n\nExit out of pgcli session with ``Ctrl + D`` and find the query results:\n\n::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 5,
                  "endLine": 336,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n::\n\n    $ pip install ipython-sql\n\nAfter that, run ipython and load the ``pgcli.magic`` extension:\n\n",
                    "rendered": {
                      "text": "\n::\n\n    $ pip install ipython-sql\n\nAfter that, run ipython and load the ``pgcli.magic`` extension:\n\n",
                      "markdown": "`\n::\n\n    $ pip install ipython-sql\n\nAfter that, run ipython and load the ``pgcli.magic`` extension:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 25,
                  "endLine": 330,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nPgcli can be run from within `IPython <https://ipython.org>`_ console. When working on a query,\nit may be useful to drop into a pgcli session without leaving the IPython console, iterate on a\nquery, then quit pgcli to find the query results in your IPython workspace.\n\nAssuming you have IPython installed:\n\n",
                    "rendered": {
                      "text": "\nPgcli can be run from within `IPython <https://ipython.org>`_ console. When working on a query,\nit may be useful to drop into a pgcli session without leaving the IPython console, iterate on a\nquery, then quit pgcli to find the query results in your IPython workspace.\n\nAssuming you have IPython installed:\n\n",
                      "markdown": "`\nPgcli can be run from within `IPython <https://ipython.org>`_ console. When working on a query,\nit may be useful to drop into a pgcli session without leaving the IPython console, iterate on a\nquery, then quit pgcli to find the query results in your IPython workspace.\n\nAssuming you have IPython installed:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 5,
                  "endLine": 322,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n::\n\n    $ docker run --rm -ti -v /var/run/postgres:/var/run/postgres pgcli pgcli foo\n\n\nIPython\n",
                    "rendered": {
                      "text": "\n::\n\n    $ docker run --rm -ti -v /var/run/postgres:/var/run/postgres pgcli pgcli foo\n\n\nIPython\n",
                      "markdown": "`\n::\n\n    $ docker run --rm -ti -v /var/run/postgres:/var/run/postgres pgcli pgcli foo\n\n\nIPython\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 3,
                  "endLine": 318,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    $ docker run --rm -ti --net host pgcli pgcli -h localhost foo\n\nTo connect to a locally running instance over a unix socket, bind the socket to\nthe docker container:\n\n::\n\n",
                    "rendered": {
                      "text": "    $ docker run --rm -ti --net host pgcli pgcli -h localhost foo\n\nTo connect to a locally running instance over a unix socket, bind the socket to\nthe docker container:\n\n::\n\n",
                      "markdown": "`    $ docker run --rm -ti --net host pgcli pgcli -h localhost foo\n\nTo connect to a locally running instance over a unix socket, bind the socket to\nthe docker container:\n\n::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 5,
                  "endLine": 315,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n::\n\n    $ docker run --rm -ti --net host pgcli pgcli -h localhost foo\n\nTo connect to a locally running instance over a unix socket, bind the socket to\nthe docker container:\n",
                    "rendered": {
                      "text": "\n::\n\n    $ docker run --rm -ti --net host pgcli pgcli -h localhost foo\n\nTo connect to a locally running instance over a unix socket, bind the socket to\nthe docker container:\n",
                      "markdown": "`\n::\n\n    $ docker run --rm -ti --net host pgcli pgcli -h localhost foo\n\nTo connect to a locally running instance over a unix socket, bind the socket to\nthe docker container:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 75,
                  "endLine": 310,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n    $ docker run --rm -ti pgcli pgcli <ARGS>\n\nTo access postgresql databases listening on localhost, make sure to run the\ndocker in \"host net mode\". E.g. to access a database called \"foo\" on the\npostgresql server running on localhost:5432 (the standard port):\n\n::\n",
                    "rendered": {
                      "text": "\n    $ docker run --rm -ti pgcli pgcli <ARGS>\n\nTo access postgresql databases listening on localhost, make sure to run the\ndocker in \"host net mode\". E.g. to access a database called \"foo\" on the\npostgresql server running on localhost:5432 (the standard port):\n\n::\n",
                      "markdown": "`\n    $ docker run --rm -ti pgcli pgcli <ARGS>\n\nTo access postgresql databases listening on localhost, make sure to run the\ndocker in \"host net mode\". E.g. to access a database called \"foo\" on the\npostgresql server running on localhost:5432 (the standard port):\n\n::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 5,
                  "endLine": 307,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n::\n\n    $ docker run --rm -ti pgcli pgcli <ARGS>\n\nTo access postgresql databases listening on localhost, make sure to run the\ndocker in \"host net mode\". E.g. to access a database called \"foo\" on the\n",
                    "rendered": {
                      "text": "\n::\n\n    $ docker run --rm -ti pgcli pgcli <ARGS>\n\nTo access postgresql databases listening on localhost, make sure to run the\ndocker in \"host net mode\". E.g. to access a database called \"foo\" on the\n",
                      "markdown": "`\n::\n\n    $ docker run --rm -ti pgcli pgcli <ARGS>\n\nTo access postgresql databases listening on localhost, make sure to run the\ndocker in \"host net mode\". E.g. to access a database called \"foo\" on the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 5,
                  "endLine": 301,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n::\n\n    $ docker build -t pgcli .\n\nTo create a container from the image:\n\n",
                    "rendered": {
                      "text": "\n::\n\n    $ docker build -t pgcli .\n\nTo create a container from the image:\n\n",
                      "markdown": "`\n::\n\n    $ docker build -t pgcli .\n\nTo create a container from the image:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 292,
                  "snippet": {
                    "text": "\n    $ sudo pip install pgcli\n\n\nDocker\n======\n\nPgcli can be run from within Docker. This can be useful to try pgcli without\ninstalling it, or any dependencies, system-wide.\n",
                    "rendered": {
                      "text": "\n    $ sudo pip install pgcli\n\n\nDocker\n======\n\nPgcli can be run from within Docker. This can be useful to try pgcli without\ninstalling it, or any dependencies, system-wide.\n",
                      "markdown": "`\n    $ sudo pip install pgcli\n\n\nDocker\n======\n\nPgcli can be run from within Docker. This can be useful to try pgcli without\ninstalling it, or any dependencies, system-wide.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 10,
                  "endLine": 288,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n::\n\n    $ sudo pip install pgcli\n\n\nDocker\n",
                    "rendered": {
                      "text": "\n::\n\n    $ sudo pip install pgcli\n\n\nDocker\n",
                      "markdown": "`\n::\n\n    $ sudo pip install pgcli\n\n\nDocker\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 10,
                  "endLine": 282,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    or\n\n    $ sudo yum install python-devel postgresql-devel\n\nThen you can install pgcli:\n\n",
                    "rendered": {
                      "text": "\n    or\n\n    $ sudo yum install python-devel postgresql-devel\n\nThen you can install pgcli:\n\n",
                      "markdown": "`\n    or\n\n    $ sudo yum install python-devel postgresql-devel\n\nThen you can install pgcli:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 10,
                  "endLine": 278,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n::\n\n    $ sudo apt-get install python-dev libpq-dev libevent-dev\n\n    or\n\n",
                    "rendered": {
                      "text": "\n::\n\n    $ sudo apt-get install python-dev libpq-dev libevent-dev\n\n    or\n\n",
                      "markdown": "`\n::\n\n    $ sudo apt-get install python-dev libpq-dev libevent-dev\n\n    or\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 10,
                  "endLine": 270,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    or\n\n    $ sudo yum install python-pip  # RHEL, Centos, Fedora etc\n\n``pgcli`` requires python-dev, libpq-dev and libevent-dev packages. You can\ninstall these via your operating system package manager.\n",
                    "rendered": {
                      "text": "\n    or\n\n    $ sudo yum install python-pip  # RHEL, Centos, Fedora etc\n\n``pgcli`` requires python-dev, libpq-dev and libevent-dev packages. You can\ninstall these via your operating system package manager.\n",
                      "markdown": "`\n    or\n\n    $ sudo yum install python-pip  # RHEL, Centos, Fedora etc\n\n``pgcli`` requires python-dev, libpq-dev and libevent-dev packages. You can\ninstall these via your operating system package manager.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 10,
                  "endLine": 266,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n::\n\n    $ sudo apt-get install python-pip   # Debian, Ubuntu, Mint etc\n\n    or\n\n",
                    "rendered": {
                      "text": "\n::\n\n    $ sudo apt-get install python-pip   # Debian, Ubuntu, Mint etc\n\n    or\n\n",
                      "markdown": "`\n::\n\n    $ sudo apt-get install python-pip   # Debian, Ubuntu, Mint etc\n\n    or\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 11,
                  "endLine": 260,
                  "snippet": {
                    "text": "\n::\n\n    $ which pip\n\nIf it doesn't exist, use your linux package manager to install `pip`. This\nmight look something like:\n\n",
                    "rendered": {
                      "text": "\n::\n\n    $ which pip\n\nIf it doesn't exist, use your linux package manager to install `pip`. This\nmight look something like:\n\n",
                      "markdown": "`\n::\n\n    $ which pip\n\nIf it doesn't exist, use your linux package manager to install `pip`. This\nmight look something like:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 8,
                  "endLine": 255,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nIn depth getting started guide for ``pip`` - https://pip.pypa.io/en/latest/installing.html.\n\nCheck if pip is already available in your system.\n\n::\n\n",
                    "rendered": {
                      "text": "\nIn depth getting started guide for ``pip`` - https://pip.pypa.io/en/latest/installing.html.\n\nCheck if pip is already available in your system.\n\n::\n\n",
                      "markdown": "`\nIn depth getting started guide for ``pip`` - https://pip.pypa.io/en/latest/installing.html.\n\nCheck if pip is already available in your system.\n\n::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 10,
                  "endLine": 248,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    $ which easy_install\n\n    $ sudo easy_install pgcli\n\nLinux:\n======\n",
                    "rendered": {
                      "text": "\n    $ which easy_install\n\n    $ sudo easy_install pgcli\n\nLinux:\n======\n",
                      "markdown": "`\n    $ which easy_install\n\n    $ sudo easy_install pgcli\n\nLinux:\n======\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 11,
                  "endLine": 247,
                  "snippet": {
                    "text": "\n::\n\n    $ which easy_install\n\n    $ sudo easy_install pgcli\n\nLinux:\n",
                    "rendered": {
                      "text": "\n::\n\n    $ which easy_install\n\n    $ sudo easy_install pgcli\n\nLinux:\n",
                      "markdown": "`\n::\n\n    $ which easy_install\n\n    $ sudo easy_install pgcli\n\nLinux:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 32,
                  "endLine": 242,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    $ sudo pip install pgcli\n\nIf pip is not installed check if easy_install is available on the system.\n\n::\n\n",
                    "rendered": {
                      "text": "\n    $ sudo pip install pgcli\n\nIf pip is not installed check if easy_install is available on the system.\n\n::\n\n",
                      "markdown": "`\n    $ sudo pip install pgcli\n\nIf pip is not installed check if easy_install is available on the system.\n\n::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 2,
                  "endLine": 242,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n    $ sudo pip install pgcli\n\nIf pip is not installed check if easy_install is available on the system.\n\n::\n\n",
                    "rendered": {
                      "text": "\n    $ sudo pip install pgcli\n\nIf pip is not installed check if easy_install is available on the system.\n\n::\n\n",
                      "markdown": "`\n    $ sudo pip install pgcli\n\nIf pip is not installed check if easy_install is available on the system.\n\n::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 10,
                  "endLine": 240,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n::\n\n    $ sudo pip install pgcli\n\nIf pip is not installed check if easy_install is available on the system.\n\n",
                    "rendered": {
                      "text": "\n::\n\n    $ sudo pip install pgcli\n\nIf pip is not installed check if easy_install is available on the system.\n\n",
                      "markdown": "`\n::\n\n    $ sudo pip install pgcli\n\nIf pip is not installed check if easy_install is available on the system.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 5,
                  "endLine": 233,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n::\n\n    $ pip install pgcli\n\nIf that fails due to permission issues, you might need to run the command with\nsudo permissions.\n",
                    "rendered": {
                      "text": "\n::\n\n    $ pip install pgcli\n\nIf that fails due to permission issues, you might need to run the command with\nsudo permissions.\n",
                      "markdown": "`\n::\n\n    $ pip install pgcli\n\nIf that fails due to permission issues, you might need to run the command with\nsudo permissions.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 11,
                  "endLine": 228,
                  "snippet": {
                    "text": "\n::\n\n    $ which pip\n\nIf it is installed then you can do:\n\n::\n",
                    "rendered": {
                      "text": "\n::\n\n    $ which pip\n\nIf it is installed then you can do:\n\n::\n",
                      "markdown": "`\n::\n\n    $ which pip\n\nIf it is installed then you can do:\n\n::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 10,
                  "endLine": 90,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n    or\n\n    $ sudo apt-get install pgcli # Only on Debian based Linux (e.g. Ubuntu, Mint, etc)\n    $ brew install pgcli  # Only on macOS\n\nIf you don't know how to install python packages, please check the\n",
                    "rendered": {
                      "text": "\n    or\n\n    $ sudo apt-get install pgcli # Only on Debian based Linux (e.g. Ubuntu, Mint, etc)\n    $ brew install pgcli  # Only on macOS\n\nIf you don't know how to install python packages, please check the\n",
                      "markdown": "`\n    or\n\n    $ sudo apt-get install pgcli # Only on Debian based Linux (e.g. Ubuntu, Mint, etc)\n    $ brew install pgcli  # Only on macOS\n\nIf you don't know how to install python packages, please check the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 5,
                  "endLine": 86,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n::\n\n    $ pip install -U pgcli\n\n    or\n\n",
                    "rendered": {
                      "text": "\n::\n\n    $ pip install -U pgcli\n\n    or\n\n",
                      "markdown": "`\n::\n\n    $ pip install -U pgcli\n\n    or\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli-4.1.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 74,
                  "endColumn": 6,
                  "snippet": {
                    "text": "This is a postgres client that does auto-completion and syntax highlighting.\n\nHome Page: http://pgcli.com\n\nMySQL Equivalent: http://mycli.net\n\n.. image:: screenshots/pgcli.gif\n.. image:: screenshots/image01.png\n",
                    "rendered": {
                      "text": "This is a postgres client that does auto-completion and syntax highlighting.\n\nHome Page: http://pgcli.com\n\nMySQL Equivalent: http://mycli.net\n\n.. image:: screenshots/pgcli.gif\n.. image:: screenshots/image01.png\n",
                      "markdown": "`This is a postgres client that does auto-completion and syntax highlighting.\n\nHome Page: http://pgcli.com\n\nMySQL Equivalent: http://mycli.net\n\n.. image:: screenshots/pgcli.gif\n.. image:: screenshots/image01.png\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/pgstyle.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 50,
                  "endLine": 45,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    Token.Continuation: \"continuation\",\n}\n\n# reverse dict for cli_helpers, because they still expect Pygments tokens.\nPROMPT_STYLE_TO_TOKEN = {v: k for k, v in TOKEN_TO_PROMPT_STYLE.items()}\n\n\n",
                    "rendered": {
                      "text": "    Token.Continuation: \"continuation\",\n}\n\n# reverse dict for cli_helpers, because they still expect Pygments tokens.\nPROMPT_STYLE_TO_TOKEN = {v: k for k, v in TOKEN_TO_PROMPT_STYLE.items()}\n\n\n",
                      "markdown": "`    Token.Continuation: \"continuation\",\n}\n\n# reverse dict for cli_helpers, because they still expect Pygments tokens.\nPROMPT_STYLE_TO_TOKEN = {v: k for k, v in TOKEN_TO_PROMPT_STYLE.items()}\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/parseutils/tables.py"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 49,
                  "endLine": 153,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n    # INSERT statements must stop looking for tables at the sign of first\n    # Punctuation. eg: INSERT INTO abc (col1, col2) VALUES (1, 2)\n    # abc is the table name, but if we don't stop at the first lparen, then\n    # we'll identify abc, col1 and col2 as table names.\n    insert_stmt = parsed[0].token_first().value.lower() == \"insert\"\n    stream = extract_from_part(parsed[0], stop_at_punctuation=insert_stmt)\n",
                    "rendered": {
                      "text": "\n    # INSERT statements must stop looking for tables at the sign of first\n    # Punctuation. eg: INSERT INTO abc (col1, col2) VALUES (1, 2)\n    # abc is the table name, but if we don't stop at the first lparen, then\n    # we'll identify abc, col1 and col2 as table names.\n    insert_stmt = parsed[0].token_first().value.lower() == \"insert\"\n    stream = extract_from_part(parsed[0], stop_at_punctuation=insert_stmt)\n",
                      "markdown": "`\n    # INSERT statements must stop looking for tables at the sign of first\n    # Punctuation. eg: INSERT INTO abc (col1, col2) VALUES (1, 2)\n    # abc is the table name, but if we don't stop at the first lparen, then\n    # we'll identify abc, col1 and col2 as table names.\n    insert_stmt = parsed[0].token_first().value.lower() == \"insert\"\n    stream = extract_from_part(parsed[0], stop_at_punctuation=insert_stmt)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/packages/parseutils/tables.py"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 52,
                  "endLine": 151,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    if not parsed:\n        return ()\n\n    # INSERT statements must stop looking for tables at the sign of first\n    # Punctuation. eg: INSERT INTO abc (col1, col2) VALUES (1, 2)\n    # abc is the table name, but if we don't stop at the first lparen, then\n    # we'll identify abc, col1 and col2 as table names.\n",
                    "rendered": {
                      "text": "    if not parsed:\n        return ()\n\n    # INSERT statements must stop looking for tables at the sign of first\n    # Punctuation. eg: INSERT INTO abc (col1, col2) VALUES (1, 2)\n    # abc is the table name, but if we don't stop at the first lparen, then\n    # we'll identify abc, col1 and col2 as table names.\n",
                      "markdown": "`    if not parsed:\n        return ()\n\n    # INSERT statements must stop looking for tables at the sign of first\n    # Punctuation. eg: INSERT INTO abc (col1, col2) VALUES (1, 2)\n    # abc is the table name, but if we don't stop at the first lparen, then\n    # we'll identify abc, col1 and col2 as table names.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/key_bindings.py"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 33,
                  "endLine": 76,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    @kb.add(\"c-space\")\n    def _(event):\n        \"\"\"\n        Initialize autocompletion at cursor.\n\n        If the autocompletion menu is not showing, display it with the\n        appropriate completions for the context.\n",
                    "rendered": {
                      "text": "    @kb.add(\"c-space\")\n    def _(event):\n        \"\"\"\n        Initialize autocompletion at cursor.\n\n        If the autocompletion menu is not showing, display it with the\n        appropriate completions for the context.\n",
                      "markdown": "`    @kb.add(\"c-space\")\n    def _(event):\n        \"\"\"\n        Initialize autocompletion at cursor.\n\n        If the autocompletion menu is not showing, display it with the\n        appropriate completions for the context.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/key_bindings.py"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 31,
                  "endLine": 50,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    @kb.add(\"tab\")\n    def _(event):\n        \"\"\"Force autocompletion at cursor on non-empty lines.\"\"\"\n\n        _logger.debug(\"Detected <Tab> key.\")\n\n",
                    "rendered": {
                      "text": "\n    @kb.add(\"tab\")\n    def _(event):\n        \"\"\"Force autocompletion at cursor on non-empty lines.\"\"\"\n\n        _logger.debug(\"Detected <Tab> key.\")\n\n",
                      "markdown": "`\n    @kb.add(\"tab\")\n    def _(event):\n        \"\"\"Force autocompletion at cursor on non-empty lines.\"\"\"\n\n        _logger.debug(\"Detected <Tab> key.\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/key_bindings.py"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 32,
                  "endLine": 44,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    @kb.add(\"f5\")\n    def _(event):\n        \"\"\"Toggle between Vi and Emacs mode.\"\"\"\n        _logger.debug(\"Detected F5 key.\")\n        pgcli.explain_mode = not pgcli.explain_mode\n\n",
                    "rendered": {
                      "text": "\n    @kb.add(\"f5\")\n    def _(event):\n        \"\"\"Toggle between Vi and Emacs mode.\"\"\"\n        _logger.debug(\"Detected F5 key.\")\n        pgcli.explain_mode = not pgcli.explain_mode\n\n",
                      "markdown": "`\n    @kb.add(\"f5\")\n    def _(event):\n        \"\"\"Toggle between Vi and Emacs mode.\"\"\"\n        _logger.debug(\"Detected F5 key.\")\n        pgcli.explain_mode = not pgcli.explain_mode\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/key_bindings.py"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 25,
                  "endLine": 44,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    @kb.add(\"f5\")\n    def _(event):\n        \"\"\"Toggle between Vi and Emacs mode.\"\"\"\n        _logger.debug(\"Detected F5 key.\")\n        pgcli.explain_mode = not pgcli.explain_mode\n\n",
                    "rendered": {
                      "text": "\n    @kb.add(\"f5\")\n    def _(event):\n        \"\"\"Toggle between Vi and Emacs mode.\"\"\"\n        _logger.debug(\"Detected F5 key.\")\n        pgcli.explain_mode = not pgcli.explain_mode\n\n",
                      "markdown": "`\n    @kb.add(\"f5\")\n    def _(event):\n        \"\"\"Toggle between Vi and Emacs mode.\"\"\"\n        _logger.debug(\"Detected F5 key.\")\n        pgcli.explain_mode = not pgcli.explain_mode\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/key_bindings.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 32,
                  "endLine": 37,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    @kb.add(\"f4\")\n    def _(event):\n        \"\"\"Toggle between Vi and Emacs mode.\"\"\"\n        _logger.debug(\"Detected F4 key.\")\n        pgcli.vi_mode = not pgcli.vi_mode\n        event.app.editing_mode = EditingMode.VI if pgcli.vi_mode else EditingMode.EMACS\n",
                    "rendered": {
                      "text": "\n    @kb.add(\"f4\")\n    def _(event):\n        \"\"\"Toggle between Vi and Emacs mode.\"\"\"\n        _logger.debug(\"Detected F4 key.\")\n        pgcli.vi_mode = not pgcli.vi_mode\n        event.app.editing_mode = EditingMode.VI if pgcli.vi_mode else EditingMode.EMACS\n",
                      "markdown": "`\n    @kb.add(\"f4\")\n    def _(event):\n        \"\"\"Toggle between Vi and Emacs mode.\"\"\"\n        _logger.debug(\"Detected F4 key.\")\n        pgcli.vi_mode = not pgcli.vi_mode\n        event.app.editing_mode = EditingMode.VI if pgcli.vi_mode else EditingMode.EMACS\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-pgcli-4.1.0-r0.apk/py3-pgcli-4.1.0-r0/usr/lib/python3.12/site-packages/pgcli/key_bindings.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    @kb.add(\"f4\")\n    def _(event):\n        \"\"\"Toggle between Vi and Emacs mode.\"\"\"\n        _logger.debug(\"Detected F4 key.\")\n        pgcli.vi_mode = not pgcli.vi_mode\n        event.app.editing_mode = EditingMode.VI if pgcli.vi_mode else EditingMode.EMACS\n",
                    "rendered": {
                      "text": "\n    @kb.add(\"f4\")\n    def _(event):\n        \"\"\"Toggle between Vi and Emacs mode.\"\"\"\n        _logger.debug(\"Detected F4 key.\")\n        pgcli.vi_mode = not pgcli.vi_mode\n        event.app.editing_mode = EditingMode.VI if pgcli.vi_mode else EditingMode.EMACS\n",
                      "markdown": "`\n    @kb.add(\"f4\")\n    def _(event):\n        \"\"\"Toggle between Vi and Emacs mode.\"\"\"\n        _logger.debug(\"Detected F4 key.\")\n        pgcli.vi_mode = not pgcli.vi_mode\n        event.app.editing_mode = EditingMode.VI if pgcli.vi_mode else EditingMode.EMACS\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}